
CanRotor_Mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001200  0800fc40  0800fc40  0001fc40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010e40  08010e40  00020e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010e48  08010e48  00020e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010e4c  08010e4c  00020e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000068c  20000000  08010e50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dd8  20000690  080114dc  00030690  2**3
                  ALLOC
  8 ._user_heap_stack 00000100  20001468  080114dc  00031468  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0003068c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000396e8  00000000  00000000  000306b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005538  00000000  00000000  00069d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000dbc3  00000000  00000000  0006f2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001040  00000000  00000000  0007ce98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000016d0  00000000  00000000  0007ded8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c369  00000000  00000000  0007f5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000059ec  00000000  00000000  0008b911  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000912fd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004740  00000000  00000000  0009137c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  00095abc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000690 	.word	0x20000690
 800012c:	00000000 	.word	0x00000000
 8000130:	0800fc28 	.word	0x0800fc28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000694 	.word	0x20000694
 800014c:	0800fc28 	.word	0x0800fc28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	; 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	d1ed      	bne.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_fmul>:
 8000d3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d44:	bf1e      	ittt	ne
 8000d46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4a:	ea92 0f0c 	teqne	r2, ip
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d06f      	beq.n	8000e34 <__aeabi_fmul+0xf8>
 8000d54:	441a      	add	r2, r3
 8000d56:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5a:	0240      	lsls	r0, r0, #9
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d62:	d01e      	beq.n	8000da2 <__aeabi_fmul+0x66>
 8000d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d70:	fba0 3101 	umull	r3, r1, r0, r1
 8000d74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d7c:	bf3e      	ittt	cc
 8000d7e:	0049      	lslcc	r1, r1, #1
 8000d80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d84:	005b      	lslcc	r3, r3, #1
 8000d86:	ea40 0001 	orr.w	r0, r0, r1
 8000d8a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d8e:	2afd      	cmp	r2, #253	; 0xfd
 8000d90:	d81d      	bhi.n	8000dce <__aeabi_fmul+0x92>
 8000d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9a:	bf08      	it	eq
 8000d9c:	f020 0001 	biceq.w	r0, r0, #1
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000daa:	bf08      	it	eq
 8000dac:	0249      	lsleq	r1, r1, #9
 8000dae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db6:	3a7f      	subs	r2, #127	; 0x7f
 8000db8:	bfc2      	ittt	gt
 8000dba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc2:	4770      	bxgt	lr
 8000dc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	dc5d      	bgt.n	8000e8c <__aeabi_fmul+0x150>
 8000dd0:	f112 0f19 	cmn.w	r2, #25
 8000dd4:	bfdc      	itt	le
 8000dd6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dda:	4770      	bxle	lr
 8000ddc:	f1c2 0200 	rsb	r2, r2, #0
 8000de0:	0041      	lsls	r1, r0, #1
 8000de2:	fa21 f102 	lsr.w	r1, r1, r2
 8000de6:	f1c2 0220 	rsb	r2, r2, #32
 8000dea:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dee:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df2:	f140 0000 	adc.w	r0, r0, #0
 8000df6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfa:	bf08      	it	eq
 8000dfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e00:	4770      	bx	lr
 8000e02:	f092 0f00 	teq	r2, #0
 8000e06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0040      	lsleq	r0, r0, #1
 8000e0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e12:	3a01      	subeq	r2, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xce>
 8000e16:	ea40 000c 	orr.w	r0, r0, ip
 8000e1a:	f093 0f00 	teq	r3, #0
 8000e1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0049      	lsleq	r1, r1, #1
 8000e26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2a:	3b01      	subeq	r3, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xe6>
 8000e2e:	ea41 010c 	orr.w	r1, r1, ip
 8000e32:	e78f      	b.n	8000d54 <__aeabi_fmul+0x18>
 8000e34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	bf18      	it	ne
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d00a      	beq.n	8000e5a <__aeabi_fmul+0x11e>
 8000e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e48:	bf18      	it	ne
 8000e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	d1d8      	bne.n	8000e02 <__aeabi_fmul+0xc6>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	bf17      	itett	ne
 8000e60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e64:	4608      	moveq	r0, r1
 8000e66:	f091 0f00 	teqne	r1, #0
 8000e6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e6e:	d014      	beq.n	8000e9a <__aeabi_fmul+0x15e>
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d101      	bne.n	8000e7a <__aeabi_fmul+0x13e>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d10f      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e7a:	ea93 0f0c 	teq	r3, ip
 8000e7e:	d103      	bne.n	8000e88 <__aeabi_fmul+0x14c>
 8000e80:	024b      	lsls	r3, r1, #9
 8000e82:	bf18      	it	ne
 8000e84:	4608      	movne	r0, r1
 8000e86:	d108      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e98:	4770      	bx	lr
 8000e9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fdiv>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d069      	beq.n	8000f90 <__aeabi_fdiv+0xec>
 8000ebc:	eba2 0203 	sub.w	r2, r2, r3
 8000ec0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eca:	d037      	beq.n	8000f3c <__aeabi_fdiv+0x98>
 8000ecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000edc:	428b      	cmp	r3, r1
 8000ede:	bf38      	it	cc
 8000ee0:	005b      	lslcc	r3, r3, #1
 8000ee2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ee6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eea:	428b      	cmp	r3, r1
 8000eec:	bf24      	itt	cs
 8000eee:	1a5b      	subcs	r3, r3, r1
 8000ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f06:	bf24      	itt	cs
 8000f08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	bf18      	it	ne
 8000f22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f26:	d1e0      	bne.n	8000eea <__aeabi_fdiv+0x46>
 8000f28:	2afd      	cmp	r2, #253	; 0xfd
 8000f2a:	f63f af50 	bhi.w	8000dce <__aeabi_fmul+0x92>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f34:	bf08      	it	eq
 8000f36:	f020 0001 	biceq.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f44:	327f      	adds	r2, #127	; 0x7f
 8000f46:	bfc2      	ittt	gt
 8000f48:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f50:	4770      	bxgt	lr
 8000f52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	e737      	b.n	8000dce <__aeabi_fmul+0x92>
 8000f5e:	f092 0f00 	teq	r2, #0
 8000f62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0040      	lsleq	r0, r0, #1
 8000f6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f6e:	3a01      	subeq	r2, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xc2>
 8000f72:	ea40 000c 	orr.w	r0, r0, ip
 8000f76:	f093 0f00 	teq	r3, #0
 8000f7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0049      	lsleq	r1, r1, #1
 8000f82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f86:	3b01      	subeq	r3, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xda>
 8000f8a:	ea41 010c 	orr.w	r1, r1, ip
 8000f8e:	e795      	b.n	8000ebc <__aeabi_fdiv+0x18>
 8000f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f94:	ea92 0f0c 	teq	r2, ip
 8000f98:	d108      	bne.n	8000fac <__aeabi_fdiv+0x108>
 8000f9a:	0242      	lsls	r2, r0, #9
 8000f9c:	f47f af7d 	bne.w	8000e9a <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	f47f af70 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e776      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	d104      	bne.n	8000fbc <__aeabi_fdiv+0x118>
 8000fb2:	024b      	lsls	r3, r1, #9
 8000fb4:	f43f af4c 	beq.w	8000e50 <__aeabi_fmul+0x114>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e76e      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1ca      	bne.n	8000f5e <__aeabi_fdiv+0xba>
 8000fc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fcc:	f47f af5c 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fd0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd4:	f47f af3c 	bne.w	8000e50 <__aeabi_fmul+0x114>
 8000fd8:	e75f      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fda:	bf00      	nop

08000fdc <__gesf2>:
 8000fdc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe0:	e006      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__lesf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	e002      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__cmpsf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ffc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001000:	bf18      	it	ne
 8001002:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001006:	d011      	beq.n	800102c <__cmpsf2+0x40>
 8001008:	b001      	add	sp, #4
 800100a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100e:	bf18      	it	ne
 8001010:	ea90 0f01 	teqne	r0, r1
 8001014:	bf58      	it	pl
 8001016:	ebb2 0003 	subspl.w	r0, r2, r3
 800101a:	bf88      	it	hi
 800101c:	17c8      	asrhi	r0, r1, #31
 800101e:	bf38      	it	cc
 8001020:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001024:	bf18      	it	ne
 8001026:	f040 0001 	orrne.w	r0, r0, #1
 800102a:	4770      	bx	lr
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	d102      	bne.n	8001038 <__cmpsf2+0x4c>
 8001032:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001036:	d105      	bne.n	8001044 <__cmpsf2+0x58>
 8001038:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800103c:	d1e4      	bne.n	8001008 <__cmpsf2+0x1c>
 800103e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001042:	d0e1      	beq.n	8001008 <__cmpsf2+0x1c>
 8001044:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__aeabi_cfrcmple>:
 800104c:	4684      	mov	ip, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4661      	mov	r1, ip
 8001052:	e7ff      	b.n	8001054 <__aeabi_cfcmpeq>

08001054 <__aeabi_cfcmpeq>:
 8001054:	b50f      	push	{r0, r1, r2, r3, lr}
 8001056:	f7ff ffc9 	bl	8000fec <__cmpsf2>
 800105a:	2800      	cmp	r0, #0
 800105c:	bf48      	it	mi
 800105e:	f110 0f00 	cmnmi.w	r0, #0
 8001062:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001064 <__aeabi_fcmpeq>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff fff4 	bl	8001054 <__aeabi_cfcmpeq>
 800106c:	bf0c      	ite	eq
 800106e:	2001      	moveq	r0, #1
 8001070:	2000      	movne	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmplt>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffea 	bl	8001054 <__aeabi_cfcmpeq>
 8001080:	bf34      	ite	cc
 8001082:	2001      	movcc	r0, #1
 8001084:	2000      	movcs	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmple>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffe0 	bl	8001054 <__aeabi_cfcmpeq>
 8001094:	bf94      	ite	ls
 8001096:	2001      	movls	r0, #1
 8001098:	2000      	movhi	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmpge>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffd2 	bl	800104c <__aeabi_cfrcmple>
 80010a8:	bf94      	ite	ls
 80010aa:	2001      	movls	r0, #1
 80010ac:	2000      	movhi	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmpgt>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffc8 	bl	800104c <__aeabi_cfrcmple>
 80010bc:	bf34      	ite	cc
 80010be:	2001      	movcc	r0, #1
 80010c0:	2000      	movcs	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpun>:
 80010c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__aeabi_fcmpun+0x14>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d108      	bne.n	80010ee <__aeabi_fcmpun+0x26>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d102      	bne.n	80010e8 <__aeabi_fcmpun+0x20>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d102      	bne.n	80010ee <__aeabi_fcmpun+0x26>
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0001 	mov.w	r0, #1
 80010f2:	4770      	bx	lr

080010f4 <__aeabi_f2iz>:
 80010f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010fc:	d30f      	bcc.n	800111e <__aeabi_f2iz+0x2a>
 80010fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001102:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001106:	d90d      	bls.n	8001124 <__aeabi_f2iz+0x30>
 8001108:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800110c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001110:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001114:	fa23 f002 	lsr.w	r0, r3, r2
 8001118:	bf18      	it	ne
 800111a:	4240      	negne	r0, r0
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2iz+0x3a>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d105      	bne.n	800113a <__aeabi_f2iz+0x46>
 800112e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001132:	bf08      	it	eq
 8001134:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr

08001140 <__aeabi_f2uiz>:
 8001140:	0042      	lsls	r2, r0, #1
 8001142:	d20e      	bcs.n	8001162 <__aeabi_f2uiz+0x22>
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30b      	bcc.n	8001162 <__aeabi_f2uiz+0x22>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d409      	bmi.n	8001168 <__aeabi_f2uiz+0x28>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	4770      	bx	lr
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	4770      	bx	lr
 8001168:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800116c:	d101      	bne.n	8001172 <__aeabi_f2uiz+0x32>
 800116e:	0242      	lsls	r2, r0, #9
 8001170:	d102      	bne.n	8001178 <__aeabi_f2uiz+0x38>
 8001172:	f04f 30ff 	mov.w	r0, #4294967295
 8001176:	4770      	bx	lr
 8001178:	f04f 0000 	mov.w	r0, #0
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <__aeabi_uldivmod>:
 8001180:	b953      	cbnz	r3, 8001198 <__aeabi_uldivmod+0x18>
 8001182:	b94a      	cbnz	r2, 8001198 <__aeabi_uldivmod+0x18>
 8001184:	2900      	cmp	r1, #0
 8001186:	bf08      	it	eq
 8001188:	2800      	cmpeq	r0, #0
 800118a:	bf1c      	itt	ne
 800118c:	f04f 31ff 	movne.w	r1, #4294967295
 8001190:	f04f 30ff 	movne.w	r0, #4294967295
 8001194:	f000 b97a 	b.w	800148c <__aeabi_idiv0>
 8001198:	f1ad 0c08 	sub.w	ip, sp, #8
 800119c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a0:	f000 f806 	bl	80011b0 <__udivmoddi4>
 80011a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ac:	b004      	add	sp, #16
 80011ae:	4770      	bx	lr

080011b0 <__udivmoddi4>:
 80011b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b4:	468c      	mov	ip, r1
 80011b6:	460e      	mov	r6, r1
 80011b8:	4604      	mov	r4, r0
 80011ba:	9d08      	ldr	r5, [sp, #32]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d150      	bne.n	8001262 <__udivmoddi4+0xb2>
 80011c0:	428a      	cmp	r2, r1
 80011c2:	4617      	mov	r7, r2
 80011c4:	d96c      	bls.n	80012a0 <__udivmoddi4+0xf0>
 80011c6:	fab2 fe82 	clz	lr, r2
 80011ca:	f1be 0f00 	cmp.w	lr, #0
 80011ce:	d00b      	beq.n	80011e8 <__udivmoddi4+0x38>
 80011d0:	f1ce 0c20 	rsb	ip, lr, #32
 80011d4:	fa01 f60e 	lsl.w	r6, r1, lr
 80011d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80011dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80011e0:	ea4c 0c06 	orr.w	ip, ip, r6
 80011e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80011e8:	0c3a      	lsrs	r2, r7, #16
 80011ea:	fbbc f9f2 	udiv	r9, ip, r2
 80011ee:	b2bb      	uxth	r3, r7
 80011f0:	fb02 cc19 	mls	ip, r2, r9, ip
 80011f4:	fb09 fa03 	mul.w	sl, r9, r3
 80011f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80011fc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8001200:	45b2      	cmp	sl, r6
 8001202:	d90a      	bls.n	800121a <__udivmoddi4+0x6a>
 8001204:	19f6      	adds	r6, r6, r7
 8001206:	f109 31ff 	add.w	r1, r9, #4294967295
 800120a:	f080 8125 	bcs.w	8001458 <__udivmoddi4+0x2a8>
 800120e:	45b2      	cmp	sl, r6
 8001210:	f240 8122 	bls.w	8001458 <__udivmoddi4+0x2a8>
 8001214:	f1a9 0902 	sub.w	r9, r9, #2
 8001218:	443e      	add	r6, r7
 800121a:	eba6 060a 	sub.w	r6, r6, sl
 800121e:	fbb6 f0f2 	udiv	r0, r6, r2
 8001222:	fb02 6610 	mls	r6, r2, r0, r6
 8001226:	fb00 f303 	mul.w	r3, r0, r3
 800122a:	b2a4      	uxth	r4, r4
 800122c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001230:	42a3      	cmp	r3, r4
 8001232:	d909      	bls.n	8001248 <__udivmoddi4+0x98>
 8001234:	19e4      	adds	r4, r4, r7
 8001236:	f100 32ff 	add.w	r2, r0, #4294967295
 800123a:	f080 810b 	bcs.w	8001454 <__udivmoddi4+0x2a4>
 800123e:	42a3      	cmp	r3, r4
 8001240:	f240 8108 	bls.w	8001454 <__udivmoddi4+0x2a4>
 8001244:	3802      	subs	r0, #2
 8001246:	443c      	add	r4, r7
 8001248:	2100      	movs	r1, #0
 800124a:	1ae4      	subs	r4, r4, r3
 800124c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001250:	2d00      	cmp	r5, #0
 8001252:	d062      	beq.n	800131a <__udivmoddi4+0x16a>
 8001254:	2300      	movs	r3, #0
 8001256:	fa24 f40e 	lsr.w	r4, r4, lr
 800125a:	602c      	str	r4, [r5, #0]
 800125c:	606b      	str	r3, [r5, #4]
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	428b      	cmp	r3, r1
 8001264:	d907      	bls.n	8001276 <__udivmoddi4+0xc6>
 8001266:	2d00      	cmp	r5, #0
 8001268:	d055      	beq.n	8001316 <__udivmoddi4+0x166>
 800126a:	2100      	movs	r1, #0
 800126c:	e885 0041 	stmia.w	r5, {r0, r6}
 8001270:	4608      	mov	r0, r1
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	fab3 f183 	clz	r1, r3
 800127a:	2900      	cmp	r1, #0
 800127c:	f040 808f 	bne.w	800139e <__udivmoddi4+0x1ee>
 8001280:	42b3      	cmp	r3, r6
 8001282:	d302      	bcc.n	800128a <__udivmoddi4+0xda>
 8001284:	4282      	cmp	r2, r0
 8001286:	f200 80fc 	bhi.w	8001482 <__udivmoddi4+0x2d2>
 800128a:	1a84      	subs	r4, r0, r2
 800128c:	eb66 0603 	sbc.w	r6, r6, r3
 8001290:	2001      	movs	r0, #1
 8001292:	46b4      	mov	ip, r6
 8001294:	2d00      	cmp	r5, #0
 8001296:	d040      	beq.n	800131a <__udivmoddi4+0x16a>
 8001298:	e885 1010 	stmia.w	r5, {r4, ip}
 800129c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a0:	b912      	cbnz	r2, 80012a8 <__udivmoddi4+0xf8>
 80012a2:	2701      	movs	r7, #1
 80012a4:	fbb7 f7f2 	udiv	r7, r7, r2
 80012a8:	fab7 fe87 	clz	lr, r7
 80012ac:	f1be 0f00 	cmp.w	lr, #0
 80012b0:	d135      	bne.n	800131e <__udivmoddi4+0x16e>
 80012b2:	2101      	movs	r1, #1
 80012b4:	1bf6      	subs	r6, r6, r7
 80012b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80012ba:	fa1f f887 	uxth.w	r8, r7
 80012be:	fbb6 f2fc 	udiv	r2, r6, ip
 80012c2:	fb0c 6612 	mls	r6, ip, r2, r6
 80012c6:	fb08 f002 	mul.w	r0, r8, r2
 80012ca:	0c23      	lsrs	r3, r4, #16
 80012cc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80012d0:	42b0      	cmp	r0, r6
 80012d2:	d907      	bls.n	80012e4 <__udivmoddi4+0x134>
 80012d4:	19f6      	adds	r6, r6, r7
 80012d6:	f102 33ff 	add.w	r3, r2, #4294967295
 80012da:	d202      	bcs.n	80012e2 <__udivmoddi4+0x132>
 80012dc:	42b0      	cmp	r0, r6
 80012de:	f200 80d2 	bhi.w	8001486 <__udivmoddi4+0x2d6>
 80012e2:	461a      	mov	r2, r3
 80012e4:	1a36      	subs	r6, r6, r0
 80012e6:	fbb6 f0fc 	udiv	r0, r6, ip
 80012ea:	fb0c 6610 	mls	r6, ip, r0, r6
 80012ee:	fb08 f800 	mul.w	r8, r8, r0
 80012f2:	b2a3      	uxth	r3, r4
 80012f4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80012f8:	45a0      	cmp	r8, r4
 80012fa:	d907      	bls.n	800130c <__udivmoddi4+0x15c>
 80012fc:	19e4      	adds	r4, r4, r7
 80012fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8001302:	d202      	bcs.n	800130a <__udivmoddi4+0x15a>
 8001304:	45a0      	cmp	r8, r4
 8001306:	f200 80b9 	bhi.w	800147c <__udivmoddi4+0x2cc>
 800130a:	4618      	mov	r0, r3
 800130c:	eba4 0408 	sub.w	r4, r4, r8
 8001310:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001314:	e79c      	b.n	8001250 <__udivmoddi4+0xa0>
 8001316:	4629      	mov	r1, r5
 8001318:	4628      	mov	r0, r5
 800131a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800131e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001322:	f1ce 0320 	rsb	r3, lr, #32
 8001326:	fa26 f203 	lsr.w	r2, r6, r3
 800132a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800132e:	fbb2 f1fc 	udiv	r1, r2, ip
 8001332:	fa1f f887 	uxth.w	r8, r7
 8001336:	fb0c 2211 	mls	r2, ip, r1, r2
 800133a:	fa06 f60e 	lsl.w	r6, r6, lr
 800133e:	fa20 f303 	lsr.w	r3, r0, r3
 8001342:	fb01 f908 	mul.w	r9, r1, r8
 8001346:	4333      	orrs	r3, r6
 8001348:	0c1e      	lsrs	r6, r3, #16
 800134a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800134e:	45b1      	cmp	r9, r6
 8001350:	fa00 f40e 	lsl.w	r4, r0, lr
 8001354:	d909      	bls.n	800136a <__udivmoddi4+0x1ba>
 8001356:	19f6      	adds	r6, r6, r7
 8001358:	f101 32ff 	add.w	r2, r1, #4294967295
 800135c:	f080 808c 	bcs.w	8001478 <__udivmoddi4+0x2c8>
 8001360:	45b1      	cmp	r9, r6
 8001362:	f240 8089 	bls.w	8001478 <__udivmoddi4+0x2c8>
 8001366:	3902      	subs	r1, #2
 8001368:	443e      	add	r6, r7
 800136a:	eba6 0609 	sub.w	r6, r6, r9
 800136e:	fbb6 f0fc 	udiv	r0, r6, ip
 8001372:	fb0c 6210 	mls	r2, ip, r0, r6
 8001376:	fb00 f908 	mul.w	r9, r0, r8
 800137a:	b29e      	uxth	r6, r3
 800137c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001380:	45b1      	cmp	r9, r6
 8001382:	d907      	bls.n	8001394 <__udivmoddi4+0x1e4>
 8001384:	19f6      	adds	r6, r6, r7
 8001386:	f100 33ff 	add.w	r3, r0, #4294967295
 800138a:	d271      	bcs.n	8001470 <__udivmoddi4+0x2c0>
 800138c:	45b1      	cmp	r9, r6
 800138e:	d96f      	bls.n	8001470 <__udivmoddi4+0x2c0>
 8001390:	3802      	subs	r0, #2
 8001392:	443e      	add	r6, r7
 8001394:	eba6 0609 	sub.w	r6, r6, r9
 8001398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800139c:	e78f      	b.n	80012be <__udivmoddi4+0x10e>
 800139e:	f1c1 0720 	rsb	r7, r1, #32
 80013a2:	fa22 f807 	lsr.w	r8, r2, r7
 80013a6:	408b      	lsls	r3, r1
 80013a8:	ea48 0303 	orr.w	r3, r8, r3
 80013ac:	fa26 f407 	lsr.w	r4, r6, r7
 80013b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80013b4:	fbb4 f9fe 	udiv	r9, r4, lr
 80013b8:	fa1f fc83 	uxth.w	ip, r3
 80013bc:	fb0e 4419 	mls	r4, lr, r9, r4
 80013c0:	408e      	lsls	r6, r1
 80013c2:	fa20 f807 	lsr.w	r8, r0, r7
 80013c6:	fb09 fa0c 	mul.w	sl, r9, ip
 80013ca:	ea48 0806 	orr.w	r8, r8, r6
 80013ce:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80013d2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80013d6:	45a2      	cmp	sl, r4
 80013d8:	fa02 f201 	lsl.w	r2, r2, r1
 80013dc:	fa00 f601 	lsl.w	r6, r0, r1
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x244>
 80013e2:	18e4      	adds	r4, r4, r3
 80013e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80013e8:	d244      	bcs.n	8001474 <__udivmoddi4+0x2c4>
 80013ea:	45a2      	cmp	sl, r4
 80013ec:	d942      	bls.n	8001474 <__udivmoddi4+0x2c4>
 80013ee:	f1a9 0902 	sub.w	r9, r9, #2
 80013f2:	441c      	add	r4, r3
 80013f4:	eba4 040a 	sub.w	r4, r4, sl
 80013f8:	fbb4 f0fe 	udiv	r0, r4, lr
 80013fc:	fb0e 4410 	mls	r4, lr, r0, r4
 8001400:	fb00 fc0c 	mul.w	ip, r0, ip
 8001404:	fa1f f888 	uxth.w	r8, r8
 8001408:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800140c:	45a4      	cmp	ip, r4
 800140e:	d907      	bls.n	8001420 <__udivmoddi4+0x270>
 8001410:	18e4      	adds	r4, r4, r3
 8001412:	f100 3eff 	add.w	lr, r0, #4294967295
 8001416:	d229      	bcs.n	800146c <__udivmoddi4+0x2bc>
 8001418:	45a4      	cmp	ip, r4
 800141a:	d927      	bls.n	800146c <__udivmoddi4+0x2bc>
 800141c:	3802      	subs	r0, #2
 800141e:	441c      	add	r4, r3
 8001420:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001424:	fba0 8902 	umull	r8, r9, r0, r2
 8001428:	eba4 0c0c 	sub.w	ip, r4, ip
 800142c:	45cc      	cmp	ip, r9
 800142e:	46c2      	mov	sl, r8
 8001430:	46ce      	mov	lr, r9
 8001432:	d315      	bcc.n	8001460 <__udivmoddi4+0x2b0>
 8001434:	d012      	beq.n	800145c <__udivmoddi4+0x2ac>
 8001436:	b155      	cbz	r5, 800144e <__udivmoddi4+0x29e>
 8001438:	ebb6 030a 	subs.w	r3, r6, sl
 800143c:	eb6c 060e 	sbc.w	r6, ip, lr
 8001440:	fa06 f707 	lsl.w	r7, r6, r7
 8001444:	40cb      	lsrs	r3, r1
 8001446:	431f      	orrs	r7, r3
 8001448:	40ce      	lsrs	r6, r1
 800144a:	602f      	str	r7, [r5, #0]
 800144c:	606e      	str	r6, [r5, #4]
 800144e:	2100      	movs	r1, #0
 8001450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001454:	4610      	mov	r0, r2
 8001456:	e6f7      	b.n	8001248 <__udivmoddi4+0x98>
 8001458:	4689      	mov	r9, r1
 800145a:	e6de      	b.n	800121a <__udivmoddi4+0x6a>
 800145c:	4546      	cmp	r6, r8
 800145e:	d2ea      	bcs.n	8001436 <__udivmoddi4+0x286>
 8001460:	ebb8 0a02 	subs.w	sl, r8, r2
 8001464:	eb69 0e03 	sbc.w	lr, r9, r3
 8001468:	3801      	subs	r0, #1
 800146a:	e7e4      	b.n	8001436 <__udivmoddi4+0x286>
 800146c:	4670      	mov	r0, lr
 800146e:	e7d7      	b.n	8001420 <__udivmoddi4+0x270>
 8001470:	4618      	mov	r0, r3
 8001472:	e78f      	b.n	8001394 <__udivmoddi4+0x1e4>
 8001474:	4681      	mov	r9, r0
 8001476:	e7bd      	b.n	80013f4 <__udivmoddi4+0x244>
 8001478:	4611      	mov	r1, r2
 800147a:	e776      	b.n	800136a <__udivmoddi4+0x1ba>
 800147c:	3802      	subs	r0, #2
 800147e:	443c      	add	r4, r7
 8001480:	e744      	b.n	800130c <__udivmoddi4+0x15c>
 8001482:	4608      	mov	r0, r1
 8001484:	e706      	b.n	8001294 <__udivmoddi4+0xe4>
 8001486:	3a02      	subs	r2, #2
 8001488:	443e      	add	r6, r7
 800148a:	e72b      	b.n	80012e4 <__udivmoddi4+0x134>

0800148c <__aeabi_idiv0>:
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001490:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_InitTick+0x3c>)
{
 8001494:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001496:	7818      	ldrb	r0, [r3, #0]
 8001498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149c:	fbb3 f3f0 	udiv	r3, r3, r0
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <HAL_InitTick+0x40>)
 80014a2:	6810      	ldr	r0, [r2, #0]
 80014a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80014a8:	f000 fb00 	bl	8001aac <HAL_SYSTICK_Config>
 80014ac:	4604      	mov	r4, r0
 80014ae:	b958      	cbnz	r0, 80014c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b0:	2d0f      	cmp	r5, #15
 80014b2:	d809      	bhi.n	80014c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	4602      	mov	r2, r0
 80014b6:	4629      	mov	r1, r5
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f000 fab6 	bl	8001a2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_InitTick+0x44>)
 80014c2:	4620      	mov	r0, r4
 80014c4:	601d      	str	r5, [r3, #0]
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000014 	.word	0x20000014
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_Init+0x20>)
{
 80014da:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	f043 0310 	orr.w	r3, r3, #16
 80014e4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e6:	f000 fa8f 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff ffd0 	bl	8001490 <HAL_InitTick>
  HAL_MspInit();
 80014f0:	f007 fbaa 	bl	8008c48 <HAL_MspInit>
}
 80014f4:	2000      	movs	r0, #0
 80014f6:	bd08      	pop	{r3, pc}
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014fc:	4a03      	ldr	r2, [pc, #12]	; (800150c <HAL_IncTick+0x10>)
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_IncTick+0x14>)
 8001500:	6811      	ldr	r1, [r2, #0]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	440b      	add	r3, r1
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000ab4 	.word	0x20000ab4
 8001510:	20000000 	.word	0x20000000

08001514 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001514:	4b01      	ldr	r3, [pc, #4]	; (800151c <HAL_GetTick+0x8>)
 8001516:	6818      	ldr	r0, [r3, #0]
}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000ab4 	.word	0x20000ab4

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fff6 	bl	8001514 <HAL_GetTick>
 8001528:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800152c:	bf1e      	ittt	ne
 800152e:	4b04      	ldrne	r3, [pc, #16]	; (8001540 <HAL_Delay+0x20>)
 8001530:	781b      	ldrbne	r3, [r3, #0]
 8001532:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001534:	f7ff ffee 	bl	8001514 <HAL_GetTick>
 8001538:	1b40      	subs	r0, r0, r5
 800153a:	4284      	cmp	r4, r0
 800153c:	d8fa      	bhi.n	8001534 <HAL_Delay+0x14>
  {
  }
}
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	20000000 	.word	0x20000000

08001544 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001546:	2600      	movs	r6, #0
{
 8001548:	4604      	mov	r4, r0
 800154a:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800154c:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800154e:	f7ff ffe1 	bl	8001514 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001552:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001554:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	05d2      	lsls	r2, r2, #23
 800155a:	d508      	bpl.n	800156e <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 800155c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8001560:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001564:	f043 0320 	orr.w	r3, r3, #32
 8001568:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800156a:	b003      	add	sp, #12
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	05d6      	lsls	r6, r2, #23
 8001572:	d403      	bmi.n	800157c <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001576:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800157a:	d03b      	beq.n	80015f4 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800157c:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <HAL_ADC_PollForConversion+0x124>)
 800157e:	2002      	movs	r0, #2
 8001580:	681e      	ldr	r6, [r3, #0]
 8001582:	f001 fe55 	bl	8003230 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	4a38      	ldr	r2, [pc, #224]	; (800166c <HAL_ADC_PollForConversion+0x128>)
 800158a:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800158c:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001590:	4211      	tst	r1, r2
 8001592:	4a37      	ldr	r2, [pc, #220]	; (8001670 <HAL_ADC_PollForConversion+0x12c>)
 8001594:	d14f      	bne.n	8001636 <HAL_ADC_PollForConversion+0xf2>
 8001596:	68de      	ldr	r6, [r3, #12]
 8001598:	4936      	ldr	r1, [pc, #216]	; (8001674 <HAL_ADC_PollForConversion+0x130>)
 800159a:	420e      	tst	r6, r1
 800159c:	d14b      	bne.n	8001636 <HAL_ADC_PollForConversion+0xf2>
 800159e:	6919      	ldr	r1, [r3, #16]
 80015a0:	4211      	tst	r1, r2
 80015a2:	d159      	bne.n	8001658 <HAL_ADC_PollForConversion+0x114>
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_ADC_PollForConversion+0x134>)
 80015a8:	421a      	tst	r2, r3
 80015aa:	bf14      	ite	ne
 80015ac:	2329      	movne	r3, #41	; 0x29
 80015ae:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015b0:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015b4:	9b01      	ldr	r3, [sp, #4]
 80015b6:	429e      	cmp	r6, r3
 80015b8:	d920      	bls.n	80015fc <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 80015ba:	1c6b      	adds	r3, r5, #1
 80015bc:	d005      	beq.n	80015ca <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015be:	b15d      	cbz	r5, 80015d8 <HAL_ADC_PollForConversion+0x94>
 80015c0:	f7ff ffa8 	bl	8001514 <HAL_GetTick>
 80015c4:	1bc0      	subs	r0, r0, r7
 80015c6:	4285      	cmp	r5, r0
 80015c8:	d306      	bcc.n	80015d8 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 80015ca:	9b01      	ldr	r3, [sp, #4]
 80015cc:	3301      	adds	r3, #1
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	e7f0      	b.n	80015b4 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 80015d2:	1c68      	adds	r0, r5, #1
 80015d4:	d00f      	beq.n	80015f6 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015d6:	b945      	cbnz	r5, 80015ea <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 80015da:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80015e2:	2300      	movs	r3, #0
 80015e4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 80015e8:	e7bf      	b.n	800156a <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015ea:	f7ff ff93 	bl	8001514 <HAL_GetTick>
 80015ee:	1bc0      	subs	r0, r0, r7
 80015f0:	4285      	cmp	r5, r0
 80015f2:	d3f1      	bcc.n	80015d8 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015f4:	6822      	ldr	r2, [r4, #0]
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	0799      	lsls	r1, r3, #30
 80015fa:	d5ea      	bpl.n	80015d2 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015fc:	f06f 0312 	mvn.w	r3, #18
 8001600:	6822      	ldr	r2, [r4, #0]
 8001602:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160a:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800160c:	6893      	ldr	r3, [r2, #8]
 800160e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001612:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001616:	d125      	bne.n	8001664 <HAL_ADC_PollForConversion+0x120>
 8001618:	68e3      	ldr	r3, [r4, #12]
 800161a:	bb1b      	cbnz	r3, 8001664 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800161e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001622:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001624:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001626:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800162a:	d11b      	bne.n	8001664 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800162c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	62a3      	str	r3, [r4, #40]	; 0x28
 8001634:	e799      	b.n	800156a <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001636:	6919      	ldr	r1, [r3, #16]
 8001638:	4211      	tst	r1, r2
 800163a:	d103      	bne.n	8001644 <HAL_ADC_PollForConversion+0x100>
 800163c:	68d9      	ldr	r1, [r3, #12]
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_ADC_PollForConversion+0x134>)
 8001640:	4211      	tst	r1, r2
 8001642:	d00b      	beq.n	800165c <HAL_ADC_PollForConversion+0x118>
 8001644:	6919      	ldr	r1, [r3, #16]
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_ADC_PollForConversion+0x138>)
 8001648:	4211      	tst	r1, r2
 800164a:	d109      	bne.n	8001660 <HAL_ADC_PollForConversion+0x11c>
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4213      	tst	r3, r2
 8001650:	bf14      	ite	ne
 8001652:	23fc      	movne	r3, #252	; 0xfc
 8001654:	2354      	moveq	r3, #84	; 0x54
 8001656:	e7ab      	b.n	80015b0 <HAL_ADC_PollForConversion+0x6c>
 8001658:	2329      	movs	r3, #41	; 0x29
 800165a:	e7a9      	b.n	80015b0 <HAL_ADC_PollForConversion+0x6c>
 800165c:	2354      	movs	r3, #84	; 0x54
 800165e:	e7a7      	b.n	80015b0 <HAL_ADC_PollForConversion+0x6c>
 8001660:	23fc      	movs	r3, #252	; 0xfc
 8001662:	e7a5      	b.n	80015b0 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 8001664:	2000      	movs	r0, #0
 8001666:	e780      	b.n	800156a <HAL_ADC_PollForConversion+0x26>
 8001668:	20000014 	.word	0x20000014
 800166c:	24924924 	.word	0x24924924
 8001670:	12492492 	.word	0x12492492
 8001674:	00924924 	.word	0x00924924
 8001678:	00492492 	.word	0x00492492
 800167c:	00249249 	.word	0x00249249

08001680 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001680:	6803      	ldr	r3, [r0, #0]
 8001682:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001684:	4770      	bx	lr
	...

08001688 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001688:	2300      	movs	r3, #0
{ 
 800168a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800168c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800168e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001692:	2b01      	cmp	r3, #1
 8001694:	d074      	beq.n	8001780 <HAL_ADC_ConfigChannel+0xf8>
 8001696:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001698:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800169a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800169e:	2d06      	cmp	r5, #6
 80016a0:	6802      	ldr	r2, [r0, #0]
 80016a2:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80016a6:	680c      	ldr	r4, [r1, #0]
 80016a8:	d825      	bhi.n	80016f6 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016aa:	442b      	add	r3, r5
 80016ac:	251f      	movs	r5, #31
 80016ae:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80016b0:	3b05      	subs	r3, #5
 80016b2:	409d      	lsls	r5, r3
 80016b4:	ea26 0505 	bic.w	r5, r6, r5
 80016b8:	fa04 f303 	lsl.w	r3, r4, r3
 80016bc:	432b      	orrs	r3, r5
 80016be:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016c0:	2c09      	cmp	r4, #9
 80016c2:	ea4f 0344 	mov.w	r3, r4, lsl #1
 80016c6:	688d      	ldr	r5, [r1, #8]
 80016c8:	d92f      	bls.n	800172a <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016ca:	2607      	movs	r6, #7
 80016cc:	4423      	add	r3, r4
 80016ce:	68d1      	ldr	r1, [r2, #12]
 80016d0:	3b1e      	subs	r3, #30
 80016d2:	409e      	lsls	r6, r3
 80016d4:	ea21 0106 	bic.w	r1, r1, r6
 80016d8:	fa05 f303 	lsl.w	r3, r5, r3
 80016dc:	430b      	orrs	r3, r1
 80016de:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016e0:	f1a4 0310 	sub.w	r3, r4, #16
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d92b      	bls.n	8001740 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	b002      	add	sp, #8
 80016f4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80016f6:	2d0c      	cmp	r5, #12
 80016f8:	d80b      	bhi.n	8001712 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016fa:	442b      	add	r3, r5
 80016fc:	251f      	movs	r5, #31
 80016fe:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001700:	3b23      	subs	r3, #35	; 0x23
 8001702:	409d      	lsls	r5, r3
 8001704:	ea26 0505 	bic.w	r5, r6, r5
 8001708:	fa04 f303 	lsl.w	r3, r4, r3
 800170c:	432b      	orrs	r3, r5
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	e7d6      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001712:	442b      	add	r3, r5
 8001714:	251f      	movs	r5, #31
 8001716:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001718:	3b41      	subs	r3, #65	; 0x41
 800171a:	409d      	lsls	r5, r3
 800171c:	ea26 0505 	bic.w	r5, r6, r5
 8001720:	fa04 f303 	lsl.w	r3, r4, r3
 8001724:	432b      	orrs	r3, r5
 8001726:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001728:	e7ca      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800172a:	2607      	movs	r6, #7
 800172c:	6911      	ldr	r1, [r2, #16]
 800172e:	4423      	add	r3, r4
 8001730:	409e      	lsls	r6, r3
 8001732:	ea21 0106 	bic.w	r1, r1, r6
 8001736:	fa05 f303 	lsl.w	r3, r5, r3
 800173a:	430b      	orrs	r3, r1
 800173c:	6113      	str	r3, [r2, #16]
 800173e:	e7cf      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <HAL_ADC_ConfigChannel+0xfc>)
 8001742:	429a      	cmp	r2, r3
 8001744:	d116      	bne.n	8001774 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001746:	6893      	ldr	r3, [r2, #8]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	d4cd      	bmi.n	80016e8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800174c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800174e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001754:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001756:	d1c7      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_ADC_ConfigChannel+0x100>)
 800175a:	4a0c      	ldr	r2, [pc, #48]	; (800178c <HAL_ADC_ConfigChannel+0x104>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001762:	230a      	movs	r3, #10
 8001764:	4353      	muls	r3, r2
            wait_loop_index--;
 8001766:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001768:	9b01      	ldr	r3, [sp, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0bc      	beq.n	80016e8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800176e:	9b01      	ldr	r3, [sp, #4]
 8001770:	3b01      	subs	r3, #1
 8001772:	e7f8      	b.n	8001766 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001774:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e7b4      	b.n	80016ea <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001780:	2302      	movs	r3, #2
 8001782:	e7b5      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x68>
 8001784:	40012400 	.word	0x40012400
 8001788:	20000014 	.word	0x20000014
 800178c:	000f4240 	.word	0x000f4240

08001790 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001790:	2300      	movs	r3, #0
{
 8001792:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001794:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001796:	6803      	ldr	r3, [r0, #0]
{
 8001798:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	07d2      	lsls	r2, r2, #31
 800179e:	d502      	bpl.n	80017a6 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017a0:	2000      	movs	r0, #0
}
 80017a2:	b002      	add	sp, #8
 80017a4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <ADC_Enable+0x68>)
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <ADC_Enable+0x6c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80017b8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80017ba:	9b01      	ldr	r3, [sp, #4]
 80017bc:	b9c3      	cbnz	r3, 80017f0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80017be:	f7ff fea9 	bl	8001514 <HAL_GetTick>
 80017c2:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	689d      	ldr	r5, [r3, #8]
 80017c8:	f015 0501 	ands.w	r5, r5, #1
 80017cc:	d1e8      	bne.n	80017a0 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017ce:	f7ff fea1 	bl	8001514 <HAL_GetTick>
 80017d2:	1b80      	subs	r0, r0, r6
 80017d4:	2802      	cmp	r0, #2
 80017d6:	d9f5      	bls.n	80017c4 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80017da:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017de:	f043 0310 	orr.w	r3, r3, #16
 80017e2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80017e6:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017ee:	e7d8      	b.n	80017a2 <ADC_Enable+0x12>
      wait_loop_index--;
 80017f0:	9b01      	ldr	r3, [sp, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	e7e0      	b.n	80017b8 <ADC_Enable+0x28>
 80017f6:	bf00      	nop
 80017f8:	20000014 	.word	0x20000014
 80017fc:	000f4240 	.word	0x000f4240

08001800 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001800:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001804:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001806:	2b01      	cmp	r3, #1
{
 8001808:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800180a:	d054      	beq.n	80018b6 <HAL_ADC_Start+0xb6>
 800180c:	2301      	movs	r3, #1
 800180e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001812:	f7ff ffbd 	bl	8001790 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001816:	2800      	cmp	r0, #0
 8001818:	d149      	bne.n	80018ae <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800181c:	4a27      	ldr	r2, [pc, #156]	; (80018bc <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800181e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	4293      	cmp	r3, r2
 8001830:	d104      	bne.n	800183c <HAL_ADC_Start+0x3c>
 8001832:	4923      	ldr	r1, [pc, #140]	; (80018c0 <HAL_ADC_Start+0xc0>)
 8001834:	684a      	ldr	r2, [r1, #4]
 8001836:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800183a:	d12e      	bne.n	800189a <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800183c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800183e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001842:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001844:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001846:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001848:	bf41      	itttt	mi
 800184a:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 800184c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001850:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001854:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001856:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800185c:	bf1c      	itt	ne
 800185e:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8001860:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001864:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8001866:	2200      	movs	r2, #0
 8001868:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800186c:	f06f 0202 	mvn.w	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001878:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800187c:	d113      	bne.n	80018a6 <HAL_ADC_Start+0xa6>
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <HAL_ADC_Start+0xbc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d105      	bne.n	8001890 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001884:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001888:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800188a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800188e:	d10a      	bne.n	80018a6 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800189a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800189c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018a0:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018a2:	684a      	ldr	r2, [r1, #4]
 80018a4:	e7cf      	b.n	8001846 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018ac:	e7f3      	b.n	8001896 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 80018ae:	2300      	movs	r3, #0
 80018b0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80018b4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80018b6:	2002      	movs	r0, #2
}
 80018b8:	bd10      	pop	{r4, pc}
 80018ba:	bf00      	nop
 80018bc:	40012800 	.word	0x40012800
 80018c0:	40012400 	.word	0x40012400

080018c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c6:	6803      	ldr	r3, [r0, #0]
{
 80018c8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	07d2      	lsls	r2, r2, #31
 80018ce:	d401      	bmi.n	80018d4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018d0:	2000      	movs	r0, #0
 80018d2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80018dc:	f7ff fe1a 	bl	8001514 <HAL_GetTick>
 80018e0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	07db      	lsls	r3, r3, #31
 80018e8:	d5f2      	bpl.n	80018d0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018ea:	f7ff fe13 	bl	8001514 <HAL_GetTick>
 80018ee:	1b40      	subs	r0, r0, r5
 80018f0:	2802      	cmp	r0, #2
 80018f2:	d9f6      	bls.n	80018e2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001906:	bd38      	pop	{r3, r4, r5, pc}

08001908 <HAL_ADC_Init>:
{
 8001908:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800190a:	4604      	mov	r4, r0
 800190c:	2800      	cmp	r0, #0
 800190e:	d071      	beq.n	80019f4 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001910:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001912:	b923      	cbnz	r3, 800191e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001914:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001916:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800191a:	f007 f9b7 	bl	8008c8c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff ffd0 	bl	80018c4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001926:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800192a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800192c:	d164      	bne.n	80019f8 <HAL_ADC_Init+0xf0>
 800192e:	2800      	cmp	r0, #0
 8001930:	d162      	bne.n	80019f8 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001932:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001934:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001938:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800193a:	f023 0302 	bic.w	r3, r3, #2
 800193e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001942:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001944:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001946:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001948:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800194a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800194e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001952:	d038      	beq.n	80019c6 <HAL_ADC_Init+0xbe>
 8001954:	2901      	cmp	r1, #1
 8001956:	bf14      	ite	ne
 8001958:	4606      	movne	r6, r0
 800195a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800195e:	6965      	ldr	r5, [r4, #20]
 8001960:	2d01      	cmp	r5, #1
 8001962:	d107      	bne.n	8001974 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001964:	2b00      	cmp	r3, #0
 8001966:	d130      	bne.n	80019ca <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001968:	69a3      	ldr	r3, [r4, #24]
 800196a:	3b01      	subs	r3, #1
 800196c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001970:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001974:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001976:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800197a:	685d      	ldr	r5, [r3, #4]
 800197c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001980:	ea45 0506 	orr.w	r5, r5, r6
 8001984:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001986:	689e      	ldr	r6, [r3, #8]
 8001988:	4d1d      	ldr	r5, [pc, #116]	; (8001a00 <HAL_ADC_Init+0xf8>)
 800198a:	ea05 0506 	and.w	r5, r5, r6
 800198e:	ea45 0502 	orr.w	r5, r5, r2
 8001992:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001994:	d001      	beq.n	800199a <HAL_ADC_Init+0x92>
 8001996:	2901      	cmp	r1, #1
 8001998:	d120      	bne.n	80019dc <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800199a:	6921      	ldr	r1, [r4, #16]
 800199c:	3901      	subs	r1, #1
 800199e:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80019a0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80019a2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80019a6:	4329      	orrs	r1, r5
 80019a8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019aa:	6899      	ldr	r1, [r3, #8]
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_ADC_Init+0xfc>)
 80019ae:	400b      	ands	r3, r1
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d115      	bne.n	80019e0 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	2300      	movs	r3, #0
 80019b6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80019b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019ba:	f023 0303 	bic.w	r3, r3, #3
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019c6:	460e      	mov	r6, r1
 80019c8:	e7c9      	b.n	800195e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019cc:	f043 0320 	orr.w	r3, r3, #32
 80019d0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80019da:	e7cb      	b.n	8001974 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80019dc:	2100      	movs	r1, #0
 80019de:	e7df      	b.n	80019a0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80019e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019e2:	f023 0312 	bic.w	r3, r3, #18
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80019f4:	2001      	movs	r0, #1
}
 80019f6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f8:	f043 0310 	orr.w	r3, r3, #16
 80019fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80019fe:	e7f9      	b.n	80019f4 <HAL_ADC_Init+0xec>
 8001a00:	ffe1f7fd 	.word	0xffe1f7fd
 8001a04:	ff1f0efe 	.word	0xff1f0efe

08001a08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001a0a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a0c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001a0e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001a22:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001a24:	60d3      	str	r3, [r2, #12]
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2e:	b530      	push	{r4, r5, lr}
 8001a30:	68dc      	ldr	r4, [r3, #12]
 8001a32:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a36:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	bf28      	it	cs
 8001a40:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a48:	bf98      	it	ls
 8001a4a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	fa05 f303 	lsl.w	r3, r5, r3
 8001a50:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a54:	bf88      	it	hi
 8001a56:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4019      	ands	r1, r3
 8001a5a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	fa05 f404 	lsl.w	r4, r5, r4
 8001a60:	3c01      	subs	r4, #1
 8001a62:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001a64:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a66:	ea42 0201 	orr.w	r2, r2, r1
 8001a6a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	bfaf      	iteee	ge
 8001a70:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	4b06      	ldrlt	r3, [pc, #24]	; (8001a90 <HAL_NVIC_SetPriority+0x64>)
 8001a76:	f000 000f 	andlt.w	r0, r0, #15
 8001a7a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	bfa5      	ittet	ge
 8001a7e:	b2d2      	uxtbge	r2, r2
 8001a80:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001a8a:	bd30      	pop	{r4, r5, pc}
 8001a8c:	e000ed00 	.word	0xe000ed00
 8001a90:	e000ed14 	.word	0xe000ed14

08001a94 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a94:	2301      	movs	r3, #1
 8001a96:	0942      	lsrs	r2, r0, #5
 8001a98:	f000 001f 	and.w	r0, r0, #31
 8001a9c:	fa03 f000 	lsl.w	r0, r3, r0
 8001aa0:	4b01      	ldr	r3, [pc, #4]	; (8001aa8 <HAL_NVIC_EnableIRQ+0x14>)
 8001aa2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	3801      	subs	r0, #1
 8001aae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001ab2:	d20a      	bcs.n	8001aca <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ada:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	bf0c      	ite	eq
 8001ae0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001ae4:	f022 0204 	bicne.w	r2, r2, #4
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	4770      	bx	lr
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001af0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001af2:	f006 fcb3 	bl	800845c <HAL_SYSTICK_Callback>
 8001af6:	bd08      	pop	{r3, pc}

08001af8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001afa:	b350      	cbz	r0, 8001b52 <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001afc:	2214      	movs	r2, #20
 8001afe:	6801      	ldr	r1, [r0, #0]
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b02:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8001b10:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001b12:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001b14:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b16:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8001b1a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b1e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b22:	4323      	orrs	r3, r4
 8001b24:	6904      	ldr	r4, [r0, #16]
 8001b26:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b28:	6944      	ldr	r4, [r0, #20]
 8001b2a:	4323      	orrs	r3, r4
 8001b2c:	6984      	ldr	r4, [r0, #24]
 8001b2e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b30:	69c4      	ldr	r4, [r0, #28]
 8001b32:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001b34:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b36:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b38:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8001b3a:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001b3c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8001b40:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001b42:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001b44:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001b46:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b48:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b4a:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b52:	2001      	movs	r0, #1
}
 8001b54:	bd10      	pop	{r4, pc}
 8001b56:	bf00      	nop
 8001b58:	bffdfff8 	.word	0xbffdfff8
 8001b5c:	40020000 	.word	0x40020000

08001b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b62:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001b66:	2c01      	cmp	r4, #1
 8001b68:	d035      	beq.n	8001bd6 <HAL_DMA_Start_IT+0x76>
 8001b6a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b6c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001b70:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b74:	42a5      	cmp	r5, r4
 8001b76:	f04f 0600 	mov.w	r6, #0
 8001b7a:	f04f 0402 	mov.w	r4, #2
 8001b7e:	d128      	bne.n	8001bd2 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b80:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b84:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b86:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001b88:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b8a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001b8c:	f026 0601 	bic.w	r6, r6, #1
 8001b90:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b92:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001b94:	40bd      	lsls	r5, r7
 8001b96:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b98:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b9a:	6843      	ldr	r3, [r0, #4]
 8001b9c:	6805      	ldr	r5, [r0, #0]
 8001b9e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001ba0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ba2:	bf0b      	itete	eq
 8001ba4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001ba6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001ba8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001baa:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001bac:	b14b      	cbz	r3, 8001bc2 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bb4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001bb6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	602b      	str	r3, [r5, #0]
 8001bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	f043 030a 	orr.w	r3, r3, #10
 8001bd0:	e7f0      	b.n	8001bb4 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001bd2:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001bd6:	2002      	movs	r0, #2
}
 8001bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001bdc <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bdc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001be0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d003      	beq.n	8001bee <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be6:	2304      	movs	r3, #4
 8001be8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001bea:	2001      	movs	r0, #1
 8001bec:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bee:	6803      	ldr	r3, [r0, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	f022 020e 	bic.w	r2, r2, #14
 8001bf6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c00:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_DMA_Abort_IT+0x88>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <HAL_DMA_Abort_IT+0x6a>
 8001c06:	3214      	adds	r2, #20
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d01e      	beq.n	8001c4a <HAL_DMA_Abort_IT+0x6e>
 8001c0c:	3214      	adds	r2, #20
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01d      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x72>
 8001c12:	3214      	adds	r2, #20
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d01d      	beq.n	8001c54 <HAL_DMA_Abort_IT+0x78>
 8001c18:	3214      	adds	r2, #20
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01d      	beq.n	8001c5a <HAL_DMA_Abort_IT+0x7e>
 8001c1e:	3214      	adds	r2, #20
 8001c20:	4293      	cmp	r3, r2
 8001c22:	bf0c      	ite	eq
 8001c24:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001c28:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8001c2e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c30:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001c38:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001c3a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001c3e:	b17b      	cbz	r3, 8001c60 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001c40:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	4620      	mov	r0, r4
 8001c44:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c46:	2301      	movs	r3, #1
 8001c48:	e7f0      	b.n	8001c2c <HAL_DMA_Abort_IT+0x50>
 8001c4a:	2310      	movs	r3, #16
 8001c4c:	e7ee      	b.n	8001c2c <HAL_DMA_Abort_IT+0x50>
 8001c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c52:	e7eb      	b.n	8001c2c <HAL_DMA_Abort_IT+0x50>
 8001c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c58:	e7e8      	b.n	8001c2c <HAL_DMA_Abort_IT+0x50>
 8001c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5e:	e7e5      	b.n	8001c2c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001c60:	4618      	mov	r0, r3
}
 8001c62:	bd10      	pop	{r4, pc}
 8001c64:	40020008 	.word	0x40020008
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_DMA_IRQHandler>:
{
 8001c6c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c6e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c70:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c72:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c74:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001c76:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c78:	4095      	lsls	r5, r2
 8001c7a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001c7c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c7e:	d032      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x7a>
 8001c80:	074d      	lsls	r5, r1, #29
 8001c82:	d530      	bpl.n	8001ce6 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c88:	bf5e      	ittt	pl
 8001c8a:	681a      	ldrpl	r2, [r3, #0]
 8001c8c:	f022 0204 	bicpl.w	r2, r2, #4
 8001c90:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c92:	4a3e      	ldr	r2, [pc, #248]	; (8001d8c <HAL_DMA_IRQHandler+0x120>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d019      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x60>
 8001c98:	3214      	adds	r2, #20
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d018      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x64>
 8001c9e:	3214      	adds	r2, #20
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d017      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x68>
 8001ca4:	3214      	adds	r2, #20
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d017      	beq.n	8001cda <HAL_DMA_IRQHandler+0x6e>
 8001caa:	3214      	adds	r2, #20
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d017      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x74>
 8001cb0:	3214      	adds	r2, #20
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	bf0c      	ite	eq
 8001cb6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001cba:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001cbe:	4a34      	ldr	r2, [pc, #208]	; (8001d90 <HAL_DMA_IRQHandler+0x124>)
 8001cc0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001cc2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d05e      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x11a>
}
 8001cc8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001cca:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e7f6      	b.n	8001cbe <HAL_DMA_IRQHandler+0x52>
 8001cd0:	2340      	movs	r3, #64	; 0x40
 8001cd2:	e7f4      	b.n	8001cbe <HAL_DMA_IRQHandler+0x52>
 8001cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd8:	e7f1      	b.n	8001cbe <HAL_DMA_IRQHandler+0x52>
 8001cda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cde:	e7ee      	b.n	8001cbe <HAL_DMA_IRQHandler+0x52>
 8001ce0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ce4:	e7eb      	b.n	8001cbe <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ce6:	2502      	movs	r5, #2
 8001ce8:	4095      	lsls	r5, r2
 8001cea:	4225      	tst	r5, r4
 8001cec:	d035      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xee>
 8001cee:	078d      	lsls	r5, r1, #30
 8001cf0:	d533      	bpl.n	8001d5a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	0694      	lsls	r4, r2, #26
 8001cf6:	d406      	bmi.n	8001d06 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f022 020a 	bic.w	r2, r2, #10
 8001cfe:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001d00:	2201      	movs	r2, #1
 8001d02:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d06:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <HAL_DMA_IRQHandler+0x120>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d019      	beq.n	8001d40 <HAL_DMA_IRQHandler+0xd4>
 8001d0c:	3214      	adds	r2, #20
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d018      	beq.n	8001d44 <HAL_DMA_IRQHandler+0xd8>
 8001d12:	3214      	adds	r2, #20
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d017      	beq.n	8001d48 <HAL_DMA_IRQHandler+0xdc>
 8001d18:	3214      	adds	r2, #20
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d017      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xe2>
 8001d1e:	3214      	adds	r2, #20
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d017      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xe8>
 8001d24:	3214      	adds	r2, #20
 8001d26:	4293      	cmp	r3, r2
 8001d28:	bf0c      	ite	eq
 8001d2a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001d2e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_DMA_IRQHandler+0x124>)
 8001d34:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001d36:	2300      	movs	r3, #0
 8001d38:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001d3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d3e:	e7c1      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d40:	2302      	movs	r3, #2
 8001d42:	e7f6      	b.n	8001d32 <HAL_DMA_IRQHandler+0xc6>
 8001d44:	2320      	movs	r3, #32
 8001d46:	e7f4      	b.n	8001d32 <HAL_DMA_IRQHandler+0xc6>
 8001d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d4c:	e7f1      	b.n	8001d32 <HAL_DMA_IRQHandler+0xc6>
 8001d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d52:	e7ee      	b.n	8001d32 <HAL_DMA_IRQHandler+0xc6>
 8001d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d58:	e7eb      	b.n	8001d32 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d5a:	2508      	movs	r5, #8
 8001d5c:	4095      	lsls	r5, r2
 8001d5e:	4225      	tst	r5, r4
 8001d60:	d011      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x11a>
 8001d62:	0709      	lsls	r1, r1, #28
 8001d64:	d50f      	bpl.n	8001d86 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d66:	6819      	ldr	r1, [r3, #0]
 8001d68:	f021 010e 	bic.w	r1, r1, #14
 8001d6c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d6e:	2301      	movs	r3, #1
 8001d70:	fa03 f202 	lsl.w	r2, r3, r2
 8001d74:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d76:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001d78:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001d82:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d84:	e79e      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x58>
}
 8001d86:	bc70      	pop	{r4, r5, r6}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40020008 	.word	0x40020008
 8001d90:	40020000 	.word	0x40020000

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001d98:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001d9a:	4616      	mov	r6, r2
 8001d9c:	4b65      	ldr	r3, [pc, #404]	; (8001f34 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d9e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001f44 <HAL_GPIO_Init+0x1b0>
 8001da2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001f48 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001da6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001daa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001dac:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001db4:	45a0      	cmp	r8, r4
 8001db6:	d17f      	bne.n	8001eb8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001db8:	684d      	ldr	r5, [r1, #4]
 8001dba:	2d12      	cmp	r5, #18
 8001dbc:	f000 80af 	beq.w	8001f1e <HAL_GPIO_Init+0x18a>
 8001dc0:	f200 8088 	bhi.w	8001ed4 <HAL_GPIO_Init+0x140>
 8001dc4:	2d02      	cmp	r5, #2
 8001dc6:	f000 80a7 	beq.w	8001f18 <HAL_GPIO_Init+0x184>
 8001dca:	d87c      	bhi.n	8001ec6 <HAL_GPIO_Init+0x132>
 8001dcc:	2d00      	cmp	r5, #0
 8001dce:	f000 808e 	beq.w	8001eee <HAL_GPIO_Init+0x15a>
 8001dd2:	2d01      	cmp	r5, #1
 8001dd4:	f000 809e 	beq.w	8001f14 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dd8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ddc:	2cff      	cmp	r4, #255	; 0xff
 8001dde:	bf93      	iteet	ls
 8001de0:	4682      	movls	sl, r0
 8001de2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001de6:	3d08      	subhi	r5, #8
 8001de8:	f8d0 b000 	ldrls.w	fp, [r0]
 8001dec:	bf92      	itee	ls
 8001dee:	00b5      	lslls	r5, r6, #2
 8001df0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001df4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df6:	fa09 f805 	lsl.w	r8, r9, r5
 8001dfa:	ea2b 0808 	bic.w	r8, fp, r8
 8001dfe:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e02:	bf88      	it	hi
 8001e04:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e08:	ea48 0505 	orr.w	r5, r8, r5
 8001e0c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e10:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001e14:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001e18:	d04e      	beq.n	8001eb8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e1a:	4d47      	ldr	r5, [pc, #284]	; (8001f38 <HAL_GPIO_Init+0x1a4>)
 8001e1c:	4f46      	ldr	r7, [pc, #280]	; (8001f38 <HAL_GPIO_Init+0x1a4>)
 8001e1e:	69ad      	ldr	r5, [r5, #24]
 8001e20:	f026 0803 	bic.w	r8, r6, #3
 8001e24:	f045 0501 	orr.w	r5, r5, #1
 8001e28:	61bd      	str	r5, [r7, #24]
 8001e2a:	69bd      	ldr	r5, [r7, #24]
 8001e2c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001e30:	f005 0501 	and.w	r5, r5, #1
 8001e34:	9501      	str	r5, [sp, #4]
 8001e36:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e3a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e3e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e40:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001e44:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e48:	fa09 f90b 	lsl.w	r9, r9, fp
 8001e4c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e50:	4d3a      	ldr	r5, [pc, #232]	; (8001f3c <HAL_GPIO_Init+0x1a8>)
 8001e52:	42a8      	cmp	r0, r5
 8001e54:	d068      	beq.n	8001f28 <HAL_GPIO_Init+0x194>
 8001e56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e5a:	42a8      	cmp	r0, r5
 8001e5c:	d066      	beq.n	8001f2c <HAL_GPIO_Init+0x198>
 8001e5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e62:	42a8      	cmp	r0, r5
 8001e64:	d064      	beq.n	8001f30 <HAL_GPIO_Init+0x19c>
 8001e66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e6a:	42a8      	cmp	r0, r5
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2503      	moveq	r5, #3
 8001e70:	2504      	movne	r5, #4
 8001e72:	fa05 f50b 	lsl.w	r5, r5, fp
 8001e76:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001e7a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e7e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e80:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001e84:	bf14      	ite	ne
 8001e86:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e88:	43a5      	biceq	r5, r4
 8001e8a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e8c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e8e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001e92:	bf14      	ite	ne
 8001e94:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e96:	43a5      	biceq	r5, r4
 8001e98:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e9a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e9c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea0:	bf14      	ite	ne
 8001ea2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ea4:	43a5      	biceq	r5, r4
 8001ea6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eaa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eae:	bf14      	ite	ne
 8001eb0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eb2:	ea25 0404 	biceq.w	r4, r5, r4
 8001eb6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001eb8:	3601      	adds	r6, #1
 8001eba:	2e10      	cmp	r6, #16
 8001ebc:	f47f af73 	bne.w	8001da6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001ec0:	b003      	add	sp, #12
 8001ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001ec6:	2d03      	cmp	r5, #3
 8001ec8:	d022      	beq.n	8001f10 <HAL_GPIO_Init+0x17c>
 8001eca:	2d11      	cmp	r5, #17
 8001ecc:	d184      	bne.n	8001dd8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ece:	68ca      	ldr	r2, [r1, #12]
 8001ed0:	3204      	adds	r2, #4
          break;
 8001ed2:	e781      	b.n	8001dd8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001ed4:	4f1a      	ldr	r7, [pc, #104]	; (8001f40 <HAL_GPIO_Init+0x1ac>)
 8001ed6:	42bd      	cmp	r5, r7
 8001ed8:	d009      	beq.n	8001eee <HAL_GPIO_Init+0x15a>
 8001eda:	d812      	bhi.n	8001f02 <HAL_GPIO_Init+0x16e>
 8001edc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001f4c <HAL_GPIO_Init+0x1b8>
 8001ee0:	454d      	cmp	r5, r9
 8001ee2:	d004      	beq.n	8001eee <HAL_GPIO_Init+0x15a>
 8001ee4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001ee8:	454d      	cmp	r5, r9
 8001eea:	f47f af75 	bne.w	8001dd8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eee:	688a      	ldr	r2, [r1, #8]
 8001ef0:	b1c2      	cbz	r2, 8001f24 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001ef4:	bf0c      	ite	eq
 8001ef6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001efa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001efe:	2208      	movs	r2, #8
 8001f00:	e76a      	b.n	8001dd8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001f02:	4575      	cmp	r5, lr
 8001f04:	d0f3      	beq.n	8001eee <HAL_GPIO_Init+0x15a>
 8001f06:	4565      	cmp	r5, ip
 8001f08:	d0f1      	beq.n	8001eee <HAL_GPIO_Init+0x15a>
 8001f0a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001f50 <HAL_GPIO_Init+0x1bc>
 8001f0e:	e7eb      	b.n	8001ee8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f10:	2200      	movs	r2, #0
 8001f12:	e761      	b.n	8001dd8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f14:	68ca      	ldr	r2, [r1, #12]
          break;
 8001f16:	e75f      	b.n	8001dd8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f18:	68ca      	ldr	r2, [r1, #12]
 8001f1a:	3208      	adds	r2, #8
          break;
 8001f1c:	e75c      	b.n	8001dd8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f1e:	68ca      	ldr	r2, [r1, #12]
 8001f20:	320c      	adds	r2, #12
          break;
 8001f22:	e759      	b.n	8001dd8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f24:	2204      	movs	r2, #4
 8001f26:	e757      	b.n	8001dd8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f28:	2500      	movs	r5, #0
 8001f2a:	e7a2      	b.n	8001e72 <HAL_GPIO_Init+0xde>
 8001f2c:	2501      	movs	r5, #1
 8001f2e:	e7a0      	b.n	8001e72 <HAL_GPIO_Init+0xde>
 8001f30:	2502      	movs	r5, #2
 8001f32:	e79e      	b.n	8001e72 <HAL_GPIO_Init+0xde>
 8001f34:	40010400 	.word	0x40010400
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010800 	.word	0x40010800
 8001f40:	10210000 	.word	0x10210000
 8001f44:	10310000 	.word	0x10310000
 8001f48:	10320000 	.word	0x10320000
 8001f4c:	10110000 	.word	0x10110000
 8001f50:	10220000 	.word	0x10220000

08001f54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f54:	b10a      	cbz	r2, 8001f5a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f56:	6101      	str	r1, [r0, #16]
 8001f58:	4770      	bx	lr
 8001f5a:	0409      	lsls	r1, r1, #16
 8001f5c:	e7fb      	b.n	8001f56 <HAL_GPIO_WritePin+0x2>

08001f5e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001f5e:	68c3      	ldr	r3, [r0, #12]
 8001f60:	4059      	eors	r1, r3
 8001f62:	60c1      	str	r1, [r0, #12]
 8001f64:	4770      	bx	lr

08001f66 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f66:	6802      	ldr	r2, [r0, #0]
 8001f68:	6953      	ldr	r3, [r2, #20]
 8001f6a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001f6e:	d00d      	beq.n	8001f8c <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f70:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001f74:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f76:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001f78:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f7a:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001f84:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001f88:	2001      	movs	r0, #1
 8001f8a:	4770      	bx	lr
  }
  return HAL_OK;
 8001f8c:	4618      	mov	r0, r3
}
 8001f8e:	4770      	bx	lr

08001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f94:	4604      	mov	r4, r0
 8001f96:	4617      	mov	r7, r2
 8001f98:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f9a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001f9e:	b28e      	uxth	r6, r1
 8001fa0:	6825      	ldr	r5, [r4, #0]
 8001fa2:	f1b8 0f01 	cmp.w	r8, #1
 8001fa6:	bf0c      	ite	eq
 8001fa8:	696b      	ldreq	r3, [r5, #20]
 8001faa:	69ab      	ldrne	r3, [r5, #24]
 8001fac:	ea36 0303 	bics.w	r3, r6, r3
 8001fb0:	bf14      	ite	ne
 8001fb2:	2001      	movne	r0, #1
 8001fb4:	2000      	moveq	r0, #0
 8001fb6:	b908      	cbnz	r0, 8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fbc:	696b      	ldr	r3, [r5, #20]
 8001fbe:	055a      	lsls	r2, r3, #21
 8001fc0:	d512      	bpl.n	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fc2:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001fc4:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fca:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fcc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001fd0:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fd6:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fda:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001fdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001fe0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001fe8:	1c7b      	adds	r3, r7, #1
 8001fea:	d0d9      	beq.n	8001fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001fec:	b94f      	cbnz	r7, 8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fee:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001ff0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ff2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001ff4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001ff8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002002:	f7ff fa87 	bl	8001514 <HAL_GetTick>
 8002006:	eba0 0009 	sub.w	r0, r0, r9
 800200a:	4287      	cmp	r7, r0
 800200c:	d2c8      	bcs.n	8001fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800200e:	e7ee      	b.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08002010 <I2C_WaitOnFlagUntilTimeout>:
{
 8002010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002014:	4604      	mov	r4, r0
 8002016:	4690      	mov	r8, r2
 8002018:	461f      	mov	r7, r3
 800201a:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800201c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8002020:	b28d      	uxth	r5, r1
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	f1b9 0f01 	cmp.w	r9, #1
 8002028:	bf0c      	ite	eq
 800202a:	695b      	ldreq	r3, [r3, #20]
 800202c:	699b      	ldrne	r3, [r3, #24]
 800202e:	ea35 0303 	bics.w	r3, r5, r3
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	4543      	cmp	r3, r8
 800203a:	d002      	beq.n	8002042 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800203c:	2000      	movs	r0, #0
}
 800203e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002042:	1c7b      	adds	r3, r7, #1
 8002044:	d0ed      	beq.n	8002022 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002046:	b95f      	cbnz	r7, 8002060 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002048:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800204a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800204c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800204e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002052:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002056:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002058:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800205c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002060:	f7ff fa58 	bl	8001514 <HAL_GetTick>
 8002064:	1b80      	subs	r0, r0, r6
 8002066:	4287      	cmp	r7, r0
 8002068:	d2db      	bcs.n	8002022 <I2C_WaitOnFlagUntilTimeout+0x12>
 800206a:	e7ed      	b.n	8002048 <I2C_WaitOnFlagUntilTimeout+0x38>

0800206c <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800206c:	b570      	push	{r4, r5, r6, lr}
 800206e:	4604      	mov	r4, r0
 8002070:	460d      	mov	r5, r1
 8002072:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	061b      	lsls	r3, r3, #24
 800207a:	d501      	bpl.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800207c:	2000      	movs	r0, #0
 800207e:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002080:	4620      	mov	r0, r4
 8002082:	f7ff ff70 	bl	8001f66 <I2C_IsAcknowledgeFailed>
 8002086:	b9a8      	cbnz	r0, 80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8002088:	1c6a      	adds	r2, r5, #1
 800208a:	d0f3      	beq.n	8002074 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800208c:	b965      	cbnz	r5, 80020a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800208e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8002090:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002092:	f043 0320 	orr.w	r3, r3, #32
 8002096:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002098:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800209a:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800209c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800209e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80020a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020a8:	f7ff fa34 	bl	8001514 <HAL_GetTick>
 80020ac:	1b80      	subs	r0, r0, r6
 80020ae:	4285      	cmp	r5, r0
 80020b0:	d2e0      	bcs.n	8002074 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80020b2:	e7ec      	b.n	800208e <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80020b4:	2001      	movs	r0, #1
}
 80020b6:	bd70      	pop	{r4, r5, r6, pc}

080020b8 <I2C_RequestMemoryWrite>:
{
 80020b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80020bc:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80020be:	6802      	ldr	r2, [r0, #0]
{
 80020c0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80020c2:	6813      	ldr	r3, [r2, #0]
{
 80020c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80020c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ca:	6013      	str	r3, [r2, #0]
{
 80020cc:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020ce:	9600      	str	r6, [sp, #0]
 80020d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020d2:	2200      	movs	r2, #0
 80020d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80020d8:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020da:	f7ff ff99 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 80020de:	b968      	cbnz	r0, 80020fc <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80020e6:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80020ea:	4633      	mov	r3, r6
 80020ec:	491a      	ldr	r1, [pc, #104]	; (8002158 <I2C_RequestMemoryWrite+0xa0>)
 80020ee:	4620      	mov	r0, r4
 80020f0:	f7ff ff4e 	bl	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f4:	b130      	cbz	r0, 8002104 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d018      	beq.n	800212e <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 80020fc:	2003      	movs	r0, #3
}
 80020fe:	b004      	add	sp, #16
 8002100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	9003      	str	r0, [sp, #12]
 8002108:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800210a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210c:	9203      	str	r2, [sp, #12]
 800210e:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002110:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002112:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002114:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002118:	f7ff ffa8 	bl	800206c <I2C_WaitOnTXEFlagUntilTimeout>
 800211c:	b148      	cbz	r0, 8002132 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800211e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002120:	2b04      	cmp	r3, #4
 8002122:	d1eb      	bne.n	80020fc <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002124:	6822      	ldr	r2, [r4, #0]
 8002126:	6813      	ldr	r3, [r2, #0]
 8002128:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800212e:	2001      	movs	r0, #1
 8002130:	e7e5      	b.n	80020fe <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002132:	f1b8 0f01 	cmp.w	r8, #1
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	d102      	bne.n	8002140 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800213a:	b2ed      	uxtb	r5, r5
 800213c:	611d      	str	r5, [r3, #16]
 800213e:	e7de      	b.n	80020fe <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002140:	0a2a      	lsrs	r2, r5, #8
 8002142:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002144:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002146:	4632      	mov	r2, r6
 8002148:	4620      	mov	r0, r4
 800214a:	f7ff ff8f 	bl	800206c <I2C_WaitOnTXEFlagUntilTimeout>
 800214e:	2800      	cmp	r0, #0
 8002150:	d1e5      	bne.n	800211e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	e7f1      	b.n	800213a <I2C_RequestMemoryWrite+0x82>
 8002156:	bf00      	nop
 8002158:	00010002 	.word	0x00010002

0800215c <I2C_RequestMemoryRead>:
{
 800215c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002160:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002162:	6803      	ldr	r3, [r0, #0]
{
 8002164:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002166:	681a      	ldr	r2, [r3, #0]
{
 8002168:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800216a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800216e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002170:	681a      	ldr	r2, [r3, #0]
{
 8002172:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002178:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800217a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800217e:	9500      	str	r5, [sp, #0]
 8002180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002182:	2200      	movs	r2, #0
{
 8002184:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002186:	f7ff ff43 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 800218a:	b980      	cbnz	r0, 80021ae <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	b2ff      	uxtb	r7, r7
 8002190:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8002194:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002196:	492d      	ldr	r1, [pc, #180]	; (800224c <I2C_RequestMemoryRead+0xf0>)
 8002198:	462b      	mov	r3, r5
 800219a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800219c:	4620      	mov	r0, r4
 800219e:	f7ff fef7 	bl	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021a2:	b140      	cbz	r0, 80021b6 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d101      	bne.n	80021ae <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 80021aa:	2001      	movs	r0, #1
 80021ac:	e000      	b.n	80021b0 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 80021ae:	2003      	movs	r0, #3
}
 80021b0:	b004      	add	sp, #16
 80021b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	9003      	str	r0, [sp, #12]
 80021ba:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021bc:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021be:	9203      	str	r2, [sp, #12]
 80021c0:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c2:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c4:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c6:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c8:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ca:	f7ff ff4f 	bl	800206c <I2C_WaitOnTXEFlagUntilTimeout>
 80021ce:	b140      	cbz	r0, 80021e2 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d1eb      	bne.n	80021ae <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	6813      	ldr	r3, [r2, #0]
 80021da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	e7e3      	b.n	80021aa <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021e2:	f1b8 0f01 	cmp.w	r8, #1
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	d124      	bne.n	8002234 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021ea:	b2f6      	uxtb	r6, r6
 80021ec:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ee:	462a      	mov	r2, r5
 80021f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7ff ff3a 	bl	800206c <I2C_WaitOnTXEFlagUntilTimeout>
 80021f8:	4602      	mov	r2, r0
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d1e8      	bne.n	80021d0 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80021fe:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002200:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002202:	680b      	ldr	r3, [r1, #0]
 8002204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002208:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800220a:	9500      	str	r5, [sp, #0]
 800220c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800220e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002212:	f7ff fefd 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8002216:	2800      	cmp	r0, #0
 8002218:	d1c9      	bne.n	80021ae <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	f047 0701 	orr.w	r7, r7, #1
 8002220:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002224:	462b      	mov	r3, r5
 8002226:	4909      	ldr	r1, [pc, #36]	; (800224c <I2C_RequestMemoryRead+0xf0>)
 8002228:	4620      	mov	r0, r4
 800222a:	f7ff feb1 	bl	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800222e:	2800      	cmp	r0, #0
 8002230:	d1b8      	bne.n	80021a4 <I2C_RequestMemoryRead+0x48>
 8002232:	e7bd      	b.n	80021b0 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002234:	0a32      	lsrs	r2, r6, #8
 8002236:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002238:	990a      	ldr	r1, [sp, #40]	; 0x28
 800223a:	462a      	mov	r2, r5
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff ff15 	bl	800206c <I2C_WaitOnTXEFlagUntilTimeout>
 8002242:	2800      	cmp	r0, #0
 8002244:	d1c4      	bne.n	80021d0 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	e7cf      	b.n	80021ea <I2C_RequestMemoryRead+0x8e>
 800224a:	bf00      	nop
 800224c:	00010002 	.word	0x00010002

08002250 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	4604      	mov	r4, r0
 8002254:	460d      	mov	r5, r1
 8002256:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	6943      	ldr	r3, [r0, #20]
 800225c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002260:	d001      	beq.n	8002266 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002262:	2000      	movs	r0, #0
}
 8002264:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002266:	6942      	ldr	r2, [r0, #20]
 8002268:	06d2      	lsls	r2, r2, #27
 800226a:	d50b      	bpl.n	8002284 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800226c:	f06f 0210 	mvn.w	r2, #16
 8002270:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8002272:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002276:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800227a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800227c:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 800227e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8002282:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002284:	b95d      	cbnz	r5, 800229e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002286:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002288:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800228a:	f043 0320 	orr.w	r3, r3, #32
 800228e:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002290:	2320      	movs	r3, #32
 8002292:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8002296:	2300      	movs	r3, #0
 8002298:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800229c:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800229e:	f7ff f939 	bl	8001514 <HAL_GetTick>
 80022a2:	1b80      	subs	r0, r0, r6
 80022a4:	4285      	cmp	r5, r0
 80022a6:	d2d7      	bcs.n	8002258 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80022a8:	e7ed      	b.n	8002286 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080022aa <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80022aa:	b570      	push	{r4, r5, r6, lr}
 80022ac:	4604      	mov	r4, r0
 80022ae:	460d      	mov	r5, r1
 80022b0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	075b      	lsls	r3, r3, #29
 80022b8:	d501      	bpl.n	80022be <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80022ba:	2000      	movs	r0, #0
 80022bc:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022be:	4620      	mov	r0, r4
 80022c0:	f7ff fe51 	bl	8001f66 <I2C_IsAcknowledgeFailed>
 80022c4:	b9a8      	cbnz	r0, 80022f2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80022c6:	1c6a      	adds	r2, r5, #1
 80022c8:	d0f3      	beq.n	80022b2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80022ca:	b965      	cbnz	r5, 80022e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80022ce:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d0:	f043 0320 	orr.w	r3, r3, #32
 80022d4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80022d6:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80022d8:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80022da:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80022dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80022e0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80022e4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80022e6:	f7ff f915 	bl	8001514 <HAL_GetTick>
 80022ea:	1b80      	subs	r0, r0, r6
 80022ec:	4285      	cmp	r5, r0
 80022ee:	d2e0      	bcs.n	80022b2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80022f0:	e7ec      	b.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80022f2:	2001      	movs	r0, #1
}
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080022f8 <HAL_I2C_Init>:
{
 80022f8:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 80022fa:	4604      	mov	r4, r0
 80022fc:	b908      	cbnz	r0, 8002302 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80022fe:	2001      	movs	r0, #1
 8002300:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002302:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002306:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800230a:	b91b      	cbnz	r3, 8002314 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800230c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002310:	f006 fcea 	bl	8008ce8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002314:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002316:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002318:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002324:	f000 feec 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002328:	6863      	ldr	r3, [r4, #4]
 800232a:	4a2f      	ldr	r2, [pc, #188]	; (80023e8 <HAL_I2C_Init+0xf0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d830      	bhi.n	8002392 <HAL_I2C_Init+0x9a>
 8002330:	4a2e      	ldr	r2, [pc, #184]	; (80023ec <HAL_I2C_Init+0xf4>)
 8002332:	4290      	cmp	r0, r2
 8002334:	d9e3      	bls.n	80022fe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8002336:	4a2e      	ldr	r2, [pc, #184]	; (80023f0 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8002338:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800233a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800233e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002340:	3201      	adds	r2, #1
 8002342:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002344:	4a28      	ldr	r2, [pc, #160]	; (80023e8 <HAL_I2C_Init+0xf0>)
 8002346:	3801      	subs	r0, #1
 8002348:	4293      	cmp	r3, r2
 800234a:	d832      	bhi.n	80023b2 <HAL_I2C_Init+0xba>
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002352:	1c43      	adds	r3, r0, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	2b04      	cmp	r3, #4
 800235a:	bf38      	it	cc
 800235c:	2304      	movcc	r3, #4
 800235e:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002360:	6a22      	ldr	r2, [r4, #32]
 8002362:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002364:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800236a:	68e2      	ldr	r2, [r4, #12]
 800236c:	6923      	ldr	r3, [r4, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002372:	69a2      	ldr	r2, [r4, #24]
 8002374:	6963      	ldr	r3, [r4, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800237a:	680b      	ldr	r3, [r1, #0]
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002382:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002384:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002386:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800238a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002390:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_I2C_Init+0xfc>)
 8002394:	4290      	cmp	r0, r2
 8002396:	d9b2      	bls.n	80022fe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8002398:	4d15      	ldr	r5, [pc, #84]	; (80023f0 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800239a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800239e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80023a2:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80023a4:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80023a6:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80023a8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80023ac:	fbb2 f2f5 	udiv	r2, r2, r5
 80023b0:	e7c6      	b.n	8002340 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80023b2:	68a2      	ldr	r2, [r4, #8]
 80023b4:	b952      	cbnz	r2, 80023cc <HAL_I2C_Init+0xd4>
 80023b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80023ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80023be:	1c43      	adds	r3, r0, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	b16b      	cbz	r3, 80023e2 <HAL_I2C_Init+0xea>
 80023c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ca:	e7c8      	b.n	800235e <HAL_I2C_Init+0x66>
 80023cc:	2219      	movs	r2, #25
 80023ce:	4353      	muls	r3, r2
 80023d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80023d4:	1c43      	adds	r3, r0, #1
 80023d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023da:	b113      	cbz	r3, 80023e2 <HAL_I2C_Init+0xea>
 80023dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023e0:	e7bd      	b.n	800235e <HAL_I2C_Init+0x66>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e7bb      	b.n	800235e <HAL_I2C_Init+0x66>
 80023e6:	bf00      	nop
 80023e8:	000186a0 	.word	0x000186a0
 80023ec:	001e847f 	.word	0x001e847f
 80023f0:	000f4240 	.word	0x000f4240
 80023f4:	003d08ff 	.word	0x003d08ff

080023f8 <HAL_I2C_Master_Transmit>:
{
 80023f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80023fc:	4604      	mov	r4, r0
 80023fe:	461f      	mov	r7, r3
 8002400:	460d      	mov	r5, r1
 8002402:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8002404:	f7ff f886 	bl	8001514 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002408:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800240c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800240e:	2b20      	cmp	r3, #32
 8002410:	d004      	beq.n	800241c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8002412:	2502      	movs	r5, #2
}
 8002414:	4628      	mov	r0, r5
 8002416:	b004      	add	sp, #16
 8002418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800241c:	9000      	str	r0, [sp, #0]
 800241e:	2319      	movs	r3, #25
 8002420:	2201      	movs	r2, #1
 8002422:	495d      	ldr	r1, [pc, #372]	; (8002598 <HAL_I2C_Master_Transmit+0x1a0>)
 8002424:	4620      	mov	r0, r4
 8002426:	f7ff fdf3 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 800242a:	2800      	cmp	r0, #0
 800242c:	d1f1      	bne.n	8002412 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800242e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002432:	2b01      	cmp	r3, #1
 8002434:	d0ed      	beq.n	8002412 <HAL_I2C_Master_Transmit+0x1a>
 8002436:	2301      	movs	r3, #1
 8002438:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002442:	bf5e      	ittt	pl
 8002444:	681a      	ldrpl	r2, [r3, #0]
 8002446:	f042 0201 	orrpl.w	r2, r2, #1
 800244a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002452:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002454:	2221      	movs	r2, #33	; 0x21
 8002456:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800245a:	2210      	movs	r2, #16
 800245c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002460:	2200      	movs	r2, #0
 8002462:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002464:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8002468:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800246a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800246c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800246e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002472:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002474:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002476:	2a04      	cmp	r2, #4
 8002478:	d004      	beq.n	8002484 <HAL_I2C_Master_Transmit+0x8c>
 800247a:	2a01      	cmp	r2, #1
 800247c:	d002      	beq.n	8002484 <HAL_I2C_Master_Transmit+0x8c>
 800247e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002482:	d104      	bne.n	800248e <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e002      	b.n	8002494 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800248e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002490:	2a12      	cmp	r2, #18
 8002492:	d0f7      	beq.n	8002484 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002494:	9600      	str	r6, [sp, #0]
 8002496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002498:	2200      	movs	r2, #0
 800249a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800249e:	4620      	mov	r0, r4
 80024a0:	f7ff fdb6 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 80024a4:	bb28      	cbnz	r0, 80024f2 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a6:	6923      	ldr	r3, [r4, #16]
 80024a8:	6822      	ldr	r2, [r4, #0]
 80024aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ae:	d112      	bne.n	80024d6 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024b0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80024b4:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b6:	4633      	mov	r3, r6
 80024b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024ba:	4938      	ldr	r1, [pc, #224]	; (800259c <HAL_I2C_Master_Transmit+0x1a4>)
 80024bc:	4620      	mov	r0, r4
 80024be:	f7ff fd67 	bl	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c2:	4605      	mov	r5, r0
 80024c4:	b9a0      	cbnz	r0, 80024f0 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	9003      	str	r0, [sp, #12]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	9203      	str	r2, [sp, #12]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	9303      	str	r3, [sp, #12]
 80024d2:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80024d4:	e050      	b.n	8002578 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024d6:	11eb      	asrs	r3, r5, #7
 80024d8:	f003 0306 	and.w	r3, r3, #6
 80024dc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80024e0:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024e2:	492f      	ldr	r1, [pc, #188]	; (80025a0 <HAL_I2C_Master_Transmit+0x1a8>)
 80024e4:	4633      	mov	r3, r6
 80024e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024e8:	4620      	mov	r0, r4
 80024ea:	f7ff fd51 	bl	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ee:	b148      	cbz	r0, 8002504 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	d107      	bne.n	800250c <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 80024fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002500:	2501      	movs	r5, #1
 8002502:	e787      	b.n	8002414 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	b2ed      	uxtb	r5, r5
 8002508:	611d      	str	r5, [r3, #16]
 800250a:	e7d4      	b.n	80024b6 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 800250c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8002510:	2503      	movs	r5, #3
 8002512:	e77f      	b.n	8002414 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	4632      	mov	r2, r6
 8002516:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002518:	4620      	mov	r0, r4
 800251a:	f7ff fda7 	bl	800206c <I2C_WaitOnTXEFlagUntilTimeout>
 800251e:	b140      	cbz	r0, 8002532 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002522:	2b04      	cmp	r3, #4
 8002524:	d1f4      	bne.n	8002510 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002526:	6822      	ldr	r2, [r4, #0]
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e7e6      	b.n	8002500 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002532:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002534:	6820      	ldr	r0, [r4, #0]
 8002536:	1c4b      	adds	r3, r1, #1
 8002538:	6263      	str	r3, [r4, #36]	; 0x24
 800253a:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 800253c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800253e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8002540:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002542:	3b01      	subs	r3, #1
 8002544:	b29b      	uxth	r3, r3
 8002546:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002548:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800254a:	1e53      	subs	r3, r2, #1
 800254c:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800254e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8002550:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002552:	d50a      	bpl.n	800256a <HAL_I2C_Master_Transmit+0x172>
 8002554:	b14b      	cbz	r3, 800256a <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002556:	1c8b      	adds	r3, r1, #2
 8002558:	6263      	str	r3, [r4, #36]	; 0x24
 800255a:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 800255c:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800255e:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8002560:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002562:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002564:	3b01      	subs	r3, #1
 8002566:	b29b      	uxth	r3, r3
 8002568:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256a:	4632      	mov	r2, r6
 800256c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800256e:	4620      	mov	r0, r4
 8002570:	f7ff fe9b 	bl	80022aa <I2C_WaitOnBTFFlagUntilTimeout>
 8002574:	2800      	cmp	r0, #0
 8002576:	d1d3      	bne.n	8002520 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8002578:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ca      	bne.n	8002514 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800257e:	6821      	ldr	r1, [r4, #0]
 8002580:	680a      	ldr	r2, [r1, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002586:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800258a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800258e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002596:	e73d      	b.n	8002414 <HAL_I2C_Master_Transmit+0x1c>
 8002598:	00100002 	.word	0x00100002
 800259c:	00010002 	.word	0x00010002
 80025a0:	00010008 	.word	0x00010008

080025a4 <HAL_I2C_Master_Receive>:
{
 80025a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025a8:	4604      	mov	r4, r0
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	4698      	mov	r8, r3
 80025ae:	460d      	mov	r5, r1
 80025b0:	4691      	mov	r9, r2
 80025b2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80025b4:	f7fe ffae 	bl	8001514 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80025b8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80025bc:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d004      	beq.n	80025cc <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80025c2:	2502      	movs	r5, #2
}
 80025c4:	4628      	mov	r0, r5
 80025c6:	b009      	add	sp, #36	; 0x24
 80025c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025cc:	9000      	str	r0, [sp, #0]
 80025ce:	2319      	movs	r3, #25
 80025d0:	2201      	movs	r2, #1
 80025d2:	49a2      	ldr	r1, [pc, #648]	; (800285c <HAL_I2C_Master_Receive+0x2b8>)
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7ff fd1b 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 80025da:	2800      	cmp	r0, #0
 80025dc:	d1f1      	bne.n	80025c2 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80025de:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d0ed      	beq.n	80025c2 <HAL_I2C_Master_Receive+0x1e>
 80025e6:	2301      	movs	r3, #1
 80025e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80025f2:	bf5e      	ittt	pl
 80025f4:	681a      	ldrpl	r2, [r3, #0]
 80025f6:	f042 0201 	orrpl.w	r2, r2, #1
 80025fa:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002602:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002604:	2222      	movs	r2, #34	; 0x22
 8002606:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800260a:	2210      	movs	r2, #16
 800260c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002610:	2200      	movs	r2, #0
 8002612:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002614:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8002618:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800261c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800261e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002620:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002624:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002626:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002628:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800262a:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800262c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002630:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002632:	d004      	beq.n	800263e <HAL_I2C_Master_Receive+0x9a>
 8002634:	2a01      	cmp	r2, #1
 8002636:	d002      	beq.n	800263e <HAL_I2C_Master_Receive+0x9a>
 8002638:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800263c:	d104      	bne.n	8002648 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e002      	b.n	800264e <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002648:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800264a:	2a11      	cmp	r2, #17
 800264c:	d0f7      	beq.n	800263e <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800264e:	9600      	str	r6, [sp, #0]
 8002650:	463b      	mov	r3, r7
 8002652:	2200      	movs	r2, #0
 8002654:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002658:	4620      	mov	r0, r4
 800265a:	f7ff fcd9 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 800265e:	2800      	cmp	r0, #0
 8002660:	d14d      	bne.n	80026fe <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002662:	6923      	ldr	r3, [r4, #16]
 8002664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	d139      	bne.n	80026e0 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800266c:	f045 0501 	orr.w	r5, r5, #1
 8002670:	b2ed      	uxtb	r5, r5
 8002672:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002674:	4633      	mov	r3, r6
 8002676:	463a      	mov	r2, r7
 8002678:	4979      	ldr	r1, [pc, #484]	; (8002860 <HAL_I2C_Master_Receive+0x2bc>)
 800267a:	4620      	mov	r0, r4
 800267c:	f7ff fc88 	bl	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002680:	4605      	mov	r5, r0
 8002682:	2800      	cmp	r0, #0
 8002684:	d13a      	bne.n	80026fc <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8002686:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	2a00      	cmp	r2, #0
 800268c:	d069      	beq.n	8002762 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 800268e:	2a01      	cmp	r2, #1
 8002690:	d17a      	bne.n	8002788 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002698:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800269a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	9504      	str	r5, [sp, #16]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	9204      	str	r2, [sp, #16]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	9204      	str	r2, [sp, #16]
 80026a8:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80026b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026b2:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002868 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 80026b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d05b      	beq.n	8002776 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 80026be:	2b03      	cmp	r3, #3
 80026c0:	f200 80d4 	bhi.w	800286c <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d17b      	bne.n	80027c0 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80026c8:	4632      	mov	r2, r6
 80026ca:	4639      	mov	r1, r7
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7ff fdbf 	bl	8002250 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026d2:	2800      	cmp	r0, #0
 80026d4:	f000 8093 	beq.w	80027fe <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80026d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d116      	bne.n	800270c <HAL_I2C_Master_Receive+0x168>
 80026de:	e03e      	b.n	800275e <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026e0:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80026e4:	f008 0806 	and.w	r8, r8, #6
 80026e8:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80026ec:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026ee:	495d      	ldr	r1, [pc, #372]	; (8002864 <HAL_I2C_Master_Receive+0x2c0>)
 80026f0:	4633      	mov	r3, r6
 80026f2:	463a      	mov	r2, r7
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff fc4b 	bl	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026fa:	b148      	cbz	r0, 8002710 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002700:	2b04      	cmp	r3, #4
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	d128      	bne.n	800275a <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8002708:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 800270c:	2501      	movs	r5, #1
 800270e:	e759      	b.n	80025c4 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	b2ed      	uxtb	r5, r5
 8002714:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002716:	463a      	mov	r2, r7
 8002718:	4633      	mov	r3, r6
 800271a:	4951      	ldr	r1, [pc, #324]	; (8002860 <HAL_I2C_Master_Receive+0x2bc>)
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff fc37 	bl	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002722:	4602      	mov	r2, r0
 8002724:	2800      	cmp	r0, #0
 8002726:	d1e9      	bne.n	80026fc <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	9007      	str	r0, [sp, #28]
 800272c:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800272e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002730:	9107      	str	r1, [sp, #28]
 8002732:	6999      	ldr	r1, [r3, #24]
 8002734:	9107      	str	r1, [sp, #28]
 8002736:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800273e:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002740:	9600      	str	r6, [sp, #0]
 8002742:	463b      	mov	r3, r7
 8002744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002748:	f7ff fc62 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 800274c:	2800      	cmp	r0, #0
 800274e:	d1d6      	bne.n	80026fe <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002750:	6822      	ldr	r2, [r4, #0]
 8002752:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8002756:	6113      	str	r3, [r2, #16]
 8002758:	e78c      	b.n	8002674 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 800275a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 800275e:	2503      	movs	r5, #3
 8002760:	e730      	b.n	80025c4 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002762:	9503      	str	r5, [sp, #12]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	9203      	str	r2, [sp, #12]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	9203      	str	r2, [sp, #12]
 800276c:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002774:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002776:	2320      	movs	r3, #32
 8002778:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	2300      	movs	r3, #0
 800277e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002782:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002786:	e71d      	b.n	80025c4 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8002788:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800278a:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 800278c:	d10e      	bne.n	80027ac <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800278e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002792:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002794:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	9505      	str	r5, [sp, #20]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	9205      	str	r2, [sp, #20]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	9205      	str	r2, [sp, #20]
 80027a2:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027aa:	e781      	b.n	80026b0 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80027ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027b0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b2:	9506      	str	r5, [sp, #24]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	9206      	str	r2, [sp, #24]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	9306      	str	r3, [sp, #24]
 80027bc:	9b06      	ldr	r3, [sp, #24]
 80027be:	e779      	b.n	80026b4 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 80027c0:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c2:	9600      	str	r6, [sp, #0]
 80027c4:	463b      	mov	r3, r7
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	4641      	mov	r1, r8
 80027cc:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80027ce:	d124      	bne.n	800281a <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d0:	f7ff fc1e 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d1c2      	bne.n	800275e <HAL_I2C_Master_Receive+0x1ba>
 80027d8:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e2:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	1c51      	adds	r1, r2, #1
 80027ea:	6261      	str	r1, [r4, #36]	; 0x24
 80027ec:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 80027ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027f0:	3b01      	subs	r3, #1
 80027f2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80027f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027fc:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	6262      	str	r2, [r4, #36]	; 0x24
 8002804:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002806:	6912      	ldr	r2, [r2, #16]
 8002808:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800280a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800280c:	3b01      	subs	r3, #1
 800280e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002810:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002812:	3b01      	subs	r3, #1
 8002814:	b29b      	uxth	r3, r3
 8002816:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002818:	e74e      	b.n	80026b8 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800281a:	f7ff fbf9 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 800281e:	4602      	mov	r2, r0
 8002820:	2800      	cmp	r0, #0
 8002822:	d19c      	bne.n	800275e <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002824:	6821      	ldr	r1, [r4, #0]
 8002826:	680b      	ldr	r3, [r1, #0]
 8002828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800282c:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800282e:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002830:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002832:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002834:	1c59      	adds	r1, r3, #1
 8002836:	6261      	str	r1, [r4, #36]	; 0x24
 8002838:	6821      	ldr	r1, [r4, #0]
 800283a:	6909      	ldr	r1, [r1, #16]
 800283c:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 800283e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002840:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8002842:	3b01      	subs	r3, #1
 8002844:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002846:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002848:	4641      	mov	r1, r8
          hi2c->XferCount--;
 800284a:	3b01      	subs	r3, #1
 800284c:	b29b      	uxth	r3, r3
 800284e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002850:	463b      	mov	r3, r7
 8002852:	f7ff fbdd 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8002856:	2800      	cmp	r0, #0
 8002858:	d0bf      	beq.n	80027da <HAL_I2C_Master_Receive+0x236>
 800285a:	e780      	b.n	800275e <HAL_I2C_Master_Receive+0x1ba>
 800285c:	00100002 	.word	0x00100002
 8002860:	00010002 	.word	0x00010002
 8002864:	00010008 	.word	0x00010008
 8002868:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800286c:	4632      	mov	r2, r6
 800286e:	4639      	mov	r1, r7
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff fced 	bl	8002250 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002876:	2800      	cmp	r0, #0
 8002878:	f47f af2e 	bne.w	80026d8 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800287c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	6262      	str	r2, [r4, #36]	; 0x24
 8002882:	6822      	ldr	r2, [r4, #0]
 8002884:	6912      	ldr	r2, [r2, #16]
 8002886:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002888:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800288a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 800288c:	3b01      	subs	r3, #1
 800288e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002890:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002892:	3b01      	subs	r3, #1
 8002894:	b29b      	uxth	r3, r3
 8002896:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002898:	6953      	ldr	r3, [r2, #20]
 800289a:	075b      	lsls	r3, r3, #29
 800289c:	f57f af0c 	bpl.w	80026b8 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80028a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028a2:	1c59      	adds	r1, r3, #1
 80028a4:	6261      	str	r1, [r4, #36]	; 0x24
 80028a6:	e7ae      	b.n	8002806 <HAL_I2C_Master_Receive+0x262>

080028a8 <HAL_I2C_Mem_Write>:
{
 80028a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80028ac:	4604      	mov	r4, r0
 80028ae:	469a      	mov	sl, r3
 80028b0:	4688      	mov	r8, r1
 80028b2:	4691      	mov	r9, r2
 80028b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 80028b6:	f7fe fe2d 	bl	8001514 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80028ba:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80028be:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d003      	beq.n	80028cc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80028c4:	2002      	movs	r0, #2
}
 80028c6:	b002      	add	sp, #8
 80028c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028cc:	9000      	str	r0, [sp, #0]
 80028ce:	2319      	movs	r3, #25
 80028d0:	2201      	movs	r2, #1
 80028d2:	493e      	ldr	r1, [pc, #248]	; (80029cc <HAL_I2C_Mem_Write+0x124>)
 80028d4:	4620      	mov	r0, r4
 80028d6:	f7ff fb9b 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 80028da:	2800      	cmp	r0, #0
 80028dc:	d1f2      	bne.n	80028c4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80028de:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d0ee      	beq.n	80028c4 <HAL_I2C_Mem_Write+0x1c>
 80028e6:	2301      	movs	r3, #1
 80028e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ec:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ee:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028f0:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f2:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028f4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80028f6:	bf58      	it	pl
 80028f8:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028fa:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 80028fc:	bf5c      	itt	pl
 80028fe:	f042 0201 	orrpl.w	r2, r2, #1
 8002902:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800290c:	2321      	movs	r3, #33	; 0x21
 800290e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002912:	2340      	movs	r3, #64	; 0x40
 8002914:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8002918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800291a:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800291c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800291e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002922:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8002924:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002926:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002928:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800292a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800292c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800292e:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8002930:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002932:	4653      	mov	r3, sl
 8002934:	f7ff fbc0 	bl	80020b8 <I2C_RequestMemoryWrite>
 8002938:	2800      	cmp	r0, #0
 800293a:	d02a      	beq.n	8002992 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800293c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800293e:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002942:	2b04      	cmp	r3, #4
 8002944:	d107      	bne.n	8002956 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8002946:	2001      	movs	r0, #1
 8002948:	e7bd      	b.n	80028c6 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294a:	f7ff fb8f 	bl	800206c <I2C_WaitOnTXEFlagUntilTimeout>
 800294e:	b120      	cbz	r0, 800295a <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002950:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002952:	2b04      	cmp	r3, #4
 8002954:	d034      	beq.n	80029c0 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8002956:	2003      	movs	r0, #3
 8002958:	e7b5      	b.n	80028c6 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800295a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800295c:	6827      	ldr	r7, [r4, #0]
 800295e:	1c4b      	adds	r3, r1, #1
 8002960:	6263      	str	r3, [r4, #36]	; 0x24
 8002962:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8002964:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002966:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8002968:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800296a:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 800296c:	3b01      	subs	r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002972:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8002974:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002976:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8002978:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800297a:	d50a      	bpl.n	8002992 <HAL_I2C_Mem_Write+0xea>
 800297c:	b148      	cbz	r0, 8002992 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800297e:	1c8b      	adds	r3, r1, #2
 8002980:	6263      	str	r3, [r4, #36]	; 0x24
 8002982:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8002984:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002986:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8002988:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800298a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800298c:	3b01      	subs	r3, #1
 800298e:	b29b      	uxth	r3, r3
 8002990:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002992:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002994:	462a      	mov	r2, r5
 8002996:	4631      	mov	r1, r6
 8002998:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1d5      	bne.n	800294a <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299e:	f7ff fc84 	bl	80022aa <I2C_WaitOnBTFFlagUntilTimeout>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d1d4      	bne.n	8002950 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80029a6:	6822      	ldr	r2, [r4, #0]
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ae:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80029b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ba:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80029be:	e782      	b.n	80028c6 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80029c0:	6822      	ldr	r2, [r4, #0]
 80029c2:	6813      	ldr	r3, [r2, #0]
 80029c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e7bc      	b.n	8002946 <HAL_I2C_Mem_Write+0x9e>
 80029cc:	00100002 	.word	0x00100002
 80029d0:	ffff0000 	.word	0xffff0000

080029d4 <HAL_I2C_Mem_Read>:
{
 80029d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d8:	4604      	mov	r4, r0
 80029da:	b086      	sub	sp, #24
 80029dc:	469a      	mov	sl, r3
 80029de:	460d      	mov	r5, r1
 80029e0:	4691      	mov	r9, r2
 80029e2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80029e4:	f7fe fd96 	bl	8001514 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80029ec:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d004      	beq.n	80029fc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80029f2:	2502      	movs	r5, #2
}
 80029f4:	4628      	mov	r0, r5
 80029f6:	b006      	add	sp, #24
 80029f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fc:	9000      	str	r0, [sp, #0]
 80029fe:	2319      	movs	r3, #25
 8002a00:	2201      	movs	r2, #1
 8002a02:	4981      	ldr	r1, [pc, #516]	; (8002c08 <HAL_I2C_Mem_Read+0x234>)
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7ff fb03 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d1f1      	bne.n	80029f2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8002a0e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d0ed      	beq.n	80029f2 <HAL_I2C_Mem_Read+0x1e>
 8002a16:	2301      	movs	r3, #1
 8002a18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a1c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1e:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a22:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a24:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a26:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002a28:	bf58      	it	pl
 8002a2a:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a2c:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8002a2e:	bf5c      	itt	pl
 8002a30:	f042 0201 	orrpl.w	r2, r2, #1
 8002a34:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a3c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a3e:	2322      	movs	r3, #34	; 0x22
 8002a40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a44:	2340      	movs	r3, #64	; 0x40
 8002a46:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8002a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002a50:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a52:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a56:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 8002a58:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a5a:	4b6c      	ldr	r3, [pc, #432]	; (8002c0c <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a5c:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a5e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002a60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a62:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8002a64:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a66:	4653      	mov	r3, sl
 8002a68:	f7ff fb78 	bl	800215c <I2C_RequestMemoryRead>
 8002a6c:	4605      	mov	r5, r0
 8002a6e:	b130      	cbz	r0, 8002a7e <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002a72:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d13d      	bne.n	8002af6 <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 8002a7a:	2501      	movs	r5, #1
 8002a7c:	e7ba      	b.n	80029f4 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8002a7e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	b992      	cbnz	r2, 8002aaa <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a84:	9002      	str	r0, [sp, #8]
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	9202      	str	r2, [sp, #8]
 8002a8a:	699a      	ldr	r2, [r3, #24]
 8002a8c:	9202      	str	r2, [sp, #8]
 8002a8e:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a96:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002aa4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002aa8:	e7a4      	b.n	80029f4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8002aaa:	2a01      	cmp	r2, #1
 8002aac:	d125      	bne.n	8002afa <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	9003      	str	r0, [sp, #12]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	9203      	str	r2, [sp, #12]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	9203      	str	r2, [sp, #12]
 8002ac4:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002acc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ace:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad0:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8002c10 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8002ad4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0de      	beq.n	8002a98 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d877      	bhi.n	8002bce <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d127      	bne.n	8002b32 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002ae2:	4632      	mov	r2, r6
 8002ae4:	4639      	mov	r1, r7
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f7ff fbb2 	bl	8002250 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	d03f      	beq.n	8002b70 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002af0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d1c1      	bne.n	8002a7a <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8002af6:	2503      	movs	r5, #3
 8002af8:	e77c      	b.n	80029f4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8002afa:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002afc:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8002afe:	d10e      	bne.n	8002b1e <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b06:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	9004      	str	r0, [sp, #16]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	9204      	str	r2, [sp, #16]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	9204      	str	r2, [sp, #16]
 8002b14:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1c:	e7d6      	b.n	8002acc <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b22:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b24:	9005      	str	r0, [sp, #20]
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	9205      	str	r2, [sp, #20]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	9305      	str	r3, [sp, #20]
 8002b2e:	9b05      	ldr	r3, [sp, #20]
 8002b30:	e7ce      	b.n	8002ad0 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 8002b32:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b34:	9600      	str	r6, [sp, #0]
 8002b36:	463b      	mov	r3, r7
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	4641      	mov	r1, r8
 8002b3e:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8002b40:	d124      	bne.n	8002b8c <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b42:	f7ff fa65 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d1d5      	bne.n	8002af6 <HAL_I2C_Mem_Read+0x122>
 8002b4a:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b54:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	1c51      	adds	r1, r2, #1
 8002b5c:	6261      	str	r1, [r4, #36]	; 0x24
 8002b5e:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8002b60:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b6e:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	6262      	str	r2, [r4, #36]	; 0x24
 8002b76:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b78:	6912      	ldr	r2, [r2, #16]
 8002b7a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002b7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002b8a:	e7a3      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b8c:	f7ff fa40 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8002b90:	4602      	mov	r2, r0
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d1af      	bne.n	8002af6 <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002b96:	6821      	ldr	r1, [r4, #0]
 8002b98:	680b      	ldr	r3, [r1, #0]
 8002b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b9e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba0:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ba4:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002ba6:	1c59      	adds	r1, r3, #1
 8002ba8:	6261      	str	r1, [r4, #36]	; 0x24
 8002baa:	6821      	ldr	r1, [r4, #0]
 8002bac:	6909      	ldr	r1, [r1, #16]
 8002bae:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8002bb0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bb2:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002bb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bba:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc2:	463b      	mov	r3, r7
 8002bc4:	f7ff fa24 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d0bf      	beq.n	8002b4c <HAL_I2C_Mem_Read+0x178>
 8002bcc:	e793      	b.n	8002af6 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bce:	4632      	mov	r2, r6
 8002bd0:	4639      	mov	r1, r7
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f7ff fb3c 	bl	8002250 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	d189      	bne.n	8002af0 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	6262      	str	r2, [r4, #36]	; 0x24
 8002be2:	6822      	ldr	r2, [r4, #0]
 8002be4:	6912      	ldr	r2, [r2, #16]
 8002be6:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002be8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bea:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8002bec:	3b01      	subs	r3, #1
 8002bee:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002bf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bf8:	6953      	ldr	r3, [r2, #20]
 8002bfa:	075b      	lsls	r3, r3, #29
 8002bfc:	f57f af6a 	bpl.w	8002ad4 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c02:	1c59      	adds	r1, r3, #1
 8002c04:	6261      	str	r1, [r4, #36]	; 0x24
 8002c06:	e7b7      	b.n	8002b78 <HAL_I2C_Mem_Read+0x1a4>
 8002c08:	00100002 	.word	0x00100002
 8002c0c:	ffff0000 	.word	0xffff0000
 8002c10:	00010004 	.word	0x00010004

08002c14 <HAL_I2C_GetState>:
  return hi2c->State;
 8002c14:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1c:	6803      	ldr	r3, [r0, #0]
{
 8002c1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c22:	07db      	lsls	r3, r3, #31
{
 8002c24:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c26:	d410      	bmi.n	8002c4a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c28:	682b      	ldr	r3, [r5, #0]
 8002c2a:	079f      	lsls	r7, r3, #30
 8002c2c:	d45e      	bmi.n	8002cec <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	682b      	ldr	r3, [r5, #0]
 8002c30:	0719      	lsls	r1, r3, #28
 8002c32:	f100 8095 	bmi.w	8002d60 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c36:	682b      	ldr	r3, [r5, #0]
 8002c38:	075a      	lsls	r2, r3, #29
 8002c3a:	f100 80bf 	bmi.w	8002dbc <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3e:	69ea      	ldr	r2, [r5, #28]
 8002c40:	2a00      	cmp	r2, #0
 8002c42:	f040 812d 	bne.w	8002ea0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002c46:	2000      	movs	r0, #0
 8002c48:	e014      	b.n	8002c74 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c4a:	4c90      	ldr	r4, [pc, #576]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c4c:	6863      	ldr	r3, [r4, #4]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d007      	beq.n	8002c66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c56:	6863      	ldr	r3, [r4, #4]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5e>
 8002c60:	6863      	ldr	r3, [r4, #4]
 8002c62:	03de      	lsls	r6, r3, #15
 8002c64:	d509      	bpl.n	8002c7a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	039c      	lsls	r4, r3, #14
 8002c6a:	d5dd      	bpl.n	8002c28 <HAL_RCC_OscConfig+0xc>
 8002c6c:	686b      	ldr	r3, [r5, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1da      	bne.n	8002c28 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002c72:	2001      	movs	r0, #1
}
 8002c74:	b002      	add	sp, #8
 8002c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7a:	686b      	ldr	r3, [r5, #4]
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c80:	d110      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x88>
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fc43 	bl	8001514 <HAL_GetTick>
 8002c8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	0398      	lsls	r0, r3, #14
 8002c94:	d4c8      	bmi.n	8002c28 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c96:	f7fe fc3d 	bl	8001514 <HAL_GetTick>
 8002c9a:	1b80      	subs	r0, r0, r6
 8002c9c:	2864      	cmp	r0, #100	; 0x64
 8002c9e:	d9f7      	bls.n	8002c90 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	e7e7      	b.n	8002c74 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca4:	b99b      	cbnz	r3, 8002cce <HAL_RCC_OscConfig+0xb2>
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cac:	6023      	str	r3, [r4, #0]
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fc2d 	bl	8001514 <HAL_GetTick>
 8002cba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	0399      	lsls	r1, r3, #14
 8002cc0:	d5b2      	bpl.n	8002c28 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc2:	f7fe fc27 	bl	8001514 <HAL_GetTick>
 8002cc6:	1b80      	subs	r0, r0, r6
 8002cc8:	2864      	cmp	r0, #100	; 0x64
 8002cca:	d9f7      	bls.n	8002cbc <HAL_RCC_OscConfig+0xa0>
 8002ccc:	e7e8      	b.n	8002ca0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	d103      	bne.n	8002cde <HAL_RCC_OscConfig+0xc2>
 8002cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cda:	6023      	str	r3, [r4, #0]
 8002cdc:	e7d1      	b.n	8002c82 <HAL_RCC_OscConfig+0x66>
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	6023      	str	r3, [r4, #0]
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cea:	e7cd      	b.n	8002c88 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cec:	4c67      	ldr	r4, [pc, #412]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cee:	6863      	ldr	r3, [r4, #4]
 8002cf0:	f013 0f0c 	tst.w	r3, #12
 8002cf4:	d007      	beq.n	8002d06 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cf6:	6863      	ldr	r3, [r4, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d110      	bne.n	8002d22 <HAL_RCC_OscConfig+0x106>
 8002d00:	6863      	ldr	r3, [r4, #4]
 8002d02:	03da      	lsls	r2, r3, #15
 8002d04:	d40d      	bmi.n	8002d22 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	079b      	lsls	r3, r3, #30
 8002d0a:	d502      	bpl.n	8002d12 <HAL_RCC_OscConfig+0xf6>
 8002d0c:	692b      	ldr	r3, [r5, #16]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d1af      	bne.n	8002c72 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	696a      	ldr	r2, [r5, #20]
 8002d16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d1a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d1e:	6023      	str	r3, [r4, #0]
 8002d20:	e785      	b.n	8002c2e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d22:	692a      	ldr	r2, [r5, #16]
 8002d24:	4b5a      	ldr	r3, [pc, #360]	; (8002e90 <HAL_RCC_OscConfig+0x274>)
 8002d26:	b16a      	cbz	r2, 8002d44 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fbf2 	bl	8001514 <HAL_GetTick>
 8002d30:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	079f      	lsls	r7, r3, #30
 8002d36:	d4ec      	bmi.n	8002d12 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d38:	f7fe fbec 	bl	8001514 <HAL_GetTick>
 8002d3c:	1b80      	subs	r0, r0, r6
 8002d3e:	2802      	cmp	r0, #2
 8002d40:	d9f7      	bls.n	8002d32 <HAL_RCC_OscConfig+0x116>
 8002d42:	e7ad      	b.n	8002ca0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002d44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d46:	f7fe fbe5 	bl	8001514 <HAL_GetTick>
 8002d4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	0798      	lsls	r0, r3, #30
 8002d50:	f57f af6d 	bpl.w	8002c2e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d54:	f7fe fbde 	bl	8001514 <HAL_GetTick>
 8002d58:	1b80      	subs	r0, r0, r6
 8002d5a:	2802      	cmp	r0, #2
 8002d5c:	d9f6      	bls.n	8002d4c <HAL_RCC_OscConfig+0x130>
 8002d5e:	e79f      	b.n	8002ca0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d60:	69aa      	ldr	r2, [r5, #24]
 8002d62:	4c4a      	ldr	r4, [pc, #296]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d64:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <HAL_RCC_OscConfig+0x278>)
 8002d66:	b1da      	cbz	r2, 8002da0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002d6c:	f7fe fbd2 	bl	8001514 <HAL_GetTick>
 8002d70:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d74:	079b      	lsls	r3, r3, #30
 8002d76:	d50d      	bpl.n	8002d94 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d78:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002d7c:	4b46      	ldr	r3, [pc, #280]	; (8002e98 <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d84:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002d86:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002d88:	9b01      	ldr	r3, [sp, #4]
 8002d8a:	1e5a      	subs	r2, r3, #1
 8002d8c:	9201      	str	r2, [sp, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f9      	bne.n	8002d86 <HAL_RCC_OscConfig+0x16a>
 8002d92:	e750      	b.n	8002c36 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe fbbe 	bl	8001514 <HAL_GetTick>
 8002d98:	1b80      	subs	r0, r0, r6
 8002d9a:	2802      	cmp	r0, #2
 8002d9c:	d9e9      	bls.n	8002d72 <HAL_RCC_OscConfig+0x156>
 8002d9e:	e77f      	b.n	8002ca0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002da0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002da2:	f7fe fbb7 	bl	8001514 <HAL_GetTick>
 8002da6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002daa:	079f      	lsls	r7, r3, #30
 8002dac:	f57f af43 	bpl.w	8002c36 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fe fbb0 	bl	8001514 <HAL_GetTick>
 8002db4:	1b80      	subs	r0, r0, r6
 8002db6:	2802      	cmp	r0, #2
 8002db8:	d9f6      	bls.n	8002da8 <HAL_RCC_OscConfig+0x18c>
 8002dba:	e771      	b.n	8002ca0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dbc:	4c33      	ldr	r4, [pc, #204]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dbe:	69e3      	ldr	r3, [r4, #28]
 8002dc0:	00d8      	lsls	r0, r3, #3
 8002dc2:	d424      	bmi.n	8002e0e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002dc4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	69e3      	ldr	r3, [r4, #28]
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	61e3      	str	r3, [r4, #28]
 8002dce:	69e3      	ldr	r3, [r4, #28]
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	4e30      	ldr	r6, [pc, #192]	; (8002e9c <HAL_RCC_OscConfig+0x280>)
 8002dda:	6833      	ldr	r3, [r6, #0]
 8002ddc:	05d9      	lsls	r1, r3, #23
 8002dde:	d518      	bpl.n	8002e12 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de0:	68eb      	ldr	r3, [r5, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d126      	bne.n	8002e34 <HAL_RCC_OscConfig+0x218>
 8002de6:	6a23      	ldr	r3, [r4, #32]
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002dee:	f7fe fb91 	bl	8001514 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002df6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	6a23      	ldr	r3, [r4, #32]
 8002dfa:	079b      	lsls	r3, r3, #30
 8002dfc:	d53f      	bpl.n	8002e7e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002dfe:	2f00      	cmp	r7, #0
 8002e00:	f43f af1d 	beq.w	8002c3e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e04:	69e3      	ldr	r3, [r4, #28]
 8002e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	61e3      	str	r3, [r4, #28]
 8002e0c:	e717      	b.n	8002c3e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002e0e:	2700      	movs	r7, #0
 8002e10:	e7e2      	b.n	8002dd8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e12:	6833      	ldr	r3, [r6, #0]
 8002e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e18:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fb7b 	bl	8001514 <HAL_GetTick>
 8002e1e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	6833      	ldr	r3, [r6, #0]
 8002e22:	05da      	lsls	r2, r3, #23
 8002e24:	d4dc      	bmi.n	8002de0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e26:	f7fe fb75 	bl	8001514 <HAL_GetTick>
 8002e2a:	eba0 0008 	sub.w	r0, r0, r8
 8002e2e:	2864      	cmp	r0, #100	; 0x64
 8002e30:	d9f6      	bls.n	8002e20 <HAL_RCC_OscConfig+0x204>
 8002e32:	e735      	b.n	8002ca0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	b9ab      	cbnz	r3, 8002e62 <HAL_RCC_OscConfig+0x246>
 8002e36:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6223      	str	r3, [r4, #32]
 8002e42:	6a23      	ldr	r3, [r4, #32]
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fb63 	bl	8001514 <HAL_GetTick>
 8002e4e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e50:	6a23      	ldr	r3, [r4, #32]
 8002e52:	0798      	lsls	r0, r3, #30
 8002e54:	d5d3      	bpl.n	8002dfe <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fe fb5d 	bl	8001514 <HAL_GetTick>
 8002e5a:	1b80      	subs	r0, r0, r6
 8002e5c:	4540      	cmp	r0, r8
 8002e5e:	d9f7      	bls.n	8002e50 <HAL_RCC_OscConfig+0x234>
 8002e60:	e71e      	b.n	8002ca0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	6a23      	ldr	r3, [r4, #32]
 8002e66:	d103      	bne.n	8002e70 <HAL_RCC_OscConfig+0x254>
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	6223      	str	r3, [r4, #32]
 8002e6e:	e7ba      	b.n	8002de6 <HAL_RCC_OscConfig+0x1ca>
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6223      	str	r3, [r4, #32]
 8002e76:	6a23      	ldr	r3, [r4, #32]
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	e7b6      	b.n	8002dec <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe fb49 	bl	8001514 <HAL_GetTick>
 8002e82:	eba0 0008 	sub.w	r0, r0, r8
 8002e86:	42b0      	cmp	r0, r6
 8002e88:	d9b6      	bls.n	8002df8 <HAL_RCC_OscConfig+0x1dc>
 8002e8a:	e709      	b.n	8002ca0 <HAL_RCC_OscConfig+0x84>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	42420000 	.word	0x42420000
 8002e94:	42420480 	.word	0x42420480
 8002e98:	20000014 	.word	0x20000014
 8002e9c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea0:	4c22      	ldr	r4, [pc, #136]	; (8002f2c <HAL_RCC_OscConfig+0x310>)
 8002ea2:	6863      	ldr	r3, [r4, #4]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	f43f aee2 	beq.w	8002c72 <HAL_RCC_OscConfig+0x56>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	4e1f      	ldr	r6, [pc, #124]	; (8002f30 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002eb4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb6:	d12b      	bne.n	8002f10 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fb2c 	bl	8001514 <HAL_GetTick>
 8002ebc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	0199      	lsls	r1, r3, #6
 8002ec2:	d41f      	bmi.n	8002f04 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ec4:	6a2b      	ldr	r3, [r5, #32]
 8002ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ecc:	6862      	ldr	r2, [r4, #4]
 8002ece:	68a9      	ldr	r1, [r5, #8]
 8002ed0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002eda:	6862      	ldr	r2, [r4, #4]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002eea:	f7fe fb13 	bl	8001514 <HAL_GetTick>
 8002eee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	019a      	lsls	r2, r3, #6
 8002ef4:	f53f aea7 	bmi.w	8002c46 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe fb0c 	bl	8001514 <HAL_GetTick>
 8002efc:	1b40      	subs	r0, r0, r5
 8002efe:	2802      	cmp	r0, #2
 8002f00:	d9f6      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x2d4>
 8002f02:	e6cd      	b.n	8002ca0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe fb06 	bl	8001514 <HAL_GetTick>
 8002f08:	1bc0      	subs	r0, r0, r7
 8002f0a:	2802      	cmp	r0, #2
 8002f0c:	d9d7      	bls.n	8002ebe <HAL_RCC_OscConfig+0x2a2>
 8002f0e:	e6c7      	b.n	8002ca0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002f10:	f7fe fb00 	bl	8001514 <HAL_GetTick>
 8002f14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	f57f ae94 	bpl.w	8002c46 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1e:	f7fe faf9 	bl	8001514 <HAL_GetTick>
 8002f22:	1b40      	subs	r0, r0, r5
 8002f24:	2802      	cmp	r0, #2
 8002f26:	d9f6      	bls.n	8002f16 <HAL_RCC_OscConfig+0x2fa>
 8002f28:	e6ba      	b.n	8002ca0 <HAL_RCC_OscConfig+0x84>
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	42420060 	.word	0x42420060

08002f34 <HAL_RCC_GetSysClockFreq>:
{
 8002f34:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f36:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002f38:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f3a:	ac02      	add	r4, sp, #8
 8002f3c:	f103 0510 	add.w	r5, r3, #16
 8002f40:	4622      	mov	r2, r4
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	3308      	adds	r3, #8
 8002f48:	c203      	stmia	r2!, {r0, r1}
 8002f4a:	42ab      	cmp	r3, r5
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	d1f7      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f50:	2301      	movs	r3, #1
 8002f52:	f88d 3004 	strb.w	r3, [sp, #4]
 8002f56:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002f58:	4911      	ldr	r1, [pc, #68]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f5a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002f5e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002f60:	f003 020c 	and.w	r2, r3, #12
 8002f64:	2a08      	cmp	r2, #8
 8002f66:	d117      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f68:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002f6c:	a806      	add	r0, sp, #24
 8002f6e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f70:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f72:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f76:	d50c      	bpl.n	8002f92 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f78:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f7a:	480a      	ldr	r0, [pc, #40]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f7c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f80:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f82:	aa06      	add	r2, sp, #24
 8002f84:	4413      	add	r3, r2
 8002f86:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f8a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002f8e:	b007      	add	sp, #28
 8002f90:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x74>)
 8002f94:	4350      	muls	r0, r2
 8002f96:	e7fa      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002f9a:	e7f8      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x5a>
 8002f9c:	0800fc40 	.word	0x0800fc40
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	007a1200 	.word	0x007a1200
 8002fa8:	003d0900 	.word	0x003d0900

08002fac <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002fac:	4a4d      	ldr	r2, [pc, #308]	; (80030e4 <HAL_RCC_ClockConfig+0x138>)
{
 8002fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002fb2:	6813      	ldr	r3, [r2, #0]
{
 8002fb4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	428b      	cmp	r3, r1
{
 8002fbc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002fbe:	d328      	bcc.n	8003012 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	682a      	ldr	r2, [r5, #0]
 8002fc2:	0791      	lsls	r1, r2, #30
 8002fc4:	d432      	bmi.n	800302c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	07d2      	lsls	r2, r2, #31
 8002fc8:	d438      	bmi.n	800303c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002fca:	4a46      	ldr	r2, [pc, #280]	; (80030e4 <HAL_RCC_ClockConfig+0x138>)
 8002fcc:	6813      	ldr	r3, [r2, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	429e      	cmp	r6, r3
 8002fd4:	d373      	bcc.n	80030be <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd6:	682a      	ldr	r2, [r5, #0]
 8002fd8:	4c43      	ldr	r4, [pc, #268]	; (80030e8 <HAL_RCC_ClockConfig+0x13c>)
 8002fda:	f012 0f04 	tst.w	r2, #4
 8002fde:	d179      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	0713      	lsls	r3, r2, #28
 8002fe2:	d506      	bpl.n	8002ff2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fe4:	6863      	ldr	r3, [r4, #4]
 8002fe6:	692a      	ldr	r2, [r5, #16]
 8002fe8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002fec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ff0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ff2:	f7ff ff9f 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002ff6:	6863      	ldr	r3, [r4, #4]
 8002ff8:	4a3c      	ldr	r2, [pc, #240]	; (80030ec <HAL_RCC_ClockConfig+0x140>)
 8002ffa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ffe:	5cd3      	ldrb	r3, [r2, r3]
 8003000:	40d8      	lsrs	r0, r3
 8003002:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <HAL_RCC_ClockConfig+0x144>)
 8003004:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003006:	2000      	movs	r0, #0
 8003008:	f7fe fa42 	bl	8001490 <HAL_InitTick>
  return HAL_OK;
 800300c:	2000      	movs	r0, #0
}
 800300e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	f023 0307 	bic.w	r3, r3, #7
 8003018:	430b      	orrs	r3, r1
 800301a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800301c:	6813      	ldr	r3, [r2, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	4299      	cmp	r1, r3
 8003024:	d0cc      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8003026:	2001      	movs	r0, #1
 8003028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	492e      	ldr	r1, [pc, #184]	; (80030e8 <HAL_RCC_ClockConfig+0x13c>)
 800302e:	68a8      	ldr	r0, [r5, #8]
 8003030:	684b      	ldr	r3, [r1, #4]
 8003032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003036:	4303      	orrs	r3, r0
 8003038:	604b      	str	r3, [r1, #4]
 800303a:	e7c4      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303c:	686a      	ldr	r2, [r5, #4]
 800303e:	4c2a      	ldr	r4, [pc, #168]	; (80030e8 <HAL_RCC_ClockConfig+0x13c>)
 8003040:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003044:	d11c      	bne.n	8003080 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	d0ec      	beq.n	8003026 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	4313      	orrs	r3, r2
 8003058:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800305a:	f7fe fa5b 	bl	8001514 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003060:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003062:	2b01      	cmp	r3, #1
 8003064:	d114      	bne.n	8003090 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003066:	6863      	ldr	r3, [r4, #4]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b04      	cmp	r3, #4
 800306e:	d0ac      	beq.n	8002fca <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003070:	f7fe fa50 	bl	8001514 <HAL_GetTick>
 8003074:	1bc0      	subs	r0, r0, r7
 8003076:	4540      	cmp	r0, r8
 8003078:	d9f5      	bls.n	8003066 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800307a:	2003      	movs	r0, #3
 800307c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003080:	2a02      	cmp	r2, #2
 8003082:	d102      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003084:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003088:	e7df      	b.n	800304a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	f013 0f02 	tst.w	r3, #2
 800308e:	e7dc      	b.n	800304a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003090:	2b02      	cmp	r3, #2
 8003092:	d10f      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003094:	6863      	ldr	r3, [r4, #4]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b08      	cmp	r3, #8
 800309c:	d095      	beq.n	8002fca <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309e:	f7fe fa39 	bl	8001514 <HAL_GetTick>
 80030a2:	1bc0      	subs	r0, r0, r7
 80030a4:	4540      	cmp	r0, r8
 80030a6:	d9f5      	bls.n	8003094 <HAL_RCC_ClockConfig+0xe8>
 80030a8:	e7e7      	b.n	800307a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030aa:	f7fe fa33 	bl	8001514 <HAL_GetTick>
 80030ae:	1bc0      	subs	r0, r0, r7
 80030b0:	4540      	cmp	r0, r8
 80030b2:	d8e2      	bhi.n	800307a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030b4:	6863      	ldr	r3, [r4, #4]
 80030b6:	f013 0f0c 	tst.w	r3, #12
 80030ba:	d1f6      	bne.n	80030aa <HAL_RCC_ClockConfig+0xfe>
 80030bc:	e785      	b.n	8002fca <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	6813      	ldr	r3, [r2, #0]
 80030c0:	f023 0307 	bic.w	r3, r3, #7
 80030c4:	4333      	orrs	r3, r6
 80030c6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030c8:	6813      	ldr	r3, [r2, #0]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	429e      	cmp	r6, r3
 80030d0:	d1a9      	bne.n	8003026 <HAL_RCC_ClockConfig+0x7a>
 80030d2:	e780      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	6863      	ldr	r3, [r4, #4]
 80030d6:	68e9      	ldr	r1, [r5, #12]
 80030d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030dc:	430b      	orrs	r3, r1
 80030de:	6063      	str	r3, [r4, #4]
 80030e0:	e77e      	b.n	8002fe0 <HAL_RCC_ClockConfig+0x34>
 80030e2:	bf00      	nop
 80030e4:	40022000 	.word	0x40022000
 80030e8:	40021000 	.word	0x40021000
 80030ec:	08010504 	.word	0x08010504
 80030f0:	20000014 	.word	0x20000014

080030f4 <HAL_RCC_GetHCLKFreq>:
}
 80030f4:	4b01      	ldr	r3, [pc, #4]	; (80030fc <HAL_RCC_GetHCLKFreq+0x8>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000014 	.word	0x20000014

08003100 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003102:	4a05      	ldr	r2, [pc, #20]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800310a:	5cd3      	ldrb	r3, [r2, r3]
 800310c:	4a03      	ldr	r2, [pc, #12]	; (800311c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800310e:	6810      	ldr	r0, [r2, #0]
}    
 8003110:	40d8      	lsrs	r0, r3
 8003112:	4770      	bx	lr
 8003114:	40021000 	.word	0x40021000
 8003118:	08010514 	.word	0x08010514
 800311c:	20000014 	.word	0x20000014

08003120 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	4a03      	ldr	r2, [pc, #12]	; (800313c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800312e:	6810      	ldr	r0, [r2, #0]
} 
 8003130:	40d8      	lsrs	r0, r3
 8003132:	4770      	bx	lr
 8003134:	40021000 	.word	0x40021000
 8003138:	08010514 	.word	0x08010514
 800313c:	20000014 	.word	0x20000014

08003140 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003140:	6803      	ldr	r3, [r0, #0]
{
 8003142:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003146:	07d9      	lsls	r1, r3, #31
{
 8003148:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800314a:	d520      	bpl.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314c:	4c35      	ldr	r4, [pc, #212]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800314e:	69e3      	ldr	r3, [r4, #28]
 8003150:	00da      	lsls	r2, r3, #3
 8003152:	d432      	bmi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003154:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	69e3      	ldr	r3, [r4, #28]
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315c:	61e3      	str	r3, [r4, #28]
 800315e:	69e3      	ldr	r3, [r4, #28]
 8003160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	4e2f      	ldr	r6, [pc, #188]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800316a:	6833      	ldr	r3, [r6, #0]
 800316c:	05db      	lsls	r3, r3, #23
 800316e:	d526      	bpl.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003170:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003172:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003176:	d136      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003178:	6a23      	ldr	r3, [r4, #32]
 800317a:	686a      	ldr	r2, [r5, #4]
 800317c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003180:	4313      	orrs	r3, r2
 8003182:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003184:	b11f      	cbz	r7, 800318e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003186:	69e3      	ldr	r3, [r4, #28]
 8003188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800318e:	6828      	ldr	r0, [r5, #0]
 8003190:	0783      	lsls	r3, r0, #30
 8003192:	d506      	bpl.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003194:	4a23      	ldr	r2, [pc, #140]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003196:	68a9      	ldr	r1, [r5, #8]
 8003198:	6853      	ldr	r3, [r2, #4]
 800319a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800319e:	430b      	orrs	r3, r1
 80031a0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031a2:	f010 0010 	ands.w	r0, r0, #16
 80031a6:	d01b      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031a8:	4a1e      	ldr	r2, [pc, #120]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80031aa:	68e9      	ldr	r1, [r5, #12]
 80031ac:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031ae:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6053      	str	r3, [r2, #4]
 80031b8:	e012      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80031ba:	2700      	movs	r7, #0
 80031bc:	e7d4      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031be:	6833      	ldr	r3, [r6, #0]
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80031c6:	f7fe f9a5 	bl	8001514 <HAL_GetTick>
 80031ca:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	6833      	ldr	r3, [r6, #0]
 80031ce:	05d8      	lsls	r0, r3, #23
 80031d0:	d4ce      	bmi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d2:	f7fe f99f 	bl	8001514 <HAL_GetTick>
 80031d6:	eba0 0008 	sub.w	r0, r0, r8
 80031da:	2864      	cmp	r0, #100	; 0x64
 80031dc:	d9f6      	bls.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80031de:	2003      	movs	r0, #3
}
 80031e0:	b002      	add	sp, #8
 80031e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031e6:	686a      	ldr	r2, [r5, #4]
 80031e8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d0c3      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80031f0:	2001      	movs	r0, #1
 80031f2:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031f4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80031f6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031f8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031fe:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8003200:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003202:	07d9      	lsls	r1, r3, #31
 8003204:	d5b8      	bpl.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003206:	f7fe f985 	bl	8001514 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800320e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003210:	6a23      	ldr	r3, [r4, #32]
 8003212:	079a      	lsls	r2, r3, #30
 8003214:	d4b0      	bmi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fe f97d 	bl	8001514 <HAL_GetTick>
 800321a:	1b80      	subs	r0, r0, r6
 800321c:	4540      	cmp	r0, r8
 800321e:	d9f7      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003220:	e7dd      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	40007000 	.word	0x40007000
 800322c:	42420440 	.word	0x42420440

08003230 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003234:	4b35      	ldr	r3, [pc, #212]	; (800330c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8003236:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003238:	ad02      	add	r5, sp, #8
 800323a:	f103 0610 	add.w	r6, r3, #16
 800323e:	462a      	mov	r2, r5
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	3308      	adds	r3, #8
 8003246:	c203      	stmia	r2!, {r0, r1}
 8003248:	42b3      	cmp	r3, r6
 800324a:	4615      	mov	r5, r2
 800324c:	d1f7      	bne.n	800323e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800324e:	2301      	movs	r3, #1
 8003250:	f88d 3004 	strb.w	r3, [sp, #4]
 8003254:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8003256:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003258:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 800325c:	d047      	beq.n	80032ee <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 800325e:	2c10      	cmp	r4, #16
 8003260:	d017      	beq.n	8003292 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8003262:	2c01      	cmp	r4, #1
 8003264:	d14f      	bne.n	8003306 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003266:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800326a:	4a29      	ldr	r2, [pc, #164]	; (8003310 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800326c:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800326e:	4019      	ands	r1, r3
 8003270:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8003274:	d044      	beq.n	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327e:	d12d      	bne.n	80032dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8003280:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003284:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8003286:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 800328a:	bf08      	it	eq
 800328c:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 800328e:	b006      	add	sp, #24
 8003290:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8003292:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8003294:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800329c:	d0f7      	beq.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800329e:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80032a2:	a806      	add	r0, sp, #24
 80032a4:	4402      	add	r2, r0
 80032a6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032aa:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ac:	bf41      	itttt	mi
 80032ae:	685a      	ldrmi	r2, [r3, #4]
 80032b0:	a906      	addmi	r1, sp, #24
 80032b2:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80032b6:	1852      	addmi	r2, r2, r1
 80032b8:	bf44      	itt	mi
 80032ba:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80032be:	4a15      	ldrmi	r2, [pc, #84]	; (8003314 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032c0:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80032c2:	bf4c      	ite	mi
 80032c4:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032c8:	4a13      	ldrpl	r2, [pc, #76]	; (8003318 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032ca:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032cc:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032d0:	d4dd      	bmi.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 80032d2:	2303      	movs	r3, #3
 80032d4:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80032d6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80032da:	e7d8      	b.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80032dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032e0:	d111      	bne.n	8003306 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80032e2:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80032e4:	f24f 4024 	movw	r0, #62500	; 0xf424
 80032e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032ec:	e7cd      	b.n	800328a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80032ee:	f7ff ff17 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 80032f2:	4b07      	ldr	r3, [pc, #28]	; (8003310 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80032fa:	3301      	adds	r3, #1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	e7ea      	b.n	80032d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8003300:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003304:	e7c3      	b.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8003306:	2000      	movs	r0, #0
 8003308:	e7c1      	b.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800330a:	bf00      	nop
 800330c:	0800fc50 	.word	0x0800fc50
 8003310:	40021000 	.word	0x40021000
 8003314:	007a1200 	.word	0x007a1200
 8003318:	003d0900 	.word	0x003d0900

0800331c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331c:	6a03      	ldr	r3, [r0, #32]
{
 800331e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003326:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800332c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800332e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003332:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003334:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003336:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800333a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800333c:	4d0a      	ldr	r5, [pc, #40]	; (8003368 <TIM_OC1_SetConfig+0x4c>)
 800333e:	42a8      	cmp	r0, r5
 8003340:	d10b      	bne.n	800335a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003342:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003344:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003348:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800334a:	698e      	ldr	r6, [r1, #24]
 800334c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800334e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003352:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003354:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003358:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800335c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800335e:	684a      	ldr	r2, [r1, #4]
 8003360:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003362:	6203      	str	r3, [r0, #32]
 8003364:	bd70      	pop	{r4, r5, r6, pc}
 8003366:	bf00      	nop
 8003368:	40012c00 	.word	0x40012c00

0800336c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800336c:	6a03      	ldr	r3, [r0, #32]
{
 800336e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003374:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003376:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003378:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800337a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800337c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800337e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003382:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003384:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003386:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800338a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800338e:	4d0b      	ldr	r5, [pc, #44]	; (80033bc <TIM_OC3_SetConfig+0x50>)
 8003390:	42a8      	cmp	r0, r5
 8003392:	d10d      	bne.n	80033b0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003394:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800339a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800339e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033a0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033a2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033a6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80033a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ac:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033b4:	684a      	ldr	r2, [r1, #4]
 80033b6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	6203      	str	r3, [r0, #32]
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	40012c00 	.word	0x40012c00

080033c0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033c0:	6a03      	ldr	r3, [r0, #32]
{
 80033c2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ce:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033d2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033da:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80033dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033e0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80033e4:	4d06      	ldr	r5, [pc, #24]	; (8003400 <TIM_OC4_SetConfig+0x40>)
 80033e6:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80033e8:	bf02      	ittt	eq
 80033ea:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033ec:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80033f0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033f8:	684a      	ldr	r2, [r1, #4]
 80033fa:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fc:	6203      	str	r3, [r0, #32]
 80033fe:	bd30      	pop	{r4, r5, pc}
 8003400:	40012c00 	.word	0x40012c00

08003404 <HAL_TIM_PWM_MspInit>:
 8003404:	4770      	bx	lr

08003406 <HAL_TIM_IC_MspInit>:
 8003406:	4770      	bx	lr

08003408 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003408:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800340c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800340e:	2b01      	cmp	r3, #1
 8003410:	f04f 0302 	mov.w	r3, #2
 8003414:	d01c      	beq.n	8003450 <HAL_TIM_ConfigClockSource+0x48>
 8003416:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800341c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800341e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003422:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003424:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003428:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800342c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800342e:	680a      	ldr	r2, [r1, #0]
 8003430:	2a40      	cmp	r2, #64	; 0x40
 8003432:	d079      	beq.n	8003528 <HAL_TIM_ConfigClockSource+0x120>
 8003434:	d819      	bhi.n	800346a <HAL_TIM_ConfigClockSource+0x62>
 8003436:	2a10      	cmp	r2, #16
 8003438:	f000 8093 	beq.w	8003562 <HAL_TIM_ConfigClockSource+0x15a>
 800343c:	d80a      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x4c>
 800343e:	2a00      	cmp	r2, #0
 8003440:	f000 8089 	beq.w	8003556 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8003444:	2301      	movs	r3, #1
 8003446:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800344a:	2300      	movs	r3, #0
 800344c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003450:	4618      	mov	r0, r3
}
 8003452:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003454:	2a20      	cmp	r2, #32
 8003456:	f000 808a 	beq.w	800356e <HAL_TIM_ConfigClockSource+0x166>
 800345a:	2a30      	cmp	r2, #48	; 0x30
 800345c:	d1f2      	bne.n	8003444 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800345e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003460:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003464:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8003468:	e036      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800346a:	2a70      	cmp	r2, #112	; 0x70
 800346c:	d036      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0xd4>
 800346e:	d81b      	bhi.n	80034a8 <HAL_TIM_ConfigClockSource+0xa0>
 8003470:	2a50      	cmp	r2, #80	; 0x50
 8003472:	d042      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0xf2>
 8003474:	2a60      	cmp	r2, #96	; 0x60
 8003476:	d1e5      	bne.n	8003444 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003478:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800347a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003480:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003482:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003484:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003486:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003488:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003490:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003494:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003498:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800349a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800349c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800349e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80034a2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80034a6:	e017      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80034a8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80034ac:	d011      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0xca>
 80034ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80034b2:	d1c7      	bne.n	8003444 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b4:	688a      	ldr	r2, [r1, #8]
 80034b6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80034b8:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034ba:	68c9      	ldr	r1, [r1, #12]
 80034bc:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034be:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80034c6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c8:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034d0:	e002      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	e7b3      	b.n	8003444 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034dc:	688a      	ldr	r2, [r1, #8]
 80034de:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80034e0:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034e2:	68c9      	ldr	r1, [r1, #12]
 80034e4:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80034ee:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80034f0:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80034f2:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80034f8:	e7ee      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fa:	684c      	ldr	r4, [r1, #4]
 80034fc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80034fe:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003500:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003502:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003506:	f025 0501 	bic.w	r5, r5, #1
 800350a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800350e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003510:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003514:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003518:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800351a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800351c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800351e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003522:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8003526:	e7d7      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003528:	684c      	ldr	r4, [r1, #4]
 800352a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800352c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800352e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003530:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003534:	f025 0501 	bic.w	r5, r5, #1
 8003538:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800353a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800353c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800353e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003542:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003548:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800354a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800354c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003550:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8003554:	e7c0      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003556:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003558:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800355c:	f042 0207 	orr.w	r2, r2, #7
 8003560:	e7ba      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003562:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003564:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003568:	f042 0217 	orr.w	r2, r2, #23
 800356c:	e7b4      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800356e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003570:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003574:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8003578:	e7ae      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0xd0>

0800357a <HAL_TIM_OC_DelayElapsedCallback>:
 800357a:	4770      	bx	lr

0800357c <HAL_TIM_PWM_PulseFinishedCallback>:
 800357c:	4770      	bx	lr

0800357e <HAL_TIM_TriggerCallback>:
 800357e:	4770      	bx	lr

08003580 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003580:	6803      	ldr	r3, [r0, #0]
{
 8003582:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003584:	691a      	ldr	r2, [r3, #16]
{
 8003586:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003588:	0791      	lsls	r1, r2, #30
 800358a:	d50e      	bpl.n	80035aa <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	0792      	lsls	r2, r2, #30
 8003590:	d50b      	bpl.n	80035aa <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003592:	f06f 0202 	mvn.w	r2, #2
 8003596:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003598:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800359a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800359c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800359e:	079b      	lsls	r3, r3, #30
 80035a0:	d077      	beq.n	8003692 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	f002 f86d 	bl	8005680 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	2300      	movs	r3, #0
 80035a8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	0750      	lsls	r0, r2, #29
 80035b0:	d510      	bpl.n	80035d4 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	0751      	lsls	r1, r2, #29
 80035b6:	d50d      	bpl.n	80035d4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035b8:	f06f 0204 	mvn.w	r2, #4
 80035bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035be:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035c2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80035c8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ca:	d068      	beq.n	800369e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80035cc:	f002 f858 	bl	8005680 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d0:	2300      	movs	r3, #0
 80035d2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	0712      	lsls	r2, r2, #28
 80035da:	d50f      	bpl.n	80035fc <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	0710      	lsls	r0, r2, #28
 80035e0:	d50c      	bpl.n	80035fc <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035e2:	f06f 0208 	mvn.w	r2, #8
 80035e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035e8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ec:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ee:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80035f0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035f2:	d05a      	beq.n	80036aa <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80035f4:	f002 f844 	bl	8005680 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f8:	2300      	movs	r3, #0
 80035fa:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	06d2      	lsls	r2, r2, #27
 8003602:	d510      	bpl.n	8003626 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	06d0      	lsls	r0, r2, #27
 8003608:	d50d      	bpl.n	8003626 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800360a:	f06f 0210 	mvn.w	r2, #16
 800360e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003610:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003612:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003614:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003616:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800361c:	d04b      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800361e:	f002 f82f 	bl	8005680 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	2300      	movs	r3, #0
 8003624:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	07d1      	lsls	r1, r2, #31
 800362c:	d508      	bpl.n	8003640 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	07d2      	lsls	r2, r2, #31
 8003632:	d505      	bpl.n	8003640 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003634:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003638:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800363a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800363c:	f005 fb02 	bl	8008c44 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	0610      	lsls	r0, r2, #24
 8003646:	d508      	bpl.n	800365a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	0611      	lsls	r1, r2, #24
 800364c:	d505      	bpl.n	800365a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800364e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003652:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003654:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003656:	f000 fa6c 	bl	8003b32 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	0652      	lsls	r2, r2, #25
 8003660:	d508      	bpl.n	8003674 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	0650      	lsls	r0, r2, #25
 8003666:	d505      	bpl.n	8003674 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003668:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800366c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800366e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003670:	f7ff ff85 	bl	800357e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	0691      	lsls	r1, r2, #26
 800367a:	d522      	bpl.n	80036c2 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	0692      	lsls	r2, r2, #26
 8003680:	d51f      	bpl.n	80036c2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003682:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003686:	4620      	mov	r0, r4
}
 8003688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800368c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800368e:	f000 ba4f 	b.w	8003b30 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003692:	f7ff ff72 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003696:	4620      	mov	r0, r4
 8003698:	f7ff ff70 	bl	800357c <HAL_TIM_PWM_PulseFinishedCallback>
 800369c:	e783      	b.n	80035a6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	f7ff ff6c 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a2:	4620      	mov	r0, r4
 80036a4:	f7ff ff6a 	bl	800357c <HAL_TIM_PWM_PulseFinishedCallback>
 80036a8:	e792      	b.n	80035d0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036aa:	f7ff ff66 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ae:	4620      	mov	r0, r4
 80036b0:	f7ff ff64 	bl	800357c <HAL_TIM_PWM_PulseFinishedCallback>
 80036b4:	e7a0      	b.n	80035f8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	f7ff ff60 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ba:	4620      	mov	r0, r4
 80036bc:	f7ff ff5e 	bl	800357c <HAL_TIM_PWM_PulseFinishedCallback>
 80036c0:	e7af      	b.n	8003622 <HAL_TIM_IRQHandler+0xa2>
 80036c2:	bd10      	pop	{r4, pc}

080036c4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c4:	4a1a      	ldr	r2, [pc, #104]	; (8003730 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80036c6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c8:	4290      	cmp	r0, r2
 80036ca:	d00a      	beq.n	80036e2 <TIM_Base_SetConfig+0x1e>
 80036cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036d0:	d007      	beq.n	80036e2 <TIM_Base_SetConfig+0x1e>
 80036d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80036d6:	4290      	cmp	r0, r2
 80036d8:	d003      	beq.n	80036e2 <TIM_Base_SetConfig+0x1e>
 80036da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036de:	4290      	cmp	r0, r2
 80036e0:	d115      	bne.n	800370e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80036e2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036e8:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ea:	4a11      	ldr	r2, [pc, #68]	; (8003730 <TIM_Base_SetConfig+0x6c>)
 80036ec:	4290      	cmp	r0, r2
 80036ee:	d00a      	beq.n	8003706 <TIM_Base_SetConfig+0x42>
 80036f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036f4:	d007      	beq.n	8003706 <TIM_Base_SetConfig+0x42>
 80036f6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80036fa:	4290      	cmp	r0, r2
 80036fc:	d003      	beq.n	8003706 <TIM_Base_SetConfig+0x42>
 80036fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003702:	4290      	cmp	r0, r2
 8003704:	d103      	bne.n	800370e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003706:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800370e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003714:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003716:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003718:	688b      	ldr	r3, [r1, #8]
 800371a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800371c:	680b      	ldr	r3, [r1, #0]
 800371e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <TIM_Base_SetConfig+0x6c>)
 8003722:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003724:	bf04      	itt	eq
 8003726:	690b      	ldreq	r3, [r1, #16]
 8003728:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800372a:	2301      	movs	r3, #1
 800372c:	6143      	str	r3, [r0, #20]
 800372e:	4770      	bx	lr
 8003730:	40012c00 	.word	0x40012c00

08003734 <HAL_TIM_Base_Init>:
{
 8003734:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003736:	4604      	mov	r4, r0
 8003738:	b1a0      	cbz	r0, 8003764 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800373a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800373e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003742:	b91b      	cbnz	r3, 800374c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003744:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003748:	f005 fb00 	bl	8008d4c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800374c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003750:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003754:	1d21      	adds	r1, r4, #4
 8003756:	f7ff ffb5 	bl	80036c4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800375a:	2301      	movs	r3, #1
  return HAL_OK;
 800375c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800375e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003762:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003764:	2001      	movs	r0, #1
}
 8003766:	bd10      	pop	{r4, pc}

08003768 <HAL_TIM_PWM_Init>:
{
 8003768:	b510      	push	{r4, lr}
  if(htim == NULL)
 800376a:	4604      	mov	r4, r0
 800376c:	b1a0      	cbz	r0, 8003798 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800376e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003772:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003776:	b91b      	cbnz	r3, 8003780 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003778:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800377c:	f7ff fe42 	bl	8003404 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003780:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003782:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003784:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003788:	1d21      	adds	r1, r4, #4
 800378a:	f7ff ff9b 	bl	80036c4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800378e:	2301      	movs	r3, #1
  return HAL_OK;
 8003790:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003792:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003796:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003798:	2001      	movs	r0, #1
}
 800379a:	bd10      	pop	{r4, pc}

0800379c <HAL_TIM_IC_Init>:
{
 800379c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800379e:	4604      	mov	r4, r0
 80037a0:	b1a0      	cbz	r0, 80037cc <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80037a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037aa:	b91b      	cbnz	r3, 80037b4 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80037ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80037b0:	f7ff fe29 	bl	8003406 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80037b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80037b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037bc:	1d21      	adds	r1, r4, #4
 80037be:	f7ff ff81 	bl	80036c4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80037c2:	2301      	movs	r3, #1
  return HAL_OK;
 80037c4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80037c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80037ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037cc:	2001      	movs	r0, #1
}
 80037ce:	bd10      	pop	{r4, pc}

080037d0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d0:	6a03      	ldr	r3, [r0, #32]
{
 80037d2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d4:	f023 0310 	bic.w	r3, r3, #16
 80037d8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80037da:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80037dc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80037de:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037ea:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80037ec:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037f4:	4d0b      	ldr	r5, [pc, #44]	; (8003824 <TIM_OC2_SetConfig+0x54>)
 80037f6:	42a8      	cmp	r0, r5
 80037f8:	d10d      	bne.n	8003816 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037fa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80037fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003800:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003804:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003806:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003808:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800380c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800380e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003812:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003816:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003818:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800381a:	684a      	ldr	r2, [r1, #4]
 800381c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800381e:	6203      	str	r3, [r0, #32]
 8003820:	bd70      	pop	{r4, r5, r6, pc}
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00

08003828 <HAL_TIM_PWM_ConfigChannel>:
{
 8003828:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800382a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800382e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003830:	2b01      	cmp	r3, #1
 8003832:	f04f 0002 	mov.w	r0, #2
 8003836:	d025      	beq.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8003838:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800383a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800383e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8003842:	2a0c      	cmp	r2, #12
 8003844:	d818      	bhi.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x50>
 8003846:	e8df f002 	tbb	[pc, r2]
 800384a:	1707      	.short	0x1707
 800384c:	171e1717 	.word	0x171e1717
 8003850:	172f1717 	.word	0x172f1717
 8003854:	1717      	.short	0x1717
 8003856:	40          	.byte	0x40
 8003857:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003858:	6820      	ldr	r0, [r4, #0]
 800385a:	f7ff fd5f 	bl	800331c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800385e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003860:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	f042 0208 	orr.w	r2, r2, #8
 8003868:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	f022 0204 	bic.w	r2, r2, #4
 8003870:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003872:	699a      	ldr	r2, [r3, #24]
 8003874:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003876:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003878:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800387a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800387c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003880:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003884:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003886:	6820      	ldr	r0, [r4, #0]
 8003888:	f7ff ffa2 	bl	80037d0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800388c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800388e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038a6:	e7e6      	b.n	8003876 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	f7ff fd5f 	bl	800336c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ae:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038b0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	f042 0208 	orr.w	r2, r2, #8
 80038b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	f022 0204 	bic.w	r2, r2, #4
 80038c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80038c6:	61da      	str	r2, [r3, #28]
    break;
 80038c8:	e7d6      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ca:	6820      	ldr	r0, [r4, #0]
 80038cc:	f7ff fd78 	bl	80033c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038d0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80038d2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038ea:	e7ec      	b.n	80038c6 <HAL_TIM_PWM_ConfigChannel+0x9e>

080038ec <TIM_TI1_SetConfig>:
{
 80038ec:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ee:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038f0:	4e12      	ldr	r6, [pc, #72]	; (800393c <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f2:	f024 0401 	bic.w	r4, r4, #1
 80038f6:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038f8:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80038fa:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80038fc:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038fe:	d00a      	beq.n	8003916 <TIM_TI1_SetConfig+0x2a>
 8003900:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003904:	d007      	beq.n	8003916 <TIM_TI1_SetConfig+0x2a>
 8003906:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800390a:	42b0      	cmp	r0, r6
 800390c:	d003      	beq.n	8003916 <TIM_TI1_SetConfig+0x2a>
 800390e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003912:	42b0      	cmp	r0, r6
 8003914:	d10f      	bne.n	8003936 <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003916:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800391a:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800391c:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800391e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003922:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003924:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003928:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800392c:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800392e:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8003930:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003932:	6201      	str	r1, [r0, #32]
}
 8003934:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003936:	f044 0201 	orr.w	r2, r4, #1
 800393a:	e7ef      	b.n	800391c <TIM_TI1_SetConfig+0x30>
 800393c:	40012c00 	.word	0x40012c00

08003940 <HAL_TIM_IC_ConfigChannel>:
{
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003942:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003946:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003948:	2b01      	cmp	r3, #1
{
 800394a:	460d      	mov	r5, r1
 800394c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003950:	d019      	beq.n	8003986 <HAL_TIM_IC_ConfigChannel+0x46>
 8003952:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003958:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800395c:	b9a2      	cbnz	r2, 8003988 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 800395e:	68cb      	ldr	r3, [r1, #12]
 8003960:	6820      	ldr	r0, [r4, #0]
 8003962:	c906      	ldmia	r1, {r1, r2}
 8003964:	f7ff ffc2 	bl	80038ec <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003968:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800396a:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	f022 020c 	bic.w	r2, r2, #12
 8003972:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	430a      	orrs	r2, r1
 8003978:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800397a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800397c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800397e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003982:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8003988:	2a04      	cmp	r2, #4
 800398a:	688e      	ldr	r6, [r1, #8]
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	c982      	ldmia	r1, {r1, r7}
 8003990:	68e8      	ldr	r0, [r5, #12]
 8003992:	d11f      	bne.n	80039d4 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003994:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003996:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003998:	f022 0210 	bic.w	r2, r2, #16
 800399c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399e:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 80039a0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039a6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039aa:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ac:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039b0:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039b2:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039b4:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b8:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039bc:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80039be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c0:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039c8:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039ca:	699a      	ldr	r2, [r3, #24]
 80039cc:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80039d0:	619e      	str	r6, [r3, #24]
 80039d2:	e7d2      	b.n	800397a <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 80039d4:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039d6:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 80039d8:	d11c      	bne.n	8003a14 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039e0:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039e2:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039e4:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 80039e8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 80039ea:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039ec:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039f2:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039f4:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039f6:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039fa:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039fe:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8003a00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a02:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	f022 020c 	bic.w	r2, r2, #12
 8003a0a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a0c:	69da      	ldr	r2, [r3, #28]
 8003a0e:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a10:	61de      	str	r6, [r3, #28]
 8003a12:	e7b2      	b.n	800397a <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a1a:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a1c:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 8003a22:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a24:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a28:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a2c:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003a2e:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a30:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003a32:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 8003a36:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003a3a:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8003a3c:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a3e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a46:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8003a4e:	e7df      	b.n	8003a10 <HAL_TIM_IC_ConfigChannel+0xd0>

08003a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a50:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003a52:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a54:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8003a56:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003a58:	ea23 0304 	bic.w	r3, r3, r4
 8003a5c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003a5e:	6a03      	ldr	r3, [r0, #32]
 8003a60:	408a      	lsls	r2, r1
 8003a62:	431a      	orrs	r2, r3
 8003a64:	6202      	str	r2, [r0, #32]
 8003a66:	bd10      	pop	{r4, pc}

08003a68 <HAL_TIM_PWM_Start>:
{
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	6800      	ldr	r0, [r0, #0]
 8003a70:	f7ff ffee 	bl	8003a50 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	4a06      	ldr	r2, [pc, #24]	; (8003a90 <HAL_TIM_PWM_Start+0x28>)
}
 8003a78:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a7a:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8003a7c:	bf02      	ittt	eq
 8003a7e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8003a80:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8003a84:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
}
 8003a8e:	bd10      	pop	{r4, pc}
 8003a90:	40012c00 	.word	0x40012c00

08003a94 <HAL_TIM_IC_Start_IT>:
{
 8003a94:	b510      	push	{r4, lr}
 8003a96:	4604      	mov	r4, r0
  switch (Channel)
 8003a98:	290c      	cmp	r1, #12
 8003a9a:	d80d      	bhi.n	8003ab8 <HAL_TIM_IC_Start_IT+0x24>
 8003a9c:	e8df f001 	tbb	[pc, r1]
 8003aa0:	0c0c0c07 	.word	0x0c0c0c07
 8003aa4:	0c0c0c17 	.word	0x0c0c0c17
 8003aa8:	0c0c0c1c 	.word	0x0c0c0c1c
 8003aac:	21          	.byte	0x21
 8003aad:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003aae:	6802      	ldr	r2, [r0, #0]
 8003ab0:	68d3      	ldr	r3, [r2, #12]
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ab6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f7ff ffc8 	bl	8003a50 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8003ac0:	6822      	ldr	r2, [r4, #0]
}
 8003ac2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003ac4:	6813      	ldr	r3, [r2, #0]
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6013      	str	r3, [r2, #0]
}
 8003acc:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ace:	6802      	ldr	r2, [r0, #0]
 8003ad0:	68d3      	ldr	r3, [r2, #12]
 8003ad2:	f043 0304 	orr.w	r3, r3, #4
 8003ad6:	e7ee      	b.n	8003ab6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ad8:	6802      	ldr	r2, [r0, #0]
 8003ada:	68d3      	ldr	r3, [r2, #12]
 8003adc:	f043 0308 	orr.w	r3, r3, #8
 8003ae0:	e7e9      	b.n	8003ab6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ae2:	6802      	ldr	r2, [r0, #0]
 8003ae4:	68d3      	ldr	r3, [r2, #12]
 8003ae6:	f043 0310 	orr.w	r3, r3, #16
 8003aea:	e7e4      	b.n	8003ab6 <HAL_TIM_IC_Start_IT+0x22>

08003aec <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003aec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003af0:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	f04f 0302 	mov.w	r3, #2
 8003af8:	d018      	beq.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8003afa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003afe:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003b00:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003b02:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003b04:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003b06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b0a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	4322      	orrs	r2, r4
 8003b10:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b18:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b26:	2300      	movs	r3, #0
 8003b28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003b2c:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003b2e:	bd10      	pop	{r4, pc}

08003b30 <HAL_TIMEx_CommutationCallback>:
 8003b30:	4770      	bx	lr

08003b32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b32:	4770      	bx	lr

08003b34 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b34:	6803      	ldr	r3, [r0, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b3c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b46:	2320      	movs	r3, #32
 8003b48:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003b4c:	4770      	bx	lr
	...

08003b50 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b54:	6805      	ldr	r5, [r0, #0]
 8003b56:	68c2      	ldr	r2, [r0, #12]
 8003b58:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b5a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b60:	4313      	orrs	r3, r2
 8003b62:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b64:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8003b66:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8003b6c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003b70:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b74:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b7a:	696b      	ldr	r3, [r5, #20]
 8003b7c:	6982      	ldr	r2, [r0, #24]
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b82:	4313      	orrs	r3, r2
 8003b84:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003b86:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <UART_SetConfig+0x138>)
{
 8003b88:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8003b8a:	429d      	cmp	r5, r3
 8003b8c:	f04f 0419 	mov.w	r4, #25
 8003b90:	d146      	bne.n	8003c20 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003b92:	f7ff fac5 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 8003b96:	fb04 f300 	mul.w	r3, r4, r0
 8003b9a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003b9e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003ba2:	00b6      	lsls	r6, r6, #2
 8003ba4:	fbb3 f3f6 	udiv	r3, r3, r6
 8003ba8:	fbb3 f3f8 	udiv	r3, r3, r8
 8003bac:	011e      	lsls	r6, r3, #4
 8003bae:	f7ff fab7 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 8003bb2:	4360      	muls	r0, r4
 8003bb4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	fbb0 f7f3 	udiv	r7, r0, r3
 8003bbe:	f7ff faaf 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 8003bc2:	4360      	muls	r0, r4
 8003bc4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bce:	fbb3 f3f8 	udiv	r3, r3, r8
 8003bd2:	fb08 7313 	mls	r3, r8, r3, r7
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	3332      	adds	r3, #50	; 0x32
 8003bda:	fbb3 f3f8 	udiv	r3, r3, r8
 8003bde:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003be2:	f7ff fa9d 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 8003be6:	4360      	muls	r0, r4
 8003be8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003bec:	0092      	lsls	r2, r2, #2
 8003bee:	fbb0 faf2 	udiv	sl, r0, r2
 8003bf2:	f7ff fa95 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003bf6:	4360      	muls	r0, r4
 8003bf8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c06:	fb08 a313 	mls	r3, r8, r3, sl
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	3332      	adds	r3, #50	; 0x32
 8003c0e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	433b      	orrs	r3, r7
 8003c18:	4433      	add	r3, r6
 8003c1a:	60ab      	str	r3, [r5, #8]
 8003c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c20:	f7ff fa6e 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8003c24:	fb04 f300 	mul.w	r3, r4, r0
 8003c28:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003c2c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003c30:	00b6      	lsls	r6, r6, #2
 8003c32:	fbb3 f3f6 	udiv	r3, r3, r6
 8003c36:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c3a:	011e      	lsls	r6, r3, #4
 8003c3c:	f7ff fa60 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8003c40:	4360      	muls	r0, r4
 8003c42:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	fbb0 f7f3 	udiv	r7, r0, r3
 8003c4c:	f7ff fa58 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8003c50:	4360      	muls	r0, r4
 8003c52:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c60:	fb08 7313 	mls	r3, r8, r3, r7
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	3332      	adds	r3, #50	; 0x32
 8003c68:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c6c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003c70:	f7ff fa46 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8003c74:	4360      	muls	r0, r4
 8003c76:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003c7a:	0092      	lsls	r2, r2, #2
 8003c7c:	fbb0 faf2 	udiv	sl, r0, r2
 8003c80:	f7ff fa3e 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8003c84:	e7b7      	b.n	8003bf6 <UART_SetConfig+0xa6>
 8003c86:	bf00      	nop
 8003c88:	40013800 	.word	0x40013800

08003c8c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	4604      	mov	r4, r0
 8003c90:	460e      	mov	r6, r1
 8003c92:	4617      	mov	r7, r2
 8003c94:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003c96:	6821      	ldr	r1, [r4, #0]
 8003c98:	680b      	ldr	r3, [r1, #0]
 8003c9a:	ea36 0303 	bics.w	r3, r6, r3
 8003c9e:	d101      	bne.n	8003ca4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003ca0:	2000      	movs	r0, #0
}
 8003ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003ca4:	1c6b      	adds	r3, r5, #1
 8003ca6:	d0f7      	beq.n	8003c98 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003ca8:	b995      	cbnz	r5, 8003cd0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003caa:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003cac:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cb4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003cbe:	2320      	movs	r3, #32
 8003cc0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003cd0:	f7fd fc20 	bl	8001514 <HAL_GetTick>
 8003cd4:	1bc0      	subs	r0, r0, r7
 8003cd6:	4285      	cmp	r5, r0
 8003cd8:	d2dd      	bcs.n	8003c96 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003cda:	e7e6      	b.n	8003caa <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003cdc <HAL_UART_Init>:
{
 8003cdc:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003cde:	4604      	mov	r4, r0
 8003ce0:	b340      	cbz	r0, 8003d34 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003ce2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003ce6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cea:	b91b      	cbnz	r3, 8003cf4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003cec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003cf0:	f005 f8d8 	bl	8008ea4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003cf4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003cf6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003cf8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003cfc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003cfe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003d00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d04:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003d06:	f7ff ff23 	bl	8003b50 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d1c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d24:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8003d26:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003d2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003d2e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003d32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d34:	2001      	movs	r0, #1
}
 8003d36:	bd10      	pop	{r4, pc}

08003d38 <HAL_UART_Transmit>:
{
 8003d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003d3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8003d42:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8003d44:	2b20      	cmp	r3, #32
{
 8003d46:	460d      	mov	r5, r1
 8003d48:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003d4a:	d14e      	bne.n	8003dea <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8003d4c:	2900      	cmp	r1, #0
 8003d4e:	d049      	beq.n	8003de4 <HAL_UART_Transmit+0xac>
 8003d50:	2a00      	cmp	r2, #0
 8003d52:	d047      	beq.n	8003de4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8003d54:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d046      	beq.n	8003dea <HAL_UART_Transmit+0xb2>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d66:	2321      	movs	r3, #33	; 0x21
 8003d68:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003d6c:	f7fd fbd2 	bl	8001514 <HAL_GetTick>
 8003d70:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8003d72:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d76:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003d7a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	b96b      	cbnz	r3, 8003d9c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d80:	463b      	mov	r3, r7
 8003d82:	4632      	mov	r2, r6
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	4620      	mov	r0, r4
 8003d88:	f7ff ff80 	bl	8003c8c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003d8c:	b9a8      	cbnz	r0, 8003dba <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8003d8e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003d90:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003d94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8003d9c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d9e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003da6:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003da8:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dae:	4620      	mov	r0, r4
 8003db0:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003db2:	d10e      	bne.n	8003dd2 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003db4:	f7ff ff6a 	bl	8003c8c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003db8:	b110      	cbz	r0, 8003dc0 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8003dba:	2003      	movs	r0, #3
 8003dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003dc0:	882b      	ldrh	r3, [r5, #0]
 8003dc2:	6822      	ldr	r2, [r4, #0]
 8003dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc8:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003dca:	6923      	ldr	r3, [r4, #16]
 8003dcc:	b943      	cbnz	r3, 8003de0 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8003dce:	3502      	adds	r5, #2
 8003dd0:	e7d3      	b.n	8003d7a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd2:	f7ff ff5b 	bl	8003c8c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d1ef      	bne.n	8003dba <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	782a      	ldrb	r2, [r5, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	3501      	adds	r5, #1
 8003de2:	e7ca      	b.n	8003d7a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003de4:	2001      	movs	r0, #1
 8003de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003dea:	2002      	movs	r0, #2
}
 8003dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003df0 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8003df0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d118      	bne.n	8003e2a <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL) || (Size == 0U)) 
 8003df8:	b1a9      	cbz	r1, 8003e26 <HAL_UART_Transmit_IT+0x36>
 8003dfa:	b1a2      	cbz	r2, 8003e26 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8003dfc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d012      	beq.n	8003e2a <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8003e04:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 8003e06:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e08:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e0a:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 8003e0c:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003e0e:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e12:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003e16:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8003e18:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003e1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e20:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003e22:	4618      	mov	r0, r3
 8003e24:	4770      	bx	lr
      return HAL_ERROR;
 8003e26:	2001      	movs	r0, #1
 8003e28:	4770      	bx	lr
    return HAL_BUSY;
 8003e2a:	2002      	movs	r0, #2
}
 8003e2c:	4770      	bx	lr
	...

08003e30 <HAL_UART_Transmit_DMA>:
{
 8003e30:	b538      	push	{r3, r4, r5, lr}
 8003e32:	4604      	mov	r4, r0
 8003e34:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003e36:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003e3a:	2a20      	cmp	r2, #32
 8003e3c:	d12a      	bne.n	8003e94 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 8003e3e:	b339      	cbz	r1, 8003e90 <HAL_UART_Transmit_DMA+0x60>
 8003e40:	b333      	cbz	r3, 8003e90 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8003e42:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8003e46:	2a01      	cmp	r2, #1
 8003e48:	d024      	beq.n	8003e94 <HAL_UART_Transmit_DMA+0x64>
 8003e4a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003e4e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e52:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8003e54:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e56:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e58:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e5a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	; (8003e98 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8003e60:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8003e62:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e64:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e66:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8003e68:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e6a:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <HAL_UART_Transmit_DMA+0x70>)
 8003e6e:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003e70:	6822      	ldr	r2, [r4, #0]
 8003e72:	3204      	adds	r2, #4
 8003e74:	f7fd fe74 	bl	8001b60 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e7c:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8003e7e:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003e80:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e82:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8003e84:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e8c:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003e90:	2001      	movs	r0, #1
 8003e92:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8003e94:	2002      	movs	r0, #2
}
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
 8003e98:	08003f37 	.word	0x08003f37
 8003e9c:	08003f65 	.word	0x08003f65
 8003ea0:	08004031 	.word	0x08004031

08003ea4 <HAL_UART_Receive_DMA>:
{
 8003ea4:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003ea6:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8003eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003eac:	2a20      	cmp	r2, #32
{
 8003eae:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003eb0:	d138      	bne.n	8003f24 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL) || (Size == 0U))
 8003eb2:	2900      	cmp	r1, #0
 8003eb4:	d034      	beq.n	8003f20 <HAL_UART_Receive_DMA+0x7c>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d032      	beq.n	8003f20 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8003eba:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8003ebe:	2a01      	cmp	r2, #1
 8003ec0:	d030      	beq.n	8003f24 <HAL_UART_Receive_DMA+0x80>
 8003ec2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8003ec6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eca:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8003ecc:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ece:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed0:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ed2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003ed6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003ed8:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003eda:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003edc:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ede:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 8003ee0:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ee2:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ee4:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <HAL_UART_Receive_DMA+0x8c>)
 8003ee6:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003ee8:	460a      	mov	r2, r1
 8003eea:	1d31      	adds	r1, r6, #4
 8003eec:	f7fd fe38 	bl	8001b60 <HAL_DMA_Start_IT>
    return HAL_OK;
 8003ef0:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003ef2:	682b      	ldr	r3, [r5, #0]
 8003ef4:	9401      	str	r4, [sp, #4]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	9201      	str	r2, [sp, #4]
 8003efa:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8003efc:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003f00:	9201      	str	r2, [sp, #4]
 8003f02:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f0a:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f1a:	615a      	str	r2, [r3, #20]
}
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003f20:	2001      	movs	r0, #1
 8003f22:	e7fb      	b.n	8003f1c <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8003f24:	2002      	movs	r0, #2
 8003f26:	e7f9      	b.n	8003f1c <HAL_UART_Receive_DMA+0x78>
 8003f28:	08003f6f 	.word	0x08003f6f
 8003f2c:	08004025 	.word	0x08004025
 8003f30:	08004031 	.word	0x08004031

08003f34 <HAL_UART_TxCpltCallback>:
 8003f34:	4770      	bx	lr

08003f36 <UART_DMATransmitCplt>:
{
 8003f36:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f38:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f3a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f013 0320 	ands.w	r3, r3, #32
 8003f42:	d10a      	bne.n	8003f5a <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 8003f44:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f46:	6813      	ldr	r3, [r2, #0]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f4e:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f56:	60da      	str	r2, [r3, #12]
 8003f58:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f7ff ffea 	bl	8003f34 <HAL_UART_TxCpltCallback>
 8003f60:	bd08      	pop	{r3, pc}

08003f62 <HAL_UART_TxHalfCpltCallback>:
 8003f62:	4770      	bx	lr

08003f64 <UART_DMATxHalfCplt>:
{
 8003f64:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003f66:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003f68:	f7ff fffb 	bl	8003f62 <HAL_UART_TxHalfCpltCallback>
 8003f6c:	bd08      	pop	{r3, pc}

08003f6e <UART_DMAReceiveCplt>:
{
 8003f6e:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f70:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f72:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f013 0320 	ands.w	r3, r3, #32
 8003f7a:	d110      	bne.n	8003f9e <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8003f7c:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f7e:	6813      	ldr	r3, [r2, #0]
 8003f80:	68d9      	ldr	r1, [r3, #12]
 8003f82:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003f86:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f88:	6959      	ldr	r1, [r3, #20]
 8003f8a:	f021 0101 	bic.w	r1, r1, #1
 8003f8e:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f90:	6959      	ldr	r1, [r3, #20]
 8003f92:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003f96:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	f003 f95a 	bl	8007258 <HAL_UART_RxCpltCallback>
 8003fa4:	bd08      	pop	{r3, pc}

08003fa6 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003fa6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8003faa:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003fac:	2b22      	cmp	r3, #34	; 0x22
 8003fae:	d136      	bne.n	800401e <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fb0:	6883      	ldr	r3, [r0, #8]
 8003fb2:	6901      	ldr	r1, [r0, #16]
 8003fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb8:	6802      	ldr	r2, [r0, #0]
 8003fba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003fbc:	d123      	bne.n	8004006 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fbe:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003fc0:	b9e9      	cbnz	r1, 8003ffe <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fc6:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003fca:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8003fcc:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003fce:	3c01      	subs	r4, #1
 8003fd0:	b2a4      	uxth	r4, r4
 8003fd2:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003fd4:	b98c      	cbnz	r4, 8003ffa <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fd6:	6803      	ldr	r3, [r0, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	f022 0220 	bic.w	r2, r2, #32
 8003fde:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe6:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003ff6:	f003 f92f 	bl	8007258 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8003ffa:	2000      	movs	r0, #0
}
 8003ffc:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	f823 2b01 	strh.w	r2, [r3], #1
 8004004:	e7e1      	b.n	8003fca <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004006:	b921      	cbnz	r1, 8004012 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004008:	1c59      	adds	r1, r3, #1
 800400a:	6852      	ldr	r2, [r2, #4]
 800400c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	e7dc      	b.n	8003fcc <UART_Receive_IT+0x26>
 8004012:	6852      	ldr	r2, [r2, #4]
 8004014:	1c59      	adds	r1, r3, #1
 8004016:	6281      	str	r1, [r0, #40]	; 0x28
 8004018:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800401c:	e7f7      	b.n	800400e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800401e:	2002      	movs	r0, #2
 8004020:	bd10      	pop	{r4, pc}

08004022 <HAL_UART_RxHalfCpltCallback>:
 8004022:	4770      	bx	lr

08004024 <UART_DMARxHalfCplt>:
{
 8004024:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8004026:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004028:	f7ff fffb 	bl	8004022 <HAL_UART_RxHalfCpltCallback>
 800402c:	bd08      	pop	{r3, pc}

0800402e <HAL_UART_ErrorCallback>:
 800402e:	4770      	bx	lr

08004030 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004030:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8004032:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004034:	680b      	ldr	r3, [r1, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004038:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 800403c:	2821      	cmp	r0, #33	; 0x21
 800403e:	d10a      	bne.n	8004056 <UART_DMAError+0x26>
 8004040:	0612      	lsls	r2, r2, #24
 8004042:	d508      	bpl.n	8004056 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8004044:	2200      	movs	r2, #0
 8004046:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800404e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004050:	2220      	movs	r2, #32
 8004052:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8004056:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004058:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 800405c:	2a22      	cmp	r2, #34	; 0x22
 800405e:	d106      	bne.n	800406e <UART_DMAError+0x3e>
 8004060:	065b      	lsls	r3, r3, #25
 8004062:	d504      	bpl.n	800406e <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8004064:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8004066:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8004068:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800406a:	f7ff fd63 	bl	8003b34 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800406e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8004070:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004072:	f043 0310 	orr.w	r3, r3, #16
 8004076:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8004078:	f7ff ffd9 	bl	800402e <HAL_UART_ErrorCallback>
 800407c:	bd08      	pop	{r3, pc}
	...

08004080 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004080:	6803      	ldr	r3, [r0, #0]
{
 8004082:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004084:	681a      	ldr	r2, [r3, #0]
{
 8004086:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8004088:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800408a:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800408c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800408e:	d107      	bne.n	80040a0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004090:	0696      	lsls	r6, r2, #26
 8004092:	d55a      	bpl.n	800414a <HAL_UART_IRQHandler+0xca>
 8004094:	068d      	lsls	r5, r1, #26
 8004096:	d558      	bpl.n	800414a <HAL_UART_IRQHandler+0xca>
}
 8004098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800409c:	f7ff bf83 	b.w	8003fa6 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040a0:	f015 0501 	ands.w	r5, r5, #1
 80040a4:	d102      	bne.n	80040ac <HAL_UART_IRQHandler+0x2c>
 80040a6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80040aa:	d04e      	beq.n	800414a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040ac:	07d3      	lsls	r3, r2, #31
 80040ae:	d505      	bpl.n	80040bc <HAL_UART_IRQHandler+0x3c>
 80040b0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040b2:	bf42      	ittt	mi
 80040b4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80040b6:	f043 0301 	orrmi.w	r3, r3, #1
 80040ba:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040bc:	0750      	lsls	r0, r2, #29
 80040be:	d504      	bpl.n	80040ca <HAL_UART_IRQHandler+0x4a>
 80040c0:	b11d      	cbz	r5, 80040ca <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ca:	0793      	lsls	r3, r2, #30
 80040cc:	d504      	bpl.n	80040d8 <HAL_UART_IRQHandler+0x58>
 80040ce:	b11d      	cbz	r5, 80040d8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040d2:	f043 0304 	orr.w	r3, r3, #4
 80040d6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040d8:	0716      	lsls	r6, r2, #28
 80040da:	d504      	bpl.n	80040e6 <HAL_UART_IRQHandler+0x66>
 80040dc:	b11d      	cbz	r5, 80040e6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040e0:	f043 0308 	orr.w	r3, r3, #8
 80040e4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d066      	beq.n	80041ba <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ec:	0695      	lsls	r5, r2, #26
 80040ee:	d504      	bpl.n	80040fa <HAL_UART_IRQHandler+0x7a>
 80040f0:	0688      	lsls	r0, r1, #26
 80040f2:	d502      	bpl.n	80040fa <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7ff ff56 	bl	8003fa6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040fa:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80040fc:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040fe:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004100:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004102:	0711      	lsls	r1, r2, #28
 8004104:	d402      	bmi.n	800410c <HAL_UART_IRQHandler+0x8c>
 8004106:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800410a:	d01a      	beq.n	8004142 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800410c:	f7ff fd12 	bl	8003b34 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	0652      	lsls	r2, r2, #25
 8004116:	d510      	bpl.n	800413a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004118:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800411a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004120:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8004122:	b150      	cbz	r0, 800413a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004124:	4b25      	ldr	r3, [pc, #148]	; (80041bc <HAL_UART_IRQHandler+0x13c>)
 8004126:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004128:	f7fd fd58 	bl	8001bdc <HAL_DMA_Abort_IT>
 800412c:	2800      	cmp	r0, #0
 800412e:	d044      	beq.n	80041ba <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004130:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8004132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004136:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004138:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800413a:	4620      	mov	r0, r4
 800413c:	f7ff ff77 	bl	800402e <HAL_UART_ErrorCallback>
 8004140:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8004142:	f7ff ff74 	bl	800402e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004146:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004148:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800414a:	0616      	lsls	r6, r2, #24
 800414c:	d527      	bpl.n	800419e <HAL_UART_IRQHandler+0x11e>
 800414e:	060d      	lsls	r5, r1, #24
 8004150:	d525      	bpl.n	800419e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004152:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8004156:	2a21      	cmp	r2, #33	; 0x21
 8004158:	d12f      	bne.n	80041ba <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800415a:	68a2      	ldr	r2, [r4, #8]
 800415c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004160:	6a22      	ldr	r2, [r4, #32]
 8004162:	d117      	bne.n	8004194 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004164:	8811      	ldrh	r1, [r2, #0]
 8004166:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800416a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800416c:	6921      	ldr	r1, [r4, #16]
 800416e:	b979      	cbnz	r1, 8004190 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8004170:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8004172:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8004174:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004176:	3a01      	subs	r2, #1
 8004178:	b292      	uxth	r2, r2
 800417a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800417c:	b9ea      	cbnz	r2, 80041ba <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004184:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800418c:	60da      	str	r2, [r3, #12]
 800418e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8004190:	3201      	adds	r2, #1
 8004192:	e7ee      	b.n	8004172 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004194:	1c51      	adds	r1, r2, #1
 8004196:	6221      	str	r1, [r4, #32]
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	e7ea      	b.n	8004174 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800419e:	0650      	lsls	r0, r2, #25
 80041a0:	d50b      	bpl.n	80041ba <HAL_UART_IRQHandler+0x13a>
 80041a2:	064a      	lsls	r2, r1, #25
 80041a4:	d509      	bpl.n	80041ba <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041a6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80041a8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ae:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80041b0:	2320      	movs	r3, #32
 80041b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80041b6:	f7ff febd 	bl	8003f34 <HAL_UART_TxCpltCallback>
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	080041c1 	.word	0x080041c1

080041c0 <UART_DMAAbortOnError>:
{
 80041c0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80041c2:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80041c6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041c8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80041ca:	f7ff ff30 	bl	800402e <HAL_UART_ErrorCallback>
 80041ce:	bd08      	pop	{r3, pc}

080041d0 <write_2>:
}

/**
 * Write sequence of n bytes from offset
 */
void write_2(unsigned int address, uint8_t *data, int offset, int n) {
 80041d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t *adr = data+offset;
    HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n, 1000);
 80041d2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    uint8_t *adr = data+offset;
 80041d6:	440a      	add	r2, r1
    HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n, 1000);
 80041d8:	b29b      	uxth	r3, r3
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	9200      	str	r2, [sp, #0]
 80041de:	9402      	str	r4, [sp, #8]
 80041e0:	b282      	uxth	r2, r0
 80041e2:	2302      	movs	r3, #2
 80041e4:	21a0      	movs	r1, #160	; 0xa0
 80041e6:	4804      	ldr	r0, [pc, #16]	; (80041f8 <write_2+0x28>)
 80041e8:	f7fe fb5e 	bl	80028a8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80041ec:	200a      	movs	r0, #10
}
 80041ee:	b004      	add	sp, #16
 80041f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(10);
 80041f4:	f7fd b994 	b.w	8001520 <HAL_Delay>
 80041f8:	20001200 	.word	0x20001200

080041fc <write_1>:
void write_1(unsigned int address, uint8_t *data, int n) {
 80041fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004200:	4606      	mov	r6, r0
 8004202:	4688      	mov	r8, r1
 8004204:	4615      	mov	r5, r2
  int offD = 0;         // current offset in data pointer
 8004206:	2700      	movs	r7, #0
  while (c > 0) {
 8004208:	2d00      	cmp	r5, #0
 800420a:	dc01      	bgt.n	8004210 <write_1+0x14>
}
 800420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nc = min(min(c, 30), PAGE_SIZE - offP);
 8004210:	2d1e      	cmp	r5, #30
 8004212:	462b      	mov	r3, r5
 8004214:	bfa8      	it	ge
 8004216:	231e      	movge	r3, #30
    offP = address % PAGE_SIZE;
 8004218:	f006 043f 	and.w	r4, r6, #63	; 0x3f
    nc = min(min(c, 30), PAGE_SIZE - offP);
 800421c:	f1c4 0440 	rsb	r4, r4, #64	; 0x40
 8004220:	429c      	cmp	r4, r3
 8004222:	bfa8      	it	ge
 8004224:	461c      	movge	r4, r3
    write_2(address, data, offD, nc);
 8004226:	463a      	mov	r2, r7
 8004228:	4630      	mov	r0, r6
 800422a:	4623      	mov	r3, r4
 800422c:	4641      	mov	r1, r8
 800422e:	f7ff ffcf 	bl	80041d0 <write_2>
    c-=nc;
 8004232:	1b2d      	subs	r5, r5, r4
    offD+=nc;
 8004234:	4427      	add	r7, r4
    address+=nc;
 8004236:	4426      	add	r6, r4
 8004238:	e7e6      	b.n	8004208 <write_1+0xc>

0800423a <writeFloat>:
void writeFloat(unsigned int address, float data) {
 800423a:	b507      	push	{r0, r1, r2, lr}
 800423c:	ab02      	add	r3, sp, #8
 800423e:	f843 1d04 	str.w	r1, [r3, #-4]!
  write_1(address, (uint8_t*)&data, 4);
 8004242:	2204      	movs	r2, #4
 8004244:	4619      	mov	r1, r3
 8004246:	f7ff ffd9 	bl	80041fc <write_1>
}
 800424a:	b003      	add	sp, #12
 800424c:	f85d fb04 	ldr.w	pc, [sp], #4

08004250 <read_2>:


/**
 * Read sequence of n bytes to offset
 */
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8004250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004254:	b098      	sub	sp, #96	; 0x60
  int r = 0;
  uint8_t pData[80];
  memset(&pData[0], n, sizeof(pData));
 8004256:	ad04      	add	r5, sp, #16
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8004258:	4680      	mov	r8, r0
 800425a:	460e      	mov	r6, r1
 800425c:	4617      	mov	r7, r2
  memset(&pData[0], n, sizeof(pData));
 800425e:	4619      	mov	r1, r3
 8004260:	2250      	movs	r2, #80	; 0x50
 8004262:	4628      	mov	r0, r5
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8004264:	461c      	mov	r4, r3
  memset(&pData[0], n, sizeof(pData));
 8004266:	f004 ffc2 	bl	80091ee <memset>
  HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, pData, n, 1000);
 800426a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800426e:	9302      	str	r3, [sp, #8]
 8004270:	b2a3      	uxth	r3, r4
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	9500      	str	r5, [sp, #0]
 8004276:	2302      	movs	r3, #2
 8004278:	fa1f f288 	uxth.w	r2, r8
 800427c:	21a0      	movs	r1, #160	; 0xa0
 800427e:	4807      	ldr	r0, [pc, #28]	; (800429c <read_2+0x4c>)
 8004280:	f7fe fba8 	bl	80029d4 <HAL_I2C_Mem_Read>
  int r = 0;
 8004284:	2300      	movs	r3, #0
  while (r<n) {
    data[offset+r] = pData[r];
 8004286:	443e      	add	r6, r7
  while (r<n) {
 8004288:	42a3      	cmp	r3, r4
 800428a:	db02      	blt.n	8004292 <read_2+0x42>
    r++;
  }
}
 800428c:	b018      	add	sp, #96	; 0x60
 800428e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    data[offset+r] = pData[r];
 8004292:	5cea      	ldrb	r2, [r5, r3]
 8004294:	54f2      	strb	r2, [r6, r3]
    r++;
 8004296:	3301      	adds	r3, #1
 8004298:	e7f6      	b.n	8004288 <read_2+0x38>
 800429a:	bf00      	nop
 800429c:	20001200 	.word	0x20001200

080042a0 <read_1>:
void read_1(unsigned int address, uint8_t *data, int n) {
 80042a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a4:	4607      	mov	r7, r0
 80042a6:	4688      	mov	r8, r1
 80042a8:	4614      	mov	r4, r2
  int offD = 0;
 80042aa:	2600      	movs	r6, #0
  while (c > 0) {
 80042ac:	2c00      	cmp	r4, #0
 80042ae:	dc01      	bgt.n	80042b4 <read_1+0x14>
}
 80042b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b4:	2c20      	cmp	r4, #32
 80042b6:	4625      	mov	r5, r4
 80042b8:	bfa8      	it	ge
 80042ba:	2520      	movge	r5, #32
    read_2(address, data, offD, nc);
 80042bc:	4632      	mov	r2, r6
 80042be:	4638      	mov	r0, r7
 80042c0:	462b      	mov	r3, r5
 80042c2:	4641      	mov	r1, r8
 80042c4:	f7ff ffc4 	bl	8004250 <read_2>
    address+=nc;
 80042c8:	442f      	add	r7, r5
    offD+=nc;
 80042ca:	442e      	add	r6, r5
    c-=nc;
 80042cc:	1b64      	subs	r4, r4, r5
 80042ce:	e7ed      	b.n	80042ac <read_1+0xc>

080042d0 <readFloat>:
float readFloat(unsigned int address) {
 80042d0:	b510      	push	{r4, lr}
  read_1(address, _b, 4);
 80042d2:	4c03      	ldr	r4, [pc, #12]	; (80042e0 <readFloat+0x10>)
 80042d4:	2204      	movs	r2, #4
 80042d6:	4621      	mov	r1, r4
 80042d8:	f7ff ffe2 	bl	80042a0 <read_1>
  return *(float*)&_b[0];
 80042dc:	6820      	ldr	r0, [r4, #0]
}
 80042de:	bd10      	pop	{r4, pc}
 80042e0:	20000ac8 	.word	0x20000ac8

080042e4 <EEPROM_Init>:
{
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	2400      	movs	r4, #0
 80042e8:	4d16      	ldr	r5, [pc, #88]	; (8004344 <EEPROM_Init+0x60>)
     pid.kp[i] = readFloat( 0 + (4*i));
 80042ea:	4620      	mov	r0, r4
 80042ec:	f7ff fff0 	bl	80042d0 <readFloat>
 80042f0:	f845 0f04 	str.w	r0, [r5, #4]!
     pid.ki[i] = readFloat(12 + (4*i));
 80042f4:	f104 000c 	add.w	r0, r4, #12
 80042f8:	f7ff ffea 	bl	80042d0 <readFloat>
 80042fc:	6268      	str	r0, [r5, #36]	; 0x24
     pid.kd[i] = readFloat(24 + (4*i));
 80042fe:	f104 0018 	add.w	r0, r4, #24
 8004302:	f7ff ffe5 	bl	80042d0 <readFloat>
 8004306:	3404      	adds	r4, #4
   for(int i = 0; i < 3; i++){
 8004308:	2c0c      	cmp	r4, #12
     pid.kd[i] = readFloat(24 + (4*i));
 800430a:	64a8      	str	r0, [r5, #72]	; 0x48
   for(int i = 0; i < 3; i++){
 800430c:	d1ed      	bne.n	80042ea <EEPROM_Init+0x6>
   magBias[0] = readFloat(36);
 800430e:	2024      	movs	r0, #36	; 0x24
 8004310:	f7ff ffde 	bl	80042d0 <readFloat>
 8004314:	4c0c      	ldr	r4, [pc, #48]	; (8004348 <EEPROM_Init+0x64>)
 8004316:	6020      	str	r0, [r4, #0]
   magBias[1] = readFloat(40);
 8004318:	2028      	movs	r0, #40	; 0x28
 800431a:	f7ff ffd9 	bl	80042d0 <readFloat>
 800431e:	6060      	str	r0, [r4, #4]
   magBias[2] = readFloat(44);
 8004320:	202c      	movs	r0, #44	; 0x2c
 8004322:	f7ff ffd5 	bl	80042d0 <readFloat>
 8004326:	60a0      	str	r0, [r4, #8]
   magScale[0] = readFloat(48);
 8004328:	2030      	movs	r0, #48	; 0x30
 800432a:	f7ff ffd1 	bl	80042d0 <readFloat>
 800432e:	4c07      	ldr	r4, [pc, #28]	; (800434c <EEPROM_Init+0x68>)
 8004330:	6020      	str	r0, [r4, #0]
   magScale[1] = readFloat(52);
 8004332:	2034      	movs	r0, #52	; 0x34
 8004334:	f7ff ffcc 	bl	80042d0 <readFloat>
 8004338:	6060      	str	r0, [r4, #4]
   magScale[2] = readFloat(56);
 800433a:	2038      	movs	r0, #56	; 0x38
 800433c:	f7ff ffc8 	bl	80042d0 <readFloat>
 8004340:	60a0      	str	r0, [r4, #8]
 8004342:	bd38      	pop	{r3, r4, r5, pc}
 8004344:	20000bc8 	.word	0x20000bc8
 8004348:	20000800 	.word	0x20000800
 800434c:	200010d8 	.word	0x200010d8

08004350 <gps_Init>:

void USART2_TX(unsigned char data){while(!(USART2->SR&0x40)); USART2->DR=data;}
void USART2_TX_str(char *str){while(*str){USART2_TX(*str++);}}

void gps_Init(void)
{
 8004350:	4770      	bx	lr
	...

08004354 <I2C_ByteWrite>:
//#include "I2C.h"
#include "Board.h"

void I2C_ByteWrite(uint8_t DevAddress, uint8_t MemAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 8004354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t tmp;
	state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
 8004358:	2601      	movs	r6, #1
{
 800435a:	461c      	mov	r4, r3
 800435c:	4692      	mov	sl, r2
 800435e:	b086      	sub	sp, #24
	state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
 8004360:	4f2a      	ldr	r7, [pc, #168]	; (800440c <I2C_ByteWrite+0xb8>)
 8004362:	f10d 0517 	add.w	r5, sp, #23
 8004366:	4680      	mov	r8, r0
 8004368:	4689      	mov	r9, r1
 800436a:	460a      	mov	r2, r1
 800436c:	9500      	str	r5, [sp, #0]
 800436e:	4601      	mov	r1, r0
 8004370:	4633      	mov	r3, r6
 8004372:	4638      	mov	r0, r7
 8004374:	9602      	str	r6, [sp, #8]
 8004376:	9601      	str	r6, [sp, #4]
 8004378:	f7fe fb2c 	bl	80029d4 <HAL_I2C_Mem_Read>
  ErrorCode = hi2c2.ErrorCode;
 800437c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
//      Error.error = 2;
//      error_signal();
//      HAL_Delay(4);
//    }
//  }
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800437e:	ebaa 0304 	sub.w	r3, sl, r4
 8004382:	199a      	adds	r2, r3, r6
 8004384:	fa06 f404 	lsl.w	r4, r6, r4
	data <<= (bitStart - length + 1); // shift data into correct position
 8004388:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800438c:	3c01      	subs	r4, #1
 800438e:	4094      	lsls	r4, r2
	data <<= (bitStart - length + 1); // shift data into correct position
 8004390:	4093      	lsls	r3, r2
	data &= mask; // zero all non-important bits in data
	tmp &= ~(mask); // zero all important bits in existing byte
 8004392:	f89d 2017 	ldrb.w	r2, [sp, #23]
	data <<= (bitStart - length + 1); // shift data into correct position
 8004396:	b2db      	uxtb	r3, r3
	tmp &= ~(mask); // zero all important bits in existing byte
 8004398:	ea22 0204 	bic.w	r2, r2, r4
	data &= mask; // zero all non-important bits in data
 800439c:	401c      	ands	r4, r3
	tmp |= data; // combine data with existing byte
	state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 800439e:	230a      	movs	r3, #10
	tmp |= data; // combine data with existing byte
 80043a0:	4314      	orrs	r4, r2
	state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 80043a2:	9302      	str	r3, [sp, #8]
 80043a4:	e88d 0060 	stmia.w	sp, {r5, r6}
 80043a8:	464a      	mov	r2, r9
 80043aa:	4641      	mov	r1, r8
 80043ac:	4638      	mov	r0, r7
 80043ae:	4633      	mov	r3, r6
	tmp |= data; // combine data with existing byte
 80043b0:	f88d 4017 	strb.w	r4, [sp, #23]
	state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 80043b4:	f7fe fa78 	bl	80028a8 <HAL_I2C_Mem_Write>
 80043b8:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 80043ba:	6c3f      	ldr	r7, [r7, #64]	; 0x40
  while(state)
  {
    sprintf(Buf, "MPU9250_Tx(write)_Error : %d, %ld\r\n", state, ErrorCode);
 80043bc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004418 <I2C_ByteWrite+0xc4>
 80043c0:	4c13      	ldr	r4, [pc, #76]	; (8004410 <I2C_ByteWrite+0xbc>)
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80043c2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800441c <I2C_ByteWrite+0xc8>
  while(state)
 80043c6:	b915      	cbnz	r5, 80043ce <I2C_ByteWrite+0x7a>
      Error.error = 2;
      error_signal();
      HAL_Delay(4);
    }
  }
}
 80043c8:	b006      	add	sp, #24
 80043ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf(Buf, "MPU9250_Tx(write)_Error : %d, %ld\r\n", state, ErrorCode);
 80043ce:	463b      	mov	r3, r7
 80043d0:	462a      	mov	r2, r5
 80043d2:	4641      	mov	r1, r8
 80043d4:	4620      	mov	r0, r4
 80043d6:	f004 ff13 	bl	8009200 <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80043da:	4620      	mov	r0, r4
 80043dc:	f7fb feb8 	bl	8000150 <strlen>
 80043e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043e4:	b282      	uxth	r2, r0
 80043e6:	4621      	mov	r1, r4
 80043e8:	4648      	mov	r0, r9
 80043ea:	f7ff fca5 	bl	8003d38 <HAL_UART_Transmit>
      Error.error = 2;
 80043ee:	f04f 0a02 	mov.w	sl, #2
    while (Error.error !=0)
 80043f2:	4e08      	ldr	r6, [pc, #32]	; (8004414 <I2C_ByteWrite+0xc0>)
 80043f4:	7833      	ldrb	r3, [r6, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0e5      	beq.n	80043c6 <I2C_ByteWrite+0x72>
      Error.error = 2;
 80043fa:	f886 a000 	strb.w	sl, [r6]
      error_signal();
 80043fe:	f000 fd7b 	bl	8004ef8 <error_signal>
      HAL_Delay(4);
 8004402:	2004      	movs	r0, #4
 8004404:	f7fd f88c 	bl	8001520 <HAL_Delay>
 8004408:	e7f4      	b.n	80043f4 <I2C_ByteWrite+0xa0>
 800440a:	bf00      	nop
 800440c:	20001200 	.word	0x20001200
 8004410:	200010f0 	.word	0x200010f0
 8004414:	200013d0 	.word	0x200013d0
 8004418:	0800fc7d 	.word	0x0800fc7d
 800441c:	20001418 	.word	0x20001418

08004420 <I2C_ByteRead>:
//	tmp >>= (bitStart - length + 1);
//	*data = tmp;
//}

void I2C_ByteRead(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;
  state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 8004424:	2501      	movs	r5, #1
 8004426:	4c1a      	ldr	r4, [pc, #104]	; (8004490 <I2C_ByteRead+0x70>)
 8004428:	9502      	str	r5, [sp, #8]
 800442a:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
  ErrorCode = hi2c2.ErrorCode;
  while(state)
  {
    sprintf(Buf, "MPU9250_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 800442e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800449c <I2C_ByteRead+0x7c>
  state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 8004432:	e88d 0028 	stmia.w	sp, {r3, r5}
 8004436:	4613      	mov	r3, r2
 8004438:	460a      	mov	r2, r1
 800443a:	4601      	mov	r1, r0
 800443c:	4620      	mov	r0, r4
 800443e:	f7fe fac9 	bl	80029d4 <HAL_I2C_Mem_Read>
 8004442:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 8004444:	6c27      	ldr	r7, [r4, #64]	; 0x40
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8004446:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80044a0 <I2C_ByteRead+0x80>
    sprintf(Buf, "MPU9250_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 800444a:	4c12      	ldr	r4, [pc, #72]	; (8004494 <I2C_ByteRead+0x74>)
  while(state)
 800444c:	b915      	cbnz	r5, 8004454 <I2C_ByteRead+0x34>
      Error.error = 2;
      error_signal();
      HAL_Delay(4);
    }
  }
}
 800444e:	b004      	add	sp, #16
 8004450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf(Buf, "MPU9250_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 8004454:	463b      	mov	r3, r7
 8004456:	462a      	mov	r2, r5
 8004458:	4641      	mov	r1, r8
 800445a:	4620      	mov	r0, r4
 800445c:	f004 fed0 	bl	8009200 <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8004460:	4620      	mov	r0, r4
 8004462:	f7fb fe75 	bl	8000150 <strlen>
 8004466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800446a:	b282      	uxth	r2, r0
 800446c:	4621      	mov	r1, r4
 800446e:	4648      	mov	r0, r9
 8004470:	f7ff fc62 	bl	8003d38 <HAL_UART_Transmit>
      Error.error = 2;
 8004474:	f04f 0a02 	mov.w	sl, #2
    while (Error.error !=0)
 8004478:	4e07      	ldr	r6, [pc, #28]	; (8004498 <I2C_ByteRead+0x78>)
 800447a:	7833      	ldrb	r3, [r6, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0e5      	beq.n	800444c <I2C_ByteRead+0x2c>
      Error.error = 2;
 8004480:	f886 a000 	strb.w	sl, [r6]
      error_signal();
 8004484:	f000 fd38 	bl	8004ef8 <error_signal>
      HAL_Delay(4);
 8004488:	2004      	movs	r0, #4
 800448a:	f7fd f849 	bl	8001520 <HAL_Delay>
 800448e:	e7f4      	b.n	800447a <I2C_ByteRead+0x5a>
 8004490:	20001200 	.word	0x20001200
 8004494:	200010f0 	.word	0x200010f0
 8004498:	200013d0 	.word	0x200013d0
 800449c:	0800fc60 	.word	0x0800fc60
 80044a0:	20001418 	.word	0x20001418

080044a4 <I2C_Write>:
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
	*data = tmp & (1 << bitNum);
}

void I2C_Write(uint16_t DevAddress, uint8_t data, uint16_t Size)
{
 80044a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 80044a8:	4c1e      	ldr	r4, [pc, #120]	; (8004524 <I2C_Write+0x80>)
{
 80044aa:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 80044ac:	4620      	mov	r0, r4
{
 80044ae:	4616      	mov	r6, r2
 80044b0:	f88d 100f 	strb.w	r1, [sp, #15]
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 80044b4:	f7fe fbae 	bl	8002c14 <HAL_I2C_GetState>
 80044b8:	2820      	cmp	r0, #32
 80044ba:	d111      	bne.n	80044e0 <I2C_Write+0x3c>

  state = HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1000);
 80044bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c0:	4629      	mov	r1, r5
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4620      	mov	r0, r4
 80044c6:	4633      	mov	r3, r6
 80044c8:	f10d 020f 	add.w	r2, sp, #15
 80044cc:	f7fd ff94 	bl	80023f8 <HAL_I2C_Master_Transmit>
 80044d0:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 80044d2:	6c27      	ldr	r7, [r4, #64]	; 0x40
   while(state)
   {
     sprintf(Buf, "MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 80044d4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004530 <I2C_Write+0x8c>
 80044d8:	4c13      	ldr	r4, [pc, #76]	; (8004528 <I2C_Write+0x84>)
     HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80044da:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004534 <I2C_Write+0x90>
   while(state)
 80044de:	b915      	cbnz	r5, 80044e6 <I2C_Write+0x42>
       HAL_Delay(4);
     }
   }
  }
  //while(HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1) != HAL_OK);
}
 80044e0:	b004      	add	sp, #16
 80044e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     sprintf(Buf, "MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 80044e6:	463b      	mov	r3, r7
 80044e8:	462a      	mov	r2, r5
 80044ea:	4641      	mov	r1, r8
 80044ec:	4620      	mov	r0, r4
 80044ee:	f004 fe87 	bl	8009200 <sprintf>
     HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80044f2:	4620      	mov	r0, r4
 80044f4:	f7fb fe2c 	bl	8000150 <strlen>
 80044f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044fc:	b282      	uxth	r2, r0
 80044fe:	4621      	mov	r1, r4
 8004500:	4648      	mov	r0, r9
 8004502:	f7ff fc19 	bl	8003d38 <HAL_UART_Transmit>
       Error.error = 2;
 8004506:	f04f 0a02 	mov.w	sl, #2
     while (Error.error !=0)
 800450a:	4e08      	ldr	r6, [pc, #32]	; (800452c <I2C_Write+0x88>)
 800450c:	7833      	ldrb	r3, [r6, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0e5      	beq.n	80044de <I2C_Write+0x3a>
       Error.error = 2;
 8004512:	f886 a000 	strb.w	sl, [r6]
       error_signal();
 8004516:	f000 fcef 	bl	8004ef8 <error_signal>
       HAL_Delay(4);
 800451a:	2004      	movs	r0, #4
 800451c:	f7fd f800 	bl	8001520 <HAL_Delay>
 8004520:	e7f4      	b.n	800450c <I2C_Write+0x68>
 8004522:	bf00      	nop
 8004524:	20001200 	.word	0x20001200
 8004528:	200010f0 	.word	0x200010f0
 800452c:	200013d0 	.word	0x200013d0
 8004530:	0800fcbd 	.word	0x0800fcbd
 8004534:	20001418 	.word	0x20001418

08004538 <I2C_Read>:

void I2C_Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004538:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 800453c:	4c1d      	ldr	r4, [pc, #116]	; (80045b4 <I2C_Read+0x7c>)
{
 800453e:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004540:	4620      	mov	r0, r4
{
 8004542:	460e      	mov	r6, r1
 8004544:	4617      	mov	r7, r2
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004546:	f7fe fb65 	bl	8002c14 <HAL_I2C_GetState>
 800454a:	2820      	cmp	r0, #32
 800454c:	d110      	bne.n	8004570 <I2C_Read+0x38>

  state = HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1000);
 800454e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004552:	4629      	mov	r1, r5
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	4620      	mov	r0, r4
 8004558:	463b      	mov	r3, r7
 800455a:	4632      	mov	r2, r6
 800455c:	f7fe f822 	bl	80025a4 <HAL_I2C_Master_Receive>
 8004560:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 8004562:	6c27      	ldr	r7, [r4, #64]	; 0x40
    while(state)
    {
      sprintf(Buf, "MS5611_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 8004564:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80045c0 <I2C_Read+0x88>
 8004568:	4c13      	ldr	r4, [pc, #76]	; (80045b8 <I2C_Read+0x80>)
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800456a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80045c4 <I2C_Read+0x8c>
    while(state)
 800456e:	b915      	cbnz	r5, 8004576 <I2C_Read+0x3e>
        HAL_Delay(4);
      }
    }
  }
  //while(HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1) != HAL_OK);
}
 8004570:	b002      	add	sp, #8
 8004572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sprintf(Buf, "MS5611_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 8004576:	463b      	mov	r3, r7
 8004578:	462a      	mov	r2, r5
 800457a:	4641      	mov	r1, r8
 800457c:	4620      	mov	r0, r4
 800457e:	f004 fe3f 	bl	8009200 <sprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8004582:	4620      	mov	r0, r4
 8004584:	f7fb fde4 	bl	8000150 <strlen>
 8004588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800458c:	b282      	uxth	r2, r0
 800458e:	4621      	mov	r1, r4
 8004590:	4648      	mov	r0, r9
 8004592:	f7ff fbd1 	bl	8003d38 <HAL_UART_Transmit>
        Error.error = 3;
 8004596:	f04f 0a03 	mov.w	sl, #3
      while (Error.error !=0)
 800459a:	4e08      	ldr	r6, [pc, #32]	; (80045bc <I2C_Read+0x84>)
 800459c:	7833      	ldrb	r3, [r6, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0e5      	beq.n	800456e <I2C_Read+0x36>
        Error.error = 3;
 80045a2:	f886 a000 	strb.w	sl, [r6]
        error_signal();
 80045a6:	f000 fca7 	bl	8004ef8 <error_signal>
        HAL_Delay(4);
 80045aa:	2004      	movs	r0, #4
 80045ac:	f7fc ffb8 	bl	8001520 <HAL_Delay>
 80045b0:	e7f4      	b.n	800459c <I2C_Read+0x64>
 80045b2:	bf00      	nop
 80045b4:	20001200 	.word	0x20001200
 80045b8:	200010f0 	.word	0x200010f0
 80045bc:	200013d0 	.word	0x200013d0
 80045c0:	0800fca1 	.word	0x0800fca1
 80045c4:	20001418 	.word	0x20001418

080045c8 <invSqrt>:
/* Calculate 1/sqrt(x) with magic number support */
//static float oneOverSqrt(float x) {
//    return 1.0f / (float) sqrt(x);
//}

float invSqrt(float x) {
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	4606      	mov	r6, r0
	float halfx = 0.5f * x;
 80045cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80045d0:	f7fc fbb4 	bl	8000d3c <__aeabi_fmul>
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
 80045d4:	4c11      	ldr	r4, [pc, #68]	; (800461c <invSqrt+0x54>)
	float halfx = 0.5f * x;
 80045d6:	4605      	mov	r5, r0
	y = *(float*)&i;
 80045d8:	eba4 0466 	sub.w	r4, r4, r6, asr #1
	y = y * (1.5f - (halfx * y * y));
 80045dc:	4621      	mov	r1, r4
 80045de:	f7fc fbad 	bl	8000d3c <__aeabi_fmul>
 80045e2:	4621      	mov	r1, r4
 80045e4:	f7fc fbaa 	bl	8000d3c <__aeabi_fmul>
 80045e8:	4601      	mov	r1, r0
 80045ea:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80045ee:	f7fc fa9b 	bl	8000b28 <__aeabi_fsub>
 80045f2:	4621      	mov	r1, r4
 80045f4:	f7fc fba2 	bl	8000d3c <__aeabi_fmul>
 80045f8:	4604      	mov	r4, r0
	y = y * (1.5f - (halfx * y * y));
 80045fa:	4601      	mov	r1, r0
 80045fc:	4628      	mov	r0, r5
 80045fe:	f7fc fb9d 	bl	8000d3c <__aeabi_fmul>
 8004602:	4621      	mov	r1, r4
 8004604:	f7fc fb9a 	bl	8000d3c <__aeabi_fmul>
 8004608:	4601      	mov	r1, r0
 800460a:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800460e:	f7fc fa8b 	bl	8000b28 <__aeabi_fsub>
 8004612:	4621      	mov	r1, r4
 8004614:	f7fc fb92 	bl	8000d3c <__aeabi_fmul>
	return y;
}
 8004618:	bd70      	pop	{r4, r5, r6, pc}
 800461a:	bf00      	nop
 800461c:	5f3759df 	.word	0x5f3759df

08004620 <calculateAngles>:
//   float tmp = *(float*)&i;
//   return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
//}


void calculateAngles(TM_AHRSIMU_t* AHRS) {
 8004620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AHRS->Roll = (float) atan2f(AHRS->_q0 * AHRS->_q1 + AHRS->_q2 * AHRS->_q3, 0.5f - AHRS->_q1 * AHRS->_q1 - AHRS->_q2 * AHRS->_q2);
 8004624:	6986      	ldr	r6, [r0, #24]
void calculateAngles(TM_AHRSIMU_t* AHRS) {
 8004626:	4604      	mov	r4, r0
    AHRS->Roll = (float) atan2f(AHRS->_q0 * AHRS->_q1 + AHRS->_q2 * AHRS->_q3, 0.5f - AHRS->_q1 * AHRS->_q1 - AHRS->_q2 * AHRS->_q2);
 8004628:	69c5      	ldr	r5, [r0, #28]
 800462a:	4631      	mov	r1, r6
 800462c:	4630      	mov	r0, r6
 800462e:	f7fc fb85 	bl	8000d3c <__aeabi_fmul>
 8004632:	4601      	mov	r1, r0
 8004634:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004638:	f7fc fa76 	bl	8000b28 <__aeabi_fsub>
 800463c:	4629      	mov	r1, r5
 800463e:	4607      	mov	r7, r0
 8004640:	4628      	mov	r0, r5
 8004642:	f7fc fb7b 	bl	8000d3c <__aeabi_fmul>
 8004646:	4601      	mov	r1, r0
 8004648:	4638      	mov	r0, r7
 800464a:	f7fc fa6d 	bl	8000b28 <__aeabi_fsub>
 800464e:	6961      	ldr	r1, [r4, #20]
 8004650:	4607      	mov	r7, r0
 8004652:	4630      	mov	r0, r6
 8004654:	f7fc fb72 	bl	8000d3c <__aeabi_fmul>
 8004658:	6a21      	ldr	r1, [r4, #32]
 800465a:	4606      	mov	r6, r0
 800465c:	4628      	mov	r0, r5
 800465e:	f7fc fb6d 	bl	8000d3c <__aeabi_fmul>
 8004662:	4601      	mov	r1, r0
 8004664:	4630      	mov	r0, r6
 8004666:	f7fc fa61 	bl	8000b2c <__addsf3>
 800466a:	4639      	mov	r1, r7
 800466c:	f007 ffb2 	bl	800c5d4 <atan2f>
    AHRS->Pitch = (float) asinf(-2.0f * (AHRS->_q1 * AHRS->_q3 - AHRS->_q0 * AHRS->_q2));
 8004670:	6a21      	ldr	r1, [r4, #32]
    AHRS->Roll = (float) atan2f(AHRS->_q0 * AHRS->_q1 + AHRS->_q2 * AHRS->_q3, 0.5f - AHRS->_q1 * AHRS->_q1 - AHRS->_q2 * AHRS->_q2);
 8004672:	6020      	str	r0, [r4, #0]
    AHRS->Pitch = (float) asinf(-2.0f * (AHRS->_q1 * AHRS->_q3 - AHRS->_q0 * AHRS->_q2));
 8004674:	69a0      	ldr	r0, [r4, #24]
 8004676:	f7fc fb61 	bl	8000d3c <__aeabi_fmul>
 800467a:	69e1      	ldr	r1, [r4, #28]
 800467c:	4605      	mov	r5, r0
 800467e:	6960      	ldr	r0, [r4, #20]
 8004680:	f7fc fb5c 	bl	8000d3c <__aeabi_fmul>
 8004684:	4601      	mov	r1, r0
 8004686:	4628      	mov	r0, r5
 8004688:	f7fc fa4e 	bl	8000b28 <__aeabi_fsub>
 800468c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004690:	f7fc fb54 	bl	8000d3c <__aeabi_fmul>
 8004694:	f007 ff50 	bl	800c538 <asinf>
    AHRS->Yaw = (float) atan2f(AHRS->_q1 * AHRS->_q2 + AHRS->_q0 * AHRS->_q3, 0.5f - AHRS->_q2 * AHRS->_q2 - AHRS->_q3 * AHRS->_q3);
 8004698:	69e6      	ldr	r6, [r4, #28]
    AHRS->Pitch = (float) asinf(-2.0f * (AHRS->_q1 * AHRS->_q3 - AHRS->_q0 * AHRS->_q2));
 800469a:	6060      	str	r0, [r4, #4]
    AHRS->Yaw = (float) atan2f(AHRS->_q1 * AHRS->_q2 + AHRS->_q0 * AHRS->_q3, 0.5f - AHRS->_q2 * AHRS->_q2 - AHRS->_q3 * AHRS->_q3);
 800469c:	4631      	mov	r1, r6
 800469e:	4630      	mov	r0, r6
 80046a0:	f7fc fb4c 	bl	8000d3c <__aeabi_fmul>
 80046a4:	4601      	mov	r1, r0
 80046a6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80046aa:	f7fc fa3d 	bl	8000b28 <__aeabi_fsub>
 80046ae:	6a25      	ldr	r5, [r4, #32]
 80046b0:	4607      	mov	r7, r0
 80046b2:	4629      	mov	r1, r5
 80046b4:	4628      	mov	r0, r5
 80046b6:	f7fc fb41 	bl	8000d3c <__aeabi_fmul>
 80046ba:	4601      	mov	r1, r0
 80046bc:	4638      	mov	r0, r7
 80046be:	f7fc fa33 	bl	8000b28 <__aeabi_fsub>
 80046c2:	69a1      	ldr	r1, [r4, #24]
 80046c4:	4607      	mov	r7, r0
 80046c6:	4630      	mov	r0, r6
 80046c8:	f7fc fb38 	bl	8000d3c <__aeabi_fmul>
 80046cc:	6961      	ldr	r1, [r4, #20]
 80046ce:	4606      	mov	r6, r0
 80046d0:	4628      	mov	r0, r5
 80046d2:	f7fc fb33 	bl	8000d3c <__aeabi_fmul>
 80046d6:	4601      	mov	r1, r0
 80046d8:	4630      	mov	r0, r6
 80046da:	f7fc fa27 	bl	8000b2c <__addsf3>
 80046de:	4639      	mov	r1, r7
 80046e0:	f007 ff78 	bl	800c5d4 <atan2f>

    /* Calculate degrees and remove inclination */
    AHRS->Roll *= R2D;
 80046e4:	4992      	ldr	r1, [pc, #584]	; (8004930 <calculateAngles+0x310>)
    AHRS->Yaw = (float) atan2f(AHRS->_q1 * AHRS->_q2 + AHRS->_q0 * AHRS->_q3, 0.5f - AHRS->_q2 * AHRS->_q2 - AHRS->_q3 * AHRS->_q3);
 80046e6:	4605      	mov	r5, r0
    AHRS->Roll *= R2D;
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	f7fc fb27 	bl	8000d3c <__aeabi_fmul>
    AHRS->Pitch *= R2D;
 80046ee:	4990      	ldr	r1, [pc, #576]	; (8004930 <calculateAngles+0x310>)
    AHRS->Roll *= R2D;
 80046f0:	6020      	str	r0, [r4, #0]
 80046f2:	4682      	mov	sl, r0
    AHRS->Pitch *= R2D;
 80046f4:	6860      	ldr	r0, [r4, #4]
 80046f6:	f7fc fb21 	bl	8000d3c <__aeabi_fmul>
    AHRS->Yaw *= R2D;// - AHRS->Inclination;
 80046fa:	498d      	ldr	r1, [pc, #564]	; (8004930 <calculateAngles+0x310>)
    AHRS->Pitch *= R2D;
 80046fc:	6060      	str	r0, [r4, #4]
 80046fe:	4607      	mov	r7, r0
    AHRS->Yaw *= R2D;// - AHRS->Inclination;
 8004700:	4628      	mov	r0, r5
 8004702:	f7fc fb1b 	bl	8000d3c <__aeabi_fmul>

    /* Check values because of inclination */
    if (AHRS->Yaw < -180) {
 8004706:	498b      	ldr	r1, [pc, #556]	; (8004934 <calculateAngles+0x314>)
    AHRS->Yaw *= R2D;// - AHRS->Inclination;
 8004708:	4605      	mov	r5, r0
    if (AHRS->Yaw < -180) {
 800470a:	f7fc fcb5 	bl	8001078 <__aeabi_fcmplt>
 800470e:	b148      	cbz	r0, 8004724 <calculateAngles+0x104>
        AHRS->Yaw = 180.0f - (-180.0f - AHRS->Yaw);
 8004710:	4629      	mov	r1, r5
 8004712:	4888      	ldr	r0, [pc, #544]	; (8004934 <calculateAngles+0x314>)
 8004714:	f7fc fa08 	bl	8000b28 <__aeabi_fsub>
 8004718:	4601      	mov	r1, r0
 800471a:	4887      	ldr	r0, [pc, #540]	; (8004938 <calculateAngles+0x318>)
    } else if (AHRS->Yaw > 180) {
        AHRS->Yaw = -180.0f - (180.0f - AHRS->Yaw);
 800471c:	f7fc fa04 	bl	8000b28 <__aeabi_fsub>
 8004720:	60a0      	str	r0, [r4, #8]
 8004722:	e007      	b.n	8004734 <calculateAngles+0x114>
    } else if (AHRS->Yaw > 180) {
 8004724:	4984      	ldr	r1, [pc, #528]	; (8004938 <calculateAngles+0x318>)
 8004726:	4628      	mov	r0, r5
 8004728:	f7fc fcc4 	bl	80010b4 <__aeabi_fcmpgt>
 800472c:	2800      	cmp	r0, #0
 800472e:	f040 80e0 	bne.w	80048f2 <calculateAngles+0x2d2>
    AHRS->Yaw *= R2D;// - AHRS->Inclination;
 8004732:	60a5      	str	r5, [r4, #8]
    }

    if (AHRS->Yaw >= 180) {
 8004734:	68a5      	ldr	r5, [r4, #8]
 8004736:	4980      	ldr	r1, [pc, #512]	; (8004938 <calculateAngles+0x318>)
 8004738:	4628      	mov	r0, r5
 800473a:	f7fc fcb1 	bl	80010a0 <__aeabi_fcmpge>
 800473e:	2800      	cmp	r0, #0
 8004740:	f000 80de 	beq.w	8004900 <calculateAngles+0x2e0>
        AHRS->Yaw -= 360.0f;
 8004744:	497d      	ldr	r1, [pc, #500]	; (800493c <calculateAngles+0x31c>)
 8004746:	4628      	mov	r0, r5
 8004748:	f7fc f9ee 	bl	8000b28 <__aeabi_fsub>
    } else if (AHRS->Yaw < -180) {
        AHRS->Yaw += 360.0f;
 800474c:	60a0      	str	r0, [r4, #8]
    }

  AHRS->Roll  = (0.95 * (Pre_IMU[ROLL]  + (imu.gyroRaw[ROLL] * 0.004)))  + (0.05 * AHRS->Roll);
 800474e:	4d7c      	ldr	r5, [pc, #496]	; (8004940 <calculateAngles+0x320>)
 8004750:	4e7c      	ldr	r6, [pc, #496]	; (8004944 <calculateAngles+0x324>)
 8004752:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004754:	f7fb fe68 	bl	8000428 <__aeabi_f2d>
 8004758:	a36f      	add	r3, pc, #444	; (adr r3, 8004918 <calculateAngles+0x2f8>)
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	f7fb feb7 	bl	80004d0 <__aeabi_dmul>
 8004762:	4680      	mov	r8, r0
 8004764:	6830      	ldr	r0, [r6, #0]
 8004766:	4689      	mov	r9, r1
 8004768:	f7fb fe5e 	bl	8000428 <__aeabi_f2d>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4640      	mov	r0, r8
 8004772:	4649      	mov	r1, r9
 8004774:	f7fb fcfa 	bl	800016c <__adddf3>
 8004778:	a369      	add	r3, pc, #420	; (adr r3, 8004920 <calculateAngles+0x300>)
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	f7fb fea7 	bl	80004d0 <__aeabi_dmul>
 8004782:	4680      	mov	r8, r0
 8004784:	4650      	mov	r0, sl
 8004786:	4689      	mov	r9, r1
 8004788:	f7fb fe4e 	bl	8000428 <__aeabi_f2d>
 800478c:	a366      	add	r3, pc, #408	; (adr r3, 8004928 <calculateAngles+0x308>)
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f7fb fe9d 	bl	80004d0 <__aeabi_dmul>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4640      	mov	r0, r8
 800479c:	4649      	mov	r1, r9
 800479e:	f7fb fce5 	bl	800016c <__adddf3>
 80047a2:	f7fc f96d 	bl	8000a80 <__aeabi_d2f>
 80047a6:	4682      	mov	sl, r0
 80047a8:	6020      	str	r0, [r4, #0]
  AHRS->Pitch = (0.95 * (Pre_IMU[PITCH] + (imu.gyroRaw[PITCH] * 0.004))) + (0.05 * AHRS->Pitch);
 80047aa:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80047ac:	f7fb fe3c 	bl	8000428 <__aeabi_f2d>
 80047b0:	a359      	add	r3, pc, #356	; (adr r3, 8004918 <calculateAngles+0x2f8>)
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f7fb fe8b 	bl	80004d0 <__aeabi_dmul>
 80047ba:	4680      	mov	r8, r0
 80047bc:	6870      	ldr	r0, [r6, #4]
 80047be:	4689      	mov	r9, r1
 80047c0:	f7fb fe32 	bl	8000428 <__aeabi_f2d>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4640      	mov	r0, r8
 80047ca:	4649      	mov	r1, r9
 80047cc:	f7fb fcce 	bl	800016c <__adddf3>
 80047d0:	a353      	add	r3, pc, #332	; (adr r3, 8004920 <calculateAngles+0x300>)
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f7fb fe7b 	bl	80004d0 <__aeabi_dmul>
 80047da:	4680      	mov	r8, r0
 80047dc:	4638      	mov	r0, r7
 80047de:	4689      	mov	r9, r1
 80047e0:	f7fb fe22 	bl	8000428 <__aeabi_f2d>
 80047e4:	a350      	add	r3, pc, #320	; (adr r3, 8004928 <calculateAngles+0x308>)
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f7fb fe71 	bl	80004d0 <__aeabi_dmul>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4640      	mov	r0, r8
 80047f4:	4649      	mov	r1, r9
 80047f6:	f7fb fcb9 	bl	800016c <__adddf3>
 80047fa:	f7fc f941 	bl	8000a80 <__aeabi_d2f>
 80047fe:	4683      	mov	fp, r0
 8004800:	6060      	str	r0, [r4, #4]
  AHRS->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRS->Yaw);
 8004802:	68b0      	ldr	r0, [r6, #8]
 8004804:	f7fb fe10 	bl	8000428 <__aeabi_f2d>
 8004808:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 800480a:	4680      	mov	r8, r0
 800480c:	4638      	mov	r0, r7
 800480e:	4689      	mov	r9, r1
 8004810:	f7fb fe0a 	bl	8000428 <__aeabi_f2d>
 8004814:	a340      	add	r3, pc, #256	; (adr r3, 8004918 <calculateAngles+0x2f8>)
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	f7fb fe59 	bl	80004d0 <__aeabi_dmul>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4640      	mov	r0, r8
 8004824:	4649      	mov	r1, r9
 8004826:	f7fb fca1 	bl	800016c <__adddf3>
 800482a:	a33d      	add	r3, pc, #244	; (adr r3, 8004920 <calculateAngles+0x300>)
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	f7fb fe4e 	bl	80004d0 <__aeabi_dmul>
 8004834:	4680      	mov	r8, r0
 8004836:	68a0      	ldr	r0, [r4, #8]
 8004838:	4689      	mov	r9, r1
 800483a:	f7fb fdf5 	bl	8000428 <__aeabi_f2d>
 800483e:	a33a      	add	r3, pc, #232	; (adr r3, 8004928 <calculateAngles+0x308>)
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	f7fb fe44 	bl	80004d0 <__aeabi_dmul>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4640      	mov	r0, r8
 800484e:	4649      	mov	r1, r9
 8004850:	f7fb fc8c 	bl	800016c <__adddf3>
 8004854:	f7fc f914 	bl	8000a80 <__aeabi_d2f>
 8004858:	60a0      	str	r0, [r4, #8]

  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 800485a:	4c3b      	ldr	r4, [pc, #236]	; (8004948 <calculateAngles+0x328>)
  AHRS->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRS->Yaw);
 800485c:	4680      	mov	r8, r0
  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 800485e:	6820      	ldr	r0, [r4, #0]
 8004860:	f7fb fde2 	bl	8000428 <__aeabi_f2d>
 8004864:	a32e      	add	r3, pc, #184	; (adr r3, 8004920 <calculateAngles+0x300>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f7fb fe31 	bl	80004d0 <__aeabi_dmul>
 800486e:	e9cd 0100 	strd	r0, r1, [sp]
 8004872:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 8004876:	f7fb fdd7 	bl	8000428 <__aeabi_f2d>
 800487a:	a32b      	add	r3, pc, #172	; (adr r3, 8004928 <calculateAngles+0x308>)
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	f7fb fe26 	bl	80004d0 <__aeabi_dmul>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	e9dd 0100 	ldrd	r0, r1, [sp]
 800488c:	f7fb fc6e 	bl	800016c <__adddf3>
 8004890:	f7fc f8f6 	bl	8000a80 <__aeabi_d2f>
		
		imu.AHRS[ROLL] = AHRS->Roll + 0.0f;
 8004894:	2100      	movs	r1, #0
  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 8004896:	4607      	mov	r7, r0
 8004898:	67a8      	str	r0, [r5, #120]	; 0x78
		imu.AHRS[ROLL] = AHRS->Roll + 0.0f;
 800489a:	4650      	mov	r0, sl
 800489c:	f7fc f946 	bl	8000b2c <__addsf3>
		imu.AHRS[PITCH] = AHRS->Pitch + 0.0f;
 80048a0:	2100      	movs	r1, #0
		imu.AHRS[ROLL] = AHRS->Roll + 0.0f;
 80048a2:	67e8      	str	r0, [r5, #124]	; 0x7c
 80048a4:	9000      	str	r0, [sp, #0]
		imu.AHRS[PITCH] = AHRS->Pitch + 0.0f;
 80048a6:	4658      	mov	r0, fp
 80048a8:	f7fc f940 	bl	8000b2c <__addsf3>
		imu.AHRS[YAW] = AHRS->Yaw;

		att.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 80048ac:	9b00      	ldr	r3, [sp, #0]
		imu.AHRS[PITCH] = AHRS->Pitch + 0.0f;
 80048ae:	4681      	mov	r9, r0
 80048b0:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
		imu.AHRS[YAW] = AHRS->Yaw;
 80048b4:	f8c5 8084 	str.w	r8, [r5, #132]	; 0x84
		att.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fc fc1b 	bl	80010f4 <__aeabi_f2iz>
 80048be:	4d23      	ldr	r5, [pc, #140]	; (800494c <calculateAngles+0x32c>)
 80048c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80048c4:	0040      	lsls	r0, r0, #1
 80048c6:	8028      	strh	r0, [r5, #0]
    att.angle[PITCH] = (int16_t) imu.AHRS[PITCH] * 10;
 80048c8:	4648      	mov	r0, r9
 80048ca:	f7fc fc13 	bl	80010f4 <__aeabi_f2iz>
 80048ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80048d2:	0040      	lsls	r0, r0, #1
 80048d4:	8068      	strh	r0, [r5, #2]
    att.heading = (int16_t) imu.AHRS[YAW];
 80048d6:	4640      	mov	r0, r8
 80048d8:	f7fc fc0c 	bl	80010f4 <__aeabi_f2iz>
		
	Pre_IMU[ROLL]  = AHRS->Roll;
 80048dc:	f8c6 a000 	str.w	sl, [r6]
    att.heading = (int16_t) imu.AHRS[YAW];
 80048e0:	80a8      	strh	r0, [r5, #4]
	Pre_IMU[PITCH] = AHRS->Pitch;
 80048e2:	f8c6 b004 	str.w	fp, [r6, #4]
	Pre_IMU[YAW]   = AHRS->Yaw;
 80048e6:	f8c6 8008 	str.w	r8, [r6, #8]
	Pre_gyro = imu.gyroYaw;
 80048ea:	6027      	str	r7, [r4, #0]
	}
 80048ec:	b003      	add	sp, #12
 80048ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AHRS->Yaw = -180.0f - (180.0f - AHRS->Yaw);
 80048f2:	4629      	mov	r1, r5
 80048f4:	4810      	ldr	r0, [pc, #64]	; (8004938 <calculateAngles+0x318>)
 80048f6:	f7fc f917 	bl	8000b28 <__aeabi_fsub>
 80048fa:	4601      	mov	r1, r0
 80048fc:	480d      	ldr	r0, [pc, #52]	; (8004934 <calculateAngles+0x314>)
 80048fe:	e70d      	b.n	800471c <calculateAngles+0xfc>
    } else if (AHRS->Yaw < -180) {
 8004900:	490c      	ldr	r1, [pc, #48]	; (8004934 <calculateAngles+0x314>)
 8004902:	4628      	mov	r0, r5
 8004904:	f7fc fbb8 	bl	8001078 <__aeabi_fcmplt>
 8004908:	2800      	cmp	r0, #0
 800490a:	f43f af20 	beq.w	800474e <calculateAngles+0x12e>
        AHRS->Yaw += 360.0f;
 800490e:	490b      	ldr	r1, [pc, #44]	; (800493c <calculateAngles+0x31c>)
 8004910:	4628      	mov	r0, r5
 8004912:	f7fc f90b 	bl	8000b2c <__addsf3>
 8004916:	e719      	b.n	800474c <calculateAngles+0x12c>
 8004918:	d2f1a9fc 	.word	0xd2f1a9fc
 800491c:	3f70624d 	.word	0x3f70624d
 8004920:	66666666 	.word	0x66666666
 8004924:	3fee6666 	.word	0x3fee6666
 8004928:	9999999a 	.word	0x9999999a
 800492c:	3fa99999 	.word	0x3fa99999
 8004930:	42652ee0 	.word	0x42652ee0
 8004934:	c3340000 	.word	0xc3340000
 8004938:	43340000 	.word	0x43340000
 800493c:	43b40000 	.word	0x43b40000
 8004940:	20001030 	.word	0x20001030
 8004944:	200006ac 	.word	0x200006ac
 8004948:	200006b8 	.word	0x200006b8
 800494c:	20000b7c 	.word	0x20000b7c

08004950 <TM_AHRSIMU_Init>:

void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRS, float sampleRate, float beta, float inclination) {
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4604      	mov	r4, r0
    AHRS->_beta = beta;
 8004954:	6102      	str	r2, [r0, #16]
    AHRS->_sampleRate = 1 / sampleRate;
 8004956:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRS, float sampleRate, float beta, float inclination) {
 800495a:	461d      	mov	r5, r3
    AHRS->_sampleRate = 1 / sampleRate;
 800495c:	f7fc faa2 	bl	8000ea4 <__aeabi_fdiv>
    AHRS->Inclination = inclination;

    AHRS->_q0 = 1.0f;
 8004960:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004964:	6163      	str	r3, [r4, #20]
    AHRS->_q1 = 0.0f;
 8004966:	2300      	movs	r3, #0
    AHRS->_sampleRate = 1 / sampleRate;
 8004968:	6260      	str	r0, [r4, #36]	; 0x24
    AHRS->Inclination = inclination;
 800496a:	60e5      	str	r5, [r4, #12]
    AHRS->_q1 = 0.0f;
 800496c:	61a3      	str	r3, [r4, #24]
    AHRS->_q2 = 0.0f;
 800496e:	61e3      	str	r3, [r4, #28]
    AHRS->_q3 = 0.0f;
 8004970:	6223      	str	r3, [r4, #32]
 8004972:	bd38      	pop	{r3, r4, r5, pc}

08004974 <TM_AHRSIMU_UpdateIMU>:

    /* Calculate new angles */
    calculateAngles(AHRS);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRS, float gx, float gy, float gz, float ax, float ay, float az) {
 8004974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004978:	4683      	mov	fp, r0
 800497a:	b093      	sub	sp, #76	; 0x4c
 800497c:	4608      	mov	r0, r1
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	
		// Convert gyroscope degrees/sec to radians/sec
	  gx = AHRSIMU_DEG2RAD(gx);
 800497e:	4952      	ldr	r1, [pc, #328]	; (8004ac8 <TM_AHRSIMU_UpdateIMU+0x154>)
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRS, float gx, float gy, float gz, float ax, float ay, float az) {
 8004980:	4615      	mov	r5, r2
 8004982:	461c      	mov	r4, r3
	  gx = AHRSIMU_DEG2RAD(gx);
 8004984:	f7fc f9da 	bl	8000d3c <__aeabi_fmul>
	  gy = AHRSIMU_DEG2RAD(gy);
 8004988:	494f      	ldr	r1, [pc, #316]	; (8004ac8 <TM_AHRSIMU_UpdateIMU+0x154>)
	  gx = AHRSIMU_DEG2RAD(gx);
 800498a:	4681      	mov	r9, r0
	  gy = AHRSIMU_DEG2RAD(gy);
 800498c:	4628      	mov	r0, r5
 800498e:	f7fc f9d5 	bl	8000d3c <__aeabi_fmul>
	  gz = AHRSIMU_DEG2RAD(gz);
 8004992:	494d      	ldr	r1, [pc, #308]	; (8004ac8 <TM_AHRSIMU_UpdateIMU+0x154>)
	  gy = AHRSIMU_DEG2RAD(gy);
 8004994:	4682      	mov	sl, r0
	  gz = AHRSIMU_DEG2RAD(gz);
 8004996:	4620      	mov	r0, r4
 8004998:	f7fc f9d0 	bl	8000d3c <__aeabi_fmul>

    /* Rate of change of quaternion from gyroscope */
    qDot1 = 0.5f * (-AHRS->_q1 * gx - AHRS->_q2 * gy - AHRS->_q3 * gz);
 800499c:	f8db 5018 	ldr.w	r5, [fp, #24]
 80049a0:	f8db 3020 	ldr.w	r3, [fp, #32]
	  gz = AHRSIMU_DEG2RAD(gz);
 80049a4:	9002      	str	r0, [sp, #8]
    qDot1 = 0.5f * (-AHRS->_q1 * gx - AHRS->_q2 * gy - AHRS->_q3 * gz);
 80049a6:	4649      	mov	r1, r9
 80049a8:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	f7fc f9c5 	bl	8000d3c <__aeabi_fmul>
 80049b2:	f8db 401c 	ldr.w	r4, [fp, #28]
 80049b6:	9001      	str	r0, [sp, #4]
 80049b8:	4621      	mov	r1, r4
 80049ba:	4650      	mov	r0, sl
 80049bc:	f7fc f9be 	bl	8000d3c <__aeabi_fmul>
 80049c0:	9b01      	ldr	r3, [sp, #4]
 80049c2:	4601      	mov	r1, r0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fc f8af 	bl	8000b28 <__aeabi_fsub>
 80049ca:	9900      	ldr	r1, [sp, #0]
 80049cc:	9001      	str	r0, [sp, #4]
 80049ce:	9802      	ldr	r0, [sp, #8]
 80049d0:	f7fc f9b4 	bl	8000d3c <__aeabi_fmul>
 80049d4:	9b01      	ldr	r3, [sp, #4]
 80049d6:	4601      	mov	r1, r0
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fc f8a5 	bl	8000b28 <__aeabi_fsub>
 80049de:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80049e2:	f7fc f9ab 	bl	8000d3c <__aeabi_fmul>
    qDot2 = 0.5f * (AHRS->_q0 * gx + AHRS->_q2 * gz - AHRS->_q3 * gy);
 80049e6:	f8db 3014 	ldr.w	r3, [fp, #20]
    qDot1 = 0.5f * (-AHRS->_q1 * gx - AHRS->_q2 * gy - AHRS->_q3 * gz);
 80049ea:	9004      	str	r0, [sp, #16]
    qDot2 = 0.5f * (AHRS->_q0 * gx + AHRS->_q2 * gz - AHRS->_q3 * gy);
 80049ec:	4619      	mov	r1, r3
 80049ee:	4648      	mov	r0, r9
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	f7fc f9a3 	bl	8000d3c <__aeabi_fmul>
 80049f6:	4621      	mov	r1, r4
 80049f8:	9003      	str	r0, [sp, #12]
 80049fa:	9802      	ldr	r0, [sp, #8]
 80049fc:	f7fc f99e 	bl	8000d3c <__aeabi_fmul>
 8004a00:	9b03      	ldr	r3, [sp, #12]
 8004a02:	4601      	mov	r1, r0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fc f891 	bl	8000b2c <__addsf3>
 8004a0a:	9900      	ldr	r1, [sp, #0]
 8004a0c:	9003      	str	r0, [sp, #12]
 8004a0e:	4650      	mov	r0, sl
 8004a10:	f7fc f994 	bl	8000d3c <__aeabi_fmul>
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	4601      	mov	r1, r0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fc f885 	bl	8000b28 <__aeabi_fsub>
 8004a1e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004a22:	f7fc f98b 	bl	8000d3c <__aeabi_fmul>
    qDot3 = 0.5f * (AHRS->_q0 * gy - AHRS->_q1 * gz + AHRS->_q3 * gx);
 8004a26:	9901      	ldr	r1, [sp, #4]
    qDot2 = 0.5f * (AHRS->_q0 * gx + AHRS->_q2 * gz - AHRS->_q3 * gy);
 8004a28:	9005      	str	r0, [sp, #20]
    qDot3 = 0.5f * (AHRS->_q0 * gy - AHRS->_q1 * gz + AHRS->_q3 * gx);
 8004a2a:	4650      	mov	r0, sl
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRS, float gx, float gy, float gz, float ax, float ay, float az) {
 8004a2c:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004a30:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004a32:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    qDot3 = 0.5f * (AHRS->_q0 * gy - AHRS->_q1 * gz + AHRS->_q3 * gx);
 8004a34:	f7fc f982 	bl	8000d3c <__aeabi_fmul>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	9003      	str	r0, [sp, #12]
 8004a3c:	9802      	ldr	r0, [sp, #8]
 8004a3e:	f7fc f97d 	bl	8000d3c <__aeabi_fmul>
 8004a42:	9b03      	ldr	r3, [sp, #12]
 8004a44:	4601      	mov	r1, r0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc f86e 	bl	8000b28 <__aeabi_fsub>
 8004a4c:	9900      	ldr	r1, [sp, #0]
 8004a4e:	9003      	str	r0, [sp, #12]
 8004a50:	4648      	mov	r0, r9
 8004a52:	f7fc f973 	bl	8000d3c <__aeabi_fmul>
 8004a56:	9b03      	ldr	r3, [sp, #12]
 8004a58:	4601      	mov	r1, r0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fc f866 	bl	8000b2c <__addsf3>
 8004a60:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004a64:	f7fc f96a 	bl	8000d3c <__aeabi_fmul>
    qDot4 = 0.5f * (AHRS->_q0 * gz + AHRS->_q1 * gy - AHRS->_q2 * gx);
 8004a68:	9901      	ldr	r1, [sp, #4]
    qDot3 = 0.5f * (AHRS->_q0 * gy - AHRS->_q1 * gz + AHRS->_q3 * gx);
 8004a6a:	9006      	str	r0, [sp, #24]
    qDot4 = 0.5f * (AHRS->_q0 * gz + AHRS->_q1 * gy - AHRS->_q2 * gx);
 8004a6c:	9802      	ldr	r0, [sp, #8]
 8004a6e:	f7fc f965 	bl	8000d3c <__aeabi_fmul>
 8004a72:	4629      	mov	r1, r5
 8004a74:	9002      	str	r0, [sp, #8]
 8004a76:	4650      	mov	r0, sl
 8004a78:	f7fc f960 	bl	8000d3c <__aeabi_fmul>
 8004a7c:	9b02      	ldr	r3, [sp, #8]
 8004a7e:	4601      	mov	r1, r0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fc f853 	bl	8000b2c <__addsf3>
 8004a86:	4621      	mov	r1, r4
 8004a88:	4682      	mov	sl, r0
 8004a8a:	4648      	mov	r0, r9
 8004a8c:	f7fc f956 	bl	8000d3c <__aeabi_fmul>
 8004a90:	4601      	mov	r1, r0
 8004a92:	4650      	mov	r0, sl
 8004a94:	f7fc f848 	bl	8000b28 <__aeabi_fsub>
 8004a98:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004a9c:	f7fc f94e 	bl	8000d3c <__aeabi_fmul>

    /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8004aa0:	2100      	movs	r1, #0
    qDot4 = 0.5f * (AHRS->_q0 * gz + AHRS->_q1 * gy - AHRS->_q2 * gx);
 8004aa2:	9007      	str	r0, [sp, #28]
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	f7fc fadd 	bl	8001064 <__aeabi_fcmpeq>
 8004aaa:	b178      	cbz	r0, 8004acc <TM_AHRSIMU_UpdateIMU+0x158>
 8004aac:	2100      	movs	r1, #0
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f7fc fad8 	bl	8001064 <__aeabi_fcmpeq>
 8004ab4:	b150      	cbz	r0, 8004acc <TM_AHRSIMU_UpdateIMU+0x158>
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f7fc fad3 	bl	8001064 <__aeabi_fcmpeq>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	f040 8198 	bne.w	8004df4 <TM_AHRSIMU_UpdateIMU+0x480>
 8004ac4:	e002      	b.n	8004acc <TM_AHRSIMU_UpdateIMU+0x158>
 8004ac6:	bf00      	nop
 8004ac8:	3c8efa35 	.word	0x3c8efa35

        /* Normalise accelerometer measurement */
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8004acc:	4641      	mov	r1, r8
 8004ace:	4640      	mov	r0, r8
 8004ad0:	f7fc f934 	bl	8000d3c <__aeabi_fmul>
 8004ad4:	4639      	mov	r1, r7
 8004ad6:	4681      	mov	r9, r0
 8004ad8:	4638      	mov	r0, r7
 8004ada:	f7fc f92f 	bl	8000d3c <__aeabi_fmul>
 8004ade:	4601      	mov	r1, r0
 8004ae0:	4648      	mov	r0, r9
 8004ae2:	f7fc f823 	bl	8000b2c <__addsf3>
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4681      	mov	r9, r0
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7fc f926 	bl	8000d3c <__aeabi_fmul>
 8004af0:	4601      	mov	r1, r0
 8004af2:	4648      	mov	r0, r9
 8004af4:	f7fc f81a 	bl	8000b2c <__addsf3>
 8004af8:	f7ff fd66 	bl	80045c8 <invSqrt>
 8004afc:	4681      	mov	r9, r0
        ax *= recipNorm;
 8004afe:	4601      	mov	r1, r0
 8004b00:	4640      	mov	r0, r8
 8004b02:	f7fc f91b 	bl	8000d3c <__aeabi_fmul>
        ay *= recipNorm;
 8004b06:	4649      	mov	r1, r9
        ax *= recipNorm;
 8004b08:	9002      	str	r0, [sp, #8]
        ay *= recipNorm;
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f7fc f916 	bl	8000d3c <__aeabi_fmul>
        az *= recipNorm;
 8004b10:	4649      	mov	r1, r9
        ay *= recipNorm;
 8004b12:	9003      	str	r0, [sp, #12]
        az *= recipNorm;
 8004b14:	4630      	mov	r0, r6
 8004b16:	f7fc f911 	bl	8000d3c <__aeabi_fmul>

        /* Auxiliary variables to avoid repeated arithmetic */
        _2q0 = 2.0f * AHRS->_q0;
 8004b1a:	9901      	ldr	r1, [sp, #4]
        az *= recipNorm;
 8004b1c:	9009      	str	r0, [sp, #36]	; 0x24
        _2q0 = 2.0f * AHRS->_q0;
 8004b1e:	4608      	mov	r0, r1
 8004b20:	f7fc f804 	bl	8000b2c <__addsf3>
        _2q1 = 2.0f * AHRS->_q1;
 8004b24:	4629      	mov	r1, r5
        _2q0 = 2.0f * AHRS->_q0;
 8004b26:	900a      	str	r0, [sp, #40]	; 0x28
        _2q1 = 2.0f * AHRS->_q1;
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f7fb ffff 	bl	8000b2c <__addsf3>
        _2q2 = 2.0f * AHRS->_q2;
 8004b2e:	4621      	mov	r1, r4
        _2q1 = 2.0f * AHRS->_q1;
 8004b30:	900b      	str	r0, [sp, #44]	; 0x2c
        _2q2 = 2.0f * AHRS->_q2;
 8004b32:	4620      	mov	r0, r4
 8004b34:	f7fb fffa 	bl	8000b2c <__addsf3>
        _2q3 = 2.0f * AHRS->_q3;
 8004b38:	9900      	ldr	r1, [sp, #0]
        _2q2 = 2.0f * AHRS->_q2;
 8004b3a:	900c      	str	r0, [sp, #48]	; 0x30
        _2q3 = 2.0f * AHRS->_q3;
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	f7fb fff5 	bl	8000b2c <__addsf3>
        _4q0 = 4.0f * AHRS->_q0;
 8004b42:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _2q3 = 2.0f * AHRS->_q3;
 8004b46:	900d      	str	r0, [sp, #52]	; 0x34
        _4q0 = 4.0f * AHRS->_q0;
 8004b48:	9801      	ldr	r0, [sp, #4]
 8004b4a:	f7fc f8f7 	bl	8000d3c <__aeabi_fmul>
        _4q1 = 4.0f * AHRS->_q1;
 8004b4e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _4q0 = 4.0f * AHRS->_q0;
 8004b52:	4680      	mov	r8, r0
        _4q1 = 4.0f * AHRS->_q1;
 8004b54:	4628      	mov	r0, r5
 8004b56:	f7fc f8f1 	bl	8000d3c <__aeabi_fmul>
        _4q2 = 4.0f * AHRS->_q2;
 8004b5a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _4q1 = 4.0f * AHRS->_q1;
 8004b5e:	4607      	mov	r7, r0
        _4q2 = 4.0f * AHRS->_q2;
 8004b60:	4620      	mov	r0, r4
 8004b62:	f7fc f8eb 	bl	8000d3c <__aeabi_fmul>
        _8q1 = 8.0f * AHRS->_q1;
 8004b66:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
        _4q2 = 4.0f * AHRS->_q2;
 8004b6a:	9008      	str	r0, [sp, #32]
        _8q1 = 8.0f * AHRS->_q1;
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f7fc f8e5 	bl	8000d3c <__aeabi_fmul>
        _8q2 = 8.0f * AHRS->_q2;
 8004b72:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
        _8q1 = 8.0f * AHRS->_q1;
 8004b76:	4681      	mov	r9, r0
        _8q2 = 8.0f * AHRS->_q2;
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f7fc f8df 	bl	8000d3c <__aeabi_fmul>
        q0q0 = AHRS->_q0 * AHRS->_q0;
        q1q1 = AHRS->_q1 * AHRS->_q1;
 8004b7e:	4629      	mov	r1, r5
        _8q2 = 8.0f * AHRS->_q2;
 8004b80:	900e      	str	r0, [sp, #56]	; 0x38
        q1q1 = AHRS->_q1 * AHRS->_q1;
 8004b82:	4628      	mov	r0, r5
 8004b84:	f7fc f8da 	bl	8000d3c <__aeabi_fmul>
        q2q2 = AHRS->_q2 * AHRS->_q2;
 8004b88:	4621      	mov	r1, r4
        q1q1 = AHRS->_q1 * AHRS->_q1;
 8004b8a:	4606      	mov	r6, r0
        q2q2 = AHRS->_q2 * AHRS->_q2;
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7fc f8d5 	bl	8000d3c <__aeabi_fmul>
        q3q3 = AHRS->_q3 * AHRS->_q3;
 8004b92:	9900      	ldr	r1, [sp, #0]
        q2q2 = AHRS->_q2 * AHRS->_q2;
 8004b94:	4682      	mov	sl, r0
        q3q3 = AHRS->_q3 * AHRS->_q3;
 8004b96:	4608      	mov	r0, r1
 8004b98:	f7fc f8d0 	bl	8000d3c <__aeabi_fmul>

        /* Gradient decent algorithm corrective step */
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004b9c:	4651      	mov	r1, sl
        q3q3 = AHRS->_q3 * AHRS->_q3;
 8004b9e:	900f      	str	r0, [sp, #60]	; 0x3c
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	f7fc f8cb 	bl	8000d3c <__aeabi_fmul>
 8004ba6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ba8:	9010      	str	r0, [sp, #64]	; 0x40
 8004baa:	9802      	ldr	r0, [sp, #8]
 8004bac:	f7fc f8c6 	bl	8000d3c <__aeabi_fmul>
 8004bb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fb ffb9 	bl	8000b2c <__addsf3>
 8004bba:	4631      	mov	r1, r6
 8004bbc:	9010      	str	r0, [sp, #64]	; 0x40
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	f7fc f8bc 	bl	8000d3c <__aeabi_fmul>
 8004bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fb ffaf 	bl	8000b2c <__addsf3>
 8004bce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bd0:	4680      	mov	r8, r0
 8004bd2:	9803      	ldr	r0, [sp, #12]
 8004bd4:	f7fc f8b2 	bl	8000d3c <__aeabi_fmul>
 8004bd8:	4601      	mov	r1, r0
 8004bda:	4640      	mov	r0, r8
 8004bdc:	f7fb ffa4 	bl	8000b28 <__aeabi_fsub>
        q0q0 = AHRS->_q0 * AHRS->_q0;
 8004be0:	9901      	ldr	r1, [sp, #4]
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004be2:	9011      	str	r0, [sp, #68]	; 0x44
        q0q0 = AHRS->_q0 * AHRS->_q0;
 8004be4:	4608      	mov	r0, r1
 8004be6:	f7fc f8a9 	bl	8000d3c <__aeabi_fmul>
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRS->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004bea:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004bee:	f7fc f8a5 	bl	8000d3c <__aeabi_fmul>
 8004bf2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004bf4:	4680      	mov	r8, r0
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	f7fc f8a0 	bl	8000d3c <__aeabi_fmul>
 8004bfc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004bfe:	9010      	str	r0, [sp, #64]	; 0x40
 8004c00:	9802      	ldr	r0, [sp, #8]
 8004c02:	f7fc f89b 	bl	8000d3c <__aeabi_fmul>
 8004c06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c08:	4601      	mov	r1, r0
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7fb ff8c 	bl	8000b28 <__aeabi_fsub>
 8004c10:	4641      	mov	r1, r8
 8004c12:	9010      	str	r0, [sp, #64]	; 0x40
 8004c14:	4628      	mov	r0, r5
 8004c16:	f7fc f891 	bl	8000d3c <__aeabi_fmul>
 8004c1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c1c:	4601      	mov	r1, r0
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f7fb ff84 	bl	8000b2c <__addsf3>
 8004c24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c26:	9010      	str	r0, [sp, #64]	; 0x40
 8004c28:	9803      	ldr	r0, [sp, #12]
 8004c2a:	f7fc f887 	bl	8000d3c <__aeabi_fmul>
 8004c2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c30:	4601      	mov	r1, r0
 8004c32:	4610      	mov	r0, r2
 8004c34:	f7fb ff78 	bl	8000b28 <__aeabi_fsub>
 8004c38:	4639      	mov	r1, r7
 8004c3a:	f7fb ff75 	bl	8000b28 <__aeabi_fsub>
 8004c3e:	4631      	mov	r1, r6
 8004c40:	9010      	str	r0, [sp, #64]	; 0x40
 8004c42:	4648      	mov	r0, r9
 8004c44:	f7fc f87a 	bl	8000d3c <__aeabi_fmul>
 8004c48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7fb ff6d 	bl	8000b2c <__addsf3>
 8004c52:	4651      	mov	r1, sl
 8004c54:	9010      	str	r0, [sp, #64]	; 0x40
 8004c56:	4648      	mov	r0, r9
 8004c58:	f7fc f870 	bl	8000d3c <__aeabi_fmul>
 8004c5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c5e:	4601      	mov	r1, r0
 8004c60:	4610      	mov	r0, r2
 8004c62:	f7fb ff63 	bl	8000b2c <__addsf3>
 8004c66:	4639      	mov	r1, r7
 8004c68:	4681      	mov	r9, r0
 8004c6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c6c:	f7fc f866 	bl	8000d3c <__aeabi_fmul>
 8004c70:	4601      	mov	r1, r0
 8004c72:	4648      	mov	r0, r9
 8004c74:	f7fb ff5a 	bl	8000b2c <__addsf3>
        s2 = 4.0f * q0q0 * AHRS->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004c78:	4641      	mov	r1, r8
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRS->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004c7a:	4681      	mov	r9, r0
        s2 = 4.0f * q0q0 * AHRS->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f7fc f85d 	bl	8000d3c <__aeabi_fmul>
 8004c82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c84:	4607      	mov	r7, r0
 8004c86:	9802      	ldr	r0, [sp, #8]
 8004c88:	f7fc f858 	bl	8000d3c <__aeabi_fmul>
 8004c8c:	4601      	mov	r1, r0
 8004c8e:	4638      	mov	r0, r7
 8004c90:	f7fb ff4c 	bl	8000b2c <__addsf3>
 8004c94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c96:	4607      	mov	r7, r0
 8004c98:	9808      	ldr	r0, [sp, #32]
 8004c9a:	f7fc f84f 	bl	8000d3c <__aeabi_fmul>
 8004c9e:	4601      	mov	r1, r0
 8004ca0:	4638      	mov	r0, r7
 8004ca2:	f7fb ff43 	bl	8000b2c <__addsf3>
 8004ca6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ca8:	4607      	mov	r7, r0
 8004caa:	9803      	ldr	r0, [sp, #12]
 8004cac:	f7fc f846 	bl	8000d3c <__aeabi_fmul>
 8004cb0:	4601      	mov	r1, r0
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	f7fb ff38 	bl	8000b28 <__aeabi_fsub>
 8004cb8:	9908      	ldr	r1, [sp, #32]
 8004cba:	f7fb ff35 	bl	8000b28 <__aeabi_fsub>
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004cc4:	f7fc f83a 	bl	8000d3c <__aeabi_fmul>
 8004cc8:	4601      	mov	r1, r0
 8004cca:	4638      	mov	r0, r7
 8004ccc:	f7fb ff2e 	bl	8000b2c <__addsf3>
 8004cd0:	4651      	mov	r1, sl
 8004cd2:	4607      	mov	r7, r0
 8004cd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004cd6:	f7fc f831 	bl	8000d3c <__aeabi_fmul>
 8004cda:	4601      	mov	r1, r0
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f7fb ff25 	bl	8000b2c <__addsf3>
 8004ce2:	9908      	ldr	r1, [sp, #32]
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ce8:	f7fc f828 	bl	8000d3c <__aeabi_fmul>
 8004cec:	4601      	mov	r1, r0
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f7fb ff1c 	bl	8000b2c <__addsf3>
        s3 = 4.0f * q1q1 * AHRS->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRS->_q3 - _2q2 * ay;
 8004cf4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        s2 = 4.0f * q0q0 * AHRS->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004cf8:	4680      	mov	r8, r0
        s3 = 4.0f * q1q1 * AHRS->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRS->_q3 - _2q2 * ay;
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7fc f81e 	bl	8000d3c <__aeabi_fmul>
 8004d00:	9900      	ldr	r1, [sp, #0]
 8004d02:	f7fc f81b 	bl	8000d3c <__aeabi_fmul>
 8004d06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d08:	4606      	mov	r6, r0
 8004d0a:	9802      	ldr	r0, [sp, #8]
 8004d0c:	f7fc f816 	bl	8000d3c <__aeabi_fmul>
 8004d10:	4601      	mov	r1, r0
 8004d12:	4630      	mov	r0, r6
 8004d14:	f7fb ff08 	bl	8000b28 <__aeabi_fsub>
 8004d18:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004d1c:	4606      	mov	r6, r0
 8004d1e:	4650      	mov	r0, sl
 8004d20:	f7fc f80c 	bl	8000d3c <__aeabi_fmul>
 8004d24:	9900      	ldr	r1, [sp, #0]
 8004d26:	f7fc f809 	bl	8000d3c <__aeabi_fmul>
 8004d2a:	4601      	mov	r1, r0
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	f7fb fefd 	bl	8000b2c <__addsf3>
 8004d32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d34:	4606      	mov	r6, r0
 8004d36:	9803      	ldr	r0, [sp, #12]
 8004d38:	f7fc f800 	bl	8000d3c <__aeabi_fmul>
 8004d3c:	4601      	mov	r1, r0
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f7fb fef2 	bl	8000b28 <__aeabi_fsub>

        /* Normalise step magnitude */
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004d44:	9b11      	ldr	r3, [sp, #68]	; 0x44
        s3 = 4.0f * q1q1 * AHRS->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRS->_q3 - _2q2 * ay;
 8004d46:	4682      	mov	sl, r0
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	9302      	str	r3, [sp, #8]
 8004d4e:	f7fb fff5 	bl	8000d3c <__aeabi_fmul>
 8004d52:	4649      	mov	r1, r9
 8004d54:	4606      	mov	r6, r0
 8004d56:	4648      	mov	r0, r9
 8004d58:	f7fb fff0 	bl	8000d3c <__aeabi_fmul>
 8004d5c:	4601      	mov	r1, r0
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f7fb fee4 	bl	8000b2c <__addsf3>
 8004d64:	4641      	mov	r1, r8
 8004d66:	4606      	mov	r6, r0
 8004d68:	4640      	mov	r0, r8
 8004d6a:	f7fb ffe7 	bl	8000d3c <__aeabi_fmul>
 8004d6e:	4601      	mov	r1, r0
 8004d70:	4630      	mov	r0, r6
 8004d72:	f7fb fedb 	bl	8000b2c <__addsf3>
 8004d76:	4651      	mov	r1, sl
 8004d78:	4606      	mov	r6, r0
 8004d7a:	4650      	mov	r0, sl
 8004d7c:	f7fb ffde 	bl	8000d3c <__aeabi_fmul>
 8004d80:	4601      	mov	r1, r0
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7fb fed2 	bl	8000b2c <__addsf3>
 8004d88:	f7ff fc1e 	bl	80045c8 <invSqrt>
        s0 *= recipNorm;
 8004d8c:	9b02      	ldr	r3, [sp, #8]
        s1 *= recipNorm;
        s2 *= recipNorm;
        s3 *= recipNorm;

        /* Apply feedback step */
        qDot1 -= AHRS->_beta * s0;
 8004d8e:	f8db 6010 	ldr.w	r6, [fp, #16]
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004d92:	4607      	mov	r7, r0
        s0 *= recipNorm;
 8004d94:	4601      	mov	r1, r0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fb ffd0 	bl	8000d3c <__aeabi_fmul>
        qDot1 -= AHRS->_beta * s0;
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	f7fb ffcd 	bl	8000d3c <__aeabi_fmul>
 8004da2:	4601      	mov	r1, r0
 8004da4:	9804      	ldr	r0, [sp, #16]
 8004da6:	f7fb febf 	bl	8000b28 <__aeabi_fsub>
        s1 *= recipNorm;
 8004daa:	4639      	mov	r1, r7
        qDot1 -= AHRS->_beta * s0;
 8004dac:	9004      	str	r0, [sp, #16]
        s1 *= recipNorm;
 8004dae:	4648      	mov	r0, r9
 8004db0:	f7fb ffc4 	bl	8000d3c <__aeabi_fmul>
        qDot2 -= AHRS->_beta * s1;
 8004db4:	4631      	mov	r1, r6
 8004db6:	f7fb ffc1 	bl	8000d3c <__aeabi_fmul>
 8004dba:	4601      	mov	r1, r0
 8004dbc:	9805      	ldr	r0, [sp, #20]
 8004dbe:	f7fb feb3 	bl	8000b28 <__aeabi_fsub>
        s2 *= recipNorm;
 8004dc2:	4639      	mov	r1, r7
        qDot2 -= AHRS->_beta * s1;
 8004dc4:	9005      	str	r0, [sp, #20]
        s2 *= recipNorm;
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	f7fb ffb8 	bl	8000d3c <__aeabi_fmul>
        qDot3 -= AHRS->_beta * s2;
 8004dcc:	4631      	mov	r1, r6
 8004dce:	f7fb ffb5 	bl	8000d3c <__aeabi_fmul>
 8004dd2:	4601      	mov	r1, r0
 8004dd4:	9806      	ldr	r0, [sp, #24]
 8004dd6:	f7fb fea7 	bl	8000b28 <__aeabi_fsub>
        s3 *= recipNorm;
 8004dda:	4639      	mov	r1, r7
        qDot3 -= AHRS->_beta * s2;
 8004ddc:	9006      	str	r0, [sp, #24]
        s3 *= recipNorm;
 8004dde:	4650      	mov	r0, sl
 8004de0:	f7fb ffac 	bl	8000d3c <__aeabi_fmul>
        qDot4 -= AHRS->_beta * s3;
 8004de4:	4631      	mov	r1, r6
 8004de6:	f7fb ffa9 	bl	8000d3c <__aeabi_fmul>
 8004dea:	4601      	mov	r1, r0
 8004dec:	9807      	ldr	r0, [sp, #28]
 8004dee:	f7fb fe9b 	bl	8000b28 <__aeabi_fsub>
 8004df2:	9007      	str	r0, [sp, #28]
    }

    /* Integrate rate of change of quaternion to yield quaternion */
    AHRS->_q0 += qDot1 * AHRS->_sampleRate;
 8004df4:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8004df8:	9804      	ldr	r0, [sp, #16]
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	f7fb ff9e 	bl	8000d3c <__aeabi_fmul>
 8004e00:	9901      	ldr	r1, [sp, #4]
 8004e02:	f7fb fe93 	bl	8000b2c <__addsf3>
    AHRS->_q1 += qDot2 * AHRS->_sampleRate;
 8004e06:	4631      	mov	r1, r6
    AHRS->_q0 += qDot1 * AHRS->_sampleRate;
 8004e08:	4607      	mov	r7, r0
    AHRS->_q1 += qDot2 * AHRS->_sampleRate;
 8004e0a:	9805      	ldr	r0, [sp, #20]
 8004e0c:	f7fb ff96 	bl	8000d3c <__aeabi_fmul>
 8004e10:	4629      	mov	r1, r5
 8004e12:	f7fb fe8b 	bl	8000b2c <__addsf3>
    AHRS->_q2 += qDot3 * AHRS->_sampleRate;
 8004e16:	4631      	mov	r1, r6
    AHRS->_q1 += qDot2 * AHRS->_sampleRate;
 8004e18:	4680      	mov	r8, r0
    AHRS->_q2 += qDot3 * AHRS->_sampleRate;
 8004e1a:	9806      	ldr	r0, [sp, #24]
 8004e1c:	f7fb ff8e 	bl	8000d3c <__aeabi_fmul>
 8004e20:	4621      	mov	r1, r4
 8004e22:	f7fb fe83 	bl	8000b2c <__addsf3>
    AHRS->_q3 += qDot4 * AHRS->_sampleRate;
 8004e26:	4631      	mov	r1, r6
    AHRS->_q2 += qDot3 * AHRS->_sampleRate;
 8004e28:	4681      	mov	r9, r0
    AHRS->_q3 += qDot4 * AHRS->_sampleRate;
 8004e2a:	9807      	ldr	r0, [sp, #28]
 8004e2c:	f7fb ff86 	bl	8000d3c <__aeabi_fmul>
 8004e30:	9900      	ldr	r1, [sp, #0]
 8004e32:	f7fb fe7b 	bl	8000b2c <__addsf3>

    /* Normalise quaternion */
    recipNorm = invSqrt(AHRS->_q0 * AHRS->_q0 + AHRS->_q1 * AHRS->_q1 + AHRS->_q2 * AHRS->_q2 + AHRS->_q3 * AHRS->_q3);
 8004e36:	4639      	mov	r1, r7
    AHRS->_q3 += qDot4 * AHRS->_sampleRate;
 8004e38:	4605      	mov	r5, r0
    recipNorm = invSqrt(AHRS->_q0 * AHRS->_q0 + AHRS->_q1 * AHRS->_q1 + AHRS->_q2 * AHRS->_q2 + AHRS->_q3 * AHRS->_q3);
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	f7fb ff7e 	bl	8000d3c <__aeabi_fmul>
 8004e40:	4641      	mov	r1, r8
 8004e42:	4604      	mov	r4, r0
 8004e44:	4640      	mov	r0, r8
 8004e46:	f7fb ff79 	bl	8000d3c <__aeabi_fmul>
 8004e4a:	4601      	mov	r1, r0
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f7fb fe6d 	bl	8000b2c <__addsf3>
 8004e52:	4649      	mov	r1, r9
 8004e54:	4604      	mov	r4, r0
 8004e56:	4648      	mov	r0, r9
 8004e58:	f7fb ff70 	bl	8000d3c <__aeabi_fmul>
 8004e5c:	4601      	mov	r1, r0
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f7fb fe64 	bl	8000b2c <__addsf3>
 8004e64:	4629      	mov	r1, r5
 8004e66:	4604      	mov	r4, r0
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f7fb ff67 	bl	8000d3c <__aeabi_fmul>
 8004e6e:	4601      	mov	r1, r0
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7fb fe5b 	bl	8000b2c <__addsf3>
 8004e76:	f7ff fba7 	bl	80045c8 <invSqrt>
 8004e7a:	4604      	mov	r4, r0
    AHRS->_q0 *= recipNorm;
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	4638      	mov	r0, r7
 8004e80:	f7fb ff5c 	bl	8000d3c <__aeabi_fmul>
    AHRS->_q1 *= recipNorm;
 8004e84:	4621      	mov	r1, r4
    AHRS->_q0 *= recipNorm;
 8004e86:	f8cb 0014 	str.w	r0, [fp, #20]
    AHRS->_q1 *= recipNorm;
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	f7fb ff56 	bl	8000d3c <__aeabi_fmul>
    AHRS->_q2 *= recipNorm;
 8004e90:	4621      	mov	r1, r4
    AHRS->_q1 *= recipNorm;
 8004e92:	f8cb 0018 	str.w	r0, [fp, #24]
    AHRS->_q2 *= recipNorm;
 8004e96:	4648      	mov	r0, r9
 8004e98:	f7fb ff50 	bl	8000d3c <__aeabi_fmul>
    AHRS->_q3 *= recipNorm;
 8004e9c:	4621      	mov	r1, r4
    AHRS->_q2 *= recipNorm;
 8004e9e:	f8cb 001c 	str.w	r0, [fp, #28]
    AHRS->_q3 *= recipNorm;
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f7fb ff4a 	bl	8000d3c <__aeabi_fmul>
 8004ea8:	f8cb 0020 	str.w	r0, [fp, #32]

    /* Calculate new angles */
    calculateAngles(AHRS);
 8004eac:	4658      	mov	r0, fp
}
 8004eae:	b013      	add	sp, #76	; 0x4c
 8004eb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    calculateAngles(AHRS);
 8004eb4:	f7ff bbb4 	b.w	8004620 <calculateAngles>

08004eb8 <computeIMU>:
  imu.AHRS[ROLL]  *= 180.0f / AHRSIMU_PI;

}

void computeIMU(void)
{
 8004eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
//  uint8_t DATA[0];
//  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_STATUS, 1, DATA, 1);
//  if(DATA[0] & 0x01){
	Gyro_getADC();
 8004eba:	f000 fe41 	bl	8005b40 <Gyro_getADC>
  ACC_getADC();
 8004ebe:	f000 fecb 	bl	8005c58 <ACC_getADC>
  Mag_getADC();                                               //Read the raw acc and gyro data from the MPU-6050
 8004ec2:	f000 ff19 	bl	8005cf8 <Mag_getADC>
  CAL_Heading();
 8004ec6:	f000 ffaf 	bl	8005e28 <CAL_Heading>
	Temp_getADC();
 8004eca:	f001 f897 	bl	8005ffc <Temp_getADC>
		#endif
	
#ifdef IMU_AHRS
    /* Call update function */
    /* This function must be called periodically in inteervals set by sample rate on initialization process */
	TM_AHRSIMU_UpdateIMU(&AHRS, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW]);
 8004ece:	4908      	ldr	r1, [pc, #32]	; (8004ef0 <computeIMU+0x38>)
 8004ed0:	4808      	ldr	r0, [pc, #32]	; (8004ef4 <computeIMU+0x3c>)
 8004ed2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004ed4:	9302      	str	r3, [sp, #8]
 8004ed6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8004ee0:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8004ee2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004ee4:	f7ff fd46 	bl	8004974 <TM_AHRSIMU_UpdateIMU>
	//TM_AHRSIMU_UpdateAHRS(&AHRSIMU, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW]);
#endif
}
 8004ee8:	b005      	add	sp, #20
 8004eea:	f85d fb04 	ldr.w	pc, [sp], #4
 8004eee:	bf00      	nop
 8004ef0:	20001030 	.word	0x20001030
 8004ef4:	20000b84 	.word	0x20000b84

08004ef8 <error_signal>:
uint32_t flight_mode_timer, headfree_mode_timer;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the error LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void error_signal(void) {
 8004ef8:	b538      	push	{r3, r4, r5, lr}
  if (Error.error >= 100) {RGB_R_ON;}                                                         //When the error is 100 the LED is always on.
 8004efa:	4c1b      	ldr	r4, [pc, #108]	; (8004f68 <error_signal+0x70>)
 8004efc:	7823      	ldrb	r3, [r4, #0]
 8004efe:	2b63      	cmp	r3, #99	; 0x63
 8004f00:	d907      	bls.n	8004f12 <error_signal+0x1a>
      RGB_R_OFF;                                                                        //Turn the LED off.
      Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
    }
  }
}
 8004f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (Error.error >= 100) {RGB_R_ON;}                                                         //When the error is 100 the LED is always on.
 8004f06:	2200      	movs	r2, #0
 8004f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f0c:	4817      	ldr	r0, [pc, #92]	; (8004f6c <error_signal+0x74>)
 8004f0e:	f7fd b821 	b.w	8001f54 <HAL_GPIO_WritePin>
  else if (Error.error_timer < millis()) {                                                       //If the error_timer value is smaller that the millis() function.
 8004f12:	6865      	ldr	r5, [r4, #4]
 8004f14:	f003 fac2 	bl	800849c <millis>
 8004f18:	4285      	cmp	r5, r0
 8004f1a:	d218      	bcs.n	8004f4e <error_signal+0x56>
    Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 8004f1c:	f003 fabe 	bl	800849c <millis>
    if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 8004f20:	7823      	ldrb	r3, [r4, #0]
    Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 8004f22:	30fa      	adds	r0, #250	; 0xfa
 8004f24:	6060      	str	r0, [r4, #4]
    if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 8004f26:	b12b      	cbz	r3, 8004f34 <error_signal+0x3c>
 8004f28:	7861      	ldrb	r1, [r4, #1]
 8004f2a:	1cda      	adds	r2, r3, #3
 8004f2c:	4291      	cmp	r1, r2
 8004f2e:	bfc4      	itt	gt
 8004f30:	2200      	movgt	r2, #0
 8004f32:	7062      	strbgt	r2, [r4, #1]
    if (Error.error_counter < Error.error && Error.error_led == 0 && Error.error > 0) {                            //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8004f34:	7862      	ldrb	r2, [r4, #1]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d20a      	bcs.n	8004f50 <error_signal+0x58>
 8004f3a:	78a2      	ldrb	r2, [r4, #2]
 8004f3c:	b942      	cbnz	r2, 8004f50 <error_signal+0x58>
 8004f3e:	b13b      	cbz	r3, 8004f50 <error_signal+0x58>
      RGB_R_ON;                                                                       //Turn the LED on.
 8004f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f44:	4809      	ldr	r0, [pc, #36]	; (8004f6c <error_signal+0x74>)
 8004f46:	f7fd f805 	bl	8001f54 <HAL_GPIO_WritePin>
      Error.error_led = 1;                                                                       //Set the LED flag to indicate that the LED is on.
 8004f4a:	2301      	movs	r3, #1
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 8004f4c:	70a3      	strb	r3, [r4, #2]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
      RGB_R_OFF;                                                                        //Turn the LED off.
 8004f50:	2201      	movs	r2, #1
 8004f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f56:	4805      	ldr	r0, [pc, #20]	; (8004f6c <error_signal+0x74>)
 8004f58:	f7fc fffc 	bl	8001f54 <HAL_GPIO_WritePin>
      Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
 8004f5c:	7863      	ldrb	r3, [r4, #1]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	7063      	strb	r3, [r4, #1]
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 8004f62:	2300      	movs	r3, #0
 8004f64:	e7f2      	b.n	8004f4c <error_signal+0x54>
 8004f66:	bf00      	nop
 8004f68:	200013d0 	.word	0x200013d0
 8004f6c:	40010c00 	.word	0x40010c00

08004f70 <flight_mode_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the flight mode LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void flight_mode_signal(void) {
 8004f70:	b538      	push	{r3, r4, r5, lr}
  if (flight_mode_timer < millis()) {                                                      //If the error_timer value is smaller that the millis() function.
 8004f72:	f003 fa93 	bl	800849c <millis>
 8004f76:	4c2e      	ldr	r4, [pc, #184]	; (8005030 <flight_mode_signal+0xc0>)
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	4298      	cmp	r0, r3
 8004f7c:	d91d      	bls.n	8004fba <flight_mode_signal+0x4a>
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004f7e:	f003 fa8d 	bl	800849c <millis>
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004f82:	4b2c      	ldr	r3, [pc, #176]	; (8005034 <flight_mode_signal+0xc4>)
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004f84:	30fa      	adds	r0, #250	; 0xfa
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004f86:	785b      	ldrb	r3, [r3, #1]
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004f88:	6020      	str	r0, [r4, #0]
 8004f8a:	4c2b      	ldr	r4, [pc, #172]	; (8005038 <flight_mode_signal+0xc8>)
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004f8c:	b13b      	cbz	r3, 8004f9e <flight_mode_signal+0x2e>
 8004f8e:	4a2b      	ldr	r2, [pc, #172]	; (800503c <flight_mode_signal+0xcc>)
 8004f90:	7821      	ldrb	r1, [r4, #0]
 8004f92:	7812      	ldrb	r2, [r2, #0]
 8004f94:	3203      	adds	r2, #3
 8004f96:	4291      	cmp	r1, r2
 8004f98:	bfc4      	itt	gt
 8004f9a:	2200      	movgt	r2, #0
 8004f9c:	7022      	strbgt	r2, [r4, #0]
    if (flight_mode_counter < f.ARMED && flight_mode_led == 0 && f.ARMED > 0) {    //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8004f9e:	7822      	ldrb	r2, [r4, #0]
 8004fa0:	4d27      	ldr	r5, [pc, #156]	; (8005040 <flight_mode_signal+0xd0>)
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d22e      	bcs.n	8005004 <flight_mode_signal+0x94>
 8004fa6:	782a      	ldrb	r2, [r5, #0]
 8004fa8:	bb62      	cbnz	r2, 8005004 <flight_mode_signal+0x94>
 8004faa:	b35b      	cbz	r3, 8005004 <flight_mode_signal+0x94>
      RGB_G_ON;                                                                     //Turn the LED on.
 8004fac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fb0:	4824      	ldr	r0, [pc, #144]	; (8005044 <flight_mode_signal+0xd4>)
 8004fb2:	f7fc ffcf 	bl	8001f54 <HAL_GPIO_WritePin>
      flight_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8004fb6:	2301      	movs	r3, #1
    }
    else {                                                                                 //If the error flash sequence isn't finisched (error_counter < error) and the LED is on.
      RGB_G_OFF;                                                                      //Turn the LED off.
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8004fb8:	702b      	strb	r3, [r5, #0]
    }
  }

  if (headfree_mode_timer < millis()) {                                                      //If the error_timer value is smaller that the millis() function.
 8004fba:	f003 fa6f 	bl	800849c <millis>
 8004fbe:	4c22      	ldr	r4, [pc, #136]	; (8005048 <flight_mode_signal+0xd8>)
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	4298      	cmp	r0, r3
 8004fc4:	d91d      	bls.n	8005002 <flight_mode_signal+0x92>
    headfree_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004fc6:	f003 fa69 	bl	800849c <millis>
    if (f.HEADFREE_MODE > 0 && headfree_mode_counter > flight_mode + 3) headfree_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004fca:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <flight_mode_signal+0xc4>)
    headfree_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004fcc:	30fa      	adds	r0, #250	; 0xfa
    if (f.HEADFREE_MODE > 0 && headfree_mode_counter > flight_mode + 3) headfree_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004fce:	7b1b      	ldrb	r3, [r3, #12]
    headfree_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004fd0:	6020      	str	r0, [r4, #0]
 8004fd2:	4c1e      	ldr	r4, [pc, #120]	; (800504c <flight_mode_signal+0xdc>)
    if (f.HEADFREE_MODE > 0 && headfree_mode_counter > flight_mode + 3) headfree_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004fd4:	b13b      	cbz	r3, 8004fe6 <flight_mode_signal+0x76>
 8004fd6:	4a19      	ldr	r2, [pc, #100]	; (800503c <flight_mode_signal+0xcc>)
 8004fd8:	7821      	ldrb	r1, [r4, #0]
 8004fda:	7812      	ldrb	r2, [r2, #0]
 8004fdc:	3203      	adds	r2, #3
 8004fde:	4291      	cmp	r1, r2
 8004fe0:	bfc4      	itt	gt
 8004fe2:	2200      	movgt	r2, #0
 8004fe4:	7022      	strbgt	r2, [r4, #0]
    if (headfree_mode_counter < f.HEADFREE_MODE && headfree_mode_led == 0 && f.HEADFREE_MODE > 0) {    //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8004fe6:	7822      	ldrb	r2, [r4, #0]
 8004fe8:	4d19      	ldr	r5, [pc, #100]	; (8005050 <flight_mode_signal+0xe0>)
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d215      	bcs.n	800501a <flight_mode_signal+0xaa>
 8004fee:	782a      	ldrb	r2, [r5, #0]
 8004ff0:	b99a      	cbnz	r2, 800501a <flight_mode_signal+0xaa>
 8004ff2:	b193      	cbz	r3, 800501a <flight_mode_signal+0xaa>
      RGB_B_ON;                                                                     //Turn the LED on.
 8004ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ff8:	4812      	ldr	r0, [pc, #72]	; (8005044 <flight_mode_signal+0xd4>)
 8004ffa:	f7fc ffab 	bl	8001f54 <HAL_GPIO_WritePin>
      headfree_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8004ffe:	2301      	movs	r3, #1
    }
    else {                                                                                 //If the error flash sequence isn't finisched (error_counter < error) and the LED is on.
      RGB_B_OFF;                                                                      //Turn the LED off.
      headfree_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
      headfree_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8005000:	702b      	strb	r3, [r5, #0]
 8005002:	bd38      	pop	{r3, r4, r5, pc}
      RGB_G_OFF;                                                                      //Turn the LED off.
 8005004:	2201      	movs	r2, #1
 8005006:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800500a:	480e      	ldr	r0, [pc, #56]	; (8005044 <flight_mode_signal+0xd4>)
 800500c:	f7fc ffa2 	bl	8001f54 <HAL_GPIO_WritePin>
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8005010:	7823      	ldrb	r3, [r4, #0]
 8005012:	3301      	adds	r3, #1
 8005014:	7023      	strb	r3, [r4, #0]
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8005016:	2300      	movs	r3, #0
 8005018:	e7ce      	b.n	8004fb8 <flight_mode_signal+0x48>
      RGB_B_OFF;                                                                      //Turn the LED off.
 800501a:	2201      	movs	r2, #1
 800501c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005020:	4808      	ldr	r0, [pc, #32]	; (8005044 <flight_mode_signal+0xd4>)
 8005022:	f7fc ff97 	bl	8001f54 <HAL_GPIO_WritePin>
      headfree_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8005026:	7823      	ldrb	r3, [r4, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	7023      	strb	r3, [r4, #0]
      headfree_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 800502c:	2300      	movs	r3, #0
 800502e:	e7e7      	b.n	8005000 <flight_mode_signal+0x90>
 8005030:	20000bb0 	.word	0x20000bb0
 8005034:	20000ed4 	.word	0x20000ed4
 8005038:	20000bad 	.word	0x20000bad
 800503c:	20000bb8 	.word	0x20000bb8
 8005040:	20000bac 	.word	0x20000bac
 8005044:	40010c00 	.word	0x40010c00
 8005048:	20000bb4 	.word	0x20000bb4
 800504c:	20000bba 	.word	0x20000bba
 8005050:	20000bb9 	.word	0x20000bb9

08005054 <mixerInit>:
    { 4, 0, mixerQuadP },          // MULTITYPE_QUADP
    { 4, 0, mixerQuadX },          // MULTITYPE_QUADX
};

void mixerInit(void)
{
 8005054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005056:	2400      	movs	r4, #0
	int i;
    for (i = 0; i < 4; i++)
	  {
			#ifdef QUAD_X
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 8005058:	4f05      	ldr	r7, [pc, #20]	; (8005070 <mixerInit+0x1c>)
 800505a:	4e06      	ldr	r6, [pc, #24]	; (8005074 <mixerInit+0x20>)
 800505c:	193d      	adds	r5, r7, r4
 800505e:	1933      	adds	r3, r6, r4
 8005060:	3410      	adds	r4, #16
    for (i = 0; i < 4; i++)
 8005062:	2c40      	cmp	r4, #64	; 0x40
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 8005064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005066:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for (i = 0; i < 4; i++)
 800506a:	d1f7      	bne.n	800505c <mixerInit+0x8>
			#endif
			#ifdef QUAD_P
      currentMixer[i] = mixers[QuadP].motor[i];   //0 = QuadP, 1 = QuadX
			#endif
		}
}
 800506c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800506e:	bf00      	nop
 8005070:	200006bc 	.word	0x200006bc
 8005074:	0800fcdc 	.word	0x0800fcdc

08005078 <mixTable>:
test_t test;

void mixTable(void)
{
	uint8_t i = 0;
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 8005078:	4b35      	ldr	r3, [pc, #212]	; (8005150 <mixTable+0xd8>)
{
 800507a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 800507e:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
{
 8005082:	b085      	sub	sp, #20
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 8005084:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
 8005088:	bfc4      	itt	gt
 800508a:	f44f 62e1 	movgt.w	r2, #1800	; 0x708
 800508e:	f8a3 2056 	strhgt.w	r2, [r3, #86]	; 0x56
			for (i = 0; i < 4; i++){
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8005092:	f9b3 9056 	ldrsh.w	r9, [r3, #86]	; 0x56
        motor[i] += ( ( (int32_t)(motor[i]-1000) * (int32_t)g[v] ) )/ 500;
      #endif
		}
  #endif

	if(motor[i] <    0) motor[i] = 0;
 8005096:	f04f 0a00 	mov.w	sl, #0
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 800509a:	4648      	mov	r0, r9
 800509c:	f7fb fdfa 	bl	8000c94 <__aeabi_i2f>
	if(motor[i] > 2000) motor[i] = 2000;

	if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0){
 80050a0:	4b2c      	ldr	r3, [pc, #176]	; (8005154 <mixTable+0xdc>)
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 80050a2:	4683      	mov	fp, r0
	if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0){
 80050a4:	785b      	ldrb	r3, [r3, #1]
		motor[i] = 0;
		pid.output1[i] = 0;
 80050a6:	2700      	movs	r7, #0
	if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0){
 80050a8:	9301      	str	r3, [sp, #4]
	if(motor[i] > 2000) motor[i] = 2000;
 80050aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80050ae:	4d2a      	ldr	r5, [pc, #168]	; (8005158 <mixTable+0xe0>)
 80050b0:	4c2a      	ldr	r4, [pc, #168]	; (800515c <mixTable+0xe4>)
 80050b2:	4e2b      	ldr	r6, [pc, #172]	; (8005160 <mixTable+0xe8>)
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 80050b4:	f1a5 087c 	sub.w	r8, r5, #124	; 0x7c
 80050b8:	6861      	ldr	r1, [r4, #4]
 80050ba:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
 80050be:	9303      	str	r3, [sp, #12]
 80050c0:	f7fb fe3c 	bl	8000d3c <__aeabi_fmul>
 80050c4:	6821      	ldr	r1, [r4, #0]
 80050c6:	9002      	str	r0, [sp, #8]
 80050c8:	4658      	mov	r0, fp
 80050ca:	f7fb fe37 	bl	8000d3c <__aeabi_fmul>
 80050ce:	9a02      	ldr	r2, [sp, #8]
 80050d0:	4601      	mov	r1, r0
 80050d2:	4610      	mov	r0, r2
 80050d4:	f7fb fd2a 	bl	8000b2c <__addsf3>
 80050d8:	68a1      	ldr	r1, [r4, #8]
 80050da:	9002      	str	r0, [sp, #8]
 80050dc:	f8d8 00ec 	ldr.w	r0, [r8, #236]	; 0xec
 80050e0:	f7fb fe2c 	bl	8000d3c <__aeabi_fmul>
 80050e4:	9a02      	ldr	r2, [sp, #8]
 80050e6:	4601      	mov	r1, r0
 80050e8:	4610      	mov	r0, r2
 80050ea:	f7fb fd1f 	bl	8000b2c <__addsf3>
 80050ee:	68e1      	ldr	r1, [r4, #12]
 80050f0:	9002      	str	r0, [sp, #8]
 80050f2:	f8d8 00f0 	ldr.w	r0, [r8, #240]	; 0xf0
 80050f6:	f7fb fe21 	bl	8000d3c <__aeabi_fmul>
 80050fa:	9a02      	ldr	r2, [sp, #8]
 80050fc:	4601      	mov	r1, r0
 80050fe:	4610      	mov	r0, r2
 8005100:	f7fb fd14 	bl	8000b2c <__addsf3>
 8005104:	f7fb fff6 	bl	80010f4 <__aeabi_f2iz>
 8005108:	b200      	sxth	r0, r0
	if(motor[i] <    0) motor[i] = 0;
 800510a:	2800      	cmp	r0, #0
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 800510c:	bfac      	ite	ge
 800510e:	8030      	strhge	r0, [r6, #0]
	if(motor[i] <    0) motor[i] = 0;
 8005110:	f8a6 a000 	strhlt.w	sl, [r6]
	if(motor[i] > 2000) motor[i] = 2000;
 8005114:	f9b6 2000 	ldrsh.w	r2, [r6]
	if(motor[i] <    0) motor[i] = 0;
 8005118:	9b03      	ldr	r3, [sp, #12]
	if(motor[i] > 2000) motor[i] = 2000;
 800511a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800511e:	bfc8      	it	gt
 8005120:	8033      	strhgt	r3, [r6, #0]
	if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0){
 8005122:	f1b9 0fc7 	cmp.w	r9, #199	; 0xc7
 8005126:	dd01      	ble.n	800512c <mixTable+0xb4>
 8005128:	9a01      	ldr	r2, [sp, #4]
 800512a:	b932      	cbnz	r2, 800513a <mixTable+0xc2>
		motor[i] = 0;
 800512c:	f8a6 a000 	strh.w	sl, [r6]
		pid.output1[i] = 0;
 8005130:	662f      	str	r7, [r5, #96]	; 0x60
		pid.output2[i] = 0;
 8005132:	66ef      	str	r7, [r5, #108]	; 0x6c
		pid.Iterm[i] = 0;
 8005134:	602f      	str	r7, [r5, #0]
		pid.Iterm1[i] = 0;
 8005136:	60ef      	str	r7, [r5, #12]
		pid.Iterm2[i] = 0;
 8005138:	61af      	str	r7, [r5, #24]
			for (i = 0; i < 4; i++){
 800513a:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <mixTable+0xec>)
 800513c:	3410      	adds	r4, #16
 800513e:	42a2      	cmp	r2, r4
 8005140:	f106 0602 	add.w	r6, r6, #2
 8005144:	f105 0504 	add.w	r5, r5, #4
 8005148:	d1b6      	bne.n	80050b8 <mixTable+0x40>
	}
	}
}
 800514a:	b005      	add	sp, #20
 800514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005150:	20000f4c 	.word	0x20000f4c
 8005154:	20000ed4 	.word	0x20000ed4
 8005158:	20000c44 	.word	0x20000c44
 800515c:	200006bc 	.word	0x200006bc
 8005160:	20000bbe 	.word	0x20000bbe
 8005164:	200006fc 	.word	0x200006fc

08005168 <PIDControlInit>:

	pid->ki[ROLL]  = 5.0f;
	pid->ki[PITCH] = pid->ki[ROLL];
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5

	pid->kd[ROLL]  = 4.0f;
 8005168:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800516c:	64c2      	str	r2, [r0, #76]	; 0x4c
	pid->kd[PITCH] = pid->kd[ROLL];
 800516e:	6502      	str	r2, [r0, #80]	; 0x50
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
///////////////////////////////////	
	pid->kp1[ROLL] = 1.0f;
 8005170:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	pid->ts = 0.004f;
 8005174:	4b31      	ldr	r3, [pc, #196]	; (800523c <PIDControlInit+0xd4>)
	pid->kp1[ROLL] = 1.0f;
 8005176:	6102      	str	r2, [r0, #16]
	pid->ts = 0.004f;
 8005178:	6003      	str	r3, [r0, #0]
	pid->kp[ROLL]  = 15.0f;
 800517a:	4b31      	ldr	r3, [pc, #196]	; (8005240 <PIDControlInit+0xd8>)
	pid->kp1[PITCH] = 1.0f;
 800517c:	6142      	str	r2, [r0, #20]
	pid->kp[ROLL]  = 15.0f;
 800517e:	6043      	str	r3, [r0, #4]
	pid->kp[PITCH] = pid->kp[ROLL];
 8005180:	6083      	str	r3, [r0, #8]
	pid->ki[ROLL]  = 5.0f;
 8005182:	4b30      	ldr	r3, [pc, #192]	; (8005244 <PIDControlInit+0xdc>)
	pid->kp1[YAW] = 1.0f;
 8005184:	6182      	str	r2, [r0, #24]
	pid->ki[ROLL]  = 5.0f;
 8005186:	6283      	str	r3, [r0, #40]	; 0x28
	pid->ki[PITCH] = pid->ki[ROLL];
 8005188:	62c3      	str	r3, [r0, #44]	; 0x2c
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5
 800518a:	6303      	str	r3, [r0, #48]	; 0x30

	pid->ki1[ROLL] = 2.0f;
	pid->ki1[PITCH] = 2.0f;
	pid->ki1[YAW] = 2.0f;
/////////////////////////////////
	pid->kp2[ROLL] = 5.0f;
 800518c:	61c3      	str	r3, [r0, #28]
	pid->kp2[PITCH] = 5.0f;
 800518e:	6203      	str	r3, [r0, #32]
	pid->kp2[YAW] = 5.0f;
 8005190:	6243      	str	r3, [r0, #36]	; 0x24

	pid->kd2[ROLL] = 3.0f;
	pid->kd2[PITCH] = 3.0f;
	pid->kd2[YAW] = 3.0f;
////////////////////////////////////////
  pid->i1_limit[ROLL] = 5.0f;
 8005192:	6643      	str	r3, [r0, #100]	; 0x64
	pid->i1_limit[PITCH] = 5.0f;
 8005194:	6683      	str	r3, [r0, #104]	; 0x68
	pid->i1_limit[YAW] = 10.0f;

  pid->i2_limit[ROLL] = 500.0f;
 8005196:	4b2c      	ldr	r3, [pc, #176]	; (8005248 <PIDControlInit+0xe0>)
	pid->ki1[ROLL] = 2.0f;
 8005198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  pid->i2_limit[ROLL] = 500.0f;
 800519c:	6703      	str	r3, [r0, #112]	; 0x70
	pid->i2_limit[PITCH] = 500.0f;
 800519e:	6743      	str	r3, [r0, #116]	; 0x74
	pid->i2_limit[YAW] = 500.0f;
 80051a0:	6783      	str	r3, [r0, #120]	; 0x78

	pid->Iterm[ROLL] = 0.0f ;
 80051a2:	2300      	movs	r3, #0
{
 80051a4:	b510      	push	{r4, lr}
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 80051a6:	4929      	ldr	r1, [pc, #164]	; (800524c <PIDControlInit+0xe4>)
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 80051a8:	4c29      	ldr	r4, [pc, #164]	; (8005250 <PIDControlInit+0xe8>)
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 80051aa:	6541      	str	r1, [r0, #84]	; 0x54
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 80051ac:	60c4      	str	r4, [r0, #12]
	pid->ki1[ROLL] = 2.0f;
 80051ae:	6342      	str	r2, [r0, #52]	; 0x34
	pid->ki1[PITCH] = 2.0f;
 80051b0:	6382      	str	r2, [r0, #56]	; 0x38
	pid->ki1[YAW] = 2.0f;
 80051b2:	63c2      	str	r2, [r0, #60]	; 0x3c
  pid->ki2[ROLL] = 2.0f;
 80051b4:	6402      	str	r2, [r0, #64]	; 0x40
	pid->ki2[PITCH] = 2.0f;
 80051b6:	6442      	str	r2, [r0, #68]	; 0x44
	pid->ki2[YAW] = 2.0f;
 80051b8:	6482      	str	r2, [r0, #72]	; 0x48
	pid->kd2[ROLL] = 3.0f;
 80051ba:	6581      	str	r1, [r0, #88]	; 0x58
	pid->kd2[PITCH] = 3.0f;
 80051bc:	65c1      	str	r1, [r0, #92]	; 0x5c
	pid->kd2[YAW] = 3.0f;
 80051be:	6601      	str	r1, [r0, #96]	; 0x60
	pid->i1_limit[YAW] = 10.0f;
 80051c0:	66c4      	str	r4, [r0, #108]	; 0x6c
	pid->Iterm[ROLL] = 0.0f ;
 80051c2:	67c3      	str	r3, [r0, #124]	; 0x7c
	pid->Iterm[PITCH] = 0.0f;
 80051c4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	pid->Iterm[YAW] = 0.0f;
 80051c8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

	pid->Iterm1[ROLL] = 0.0f ;
 80051cc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	pid->Iterm1[PITCH] = 0.0f;
 80051d0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
	pid->Iterm1[YAW] = 0.0f;
 80051d4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90

	pid->Iterm2[ROLL] = 0.0f ;
 80051d8:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	pid->Iterm2[PITCH] = 0.0f;
 80051dc:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	pid->Iterm2[YAW] = 0.0f;
 80051e0:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c

	pid->dInput[ROLL] = 0.0f ;
 80051e4:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	pid->dInput[PITCH] = 0.0f;
 80051e8:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	pid->dInput[YAW] = 0.0f;
 80051ec:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8

	pid->error[ROLL] = 0.0f ;
 80051f0:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
	pid->error[PITCH] = 0.0f;
 80051f4:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	pid->error[YAW] = 0.0f;
 80051f8:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	pid->pre_error[ROLL] = 0.0f ;
 80051fc:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	pid->pre_error[PITCH] = 0.0f;
 8005200:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	pid->pre_error[YAW] = 0.0f;
 8005204:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0

	pid->pre_deriv[ROLL] = 0.0f ;
 8005208:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	pid->pre_deriv[PITCH] = 0.0f;
 800520c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	pid->pre_deriv[YAW] = 0.0f;
 8005210:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc

	pid->lastInput[ROLL] = 0.0f ;
 8005214:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	pid->lastInput[PITCH] = 0.0f;
 8005218:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	pid->lastInput[YAW] = 0.0f;
 800521c:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	pid->output1[ROLL] = 0.0f ;
 8005220:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	pid->output1[PITCH] = 0.0f;
 8005224:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
	pid->output1[YAW] = 0.0f;
 8005228:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

	pid->output2[ROLL] = 0.0f ;
 800522c:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
	pid->output2[PITCH] = 0.0f;
 8005230:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
	pid->output2[YAW] = 0.0f;
 8005234:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 8005238:	bd10      	pop	{r4, pc}
 800523a:	bf00      	nop
 800523c:	3b83126f 	.word	0x3b83126f
 8005240:	41700000 	.word	0x41700000
 8005244:	40a00000 	.word	0x40a00000
 8005248:	43fa0000 	.word	0x43fa0000
 800524c:	40400000 	.word	0x40400000
 8005250:	41200000 	.word	0x41200000

08005254 <Control>:
}

int16_t  magHold,headFreeModeHold; // [-180;+180]

void Control(void)
{
 8005254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dt_recip = 1/pid.ts;
 8005258:	4cb2      	ldr	r4, [pc, #712]	; (8005524 <Control+0x2d0>)
 800525a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800525e:	6826      	ldr	r6, [r4, #0]
	if(!f.ARMED){
 8005260:	4db1      	ldr	r5, [pc, #708]	; (8005528 <Control+0x2d4>)
	dt_recip = 1/pid.ts;
 8005262:	4631      	mov	r1, r6
 8005264:	f7fb fe1e 	bl	8000ea4 <__aeabi_fdiv>
 8005268:	4bb0      	ldr	r3, [pc, #704]	; (800552c <Control+0x2d8>)
	if(!f.ARMED){
 800526a:	786a      	ldrb	r2, [r5, #1]
	dt_recip = 1/pid.ts;
 800526c:	6018      	str	r0, [r3, #0]
 800526e:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8005544 <Control+0x2f0>
	if(!f.ARMED){
 8005272:	b92a      	cbnz	r2, 8005280 <Control+0x2c>
	  headFreeModeHold = imu.actual_compass_heading;
 8005274:	f8d8 009c 	ldr.w	r0, [r8, #156]	; 0x9c
 8005278:	f7fb ff3c 	bl	80010f4 <__aeabi_f2iz>
 800527c:	4bac      	ldr	r3, [pc, #688]	; (8005530 <Control+0x2dc>)
 800527e:	8018      	strh	r0, [r3, #0]
	}

#if defined(HEADFREE)
  if(f.HEADFREE_MODE) { //to optimize
 8005280:	7b2b      	ldrb	r3, [r5, #12]
 8005282:	4fac      	ldr	r7, [pc, #688]	; (8005534 <Control+0x2e0>)
 8005284:	2b00      	cmp	r3, #0
 8005286:	d041      	beq.n	800530c <Control+0xb8>
    float radDiff = (imu.actual_compass_heading - headFreeModeHold) * 0.0174533f; // where PI/180 ~= 0.0174533
 8005288:	4ba9      	ldr	r3, [pc, #676]	; (8005530 <Control+0x2dc>)
 800528a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800528e:	f7fb fd01 	bl	8000c94 <__aeabi_i2f>
 8005292:	4601      	mov	r1, r0
 8005294:	f8d8 009c 	ldr.w	r0, [r8, #156]	; 0x9c
 8005298:	f7fb fc46 	bl	8000b28 <__aeabi_fsub>
 800529c:	49a6      	ldr	r1, [pc, #664]	; (8005538 <Control+0x2e4>)
 800529e:	f7fb fd4d 	bl	8000d3c <__aeabi_fmul>
 80052a2:	4605      	mov	r5, r0
    float cosDiff = cosf(radDiff);
 80052a4:	f006 fefe 	bl	800c0a4 <cosf>
 80052a8:	4682      	mov	sl, r0
    float sinDiff = sinf(radDiff);
 80052aa:	4628      	mov	r0, r5
 80052ac:	f006 ff2e 	bl	800c10c <sinf>
 80052b0:	4605      	mov	r5, r0
    int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 80052b2:	f9b7 0052 	ldrsh.w	r0, [r7, #82]	; 0x52
 80052b6:	f7fb fced 	bl	8000c94 <__aeabi_i2f>
 80052ba:	4683      	mov	fp, r0
 80052bc:	f9b7 0050 	ldrsh.w	r0, [r7, #80]	; 0x50
 80052c0:	f7fb fce8 	bl	8000c94 <__aeabi_i2f>
    RC.rcCommand[ROLL] =  RC.rcCommand[ROLL]*cosDiff - RC.rcCommand[PITCH]*sinDiff;
 80052c4:	4601      	mov	r1, r0
    int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 80052c6:	4681      	mov	r9, r0
    RC.rcCommand[ROLL] =  RC.rcCommand[ROLL]*cosDiff - RC.rcCommand[PITCH]*sinDiff;
 80052c8:	4650      	mov	r0, sl
 80052ca:	f7fb fd37 	bl	8000d3c <__aeabi_fmul>
 80052ce:	4659      	mov	r1, fp
 80052d0:	9001      	str	r0, [sp, #4]
 80052d2:	4628      	mov	r0, r5
 80052d4:	f7fb fd32 	bl	8000d3c <__aeabi_fmul>
 80052d8:	9b01      	ldr	r3, [sp, #4]
 80052da:	4601      	mov	r1, r0
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fb fc23 	bl	8000b28 <__aeabi_fsub>
 80052e2:	f7fb ff07 	bl	80010f4 <__aeabi_f2iz>
    int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 80052e6:	4659      	mov	r1, fp
    RC.rcCommand[ROLL] =  RC.rcCommand[ROLL]*cosDiff - RC.rcCommand[PITCH]*sinDiff;
 80052e8:	f8a7 0050 	strh.w	r0, [r7, #80]	; 0x50
    int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 80052ec:	4650      	mov	r0, sl
 80052ee:	f7fb fd25 	bl	8000d3c <__aeabi_fmul>
 80052f2:	4649      	mov	r1, r9
 80052f4:	4682      	mov	sl, r0
 80052f6:	4628      	mov	r0, r5
 80052f8:	f7fb fd20 	bl	8000d3c <__aeabi_fmul>
 80052fc:	4601      	mov	r1, r0
 80052fe:	4650      	mov	r0, sl
 8005300:	f7fb fc14 	bl	8000b2c <__addsf3>
 8005304:	f7fb fef6 	bl	80010f4 <__aeabi_f2iz>
 8005308:	f8a7 0052 	strh.w	r0, [r7, #82]	; 0x52
		if(pid.output2[axis] < -OUT_MAX) pid.output2[axis] = -OUT_MAX;
		}
		#endif
		
#ifdef PID_NORMAL
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.AHRS[ROLL];
 800530c:	f8d8 907c 	ldr.w	r9, [r8, #124]	; 0x7c
 8005310:	f9b7 0050 	ldrsh.w	r0, [r7, #80]	; 0x50
 8005314:	f7fb fcbe 	bl	8000c94 <__aeabi_i2f>
 8005318:	4649      	mov	r1, r9
 800531a:	f7fb fc05 	bl	8000b28 <__aeabi_fsub>
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 800531e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.AHRS[ROLL];
 8005320:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
 8005324:	4683      	mov	fp, r0
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 8005326:	f7fb fd09 	bl	8000d3c <__aeabi_fmul>
 800532a:	4631      	mov	r1, r6
 800532c:	f7fb fd06 	bl	8000d3c <__aeabi_fmul>
 8005330:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005332:	f7fb fbfb 	bl	8000b2c <__addsf3>
	  if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 8005336:	4d81      	ldr	r5, [pc, #516]	; (800553c <Control+0x2e8>)
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 8005338:	4682      	mov	sl, r0
	  if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 800533a:	4629      	mov	r1, r5
 800533c:	f7fb feba 	bl	80010b4 <__aeabi_fcmpgt>
 8005340:	2800      	cmp	r0, #0
 8005342:	f000 80af 	beq.w	80054a4 <Control+0x250>
 8005346:	67e5      	str	r5, [r4, #124]	; 0x7c
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
	  pid.dInput[ROLL] = (imu.AHRS[ROLL] - pid.lastInput[ROLL])  / pid.ts;
 8005348:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 800534c:	4648      	mov	r0, r9
 800534e:	f7fb fbeb 	bl	8000b28 <__aeabi_fsub>
 8005352:	4631      	mov	r1, r6
 8005354:	f7fb fda6 	bl	8000ea4 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8005358:	6861      	ldr	r1, [r4, #4]
	  pid.dInput[ROLL] = (imu.AHRS[ROLL] - pid.lastInput[ROLL])  / pid.ts;
 800535a:	4682      	mov	sl, r0
 800535c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8005360:	4658      	mov	r0, fp
 8005362:	f7fb fceb 	bl	8000d3c <__aeabi_fmul>
 8005366:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005368:	f7fb fbe0 	bl	8000b2c <__addsf3>
 800536c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800536e:	4683      	mov	fp, r0
 8005370:	4650      	mov	r0, sl
 8005372:	f7fb fce3 	bl	8000d3c <__aeabi_fmul>
 8005376:	4601      	mov	r1, r0
 8005378:	4658      	mov	r0, fp
 800537a:	f7fb fbd5 	bl	8000b28 <__aeabi_fsub>

	  if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 800537e:	496f      	ldr	r1, [pc, #444]	; (800553c <Control+0x2e8>)
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8005380:	4683      	mov	fp, r0
	  if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 8005382:	f7fb fe97 	bl	80010b4 <__aeabi_fcmpgt>
 8005386:	2800      	cmp	r0, #0
 8005388:	f000 8099 	beq.w	80054be <Control+0x26a>
 800538c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
	  else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;

	  /*Remember some variables for next time*/
	  pid.lastInput[ROLL] = imu.AHRS[ROLL];
 8005390:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0

/////////////////////////////////////////////////////////////////////////////////////////////////

	  /*Compute all the working error variables*/
	  pid.error[PITCH] = RC.rcCommand[PITCH] - imu.AHRS[PITCH];
 8005394:	f8d8 9080 	ldr.w	r9, [r8, #128]	; 0x80
 8005398:	f9b7 0052 	ldrsh.w	r0, [r7, #82]	; 0x52
 800539c:	f7fb fc7a 	bl	8000c94 <__aeabi_i2f>
 80053a0:	4649      	mov	r1, r9
 80053a2:	f7fb fbc1 	bl	8000b28 <__aeabi_fsub>
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 80053a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	  pid.error[PITCH] = RC.rcCommand[PITCH] - imu.AHRS[PITCH];
 80053a8:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
 80053ac:	4683      	mov	fp, r0
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 80053ae:	f7fb fcc5 	bl	8000d3c <__aeabi_fmul>
 80053b2:	4631      	mov	r1, r6
 80053b4:	f7fb fcc2 	bl	8000d3c <__aeabi_fmul>
 80053b8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80053bc:	f7fb fbb6 	bl	8000b2c <__addsf3>
	  if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 80053c0:	495e      	ldr	r1, [pc, #376]	; (800553c <Control+0x2e8>)
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 80053c2:	4682      	mov	sl, r0
	  if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 80053c4:	f7fb fe76 	bl	80010b4 <__aeabi_fcmpgt>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	f000 8085 	beq.w	80054d8 <Control+0x284>
 80053ce:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
	  pid.dInput[PITCH] = (imu.AHRS[PITCH] - pid.lastInput[PITCH]) / pid.ts;
 80053d2:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
 80053d6:	4648      	mov	r0, r9
 80053d8:	f7fb fba6 	bl	8000b28 <__aeabi_fsub>
 80053dc:	4631      	mov	r1, r6
 80053de:	f7fb fd61 	bl	8000ea4 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 80053e2:	68a1      	ldr	r1, [r4, #8]
	  pid.dInput[PITCH] = (imu.AHRS[PITCH] - pid.lastInput[PITCH]) / pid.ts;
 80053e4:	4682      	mov	sl, r0
 80053e6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 80053ea:	4658      	mov	r0, fp
 80053ec:	f7fb fca6 	bl	8000d3c <__aeabi_fmul>
 80053f0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80053f4:	f7fb fb9a 	bl	8000b2c <__addsf3>
 80053f8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80053fa:	4683      	mov	fp, r0
 80053fc:	4650      	mov	r0, sl
 80053fe:	f7fb fc9d 	bl	8000d3c <__aeabi_fmul>
 8005402:	4601      	mov	r1, r0
 8005404:	4658      	mov	r0, fp
 8005406:	f7fb fb8f 	bl	8000b28 <__aeabi_fsub>

	  if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 800540a:	494c      	ldr	r1, [pc, #304]	; (800553c <Control+0x2e8>)
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 800540c:	4683      	mov	fp, r0
	  if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 800540e:	f7fb fe51 	bl	80010b4 <__aeabi_fcmpgt>
 8005412:	2800      	cmp	r0, #0
 8005414:	d06e      	beq.n	80054f4 <Control+0x2a0>
 8005416:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
	  pid.lastInput[PITCH] = imu.AHRS[PITCH];

//////////////////////////////////////////////////////////////////////////////////////////////////

	  /*Compute all the working error variables*/
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 800541a:	f8d8 8078 	ldr.w	r8, [r8, #120]	; 0x78
 800541e:	f9b7 0054 	ldrsh.w	r0, [r7, #84]	; 0x54
	  pid.lastInput[PITCH] = imu.AHRS[PITCH];
 8005422:	f8c4 90d4 	str.w	r9, [r4, #212]	; 0xd4
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 8005426:	f7fb fc35 	bl	8000c94 <__aeabi_i2f>
 800542a:	4641      	mov	r1, r8
 800542c:	f7fb fb7c 	bl	8000b28 <__aeabi_fsub>
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 8005430:	6b21      	ldr	r1, [r4, #48]	; 0x30
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 8005432:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 8005436:	4607      	mov	r7, r0
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 8005438:	f7fb fc80 	bl	8000d3c <__aeabi_fmul>
 800543c:	4631      	mov	r1, r6
 800543e:	f7fb fc7d 	bl	8000d3c <__aeabi_fmul>
 8005442:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005446:	f7fb fb71 	bl	8000b2c <__addsf3>
	  if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 800544a:	493c      	ldr	r1, [pc, #240]	; (800553c <Control+0x2e8>)
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 800544c:	4682      	mov	sl, r0
	  if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 800544e:	f7fb fe31 	bl	80010b4 <__aeabi_fcmpgt>
 8005452:	2800      	cmp	r0, #0
 8005454:	d05b      	beq.n	800550e <Control+0x2ba>
 8005456:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
	  else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
	  pid.dInput[YAW] = (imu.gyroYaw - pid.lastInput[YAW]) / pid.ts; //imu.Yaw
 800545a:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 800545e:	4640      	mov	r0, r8
 8005460:	f7fb fb62 	bl	8000b28 <__aeabi_fsub>
 8005464:	4631      	mov	r1, r6
 8005466:	f7fb fd1d 	bl	8000ea4 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 800546a:	68e1      	ldr	r1, [r4, #12]
	  pid.dInput[YAW] = (imu.gyroYaw - pid.lastInput[YAW]) / pid.ts; //imu.Yaw
 800546c:	4606      	mov	r6, r0
 800546e:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 8005472:	4638      	mov	r0, r7
 8005474:	f7fb fc62 	bl	8000d3c <__aeabi_fmul>
 8005478:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800547c:	f7fb fb56 	bl	8000b2c <__addsf3>
 8005480:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005482:	4607      	mov	r7, r0
 8005484:	4630      	mov	r0, r6
 8005486:	f7fb fc59 	bl	8000d3c <__aeabi_fmul>
 800548a:	4601      	mov	r1, r0
 800548c:	4638      	mov	r0, r7
 800548e:	f7fb fb4b 	bl	8000b28 <__aeabi_fsub>

	  if(pid.output2[YAW] > OUT_MAX) pid.output2[YAW] = OUT_MAX;
 8005492:	492a      	ldr	r1, [pc, #168]	; (800553c <Control+0x2e8>)
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 8005494:	4606      	mov	r6, r0
	  if(pid.output2[YAW] > OUT_MAX) pid.output2[YAW] = OUT_MAX;
 8005496:	f7fb fe0d 	bl	80010b4 <__aeabi_fcmpgt>
 800549a:	2800      	cmp	r0, #0
 800549c:	d057      	beq.n	800554e <Control+0x2fa>
	  else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;
 800549e:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
 80054a2:	e05d      	b.n	8005560 <Control+0x30c>
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 80054a4:	4b26      	ldr	r3, [pc, #152]	; (8005540 <Control+0x2ec>)
 80054a6:	4650      	mov	r0, sl
 80054a8:	4619      	mov	r1, r3
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	f7fb fde4 	bl	8001078 <__aeabi_fcmplt>
 80054b0:	9b01      	ldr	r3, [sp, #4]
 80054b2:	b910      	cbnz	r0, 80054ba <Control+0x266>
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 80054b4:	f8c4 a07c 	str.w	sl, [r4, #124]	; 0x7c
 80054b8:	e746      	b.n	8005348 <Control+0xf4>
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 80054ba:	67e3      	str	r3, [r4, #124]	; 0x7c
 80054bc:	e744      	b.n	8005348 <Control+0xf4>
	  else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 80054be:	f8df a080 	ldr.w	sl, [pc, #128]	; 8005540 <Control+0x2ec>
 80054c2:	4658      	mov	r0, fp
 80054c4:	4651      	mov	r1, sl
 80054c6:	f7fb fdd7 	bl	8001078 <__aeabi_fcmplt>
 80054ca:	b910      	cbnz	r0, 80054d2 <Control+0x27e>
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 80054cc:	f8c4 b0e8 	str.w	fp, [r4, #232]	; 0xe8
 80054d0:	e75e      	b.n	8005390 <Control+0x13c>
	  else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 80054d2:	f8c4 a0e8 	str.w	sl, [r4, #232]	; 0xe8
 80054d6:	e75b      	b.n	8005390 <Control+0x13c>
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 80054d8:	4b19      	ldr	r3, [pc, #100]	; (8005540 <Control+0x2ec>)
 80054da:	4650      	mov	r0, sl
 80054dc:	4619      	mov	r1, r3
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	f7fb fdca 	bl	8001078 <__aeabi_fcmplt>
 80054e4:	9b01      	ldr	r3, [sp, #4]
 80054e6:	b910      	cbnz	r0, 80054ee <Control+0x29a>
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 80054e8:	f8c4 a080 	str.w	sl, [r4, #128]	; 0x80
 80054ec:	e771      	b.n	80053d2 <Control+0x17e>
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 80054ee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80054f2:	e76e      	b.n	80053d2 <Control+0x17e>
	  else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 80054f4:	f8df a048 	ldr.w	sl, [pc, #72]	; 8005540 <Control+0x2ec>
 80054f8:	4658      	mov	r0, fp
 80054fa:	4651      	mov	r1, sl
 80054fc:	f7fb fdbc 	bl	8001078 <__aeabi_fcmplt>
 8005500:	b910      	cbnz	r0, 8005508 <Control+0x2b4>
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 8005502:	f8c4 b0ec 	str.w	fp, [r4, #236]	; 0xec
 8005506:	e788      	b.n	800541a <Control+0x1c6>
	  else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 8005508:	f8c4 a0ec 	str.w	sl, [r4, #236]	; 0xec
 800550c:	e785      	b.n	800541a <Control+0x1c6>
	  else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 800550e:	f8df 9030 	ldr.w	r9, [pc, #48]	; 8005540 <Control+0x2ec>
 8005512:	4650      	mov	r0, sl
 8005514:	4649      	mov	r1, r9
 8005516:	f7fb fdaf 	bl	8001078 <__aeabi_fcmplt>
 800551a:	b9a8      	cbnz	r0, 8005548 <Control+0x2f4>
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 800551c:	f8c4 a084 	str.w	sl, [r4, #132]	; 0x84
 8005520:	e79b      	b.n	800545a <Control+0x206>
 8005522:	bf00      	nop
 8005524:	20000bc8 	.word	0x20000bc8
 8005528:	20000ed4 	.word	0x20000ed4
 800552c:	20000cbc 	.word	0x20000cbc
 8005530:	20000cc2 	.word	0x20000cc2
 8005534:	20000f4c 	.word	0x20000f4c
 8005538:	3c8efa39 	.word	0x3c8efa39
 800553c:	44480000 	.word	0x44480000
 8005540:	c4480000 	.word	0xc4480000
 8005544:	20001030 	.word	0x20001030
	  else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 8005548:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
 800554c:	e785      	b.n	800545a <Control+0x206>
	  else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;
 800554e:	4d07      	ldr	r5, [pc, #28]	; (800556c <Control+0x318>)
 8005550:	4630      	mov	r0, r6
 8005552:	4629      	mov	r1, r5
 8005554:	f7fb fd90 	bl	8001078 <__aeabi_fcmplt>
 8005558:	2800      	cmp	r0, #0
 800555a:	d1a0      	bne.n	800549e <Control+0x24a>
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 800555c:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0

	  /*Remember some variables for next time*/
	  pid.lastInput[YAW] = imu.gyroYaw;//imu.Yaw
 8005560:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	      //BEEP_OFF;
	      RGB_B_OFF;
	    }
	  }
#endif
}
 8005564:	b003      	add	sp, #12
 8005566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556a:	bf00      	nop
 800556c:	c4480000 	.word	0xc4480000

08005570 <PwmWriteMotor>:
//#include "PWM.h"
#include "Board.h"
void PwmWriteMotor(void)
{
  TIM4->CCR1 = motor[0];  // Actual : REAR_L
 8005570:	4a07      	ldr	r2, [pc, #28]	; (8005590 <PwmWriteMotor+0x20>)
 8005572:	4b08      	ldr	r3, [pc, #32]	; (8005594 <PwmWriteMotor+0x24>)
 8005574:	f9b2 1000 	ldrsh.w	r1, [r2]
 8005578:	6359      	str	r1, [r3, #52]	; 0x34
  TIM4->CCR2 = motor[1];  // Actual : FRONT_R
 800557a:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800557e:	6399      	str	r1, [r3, #56]	; 0x38
  TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8005580:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
  TIM4->CCR4 = motor[3];  // Actual : REAR_R
 8005584:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8005588:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIM4->CCR4 = motor[3];  // Actual : REAR_R
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	20000bbe 	.word	0x20000bbe
 8005594:	40000800 	.word	0x40000800

08005598 <Init_Buffer>:
	Queue_t *p_uart;
	p_uart = &Q_buffer[channel];
	Init_Buffer(p_uart);
}

bool Init_Buffer(Queue_t *Q){
 8005598:	2300      	movs	r3, #0
	bool result = true;
	uint8_t count;
	for(count = 0; count<MAX; count++){
		Q->Ring_Buffer[count]= 0;
 800559a:	461a      	mov	r2, r3
 800559c:	54c2      	strb	r2, [r0, r3]
 800559e:	3301      	adds	r3, #1
	for(count = 0; count<MAX; count++){
 80055a0:	2bff      	cmp	r3, #255	; 0xff
 80055a2:	d1fb      	bne.n	800559c <Init_Buffer+0x4>
	}
	Q->head = 0;
 80055a4:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
	Q->tail = 0;
 80055a8:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
	Q->size = MAX;
 80055ac:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
	Q->temp = 0;
 80055b0:	f880 2102 	strb.w	r2, [r0, #258]	; 0x102
	
	return result;
}
 80055b4:	2001      	movs	r0, #1
 80055b6:	4770      	bx	lr

080055b8 <QueueCreate>:
	Init_Buffer(p_uart);
 80055b8:	f44f 7284 	mov.w	r2, #264	; 0x108
 80055bc:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <QueueCreate+0x10>)
 80055be:	fb02 3000 	mla	r0, r2, r0, r3
 80055c2:	f7ff bfe9 	b.w	8005598 <Init_Buffer>
 80055c6:	bf00      	nop
 80055c8:	20000cc4 	.word	0x20000cc4

080055cc <Q_full>:

uint8_t Q_full(Queue_t *Q){
	if((Q->head+1)%MAX == Q->tail){
 80055cc:	22ff      	movs	r2, #255	; 0xff
 80055ce:	f890 30ff 	ldrb.w	r3, [r0, #255]	; 0xff
 80055d2:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
 80055d6:	3301      	adds	r3, #1
 80055d8:	fb93 f2f2 	sdiv	r2, r3, r2
 80055dc:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80055e0:	1a9b      	subs	r3, r3, r2
	   return TRUE;
	} return FALSE;
}
 80055e2:	1a1b      	subs	r3, r3, r0
 80055e4:	4258      	negs	r0, r3
 80055e6:	4158      	adcs	r0, r3
 80055e8:	4770      	bx	lr

080055ea <write_Q>:
	if(Q->head == Q->tail){
		return TRUE;
	} return FALSE;
}

uint8_t write_Q(Queue_t *Q, char data){
 80055ea:	b510      	push	{r4, lr}
 80055ec:	4604      	mov	r4, r0
	if(Q_full(Q)){
 80055ee:	f7ff ffed 	bl	80055cc <Q_full>
 80055f2:	b980      	cbnz	r0, 8005616 <write_Q+0x2c>
		return FALSE;
	}
  Q->Ring_Buffer[Q->head] = data;
  Q->head = (Q->head+1) % MAX;
 80055f4:	22ff      	movs	r2, #255	; 0xff
  Q->Ring_Buffer[Q->head] = data;
 80055f6:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
	return TRUE;
 80055fa:	2001      	movs	r0, #1
  Q->Ring_Buffer[Q->head] = data;
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	54e1      	strb	r1, [r4, r3]
  Q->head = (Q->head+1) % MAX;
 8005600:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 8005604:	3301      	adds	r3, #1
 8005606:	fb93 f2f2 	sdiv	r2, r3, r2
 800560a:	4413      	add	r3, r2
 800560c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005610:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	return TRUE;
 8005614:	bd10      	pop	{r4, pc}
		return FALSE;
 8005616:	2000      	movs	r0, #0
}
 8005618:	bd10      	pop	{r4, pc}

0800561a <read_Q>:
	if(Q->head == Q->tail){
 800561a:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
 800561e:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
 8005622:	429a      	cmp	r2, r3
 8005624:	d101      	bne.n	800562a <read_Q+0x10>

uint8_t read_Q(Queue_t *Q){
	if(Q_empty(Q)){
		return FALSE;
 8005626:	2000      	movs	r0, #0
 8005628:	4770      	bx	lr
	}
		Q->temp = Q->Ring_Buffer[Q->tail];
		Q->tail = (Q->tail+1) % MAX;
 800562a:	22ff      	movs	r2, #255	; 0xff
		Q->temp = Q->Ring_Buffer[Q->tail];
 800562c:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
 8005630:	b2db      	uxtb	r3, r3
 8005632:	5cc3      	ldrb	r3, [r0, r3]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
		Q->tail = (Q->tail+1) % MAX;
 800563a:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
 800563e:	3301      	adds	r3, #1
 8005640:	fb93 f2f2 	sdiv	r2, r3, r2
 8005644:	4413      	add	r3, r2
 8005646:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800564a:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
		if(Q->tail >= MAX-1)return FALSE;
 800564e:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
 8005652:	2bfd      	cmp	r3, #253	; 0xfd
 8005654:	d8e7      	bhi.n	8005626 <read_Q+0xc>

	return Q->temp;
 8005656:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
 800565a:	b2c0      	uxtb	r0, r0
 800565c:	4770      	bx	lr

0800565e <QueueAvailable>:
	//return TRUE;
}

uint32_t QueueAvailable(Queue_t *Q)
{
 800565e:	b510      	push	{r4, lr}
  uint32_t length;

  length = (Q->size + Q->head - Q->tail) % Q->size;
 8005660:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
 8005664:	f890 40ff 	ldrb.w	r4, [r0, #255]	; 0xff
 8005668:	f890 1100 	ldrb.w	r1, [r0, #256]	; 0x100
 800566c:	4423      	add	r3, r4
 800566e:	f890 2101 	ldrb.w	r2, [r0, #257]	; 0x101
 8005672:	1a5b      	subs	r3, r3, r1
 8005674:	fb93 f0f2 	sdiv	r0, r3, r2

  return length;
}
 8005678:	fb00 3012 	mls	r0, r0, r2, r3
 800567c:	bd10      	pop	{r4, pc}
	...

08005680 <HAL_TIM_IC_CaptureCallback>:
rc RC;
rc RC_Raw;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM2){
 8005680:	7f03      	ldrb	r3, [r0, #28]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d11d      	bne.n	80056c2 <HAL_TIM_IC_CaptureCallback+0x42>
 8005686:	6803      	ldr	r3, [r0, #0]
 8005688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568c:	f040 8095 	bne.w	80057ba <HAL_TIM_IC_CaptureCallback+0x13a>
	        if(Ch1_PIN){  // Timer2 Ch1 pin(PA0) is High
 8005690:	4a52      	ldr	r2, [pc, #328]	; (80057dc <HAL_TIM_IC_CaptureCallback+0x15c>)
 8005692:	6892      	ldr	r2, [r2, #8]
 8005694:	f012 0f01 	tst.w	r2, #1
 8005698:	4a51      	ldr	r2, [pc, #324]	; (80057e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 800569a:	d008      	beq.n	80056ae <HAL_TIM_IC_CaptureCallback+0x2e>
	            TIM2->CCR1 = 0;
 800569c:	2100      	movs	r1, #0
 800569e:	6359      	str	r1, [r3, #52]	; 0x34
	            RC.capture_rise[0] = TIM2->CCR1; // read capture data
 80056a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056a2:	6011      	str	r1, [r2, #0]

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3){
	        if(Ch3_PIN){  // Timer3 Ch1 pin(PA6) is High
	            TIM3->CCR1 = 0;
	        	RC.capture_rise[2] = TIM3->CCR1; // read capture data
	            Ch3_POL_FALLING;  // to falling edge
 80056a4:	6a1a      	ldr	r2, [r3, #32]
 80056a6:	f042 0202 	orr.w	r2, r2, #2
	            Ch6_POL_FALLING;  // to falling edge
	        }
	        else{   // Timer3 Ch4 pin(PB1) is Low
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
	            Ch6_POL_RISING;   // to rising edge
 80056aa:	621a      	str	r2, [r3, #32]
//	        	RC.capture_fall[7] = TIM3->CCR4; // read capture data
//	            RC.rcADC[7] = RC.capture_fall[7] - RC.capture_rise[7];
//	            Ch8_POL_RISING;   // to rising edge
//	        }
//	    }
}
 80056ac:	4770      	bx	lr
	            RC.capture_fall[0] = TIM2->CCR1; // read capture data
 80056ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
	            RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 80056b0:	6810      	ldr	r0, [r2, #0]
	            RC.capture_fall[0] = TIM2->CCR1; // read capture data
 80056b2:	6211      	str	r1, [r2, #32]
	            RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 80056b4:	1a09      	subs	r1, r1, r0
 80056b6:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
	            Ch3_POL_RISING;   // to rising edge
 80056ba:	6a1a      	ldr	r2, [r3, #32]
 80056bc:	f022 0202 	bic.w	r2, r2, #2
 80056c0:	e7f3      	b.n	80056aa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM2){
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d13d      	bne.n	8005742 <HAL_TIM_IC_CaptureCallback+0xc2>
 80056c6:	6803      	ldr	r3, [r0, #0]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d10d      	bne.n	80056ea <HAL_TIM_IC_CaptureCallback+0x6a>
	        if(Ch2_PIN){  // Timer2 Ch2 pin(PA1) is High
 80056ce:	4a43      	ldr	r2, [pc, #268]	; (80057dc <HAL_TIM_IC_CaptureCallback+0x15c>)
 80056d0:	6892      	ldr	r2, [r2, #8]
 80056d2:	f012 0f02 	tst.w	r2, #2
 80056d6:	4a42      	ldr	r2, [pc, #264]	; (80057e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 80056d8:	d018      	beq.n	800570c <HAL_TIM_IC_CaptureCallback+0x8c>
	            TIM2->CCR2 = 0;
 80056da:	2100      	movs	r1, #0
 80056dc:	6399      	str	r1, [r3, #56]	; 0x38
	        	RC.capture_rise[1] = TIM2->CCR2; // read capture data
 80056de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80056e0:	6051      	str	r1, [r2, #4]
	            Ch2_POL_FALLING;  // to falling edge
 80056e2:	6a1a      	ldr	r2, [r3, #32]
 80056e4:	f042 0220 	orr.w	r2, r2, #32
	            Ch2_POL_RISING;   // to rising edge
 80056e8:	621a      	str	r2, [r3, #32]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM3){
 80056ea:	4a3e      	ldr	r2, [pc, #248]	; (80057e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d174      	bne.n	80057da <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch4_PIN){  // Timer3 Ch2 pin(PA7) is High
 80056f0:	4a3a      	ldr	r2, [pc, #232]	; (80057dc <HAL_TIM_IC_CaptureCallback+0x15c>)
 80056f2:	6892      	ldr	r2, [r2, #8]
 80056f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80056f8:	4a39      	ldr	r2, [pc, #228]	; (80057e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 80056fa:	d018      	beq.n	800572e <HAL_TIM_IC_CaptureCallback+0xae>
	            TIM3->CCR2 = 0;
 80056fc:	2100      	movs	r1, #0
 80056fe:	6399      	str	r1, [r3, #56]	; 0x38
	        	RC.capture_rise[3] = TIM3->CCR2; // read capture data
 8005700:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005702:	60d1      	str	r1, [r2, #12]
	            Ch4_POL_FALLING;  // to falling edge
 8005704:	6a1a      	ldr	r2, [r3, #32]
 8005706:	f042 0220 	orr.w	r2, r2, #32
 800570a:	e7ce      	b.n	80056aa <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[1] = TIM2->CCR2; // read capture data
 800570c:	6b99      	ldr	r1, [r3, #56]	; 0x38
	        	RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 800570e:	6850      	ldr	r0, [r2, #4]
	        	RC.capture_fall[1] = TIM2->CCR2; // read capture data
 8005710:	6251      	str	r1, [r2, #36]	; 0x24
	        	RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 8005712:	1a09      	subs	r1, r1, r0
 8005714:	f8a2 1042 	strh.w	r1, [r2, #66]	; 0x42
	            Ch2_POL_RISING;   // to rising edge
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	f022 0220 	bic.w	r2, r2, #32
 800571e:	e7e3      	b.n	80056e8 <HAL_TIM_IC_CaptureCallback+0x68>
	        	RC.capture_fall[2] = TIM3->CCR1; // read capture data
 8005720:	6b59      	ldr	r1, [r3, #52]	; 0x34
	        	RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 8005722:	6890      	ldr	r0, [r2, #8]
	        	RC.capture_fall[2] = TIM3->CCR1; // read capture data
 8005724:	6291      	str	r1, [r2, #40]	; 0x28
	        	RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 8005726:	1a09      	subs	r1, r1, r0
 8005728:	f8a2 1044 	strh.w	r1, [r2, #68]	; 0x44
 800572c:	e7c5      	b.n	80056ba <HAL_TIM_IC_CaptureCallback+0x3a>
	        	RC.capture_fall[3] = TIM3->CCR2; // read capture data
 800572e:	6b99      	ldr	r1, [r3, #56]	; 0x38
	            RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 8005730:	68d0      	ldr	r0, [r2, #12]
	        	RC.capture_fall[3] = TIM3->CCR2; // read capture data
 8005732:	62d1      	str	r1, [r2, #44]	; 0x2c
	            RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 8005734:	1a09      	subs	r1, r1, r0
 8005736:	f8a2 1046 	strh.w	r1, [r2, #70]	; 0x46
	            Ch4_POL_RISING;   // to rising edge
 800573a:	6a1a      	ldr	r2, [r3, #32]
 800573c:	f022 0220 	bic.w	r2, r2, #32
 8005740:	e7b3      	b.n	80056aa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 && htim->Instance == TIM3){
 8005742:	2b04      	cmp	r3, #4
 8005744:	d147      	bne.n	80057d6 <HAL_TIM_IC_CaptureCallback+0x156>
 8005746:	6803      	ldr	r3, [r0, #0]
 8005748:	4a26      	ldr	r2, [pc, #152]	; (80057e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d145      	bne.n	80057da <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch5_PIN){  // Timer3 Ch3 pin(PB0) is High
 800574e:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8005752:	6892      	ldr	r2, [r2, #8]
 8005754:	f012 0f01 	tst.w	r2, #1
 8005758:	4a21      	ldr	r2, [pc, #132]	; (80057e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 800575a:	d007      	beq.n	800576c <HAL_TIM_IC_CaptureCallback+0xec>
	            TIM3->CCR3 = 0;
 800575c:	2100      	movs	r1, #0
 800575e:	63d9      	str	r1, [r3, #60]	; 0x3c
	        	RC.capture_rise[4] = TIM3->CCR3; // read capture data
 8005760:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005762:	6111      	str	r1, [r2, #16]
	            Ch5_POL_FALLING;  // to falling edge
 8005764:	6a1a      	ldr	r2, [r3, #32]
 8005766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800576a:	e79e      	b.n	80056aa <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[4] = TIM3->CCR3; // read capture data
 800576c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	            RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 800576e:	6910      	ldr	r0, [r2, #16]
	        	RC.capture_fall[4] = TIM3->CCR3; // read capture data
 8005770:	6311      	str	r1, [r2, #48]	; 0x30
	            RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 8005772:	1a09      	subs	r1, r1, r0
 8005774:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
	            Ch5_POL_RISING;   // to rising edge
 8005778:	6a1a      	ldr	r2, [r3, #32]
 800577a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800577e:	e794      	b.n	80056aa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3){
 8005780:	6803      	ldr	r3, [r0, #0]
 8005782:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d128      	bne.n	80057da <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch6_PIN){  // Timer3 Ch4 pin(PB1) is High
 8005788:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 800578c:	6892      	ldr	r2, [r2, #8]
 800578e:	f012 0f02 	tst.w	r2, #2
 8005792:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005794:	d007      	beq.n	80057a6 <HAL_TIM_IC_CaptureCallback+0x126>
	            TIM3->CCR4 = 0;
 8005796:	2100      	movs	r1, #0
 8005798:	6419      	str	r1, [r3, #64]	; 0x40
	        	RC.capture_rise[5] = TIM3->CCR4; // read capture data
 800579a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800579c:	6151      	str	r1, [r2, #20]
	            Ch6_POL_FALLING;  // to falling edge
 800579e:	6a1a      	ldr	r2, [r3, #32]
 80057a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057a4:	e781      	b.n	80056aa <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
 80057a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 80057a8:	6950      	ldr	r0, [r2, #20]
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
 80057aa:	6351      	str	r1, [r2, #52]	; 0x34
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 80057ac:	1a09      	subs	r1, r1, r0
 80057ae:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
	            Ch6_POL_RISING;   // to rising edge
 80057b2:	6a1a      	ldr	r2, [r3, #32]
 80057b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057b8:	e777      	b.n	80056aa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3){
 80057ba:	4a0a      	ldr	r2, [pc, #40]	; (80057e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10c      	bne.n	80057da <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch3_PIN){  // Timer3 Ch1 pin(PA6) is High
 80057c0:	4a06      	ldr	r2, [pc, #24]	; (80057dc <HAL_TIM_IC_CaptureCallback+0x15c>)
 80057c2:	6892      	ldr	r2, [r2, #8]
 80057c4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80057c8:	4a05      	ldr	r2, [pc, #20]	; (80057e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 80057ca:	d0a9      	beq.n	8005720 <HAL_TIM_IC_CaptureCallback+0xa0>
	            TIM3->CCR1 = 0;
 80057cc:	2100      	movs	r1, #0
 80057ce:	6359      	str	r1, [r3, #52]	; 0x34
	        	RC.capture_rise[2] = TIM3->CCR1; // read capture data
 80057d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057d2:	6091      	str	r1, [r2, #8]
 80057d4:	e766      	b.n	80056a4 <HAL_TIM_IC_CaptureCallback+0x24>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3){
 80057d6:	2b08      	cmp	r3, #8
 80057d8:	d0d2      	beq.n	8005780 <HAL_TIM_IC_CaptureCallback+0x100>
 80057da:	4770      	bx	lr
 80057dc:	40010800 	.word	0x40010800
 80057e0:	20000f4c 	.word	0x20000f4c
 80057e4:	40000400 	.word	0x40000400

080057e8 <mwArm>:

void mwArm(void)
{
	if(!f.ARMED){
 80057e8:	4b04      	ldr	r3, [pc, #16]	; (80057fc <mwArm+0x14>)
 80057ea:	785a      	ldrb	r2, [r3, #1]
 80057ec:	b92a      	cbnz	r2, 80057fa <mwArm+0x12>
		f.ARMED = 1;
 80057ee:	2201      	movs	r2, #1
 80057f0:	705a      	strb	r2, [r3, #1]
//		f.Tuning_MODE = 0;
		ms5611.ground_pressure = alt.EstAlt;
 80057f2:	4b03      	ldr	r3, [pc, #12]	; (8005800 <mwArm+0x18>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4b03      	ldr	r3, [pc, #12]	; (8005804 <mwArm+0x1c>)
 80057f8:	669a      	str	r2, [r3, #104]	; 0x68
 80057fa:	4770      	bx	lr
 80057fc:	20000ed4 	.word	0x20000ed4
 8005800:	200010d0 	.word	0x200010d0
 8005804:	20000fb0 	.word	0x20000fb0

08005808 <mwDisarm>:
void mwDisarm(void)
{
//  if(!f.ARMED){
//    f.Tuning_MODE = (f.Tuning_MODE+1) % 3;
//  }
	if(f.ARMED){
 8005808:	4b02      	ldr	r3, [pc, #8]	; (8005814 <mwDisarm+0xc>)
 800580a:	785a      	ldrb	r2, [r3, #1]
 800580c:	b10a      	cbz	r2, 8005812 <mwDisarm+0xa>
		f.ARMED = 0;
 800580e:	2200      	movs	r2, #0
 8005810:	705a      	strb	r2, [r3, #1]
 8005812:	4770      	bx	lr
 8005814:	20000ed4 	.word	0x20000ed4

08005818 <RC_Init>:
	}
}

void RC_Init(void)
{
 8005818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int count = 0;
	Flight_Status = 0;
 800581c:	2400      	movs	r4, #0
	do{
    Error.error = 3;
 800581e:	f04f 0803 	mov.w	r8, #3
	Flight_Status = 0;
 8005822:	4e16      	ldr	r6, [pc, #88]	; (800587c <RC_Init+0x64>)
    Error.error = 3;
 8005824:	4f16      	ldr	r7, [pc, #88]	; (8005880 <RC_Init+0x68>)
		LED0_OFF;
 8005826:	4d17      	ldr	r5, [pc, #92]	; (8005884 <RC_Init+0x6c>)
	Flight_Status = 0;
 8005828:	6034      	str	r4, [r6, #0]
		LED0_OFF;
 800582a:	2200      	movs	r2, #0
 800582c:	2108      	movs	r1, #8
 800582e:	4628      	mov	r0, r5
		count ++;
 8005830:	3401      	adds	r4, #1
    Error.error = 3;
 8005832:	f887 8000 	strb.w	r8, [r7]
		LED0_OFF;
 8005836:	f7fc fb8d 	bl	8001f54 <HAL_GPIO_WritePin>
		if(count == 125){
 800583a:	2c7d      	cmp	r4, #125	; 0x7d
 800583c:	d104      	bne.n	8005848 <RC_Init+0x30>
			LED1_TOGGLE; // RED RC_Init
 800583e:	2110      	movs	r1, #16
 8005840:	4628      	mov	r0, r5
 8005842:	f7fc fb8c 	bl	8001f5e <HAL_GPIO_TogglePin>
			count = 0;
 8005846:	2400      	movs	r4, #0
		}
	}while((RC.rcADC[ROLL] < 990) || (RC.rcADC[PITCH] < 990)|| (RC.rcADC[YAW] < 990)|| (RC.rcADC[THROTTLE] < 990));
 8005848:	f240 33dd 	movw	r3, #989	; 0x3dd
 800584c:	4a0e      	ldr	r2, [pc, #56]	; (8005888 <RC_Init+0x70>)
 800584e:	f9b2 1040 	ldrsh.w	r1, [r2, #64]	; 0x40
 8005852:	4299      	cmp	r1, r3
 8005854:	dde9      	ble.n	800582a <RC_Init+0x12>
 8005856:	f9b2 1042 	ldrsh.w	r1, [r2, #66]	; 0x42
 800585a:	4299      	cmp	r1, r3
 800585c:	dde5      	ble.n	800582a <RC_Init+0x12>
 800585e:	f9b2 1044 	ldrsh.w	r1, [r2, #68]	; 0x44
 8005862:	4299      	cmp	r1, r3
 8005864:	dde1      	ble.n	800582a <RC_Init+0x12>
 8005866:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800586a:	429a      	cmp	r2, r3
 800586c:	dddd      	ble.n	800582a <RC_Init+0x12>
	 Flight_Status = 1;
 800586e:	2301      	movs	r3, #1
 8005870:	6033      	str	r3, [r6, #0]
	 Error.error = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	703b      	strb	r3, [r7, #0]
 8005876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800587a:	bf00      	nop
 800587c:	20000a44 	.word	0x20000a44
 8005880:	200013d0 	.word	0x200013d0
 8005884:	40010c00 	.word	0x40010c00
 8005888:	20000f4c 	.word	0x20000f4c

0800588c <computeRC>:
}

void computeRC(void)
{
 800588c:	2200      	movs	r2, #0
    int i;
	// ------------------ STICKS COMMAND HANDLER --------------------
  // checking sticks positions
     for (i = 0; i < 4; i++) {
      stTmp >>= 2;
      if (RC.rcADC[i] > 1150)
 800588e:	495b      	ldr	r1, [pc, #364]	; (80059fc <computeRC+0x170>)
{
 8005890:	b570      	push	{r4, r5, r6, lr}
    uint8_t stTmp = 0;
 8005892:	4613      	mov	r3, r2
      if (RC.rcADC[i] > 1150)
 8005894:	f240 457e 	movw	r5, #1150	; 0x47e
 8005898:	460c      	mov	r4, r1
          stTmp |= 0x80;  // check for MIN
      if (RC.rcADC[i] < 1850)
 800589a:	f240 7639 	movw	r6, #1849	; 0x739
      if (RC.rcADC[i] > 1150)
 800589e:	1850      	adds	r0, r2, r1
 80058a0:	f9b0 0040 	ldrsh.w	r0, [r0, #64]	; 0x40
      stTmp >>= 2;
 80058a4:	089b      	lsrs	r3, r3, #2
      if (RC.rcADC[i] > 1150)
 80058a6:	42a8      	cmp	r0, r5
 80058a8:	dd04      	ble.n	80058b4 <computeRC+0x28>
          stTmp |= 0x80;  // check for MIN
 80058aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
      if (RC.rcADC[i] < 1850)
 80058ae:	42b0      	cmp	r0, r6
          stTmp |= 0x80;  // check for MIN
 80058b0:	b2db      	uxtb	r3, r3
      if (RC.rcADC[i] < 1850)
 80058b2:	dc01      	bgt.n	80058b8 <computeRC+0x2c>
          stTmp |= 0x40;  // check for MAX
 80058b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b8:	3202      	adds	r2, #2
     for (i = 0; i < 4; i++) {
 80058ba:	2a08      	cmp	r2, #8
 80058bc:	d1ef      	bne.n	800589e <computeRC+0x12>
      }
		  if (stTmp == rcSticks) {
 80058be:	4a50      	ldr	r2, [pc, #320]	; (8005a00 <computeRC+0x174>)
 80058c0:	4d50      	ldr	r5, [pc, #320]	; (8005a04 <computeRC+0x178>)
 80058c2:	7811      	ldrb	r1, [r2, #0]
 80058c4:	4299      	cmp	r1, r3
 80058c6:	d16b      	bne.n	80059a0 <computeRC+0x114>
      if (rcDelayCommand < 250)
 80058c8:	7829      	ldrb	r1, [r5, #0]
 80058ca:	29f9      	cmp	r1, #249	; 0xf9
 80058cc:	d801      	bhi.n	80058d2 <computeRC+0x46>
          rcDelayCommand++;
 80058ce:	3101      	adds	r1, #1
      } else
          rcDelayCommand = 0;
 80058d0:	7029      	strb	r1, [r5, #0]
		 rcSticks = stTmp;
 80058d2:	7013      	strb	r3, [r2, #0]
	
		 if (rcDelayCommand == 50) {
 80058d4:	782a      	ldrb	r2, [r5, #0]
 80058d6:	2a32      	cmp	r2, #50	; 0x32
 80058d8:	d10c      	bne.n	80058f4 <computeRC+0x68>
			 
			 if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 80058da:	4a4b      	ldr	r2, [pc, #300]	; (8005a08 <computeRC+0x17c>)
 80058dc:	7852      	ldrb	r2, [r2, #1]
 80058de:	2a00      	cmp	r2, #0
 80058e0:	d16a      	bne.n	80059b8 <computeRC+0x12c>
 80058e2:	2b5f      	cmp	r3, #95	; 0x5f
 80058e4:	d15e      	bne.n	80059a4 <computeRC+0x118>
			 {
			   RGB_B_TOGGLE;
 80058e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
			 }else if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
			 {
			   RGB_G_TOGGLE;
 80058ea:	4848      	ldr	r0, [pc, #288]	; (8005a0c <computeRC+0x180>)
 80058ec:	f7fc fb37 	bl	8001f5e <HAL_GPIO_TogglePin>
       {
         mwDisarm();
       }
				 if (i) {
               // writeEEPROM(1, true);
               rcDelayCommand = 0; // allow autorepetition
 80058f0:	2300      	movs	r3, #0
 80058f2:	702b      	strb	r3, [r5, #0]
         }
        }

 		RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 10), 1100, 1900, -20, 20)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
 80058f4:	f240 52e6 	movw	r2, #1510	; 0x5e6
 80058f8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80058fc:	4293      	cmp	r3, r2
 80058fe:	dd60      	ble.n	80059c2 <computeRC+0x136>
 8005900:	2214      	movs	r2, #20
 8005902:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005906:	fb93 f3f2 	sdiv	r3, r3, r2
 800590a:	3b14      	subs	r3, #20
 800590c:	b29b      	uxth	r3, r3
 800590e:	4a40      	ldr	r2, [pc, #256]	; (8005a10 <computeRC+0x184>)
 8005910:	6811      	ldr	r1, [r2, #0]
 8005912:	440b      	add	r3, r1
		RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -20, 20)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 8005914:	f240 51e6 	movw	r1, #1510	; 0x5e6
 		RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 10), 1100, 1900, -20, 20)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
 8005918:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -20, 20)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 800591c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8005920:	428b      	cmp	r3, r1
 8005922:	dd54      	ble.n	80059ce <computeRC+0x142>
 8005924:	f06f 0113 	mvn.w	r1, #19
 8005928:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800592c:	fb93 f3f1 	sdiv	r3, r3, r1
 8005930:	3314      	adds	r3, #20
 8005932:	b29b      	uxth	r3, r3
 8005934:	6852      	ldr	r2, [r2, #4]
 8005936:	4413      	add	r3, r2
		RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 10), 1100, 1900, -100, 100); //0~250 left:0, right:250
 8005938:	f240 52e6 	movw	r2, #1510	; 0x5e6
		RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -20, 20)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 800593c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
		RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 10), 1100, 1900, -100, 100); //0~250 left:0, right:250
 8005940:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 8005944:	4293      	cmp	r3, r2
 8005946:	dd48      	ble.n	80059da <computeRC+0x14e>
 8005948:	2204      	movs	r2, #4
 800594a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800594e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005952:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005956:	b21b      	sxth	r3, r3
	  RC.rcCommand[THROTTLE] = map(zofs(RC.rcADC[THROTTLE], 1100, 10), 1100, 1900, 0, 1800);//0~250
 8005958:	f240 4256 	movw	r2, #1110	; 0x456
		RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 10), 1100, 1900, -100, 100); //0~250 left:0, right:250
 800595c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	  RC.rcCommand[THROTTLE] = map(zofs(RC.rcADC[THROTTLE], 1100, 10), 1100, 1900, 0, 1800);//0~250
 8005960:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 8005964:	4293      	cmp	r3, r2
 8005966:	dd3e      	ble.n	80059e6 <computeRC+0x15a>
 8005968:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 800596c:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8005970:	4353      	muls	r3, r2
 8005972:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005976:	fb93 f3f2 	sdiv	r3, r3, r2
 800597a:	b21b      	sxth	r3, r3
	  RC.rcCommand[GEAR] 	   = RC.rcADC[GEAR];
	  RC.rcCommand[AUX1] 	   = RC.rcADC[AUX1];
 800597c:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
	  RC.rcCommand[THROTTLE] = map(zofs(RC.rcADC[THROTTLE], 1100, 10), 1100, 1900, 0, 1800);//0~250
 8005980:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
	  RC.rcCommand[AUX1] 	   = RC.rcADC[AUX1];
 8005984:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a

	  if(RC.rcCommand[GEAR] > 1500){
 8005988:	f240 52dc 	movw	r2, #1500	; 0x5dc
	  RC.rcCommand[GEAR] 	   = RC.rcADC[GEAR];
 800598c:	f9b4 3048 	ldrsh.w	r3, [r4, #72]	; 0x48
	  if(RC.rcCommand[GEAR] > 1500){
 8005990:	4293      	cmp	r3, r2
	  RC.rcCommand[GEAR] 	   = RC.rcADC[GEAR];
 8005992:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
	  if(RC.rcCommand[GEAR] > 1500){
 8005996:	dd2c      	ble.n	80059f2 <computeRC+0x166>
	    mwArm();
	  }else{
	    mwDisarm();
	  }

}
 8005998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    mwArm();
 800599c:	f7ff bf24 	b.w	80057e8 <mwArm>
          rcDelayCommand = 0;
 80059a0:	2100      	movs	r1, #0
 80059a2:	e795      	b.n	80058d0 <computeRC+0x44>
			 }else if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 80059a4:	2b6f      	cmp	r3, #111	; 0x6f
 80059a6:	d102      	bne.n	80059ae <computeRC+0x122>
			   RGB_G_TOGGLE;
 80059a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059ac:	e79d      	b.n	80058ea <computeRC+0x5e>
			 }else if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_HI + PIT_HI + ROL_HI))
 80059ae:	2b6a      	cmp	r3, #106	; 0x6a
 80059b0:	d102      	bne.n	80059b8 <computeRC+0x12c>
			   mwArm();
 80059b2:	f7ff ff19 	bl	80057e8 <mwArm>
 80059b6:	e79b      	b.n	80058f0 <computeRC+0x64>
       }else if(rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_LO)
 80059b8:	2b59      	cmp	r3, #89	; 0x59
 80059ba:	d199      	bne.n	80058f0 <computeRC+0x64>
         mwDisarm();
 80059bc:	f7ff ff24 	bl	8005808 <mwDisarm>
 80059c0:	e796      	b.n	80058f0 <computeRC+0x64>
 		RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 10), 1100, 1900, -20, 20)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
 80059c2:	f240 52d1 	movw	r2, #1489	; 0x5d1
 80059c6:	4293      	cmp	r3, r2
 80059c8:	dd9a      	ble.n	8005900 <computeRC+0x74>
 80059ca:	2300      	movs	r3, #0
 80059cc:	e79f      	b.n	800590e <computeRC+0x82>
		RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -20, 20)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 80059ce:	f240 51d1 	movw	r1, #1489	; 0x5d1
 80059d2:	428b      	cmp	r3, r1
 80059d4:	dda6      	ble.n	8005924 <computeRC+0x98>
 80059d6:	2300      	movs	r3, #0
 80059d8:	e7ac      	b.n	8005934 <computeRC+0xa8>
		RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 10), 1100, 1900, -100, 100); //0~250 left:0, right:250
 80059da:	f240 52d1 	movw	r2, #1489	; 0x5d1
 80059de:	4293      	cmp	r3, r2
 80059e0:	ddb2      	ble.n	8005948 <computeRC+0xbc>
 80059e2:	2300      	movs	r3, #0
 80059e4:	e7b8      	b.n	8005958 <computeRC+0xcc>
	  RC.rcCommand[THROTTLE] = map(zofs(RC.rcADC[THROTTLE], 1100, 10), 1100, 1900, 0, 1800);//0~250
 80059e6:	f240 4241 	movw	r2, #1089	; 0x441
 80059ea:	4293      	cmp	r3, r2
 80059ec:	ddbc      	ble.n	8005968 <computeRC+0xdc>
 80059ee:	2300      	movs	r3, #0
 80059f0:	e7c4      	b.n	800597c <computeRC+0xf0>
}
 80059f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    mwDisarm();
 80059f6:	f7ff bf07 	b.w	8005808 <mwDisarm>
 80059fa:	bf00      	nop
 80059fc:	20000f4c 	.word	0x20000f4c
 8005a00:	200006fd 	.word	0x200006fd
 8005a04:	200006fc 	.word	0x200006fc
 8005a08:	20000ed4 	.word	0x20000ed4
 8005a0c:	40010c00 	.word	0x40010c00
 8005a10:	20000824 	.word	0x20000824

08005a14 <getMres>:
// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
uint8_t Mmode = M_100HZ;

void getMres()
{
  switch (Mscale)
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <getMres+0x18>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	b113      	cbz	r3, 8005a20 <getMres+0xc>
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d004      	beq.n	8005a28 <getMres+0x14>
 8005a1e:	4770      	bx	lr
  {
    // Possible magnetometer scales (and their register bit settings) are:
    // 14 bit resolution (0) and 16 bit resolution (1)
    case MFS_14BITS:
      mRes = 10.0f * 4912.0f / 8190.0f; // Proper scale to return milliGauss
 8005a20:	4a03      	ldr	r2, [pc, #12]	; (8005a30 <getMres+0x1c>)
      break;
    case MFS_16BITS:
      mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
 8005a22:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <getMres+0x20>)
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	4770      	bx	lr
 8005a28:	4a03      	ldr	r2, [pc, #12]	; (8005a38 <getMres+0x24>)
 8005a2a:	e7fa      	b.n	8005a22 <getMres+0xe>
 8005a2c:	20000009 	.word	0x20000009
 8005a30:	40bfebff 	.word	0x40bfebff
 8005a34:	20000adc 	.word	0x20000adc
 8005a38:	3fbfebff 	.word	0x3fbfebff

08005a3c <getGres>:
  }
}

void getGres()
{
  switch (Gscale)
 8005a3c:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <getGres+0x24>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d806      	bhi.n	8005a52 <getGres+0x16>
 8005a44:	e8df f003 	tbb	[pc, r3]
 8005a48:	0a080602 	.word	0x0a080602
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case GFS_250DPS:
      gRes = 250.0f / 32768.0f;
 8005a4c:	4a05      	ldr	r2, [pc, #20]	; (8005a64 <getGres+0x28>)
      break;
    case GFS_1000DPS:
      gRes = 1000.0f / 32768.0f;
      break;
    case GFS_2000DPS:
      gRes = 2000.0f / 32768.0f;
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <getGres+0x2c>)
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	4770      	bx	lr
      gRes = 500.0f / 32768.0f;
 8005a54:	4a05      	ldr	r2, [pc, #20]	; (8005a6c <getGres+0x30>)
 8005a56:	e7fa      	b.n	8005a4e <getGres+0x12>
      gRes = 1000.0f / 32768.0f;
 8005a58:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <getGres+0x34>)
 8005a5a:	e7f8      	b.n	8005a4e <getGres+0x12>
      gRes = 2000.0f / 32768.0f;
 8005a5c:	4a05      	ldr	r2, [pc, #20]	; (8005a74 <getGres+0x38>)
 8005a5e:	e7f6      	b.n	8005a4e <getGres+0x12>
 8005a60:	200006ff 	.word	0x200006ff
 8005a64:	3bfa0000 	.word	0x3bfa0000
 8005a68:	20000ad4 	.word	0x20000ad4
 8005a6c:	3c7a0000 	.word	0x3c7a0000
 8005a70:	3cfa0000 	.word	0x3cfa0000
 8005a74:	3d7a0000 	.word	0x3d7a0000

08005a78 <getAres>:
  }
}

void getAres()
{
  switch (Ascale)
 8005a78:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <getAres+0x2c>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d807      	bhi.n	8005a90 <getAres+0x18>
 8005a80:	e8df f003 	tbb	[pc, r3]
 8005a84:	0d0a0702 	.word	0x0d0a0702
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case AFS_2G:
      aRes = 2.0f / 32768.0f;
 8005a88:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
      break;
    case AFS_8G:
      aRes = 8.0f / 32768.0f;
      break;
    case AFS_16G:
      aRes = 16.0f / 32768.0f;
 8005a8c:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <getAres+0x30>)
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	4770      	bx	lr
      aRes = 4.0f / 32768.0f;
 8005a92:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8005a96:	e7f9      	b.n	8005a8c <getAres+0x14>
      aRes = 8.0f / 32768.0f;
 8005a98:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8005a9c:	e7f6      	b.n	8005a8c <getAres+0x14>
      aRes = 16.0f / 32768.0f;
 8005a9e:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8005aa2:	e7f3      	b.n	8005a8c <getAres+0x14>
 8005aa4:	200006fe 	.word	0x200006fe
 8005aa8:	20000ac4 	.word	0x20000ac4

08005aac <GYRO_Common>:
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
	GYRO_ORIENTATION(x, y, z);
	GYRO_Common();
}

void GYRO_Common(void){
 8005aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t axis =0;
  for(axis=0; axis<3; axis++){
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005ab0:	f04f 0900 	mov.w	r9, #0

    if(abs(imu.gyroRaw[axis]) <= 5){
 8005ab4:	2600      	movs	r6, #0
 8005ab6:	f04f 0701 	mov.w	r7, #1
 8005aba:	46c8      	mov	r8, r9
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005abc:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <GYRO_Common+0x80>)
 8005abe:	4c1c      	ldr	r4, [pc, #112]	; (8005b30 <GYRO_Common+0x84>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
    if(abs(imu.gyroRaw[axis]) <= 5){
 8005ac2:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005b38 <GYRO_Common+0x8c>
 8005ac6:	f8df b074 	ldr.w	fp, [pc, #116]	; 8005b3c <GYRO_Common+0x90>
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	4b19      	ldr	r3, [pc, #100]	; (8005b34 <GYRO_Common+0x88>)
 8005ace:	444b      	add	r3, r9
 8005ad0:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8005ad4:	f7fb f8de 	bl	8000c94 <__aeabi_i2f>
 8005ad8:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8005adc:	f7fb f824 	bl	8000b28 <__aeabi_fsub>
 8005ae0:	9900      	ldr	r1, [sp, #0]
 8005ae2:	f7fb f92b 	bl	8000d3c <__aeabi_fmul>
    if(abs(imu.gyroRaw[axis]) <= 5){
 8005ae6:	4631      	mov	r1, r6
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005ae8:	4605      	mov	r5, r0
    if(abs(imu.gyroRaw[axis]) <= 5){
 8005aea:	f7fb fae3 	bl	80010b4 <__aeabi_fcmpgt>
 8005aee:	463b      	mov	r3, r7
 8005af0:	9301      	str	r3, [sp, #4]
 8005af2:	b190      	cbz	r0, 8005b1a <GYRO_Common+0x6e>
 8005af4:	4659      	mov	r1, fp
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7fb fac8 	bl	800108c <__aeabi_fcmple>
 8005afc:	9b01      	ldr	r3, [sp, #4]
 8005afe:	b900      	cbnz	r0, 8005b02 <GYRO_Common+0x56>
 8005b00:	4643      	mov	r3, r8
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	b973      	cbnz	r3, 8005b24 <GYRO_Common+0x78>
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005b06:	f844 5c2c 	str.w	r5, [r4, #-44]
 8005b0a:	f109 0902 	add.w	r9, r9, #2
  for(axis=0; axis<3; axis++){
 8005b0e:	f1b9 0f06 	cmp.w	r9, #6
 8005b12:	d1db      	bne.n	8005acc <GYRO_Common+0x20>
        imu.gyroRaw[axis] = 0;
      }
  }
}
 8005b14:	b003      	add	sp, #12
 8005b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(abs(imu.gyroRaw[axis]) <= 5){
 8005b1a:	4651      	mov	r1, sl
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f7fb fabf 	bl	80010a0 <__aeabi_fcmpge>
 8005b22:	e7eb      	b.n	8005afc <GYRO_Common+0x50>
        imu.gyroRaw[axis] = 0;
 8005b24:	f844 6c2c 	str.w	r6, [r4, #-44]
 8005b28:	e7ef      	b.n	8005b0a <GYRO_Common+0x5e>
 8005b2a:	bf00      	nop
 8005b2c:	20000ad4 	.word	0x20000ad4
 8005b30:	2000108c 	.word	0x2000108c
 8005b34:	20001030 	.word	0x20001030
 8005b38:	c0a00000 	.word	0xc0a00000
 8005b3c:	40a00000 	.word	0x40a00000

08005b40 <Gyro_getADC>:
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 8005b40:	2306      	movs	r3, #6
void Gyro_getADC(void){
 8005b42:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 8005b44:	4c0e      	ldr	r4, [pc, #56]	; (8005b80 <Gyro_getADC+0x40>)
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4623      	mov	r3, r4
 8005b4c:	2143      	movs	r1, #67	; 0x43
 8005b4e:	20d2      	movs	r0, #210	; 0xd2
 8005b50:	f7fe fc66 	bl	8004420 <I2C_ByteRead>
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005b54:	78a3      	ldrb	r3, [r4, #2]
 8005b56:	78e1      	ldrb	r1, [r4, #3]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005b58:	7962      	ldrb	r2, [r4, #5]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005b5a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005b5e:	7923      	ldrb	r3, [r4, #4]
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005b60:	7825      	ldrb	r5, [r4, #0]
 8005b62:	7860      	ldrb	r0, [r4, #1]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005b64:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	GYRO_ORIENTATION(x, y, z);
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <Gyro_getADC+0x44>)
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005b6a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	GYRO_ORIENTATION(x, y, z);
 8005b6e:	8298      	strh	r0, [r3, #20]
 8005b70:	82d9      	strh	r1, [r3, #22]
 8005b72:	831a      	strh	r2, [r3, #24]
}
 8005b74:	b003      	add	sp, #12
 8005b76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GYRO_Common();
 8005b7a:	f7ff bf97 	b.w	8005aac <GYRO_Common>
 8005b7e:	bf00      	nop
 8005b80:	200010e4 	.word	0x200010e4
 8005b84:	20001030 	.word	0x20001030

08005b88 <ACC_Common>:
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
	ACC_ORIENTATION( x, y, z);
	ACC_Common();
}

void ACC_Common(void){
 8005b88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t axis = 0;
  static int32_t a[3];

  if(calibratingA>0){
 8005b8c:	4e2a      	ldr	r6, [pc, #168]	; (8005c38 <ACC_Common+0xb0>)
 8005b8e:	4c2b      	ldr	r4, [pc, #172]	; (8005c3c <ACC_Common+0xb4>)
 8005b90:	8830      	ldrh	r0, [r6, #0]
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d03c      	beq.n	8005c10 <ACC_Common+0x88>
 8005b96:	2300      	movs	r3, #0
 8005b98:	4a29      	ldr	r2, [pc, #164]	; (8005c40 <ACC_Common+0xb8>)
    for(axis=0; axis <3; axis++){
    // Reset a[axis] at start of calibration
      if (calibratingA == 512) a[axis]=0;
 8005b9a:	461d      	mov	r5, r3
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	f104 0e18 	add.w	lr, r4, #24
 8005ba2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005ba6:	bf08      	it	eq
 8005ba8:	6015      	streq	r5, [r2, #0]
      // Sum up 512 readings
      a[axis] +=imu.accADC[axis];
 8005baa:	f9be c002 	ldrsh.w	ip, [lr, #2]
 8005bae:	6817      	ldr	r7, [r2, #0]
      // Clear global variables for next reading
      imu.accADC[axis]=0;
 8005bb0:	f82e 5f02 	strh.w	r5, [lr, #2]!
      a[axis] +=imu.accADC[axis];
 8005bb4:	4467      	add	r7, ip
 8005bb6:	f842 7b04 	str.w	r7, [r2], #4
      imu.acc_cal[axis]=0;
 8005bba:	18e7      	adds	r7, r4, r3
 8005bbc:	3304      	adds	r3, #4
    for(axis=0; axis <3; axis++){
 8005bbe:	2b0c      	cmp	r3, #12
      imu.acc_cal[axis]=0;
 8005bc0:	657d      	str	r5, [r7, #84]	; 0x54
    for(axis=0; axis <3; axis++){
 8005bc2:	d1ee      	bne.n	8005ba2 <ACC_Common+0x1a>
    }
     // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
  if (calibratingA == 1){
 8005bc4:	2801      	cmp	r0, #1
 8005bc6:	d120      	bne.n	8005c0a <ACC_Common+0x82>
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 8005bc8:	684b      	ldr	r3, [r1, #4]
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 8005bca:	680f      	ldr	r7, [r1, #0]
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 8005bcc:	ea4f 2863 	mov.w	r8, r3, asr #9
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005bd0:	4b1c      	ldr	r3, [pc, #112]	; (8005c44 <ACC_Common+0xbc>)
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 8005bd2:	127f      	asrs	r7, r7, #9
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005bd4:	6818      	ldr	r0, [r3, #0]
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 8005bd6:	6567      	str	r7, [r4, #84]	; 0x54
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 8005bd8:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005bdc:	688d      	ldr	r5, [r1, #8]
 8005bde:	f7fb fa89 	bl	80010f4 <__aeabi_f2iz>
 8005be2:	126d      	asrs	r5, r5, #9
 8005be4:	1a28      	subs	r0, r5, r0
    sprintf(Buf, "ACC_CALI_DONE : %ld, %ld, %ld\r\n ", imu.acc_cal[ROLL], imu.acc_cal[PITCH], imu.acc_cal[YAW]);
 8005be6:	4643      	mov	r3, r8
 8005be8:	463a      	mov	r2, r7
 8005bea:	4917      	ldr	r1, [pc, #92]	; (8005c48 <ACC_Common+0xc0>)
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005bec:	65e0      	str	r0, [r4, #92]	; 0x5c
    sprintf(Buf, "ACC_CALI_DONE : %ld, %ld, %ld\r\n ", imu.acc_cal[ROLL], imu.acc_cal[PITCH], imu.acc_cal[YAW]);
 8005bee:	9000      	str	r0, [sp, #0]
 8005bf0:	4816      	ldr	r0, [pc, #88]	; (8005c4c <ACC_Common+0xc4>)
 8005bf2:	f003 fb05 	bl	8009200 <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf),1000);
 8005bf6:	4815      	ldr	r0, [pc, #84]	; (8005c4c <ACC_Common+0xc4>)
 8005bf8:	f7fa faaa 	bl	8000150 <strlen>
 8005bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c00:	b282      	uxth	r2, r0
 8005c02:	4912      	ldr	r1, [pc, #72]	; (8005c4c <ACC_Common+0xc4>)
 8005c04:	4812      	ldr	r0, [pc, #72]	; (8005c50 <ACC_Common+0xc8>)
 8005c06:	f7fe f897 	bl	8003d38 <HAL_UART_Transmit>
  }
  calibratingA--;
 8005c0a:	8833      	ldrh	r3, [r6, #0]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	8033      	strh	r3, [r6, #0]
  }

  for(axis=0;axis<3;axis++){
    imu.accRaw[axis] = (float)imu.accADC[axis] * aRes;// - accBias[axis];
 8005c10:	2500      	movs	r5, #0
 8005c12:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <ACC_Common+0xbc>)
 8005c14:	4e0f      	ldr	r6, [pc, #60]	; (8005c54 <ACC_Common+0xcc>)
 8005c16:	f8d3 8000 	ldr.w	r8, [r3]
 8005c1a:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
 8005c1e:	f7fb f839 	bl	8000c94 <__aeabi_i2f>
 8005c22:	4641      	mov	r1, r8
 8005c24:	f7fb f88a 	bl	8000d3c <__aeabi_fmul>
 8005c28:	1967      	adds	r7, r4, r5
 8005c2a:	3504      	adds	r5, #4
  for(axis=0;axis<3;axis++){
 8005c2c:	2d0c      	cmp	r5, #12
    imu.accRaw[axis] = (float)imu.accADC[axis] * aRes;// - accBias[axis];
 8005c2e:	62b8      	str	r0, [r7, #40]	; 0x28
  for(axis=0;axis<3;axis++){
 8005c30:	d1f3      	bne.n	8005c1a <ACC_Common+0x92>
    //imu.accRaw[axis] = ((float)imu.accADC[axis]-(float)imu.acc_cal[axis]) * AMult;// - accelBias[axis];
  }
}
 8005c32:	b002      	add	sp, #8
 8005c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c38:	20000794 	.word	0x20000794
 8005c3c:	20001030 	.word	0x20001030
 8005c40:	20000718 	.word	0x20000718
 8005c44:	20000ac4 	.word	0x20000ac4
 8005c48:	0800fd1c 	.word	0x0800fd1c
 8005c4c:	200010f0 	.word	0x200010f0
 8005c50:	20001418 	.word	0x20001418
 8005c54:	20001048 	.word	0x20001048

08005c58 <ACC_getADC>:
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 8005c58:	2306      	movs	r3, #6
void ACC_getADC(void){
 8005c5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 8005c5c:	4c0e      	ldr	r4, [pc, #56]	; (8005c98 <ACC_getADC+0x40>)
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	2201      	movs	r2, #1
 8005c62:	4623      	mov	r3, r4
 8005c64:	213b      	movs	r1, #59	; 0x3b
 8005c66:	20d2      	movs	r0, #210	; 0xd2
 8005c68:	f7fe fbda 	bl	8004420 <I2C_ByteRead>
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005c6c:	78a3      	ldrb	r3, [r4, #2]
 8005c6e:	78e1      	ldrb	r1, [r4, #3]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005c70:	7962      	ldrb	r2, [r4, #5]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005c72:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005c76:	7923      	ldrb	r3, [r4, #4]
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005c78:	7825      	ldrb	r5, [r4, #0]
 8005c7a:	7860      	ldrb	r0, [r4, #1]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005c7c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	ACC_ORIENTATION( x, y, z);
 8005c80:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <ACC_getADC+0x44>)
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005c82:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	ACC_ORIENTATION( x, y, z);
 8005c86:	8358      	strh	r0, [r3, #26]
 8005c88:	8399      	strh	r1, [r3, #28]
 8005c8a:	83da      	strh	r2, [r3, #30]
}
 8005c8c:	b003      	add	sp, #12
 8005c8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ACC_Common();
 8005c92:	f7ff bf79 	b.w	8005b88 <ACC_Common>
 8005c96:	bf00      	nop
 8005c98:	200010e4 	.word	0x200010e4
 8005c9c:	20001030 	.word	0x20001030

08005ca0 <MAG_Common>:
	    MAG_Common();
		}
	}
}

void MAG_Common(void){
 8005ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t axis = 0;
  for(axis=0;axis<3;axis++)
  {
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 8005ca4:	2400      	movs	r4, #0
 8005ca6:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <MAG_Common+0x48>)
 8005ca8:	4d10      	ldr	r5, [pc, #64]	; (8005cec <MAG_Common+0x4c>)
 8005caa:	f8d3 8000 	ldr.w	r8, [r3]
 8005cae:	4f10      	ldr	r7, [pc, #64]	; (8005cf0 <MAG_Common+0x50>)
 8005cb0:	4e10      	ldr	r6, [pc, #64]	; (8005cf4 <MAG_Common+0x54>)
 8005cb2:	f1a5 093c 	sub.w	r9, r5, #60	; 0x3c
 8005cb6:	eb04 0309 	add.w	r3, r4, r9
 8005cba:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8005cbe:	f7fa ffe9 	bl	8000c94 <__aeabi_i2f>
 8005cc2:	4641      	mov	r1, r8
 8005cc4:	f7fb f83a 	bl	8000d3c <__aeabi_fmul>
 8005cc8:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
 8005ccc:	f7fb f836 	bl	8000d3c <__aeabi_fmul>
 8005cd0:	f856 1014 	ldr.w	r1, [r6, r4, lsl #1]
 8005cd4:	f7fa ff28 	bl	8000b28 <__aeabi_fsub>
 8005cd8:	3402      	adds	r4, #2
  for(axis=0;axis<3;axis++)
 8005cda:	2c06      	cmp	r4, #6
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 8005cdc:	f845 0f04 	str.w	r0, [r5, #4]!
  for(axis=0;axis<3;axis++)
 8005ce0:	d1e9      	bne.n	8005cb6 <MAG_Common+0x16>
  }
}
 8005ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000adc 	.word	0x20000adc
 8005cec:	2000106c 	.word	0x2000106c
 8005cf0:	2000080c 	.word	0x2000080c
 8005cf4:	20000800 	.word	0x20000800

08005cf8 <Mag_getADC>:
void Mag_getADC(void){
 8005cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x02, 1, rawADC, 1);
 8005cfa:	2501      	movs	r5, #1
 8005cfc:	4c16      	ldr	r4, [pc, #88]	; (8005d58 <Mag_getADC+0x60>)
 8005cfe:	462a      	mov	r2, r5
 8005d00:	4623      	mov	r3, r4
 8005d02:	9500      	str	r5, [sp, #0]
 8005d04:	2102      	movs	r1, #2
 8005d06:	2018      	movs	r0, #24
 8005d08:	f7fe fb8a 	bl	8004420 <I2C_ByteRead>
	if( rawADC[0] & 0x01){
 8005d0c:	7823      	ldrb	r3, [r4, #0]
 8005d0e:	07da      	lsls	r2, r3, #31
 8005d10:	d520      	bpl.n	8005d54 <Mag_getADC+0x5c>
	  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x03, 1, rawADC, 7);
 8005d12:	2307      	movs	r3, #7
 8005d14:	462a      	mov	r2, r5
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2103      	movs	r1, #3
 8005d1a:	4623      	mov	r3, r4
 8005d1c:	2018      	movs	r0, #24
 8005d1e:	f7fe fb7f 	bl	8004420 <I2C_ByteRead>
	  if(!(c & 0x08)){
 8005d22:	79a3      	ldrb	r3, [r4, #6]
 8005d24:	071b      	lsls	r3, r3, #28
 8005d26:	d415      	bmi.n	8005d54 <Mag_getADC+0x5c>
	    y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 8005d28:	78e3      	ldrb	r3, [r4, #3]
 8005d2a:	78a1      	ldrb	r1, [r4, #2]
	    z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8005d2c:	7962      	ldrb	r2, [r4, #5]
	    y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 8005d2e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	    z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8005d32:	7923      	ldrb	r3, [r4, #4]
	    x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 8005d34:	7865      	ldrb	r5, [r4, #1]
 8005d36:	7820      	ldrb	r0, [r4, #0]
	    z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8005d38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	    MAG_ORIENTATION( x, y, z);
 8005d3c:	4a07      	ldr	r2, [pc, #28]	; (8005d5c <Mag_getADC+0x64>)
	    x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 8005d3e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	    MAG_ORIENTATION( x, y, z);
 8005d42:	425b      	negs	r3, r3
 8005d44:	81d0      	strh	r0, [r2, #14]
 8005d46:	8191      	strh	r1, [r2, #12]
 8005d48:	8213      	strh	r3, [r2, #16]
}
 8005d4a:	b003      	add	sp, #12
 8005d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	    MAG_Common();
 8005d50:	f7ff bfa6 	b.w	8005ca0 <MAG_Common>
}
 8005d54:	b003      	add	sp, #12
 8005d56:	bd30      	pop	{r4, r5, pc}
 8005d58:	200010e4 	.word	0x200010e4
 8005d5c:	20001030 	.word	0x20001030

08005d60 <Calibrate_gyro>:
{
 8005d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (cal_int = 0; cal_int < 2000; cal_int ++){
 8005d64:	2500      	movs	r5, #0
      RGB_G_TOGGLE;                                         //Change the led status to indicate calibration.
 8005d66:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005e18 <Calibrate_gyro+0xb8>
      sprintf(Buf, ".");
 8005d6a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8005e1c <Calibrate_gyro+0xbc>
 8005d6e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8005e20 <Calibrate_gyro+0xc0>
    if (cal_int % 125 == 0) {
 8005d72:	227d      	movs	r2, #125	; 0x7d
 8005d74:	fb95 f3f2 	sdiv	r3, r5, r2
 8005d78:	fb02 5313 	mls	r3, r2, r3, r5
 8005d7c:	b993      	cbnz	r3, 8005da4 <Calibrate_gyro+0x44>
      RGB_G_TOGGLE;                                         //Change the led status to indicate calibration.
 8005d7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d82:	4648      	mov	r0, r9
 8005d84:	f7fc f8eb 	bl	8001f5e <HAL_GPIO_TogglePin>
      sprintf(Buf, ".");
 8005d88:	4651      	mov	r1, sl
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	f003 fa5c 	bl	8009248 <strcpy>
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8005d90:	4640      	mov	r0, r8
 8005d92:	f7fa f9dd 	bl	8000150 <strlen>
 8005d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d9a:	b282      	uxth	r2, r0
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	481b      	ldr	r0, [pc, #108]	; (8005e0c <Calibrate_gyro+0xac>)
 8005da0:	f7fd ffca 	bl	8003d38 <HAL_UART_Transmit>
		Gyro_getADC();
 8005da4:	f7ff fecc 	bl	8005b40 <Gyro_getADC>
		Mag_getADC();
 8005da8:	2600      	movs	r6, #0
 8005daa:	f7ff ffa5 	bl	8005cf8 <Mag_getADC>
 8005dae:	4f18      	ldr	r7, [pc, #96]	; (8005e10 <Calibrate_gyro+0xb0>)
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 8005db0:	f1a7 045c 	sub.w	r4, r7, #92	; 0x5c
 8005db4:	1933      	adds	r3, r6, r4
 8005db6:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8005dba:	f7fa ff6b 	bl	8000c94 <__aeabi_i2f>
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	f7fa feb4 	bl	8000b2c <__addsf3>
 8005dc4:	3602      	adds	r6, #2
		for(axis=0; axis<3; axis++)
 8005dc6:	2e06      	cmp	r6, #6
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 8005dc8:	f847 0f04 	str.w	r0, [r7, #4]!
		for(axis=0; axis<3; axis++)
 8005dcc:	d1f2      	bne.n	8005db4 <Calibrate_gyro+0x54>
	for (cal_int = 0; cal_int < 2000; cal_int ++){
 8005dce:	3501      	adds	r5, #1
 8005dd0:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8005dd4:	d1cd      	bne.n	8005d72 <Calibrate_gyro+0x12>
	PrintData(2);
 8005dd6:	2002      	movs	r0, #2
 8005dd8:	f001 fa80 	bl	80072dc <PrintData>
		imu.gyro_cal[axis] /= 2000.0f;
 8005ddc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005dde:	490d      	ldr	r1, [pc, #52]	; (8005e14 <Calibrate_gyro+0xb4>)
 8005de0:	f7fb f860 	bl	8000ea4 <__aeabi_fdiv>
 8005de4:	490b      	ldr	r1, [pc, #44]	; (8005e14 <Calibrate_gyro+0xb4>)
 8005de6:	6620      	str	r0, [r4, #96]	; 0x60
 8005de8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005dea:	f7fb f85b 	bl	8000ea4 <__aeabi_fdiv>
 8005dee:	4909      	ldr	r1, [pc, #36]	; (8005e14 <Calibrate_gyro+0xb4>)
 8005df0:	6660      	str	r0, [r4, #100]	; 0x64
 8005df2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005df4:	f7fb f856 	bl	8000ea4 <__aeabi_fdiv>
 8005df8:	66a0      	str	r0, [r4, #104]	; 0x68
	HAL_Delay(100);
 8005dfa:	2064      	movs	r0, #100	; 0x64
 8005dfc:	f7fb fb90 	bl	8001520 <HAL_Delay>
}
 8005e00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PrintData(2);
 8005e04:	2002      	movs	r0, #2
 8005e06:	f001 ba69 	b.w	80072dc <PrintData>
 8005e0a:	bf00      	nop
 8005e0c:	20001418 	.word	0x20001418
 8005e10:	2000108c 	.word	0x2000108c
 8005e14:	44fa0000 	.word	0x44fa0000
 8005e18:	40010c00 	.word	0x40010c00
 8005e1c:	0800fd3d 	.word	0x0800fd3d
 8005e20:	200010f0 	.word	0x200010f0
 8005e24:	00000000 	.word	0x00000000

08005e28 <CAL_Heading>:

void CAL_Heading(void){
 8005e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  static uint8_t ind = 0;
  static float heading[HEADING_SMOOTH], h_sum;

  imu.compass_x_horizontal = (float)imu.magRaw[ROLL] * cos(imu.AHRS[PITCH] * 0.0174533) + (float)imu.magRaw[PITCH] * sin(imu.AHRS[ROLL] * 0.0174533) * sin(imu.AHRS[PITCH] * 0.0174533) + imu.magRaw[YAW] * sin(imu.AHRS[PITCH] * 0.0174533) * cos(imu.AHRS[ROLL] * 0.0174533);
 8005e2c:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8005ff8 <CAL_Heading+0x1d0>
void CAL_Heading(void){
 8005e30:	b086      	sub	sp, #24
  imu.compass_x_horizontal = (float)imu.magRaw[ROLL] * cos(imu.AHRS[PITCH] * 0.0174533) + (float)imu.magRaw[PITCH] * sin(imu.AHRS[ROLL] * 0.0174533) * sin(imu.AHRS[PITCH] * 0.0174533) + imu.magRaw[YAW] * sin(imu.AHRS[PITCH] * 0.0174533) * cos(imu.AHRS[ROLL] * 0.0174533);
 8005e32:	f8da 0080 	ldr.w	r0, [sl, #128]	; 0x80
 8005e36:	f7fa faf7 	bl	8000428 <__aeabi_f2d>
 8005e3a:	a365      	add	r3, pc, #404	; (adr r3, 8005fd0 <CAL_Heading+0x1a8>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f7fa fb46 	bl	80004d0 <__aeabi_dmul>
 8005e44:	4680      	mov	r8, r0
 8005e46:	4689      	mov	r9, r1
 8005e48:	f006 f8bc 	bl	800bfc4 <cos>
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
 8005e52:	460d      	mov	r5, r1
 8005e54:	f7fa fae8 	bl	8000428 <__aeabi_f2d>
 8005e58:	e9cd 0100 	strd	r0, r1, [sp]
 8005e5c:	f8da 007c 	ldr.w	r0, [sl, #124]	; 0x7c
 8005e60:	f7fa fae2 	bl	8000428 <__aeabi_f2d>
 8005e64:	a35a      	add	r3, pc, #360	; (adr r3, 8005fd0 <CAL_Heading+0x1a8>)
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f7fa fb31 	bl	80004d0 <__aeabi_dmul>
 8005e6e:	4606      	mov	r6, r0
 8005e70:	460f      	mov	r7, r1
 8005e72:	f006 f8dd 	bl	800c030 <sin>
 8005e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	f006 f8d7 	bl	800c030 <sin>
 8005e82:	4680      	mov	r8, r0
 8005e84:	f8da 0048 	ldr.w	r0, [sl, #72]	; 0x48
 8005e88:	4689      	mov	r9, r1
 8005e8a:	f7fa facd 	bl	8000428 <__aeabi_f2d>
 8005e8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e92:	4630      	mov	r0, r6
 8005e94:	4639      	mov	r1, r7
 8005e96:	f006 f895 	bl	800bfc4 <cos>
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	f8da 0040 	ldr.w	r0, [sl, #64]	; 0x40
 8005ea0:	460f      	mov	r7, r1
 8005ea2:	f7fa fac1 	bl	8000428 <__aeabi_f2d>
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	462b      	mov	r3, r5
 8005eaa:	f7fa fb11 	bl	80004d0 <__aeabi_dmul>
 8005eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005eba:	f7fa fb09 	bl	80004d0 <__aeabi_dmul>
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	f7fa fb05 	bl	80004d0 <__aeabi_dmul>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4620      	mov	r0, r4
 8005ecc:	4629      	mov	r1, r5
 8005ece:	f7fa f94d 	bl	800016c <__adddf3>
 8005ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	460d      	mov	r5, r1
 8005eda:	4640      	mov	r0, r8
 8005edc:	4649      	mov	r1, r9
 8005ede:	f7fa faf7 	bl	80004d0 <__aeabi_dmul>
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	f7fa faf3 	bl	80004d0 <__aeabi_dmul>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa f93b 	bl	800016c <__adddf3>
 8005ef6:	f7fa fdc3 	bl	8000a80 <__aeabi_d2f>
  imu.compass_y_horizontal = (float)imu.magRaw[PITCH] * cos(imu.AHRS[ROLL] * 0.0174533) - (float)imu.magRaw[YAW] * sin(imu.AHRS[ROLL] * 0.0174533);
 8005efa:	4632      	mov	r2, r6
  imu.compass_x_horizontal = (float)imu.magRaw[ROLL] * cos(imu.AHRS[PITCH] * 0.0174533) + (float)imu.magRaw[PITCH] * sin(imu.AHRS[ROLL] * 0.0174533) * sin(imu.AHRS[PITCH] * 0.0174533) + imu.magRaw[YAW] * sin(imu.AHRS[PITCH] * 0.0174533) * cos(imu.AHRS[ROLL] * 0.0174533);
 8005efc:	4604      	mov	r4, r0
  imu.compass_y_horizontal = (float)imu.magRaw[PITCH] * cos(imu.AHRS[ROLL] * 0.0174533) - (float)imu.magRaw[YAW] * sin(imu.AHRS[ROLL] * 0.0174533);
 8005efe:	463b      	mov	r3, r7
  imu.compass_x_horizontal = (float)imu.magRaw[ROLL] * cos(imu.AHRS[PITCH] * 0.0174533) + (float)imu.magRaw[PITCH] * sin(imu.AHRS[ROLL] * 0.0174533) * sin(imu.AHRS[PITCH] * 0.0174533) + imu.magRaw[YAW] * sin(imu.AHRS[PITCH] * 0.0174533) * cos(imu.AHRS[ROLL] * 0.0174533);
 8005f00:	f8ca 0094 	str.w	r0, [sl, #148]	; 0x94
  imu.compass_y_horizontal = (float)imu.magRaw[PITCH] * cos(imu.AHRS[ROLL] * 0.0174533) - (float)imu.magRaw[YAW] * sin(imu.AHRS[ROLL] * 0.0174533);
 8005f04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f08:	f7fa fae2 	bl	80004d0 <__aeabi_dmul>
 8005f0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f10:	4606      	mov	r6, r0
 8005f12:	460f      	mov	r7, r1
 8005f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f18:	f7fa fada 	bl	80004d0 <__aeabi_dmul>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4630      	mov	r0, r6
 8005f22:	4639      	mov	r1, r7
 8005f24:	f7fa f920 	bl	8000168 <__aeabi_dsub>
 8005f28:	f7fa fdaa 	bl	8000a80 <__aeabi_d2f>
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	f8ca 0098 	str.w	r0, [sl, #152]	; 0x98
  imu.actual_compass_heading = (atan2(imu.compass_y_horizontal, imu.compass_x_horizontal)) * (180.0f / M_PI);
 8005f32:	4620      	mov	r0, r4
 8005f34:	f7fa fa78 	bl	8000428 <__aeabi_f2d>
 8005f38:	4606      	mov	r6, r0
 8005f3a:	460f      	mov	r7, r1
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f7fa fa73 	bl	8000428 <__aeabi_f2d>
 8005f42:	4632      	mov	r2, r6
 8005f44:	463b      	mov	r3, r7
 8005f46:	f006 f917 	bl	800c178 <atan2>
 8005f4a:	a323      	add	r3, pc, #140	; (adr r3, 8005fd8 <CAL_Heading+0x1b0>)
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f7fa fabe 	bl	80004d0 <__aeabi_dmul>
 8005f54:	f7fa fd94 	bl	8000a80 <__aeabi_d2f>
  h_sum += imu.actual_compass_heading;
  h_sum -= heading[ind];
 8005f58:	4d21      	ldr	r5, [pc, #132]	; (8005fe0 <CAL_Heading+0x1b8>)
  h_sum += imu.actual_compass_heading;
 8005f5a:	4f22      	ldr	r7, [pc, #136]	; (8005fe4 <CAL_Heading+0x1bc>)
  h_sum -= heading[ind];
 8005f5c:	782c      	ldrb	r4, [r5, #0]
 8005f5e:	4e22      	ldr	r6, [pc, #136]	; (8005fe8 <CAL_Heading+0x1c0>)
  h_sum += imu.actual_compass_heading;
 8005f60:	6839      	ldr	r1, [r7, #0]
  imu.actual_compass_heading = (atan2(imu.compass_y_horizontal, imu.compass_x_horizontal)) * (180.0f / M_PI);
 8005f62:	4680      	mov	r8, r0
  h_sum += imu.actual_compass_heading;
 8005f64:	f7fa fde2 	bl	8000b2c <__addsf3>
  h_sum -= heading[ind];
 8005f68:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8005f6c:	f7fa fddc 	bl	8000b28 <__aeabi_fsub>
  heading[ind++] = imu.actual_compass_heading;
  ind %= HEADING_SMOOTH;
 8005f70:	2214      	movs	r2, #20
  heading[ind++] = imu.actual_compass_heading;
 8005f72:	f846 8024 	str.w	r8, [r6, r4, lsl #2]
 8005f76:	3401      	adds	r4, #1
  ind %= HEADING_SMOOTH;
 8005f78:	b2e4      	uxtb	r4, r4
 8005f7a:	fbb4 f3f2 	udiv	r3, r4, r2
 8005f7e:	fb02 4413 	mls	r4, r2, r3, r4
  imu.actual_compass_heading = h_sum/HEADING_SMOOTH;
 8005f82:	491a      	ldr	r1, [pc, #104]	; (8005fec <CAL_Heading+0x1c4>)
  ind %= HEADING_SMOOTH;
 8005f84:	702c      	strb	r4, [r5, #0]
  h_sum -= heading[ind];
 8005f86:	6038      	str	r0, [r7, #0]
  imu.actual_compass_heading = h_sum/HEADING_SMOOTH;
 8005f88:	f7fa ff8c 	bl	8000ea4 <__aeabi_fdiv>
  if (imu.actual_compass_heading < 0){
 8005f8c:	2100      	movs	r1, #0
  imu.actual_compass_heading = h_sum/HEADING_SMOOTH;
 8005f8e:	4604      	mov	r4, r0
  if (imu.actual_compass_heading < 0){
 8005f90:	f7fb f872 	bl	8001078 <__aeabi_fcmplt>
    imu.actual_compass_heading += 360;
 8005f94:	4916      	ldr	r1, [pc, #88]	; (8005ff0 <CAL_Heading+0x1c8>)
  if (imu.actual_compass_heading < 0){
 8005f96:	b128      	cbz	r0, 8005fa4 <CAL_Heading+0x17c>
    imu.actual_compass_heading += 360;
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7fa fdc7 	bl	8000b2c <__addsf3>
  }else if (imu.actual_compass_heading >= 360){
	  imu.actual_compass_heading -= 360;
 8005f9e:	f8ca 009c 	str.w	r0, [sl, #156]	; 0x9c
 8005fa2:	e005      	b.n	8005fb0 <CAL_Heading+0x188>
  }else if (imu.actual_compass_heading >= 360){
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7fb f87b 	bl	80010a0 <__aeabi_fcmpge>
 8005faa:	b950      	cbnz	r0, 8005fc2 <CAL_Heading+0x19a>
  imu.actual_compass_heading = h_sum/HEADING_SMOOTH;
 8005fac:	f8ca 409c 	str.w	r4, [sl, #156]	; 0x9c
  }

  att.mag_heading = (int16_t) imu.actual_compass_heading;
 8005fb0:	f8da 009c 	ldr.w	r0, [sl, #156]	; 0x9c
 8005fb4:	f7fb f89e 	bl	80010f4 <__aeabi_f2iz>
 8005fb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <CAL_Heading+0x1cc>)
 8005fba:	80d8      	strh	r0, [r3, #6]
}
 8005fbc:	b006      	add	sp, #24
 8005fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  imu.actual_compass_heading -= 360;
 8005fc2:	490b      	ldr	r1, [pc, #44]	; (8005ff0 <CAL_Heading+0x1c8>)
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f7fa fdaf 	bl	8000b28 <__aeabi_fsub>
 8005fca:	e7e8      	b.n	8005f9e <CAL_Heading+0x176>
 8005fcc:	f3af 8000 	nop.w
 8005fd0:	22d4405f 	.word	0x22d4405f
 8005fd4:	3f91df47 	.word	0x3f91df47
 8005fd8:	1a63c1f8 	.word	0x1a63c1f8
 8005fdc:	404ca5dc 	.word	0x404ca5dc
 8005fe0:	200007f8 	.word	0x200007f8
 8005fe4:	200007a4 	.word	0x200007a4
 8005fe8:	200007a8 	.word	0x200007a8
 8005fec:	41a00000 	.word	0x41a00000
 8005ff0:	43b40000 	.word	0x43b40000
 8005ff4:	20000b7c 	.word	0x20000b7c
 8005ff8:	20001030 	.word	0x20001030

08005ffc <Temp_getADC>:

void Temp_getADC(void){
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 8005ffc:	2302      	movs	r3, #2
void Temp_getADC(void){
 8005ffe:	b513      	push	{r0, r1, r4, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 8006000:	4c0c      	ldr	r4, [pc, #48]	; (8006034 <Temp_getADC+0x38>)
 8006002:	2201      	movs	r2, #1
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	2141      	movs	r1, #65	; 0x41
 8006008:	4623      	mov	r3, r4
 800600a:	20d2      	movs	r0, #210	; 0xd2
 800600c:	f7fe fa08 	bl	8004420 <I2C_ByteRead>
	/* Get acceleration */
	imu.rawTemp = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8006010:	7823      	ldrb	r3, [r4, #0]
 8006012:	7860      	ldrb	r0, [r4, #1]
 8006014:	4c08      	ldr	r4, [pc, #32]	; (8006038 <Temp_getADC+0x3c>)
 8006016:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800601a:	b200      	sxth	r0, r0
 800601c:	8260      	strh	r0, [r4, #18]
	imu.Temp = ((float)imu.rawTemp / 337.87f) + 21.0f;
 800601e:	f7fa fe39 	bl	8000c94 <__aeabi_i2f>
 8006022:	4906      	ldr	r1, [pc, #24]	; (800603c <Temp_getADC+0x40>)
 8006024:	f7fa ff3e 	bl	8000ea4 <__aeabi_fdiv>
 8006028:	4905      	ldr	r1, [pc, #20]	; (8006040 <Temp_getADC+0x44>)
 800602a:	f7fa fd7f 	bl	8000b2c <__addsf3>
 800602e:	6520      	str	r0, [r4, #80]	; 0x50
}
 8006030:	b002      	add	sp, #8
 8006032:	bd10      	pop	{r4, pc}
 8006034:	200010e4 	.word	0x200010e4
 8006038:	20001030 	.word	0x20001030
 800603c:	43a8ef5c 	.word	0x43a8ef5c
 8006040:	41a80000 	.word	0x41a80000

08006044 <calibrateMPU9250>:
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

// reset device, reset all registers, clear gyro and accelerometer bias registers
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8006044:	2380      	movs	r3, #128	; 0x80
void calibrateMPU9250(float * dest1, float * dest2){
 8006046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_Delay(100); // for stability
// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 800604a:	2601      	movs	r6, #1
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 800604c:	2400      	movs	r4, #0
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 800604e:	f04f 0b0c 	mov.w	fp, #12
void calibrateMPU9250(float * dest1, float * dest2){
 8006052:	b087      	sub	sp, #28
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8006054:	2207      	movs	r2, #7
 8006056:	9300      	str	r3, [sp, #0]
void calibrateMPU9250(float * dest1, float * dest2){
 8006058:	4682      	mov	sl, r0
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 800605a:	2308      	movs	r3, #8
 800605c:	20d2      	movs	r0, #210	; 0xd2
void calibrateMPU9250(float * dest1, float * dest2){
 800605e:	4689      	mov	r9, r1
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8006060:	216b      	movs	r1, #107	; 0x6b
 8006062:	f7fe f977 	bl	8004354 <I2C_ByteWrite>
  HAL_Delay(100); // for stability
 8006066:	2064      	movs	r0, #100	; 0x64
 8006068:	f7fb fa5a 	bl	8001520 <HAL_Delay>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 800606c:	9600      	str	r6, [sp, #0]
 800606e:	2308      	movs	r3, #8
 8006070:	2207      	movs	r2, #7
 8006072:	216b      	movs	r1, #107	; 0x6b
 8006074:	20d2      	movs	r0, #210	; 0xd2
 8006076:	f7fe f96d 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 800607a:	2308      	movs	r3, #8
 800607c:	2207      	movs	r2, #7
 800607e:	216c      	movs	r1, #108	; 0x6c
 8006080:	20d2      	movs	r0, #210	; 0xd2
 8006082:	9400      	str	r4, [sp, #0]
 8006084:	f7fe f966 	bl	8004354 <I2C_ByteWrite>
  HAL_Delay(200); // for stability
 8006088:	20c8      	movs	r0, #200	; 0xc8
 800608a:	f7fb fa49 	bl	8001520 <HAL_Delay>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
 800608e:	2308      	movs	r3, #8
 8006090:	2207      	movs	r2, #7
 8006092:	2138      	movs	r1, #56	; 0x38
 8006094:	20d2      	movs	r0, #210	; 0xd2
 8006096:	9400      	str	r4, [sp, #0]
 8006098:	f7fe f95c 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
 800609c:	2308      	movs	r3, #8
 800609e:	2207      	movs	r2, #7
 80060a0:	2123      	movs	r1, #35	; 0x23
 80060a2:	20d2      	movs	r0, #210	; 0xd2
 80060a4:	9400      	str	r4, [sp, #0]
 80060a6:	f7fe f955 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
 80060aa:	2308      	movs	r3, #8
 80060ac:	2207      	movs	r2, #7
 80060ae:	216b      	movs	r1, #107	; 0x6b
 80060b0:	20d2      	movs	r0, #210	; 0xd2
 80060b2:	9400      	str	r4, [sp, #0]
 80060b4:	f7fe f94e 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
 80060b8:	2308      	movs	r3, #8
 80060ba:	2207      	movs	r2, #7
 80060bc:	2124      	movs	r1, #36	; 0x24
 80060be:	20d2      	movs	r0, #210	; 0xd2
 80060c0:	9400      	str	r4, [sp, #0]
 80060c2:	f7fe f947 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
 80060c6:	2308      	movs	r3, #8
 80060c8:	2207      	movs	r2, #7
 80060ca:	216a      	movs	r1, #106	; 0x6a
 80060cc:	20d2      	movs	r0, #210	; 0xd2
 80060ce:	9400      	str	r4, [sp, #0]
 80060d0:	f7fe f940 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 80060d4:	2308      	movs	r3, #8
 80060d6:	2207      	movs	r2, #7
 80060d8:	216a      	movs	r1, #106	; 0x6a
 80060da:	20d2      	movs	r0, #210	; 0xd2
 80060dc:	f8cd b000 	str.w	fp, [sp]
 80060e0:	f7fe f938 	bl	8004354 <I2C_ByteWrite>
  HAL_Delay(15); // for stability
 80060e4:	200f      	movs	r0, #15
 80060e6:	f7fb fa1b 	bl	8001520 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation.

  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x01); // Set low-pass filter to 188 Hz
 80060ea:	9600      	str	r6, [sp, #0]
 80060ec:	2308      	movs	r3, #8
 80060ee:	2207      	movs	r2, #7
 80060f0:	211a      	movs	r1, #26
 80060f2:	20d2      	movs	r0, #210	; 0xd2
 80060f4:	f7fe f92e 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set sample rate to 1 kHz
 80060f8:	2308      	movs	r3, #8
 80060fa:	2207      	movs	r2, #7
 80060fc:	2119      	movs	r1, #25
 80060fe:	20d2      	movs	r0, #210	; 0xd2
 8006100:	9400      	str	r4, [sp, #0]
 8006102:	f7fe f927 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8006106:	2308      	movs	r3, #8
 8006108:	2207      	movs	r2, #7
 800610a:	211b      	movs	r1, #27
 800610c:	20d2      	movs	r0, #210	; 0xd2
 800610e:	9400      	str	r4, [sp, #0]
 8006110:	f7fe f920 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8006114:	2308      	movs	r3, #8
 8006116:	2207      	movs	r2, #7
 8006118:	211c      	movs	r1, #28
 800611a:	20d2      	movs	r0, #210	; 0xd2
 800611c:	9400      	str	r4, [sp, #0]
 800611e:	f7fe f919 	bl	8004354 <I2C_ByteWrite>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x40); // Enable FIFO
 8006122:	2340      	movs	r3, #64	; 0x40
 8006124:	2207      	movs	r2, #7
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	216a      	movs	r1, #106	; 0x6a
 800612a:	2308      	movs	r3, #8
 800612c:	20d2      	movs	r0, #210	; 0xd2
 800612e:	f7fe f911 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8006132:	2378      	movs	r3, #120	; 0x78
 8006134:	2207      	movs	r2, #7
 8006136:	2123      	movs	r1, #35	; 0x23
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	20d2      	movs	r0, #210	; 0xd2
 800613c:	2308      	movs	r3, #8
 800613e:	f7fe f909 	bl	8004354 <I2C_ByteWrite>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8006142:	2028      	movs	r0, #40	; 0x28
 8006144:	f7fb f9ec 	bl	8001520 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable gyro and accelerometer sensors for FIFO
 8006148:	2308      	movs	r3, #8
 800614a:	2207      	movs	r2, #7
 800614c:	2123      	movs	r1, #35	; 0x23
 800614e:	20d2      	movs	r0, #210	; 0xd2
 8006150:	9400      	str	r4, [sp, #0]
 8006152:	f7fe f8ff 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_COUNTH, 1, rawADC, 2);// read FIFO sample count
 8006156:	2302      	movs	r3, #2
 8006158:	4d56      	ldr	r5, [pc, #344]	; (80062b4 <calibrateMPU9250+0x270>)
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	4632      	mov	r2, r6
 800615e:	462b      	mov	r3, r5
 8006160:	2172      	movs	r1, #114	; 0x72
 8006162:	20d2      	movs	r0, #210	; 0xd2
 8006164:	f7fe f95c 	bl	8004420 <I2C_ByteRead>
  fifo_count = ((uint16_t)rawADC[0] << 8) | rawADC[1];
 8006168:	782b      	ldrb	r3, [r5, #0]
 800616a:	786e      	ldrb	r6, [r5, #1]
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 800616c:	4627      	mov	r7, r4
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 800616e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8006172:	fbb6 f6fb 	udiv	r6, r6, fp
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8006176:	46a0      	mov	r8, r4
 8006178:	9402      	str	r4, [sp, #8]
 800617a:	9405      	str	r4, [sp, #20]
 800617c:	9404      	str	r4, [sp, #16]
 800617e:	9403      	str	r4, [sp, #12]

  for (ii = 0; ii < packet_count; ii++) {
 8006180:	b2a3      	uxth	r3, r4
 8006182:	429e      	cmp	r6, r3
 8006184:	d860      	bhi.n	8006248 <calibrateMPU9250+0x204>
    gyro_bias[2]  += (int32_t) gyro_temp[2];

}
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
    accel_bias[1] /= (int32_t) packet_count;
    accel_bias[2] /= (int32_t) packet_count;
 8006186:	9b02      	ldr	r3, [sp, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 8006188:	9a03      	ldr	r2, [sp, #12]
    accel_bias[2] /= (int32_t) packet_count;
 800618a:	fb93 f3f6 	sdiv	r3, r3, r6
    gyro_bias[0]  /= (int32_t) packet_count;
 800618e:	fb92 f0f6 	sdiv	r0, r2, r6
    gyro_bias[1]  /= (int32_t) packet_count;
 8006192:	9a04      	ldr	r2, [sp, #16]
    gyro_bias[2]  /= (int32_t) packet_count;

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8006194:	2b00      	cmp	r3, #0
    gyro_bias[1]  /= (int32_t) packet_count;
 8006196:	fb92 f5f6 	sdiv	r5, r2, r6
    gyro_bias[2]  /= (int32_t) packet_count;
 800619a:	9a05      	ldr	r2, [sp, #20]
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 800619c:	bfcc      	ite	gt
 800619e:	f5a3 4480 	subgt.w	r4, r3, #16384	; 0x4000
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 80061a2:	f503 4480 	addle.w	r4, r3, #16384	; 0x4000
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80061a6:	fb98 f8f6 	sdiv	r8, r8, r6
    accel_bias[1] /= (int32_t) packet_count;
 80061aa:	fb97 f7f6 	sdiv	r7, r7, r6
    gyro_bias[2]  /= (int32_t) packet_count;
 80061ae:	fb92 f6f6 	sdiv	r6, r2, r6
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YG_OFFS_USRL, 7, 8, data[3]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRH, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRL, 7, 8, data[5]);
*/
	
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 80061b2:	f7fa fd6f 	bl	8000c94 <__aeabi_i2f>
 80061b6:	4940      	ldr	r1, [pc, #256]	; (80062b8 <calibrateMPU9250+0x274>)
 80061b8:	f7fa fe74 	bl	8000ea4 <__aeabi_fdiv>
 80061bc:	f8ca 0000 	str.w	r0, [sl]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80061c0:	4628      	mov	r0, r5
 80061c2:	f7fa fd67 	bl	8000c94 <__aeabi_i2f>
 80061c6:	493c      	ldr	r1, [pc, #240]	; (80062b8 <calibrateMPU9250+0x274>)
 80061c8:	f7fa fe6c 	bl	8000ea4 <__aeabi_fdiv>
 80061cc:	f8ca 0004 	str.w	r0, [sl, #4]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80061d0:	4630      	mov	r0, r6
 80061d2:	f7fa fd5f 	bl	8000c94 <__aeabi_i2f>
 80061d6:	4938      	ldr	r1, [pc, #224]	; (80062b8 <calibrateMPU9250+0x274>)
 80061d8:	f7fa fe64 	bl	8000ea4 <__aeabi_fdiv>
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 80061dc:	2502      	movs	r5, #2
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80061de:	f8ca 0008 	str.w	r0, [sl, #8]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 80061e2:	9500      	str	r5, [sp, #0]
 80061e4:	4b33      	ldr	r3, [pc, #204]	; (80062b4 <calibrateMPU9250+0x270>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	2177      	movs	r1, #119	; 0x77
 80061ea:	20d2      	movs	r0, #210	; 0xd2
 80061ec:	f7fe f918 	bl	8004420 <I2C_ByteRead>
  accel_bias_reg[0] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YA_OFFSET_H, 1, rawADC, 2);
 80061f0:	9500      	str	r5, [sp, #0]
 80061f2:	4b30      	ldr	r3, [pc, #192]	; (80062b4 <calibrateMPU9250+0x270>)
 80061f4:	2201      	movs	r2, #1
 80061f6:	217a      	movs	r1, #122	; 0x7a
 80061f8:	20d2      	movs	r0, #210	; 0xd2
 80061fa:	f7fe f911 	bl	8004420 <I2C_ByteRead>
  accel_bias_reg[1] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 1, rawADC, 2);
 80061fe:	4b2d      	ldr	r3, [pc, #180]	; (80062b4 <calibrateMPU9250+0x270>)
 8006200:	2201      	movs	r2, #1
 8006202:	217d      	movs	r1, #125	; 0x7d
 8006204:	9500      	str	r5, [sp, #0]
 8006206:	20d2      	movs	r0, #210	; 0xd2
 8006208:	f7fe f90a 	bl	8004420 <I2C_ByteRead>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_L, 7, 8, data[5]);*/


// Output scaled accelerometer biases for manual subtraction in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 800620c:	4640      	mov	r0, r8
 800620e:	f7fa fd41 	bl	8000c94 <__aeabi_i2f>
 8006212:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8006216:	f7fa fd91 	bl	8000d3c <__aeabi_fmul>
 800621a:	f8c9 0000 	str.w	r0, [r9]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 800621e:	4638      	mov	r0, r7
 8006220:	f7fa fd38 	bl	8000c94 <__aeabi_i2f>
 8006224:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8006228:	f7fa fd88 	bl	8000d3c <__aeabi_fmul>
 800622c:	f8c9 0004 	str.w	r0, [r9, #4]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8006230:	4620      	mov	r0, r4
 8006232:	f7fa fd2f 	bl	8000c94 <__aeabi_i2f>
 8006236:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 800623a:	f7fa fd7f 	bl	8000d3c <__aeabi_fmul>
 800623e:	f8c9 0008 	str.w	r0, [r9, #8]
}
 8006242:	b007      	add	sp, #28
 8006244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_FIFO_R_W, 1, rawADC, 12);// read data for averaging
 8006248:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <calibrateMPU9250+0x270>)
 800624a:	2201      	movs	r2, #1
 800624c:	f8cd b000 	str.w	fp, [sp]
 8006250:	2174      	movs	r1, #116	; 0x74
 8006252:	20d2      	movs	r0, #210	; 0xd2
 8006254:	f7fe f8e4 	bl	8004420 <I2C_ByteRead>
    accel_temp[0] = (int16_t) (((int16_t)rawADC[0] << 8) | rawADC[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8006258:	782a      	ldrb	r2, [r5, #0]
 800625a:	786b      	ldrb	r3, [r5, #1]
 800625c:	3401      	adds	r4, #1
 800625e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8006262:	b21b      	sxth	r3, r3
    accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 8006264:	78aa      	ldrb	r2, [r5, #2]
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8006266:	4498      	add	r8, r3
    accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 8006268:	78eb      	ldrb	r3, [r5, #3]
 800626a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[1] += (int32_t) accel_temp[1];
 800626e:	b21b      	sxth	r3, r3
    accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 8006270:	792a      	ldrb	r2, [r5, #4]
    accel_bias[1] += (int32_t) accel_temp[1];
 8006272:	441f      	add	r7, r3
    accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 8006274:	796b      	ldrb	r3, [r5, #5]
 8006276:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[2] += (int32_t) accel_temp[2];
 800627a:	9a02      	ldr	r2, [sp, #8]
 800627c:	b21b      	sxth	r3, r3
 800627e:	441a      	add	r2, r3
 8006280:	9202      	str	r2, [sp, #8]
    gyro_temp[0]  = (int16_t) (((int16_t)rawADC[6] << 8) | rawADC[7]  ) ;
 8006282:	79eb      	ldrb	r3, [r5, #7]
 8006284:	79aa      	ldrb	r2, [r5, #6]
 8006286:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 800628a:	9a03      	ldr	r2, [sp, #12]
 800628c:	b21b      	sxth	r3, r3
 800628e:	441a      	add	r2, r3
 8006290:	9203      	str	r2, [sp, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)rawADC[8] << 8) | rawADC[9]  ) ;
 8006292:	7a6b      	ldrb	r3, [r5, #9]
 8006294:	7a2a      	ldrb	r2, [r5, #8]
 8006296:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 800629a:	9a04      	ldr	r2, [sp, #16]
 800629c:	b21b      	sxth	r3, r3
 800629e:	441a      	add	r2, r3
 80062a0:	9204      	str	r2, [sp, #16]
    gyro_temp[2]  = (int16_t) (((int16_t)rawADC[10] << 8) | rawADC[11]) ;
 80062a2:	7aeb      	ldrb	r3, [r5, #11]
 80062a4:	7aaa      	ldrb	r2, [r5, #10]
 80062a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 80062aa:	9a05      	ldr	r2, [sp, #20]
 80062ac:	b21b      	sxth	r3, r3
 80062ae:	441a      	add	r2, r3
 80062b0:	9205      	str	r2, [sp, #20]
 80062b2:	e765      	b.n	8006180 <calibrateMPU9250+0x13c>
 80062b4:	200010e4 	.word	0x200010e4
 80062b8:	43030000 	.word	0x43030000

080062bc <initAK8963>:
void initAK8963(float * destination){
 80062bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// First extract the factory calibration for each magnetometer axis
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 80062be:	2600      	movs	r6, #0
void initAK8963(float * destination){
 80062c0:	4605      	mov	r5, r0
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 80062c2:	2308      	movs	r3, #8
 80062c4:	2207      	movs	r2, #7
 80062c6:	210a      	movs	r1, #10
 80062c8:	9600      	str	r6, [sp, #0]
 80062ca:	2018      	movs	r0, #24
 80062cc:	f7fe f842 	bl	8004354 <I2C_ByteWrite>
	  HAL_Delay(10);
 80062d0:	200a      	movs	r0, #10
 80062d2:	f7fb f925 	bl	8001520 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x0F);// Enter Fuse ROM access mode
 80062d6:	230f      	movs	r3, #15
 80062d8:	2207      	movs	r2, #7
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	210a      	movs	r1, #10
 80062de:	2308      	movs	r3, #8
 80062e0:	2018      	movs	r0, #24
 80062e2:	f7fe f837 	bl	8004354 <I2C_ByteWrite>
	  HAL_Delay(10);
 80062e6:	200a      	movs	r0, #10
 80062e8:	f7fb f91a 	bl	8001520 <HAL_Delay>
	  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, AK8963_ASAX, 1, rawADC, 3);// Read the x-, y-, and z-axis calibration values
 80062ec:	2303      	movs	r3, #3
 80062ee:	4c26      	ldr	r4, [pc, #152]	; (8006388 <initAK8963+0xcc>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2110      	movs	r1, #16
 80062f6:	4623      	mov	r3, r4
 80062f8:	2018      	movs	r0, #24
 80062fa:	f7fe f891 	bl	8004420 <I2C_ByteRead>
	  destination[0] =  (float)(rawADC[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 80062fe:	7820      	ldrb	r0, [r4, #0]
 8006300:	3880      	subs	r0, #128	; 0x80
 8006302:	f7fa fcc7 	bl	8000c94 <__aeabi_i2f>
 8006306:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800630a:	f7fa fd17 	bl	8000d3c <__aeabi_fmul>
 800630e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006312:	f7fa fc0b 	bl	8000b2c <__addsf3>
 8006316:	6028      	str	r0, [r5, #0]
	  destination[1] =  (float)(rawADC[1] - 128)/256.0f + 1.0f;
 8006318:	7860      	ldrb	r0, [r4, #1]
 800631a:	3880      	subs	r0, #128	; 0x80
 800631c:	f7fa fcba 	bl	8000c94 <__aeabi_i2f>
 8006320:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006324:	f7fa fd0a 	bl	8000d3c <__aeabi_fmul>
 8006328:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800632c:	f7fa fbfe 	bl	8000b2c <__addsf3>
 8006330:	6068      	str	r0, [r5, #4]
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 8006332:	78a0      	ldrb	r0, [r4, #2]
 8006334:	3880      	subs	r0, #128	; 0x80
 8006336:	f7fa fcad 	bl	8000c94 <__aeabi_i2f>
 800633a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800633e:	f7fa fcfd 	bl	8000d3c <__aeabi_fmul>
 8006342:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006346:	f7fa fbf1 	bl	8000b2c <__addsf3>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 800634a:	2308      	movs	r3, #8
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 800634c:	60a8      	str	r0, [r5, #8]
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 800634e:	2207      	movs	r2, #7
 8006350:	210a      	movs	r1, #10
 8006352:	9600      	str	r6, [sp, #0]
 8006354:	2018      	movs	r0, #24
 8006356:	f7fd fffd 	bl	8004354 <I2C_ByteWrite>
	  HAL_Delay(10);
 800635a:	200a      	movs	r0, #10
 800635c:	f7fb f8e0 	bl	8001520 <HAL_Delay>
	  // Configure the magnetometer for continuous read and highest resolution
	  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <initAK8963+0xd0>)
 8006362:	210a      	movs	r1, #10
 8006364:	781a      	ldrb	r2, [r3, #0]
 8006366:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <initAK8963+0xd4>)
 8006368:	2018      	movs	r0, #24
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006370:	b2db      	uxtb	r3, r3
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	2207      	movs	r2, #7
 8006376:	2308      	movs	r3, #8
 8006378:	f7fd ffec 	bl	8004354 <I2C_ByteWrite>
	  HAL_Delay(10);
 800637c:	200a      	movs	r0, #10
}
 800637e:	b002      	add	sp, #8
 8006380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  HAL_Delay(10);
 8006384:	f7fb b8cc 	b.w	8001520 <HAL_Delay>
 8006388:	200010e4 	.word	0x200010e4
 800638c:	20000009 	.word	0x20000009
 8006390:	20000008 	.word	0x20000008
 8006394:	00000000 	.word	0x00000000

08006398 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 8006398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t selfTest[6] = {0, 0, 0, 0, 0, 0};
   uint16_t i, ii;
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 800639c:	2400      	movs	r4, #0
   float factoryTrim[6];
   uint8_t FS = GFS_250DPS;

   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800639e:	2502      	movs	r5, #2
{
 80063a0:	b095      	sub	sp, #84	; 0x54
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80063a2:	f10d 0a20 	add.w	sl, sp, #32
 80063a6:	ae0a      	add	r6, sp, #40	; 0x28
 80063a8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80063ac:	f8aa 4004 	strh.w	r4, [sl, #4]
 80063b0:	80b4      	strh	r4, [r6, #4]
 80063b2:	f8ab 4004 	strh.w	r4, [fp, #4]
{
 80063b6:	9005      	str	r0, [sp, #20]
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 80063b8:	9400      	str	r4, [sp, #0]
 80063ba:	2308      	movs	r3, #8
 80063bc:	2207      	movs	r2, #7
 80063be:	2119      	movs	r1, #25
 80063c0:	20d2      	movs	r0, #210	; 0xd2
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80063c2:	9406      	str	r4, [sp, #24]
 80063c4:	f8ad 401c 	strh.w	r4, [sp, #28]
 80063c8:	9408      	str	r4, [sp, #32]
 80063ca:	940a      	str	r4, [sp, #40]	; 0x28
 80063cc:	940c      	str	r4, [sp, #48]	; 0x30
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 80063ce:	f7fd ffc1 	bl	8004354 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80063d2:	9500      	str	r5, [sp, #0]
 80063d4:	2308      	movs	r3, #8
 80063d6:	2207      	movs	r2, #7
 80063d8:	211a      	movs	r1, #26
 80063da:	20d2      	movs	r0, #210	; 0xd2
 80063dc:	f7fd ffba 	bl	8004354 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, FS<<3);// Set full scale range for the gyro to 250 dps
 80063e0:	9400      	str	r4, [sp, #0]
 80063e2:	2308      	movs	r3, #8
 80063e4:	2207      	movs	r2, #7
 80063e6:	211b      	movs	r1, #27
 80063e8:	20d2      	movs	r0, #210	; 0xd2
 80063ea:	f7fd ffb3 	bl	8004354 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, 0x1D, 7, 8, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80063ee:	9500      	str	r5, [sp, #0]
 80063f0:	2308      	movs	r3, #8
 80063f2:	2207      	movs	r2, #7
 80063f4:	211d      	movs	r1, #29
 80063f6:	20d2      	movs	r0, #210	; 0xd2
 80063f8:	f7fd ffac 	bl	8004354 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, FS<<3);// Set full scale range for the accelerometer to 2 g
 80063fc:	9400      	str	r4, [sp, #0]
 80063fe:	2308      	movs	r3, #8
 8006400:	2207      	movs	r2, #7
 8006402:	211c      	movs	r1, #28
 8006404:	20d2      	movs	r0, #210	; 0xd2
 8006406:	f7fd ffa5 	bl	8004354 <I2C_ByteWrite>
 800640a:	25c8      	movs	r5, #200	; 0xc8

  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);  // Read the six raw data registers into data array
 800640c:	4cd2      	ldr	r4, [pc, #840]	; (8006758 <MPU9250SelfTest+0x3c0>)
 800640e:	2706      	movs	r7, #6
 8006410:	4bd1      	ldr	r3, [pc, #836]	; (8006758 <MPU9250SelfTest+0x3c0>)
 8006412:	2201      	movs	r2, #1
 8006414:	213b      	movs	r1, #59	; 0x3b
 8006416:	20d2      	movs	r0, #210	; 0xd2
 8006418:	9700      	str	r7, [sp, #0]
 800641a:	f7fe f801 	bl	8004420 <I2C_ByteRead>
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800641e:	7822      	ldrb	r2, [r4, #0]
 8006420:	7863      	ldrb	r3, [r4, #1]
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006422:	2143      	movs	r1, #67	; 0x43
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006424:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006428:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 800642c:	20d2      	movs	r0, #210	; 0xd2
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800642e:	4413      	add	r3, r2
 8006430:	f8ad 3020 	strh.w	r3, [sp, #32]
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8006434:	78a2      	ldrb	r2, [r4, #2]
 8006436:	78e3      	ldrb	r3, [r4, #3]
 8006438:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800643c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8006440:	4413      	add	r3, r2
 8006442:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006446:	7922      	ldrb	r2, [r4, #4]
 8006448:	7963      	ldrb	r3, [r4, #5]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 800644a:	9700      	str	r7, [sp, #0]
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 800644c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006450:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8006454:	4413      	add	r3, r2
 8006456:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 800645a:	2201      	movs	r2, #1
 800645c:	4bbe      	ldr	r3, [pc, #760]	; (8006758 <MPU9250SelfTest+0x3c0>)
 800645e:	f7fd ffdf 	bl	8004420 <I2C_ByteRead>
  gAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006462:	7822      	ldrb	r2, [r4, #0]
 8006464:	7863      	ldrb	r3, [r4, #1]
 8006466:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800646a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800646e:	4413      	add	r3, r2
 8006470:	f8ad 3018 	strh.w	r3, [sp, #24]
  gAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8006474:	78a2      	ldrb	r2, [r4, #2]
 8006476:	78e3      	ldrb	r3, [r4, #3]
 8006478:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800647c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8006480:	4413      	add	r3, r2
 8006482:	f8ad 301a 	strh.w	r3, [sp, #26]
  gAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006486:	7922      	ldrb	r2, [r4, #4]
 8006488:	7963      	ldrb	r3, [r4, #5]
 800648a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800648e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006492:	4413      	add	r3, r2
 8006494:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006498:	1e6b      	subs	r3, r5, #1
 800649a:	b29d      	uxth	r5, r3
  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800649c:	2d00      	cmp	r5, #0
 800649e:	d1b6      	bne.n	800640e <MPU9250SelfTest+0x76>
 80064a0:	462b      	mov	r3, r5
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
  aAvg[ii] /= 200;
 80064a2:	21c8      	movs	r1, #200	; 0xc8
 80064a4:	f93a 2013 	ldrsh.w	r2, [sl, r3, lsl #1]
  gAvg[ii] /= 200;
 80064a8:	a806      	add	r0, sp, #24
  aAvg[ii] /= 200;
 80064aa:	fb92 f2f1 	sdiv	r2, r2, r1
 80064ae:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
  gAvg[ii] /= 200;
 80064b2:	aa06      	add	r2, sp, #24
 80064b4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80064b8:	fb92 f2f1 	sdiv	r2, r2, r1
 80064bc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 80064c0:	3301      	adds	r3, #1
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d1ee      	bne.n	80064a4 <MPU9250SelfTest+0x10c>
  }

// Configure the accelerometer for self-test
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80064c6:	25e0      	movs	r5, #224	; 0xe0
 80064c8:	2308      	movs	r3, #8
 80064ca:	9500      	str	r5, [sp, #0]
 80064cc:	2207      	movs	r2, #7
 80064ce:	211c      	movs	r1, #28
 80064d0:	20d2      	movs	r0, #210	; 0xd2
 80064d2:	f7fd ff3f 	bl	8004354 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80064d6:	9500      	str	r5, [sp, #0]
 80064d8:	2308      	movs	r3, #8
 80064da:	2207      	movs	r2, #7
 80064dc:	211b      	movs	r1, #27
 80064de:	20d2      	movs	r0, #210	; 0xd2
 80064e0:	f7fd ff38 	bl	8004354 <I2C_ByteWrite>
   HAL_Delay(25); // Delay a while to let the device stabilize
 80064e4:	2019      	movs	r0, #25
 80064e6:	f7fb f81b 	bl	8001520 <HAL_Delay>
 80064ea:	25c8      	movs	r5, #200	; 0xc8

  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6); // Read the six raw data registers into data array
 80064ec:	4f9a      	ldr	r7, [pc, #616]	; (8006758 <MPU9250SelfTest+0x3c0>)
 80064ee:	f04f 0806 	mov.w	r8, #6
 80064f2:	463b      	mov	r3, r7
 80064f4:	2201      	movs	r2, #1
 80064f6:	213b      	movs	r1, #59	; 0x3b
 80064f8:	20d2      	movs	r0, #210	; 0xd2
 80064fa:	f8cd 8000 	str.w	r8, [sp]
 80064fe:	f7fd ff8f 	bl	8004420 <I2C_ByteRead>
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006502:	7822      	ldrb	r2, [r4, #0]
 8006504:	7863      	ldrb	r3, [r4, #1]
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006506:	2143      	movs	r1, #67	; 0x43
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006508:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800650c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006510:	20d2      	movs	r0, #210	; 0xd2
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006512:	4413      	add	r3, r2
 8006514:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8006518:	78a2      	ldrb	r2, [r4, #2]
 800651a:	78e3      	ldrb	r3, [r4, #3]
 800651c:	3d01      	subs	r5, #1
 800651e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006522:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8006526:	b2ad      	uxth	r5, r5
 8006528:	4413      	add	r3, r2
 800652a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 800652e:	7922      	ldrb	r2, [r4, #4]
 8006530:	7963      	ldrb	r3, [r4, #5]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006532:	f8cd 8000 	str.w	r8, [sp]
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006536:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800653a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800653e:	4413      	add	r3, r2
 8006540:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006544:	2201      	movs	r2, #1
 8006546:	463b      	mov	r3, r7
 8006548:	f7fd ff6a 	bl	8004420 <I2C_ByteRead>
  gSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800654c:	7822      	ldrb	r2, [r4, #0]
 800654e:	7863      	ldrb	r3, [r4, #1]
 8006550:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006554:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8006558:	4413      	add	r3, r2
 800655a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  gSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 800655e:	78a2      	ldrb	r2, [r4, #2]
 8006560:	78e3      	ldrb	r3, [r4, #3]
 8006562:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006566:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800656a:	4413      	add	r3, r2
 800656c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  gSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006570:	7922      	ldrb	r2, [r4, #4]
 8006572:	7963      	ldrb	r3, [r4, #5]
 8006574:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006578:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800657c:	4413      	add	r3, r2
 800657e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8006582:	2d00      	cmp	r5, #0
 8006584:	d1b3      	bne.n	80064ee <MPU9250SelfTest+0x156>
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
  aSTAvg[ii] /= 200;
 8006586:	22c8      	movs	r2, #200	; 0xc8
 8006588:	f936 3015 	ldrsh.w	r3, [r6, r5, lsl #1]
 800658c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006590:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
  gSTAvg[ii] /= 200;
 8006594:	f93b 3015 	ldrsh.w	r3, [fp, r5, lsl #1]
 8006598:	fb93 f3f2 	sdiv	r3, r3, r2
 800659c:	f82b 3015 	strh.w	r3, [fp, r5, lsl #1]
 80065a0:	3501      	adds	r5, #1
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80065a2:	2d03      	cmp	r5, #3
 80065a4:	d1f0      	bne.n	8006588 <MPU9250SelfTest+0x1f0>
  }

 // Configure the gyro and accelerometer for normal operation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 80065a6:	2400      	movs	r4, #0
 80065a8:	2308      	movs	r3, #8
 80065aa:	2207      	movs	r2, #7
 80065ac:	211c      	movs	r1, #28
 80065ae:	20d2      	movs	r0, #210	; 0xd2
 80065b0:	9400      	str	r4, [sp, #0]
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
  HAL_Delay(25); // Delay a while to let the device stabilize

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 80065b2:	4f69      	ldr	r7, [pc, #420]	; (8006758 <MPU9250SelfTest+0x3c0>)
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 80065b4:	f7fd fece 	bl	8004354 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
 80065b8:	2308      	movs	r3, #8
 80065ba:	2207      	movs	r2, #7
 80065bc:	211b      	movs	r1, #27
 80065be:	20d2      	movs	r0, #210	; 0xd2
 80065c0:	9400      	str	r4, [sp, #0]
 80065c2:	f7fd fec7 	bl	8004354 <I2C_ByteWrite>
  HAL_Delay(25); // Delay a while to let the device stabilize
 80065c6:	2019      	movs	r0, #25
 80065c8:	f7fa ffaa 	bl	8001520 <HAL_Delay>
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 80065cc:	463b      	mov	r3, r7
 80065ce:	9500      	str	r5, [sp, #0]
 80065d0:	2201      	movs	r2, #1
 80065d2:	210d      	movs	r1, #13
 80065d4:	20d2      	movs	r0, #210	; 0xd2
 80065d6:	f7fd ff23 	bl	8004420 <I2C_ByteRead>
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 80065da:	78bb      	ldrb	r3, [r7, #2]
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
 80065dc:	f897 8000 	ldrb.w	r8, [r7]
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
 80065e0:	f897 9001 	ldrb.w	r9, [r7, #1]
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 80065e4:	2201      	movs	r2, #1
 80065e6:	4621      	mov	r1, r4
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 80065e8:	9302      	str	r3, [sp, #8]
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 80065ea:	9500      	str	r5, [sp, #0]
 80065ec:	463b      	mov	r3, r7
 80065ee:	20d2      	movs	r0, #210	; 0xd2
 80065f0:	f7fd ff16 	bl	8004420 <I2C_ByteRead>
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 80065f4:	783b      	ldrb	r3, [r7, #0]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 80065f6:	4640      	mov	r0, r8
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 80065f8:	9303      	str	r3, [sp, #12]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 80065fa:	787b      	ldrb	r3, [r7, #1]
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results
 80065fc:	78bd      	ldrb	r5, [r7, #2]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 80065fe:	9304      	str	r3, [sp, #16]
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8006600:	f7fa fb44 	bl	8000c8c <__aeabi_ui2f>
 8006604:	f7f9 ff10 	bl	8000428 <__aeabi_f2d>
 8006608:	2200      	movs	r2, #0
 800660a:	4b54      	ldr	r3, [pc, #336]	; (800675c <MPU9250SelfTest+0x3c4>)
 800660c:	f7f9 fdac 	bl	8000168 <__aeabi_dsub>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	a14c      	add	r1, pc, #304	; (adr r1, 8006748 <MPU9250SelfTest+0x3b0>)
 8006616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800661a:	f005 fe29 	bl	800c270 <pow>
 800661e:	a34c      	add	r3, pc, #304	; (adr r3, 8006750 <MPU9250SelfTest+0x3b8>)
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	f7f9 ff54 	bl	80004d0 <__aeabi_dmul>
 8006628:	f7fa fa2a 	bl	8000a80 <__aeabi_d2f>
 800662c:	900e      	str	r0, [sp, #56]	; 0x38
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 800662e:	4648      	mov	r0, r9
 8006630:	f7fa fb2c 	bl	8000c8c <__aeabi_ui2f>
 8006634:	f7f9 fef8 	bl	8000428 <__aeabi_f2d>
 8006638:	2200      	movs	r2, #0
 800663a:	4b48      	ldr	r3, [pc, #288]	; (800675c <MPU9250SelfTest+0x3c4>)
 800663c:	f7f9 fd94 	bl	8000168 <__aeabi_dsub>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	a140      	add	r1, pc, #256	; (adr r1, 8006748 <MPU9250SelfTest+0x3b0>)
 8006646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800664a:	f005 fe11 	bl	800c270 <pow>
 800664e:	a340      	add	r3, pc, #256	; (adr r3, 8006750 <MPU9250SelfTest+0x3b8>)
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	f7f9 ff3c 	bl	80004d0 <__aeabi_dmul>
 8006658:	f7fa fa12 	bl	8000a80 <__aeabi_d2f>
 800665c:	900f      	str	r0, [sp, #60]	; 0x3c
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 800665e:	9802      	ldr	r0, [sp, #8]
 8006660:	f7fa fb14 	bl	8000c8c <__aeabi_ui2f>
 8006664:	f7f9 fee0 	bl	8000428 <__aeabi_f2d>
 8006668:	2200      	movs	r2, #0
 800666a:	4b3c      	ldr	r3, [pc, #240]	; (800675c <MPU9250SelfTest+0x3c4>)
 800666c:	f7f9 fd7c 	bl	8000168 <__aeabi_dsub>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	a134      	add	r1, pc, #208	; (adr r1, 8006748 <MPU9250SelfTest+0x3b0>)
 8006676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800667a:	f005 fdf9 	bl	800c270 <pow>
 800667e:	a334      	add	r3, pc, #208	; (adr r3, 8006750 <MPU9250SelfTest+0x3b8>)
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f7f9 ff24 	bl	80004d0 <__aeabi_dmul>
 8006688:	f7fa f9fa 	bl	8000a80 <__aeabi_d2f>
 800668c:	9010      	str	r0, [sp, #64]	; 0x40
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 800668e:	9803      	ldr	r0, [sp, #12]
 8006690:	f7fa fafc 	bl	8000c8c <__aeabi_ui2f>
 8006694:	f7f9 fec8 	bl	8000428 <__aeabi_f2d>
 8006698:	2200      	movs	r2, #0
 800669a:	4b30      	ldr	r3, [pc, #192]	; (800675c <MPU9250SelfTest+0x3c4>)
 800669c:	f7f9 fd64 	bl	8000168 <__aeabi_dsub>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	a128      	add	r1, pc, #160	; (adr r1, 8006748 <MPU9250SelfTest+0x3b0>)
 80066a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066aa:	f005 fde1 	bl	800c270 <pow>
 80066ae:	a328      	add	r3, pc, #160	; (adr r3, 8006750 <MPU9250SelfTest+0x3b8>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f7f9 ff0c 	bl	80004d0 <__aeabi_dmul>
 80066b8:	f7fa f9e2 	bl	8000a80 <__aeabi_d2f>
 80066bc:	9011      	str	r0, [sp, #68]	; 0x44
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 80066be:	9804      	ldr	r0, [sp, #16]
 80066c0:	f7fa fae4 	bl	8000c8c <__aeabi_ui2f>
 80066c4:	f7f9 feb0 	bl	8000428 <__aeabi_f2d>
 80066c8:	2200      	movs	r2, #0
 80066ca:	4b24      	ldr	r3, [pc, #144]	; (800675c <MPU9250SelfTest+0x3c4>)
 80066cc:	f7f9 fd4c 	bl	8000168 <__aeabi_dsub>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	a11c      	add	r1, pc, #112	; (adr r1, 8006748 <MPU9250SelfTest+0x3b0>)
 80066d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066da:	f005 fdc9 	bl	800c270 <pow>
 80066de:	a31c      	add	r3, pc, #112	; (adr r3, 8006750 <MPU9250SelfTest+0x3b8>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f7f9 fef4 	bl	80004d0 <__aeabi_dmul>
 80066e8:	f7fa f9ca 	bl	8000a80 <__aeabi_d2f>
 80066ec:	9012      	str	r0, [sp, #72]	; 0x48
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 80066ee:	4628      	mov	r0, r5
 80066f0:	f7fa facc 	bl	8000c8c <__aeabi_ui2f>
 80066f4:	f7f9 fe98 	bl	8000428 <__aeabi_f2d>
 80066f8:	2200      	movs	r2, #0
 80066fa:	4b18      	ldr	r3, [pc, #96]	; (800675c <MPU9250SelfTest+0x3c4>)
 80066fc:	f7f9 fd34 	bl	8000168 <__aeabi_dsub>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	a110      	add	r1, pc, #64	; (adr r1, 8006748 <MPU9250SelfTest+0x3b0>)
 8006706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800670a:	f005 fdb1 	bl	800c270 <pow>
 800670e:	a310      	add	r3, pc, #64	; (adr r3, 8006750 <MPU9250SelfTest+0x3b8>)
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f7f9 fedc 	bl	80004d0 <__aeabi_dmul>
 8006718:	f7fa f9b2 	bl	8000a80 <__aeabi_d2f>
 800671c:	9b05      	ldr	r3, [sp, #20]
 800671e:	9013      	str	r0, [sp, #76]	; 0x4c
 8006720:	af0d      	add	r7, sp, #52	; 0x34
 8006722:	1f1d      	subs	r5, r3, #4

 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (i = 0; i < 3; i++) {
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];// - 100.0; // Report percent differences
 8006724:	f93a 3014 	ldrsh.w	r3, [sl, r4, lsl #1]
 8006728:	f936 0014 	ldrsh.w	r0, [r6, r4, lsl #1]
 800672c:	1ac0      	subs	r0, r0, r3
 800672e:	f7fa fab1 	bl	8000c94 <__aeabi_i2f>
 8006732:	f7f9 fe79 	bl	8000428 <__aeabi_f2d>
 8006736:	2200      	movs	r2, #0
 8006738:	4b09      	ldr	r3, [pc, #36]	; (8006760 <MPU9250SelfTest+0x3c8>)
 800673a:	f7f9 fec9 	bl	80004d0 <__aeabi_dmul>
 800673e:	4680      	mov	r8, r0
 8006740:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8006744:	4689      	mov	r9, r1
 8006746:	e00d      	b.n	8006764 <MPU9250SelfTest+0x3cc>
 8006748:	c28f5c29 	.word	0xc28f5c29
 800674c:	3ff028f5 	.word	0x3ff028f5
 8006750:	00000000 	.word	0x00000000
 8006754:	40a47800 	.word	0x40a47800
 8006758:	200010e4 	.word	0x200010e4
 800675c:	3ff00000 	.word	0x3ff00000
 8006760:	40590000 	.word	0x40590000
 8006764:	f7f9 fe60 	bl	8000428 <__aeabi_f2d>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4640      	mov	r0, r8
 800676e:	4649      	mov	r1, r9
 8006770:	f7f9 ffd8 	bl	8000724 <__aeabi_ddiv>
 8006774:	f7fa f984 	bl	8000a80 <__aeabi_d2f>
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3];// - 100.0; // Report percent differences
 8006778:	ab06      	add	r3, sp, #24
 800677a:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];// - 100.0; // Report percent differences
 800677e:	f845 0f04 	str.w	r0, [r5, #4]!
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3];// - 100.0; // Report percent differences
 8006782:	f93b 0014 	ldrsh.w	r0, [fp, r4, lsl #1]
 8006786:	3401      	adds	r4, #1
 8006788:	1ac0      	subs	r0, r0, r3
 800678a:	f7fa fa83 	bl	8000c94 <__aeabi_i2f>
 800678e:	f7f9 fe4b 	bl	8000428 <__aeabi_f2d>
 8006792:	2200      	movs	r2, #0
 8006794:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <MPU9250SelfTest+0x428>)
 8006796:	f7f9 fe9b 	bl	80004d0 <__aeabi_dmul>
 800679a:	4680      	mov	r8, r0
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	4689      	mov	r9, r1
 80067a0:	f7f9 fe42 	bl	8000428 <__aeabi_f2d>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4640      	mov	r0, r8
 80067aa:	4649      	mov	r1, r9
 80067ac:	f7f9 ffba 	bl	8000724 <__aeabi_ddiv>
 80067b0:	f7fa f966 	bl	8000a80 <__aeabi_d2f>
   for (i = 0; i < 3; i++) {
 80067b4:	2c03      	cmp	r4, #3
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3];// - 100.0; // Report percent differences
 80067b6:	60e8      	str	r0, [r5, #12]
   for (i = 0; i < 3; i++) {
 80067b8:	d1b4      	bne.n	8006724 <MPU9250SelfTest+0x38c>
   }
}
 80067ba:	b015      	add	sp, #84	; 0x54
 80067bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c0:	40590000 	.word	0x40590000

080067c4 <MPU9250_Init>:
{
 80067c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 80067c8:	2401      	movs	r4, #1
 80067ca:	4dc0      	ldr	r5, [pc, #768]	; (8006acc <MPU9250_Init+0x308>)
{
 80067cc:	b085      	sub	sp, #20
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 80067ce:	462b      	mov	r3, r5
 80067d0:	4622      	mov	r2, r4
 80067d2:	2175      	movs	r1, #117	; 0x75
 80067d4:	20d2      	movs	r0, #210	; 0xd2
 80067d6:	9400      	str	r4, [sp, #0]
 80067d8:	f7fd fe22 	bl	8004420 <I2C_ByteRead>
    whoami = rawADC[0];
 80067dc:	782e      	ldrb	r6, [r5, #0]
    sprintf(Buf, "I AM 0x%x\r\n", whoami);
 80067de:	49bc      	ldr	r1, [pc, #752]	; (8006ad0 <MPU9250_Init+0x30c>)
 80067e0:	4632      	mov	r2, r6
 80067e2:	48bc      	ldr	r0, [pc, #752]	; (8006ad4 <MPU9250_Init+0x310>)
 80067e4:	f002 fd0c 	bl	8009200 <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80067e8:	48ba      	ldr	r0, [pc, #744]	; (8006ad4 <MPU9250_Init+0x310>)
 80067ea:	f7f9 fcb1 	bl	8000150 <strlen>
 80067ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067f2:	b282      	uxth	r2, r0
 80067f4:	49b7      	ldr	r1, [pc, #732]	; (8006ad4 <MPU9250_Init+0x310>)
 80067f6:	48b8      	ldr	r0, [pc, #736]	; (8006ad8 <MPU9250_Init+0x314>)
 80067f8:	f7fd fa9e 	bl	8003d38 <HAL_UART_Transmit>
    sprintf(Buf, "I SHOULD BE 0x71\r\n");
 80067fc:	49b7      	ldr	r1, [pc, #732]	; (8006adc <MPU9250_Init+0x318>)
 80067fe:	48b5      	ldr	r0, [pc, #724]	; (8006ad4 <MPU9250_Init+0x310>)
 8006800:	f002 fd22 	bl	8009248 <strcpy>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006804:	48b3      	ldr	r0, [pc, #716]	; (8006ad4 <MPU9250_Init+0x310>)
 8006806:	f7f9 fca3 	bl	8000150 <strlen>
 800680a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800680e:	b282      	uxth	r2, r0
 8006810:	49b0      	ldr	r1, [pc, #704]	; (8006ad4 <MPU9250_Init+0x310>)
 8006812:	48b1      	ldr	r0, [pc, #708]	; (8006ad8 <MPU9250_Init+0x314>)
 8006814:	f7fd fa90 	bl	8003d38 <HAL_UART_Transmit>
  if(whoami == 0x71)
 8006818:	2e71      	cmp	r6, #113	; 0x71
 800681a:	f040 82a8 	bne.w	8006d6e <MPU9250_Init+0x5aa>
		sprintf(Buf, "MPU-9250 Init Start (9-DOF 16-bit mortion sensor)\r\nMPU-9250 SelfTest Start\r\n");
 800681e:	49b0      	ldr	r1, [pc, #704]	; (8006ae0 <MPU9250_Init+0x31c>)
 8006820:	48ac      	ldr	r0, [pc, #688]	; (8006ad4 <MPU9250_Init+0x310>)
 8006822:	f002 fd11 	bl	8009248 <strcpy>
	  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006826:	48ab      	ldr	r0, [pc, #684]	; (8006ad4 <MPU9250_Init+0x310>)
 8006828:	f7f9 fc92 	bl	8000150 <strlen>
 800682c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006830:	b282      	uxth	r2, r0
 8006832:	49a8      	ldr	r1, [pc, #672]	; (8006ad4 <MPU9250_Init+0x310>)
 8006834:	48a8      	ldr	r0, [pc, #672]	; (8006ad8 <MPU9250_Init+0x314>)
 8006836:	f7fd fa7f 	bl	8003d38 <HAL_UART_Transmit>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 800683a:	2380      	movs	r3, #128	; 0x80
	  MPU9250SelfTest(SelfTest);
 800683c:	4ea9      	ldr	r6, [pc, #676]	; (8006ae4 <MPU9250_Init+0x320>)
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 800683e:	2207      	movs	r2, #7
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	216b      	movs	r1, #107	; 0x6b
 8006844:	2308      	movs	r3, #8
 8006846:	20d2      	movs	r0, #210	; 0xd2
 8006848:	f7fd fd84 	bl	8004354 <I2C_ByteWrite>
	  MPU9250SelfTest(SelfTest);
 800684c:	4630      	mov	r0, r6
 800684e:	f7ff fda3 	bl	8006398 <MPU9250SelfTest>
		sprintf(Buf, "Self Test Finish\r\n");
 8006852:	49a5      	ldr	r1, [pc, #660]	; (8006ae8 <MPU9250_Init+0x324>)
 8006854:	489f      	ldr	r0, [pc, #636]	; (8006ad4 <MPU9250_Init+0x310>)
 8006856:	f002 fcf7 	bl	8009248 <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800685a:	489e      	ldr	r0, [pc, #632]	; (8006ad4 <MPU9250_Init+0x310>)
 800685c:	f7f9 fc78 	bl	8000150 <strlen>
 8006860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006864:	b282      	uxth	r2, r0
 8006866:	499b      	ldr	r1, [pc, #620]	; (8006ad4 <MPU9250_Init+0x310>)
 8006868:	489b      	ldr	r0, [pc, #620]	; (8006ad8 <MPU9250_Init+0x314>)
 800686a:	f7fd fa65 	bl	8003d38 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800686e:	2064      	movs	r0, #100	; 0x64
 8006870:	f7fa fe56 	bl	8001520 <HAL_Delay>
		sprintf(Buf, " x-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[0]);
 8006874:	6830      	ldr	r0, [r6, #0]
 8006876:	f7f9 fdd7 	bl	8000428 <__aeabi_f2d>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	4895      	ldr	r0, [pc, #596]	; (8006ad4 <MPU9250_Init+0x310>)
 8006880:	499a      	ldr	r1, [pc, #616]	; (8006aec <MPU9250_Init+0x328>)
 8006882:	f002 fcbd 	bl	8009200 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006886:	4893      	ldr	r0, [pc, #588]	; (8006ad4 <MPU9250_Init+0x310>)
 8006888:	f7f9 fc62 	bl	8000150 <strlen>
 800688c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006890:	b282      	uxth	r2, r0
 8006892:	4990      	ldr	r1, [pc, #576]	; (8006ad4 <MPU9250_Init+0x310>)
 8006894:	4890      	ldr	r0, [pc, #576]	; (8006ad8 <MPU9250_Init+0x314>)
 8006896:	f7fd fa4f 	bl	8003d38 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800689a:	2064      	movs	r0, #100	; 0x64
 800689c:	f7fa fe40 	bl	8001520 <HAL_Delay>
		sprintf(Buf, " y-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[1]);
 80068a0:	6870      	ldr	r0, [r6, #4]
 80068a2:	f7f9 fdc1 	bl	8000428 <__aeabi_f2d>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	488a      	ldr	r0, [pc, #552]	; (8006ad4 <MPU9250_Init+0x310>)
 80068ac:	4990      	ldr	r1, [pc, #576]	; (8006af0 <MPU9250_Init+0x32c>)
 80068ae:	f002 fca7 	bl	8009200 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80068b2:	4888      	ldr	r0, [pc, #544]	; (8006ad4 <MPU9250_Init+0x310>)
 80068b4:	f7f9 fc4c 	bl	8000150 <strlen>
 80068b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068bc:	b282      	uxth	r2, r0
 80068be:	4985      	ldr	r1, [pc, #532]	; (8006ad4 <MPU9250_Init+0x310>)
 80068c0:	4885      	ldr	r0, [pc, #532]	; (8006ad8 <MPU9250_Init+0x314>)
 80068c2:	f7fd fa39 	bl	8003d38 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80068c6:	2064      	movs	r0, #100	; 0x64
 80068c8:	f7fa fe2a 	bl	8001520 <HAL_Delay>
		sprintf(Buf, " z-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[2]);
 80068cc:	68b0      	ldr	r0, [r6, #8]
 80068ce:	f7f9 fdab 	bl	8000428 <__aeabi_f2d>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	487f      	ldr	r0, [pc, #508]	; (8006ad4 <MPU9250_Init+0x310>)
 80068d8:	4986      	ldr	r1, [pc, #536]	; (8006af4 <MPU9250_Init+0x330>)
 80068da:	f002 fc91 	bl	8009200 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80068de:	487d      	ldr	r0, [pc, #500]	; (8006ad4 <MPU9250_Init+0x310>)
 80068e0:	f7f9 fc36 	bl	8000150 <strlen>
 80068e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068e8:	b282      	uxth	r2, r0
 80068ea:	497a      	ldr	r1, [pc, #488]	; (8006ad4 <MPU9250_Init+0x310>)
 80068ec:	487a      	ldr	r0, [pc, #488]	; (8006ad8 <MPU9250_Init+0x314>)
 80068ee:	f7fd fa23 	bl	8003d38 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80068f2:	2064      	movs	r0, #100	; 0x64
 80068f4:	f7fa fe14 	bl	8001520 <HAL_Delay>
		sprintf(Buf, " x-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[3]);
 80068f8:	68f0      	ldr	r0, [r6, #12]
 80068fa:	f7f9 fd95 	bl	8000428 <__aeabi_f2d>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4874      	ldr	r0, [pc, #464]	; (8006ad4 <MPU9250_Init+0x310>)
 8006904:	497c      	ldr	r1, [pc, #496]	; (8006af8 <MPU9250_Init+0x334>)
 8006906:	f002 fc7b 	bl	8009200 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800690a:	4872      	ldr	r0, [pc, #456]	; (8006ad4 <MPU9250_Init+0x310>)
 800690c:	f7f9 fc20 	bl	8000150 <strlen>
 8006910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006914:	b282      	uxth	r2, r0
 8006916:	496f      	ldr	r1, [pc, #444]	; (8006ad4 <MPU9250_Init+0x310>)
 8006918:	486f      	ldr	r0, [pc, #444]	; (8006ad8 <MPU9250_Init+0x314>)
 800691a:	f7fd fa0d 	bl	8003d38 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800691e:	2064      	movs	r0, #100	; 0x64
 8006920:	f7fa fdfe 	bl	8001520 <HAL_Delay>
		sprintf(Buf, " y-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[4]);
 8006924:	6930      	ldr	r0, [r6, #16]
 8006926:	f7f9 fd7f 	bl	8000428 <__aeabi_f2d>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4869      	ldr	r0, [pc, #420]	; (8006ad4 <MPU9250_Init+0x310>)
 8006930:	4972      	ldr	r1, [pc, #456]	; (8006afc <MPU9250_Init+0x338>)
 8006932:	f002 fc65 	bl	8009200 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006936:	4867      	ldr	r0, [pc, #412]	; (8006ad4 <MPU9250_Init+0x310>)
 8006938:	f7f9 fc0a 	bl	8000150 <strlen>
 800693c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006940:	b282      	uxth	r2, r0
 8006942:	4964      	ldr	r1, [pc, #400]	; (8006ad4 <MPU9250_Init+0x310>)
 8006944:	4864      	ldr	r0, [pc, #400]	; (8006ad8 <MPU9250_Init+0x314>)
 8006946:	f7fd f9f7 	bl	8003d38 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800694a:	2064      	movs	r0, #100	; 0x64
 800694c:	f7fa fde8 	bl	8001520 <HAL_Delay>
		sprintf(Buf, " z-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[5]);
 8006950:	6970      	ldr	r0, [r6, #20]
 8006952:	f7f9 fd69 	bl	8000428 <__aeabi_f2d>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	485e      	ldr	r0, [pc, #376]	; (8006ad4 <MPU9250_Init+0x310>)
 800695c:	4968      	ldr	r1, [pc, #416]	; (8006b00 <MPU9250_Init+0x33c>)
 800695e:	f002 fc4f 	bl	8009200 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006962:	485c      	ldr	r0, [pc, #368]	; (8006ad4 <MPU9250_Init+0x310>)
 8006964:	f7f9 fbf4 	bl	8000150 <strlen>
 8006968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800696c:	b282      	uxth	r2, r0
 800696e:	4959      	ldr	r1, [pc, #356]	; (8006ad4 <MPU9250_Init+0x310>)
 8006970:	4859      	ldr	r0, [pc, #356]	; (8006ad8 <MPU9250_Init+0x314>)
 8006972:	f7fd f9e1 	bl	8003d38 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006976:	2064      	movs	r0, #100	; 0x64
 8006978:	f7fa fdd2 	bl	8001520 <HAL_Delay>
		sprintf(Buf, "MPU-9250 Calibration Start\r\n");
 800697c:	4961      	ldr	r1, [pc, #388]	; (8006b04 <MPU9250_Init+0x340>)
 800697e:	4855      	ldr	r0, [pc, #340]	; (8006ad4 <MPU9250_Init+0x310>)
 8006980:	f002 fc62 	bl	8009248 <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006984:	4853      	ldr	r0, [pc, #332]	; (8006ad4 <MPU9250_Init+0x310>)
 8006986:	f7f9 fbe3 	bl	8000150 <strlen>
	  calibrateMPU9250(gyroBias, accBias);
 800698a:	4f5f      	ldr	r7, [pc, #380]	; (8006b08 <MPU9250_Init+0x344>)
 800698c:	4e5f      	ldr	r6, [pc, #380]	; (8006b0c <MPU9250_Init+0x348>)
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800698e:	b282      	uxth	r2, r0
 8006990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006994:	494f      	ldr	r1, [pc, #316]	; (8006ad4 <MPU9250_Init+0x310>)
 8006996:	4850      	ldr	r0, [pc, #320]	; (8006ad8 <MPU9250_Init+0x314>)
 8006998:	f7fd f9ce 	bl	8003d38 <HAL_UART_Transmit>
	  calibrateMPU9250(gyroBias, accBias);
 800699c:	4639      	mov	r1, r7
 800699e:	4630      	mov	r0, r6
 80069a0:	f7ff fb50 	bl	8006044 <calibrateMPU9250>
		sprintf(Buf, "Calibration Finish\r\n");
 80069a4:	495a      	ldr	r1, [pc, #360]	; (8006b10 <MPU9250_Init+0x34c>)
 80069a6:	484b      	ldr	r0, [pc, #300]	; (8006ad4 <MPU9250_Init+0x310>)
 80069a8:	f002 fc4e 	bl	8009248 <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80069ac:	4849      	ldr	r0, [pc, #292]	; (8006ad4 <MPU9250_Init+0x310>)
 80069ae:	f7f9 fbcf 	bl	8000150 <strlen>
 80069b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069b6:	b282      	uxth	r2, r0
 80069b8:	4946      	ldr	r1, [pc, #280]	; (8006ad4 <MPU9250_Init+0x310>)
 80069ba:	4847      	ldr	r0, [pc, #284]	; (8006ad8 <MPU9250_Init+0x314>)
 80069bc:	f7fd f9bc 	bl	8003d38 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80069c0:	2064      	movs	r0, #100	; 0x64
 80069c2:	f7fa fdad 	bl	8001520 <HAL_Delay>
		sprintf(Buf, "   x       y      z\r\n");
 80069c6:	4953      	ldr	r1, [pc, #332]	; (8006b14 <MPU9250_Init+0x350>)
 80069c8:	4842      	ldr	r0, [pc, #264]	; (8006ad4 <MPU9250_Init+0x310>)
 80069ca:	f002 fc3d 	bl	8009248 <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80069ce:	4841      	ldr	r0, [pc, #260]	; (8006ad4 <MPU9250_Init+0x310>)
 80069d0:	f7f9 fbbe 	bl	8000150 <strlen>
 80069d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069d8:	b282      	uxth	r2, r0
 80069da:	493e      	ldr	r1, [pc, #248]	; (8006ad4 <MPU9250_Init+0x310>)
 80069dc:	483e      	ldr	r0, [pc, #248]	; (8006ad8 <MPU9250_Init+0x314>)
 80069de:	f7fd f9ab 	bl	8003d38 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80069e2:	2064      	movs	r0, #100	; 0x64
 80069e4:	f7fa fd9c 	bl	8001520 <HAL_Delay>
		sprintf(Buf, " %.2f   %.2f   %.2f mg\r\n", 1000*accBias[0], 1000*accBias[1], 1000*accBias[2]);
 80069e8:	6838      	ldr	r0, [r7, #0]
 80069ea:	494b      	ldr	r1, [pc, #300]	; (8006b18 <MPU9250_Init+0x354>)
 80069ec:	f7fa f9a6 	bl	8000d3c <__aeabi_fmul>
 80069f0:	f7f9 fd1a 	bl	8000428 <__aeabi_f2d>
 80069f4:	4680      	mov	r8, r0
 80069f6:	4689      	mov	r9, r1
 80069f8:	68b8      	ldr	r0, [r7, #8]
 80069fa:	4947      	ldr	r1, [pc, #284]	; (8006b18 <MPU9250_Init+0x354>)
 80069fc:	f7fa f99e 	bl	8000d3c <__aeabi_fmul>
 8006a00:	f7f9 fd12 	bl	8000428 <__aeabi_f2d>
 8006a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4943      	ldr	r1, [pc, #268]	; (8006b18 <MPU9250_Init+0x354>)
 8006a0c:	f7fa f996 	bl	8000d3c <__aeabi_fmul>
 8006a10:	f7f9 fd0a 	bl	8000428 <__aeabi_f2d>
 8006a14:	4642      	mov	r2, r8
 8006a16:	e9cd 0100 	strd	r0, r1, [sp]
 8006a1a:	464b      	mov	r3, r9
 8006a1c:	493f      	ldr	r1, [pc, #252]	; (8006b1c <MPU9250_Init+0x358>)
 8006a1e:	482d      	ldr	r0, [pc, #180]	; (8006ad4 <MPU9250_Init+0x310>)
 8006a20:	f002 fbee 	bl	8009200 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006a24:	482b      	ldr	r0, [pc, #172]	; (8006ad4 <MPU9250_Init+0x310>)
 8006a26:	f7f9 fb93 	bl	8000150 <strlen>
 8006a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a2e:	b282      	uxth	r2, r0
 8006a30:	4928      	ldr	r1, [pc, #160]	; (8006ad4 <MPU9250_Init+0x310>)
 8006a32:	4829      	ldr	r0, [pc, #164]	; (8006ad8 <MPU9250_Init+0x314>)
 8006a34:	f7fd f980 	bl	8003d38 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006a38:	2064      	movs	r0, #100	; 0x64
 8006a3a:	f7fa fd71 	bl	8001520 <HAL_Delay>
		sprintf(Buf, " %.2f   %.2f   %.2f o/s\r\n", gyroBias[0], gyroBias[1], gyroBias[2]);
 8006a3e:	6830      	ldr	r0, [r6, #0]
 8006a40:	f7f9 fcf2 	bl	8000428 <__aeabi_f2d>
 8006a44:	4680      	mov	r8, r0
 8006a46:	68b0      	ldr	r0, [r6, #8]
 8006a48:	4689      	mov	r9, r1
 8006a4a:	f7f9 fced 	bl	8000428 <__aeabi_f2d>
 8006a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a52:	6870      	ldr	r0, [r6, #4]
 8006a54:	f7f9 fce8 	bl	8000428 <__aeabi_f2d>
 8006a58:	4642      	mov	r2, r8
 8006a5a:	e9cd 0100 	strd	r0, r1, [sp]
 8006a5e:	464b      	mov	r3, r9
 8006a60:	492f      	ldr	r1, [pc, #188]	; (8006b20 <MPU9250_Init+0x35c>)
 8006a62:	481c      	ldr	r0, [pc, #112]	; (8006ad4 <MPU9250_Init+0x310>)
 8006a64:	f002 fbcc 	bl	8009200 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006a68:	481a      	ldr	r0, [pc, #104]	; (8006ad4 <MPU9250_Init+0x310>)
 8006a6a:	f7f9 fb71 	bl	8000150 <strlen>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 8006a6e:	2700      	movs	r7, #0
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006a70:	b282      	uxth	r2, r0
 8006a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a76:	4917      	ldr	r1, [pc, #92]	; (8006ad4 <MPU9250_Init+0x310>)
 8006a78:	4817      	ldr	r0, [pc, #92]	; (8006ad8 <MPU9250_Init+0x314>)
 8006a7a:	f7fd f95d 	bl	8003d38 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006a7e:	2064      	movs	r0, #100	; 0x64
 8006a80:	f7fa fd4e 	bl	8001520 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 8006a84:	2308      	movs	r3, #8
 8006a86:	2207      	movs	r2, #7
 8006a88:	216b      	movs	r1, #107	; 0x6b
 8006a8a:	9700      	str	r7, [sp, #0]
 8006a8c:	20d2      	movs	r0, #210	; 0xd2
 8006a8e:	f7fd fc61 	bl	8004354 <I2C_ByteWrite>
    HAL_Delay(100); // for stability
 8006a92:	2064      	movs	r0, #100	; 0x64
 8006a94:	f7fa fd44 	bl	8001520 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001;
 8006a98:	9400      	str	r4, [sp, #0]
 8006a9a:	2308      	movs	r3, #8
 8006a9c:	2207      	movs	r2, #7
 8006a9e:	216b      	movs	r1, #107	; 0x6b
 8006aa0:	20d2      	movs	r0, #210	; 0xd2
 8006aa2:	f7fd fc57 	bl	8004354 <I2C_ByteWrite>
    HAL_Delay(200); // for stability
 8006aa6:	20c8      	movs	r0, #200	; 0xc8
 8006aa8:	f7fa fd3a 	bl	8001520 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, MPU9250_DLPF_BW_42); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 8006aac:	2303      	movs	r3, #3
 8006aae:	2207      	movs	r2, #7
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	211a      	movs	r1, #26
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	20d2      	movs	r0, #210	; 0xd2
 8006ab8:	f7fd fc4c 	bl	8004354 <I2C_ByteWrite>
	  HAL_Delay(100);
 8006abc:	2064      	movs	r0, #100	; 0x64
 8006abe:	f7fa fd2f 	bl	8001520 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x04);  //0x00 SMPLRT_DIV    -- SMPLRT_DIV = 0  Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
 8006ac2:	2304      	movs	r3, #4
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	e02c      	b.n	8006b24 <MPU9250_Init+0x360>
 8006aca:	bf00      	nop
 8006acc:	200010e4 	.word	0x200010e4
 8006ad0:	0800fd3f 	.word	0x0800fd3f
 8006ad4:	200010f0 	.word	0x200010f0
 8006ad8:	20001418 	.word	0x20001418
 8006adc:	0800fd4b 	.word	0x0800fd4b
 8006ae0:	0800fd5e 	.word	0x0800fd5e
 8006ae4:	20000700 	.word	0x20000700
 8006ae8:	0800fdab 	.word	0x0800fdab
 8006aec:	0800fdbe 	.word	0x0800fdbe
 8006af0:	0800fe0a 	.word	0x0800fe0a
 8006af4:	0800fe56 	.word	0x0800fe56
 8006af8:	0800fea2 	.word	0x0800fea2
 8006afc:	0800feea 	.word	0x0800feea
 8006b00:	0800ff32 	.word	0x0800ff32
 8006b04:	0800ff7a 	.word	0x0800ff7a
 8006b08:	20000724 	.word	0x20000724
 8006b0c:	20000798 	.word	0x20000798
 8006b10:	0800ff97 	.word	0x0800ff97
 8006b14:	0800ffac 	.word	0x0800ffac
 8006b18:	447a0000 	.word	0x447a0000
 8006b1c:	0800ffc2 	.word	0x0800ffc2
 8006b20:	0800ffdb 	.word	0x0800ffdb
 8006b24:	2119      	movs	r1, #25
 8006b26:	2308      	movs	r3, #8
 8006b28:	20d2      	movs	r0, #210	; 0xd2
 8006b2a:	f7fd fc13 	bl	8004354 <I2C_ByteWrite>
	  HAL_Delay(100);
 8006b2e:	2064      	movs	r0, #100	; 0x64
 8006b30:	f7fa fcf6 	bl	8001520 <HAL_Delay>
	  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 1, rawADC, 1);
 8006b34:	9400      	str	r4, [sp, #0]
 8006b36:	462b      	mov	r3, r5
 8006b38:	4622      	mov	r2, r4
 8006b3a:	211b      	movs	r1, #27
 8006b3c:	20d2      	movs	r0, #210	; 0xd2
 8006b3e:	f7fd fc6f 	bl	8004420 <I2C_ByteRead>
	  c = c | Gscale << 3; // Set full scale range for the gyro
 8006b42:	4ba0      	ldr	r3, [pc, #640]	; (8006dc4 <MPU9250_Init+0x600>)
	  uint8_t c = rawADC[0];
 8006b44:	782e      	ldrb	r6, [r5, #0]
	  c = c | Gscale << 3; // Set full scale range for the gyro
 8006b46:	781b      	ldrb	r3, [r3, #0]
	  c = c & ~0x18; // Clear AFS bits [4:3]
 8006b48:	f026 061a 	bic.w	r6, r6, #26
	  c = c | Gscale << 3; // Set full scale range for the gyro
 8006b4c:	ea46 06c3 	orr.w	r6, r6, r3, lsl #3
 8006b50:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
    sprintf(Buf, " GYRO : %d \r\n", c);
 8006b54:	4632      	mov	r2, r6
 8006b56:	499c      	ldr	r1, [pc, #624]	; (8006dc8 <MPU9250_Init+0x604>)
 8006b58:	489c      	ldr	r0, [pc, #624]	; (8006dcc <MPU9250_Init+0x608>)
 8006b5a:	f002 fb51 	bl	8009200 <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006b5e:	489b      	ldr	r0, [pc, #620]	; (8006dcc <MPU9250_Init+0x608>)
 8006b60:	f7f9 faf6 	bl	8000150 <strlen>
 8006b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b68:	b282      	uxth	r2, r0
 8006b6a:	4998      	ldr	r1, [pc, #608]	; (8006dcc <MPU9250_Init+0x608>)
 8006b6c:	4898      	ldr	r0, [pc, #608]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006b6e:	f7fd f8e3 	bl	8003d38 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, c);
 8006b72:	9600      	str	r6, [sp, #0]
 8006b74:	2308      	movs	r3, #8
 8006b76:	2207      	movs	r2, #7
 8006b78:	211b      	movs	r1, #27
 8006b7a:	20d2      	movs	r0, #210	; 0xd2
 8006b7c:	f7fd fbea 	bl	8004354 <I2C_ByteWrite>
	  HAL_Delay(100);
 8006b80:	2064      	movs	r0, #100	; 0x64
 8006b82:	f7fa fccd 	bl	8001520 <HAL_Delay>
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 1, rawADC, 1);
 8006b86:	9400      	str	r4, [sp, #0]
 8006b88:	462b      	mov	r3, r5
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	211c      	movs	r1, #28
 8006b8e:	20d2      	movs	r0, #210	; 0xd2
 8006b90:	f7fd fc46 	bl	8004420 <I2C_ByteRead>
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 8006b94:	4b8f      	ldr	r3, [pc, #572]	; (8006dd4 <MPU9250_Init+0x610>)
    c = rawADC[0];
 8006b96:	782e      	ldrb	r6, [r5, #0]
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 8006b98:	781b      	ldrb	r3, [r3, #0]
    c = c & ~0x18;  // Clear AFS bits [4:3]
 8006b9a:	f026 0618 	bic.w	r6, r6, #24
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 8006b9e:	ea46 06c3 	orr.w	r6, r6, r3, lsl #3
 8006ba2:	b2f6      	uxtb	r6, r6
    sprintf(Buf, " ACEL : %d \r\n", c);
 8006ba4:	4632      	mov	r2, r6
 8006ba6:	498c      	ldr	r1, [pc, #560]	; (8006dd8 <MPU9250_Init+0x614>)
 8006ba8:	4888      	ldr	r0, [pc, #544]	; (8006dcc <MPU9250_Init+0x608>)
 8006baa:	f002 fb29 	bl	8009200 <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006bae:	4887      	ldr	r0, [pc, #540]	; (8006dcc <MPU9250_Init+0x608>)
 8006bb0:	f7f9 face 	bl	8000150 <strlen>
 8006bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bb8:	b282      	uxth	r2, r0
 8006bba:	4984      	ldr	r1, [pc, #528]	; (8006dcc <MPU9250_Init+0x608>)
 8006bbc:	4884      	ldr	r0, [pc, #528]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006bbe:	f7fd f8bb 	bl	8003d38 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, c);
 8006bc2:	9600      	str	r6, [sp, #0]
 8006bc4:	2308      	movs	r3, #8
 8006bc6:	2207      	movs	r2, #7
 8006bc8:	211c      	movs	r1, #28
 8006bca:	20d2      	movs	r0, #210	; 0xd2
 8006bcc:	f7fd fbc2 	bl	8004354 <I2C_ByteWrite>
	  HAL_Delay(100);
 8006bd0:	2064      	movs	r0, #100	; 0x64
 8006bd2:	f7fa fca5 	bl	8001520 <HAL_Delay>
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 1, rawADC, 1);
 8006bd6:	462b      	mov	r3, r5
 8006bd8:	9400      	str	r4, [sp, #0]
 8006bda:	4622      	mov	r2, r4
 8006bdc:	211d      	movs	r1, #29
 8006bde:	20d2      	movs	r0, #210	; 0xd2
 8006be0:	f7fd fc1e 	bl	8004420 <I2C_ByteRead>
    c = rawADC[0];
 8006be4:	782e      	ldrb	r6, [r5, #0]
    sprintf(Buf, " ACEL2 : %d \r\n", c);
 8006be6:	497d      	ldr	r1, [pc, #500]	; (8006ddc <MPU9250_Init+0x618>)
    c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8006be8:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8006bec:	f046 0603 	orr.w	r6, r6, #3
    sprintf(Buf, " ACEL2 : %d \r\n", c);
 8006bf0:	4632      	mov	r2, r6
 8006bf2:	4876      	ldr	r0, [pc, #472]	; (8006dcc <MPU9250_Init+0x608>)
 8006bf4:	f002 fb04 	bl	8009200 <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006bf8:	4874      	ldr	r0, [pc, #464]	; (8006dcc <MPU9250_Init+0x608>)
 8006bfa:	f7f9 faa9 	bl	8000150 <strlen>
 8006bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c02:	b282      	uxth	r2, r0
 8006c04:	4971      	ldr	r1, [pc, #452]	; (8006dcc <MPU9250_Init+0x608>)
 8006c06:	4872      	ldr	r0, [pc, #456]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006c08:	f7fd f896 	bl	8003d38 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, c);
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	2207      	movs	r2, #7
 8006c10:	211d      	movs	r1, #29
 8006c12:	9600      	str	r6, [sp, #0]
 8006c14:	20d2      	movs	r0, #210	; 0xd2
 8006c16:	f7fd fb9d 	bl	8004354 <I2C_ByteWrite>
		HAL_Delay(100);
 8006c1a:	2064      	movs	r0, #100	; 0x64
 8006c1c:	f7fa fc80 	bl	8001520 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_PIN_CFG, 7, 8, 0x22);
 8006c20:	2322      	movs	r3, #34	; 0x22
 8006c22:	2207      	movs	r2, #7
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	2137      	movs	r1, #55	; 0x37
 8006c28:	2308      	movs	r3, #8
 8006c2a:	20d2      	movs	r0, #210	; 0xd2
 8006c2c:	f7fd fb92 	bl	8004354 <I2C_ByteWrite>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x01);
 8006c30:	2308      	movs	r3, #8
 8006c32:	2207      	movs	r2, #7
 8006c34:	9400      	str	r4, [sp, #0]
 8006c36:	2138      	movs	r1, #56	; 0x38
 8006c38:	20d2      	movs	r0, #210	; 0xd2
 8006c3a:	f7fd fb8b 	bl	8004354 <I2C_ByteWrite>
	HAL_Delay(100); // for stability
 8006c3e:	2064      	movs	r0, #100	; 0x64
 8006c40:	f7fa fc6e 	bl	8001520 <HAL_Delay>
  sprintf(Buf, "AK8963 Init Start!\r\n");
 8006c44:	4966      	ldr	r1, [pc, #408]	; (8006de0 <MPU9250_Init+0x61c>)
 8006c46:	4861      	ldr	r0, [pc, #388]	; (8006dcc <MPU9250_Init+0x608>)
 8006c48:	f002 fafe 	bl	8009248 <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006c4c:	485f      	ldr	r0, [pc, #380]	; (8006dcc <MPU9250_Init+0x608>)
 8006c4e:	f7f9 fa7f 	bl	8000150 <strlen>
 8006c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c56:	b282      	uxth	r2, r0
 8006c58:	495c      	ldr	r1, [pc, #368]	; (8006dcc <MPU9250_Init+0x608>)
 8006c5a:	485d      	ldr	r0, [pc, #372]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006c5c:	f7fd f86c 	bl	8003d38 <HAL_UART_Transmit>
  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, WHO_AM_I_AK8963, 1, rawADC, 1);
 8006c60:	462b      	mov	r3, r5
 8006c62:	9400      	str	r4, [sp, #0]
 8006c64:	4622      	mov	r2, r4
 8006c66:	4639      	mov	r1, r7
 8006c68:	2018      	movs	r0, #24
 8006c6a:	f7fd fbd9 	bl	8004420 <I2C_ByteRead>
  sprintf(Buf, "I AM 0x%x\r\n", whoami);
 8006c6e:	782a      	ldrb	r2, [r5, #0]
 8006c70:	495c      	ldr	r1, [pc, #368]	; (8006de4 <MPU9250_Init+0x620>)
 8006c72:	4856      	ldr	r0, [pc, #344]	; (8006dcc <MPU9250_Init+0x608>)
 8006c74:	f002 fac4 	bl	8009200 <sprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006c78:	4854      	ldr	r0, [pc, #336]	; (8006dcc <MPU9250_Init+0x608>)
 8006c7a:	f7f9 fa69 	bl	8000150 <strlen>
 8006c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c82:	b282      	uxth	r2, r0
 8006c84:	4951      	ldr	r1, [pc, #324]	; (8006dcc <MPU9250_Init+0x608>)
 8006c86:	4852      	ldr	r0, [pc, #328]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006c88:	f7fd f856 	bl	8003d38 <HAL_UART_Transmit>
  sprintf(Buf, "I SHOULD BE 0x48\r\n");
 8006c8c:	4956      	ldr	r1, [pc, #344]	; (8006de8 <MPU9250_Init+0x624>)
 8006c8e:	484f      	ldr	r0, [pc, #316]	; (8006dcc <MPU9250_Init+0x608>)
 8006c90:	f002 fada 	bl	8009248 <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006c94:	484d      	ldr	r0, [pc, #308]	; (8006dcc <MPU9250_Init+0x608>)
 8006c96:	f7f9 fa5b 	bl	8000150 <strlen>
 8006c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c9e:	b282      	uxth	r2, r0
 8006ca0:	494a      	ldr	r1, [pc, #296]	; (8006dcc <MPU9250_Init+0x608>)
 8006ca2:	484b      	ldr	r0, [pc, #300]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006ca4:	f7fd f848 	bl	8003d38 <HAL_UART_Transmit>
	sprintf(Buf, "AK8963 Init (Compass sensor)\r\n");
 8006ca8:	4950      	ldr	r1, [pc, #320]	; (8006dec <MPU9250_Init+0x628>)
 8006caa:	4848      	ldr	r0, [pc, #288]	; (8006dcc <MPU9250_Init+0x608>)
 8006cac:	f002 facc 	bl	8009248 <strcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006cb0:	4846      	ldr	r0, [pc, #280]	; (8006dcc <MPU9250_Init+0x608>)
 8006cb2:	f7f9 fa4d 	bl	8000150 <strlen>
	initAK8963(magCalibration);
 8006cb6:	4c4e      	ldr	r4, [pc, #312]	; (8006df0 <MPU9250_Init+0x62c>)
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006cb8:	b282      	uxth	r2, r0
 8006cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cbe:	4943      	ldr	r1, [pc, #268]	; (8006dcc <MPU9250_Init+0x608>)
 8006cc0:	4843      	ldr	r0, [pc, #268]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006cc2:	f7fd f839 	bl	8003d38 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 8006cc6:	2064      	movs	r0, #100	; 0x64
 8006cc8:	f7fa fc2a 	bl	8001520 <HAL_Delay>
	initAK8963(magCalibration);
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f7ff faf5 	bl	80062bc <initAK8963>
	HAL_Delay(100); // for stability
 8006cd2:	2064      	movs	r0, #100	; 0x64
 8006cd4:	f7fa fc24 	bl	8001520 <HAL_Delay>
  getAres();
 8006cd8:	f7fe fece 	bl	8005a78 <getAres>
  getGres();
 8006cdc:	f7fe feae 	bl	8005a3c <getGres>
  getMres();
 8006ce0:	f7fe fe98 	bl	8005a14 <getMres>
	sprintf(Buf, "ASAX : %.2f\r\n", magCalibration[0]);
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	f7f9 fb9f 	bl	8000428 <__aeabi_f2d>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4837      	ldr	r0, [pc, #220]	; (8006dcc <MPU9250_Init+0x608>)
 8006cf0:	4940      	ldr	r1, [pc, #256]	; (8006df4 <MPU9250_Init+0x630>)
 8006cf2:	f002 fa85 	bl	8009200 <sprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006cf6:	4835      	ldr	r0, [pc, #212]	; (8006dcc <MPU9250_Init+0x608>)
 8006cf8:	f7f9 fa2a 	bl	8000150 <strlen>
 8006cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d00:	b282      	uxth	r2, r0
 8006d02:	4932      	ldr	r1, [pc, #200]	; (8006dcc <MPU9250_Init+0x608>)
 8006d04:	4832      	ldr	r0, [pc, #200]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006d06:	f7fd f817 	bl	8003d38 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 8006d0a:	2064      	movs	r0, #100	; 0x64
 8006d0c:	f7fa fc08 	bl	8001520 <HAL_Delay>
	sprintf(Buf, "ASAY : %.2f\r\n", magCalibration[1]);
 8006d10:	6860      	ldr	r0, [r4, #4]
 8006d12:	f7f9 fb89 	bl	8000428 <__aeabi_f2d>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	482c      	ldr	r0, [pc, #176]	; (8006dcc <MPU9250_Init+0x608>)
 8006d1c:	4936      	ldr	r1, [pc, #216]	; (8006df8 <MPU9250_Init+0x634>)
 8006d1e:	f002 fa6f 	bl	8009200 <sprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006d22:	482a      	ldr	r0, [pc, #168]	; (8006dcc <MPU9250_Init+0x608>)
 8006d24:	f7f9 fa14 	bl	8000150 <strlen>
 8006d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d2c:	b282      	uxth	r2, r0
 8006d2e:	4927      	ldr	r1, [pc, #156]	; (8006dcc <MPU9250_Init+0x608>)
 8006d30:	4827      	ldr	r0, [pc, #156]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006d32:	f7fd f801 	bl	8003d38 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 8006d36:	2064      	movs	r0, #100	; 0x64
 8006d38:	f7fa fbf2 	bl	8001520 <HAL_Delay>
	sprintf(Buf, "ASAZ : %.2f\r\n", magCalibration[2]);
 8006d3c:	68a0      	ldr	r0, [r4, #8]
 8006d3e:	f7f9 fb73 	bl	8000428 <__aeabi_f2d>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4821      	ldr	r0, [pc, #132]	; (8006dcc <MPU9250_Init+0x608>)
 8006d48:	492c      	ldr	r1, [pc, #176]	; (8006dfc <MPU9250_Init+0x638>)
 8006d4a:	f002 fa59 	bl	8009200 <sprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006d4e:	481f      	ldr	r0, [pc, #124]	; (8006dcc <MPU9250_Init+0x608>)
 8006d50:	f7f9 f9fe 	bl	8000150 <strlen>
 8006d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d58:	b282      	uxth	r2, r0
 8006d5a:	491c      	ldr	r1, [pc, #112]	; (8006dcc <MPU9250_Init+0x608>)
 8006d5c:	481c      	ldr	r0, [pc, #112]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006d5e:	f7fc ffeb 	bl	8003d38 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 8006d62:	2064      	movs	r0, #100	; 0x64
}
 8006d64:	b005      	add	sp, #20
 8006d66:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(100); // for stability
 8006d6a:	f7fa bbd9 	b.w	8001520 <HAL_Delay>
    sprintf(Buf, "Could not connect to MPU9250: %#x\r\n", whoami);
 8006d6e:	4632      	mov	r2, r6
 8006d70:	4923      	ldr	r1, [pc, #140]	; (8006e00 <MPU9250_Init+0x63c>)
 8006d72:	4816      	ldr	r0, [pc, #88]	; (8006dcc <MPU9250_Init+0x608>)
 8006d74:	f002 fa44 	bl	8009200 <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006d78:	4814      	ldr	r0, [pc, #80]	; (8006dcc <MPU9250_Init+0x608>)
 8006d7a:	f7f9 f9e9 	bl	8000150 <strlen>
 8006d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d82:	b282      	uxth	r2, r0
 8006d84:	4911      	ldr	r1, [pc, #68]	; (8006dcc <MPU9250_Init+0x608>)
 8006d86:	4812      	ldr	r0, [pc, #72]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006d88:	f7fc ffd6 	bl	8003d38 <HAL_UART_Transmit>
    sprintf(Buf, "Communication failed, abort!\r\n");
 8006d8c:	491d      	ldr	r1, [pc, #116]	; (8006e04 <MPU9250_Init+0x640>)
 8006d8e:	480f      	ldr	r0, [pc, #60]	; (8006dcc <MPU9250_Init+0x608>)
 8006d90:	f002 fa5a 	bl	8009248 <strcpy>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006d94:	480d      	ldr	r0, [pc, #52]	; (8006dcc <MPU9250_Init+0x608>)
 8006d96:	f7f9 f9db 	bl	8000150 <strlen>
 8006d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d9e:	b282      	uxth	r2, r0
 8006da0:	490a      	ldr	r1, [pc, #40]	; (8006dcc <MPU9250_Init+0x608>)
 8006da2:	480b      	ldr	r0, [pc, #44]	; (8006dd0 <MPU9250_Init+0x60c>)
 8006da4:	f7fc ffc8 	bl	8003d38 <HAL_UART_Transmit>
    while (Error.error !=0)
 8006da8:	4d17      	ldr	r5, [pc, #92]	; (8006e08 <MPU9250_Init+0x644>)
 8006daa:	782b      	ldrb	r3, [r5, #0]
 8006dac:	b913      	cbnz	r3, 8006db4 <MPU9250_Init+0x5f0>
}
 8006dae:	b005      	add	sp, #20
 8006db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error.error = 1;
 8006db4:	702c      	strb	r4, [r5, #0]
      error_signal();
 8006db6:	f7fe f89f 	bl	8004ef8 <error_signal>
      HAL_Delay(4);
 8006dba:	2004      	movs	r0, #4
 8006dbc:	f7fa fbb0 	bl	8001520 <HAL_Delay>
 8006dc0:	e7f3      	b.n	8006daa <MPU9250_Init+0x5e6>
 8006dc2:	bf00      	nop
 8006dc4:	200006ff 	.word	0x200006ff
 8006dc8:	0800fff5 	.word	0x0800fff5
 8006dcc:	200010f0 	.word	0x200010f0
 8006dd0:	20001418 	.word	0x20001418
 8006dd4:	200006fe 	.word	0x200006fe
 8006dd8:	08010003 	.word	0x08010003
 8006ddc:	08010011 	.word	0x08010011
 8006de0:	08010020 	.word	0x08010020
 8006de4:	0800fd3f 	.word	0x0800fd3f
 8006de8:	08010035 	.word	0x08010035
 8006dec:	08010048 	.word	0x08010048
 8006df0:	2000080c 	.word	0x2000080c
 8006df4:	08010067 	.word	0x08010067
 8006df8:	08010075 	.word	0x08010075
 8006dfc:	08010083 	.word	0x08010083
 8006e00:	08010091 	.word	0x08010091
 8006e04:	080100b5 	.word	0x080100b5
 8006e08:	200013d0 	.word	0x200013d0

08006e0c <Baro_Common>:

void Baro_Common(void){
  static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
  static int baroHistIdx = 0;

  uint8_t indexplus1 = (baroHistIdx + 1);
 8006e0c:	480c      	ldr	r0, [pc, #48]	; (8006e40 <Baro_Common+0x34>)
void Baro_Common(void){
 8006e0e:	b570      	push	{r4, r5, r6, lr}
  uint8_t indexplus1 = (baroHistIdx + 1);
 8006e10:	6804      	ldr	r4, [r0, #0]
  if (indexplus1 == BARO_TAB_SIZE_MAX) indexplus1 = 0;
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8006e12:	490c      	ldr	r1, [pc, #48]	; (8006e44 <Baro_Common+0x38>)
  uint8_t indexplus1 = (baroHistIdx + 1);
 8006e14:	1c62      	adds	r2, r4, #1
 8006e16:	b2d2      	uxtb	r2, r2
  if (indexplus1 == BARO_TAB_SIZE_MAX) indexplus1 = 0;
 8006e18:	2a15      	cmp	r2, #21
 8006e1a:	bf08      	it	eq
 8006e1c:	2200      	moveq	r2, #0
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8006e1e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8006e20:	4d09      	ldr	r5, [pc, #36]	; (8006e48 <Baro_Common+0x3c>)
  baroPressureSum += baroHistTab[baroHistIdx];
  baroPressureSum -= baroHistTab[indexplus1];
  baroHistIdx = indexplus1;
 8006e22:	6002      	str	r2, [r0, #0]
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8006e24:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
  baroPressureSum -= baroHistTab[indexplus1];
 8006e28:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  ms5611.avg_realPressure = baroPressureSum/20;
 8006e2c:	2214      	movs	r2, #20
  baroPressureSum += baroHistTab[baroHistIdx];
 8006e2e:	4c07      	ldr	r4, [pc, #28]	; (8006e4c <Baro_Common+0x40>)
 8006e30:	6826      	ldr	r6, [r4, #0]
 8006e32:	4433      	add	r3, r6
  baroPressureSum -= baroHistTab[indexplus1];
 8006e34:	1b5b      	subs	r3, r3, r5
 8006e36:	6023      	str	r3, [r4, #0]
  ms5611.avg_realPressure = baroPressureSum/20;
 8006e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e3c:	660b      	str	r3, [r1, #96]	; 0x60
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	20000738 	.word	0x20000738
 8006e44:	20000fb0 	.word	0x20000fb0
 8006e48:	2000073c 	.word	0x2000073c
 8006e4c:	20000790 	.word	0x20000790

08006e50 <getEstimatedAltitude>:
       }
       state ++;
    return 1;
}

uint8_t getEstimatedAltitude(void){
 8006e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  static float baroGroundTemperatureScale,logBaroGroundPressureSum;
  static uint16_t previousT;
  uint16_t currentT = micros();
 8006e54:	f001 fb0a 	bl	800846c <micros>
  uint16_t dTime;

  dTime = currentT - previousT;
  if (dTime < 25000) return 0;
 8006e58:	f246 11a7 	movw	r1, #24999	; 0x61a7
  dTime = currentT - previousT;
 8006e5c:	4a40      	ldr	r2, [pc, #256]	; (8006f60 <getEstimatedAltitude+0x110>)
  uint16_t currentT = micros();
 8006e5e:	b280      	uxth	r0, r0
  dTime = currentT - previousT;
 8006e60:	8813      	ldrh	r3, [r2, #0]
 8006e62:	1ac3      	subs	r3, r0, r3
  if (dTime < 25000) return 0;
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	428b      	cmp	r3, r1
 8006e68:	d96c      	bls.n	8006f44 <getEstimatedAltitude+0xf4>
  previousT = currentT;
  if (calibratingB > 0) {
 8006e6a:	4d3e      	ldr	r5, [pc, #248]	; (8006f64 <getEstimatedAltitude+0x114>)
  previousT = currentT;
 8006e6c:	8010      	strh	r0, [r2, #0]
  if (calibratingB > 0) {
 8006e6e:	882b      	ldrh	r3, [r5, #0]
 8006e70:	4f3d      	ldr	r7, [pc, #244]	; (8006f68 <getEstimatedAltitude+0x118>)
 8006e72:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8006f80 <getEstimatedAltitude+0x130>
 8006e76:	4e3d      	ldr	r6, [pc, #244]	; (8006f6c <getEstimatedAltitude+0x11c>)
 8006e78:	4c3d      	ldr	r4, [pc, #244]	; (8006f70 <getEstimatedAltitude+0x120>)
 8006e7a:	b1b3      	cbz	r3, 8006eaa <getEstimatedAltitude+0x5a>

    logBaroGroundPressureSum = log(baroPressureSum);
 8006e7c:	6838      	ldr	r0, [r7, #0]
 8006e7e:	f7f9 fab1 	bl	80003e4 <__aeabi_ui2d>
 8006e82:	f005 f97b 	bl	800c17c <log>
 8006e86:	f7f9 fdfb 	bl	8000a80 <__aeabi_d2f>
 8006e8a:	f8ca 0000 	str.w	r0, [sl]
    baroGroundTemperatureScale = ((int32_t)ms5611.realTemperature + 27315) * (2 * 29.271267f); // 2 *  is included here => no need for * 2  on BaroAlt in additional LPF
 8006e8e:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 8006e92:	f500 40d5 	add.w	r0, r0, #27264	; 0x6a80
 8006e96:	3033      	adds	r0, #51	; 0x33
 8006e98:	f7f9 fefc 	bl	8000c94 <__aeabi_i2f>
 8006e9c:	4935      	ldr	r1, [pc, #212]	; (8006f74 <getEstimatedAltitude+0x124>)
 8006e9e:	f7f9 ff4d 	bl	8000d3c <__aeabi_fmul>
    calibratingB--;
 8006ea2:	882b      	ldrh	r3, [r5, #0]
    baroGroundTemperatureScale = ((int32_t)ms5611.realTemperature + 27315) * (2 * 29.271267f); // 2 *  is included here => no need for * 2  on BaroAlt in additional LPF
 8006ea4:	6030      	str	r0, [r6, #0]
    calibratingB--;
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	802b      	strh	r3, [r5, #0]
  }
  //ms5611.altitude_ref_ground = (ms5611.ground_pressure - ms5611.avg_realPressure) * 0.117;
  ms5611.altitude_ref_ground = (44330.0f * (1.0f - pow((double)ms5611.avg_realPressure / (double)ms5611.ground_pressure, 0.1902949f)));
 8006eaa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006eac:	f7f9 faaa 	bl	8000404 <__aeabi_i2d>
 8006eb0:	4680      	mov	r8, r0
 8006eb2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006eb4:	4689      	mov	r9, r1
 8006eb6:	f7f9 faa5 	bl	8000404 <__aeabi_i2d>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	f7f9 fc2f 	bl	8000724 <__aeabi_ddiv>
 8006ec6:	a322      	add	r3, pc, #136	; (adr r3, 8006f50 <getEstimatedAltitude+0x100>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f005 f9d0 	bl	800c270 <pow>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	4928      	ldr	r1, [pc, #160]	; (8006f78 <getEstimatedAltitude+0x128>)
 8006ed8:	f7f9 f946 	bl	8000168 <__aeabi_dsub>
 8006edc:	a31e      	add	r3, pc, #120	; (adr r3, 8006f58 <getEstimatedAltitude+0x108>)
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f7f9 faf5 	bl	80004d0 <__aeabi_dmul>
 8006ee6:	f7f9 fda3 	bl	8000a30 <__aeabi_d2iz>
 8006eea:	66e0      	str	r0, [r4, #108]	; 0x6c
  // baroGroundPressureSum is not supposed to be 0 here
  // see: https://code.google.com/p/ardupilot-mega/source/browse/libraries/AP_Baro/AP_Baro.cpp
  ms5611.BaroAlt = ( logBaroGroundPressureSum - log(baroPressureSum) ) * baroGroundTemperatureScale;
 8006eec:	f8da 0000 	ldr.w	r0, [sl]
 8006ef0:	f7f9 fa9a 	bl	8000428 <__aeabi_f2d>
 8006ef4:	4680      	mov	r8, r0
 8006ef6:	6838      	ldr	r0, [r7, #0]
 8006ef8:	4689      	mov	r9, r1
 8006efa:	f7f9 fa73 	bl	80003e4 <__aeabi_ui2d>
 8006efe:	f005 f93d 	bl	800c17c <log>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4640      	mov	r0, r8
 8006f08:	4649      	mov	r1, r9
 8006f0a:	f7f9 f92d 	bl	8000168 <__aeabi_dsub>
 8006f0e:	4680      	mov	r8, r0
 8006f10:	6830      	ldr	r0, [r6, #0]
 8006f12:	4689      	mov	r9, r1
 8006f14:	f7f9 fa88 	bl	8000428 <__aeabi_f2d>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4649      	mov	r1, r9
 8006f20:	f7f9 fad6 	bl	80004d0 <__aeabi_dmul>
 8006f24:	f7f9 fd84 	bl	8000a30 <__aeabi_d2iz>

  alt.EstAlt = (alt.EstAlt * 6 + ms5611.BaroAlt ) >> 3; // additional LPF to reduce baro noise (faster by 30 µs)
 8006f28:	2106      	movs	r1, #6
 8006f2a:	4a14      	ldr	r2, [pc, #80]	; (8006f7c <getEstimatedAltitude+0x12c>)
  ms5611.BaroAlt = ( logBaroGroundPressureSum - log(baroPressureSum) ) * baroGroundTemperatureScale;
 8006f2c:	6720      	str	r0, [r4, #112]	; 0x70
  alt.EstAlt = (alt.EstAlt * 6 + ms5611.BaroAlt ) >> 3; // additional LPF to reduce baro noise (faster by 30 µs)
 8006f2e:	6813      	ldr	r3, [r2, #0]
 8006f30:	fb01 0003 	mla	r0, r1, r3, r0
  if(alt.EstAlt < 0) alt.EstAlt = 0;
 8006f34:	10c0      	asrs	r0, r0, #3
 8006f36:	bf4a      	itet	mi
 8006f38:	2300      	movmi	r3, #0
  alt.EstAlt = (alt.EstAlt * 6 + ms5611.BaroAlt ) >> 3; // additional LPF to reduce baro noise (faster by 30 µs)
 8006f3a:	6010      	strpl	r0, [r2, #0]
  if(alt.EstAlt < 0) alt.EstAlt = 0;
 8006f3c:	6013      	strmi	r3, [r2, #0]
  return 1;
 8006f3e:	2001      	movs	r0, #1
 8006f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (dTime < 25000) return 0;
 8006f44:	2000      	movs	r0, #0
}
 8006f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4a:	bf00      	nop
 8006f4c:	f3af 8000 	nop.w
 8006f50:	60000000 	.word	0x60000000
 8006f54:	3fc85b95 	.word	0x3fc85b95
 8006f58:	00000000 	.word	0x00000000
 8006f5c:	40e5a540 	.word	0x40e5a540
 8006f60:	20000818 	.word	0x20000818
 8006f64:	2000000a 	.word	0x2000000a
 8006f68:	20000790 	.word	0x20000790
 8006f6c:	20000734 	.word	0x20000734
 8006f70:	20000fb0 	.word	0x20000fb0
 8006f74:	426a2b8e 	.word	0x426a2b8e
 8006f78:	3ff00000 	.word	0x3ff00000
 8006f7c:	200010d0 	.word	0x200010d0
 8006f80:	200007fc 	.word	0x200007fc

08006f84 <MS561101BA_Calculate>:

    return readRegister24(MS5611_CMD_ADC_READ);
}

void MS561101BA_Calculate(void){
  uint32_t D1 = ms5611.rawPressure;
 8006f84:	4b53      	ldr	r3, [pc, #332]	; (80070d4 <MS561101BA_Calculate+0x150>)
void MS561101BA_Calculate(void){
 8006f86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  uint32_t D2 = ms5611.rawTemp;
  int32_t dT = D2 - (uint32_t)ms5611.fc[4] * 256;
 8006f8a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006f8c:	8919      	ldrh	r1, [r3, #8]

  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006f8e:	88dc      	ldrh	r4, [r3, #6]
  int32_t dT = D2 - (uint32_t)ms5611.fc[4] * 256;
 8006f90:	eba0 2101 	sub.w	r1, r0, r1, lsl #8
  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006f94:	fb84 4501 	smull	r4, r5, r4, r1
 8006f98:	2c00      	cmp	r4, #0
 8006f9a:	f175 0000 	sbcs.w	r0, r5, #0
  uint32_t D1 = ms5611.rawPressure;
 8006f9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006fa0:	da02      	bge.n	8006fa8 <MS561101BA_Calculate+0x24>
 8006fa2:	347f      	adds	r4, #127	; 0x7f
 8006fa4:	f145 0500 	adc.w	r5, r5, #0
 8006fa8:	ea4f 18d4 	mov.w	r8, r4, lsr #7
 8006fac:	ea48 6845 	orr.w	r8, r8, r5, lsl #25
 8006fb0:	ea4f 19e5 	mov.w	r9, r5, asr #7
 8006fb4:	2500      	movs	r5, #0
 8006fb6:	885e      	ldrh	r6, [r3, #2]
  int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006fb8:	8818      	ldrh	r0, [r3, #0]
  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006fba:	0434      	lsls	r4, r6, #16
  int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006fbc:	889e      	ldrh	r6, [r3, #4]
  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006fbe:	eb18 0804 	adds.w	r8, r8, r4
  int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006fc2:	fb86 6701 	smull	r6, r7, r6, r1
  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006fc6:	eb49 0905 	adc.w	r9, r9, r5
  int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006fca:	2e00      	cmp	r6, #0
 8006fcc:	f177 0400 	sbcs.w	r4, r7, #0
 8006fd0:	da02      	bge.n	8006fd8 <MS561101BA_Calculate+0x54>
 8006fd2:	36ff      	adds	r6, #255	; 0xff
 8006fd4:	f147 0700 	adc.w	r7, r7, #0
 8006fd8:	0a34      	lsrs	r4, r6, #8
 8006fda:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8006fde:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 8006fe2:	123d      	asrs	r5, r7, #8
 8006fe4:	fbe0 4506 	umlal	r4, r5, r0, r6

  int32_t TEMP = 2000 + ((int64_t) dT * ms5611.fc[5]) / 8388608;
 8006fe8:	8958      	ldrh	r0, [r3, #10]
 8006fea:	fb80 0101 	smull	r0, r1, r0, r1
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f171 0600 	sbcs.w	r6, r1, #0
 8006ff4:	da03      	bge.n	8006ffe <MS561101BA_Calculate+0x7a>
 8006ff6:	2700      	movs	r7, #0
 8006ff8:	4e37      	ldr	r6, [pc, #220]	; (80070d8 <MS561101BA_Calculate+0x154>)
 8006ffa:	1980      	adds	r0, r0, r6
 8006ffc:	4179      	adcs	r1, r7
 8006ffe:	ea4f 5ed0 	mov.w	lr, r0, lsr #23
 8007002:	ea4e 2e41 	orr.w	lr, lr, r1, lsl #9
  ms5611.realTemperature = (uint32_t)TEMP;

  ms5611.OFF2 = 0;
 8007006:	2000      	movs	r0, #0
 8007008:	2100      	movs	r1, #0
  int32_t TEMP = 2000 + ((int64_t) dT * ms5611.fc[5]) / 8388608;
 800700a:	f50e 6cfa 	add.w	ip, lr, #2000	; 0x7d0
  ms5611.SENS2 = 0;

  if (TEMP < 2000)
 800700e:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
  ms5611.realTemperature = (uint32_t)TEMP;
 8007012:	f8a3 c054 	strh.w	ip, [r3, #84]	; 0x54
  ms5611.OFF2 = 0;
 8007016:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
  ms5611.SENS2 = 0;
 800701a:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  if (TEMP < 2000)
 800701e:	da26      	bge.n	800706e <MS561101BA_Calculate+0xea>
  {
    ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8007020:	fb0e f00e 	mul.w	r0, lr, lr
    ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
  }

  if (TEMP < -1500)
 8007024:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80070e0 <MS561101BA_Calculate+0x15c>
    ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8007028:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800702c:	1046      	asrs	r6, r0, #1
    ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 800702e:	1080      	asrs	r0, r0, #2
    ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8007030:	17f7      	asrs	r7, r6, #31
    ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8007032:	17c1      	asrs	r1, r0, #31
  if (TEMP < -1500)
 8007034:	45d4      	cmp	ip, sl
    ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8007036:	e9c3 6710 	strd	r6, r7, [r3, #64]	; 0x40
    ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 800703a:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  if (TEMP < -1500)
 800703e:	da16      	bge.n	800706e <MS561101BA_Calculate+0xea>
  {
    ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8007040:	f60e 5eac 	addw	lr, lr, #3500	; 0xdac
 8007044:	fb0e fe0e 	mul.w	lr, lr, lr
 8007048:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800704c:	eb16 060c 	adds.w	r6, r6, ip
 8007050:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8007054:	e9c3 6710 	strd	r6, r7, [r3, #64]	; 0x40
    ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8007058:	260b      	movs	r6, #11
 800705a:	fb06 fe0e 	mul.w	lr, r6, lr
 800705e:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8007062:	eb10 000e 	adds.w	r0, r0, lr
 8007066:	eb41 71ee 	adc.w	r1, r1, lr, asr #31
 800706a:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  }

  OFF = OFF - ms5611.OFF2;
  SENS = SENS - ms5611.SENS2;
 800706e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007072:	1a24      	subs	r4, r4, r0
 8007074:	eb65 0501 	sbc.w	r5, r5, r1

  ms5611.realPressure = (D1 * SENS / 2097152 - OFF) / 32768;
 8007078:	fba4 0102 	umull	r0, r1, r4, r2
 800707c:	fb02 1105 	mla	r1, r2, r5, r1
 8007080:	2800      	cmp	r0, #0
 8007082:	f171 0200 	sbcs.w	r2, r1, #0
 8007086:	da03      	bge.n	8007090 <MS561101BA_Calculate+0x10c>
 8007088:	2500      	movs	r5, #0
 800708a:	4c14      	ldr	r4, [pc, #80]	; (80070dc <MS561101BA_Calculate+0x158>)
 800708c:	1900      	adds	r0, r0, r4
 800708e:	4169      	adcs	r1, r5
 8007090:	0d44      	lsrs	r4, r0, #21
 8007092:	ea44 24c1 	orr.w	r4, r4, r1, lsl #11
 8007096:	154d      	asrs	r5, r1, #21
  OFF = OFF - ms5611.OFF2;
 8007098:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800709c:	ebb8 0800 	subs.w	r8, r8, r0
 80070a0:	eb69 0901 	sbc.w	r9, r9, r1
  ms5611.realPressure = (D1 * SENS / 2097152 - OFF) / 32768;
 80070a4:	ebb4 0808 	subs.w	r8, r4, r8
 80070a8:	eb65 0909 	sbc.w	r9, r5, r9
 80070ac:	f1b8 0f00 	cmp.w	r8, #0
 80070b0:	f179 0200 	sbcs.w	r2, r9, #0
 80070b4:	da06      	bge.n	80070c4 <MS561101BA_Calculate+0x140>
 80070b6:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80070ba:	2100      	movs	r1, #0
 80070bc:	eb18 0800 	adds.w	r8, r8, r0
 80070c0:	eb49 0901 	adc.w	r9, r9, r1
 80070c4:	ea4f 32d8 	mov.w	r2, r8, lsr #15
 80070c8:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
 80070cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80070ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d2:	bf00      	nop
 80070d4:	20000fb0 	.word	0x20000fb0
 80070d8:	007fffff 	.word	0x007fffff
 80070dc:	001fffff 	.word	0x001fffff
 80070e0:	fffffa24 	.word	0xfffffa24

080070e4 <readRegister16>:
}

// Read 16-bit from register (oops MSB, LSB)
uint16_t readRegister16(uint8_t reg)
{
 80070e4:	b510      	push	{r4, lr}
    uint16_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);

    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 80070e6:	4c08      	ldr	r4, [pc, #32]	; (8007108 <readRegister16+0x24>)
    I2C_Write(MS5611_ADDRESS, reg, 1);
 80070e8:	4601      	mov	r1, r0
 80070ea:	2201      	movs	r2, #1
 80070ec:	20ee      	movs	r0, #238	; 0xee
 80070ee:	f7fd f9d9 	bl	80044a4 <I2C_Write>
    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 80070f2:	2202      	movs	r2, #2
 80070f4:	4621      	mov	r1, r4
 80070f6:	20ee      	movs	r0, #238	; 0xee
 80070f8:	f7fd fa1e 	bl	8004538 <I2C_Read>

    uint8_t vha = rawADC[0];
    uint8_t vla = rawADC[1];

    value = vha << 8 | vla;
 80070fc:	7820      	ldrb	r0, [r4, #0]
 80070fe:	7863      	ldrb	r3, [r4, #1]

    return value;
}
 8007100:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8007104:	bd10      	pop	{r4, pc}
 8007106:	bf00      	nop
 8007108:	200010e4 	.word	0x200010e4

0800710c <MS5611_Init>:
{
 800710c:	b570      	push	{r4, r5, r6, lr}
	sprintf(Buf, "Initialize MS-5611 Sensor\r\n");
 800710e:	4923      	ldr	r1, [pc, #140]	; (800719c <MS5611_Init+0x90>)
{
 8007110:	4605      	mov	r5, r0
	sprintf(Buf, "Initialize MS-5611 Sensor\r\n");
 8007112:	4823      	ldr	r0, [pc, #140]	; (80071a0 <MS5611_Init+0x94>)
 8007114:	f002 f898 	bl	8009248 <strcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8007118:	4821      	ldr	r0, [pc, #132]	; (80071a0 <MS5611_Init+0x94>)
 800711a:	f7f9 f819 	bl	8000150 <strlen>
 800711e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007122:	b282      	uxth	r2, r0
 8007124:	491e      	ldr	r1, [pc, #120]	; (80071a0 <MS5611_Init+0x94>)
 8007126:	481f      	ldr	r0, [pc, #124]	; (80071a4 <MS5611_Init+0x98>)
 8007128:	f7fc fe06 	bl	8003d38 <HAL_UART_Transmit>
  I2C_Write(MS5611_ADDRESS, MS5611_CMD_RESET, 1);
 800712c:	2201      	movs	r2, #1
 800712e:	211e      	movs	r1, #30
 8007130:	20ee      	movs	r0, #238	; 0xee
 8007132:	f7fd f9b7 	bl	80044a4 <I2C_Write>
 8007136:	4c1c      	ldr	r4, [pc, #112]	; (80071a8 <MS5611_Init+0x9c>)
  switch (osr)
 8007138:	2d08      	cmp	r5, #8
 800713a:	d808      	bhi.n	800714e <MS5611_Init+0x42>
 800713c:	e8df f005 	tbb	[pc, r5]
 8007140:	07260705 	.word	0x07260705
 8007144:	072a0728 	.word	0x072a0728
 8007148:	2c          	.byte	0x2c
 8007149:	00          	.byte	0x00
      ms5611.ct = 1;
 800714a:	2301      	movs	r3, #1
      ms5611.ct = 10;
 800714c:	7323      	strb	r3, [r4, #12]
  HAL_Delay(100);
 800714e:	2064      	movs	r0, #100	; 0x64
  ms5611.uosr = osr;
 8007150:	7365      	strb	r5, [r4, #13]
  HAL_Delay(100);
 8007152:	f7fa f9e5 	bl	8001520 <HAL_Delay>
 8007156:	2500      	movs	r5, #0
    ms5611.fc[offset] = readRegister16(MS5611_CMD_READ_PROM + (offset * 2));
 8007158:	f1a5 005e 	sub.w	r0, r5, #94	; 0x5e
 800715c:	b2c0      	uxtb	r0, r0
 800715e:	f7ff ffc1 	bl	80070e4 <readRegister16>
 8007162:	5360      	strh	r0, [r4, r5]
 8007164:	3502      	adds	r5, #2
  for (uint8_t offset = 0; offset < 6; offset++)
 8007166:	2d0c      	cmp	r5, #12
 8007168:	d1f6      	bne.n	8007158 <MS5611_Init+0x4c>
  sprintf(Buf, "Oversampling: %d\r\n", ms5611.uosr);
 800716a:	7b62      	ldrb	r2, [r4, #13]
 800716c:	490f      	ldr	r1, [pc, #60]	; (80071ac <MS5611_Init+0xa0>)
 800716e:	480c      	ldr	r0, [pc, #48]	; (80071a0 <MS5611_Init+0x94>)
 8007170:	f002 f846 	bl	8009200 <sprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8007174:	480a      	ldr	r0, [pc, #40]	; (80071a0 <MS5611_Init+0x94>)
 8007176:	f7f8 ffeb 	bl	8000150 <strlen>
}
 800717a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800717e:	b282      	uxth	r2, r0
 8007180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007184:	4906      	ldr	r1, [pc, #24]	; (80071a0 <MS5611_Init+0x94>)
 8007186:	4807      	ldr	r0, [pc, #28]	; (80071a4 <MS5611_Init+0x98>)
 8007188:	f7fc bdd6 	b.w	8003d38 <HAL_UART_Transmit>
      ms5611.ct = 2;
 800718c:	2302      	movs	r3, #2
 800718e:	e7dd      	b.n	800714c <MS5611_Init+0x40>
      ms5611.ct = 3;
 8007190:	2303      	movs	r3, #3
 8007192:	e7db      	b.n	800714c <MS5611_Init+0x40>
      ms5611.ct = 5;
 8007194:	2305      	movs	r3, #5
 8007196:	e7d9      	b.n	800714c <MS5611_Init+0x40>
      ms5611.ct = 10;
 8007198:	230a      	movs	r3, #10
 800719a:	e7d7      	b.n	800714c <MS5611_Init+0x40>
 800719c:	080100d4 	.word	0x080100d4
 80071a0:	200010f0 	.word	0x200010f0
 80071a4:	20001418 	.word	0x20001418
 80071a8:	20000fb0 	.word	0x20000fb0
 80071ac:	080100f0 	.word	0x080100f0

080071b0 <readRegister24>:

// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg)
{
 80071b0:	b510      	push	{r4, lr}
    uint32_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);

    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 80071b2:	4c09      	ldr	r4, [pc, #36]	; (80071d8 <readRegister24+0x28>)
    I2C_Write(MS5611_ADDRESS, reg, 1);
 80071b4:	4601      	mov	r1, r0
 80071b6:	2201      	movs	r2, #1
 80071b8:	20ee      	movs	r0, #238	; 0xee
 80071ba:	f7fd f973 	bl	80044a4 <I2C_Write>
    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 80071be:	2203      	movs	r2, #3
 80071c0:	4621      	mov	r1, r4
 80071c2:	20ee      	movs	r0, #238	; 0xee
 80071c4:	f7fd f9b8 	bl	8004538 <I2C_Read>

    uint8_t vxa = rawADC[0];
    uint8_t vha = rawADC[1];
    uint8_t vla = rawADC[2];

    value = ((int32_t)vxa << 16) | ((int32_t)vha << 8) | vla;
 80071c8:	7863      	ldrb	r3, [r4, #1]
 80071ca:	7820      	ldrb	r0, [r4, #0]
 80071cc:	021b      	lsls	r3, r3, #8
 80071ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80071d2:	78a0      	ldrb	r0, [r4, #2]

    return value;
}
 80071d4:	4318      	orrs	r0, r3
 80071d6:	bd10      	pop	{r4, pc}
 80071d8:	200010e4 	.word	0x200010e4

080071dc <Baro_update>:
uint8_t Baro_update(void){
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
       if(state >= 2){
 80071de:	4b1a      	ldr	r3, [pc, #104]	; (8007248 <Baro_update+0x6c>)
 80071e0:	681f      	ldr	r7, [r3, #0]
 80071e2:	461e      	mov	r6, r3
 80071e4:	2f01      	cmp	r7, #1
 80071e6:	dd05      	ble.n	80071f4 <Baro_update+0x18>
         state = 0;
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]
         MS561101BA_Calculate();
 80071ec:	f7ff feca 	bl	8006f84 <MS561101BA_Calculate>
    return 1;
 80071f0:	2001      	movs	r0, #1
 80071f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       if ((int32_t)(currentTime - baroDeadline) < 0) return 0;
 80071f4:	4a15      	ldr	r2, [pc, #84]	; (800724c <Baro_update+0x70>)
 80071f6:	4c16      	ldr	r4, [pc, #88]	; (8007250 <Baro_update+0x74>)
 80071f8:	6813      	ldr	r3, [r2, #0]
 80071fa:	6821      	ldr	r1, [r4, #0]
 80071fc:	1a5b      	subs	r3, r3, r1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	db20      	blt.n	8007244 <Baro_update+0x68>
       baroDeadline = currentTime;
 8007202:	6813      	ldr	r3, [r2, #0]
 8007204:	4d13      	ldr	r5, [pc, #76]	; (8007254 <Baro_update+0x78>)
 8007206:	6023      	str	r3, [r4, #0]
       if (state == 0) {
 8007208:	b9af      	cbnz	r7, 8007236 <Baro_update+0x5a>
         Baro_Common();
 800720a:	f7ff fdff 	bl	8006e0c <Baro_Common>
         ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 800720e:	4638      	mov	r0, r7
 8007210:	f7ff ffce 	bl	80071b0 <readRegister24>
         I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8007214:	7b69      	ldrb	r1, [r5, #13]
         ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8007216:	6528      	str	r0, [r5, #80]	; 0x50
         I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8007218:	3140      	adds	r1, #64	; 0x40
         I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 800721a:	2201      	movs	r2, #1
 800721c:	b2c9      	uxtb	r1, r1
 800721e:	20ee      	movs	r0, #238	; 0xee
 8007220:	f7fd f940 	bl	80044a4 <I2C_Write>
         baroDeadline +=10000;
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800722a:	3310      	adds	r3, #16
 800722c:	6023      	str	r3, [r4, #0]
       state ++;
 800722e:	6833      	ldr	r3, [r6, #0]
 8007230:	3301      	adds	r3, #1
 8007232:	6033      	str	r3, [r6, #0]
 8007234:	e7dc      	b.n	80071f0 <Baro_update+0x14>
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8007236:	2000      	movs	r0, #0
 8007238:	f7ff ffba 	bl	80071b0 <readRegister24>
         I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 800723c:	7b69      	ldrb	r1, [r5, #13]
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 800723e:	65a8      	str	r0, [r5, #88]	; 0x58
         I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8007240:	3150      	adds	r1, #80	; 0x50
 8007242:	e7ea      	b.n	800721a <Baro_update+0x3e>
       if ((int32_t)(currentTime - baroDeadline) < 0) return 0;
 8007244:	2000      	movs	r0, #0
}
 8007246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007248:	2000081c 	.word	0x2000081c
 800724c:	20000a4c 	.word	0x20000a4c
 8007250:	20000730 	.word	0x20000730
 8007254:	20000fb0 	.word	0x20000fb0

08007258 <HAL_UART_RxCpltCallback>:
   return(ch);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART1) //current USART
 8007258:	6802      	ldr	r2, [r0, #0]
 800725a:	4b0b      	ldr	r3, [pc, #44]	; (8007288 <HAL_UART_RxCpltCallback+0x30>)
{
 800725c:	b510      	push	{r4, lr}
	if(huart->Instance == USART1) //current USART
 800725e:	429a      	cmp	r2, r3
{
 8007260:	4604      	mov	r4, r0
	if(huart->Instance == USART1) //current USART
 8007262:	d104      	bne.n	800726e <HAL_UART_RxCpltCallback+0x16>
		{
			write_Q(&Q_buffer[UART1], rx1_buffer[0]);
 8007264:	4b09      	ldr	r3, [pc, #36]	; (800728c <HAL_UART_RxCpltCallback+0x34>)
 8007266:	480a      	ldr	r0, [pc, #40]	; (8007290 <HAL_UART_RxCpltCallback+0x38>)
 8007268:	7819      	ldrb	r1, [r3, #0]
 800726a:	f7fe f9be 	bl	80055ea <write_Q>
			//TX2_CHR(rx1_buffer[0]);
		}
		
	if(huart->Instance == USART2) //current USART
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	4b08      	ldr	r3, [pc, #32]	; (8007294 <HAL_UART_RxCpltCallback+0x3c>)
 8007272:	429a      	cmp	r2, r3
 8007274:	d106      	bne.n	8007284 <HAL_UART_RxCpltCallback+0x2c>
			write_Q(&Q_buffer[UART2], rx2_buffer[0]);
			//printf("c %d",rx2_buffer[0]);
			//HAL_UART_Transmit_IT(&huart1, (uint8_t*)rx2_buffer, 100);
			//TX_CHR(rx2_buffer[0]);
		}
}
 8007276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			write_Q(&Q_buffer[UART2], rx2_buffer[0]);
 800727a:	4b07      	ldr	r3, [pc, #28]	; (8007298 <HAL_UART_RxCpltCallback+0x40>)
 800727c:	4807      	ldr	r0, [pc, #28]	; (800729c <HAL_UART_RxCpltCallback+0x44>)
 800727e:	7819      	ldrb	r1, [r3, #0]
 8007280:	f7fe b9b3 	b.w	80055ea <write_Q>
 8007284:	bd10      	pop	{r4, pc}
 8007286:	bf00      	nop
 8007288:	40013800 	.word	0x40013800
 800728c:	20001170 	.word	0x20001170
 8007290:	20000cc4 	.word	0x20000cc4
 8007294:	40004400 	.word	0x40004400
 8007298:	20001171 	.word	0x20001171
 800729c:	20000dcc 	.word	0x20000dcc

080072a0 <read8>:
    serialize8((a>>24) & 0xFF);
}

uint8_t read8(void)
{
    return currentPortState->inBuf[currentPortState->indRX++] & 0xff;
 80072a0:	4b03      	ldr	r3, [pc, #12]	; (80072b0 <read8+0x10>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	785a      	ldrb	r2, [r3, #1]
 80072a6:	1c51      	adds	r1, r2, #1
 80072a8:	7059      	strb	r1, [r3, #1]
 80072aa:	4413      	add	r3, r2
}
 80072ac:	7898      	ldrb	r0, [r3, #2]
 80072ae:	4770      	bx	lr
 80072b0:	2000000c 	.word	0x2000000c

080072b4 <read16>:

uint16_t read16(void)
{
 80072b4:	b510      	push	{r4, lr}
    uint16_t t = read8();
 80072b6:	f7ff fff3 	bl	80072a0 <read8>
 80072ba:	b284      	uxth	r4, r0
    t += (uint16_t)read8() << 8;
 80072bc:	f7ff fff0 	bl	80072a0 <read8>
 80072c0:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    return t;
}
 80072c4:	b280      	uxth	r0, r0
 80072c6:	bd10      	pop	{r4, pc}

080072c8 <read32>:

uint32_t read32(void)
{
 80072c8:	b510      	push	{r4, lr}
    uint32_t t = read16();
 80072ca:	f7ff fff3 	bl	80072b4 <read16>
 80072ce:	4604      	mov	r4, r0
    t += (uint32_t)read16() << 16;
 80072d0:	f7ff fff0 	bl	80072b4 <read16>
    return t;
}
 80072d4:	eb04 4000 	add.w	r0, r4, r0, lsl #16
 80072d8:	bd10      	pop	{r4, pc}
	...

080072dc <PrintData>:
  tailSerialReply(); //170
}
///////////////////////////////////////////////////

void PrintData(uint8_t command)
{
 80072dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  Debug_TC++;
 80072de:	4a89      	ldr	r2, [pc, #548]	; (8007504 <PrintData+0x228>)
{
 80072e0:	b099      	sub	sp, #100	; 0x64
  Debug_TC++;
 80072e2:	7813      	ldrb	r3, [r2, #0]
{
 80072e4:	4604      	mov	r4, r0
  Debug_TC++;
 80072e6:	3301      	adds	r3, #1
 80072e8:	b2db      	uxtb	r3, r3
  if(Debug_TC >= 12){ //12
 80072ea:	2b0b      	cmp	r3, #11
 80072ec:	d802      	bhi.n	80072f4 <PrintData+0x18>
  Debug_TC++;
 80072ee:	7013      	strb	r3, [r2, #0]
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRS.Roll, AHRS.Pitch, AHRS.Yaw);
	     HAL_UART_Transmit_DMA(&huart1, (uint8_t*)Buf, strlen(Buf));
		break;
	 }
  }
}
 80072f0:	b019      	add	sp, #100	; 0x64
 80072f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Debug_TC = 0;
 80072f4:	2300      	movs	r3, #0
    LED1_TOGGLE;  //GREEN
 80072f6:	2110      	movs	r1, #16
 80072f8:	4883      	ldr	r0, [pc, #524]	; (8007508 <PrintData+0x22c>)
    Debug_TC = 0;
 80072fa:	7013      	strb	r3, [r2, #0]
    LED1_TOGGLE;  //GREEN
 80072fc:	f7fa fe2f 	bl	8001f5e <HAL_GPIO_TogglePin>
	switch(command)
 8007300:	2c0e      	cmp	r4, #14
 8007302:	d8f5      	bhi.n	80072f0 <PrintData+0x14>
 8007304:	e8df f014 	tbh	[pc, r4, lsl #1]
 8007308:	001a000f 	.word	0x001a000f
 800730c:	00880065 	.word	0x00880065
 8007310:	00c100b1 	.word	0x00c100b1
 8007314:	01620128 	.word	0x01620128
 8007318:	0186016c 	.word	0x0186016c
 800731c:	01b801a0 	.word	0x01b801a0
 8007320:	01e001cc 	.word	0x01e001cc
 8007324:	01f4      	.short	0x01f4
		sprintf(Buf, "[1]9250 [3]Radio [4]Motor [5]Angle [6]PID [9]IMU [p]Kp [i]Ki [d]Kd [q,w,e] [z,x,c] \r\n ");
 8007326:	4979      	ldr	r1, [pc, #484]	; (800750c <PrintData+0x230>)
 8007328:	4879      	ldr	r0, [pc, #484]	; (8007510 <PrintData+0x234>)
 800732a:	f001 ff8d 	bl	8009248 <strcpy>
	     HAL_UART_Transmit_DMA(&huart1, (uint8_t*)Buf, strlen(Buf));
 800732e:	4878      	ldr	r0, [pc, #480]	; (8007510 <PrintData+0x234>)
 8007330:	f7f8 ff0e 	bl	8000150 <strlen>
 8007334:	4976      	ldr	r1, [pc, #472]	; (8007510 <PrintData+0x234>)
 8007336:	b282      	uxth	r2, r0
 8007338:	4876      	ldr	r0, [pc, #472]	; (8007514 <PrintData+0x238>)
 800733a:	e091      	b.n	8007460 <PrintData+0x184>
	                    imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW], imu.AHRS[ROLL], imu.AHRS[PITCH], imu.gyroYaw, imu.AHRS[YAW]);
 800733c:	4c76      	ldr	r4, [pc, #472]	; (8007518 <PrintData+0x23c>)
	     sprintf(Buf, " acc (%4.2f), (%4.2f), (%4.2f) / gyro (%4.2f), (%4.2f), (%4.2f) / mag (%3.f), (%3.f), (%3.f) / AHRS:(%4.f)(%4.f)(%4.f), (%4.2f) \r\n",
 800733e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007340:	f7f9 f872 	bl	8000428 <__aeabi_f2d>
 8007344:	4606      	mov	r6, r0
 8007346:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800734a:	460f      	mov	r7, r1
 800734c:	f7f9 f86c 	bl	8000428 <__aeabi_f2d>
 8007350:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8007354:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007356:	f7f9 f867 	bl	8000428 <__aeabi_f2d>
 800735a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800735e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007362:	f7f9 f861 	bl	8000428 <__aeabi_f2d>
 8007366:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800736a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800736c:	f7f9 f85c 	bl	8000428 <__aeabi_f2d>
 8007370:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007374:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007376:	f7f9 f857 	bl	8000428 <__aeabi_f2d>
 800737a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800737e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007380:	f7f9 f852 	bl	8000428 <__aeabi_f2d>
 8007384:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007388:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800738a:	f7f9 f84d 	bl	8000428 <__aeabi_f2d>
 800738e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007392:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007394:	f7f9 f848 	bl	8000428 <__aeabi_f2d>
 8007398:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800739c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800739e:	f7f9 f843 	bl	8000428 <__aeabi_f2d>
 80073a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80073a8:	f7f9 f83e 	bl	8000428 <__aeabi_f2d>
 80073ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80073b2:	f7f9 f839 	bl	8000428 <__aeabi_f2d>
 80073b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80073bc:	f7f9 f834 	bl	8000428 <__aeabi_f2d>
 80073c0:	4632      	mov	r2, r6
 80073c2:	e9cd 0100 	strd	r0, r1, [sp]
 80073c6:	463b      	mov	r3, r7
 80073c8:	4954      	ldr	r1, [pc, #336]	; (800751c <PrintData+0x240>)
 80073ca:	4851      	ldr	r0, [pc, #324]	; (8007510 <PrintData+0x234>)
 80073cc:	f001 ff18 	bl	8009200 <sprintf>
 80073d0:	e7ad      	b.n	800732e <PrintData+0x52>
                 	imu.gyro_cal[ROLL], imu.gyro_cal[PITCH], imu.gyro_cal[YAW]);
 80073d2:	4c51      	ldr	r4, [pc, #324]	; (8007518 <PrintData+0x23c>)
		sprintf(Buf, " gyroBias_x: (%3.2f), gyroBias_y: (%3.2f), gyroBias_z: (%3.2f)\r\n",
 80073d4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80073d6:	f7f9 f827 	bl	8000428 <__aeabi_f2d>
 80073da:	4606      	mov	r6, r0
 80073dc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80073de:	460f      	mov	r7, r1
 80073e0:	f7f9 f822 	bl	8000428 <__aeabi_f2d>
 80073e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80073ea:	f7f9 f81d 	bl	8000428 <__aeabi_f2d>
 80073ee:	4632      	mov	r2, r6
 80073f0:	e9cd 0100 	strd	r0, r1, [sp]
 80073f4:	463b      	mov	r3, r7
 80073f6:	494a      	ldr	r1, [pc, #296]	; (8007520 <PrintData+0x244>)
 80073f8:	4845      	ldr	r0, [pc, #276]	; (8007510 <PrintData+0x234>)
 80073fa:	f001 ff01 	bl	8009200 <sprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 80073fe:	4844      	ldr	r0, [pc, #272]	; (8007510 <PrintData+0x234>)
 8007400:	f7f8 fea6 	bl	8000150 <strlen>
 8007404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007408:	b282      	uxth	r2, r0
 800740a:	4941      	ldr	r1, [pc, #260]	; (8007510 <PrintData+0x234>)
 800740c:	4841      	ldr	r0, [pc, #260]	; (8007514 <PrintData+0x238>)
}
 800740e:	b019      	add	sp, #100	; 0x64
 8007410:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007414:	f7fc bc90 	b.w	8003d38 <HAL_UART_Transmit>
	          GPS.year, GPS.month, GPS.day, GPS.hour, GPS.minute, GPS.seconds, GPS.milliseconds, GPS.speed, GPS.GPS_update);
 8007418:	4942      	ldr	r1, [pc, #264]	; (8007524 <PrintData+0x248>)
	  sprintf(Buf, "Y : %2d, M : %2d, D : %2d, H: %2d, min : %2d, sec : %2d, mil : %3d, speed : %.2f, update : %d\n",
 800741a:	f891 008c 	ldrb.w	r0, [r1, #140]	; 0x8c
 800741e:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 8007422:	f891 207b 	ldrb.w	r2, [r1, #123]	; 0x7b
 8007426:	9006      	str	r0, [sp, #24]
 8007428:	f8b1 008a 	ldrh.w	r0, [r1, #138]	; 0x8a
 800742c:	9005      	str	r0, [sp, #20]
 800742e:	f8b1 007e 	ldrh.w	r0, [r1, #126]	; 0x7e
 8007432:	9004      	str	r0, [sp, #16]
 8007434:	f891 007a 	ldrb.w	r0, [r1, #122]	; 0x7a
 8007438:	9003      	str	r0, [sp, #12]
 800743a:	f891 0079 	ldrb.w	r0, [r1, #121]	; 0x79
 800743e:	9002      	str	r0, [sp, #8]
 8007440:	f891 0078 	ldrb.w	r0, [r1, #120]	; 0x78
 8007444:	9001      	str	r0, [sp, #4]
 8007446:	f891 107d 	ldrb.w	r1, [r1, #125]	; 0x7d
 800744a:	4831      	ldr	r0, [pc, #196]	; (8007510 <PrintData+0x234>)
 800744c:	9100      	str	r1, [sp, #0]
 800744e:	4936      	ldr	r1, [pc, #216]	; (8007528 <PrintData+0x24c>)
 8007450:	f001 fed6 	bl	8009200 <sprintf>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
 8007454:	482e      	ldr	r0, [pc, #184]	; (8007510 <PrintData+0x234>)
 8007456:	f7f8 fe7b 	bl	8000150 <strlen>
 800745a:	492d      	ldr	r1, [pc, #180]	; (8007510 <PrintData+0x234>)
 800745c:	b282      	uxth	r2, r0
 800745e:	4833      	ldr	r0, [pc, #204]	; (800752c <PrintData+0x250>)
}
 8007460:	b019      	add	sp, #100	; 0x64
 8007462:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	     HAL_UART_Transmit_DMA(&huart1, (uint8_t*)Buf, strlen(Buf));
 8007466:	f7fc bce3 	b.w	8003e30 <HAL_UART_Transmit_DMA>
		sprintf(Buf, " %d %d %d %d\r\n", motor[0], motor[1], motor[2], motor[3]);
 800746a:	4931      	ldr	r1, [pc, #196]	; (8007530 <PrintData+0x254>)
 800746c:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 8007470:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8007474:	f9b1 2000 	ldrsh.w	r2, [r1]
 8007478:	9001      	str	r0, [sp, #4]
 800747a:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800747e:	4824      	ldr	r0, [pc, #144]	; (8007510 <PrintData+0x234>)
 8007480:	9100      	str	r1, [sp, #0]
 8007482:	492c      	ldr	r1, [pc, #176]	; (8007534 <PrintData+0x258>)
 8007484:	f001 febc 	bl	8009200 <sprintf>
 8007488:	e7b9      	b.n	80073fe <PrintData+0x122>
	    imu.AHRS[ROLL], imu.AHRS[PITCH], imu.gyroYaw, f.ARMED, f.HEADFREE_MODE, cycleTime, cycleTimeMin, cycleTimeMax, Error.error, overrun_count, imu.actual_compass_heading, imu.AHRS[YAW], alt.EstAlt);
 800748a:	4c23      	ldr	r4, [pc, #140]	; (8007518 <PrintData+0x23c>)
	  sprintf(Buf, "AHRS:(%4.f)(%4.f)(%4.f), ARMED: (%d), Headfree: (%d), cycleTime : %d, %d, %d, error : %d, %d, %3.1f, %3.1f, %d\r\n",
 800748c:	4b2a      	ldr	r3, [pc, #168]	; (8007538 <PrintData+0x25c>)
 800748e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007490:	681d      	ldr	r5, [r3, #0]
 8007492:	f7f8 ffc9 	bl	8000428 <__aeabi_f2d>
 8007496:	4b29      	ldr	r3, [pc, #164]	; (800753c <PrintData+0x260>)
 8007498:	4606      	mov	r6, r0
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	460f      	mov	r7, r1
 800749e:	9310      	str	r3, [sp, #64]	; 0x40
 80074a0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80074a4:	f7f8 ffc0 	bl	8000428 <__aeabi_f2d>
 80074a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80074ac:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80074b0:	f7f8 ffba 	bl	8000428 <__aeabi_f2d>
 80074b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074b8:	4b21      	ldr	r3, [pc, #132]	; (8007540 <PrintData+0x264>)
 80074ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074be:	930a      	str	r3, [sp, #40]	; 0x28
	    imu.AHRS[ROLL], imu.AHRS[PITCH], imu.gyroYaw, f.ARMED, f.HEADFREE_MODE, cycleTime, cycleTimeMin, cycleTimeMax, Error.error, overrun_count, imu.actual_compass_heading, imu.AHRS[YAW], alt.EstAlt);
 80074c0:	4b20      	ldr	r3, [pc, #128]	; (8007544 <PrintData+0x268>)
	  sprintf(Buf, "AHRS:(%4.f)(%4.f)(%4.f), ARMED: (%d), Headfree: (%d), cycleTime : %d, %d, %d, error : %d, %d, %3.1f, %3.1f, %d\r\n",
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	9309      	str	r3, [sp, #36]	; 0x24
 80074c6:	4b20      	ldr	r3, [pc, #128]	; (8007548 <PrintData+0x26c>)
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	9308      	str	r3, [sp, #32]
 80074cc:	4b1f      	ldr	r3, [pc, #124]	; (800754c <PrintData+0x270>)
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	9506      	str	r5, [sp, #24]
 80074d2:	9307      	str	r3, [sp, #28]
	    imu.AHRS[ROLL], imu.AHRS[PITCH], imu.gyroYaw, f.ARMED, f.HEADFREE_MODE, cycleTime, cycleTimeMin, cycleTimeMax, Error.error, overrun_count, imu.actual_compass_heading, imu.AHRS[YAW], alt.EstAlt);
 80074d4:	4b1e      	ldr	r3, [pc, #120]	; (8007550 <PrintData+0x274>)
	  sprintf(Buf, "AHRS:(%4.f)(%4.f)(%4.f), ARMED: (%d), Headfree: (%d), cycleTime : %d, %d, %d, error : %d, %d, %3.1f, %3.1f, %d\r\n",
 80074d6:	7b1a      	ldrb	r2, [r3, #12]
 80074d8:	9205      	str	r2, [sp, #20]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	9304      	str	r3, [sp, #16]
 80074de:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80074e0:	f7f8 ffa2 	bl	8000428 <__aeabi_f2d>
 80074e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074e8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80074ec:	f7f8 ff9c 	bl	8000428 <__aeabi_f2d>
 80074f0:	4632      	mov	r2, r6
 80074f2:	e9cd 0100 	strd	r0, r1, [sp]
 80074f6:	463b      	mov	r3, r7
 80074f8:	4916      	ldr	r1, [pc, #88]	; (8007554 <PrintData+0x278>)
 80074fa:	4805      	ldr	r0, [pc, #20]	; (8007510 <PrintData+0x234>)
 80074fc:	f001 fe80 	bl	8009200 <sprintf>
 8007500:	e7a8      	b.n	8007454 <PrintData+0x178>
 8007502:	bf00      	nop
 8007504:	20000821 	.word	0x20000821
 8007508:	40010c00 	.word	0x40010c00
 800750c:	08010103 	.word	0x08010103
 8007510:	200010f0 	.word	0x200010f0
 8007514:	20001390 	.word	0x20001390
 8007518:	20001030 	.word	0x20001030
 800751c:	0801015a 	.word	0x0801015a
 8007520:	080101dd 	.word	0x080101dd
 8007524:	20000ae4 	.word	0x20000ae4
 8007528:	0801021e 	.word	0x0801021e
 800752c:	20001418 	.word	0x20001418
 8007530:	20000bbe 	.word	0x20000bbe
 8007534:	0801027d 	.word	0x0801027d
 8007538:	20000a50 	.word	0x20000a50
 800753c:	200010d0 	.word	0x200010d0
 8007540:	20000a5c 	.word	0x20000a5c
 8007544:	200013d0 	.word	0x200013d0
 8007548:	20000a54 	.word	0x20000a54
 800754c:	20000010 	.word	0x20000010
 8007550:	20000ed4 	.word	0x20000ed4
 8007554:	0801028c 	.word	0x0801028c
            pid.kp[ROLL], pid.kp[PITCH], pid.ki[ROLL], pid.ki[PITCH], pid.kd[ROLL], pid.kd[PITCH], pid.kp[YAW], pid.ki[YAW], pid.kd[YAW], f.ARMED, f.Tuning_MODE);
 8007558:	4c6f      	ldr	r4, [pc, #444]	; (8007718 <PrintData+0x43c>)
    sprintf(Buf,"R[P]: %2.2f, P[P]: %2.2f, R[I]: %2.2f, P[I]: %2.2f, R[D]: %2.2f, P[D]: %2.2f, Y[P]: %2.2f, Y[I]: %2.2f, Y[D]: %2.2f, ARMED: (%d), Tuning : (%d)\r\n",
 800755a:	6860      	ldr	r0, [r4, #4]
 800755c:	f7f8 ff64 	bl	8000428 <__aeabi_f2d>
            pid.kp[ROLL], pid.kp[PITCH], pid.ki[ROLL], pid.ki[PITCH], pid.kd[ROLL], pid.kd[PITCH], pid.kp[YAW], pid.ki[YAW], pid.kd[YAW], f.ARMED, f.Tuning_MODE);
 8007560:	4b6e      	ldr	r3, [pc, #440]	; (800771c <PrintData+0x440>)
    sprintf(Buf,"R[P]: %2.2f, P[P]: %2.2f, R[I]: %2.2f, P[I]: %2.2f, R[D]: %2.2f, P[D]: %2.2f, Y[P]: %2.2f, Y[I]: %2.2f, Y[D]: %2.2f, ARMED: (%d), Tuning : (%d)\r\n",
 8007562:	4606      	mov	r6, r0
 8007564:	789a      	ldrb	r2, [r3, #2]
 8007566:	460f      	mov	r7, r1
 8007568:	9211      	str	r2, [sp, #68]	; 0x44
 800756a:	785b      	ldrb	r3, [r3, #1]
 800756c:	9310      	str	r3, [sp, #64]	; 0x40
 800756e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007570:	f7f8 ff5a 	bl	8000428 <__aeabi_f2d>
 8007574:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007578:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800757a:	f7f8 ff55 	bl	8000428 <__aeabi_f2d>
 800757e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007582:	68e0      	ldr	r0, [r4, #12]
 8007584:	f7f8 ff50 	bl	8000428 <__aeabi_f2d>
 8007588:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800758c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800758e:	f7f8 ff4b 	bl	8000428 <__aeabi_f2d>
 8007592:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007596:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007598:	f7f8 ff46 	bl	8000428 <__aeabi_f2d>
 800759c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80075a2:	f7f8 ff41 	bl	8000428 <__aeabi_f2d>
 80075a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80075ac:	f7f8 ff3c 	bl	8000428 <__aeabi_f2d>
 80075b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075b4:	68a0      	ldr	r0, [r4, #8]
 80075b6:	f7f8 ff37 	bl	8000428 <__aeabi_f2d>
 80075ba:	4632      	mov	r2, r6
 80075bc:	e9cd 0100 	strd	r0, r1, [sp]
 80075c0:	463b      	mov	r3, r7
 80075c2:	4957      	ldr	r1, [pc, #348]	; (8007720 <PrintData+0x444>)
 80075c4:	4857      	ldr	r0, [pc, #348]	; (8007724 <PrintData+0x448>)
 80075c6:	f001 fe1b 	bl	8009200 <sprintf>
 80075ca:	e6b0      	b.n	800732e <PrintData+0x52>
		  sprintf(Buf, " state: %d, data: %d \n ", hdma_usart1_rx.State, rx1_buffer[0]);
 80075cc:	4b56      	ldr	r3, [pc, #344]	; (8007728 <PrintData+0x44c>)
 80075ce:	4a57      	ldr	r2, [pc, #348]	; (800772c <PrintData+0x450>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80075d6:	4956      	ldr	r1, [pc, #344]	; (8007730 <PrintData+0x454>)
 80075d8:	4852      	ldr	r0, [pc, #328]	; (8007724 <PrintData+0x448>)
 80075da:	f001 fe11 	bl	8009200 <sprintf>
 80075de:	e6a6      	b.n	800732e <PrintData+0x52>
		sprintf(Buf, "%f %f %f\r\n",pid.output2[ROLL], pid.output2[PITCH], pid.output2[YAW]);
 80075e0:	4c4d      	ldr	r4, [pc, #308]	; (8007718 <PrintData+0x43c>)
 80075e2:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 80075e6:	f7f8 ff1f 	bl	8000428 <__aeabi_f2d>
 80075ea:	4606      	mov	r6, r0
 80075ec:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 80075f0:	460f      	mov	r7, r1
 80075f2:	f7f8 ff19 	bl	8000428 <__aeabi_f2d>
 80075f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075fa:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 80075fe:	f7f8 ff13 	bl	8000428 <__aeabi_f2d>
 8007602:	4632      	mov	r2, r6
 8007604:	463b      	mov	r3, r7
 8007606:	e9cd 0100 	strd	r0, r1, [sp]
 800760a:	494a      	ldr	r1, [pc, #296]	; (8007734 <PrintData+0x458>)
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRS.Roll, AHRS.Pitch, AHRS.Yaw);
 800760c:	4845      	ldr	r0, [pc, #276]	; (8007724 <PrintData+0x448>)
 800760e:	f001 fdf7 	bl	8009200 <sprintf>
 8007612:	e68c      	b.n	800732e <PrintData+0x52>
		sprintf(Buf, "Roll:(%.2f), Pitch:(%.2f), Yaw:(%.2f), rx_buffer:(%d)\r\n",AHRS.Roll, AHRS.Pitch, AHRS.Yaw, rx1_buffer[0]);
 8007614:	4c48      	ldr	r4, [pc, #288]	; (8007738 <PrintData+0x45c>)
 8007616:	6820      	ldr	r0, [r4, #0]
 8007618:	f7f8 ff06 	bl	8000428 <__aeabi_f2d>
 800761c:	4b42      	ldr	r3, [pc, #264]	; (8007728 <PrintData+0x44c>)
 800761e:	4606      	mov	r6, r0
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	460f      	mov	r7, r1
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	68a0      	ldr	r0, [r4, #8]
 8007628:	f7f8 fefe 	bl	8000428 <__aeabi_f2d>
 800762c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007630:	6860      	ldr	r0, [r4, #4]
 8007632:	f7f8 fef9 	bl	8000428 <__aeabi_f2d>
 8007636:	4632      	mov	r2, r6
 8007638:	e9cd 0100 	strd	r0, r1, [sp]
 800763c:	463b      	mov	r3, r7
 800763e:	493f      	ldr	r1, [pc, #252]	; (800773c <PrintData+0x460>)
 8007640:	4838      	ldr	r0, [pc, #224]	; (8007724 <PrintData+0x448>)
 8007642:	f001 fddd 	bl	8009200 <sprintf>
 8007646:	e672      	b.n	800732e <PrintData+0x52>
		sprintf(Buf, "Data : %d, %d, %d, %d, %d, %d, %d \r\n ", loopTime, ms5611.realTemperature, (uint32_t)ms5611.realPressure, baroPressureSum, ms5611.BaroAlt, (int16_t)alt.EstAlt, f.ARMED);
 8007648:	4834      	ldr	r0, [pc, #208]	; (800771c <PrintData+0x440>)
 800764a:	493d      	ldr	r1, [pc, #244]	; (8007740 <PrintData+0x464>)
 800764c:	7840      	ldrb	r0, [r0, #1]
 800764e:	4b3d      	ldr	r3, [pc, #244]	; (8007744 <PrintData+0x468>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	f9b1 3054 	ldrsh.w	r3, [r1, #84]	; 0x54
 8007656:	9004      	str	r0, [sp, #16]
 8007658:	483b      	ldr	r0, [pc, #236]	; (8007748 <PrintData+0x46c>)
 800765a:	f9b0 0000 	ldrsh.w	r0, [r0]
 800765e:	9003      	str	r0, [sp, #12]
 8007660:	6f08      	ldr	r0, [r1, #112]	; 0x70
 8007662:	9002      	str	r0, [sp, #8]
 8007664:	4839      	ldr	r0, [pc, #228]	; (800774c <PrintData+0x470>)
 8007666:	6800      	ldr	r0, [r0, #0]
 8007668:	9001      	str	r0, [sp, #4]
 800766a:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 800766c:	482d      	ldr	r0, [pc, #180]	; (8007724 <PrintData+0x448>)
 800766e:	9100      	str	r1, [sp, #0]
 8007670:	4937      	ldr	r1, [pc, #220]	; (8007750 <PrintData+0x474>)
 8007672:	f001 fdc5 	bl	8009200 <sprintf>
 8007676:	e65a      	b.n	800732e <PrintData+0x52>
			sprintf(Buf, "\r\n [KP]: %.2f, %.2f, %.2f \r\n ", pid.kp[0], pid.kp[1], pid.kp[2]);
 8007678:	4c27      	ldr	r4, [pc, #156]	; (8007718 <PrintData+0x43c>)
 800767a:	6860      	ldr	r0, [r4, #4]
 800767c:	f7f8 fed4 	bl	8000428 <__aeabi_f2d>
 8007680:	4606      	mov	r6, r0
 8007682:	68e0      	ldr	r0, [r4, #12]
 8007684:	460f      	mov	r7, r1
 8007686:	f7f8 fecf 	bl	8000428 <__aeabi_f2d>
 800768a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800768e:	68a0      	ldr	r0, [r4, #8]
 8007690:	f7f8 feca 	bl	8000428 <__aeabi_f2d>
 8007694:	4632      	mov	r2, r6
 8007696:	e9cd 0100 	strd	r0, r1, [sp]
 800769a:	463b      	mov	r3, r7
 800769c:	492d      	ldr	r1, [pc, #180]	; (8007754 <PrintData+0x478>)
 800769e:	e7b5      	b.n	800760c <PrintData+0x330>
			sprintf(Buf, "\r\n [KI]: %.2f, %.2f, %.2f\r\n", pid.ki[0], pid.ki[1], pid.ki[2]);
 80076a0:	4c1d      	ldr	r4, [pc, #116]	; (8007718 <PrintData+0x43c>)
 80076a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80076a4:	f7f8 fec0 	bl	8000428 <__aeabi_f2d>
 80076a8:	4606      	mov	r6, r0
 80076aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80076ac:	460f      	mov	r7, r1
 80076ae:	f7f8 febb 	bl	8000428 <__aeabi_f2d>
 80076b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80076b8:	f7f8 feb6 	bl	8000428 <__aeabi_f2d>
 80076bc:	4632      	mov	r2, r6
 80076be:	e9cd 0100 	strd	r0, r1, [sp]
 80076c2:	463b      	mov	r3, r7
 80076c4:	4924      	ldr	r1, [pc, #144]	; (8007758 <PrintData+0x47c>)
 80076c6:	e7a1      	b.n	800760c <PrintData+0x330>
			sprintf(Buf, "\r\n [KD]: %.2f, %.2f, %.2f\r\n", pid.kd[0], pid.kd[1], pid.kd[2]);
 80076c8:	4c13      	ldr	r4, [pc, #76]	; (8007718 <PrintData+0x43c>)
 80076ca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80076cc:	f7f8 feac 	bl	8000428 <__aeabi_f2d>
 80076d0:	4606      	mov	r6, r0
 80076d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076d4:	460f      	mov	r7, r1
 80076d6:	f7f8 fea7 	bl	8000428 <__aeabi_f2d>
 80076da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076de:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80076e0:	f7f8 fea2 	bl	8000428 <__aeabi_f2d>
 80076e4:	4632      	mov	r2, r6
 80076e6:	e9cd 0100 	strd	r0, r1, [sp]
 80076ea:	463b      	mov	r3, r7
 80076ec:	491b      	ldr	r1, [pc, #108]	; (800775c <PrintData+0x480>)
 80076ee:	e78d      	b.n	800760c <PrintData+0x330>
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRS.Roll, AHRS.Pitch, AHRS.Yaw);
 80076f0:	4c11      	ldr	r4, [pc, #68]	; (8007738 <PrintData+0x45c>)
 80076f2:	6820      	ldr	r0, [r4, #0]
 80076f4:	f7f8 fe98 	bl	8000428 <__aeabi_f2d>
 80076f8:	4606      	mov	r6, r0
 80076fa:	68a0      	ldr	r0, [r4, #8]
 80076fc:	460f      	mov	r7, r1
 80076fe:	f7f8 fe93 	bl	8000428 <__aeabi_f2d>
 8007702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007706:	6860      	ldr	r0, [r4, #4]
 8007708:	f7f8 fe8e 	bl	8000428 <__aeabi_f2d>
 800770c:	4632      	mov	r2, r6
 800770e:	e9cd 0100 	strd	r0, r1, [sp]
 8007712:	463b      	mov	r3, r7
 8007714:	4912      	ldr	r1, [pc, #72]	; (8007760 <PrintData+0x484>)
 8007716:	e779      	b.n	800760c <PrintData+0x330>
 8007718:	20000bc8 	.word	0x20000bc8
 800771c:	20000ed4 	.word	0x20000ed4
 8007720:	080102fd 	.word	0x080102fd
 8007724:	200010f0 	.word	0x200010f0
 8007728:	20001170 	.word	0x20001170
 800772c:	20001308 	.word	0x20001308
 8007730:	0801038f 	.word	0x0801038f
 8007734:	08010462 	.word	0x08010462
 8007738:	20000b84 	.word	0x20000b84
 800773c:	080103a7 	.word	0x080103a7
 8007740:	20000fb0 	.word	0x20000fb0
 8007744:	20000a58 	.word	0x20000a58
 8007748:	200010d0 	.word	0x200010d0
 800774c:	20000790 	.word	0x20000790
 8007750:	080103df 	.word	0x080103df
 8007754:	08010405 	.word	0x08010405
 8007758:	08010423 	.word	0x08010423
 800775c:	0801043f 	.word	0x0801043f
 8007760:	0801045b 	.word	0x0801045b

08007764 <SerialSerialize>:
void SerialSerialize(uint8_t port,uint8_t a) {
//  uint8_t t = serialHeadTX[port];
//  if (++t >= TX_BUFFER_SIZE) t = 0;
//  serialBufferTX[t][port] = a;
//  serialHeadTX[port] = t;
  if(port == 0){
 8007764:	b940      	cbnz	r0, 8007778 <SerialSerialize+0x14>
    serialBufTx_0[serialHead++] = a;
 8007766:	4809      	ldr	r0, [pc, #36]	; (800778c <SerialSerialize+0x28>)
 8007768:	7803      	ldrb	r3, [r0, #0]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	7002      	strb	r2, [r0, #0]
 8007772:	4a07      	ldr	r2, [pc, #28]	; (8007790 <SerialSerialize+0x2c>)
  }else if(port == 1){
    serialBufTx_1[serialHead++] = a;
 8007774:	54d1      	strb	r1, [r2, r3]
 8007776:	4770      	bx	lr
  }else if(port == 1){
 8007778:	2801      	cmp	r0, #1
 800777a:	d1fc      	bne.n	8007776 <SerialSerialize+0x12>
    serialBufTx_1[serialHead++] = a;
 800777c:	4803      	ldr	r0, [pc, #12]	; (800778c <SerialSerialize+0x28>)
 800777e:	7803      	ldrb	r3, [r0, #0]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	b2d2      	uxtb	r2, r2
 8007786:	7002      	strb	r2, [r0, #0]
 8007788:	4a02      	ldr	r2, [pc, #8]	; (8007794 <SerialSerialize+0x30>)
 800778a:	e7f3      	b.n	8007774 <SerialSerialize+0x10>
 800778c:	20000a3c 	.word	0x20000a3c
 8007790:	2000093c 	.word	0x2000093c
 8007794:	200009bc 	.word	0x200009bc

08007798 <serialize8>:
{
 8007798:	b510      	push	{r4, lr}
 800779a:	4604      	mov	r4, r0
  SerialSerialize(CURRENTPORT,a);
 800779c:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <serialize8+0x1c>)
 800779e:	4601      	mov	r1, r0
 80077a0:	7818      	ldrb	r0, [r3, #0]
 80077a2:	f7ff ffdf 	bl	8007764 <SerialSerialize>
  currentPortState->checksum ^= (a & 0xFF);
 80077a6:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <serialize8+0x20>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	4054      	eors	r4, r2
 80077ae:	701c      	strb	r4, [r3, #0]
 80077b0:	bd10      	pop	{r4, pc}
 80077b2:	bf00      	nop
 80077b4:	20000820 	.word	0x20000820
 80077b8:	2000000c 	.word	0x2000000c

080077bc <serialize16>:
{
 80077bc:	b510      	push	{r4, lr}
 80077be:	4604      	mov	r4, r0
    serialize8((a   ) & 0xFF);
 80077c0:	b2c0      	uxtb	r0, r0
 80077c2:	f7ff ffe9 	bl	8007798 <serialize8>
    serialize8((a>>8) & 0xFF);
 80077c6:	f3c4 2007 	ubfx	r0, r4, #8, #8
}
 80077ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    serialize8((a>>8) & 0xFF);
 80077ce:	f7ff bfe3 	b.w	8007798 <serialize8>

080077d2 <serialize32>:
{
 80077d2:	b510      	push	{r4, lr}
 80077d4:	4604      	mov	r4, r0
    serialize8((a    ) & 0xFF);
 80077d6:	b2c0      	uxtb	r0, r0
 80077d8:	f7ff ffde 	bl	8007798 <serialize8>
    serialize8((a>> 8) & 0xFF);
 80077dc:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80077e0:	f7ff ffda 	bl	8007798 <serialize8>
    serialize8((a>>16) & 0xFF);
 80077e4:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80077e8:	f7ff ffd6 	bl	8007798 <serialize8>
    serialize8((a>>24) & 0xFF);
 80077ec:	0e20      	lsrs	r0, r4, #24
}
 80077ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    serialize8((a>>24) & 0xFF);
 80077f2:	f7ff bfd1 	b.w	8007798 <serialize8>
	...

080077f8 <headSerial>:
{
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	4606      	mov	r6, r0
    serialize8('$');
 80077fc:	2024      	movs	r0, #36	; 0x24
{
 80077fe:	460d      	mov	r5, r1
 8007800:	4614      	mov	r4, r2
    serialize8('$');
 8007802:	f7ff ffc9 	bl	8007798 <serialize8>
    serialize8('M');
 8007806:	204d      	movs	r0, #77	; 0x4d
 8007808:	f7ff ffc6 	bl	8007798 <serialize8>
    serialize8(err ? '!' : '>');
 800780c:	2e00      	cmp	r6, #0
 800780e:	bf14      	ite	ne
 8007810:	2021      	movne	r0, #33	; 0x21
 8007812:	203e      	moveq	r0, #62	; 0x3e
 8007814:	f7ff ffc0 	bl	8007798 <serialize8>
    currentPortState->checksum = 0;               // start calculating a new checksum
 8007818:	2200      	movs	r2, #0
 800781a:	4b05      	ldr	r3, [pc, #20]	; (8007830 <headSerial+0x38>)
    serialize8(s);
 800781c:	4628      	mov	r0, r5
    currentPortState->checksum = 0;               // start calculating a new checksum
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	701a      	strb	r2, [r3, #0]
    serialize8(s);
 8007822:	f7ff ffb9 	bl	8007798 <serialize8>
    serialize8(cmdMSP);
 8007826:	4620      	mov	r0, r4
}
 8007828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serialize8(cmdMSP);
 800782c:	f7ff bfb4 	b.w	8007798 <serialize8>
 8007830:	2000000c 	.word	0x2000000c

08007834 <headSerialResponse>:
{
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4604      	mov	r4, r0
    serialize8('$');
 8007838:	2024      	movs	r0, #36	; 0x24
{
 800783a:	460d      	mov	r5, r1
    serialize8('$');
 800783c:	f7ff ffac 	bl	8007798 <serialize8>
    serialize8('M');
 8007840:	204d      	movs	r0, #77	; 0x4d
 8007842:	f7ff ffa9 	bl	8007798 <serialize8>
    serialize8(err ? '!' : '>');
 8007846:	2c00      	cmp	r4, #0
 8007848:	bf14      	ite	ne
 800784a:	2021      	movne	r0, #33	; 0x21
 800784c:	203e      	moveq	r0, #62	; 0x3e
 800784e:	f7ff ffa3 	bl	8007798 <serialize8>
    currentPortState->checksum = 0;               // start calculating a new checksum
 8007852:	4b06      	ldr	r3, [pc, #24]	; (800786c <headSerialResponse+0x38>)
    serialize8(s);
 8007854:	4628      	mov	r0, r5
    currentPortState->checksum = 0;               // start calculating a new checksum
 8007856:	681c      	ldr	r4, [r3, #0]
 8007858:	2300      	movs	r3, #0
 800785a:	7023      	strb	r3, [r4, #0]
    serialize8(s);
 800785c:	f7ff ff9c 	bl	8007798 <serialize8>
    serialize8(currentPortState->cmdMSP);
 8007860:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
}
 8007864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    serialize8(currentPortState->cmdMSP);
 8007868:	f7ff bf96 	b.w	8007798 <serialize8>
 800786c:	2000000c 	.word	0x2000000c

08007870 <headSerialReply>:
    headSerialResponse(0, s);
 8007870:	4601      	mov	r1, r0
 8007872:	2000      	movs	r0, #0
 8007874:	f7ff bfde 	b.w	8007834 <headSerialResponse>

08007878 <s_struct_partial>:
void s_struct_partial(uint8_t *cb,uint8_t siz) {
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4604      	mov	r4, r0
 800787c:	1845      	adds	r5, r0, r1
  while(siz--) serialize8(*cb++);
 800787e:	42ac      	cmp	r4, r5
 8007880:	d100      	bne.n	8007884 <s_struct_partial+0xc>
}
 8007882:	bd38      	pop	{r3, r4, r5, pc}
  while(siz--) serialize8(*cb++);
 8007884:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007888:	f7ff ff86 	bl	8007798 <serialize8>
 800788c:	e7f7      	b.n	800787e <s_struct_partial+0x6>
	...

08007890 <UartSendData>:
  }

}

void UartSendData(uint8_t port) {
 8007890:	b510      	push	{r4, lr}
 8007892:	4c08      	ldr	r4, [pc, #32]	; (80078b4 <UartSendData+0x24>)
//  while(serialHeadTX[port] != serialTailTX[port]) {
//    if (++serialTailTX[port] >= TX_BUFFER_SIZE) serialTailTX[port] = 0;
//    while(!(USART2->SR & 0x80));
//    USART2->DR = serialBufferTX[serialTailTX[port]][port];
//  }
  if(port == 0){
 8007894:	b938      	cbnz	r0, 80078a6 <UartSendData+0x16>
    //while(HAL_UART_Transmit_DMA(&huart1, serialBufTx_0, serialHead) !=0);
    HAL_UART_Transmit_DMA(&huart1, serialBufTx_0, serialHead);
 8007896:	7822      	ldrb	r2, [r4, #0]
 8007898:	4907      	ldr	r1, [pc, #28]	; (80078b8 <UartSendData+0x28>)
 800789a:	4808      	ldr	r0, [pc, #32]	; (80078bc <UartSendData+0x2c>)
  }else if(port == 1){
    //while(HAL_UART_Transmit_DMA(&huart2, serialBufTx_1, serialHead) !=0);
    HAL_UART_Transmit_DMA(&huart2, serialBufTx_1, serialHead);
 800789c:	f7fc fac8 	bl	8003e30 <HAL_UART_Transmit_DMA>
  }
  serialHead = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	7023      	strb	r3, [r4, #0]
 80078a4:	bd10      	pop	{r4, pc}
  }else if(port == 1){
 80078a6:	2801      	cmp	r0, #1
 80078a8:	d1fa      	bne.n	80078a0 <UartSendData+0x10>
    HAL_UART_Transmit_DMA(&huart2, serialBufTx_1, serialHead);
 80078aa:	7822      	ldrb	r2, [r4, #0]
 80078ac:	4904      	ldr	r1, [pc, #16]	; (80078c0 <UartSendData+0x30>)
 80078ae:	4805      	ldr	r0, [pc, #20]	; (80078c4 <UartSendData+0x34>)
 80078b0:	e7f4      	b.n	800789c <UartSendData+0xc>
 80078b2:	bf00      	nop
 80078b4:	20000a3c 	.word	0x20000a3c
 80078b8:	2000093c 	.word	0x2000093c
 80078bc:	20001390 	.word	0x20001390
 80078c0:	200009bc 	.word	0x200009bc
 80078c4:	20001418 	.word	0x20001418

080078c8 <tailSerialReply>:
{
 80078c8:	b510      	push	{r4, lr}
  SerialSerialize(CURRENTPORT,currentPortState->checksum);
 80078ca:	4b06      	ldr	r3, [pc, #24]	; (80078e4 <tailSerialReply+0x1c>)
 80078cc:	781c      	ldrb	r4, [r3, #0]
 80078ce:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <tailSerialReply+0x20>)
 80078d0:	4620      	mov	r0, r4
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	7819      	ldrb	r1, [r3, #0]
 80078d6:	f7ff ff45 	bl	8007764 <SerialSerialize>
  UartSendData(CURRENTPORT);
 80078da:	4620      	mov	r0, r4
}
 80078dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UartSendData(CURRENTPORT);
 80078e0:	f7ff bfd6 	b.w	8007890 <UartSendData>
 80078e4:	20000820 	.word	0x20000820
 80078e8:	2000000c 	.word	0x2000000c

080078ec <s_struct>:
void s_struct(uint8_t *cb,uint8_t siz) {
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4605      	mov	r5, r0
 80078f0:	460c      	mov	r4, r1
  headSerialReply(siz);  //530
 80078f2:	4608      	mov	r0, r1
 80078f4:	f7ff ffbc 	bl	8007870 <headSerialReply>
  s_struct_partial(cb,siz); //870
 80078f8:	4621      	mov	r1, r4
 80078fa:	4628      	mov	r0, r5
 80078fc:	f7ff ffbc 	bl	8007878 <s_struct_partial>
}
 8007900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  tailSerialReply(); //170
 8007904:	f7ff bfe0 	b.w	80078c8 <tailSerialReply>

08007908 <evaluateCommand>:
 void evaluateCommand(void) {
 8007908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 switch(currentPortState->cmdMSP){
 800790c:	4b8c      	ldr	r3, [pc, #560]	; (8007b40 <evaluateCommand+0x238>)
 void evaluateCommand(void) {
 800790e:	b096      	sub	sp, #88	; 0x58
	 switch(currentPortState->cmdMSP){
 8007910:	6819      	ldr	r1, [r3, #0]
 8007912:	f891 3082 	ldrb.w	r3, [r1, #130]	; 0x82
 8007916:	3b01      	subs	r3, #1
 8007918:	2bcc      	cmp	r3, #204	; 0xcc
 800791a:	f200 80d1 	bhi.w	8007ac0 <evaluateCommand+0x1b8>
 800791e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007922:	0363      	.short	0x0363
 8007924:	0377036f 	.word	0x0377036f
 8007928:	0389037f 	.word	0x0389037f
 800792c:	039e0393 	.word	0x039e0393
 8007930:	03b303a9 	.word	0x03b303a9
 8007934:	03c603bd 	.word	0x03c603bd
 8007938:	03e303da 	.word	0x03e303da
 800793c:	03f503ec 	.word	0x03f503ec
 8007940:	042d03fe 	.word	0x042d03fe
 8007944:	043f0436 	.word	0x043f0436
 8007948:	044f0448 	.word	0x044f0448
 800794c:	04600457 	.word	0x04600457
 8007950:	04720469 	.word	0x04720469
 8007954:	0484047b 	.word	0x0484047b
 8007958:	0496048d 	.word	0x0496048d
 800795c:	04a8049f 	.word	0x04a8049f
 8007960:	04bc04b1 	.word	0x04bc04b1
 8007964:	04ce04c5 	.word	0x04ce04c5
 8007968:	04e004d7 	.word	0x04e004d7
 800796c:	04f204e9 	.word	0x04f204e9
 8007970:	050404fb 	.word	0x050404fb
 8007974:	00cf00cf 	.word	0x00cf00cf
 8007978:	00cf00cf 	.word	0x00cf00cf
 800797c:	00cf00cf 	.word	0x00cf00cf
 8007980:	00cf00cf 	.word	0x00cf00cf
 8007984:	0315030a 	.word	0x0315030a
 8007988:	032b0320 	.word	0x032b0320
 800798c:	033f0335 	.word	0x033f0335
 8007990:	00cf0349 	.word	0x00cf0349
 8007994:	00cf00cf 	.word	0x00cf00cf
 8007998:	00cf00cf 	.word	0x00cf00cf
 800799c:	00cf00cf 	.word	0x00cf00cf
 80079a0:	00cf00cf 	.word	0x00cf00cf
 80079a4:	00cf00cf 	.word	0x00cf00cf
 80079a8:	00cf00cf 	.word	0x00cf00cf
 80079ac:	00cf00cf 	.word	0x00cf00cf
 80079b0:	00cf00cf 	.word	0x00cf00cf
 80079b4:	00cf00cf 	.word	0x00cf00cf
 80079b8:	00cf00cf 	.word	0x00cf00cf
 80079bc:	00cf00cf 	.word	0x00cf00cf
 80079c0:	00cf00cf 	.word	0x00cf00cf
 80079c4:	00cf00cf 	.word	0x00cf00cf
 80079c8:	00cf00cf 	.word	0x00cf00cf
 80079cc:	00cf00cf 	.word	0x00cf00cf
 80079d0:	00cf00cf 	.word	0x00cf00cf
 80079d4:	00cf00cf 	.word	0x00cf00cf
 80079d8:	00cf00cf 	.word	0x00cf00cf
 80079dc:	00cf00cf 	.word	0x00cf00cf
 80079e0:	00cf00cf 	.word	0x00cf00cf
 80079e4:	00cf00cf 	.word	0x00cf00cf
 80079e8:	013500cf 	.word	0x013500cf
 80079ec:	00cf01e2 	.word	0x00cf01e2
 80079f0:	01170214 	.word	0x01170214
 80079f4:	00cf0204 	.word	0x00cf0204
 80079f8:	014f014c 	.word	0x014f014c
 80079fc:	00cf0261 	.word	0x00cf0261
 8007a00:	00cf0217 	.word	0x00cf0217
 8007a04:	00cf0156 	.word	0x00cf0156
 8007a08:	00cf00cf 	.word	0x00cf00cf
 8007a0c:	00cf00cf 	.word	0x00cf00cf
 8007a10:	02af00cf 	.word	0x02af00cf
 8007a14:	00cf00cf 	.word	0x00cf00cf
 8007a18:	00cf00cf 	.word	0x00cf00cf
 8007a1c:	00cf00cf 	.word	0x00cf00cf
 8007a20:	00cf00cf 	.word	0x00cf00cf
 8007a24:	00cf00cf 	.word	0x00cf00cf
 8007a28:	00cf00cf 	.word	0x00cf00cf
 8007a2c:	00cf00cf 	.word	0x00cf00cf
 8007a30:	00cf00cf 	.word	0x00cf00cf
 8007a34:	00cf00cf 	.word	0x00cf00cf
 8007a38:	00cf00cf 	.word	0x00cf00cf
 8007a3c:	00cf00cf 	.word	0x00cf00cf
 8007a40:	00cf00cf 	.word	0x00cf00cf
 8007a44:	00cf00cf 	.word	0x00cf00cf
 8007a48:	00cf00cf 	.word	0x00cf00cf
 8007a4c:	00cd00d5 	.word	0x00cd00d5
 8007a50:	02c700d2 	.word	0x02c700d2
 8007a54:	02ee02e0 	.word	0x02ee02e0
 8007a58:	00cf02fc 	.word	0x00cf02fc
 8007a5c:	00cf00cf 	.word	0x00cf00cf
 8007a60:	00cf00cf 	.word	0x00cf00cf
 8007a64:	00cf00cf 	.word	0x00cf00cf
 8007a68:	00cf00cf 	.word	0x00cf00cf
 8007a6c:	00cf00cf 	.word	0x00cf00cf
 8007a70:	00cf00cf 	.word	0x00cf00cf
 8007a74:	00cf00cf 	.word	0x00cf00cf
 8007a78:	00cf00cf 	.word	0x00cf00cf
 8007a7c:	00cf00cf 	.word	0x00cf00cf
 8007a80:	00cf00cf 	.word	0x00cf00cf
 8007a84:	00cf00cf 	.word	0x00cf00cf
 8007a88:	00cf00cf 	.word	0x00cf00cf
 8007a8c:	00cf00cf 	.word	0x00cf00cf
 8007a90:	00cf00cf 	.word	0x00cf00cf
 8007a94:	00cf00cf 	.word	0x00cf00cf
 8007a98:	00cf00cf 	.word	0x00cf00cf
 8007a9c:	00cf00cf 	.word	0x00cf00cf
 8007aa0:	00cf00cf 	.word	0x00cf00cf
 8007aa4:	00cf00cf 	.word	0x00cf00cf
 8007aa8:	00cf00cf 	.word	0x00cf00cf
 8007aac:	00cf00cf 	.word	0x00cf00cf
 8007ab0:	00cf00cf 	.word	0x00cf00cf
 8007ab4:	00cf0272 	.word	0x00cf0272
 8007ab8:	02bf00cf 	.word	0x02bf00cf
			 mwArm();
 8007abc:	f7fd fe94 	bl	80057e8 <mwArm>
 }
 8007ac0:	b016      	add	sp, #88	; 0x58
 8007ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 mwDisarm();
 8007ac6:	f7fd fe9f 	bl	8005808 <mwDisarm>
			 break;
 8007aca:	e7f9      	b.n	8007ac0 <evaluateCommand+0x1b8>
	 switch(currentPortState->cmdMSP){
 8007acc:	2500      	movs	r5, #0
					RC_Raw.rcCommand[i]  = read8();
 8007ace:	4c1d      	ldr	r4, [pc, #116]	; (8007b44 <evaluateCommand+0x23c>)
 8007ad0:	f7ff fbe6 	bl	80072a0 <read8>
 8007ad4:	192b      	adds	r3, r5, r4
 8007ad6:	3502      	adds	r5, #2
				for(i=0; i < 5; i++){
 8007ad8:	2d0a      	cmp	r5, #10
					RC_Raw.rcCommand[i]  = read8();
 8007ada:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
				for(i=0; i < 5; i++){
 8007ade:	d1f7      	bne.n	8007ad0 <evaluateCommand+0x1c8>
    		RC.rcCommand[ROLL]     = map(RC_Raw.rcCommand[ROLL], 0, 250, -20, 20)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
 8007ae0:	2328      	movs	r3, #40	; 0x28
 8007ae2:	20fa      	movs	r0, #250	; 0xfa
 8007ae4:	f9b4 2050 	ldrsh.w	r2, [r4, #80]	; 0x50
 8007ae8:	4e17      	ldr	r6, [pc, #92]	; (8007b48 <evaluateCommand+0x240>)
 8007aea:	435a      	muls	r2, r3
 8007aec:	fb92 f2f0 	sdiv	r2, r2, r0
 8007af0:	6835      	ldr	r5, [r6, #0]
 8007af2:	4916      	ldr	r1, [pc, #88]	; (8007b4c <evaluateCommand+0x244>)
 8007af4:	3d14      	subs	r5, #20
 8007af6:	442a      	add	r2, r5
 8007af8:	f8a1 2050 	strh.w	r2, [r1, #80]	; 0x50
		    RC.rcCommand[PITCH]    = map(RC_Raw.rcCommand[PITCH], 0, 250, -20, 20)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 8007afc:	f9b4 2052 	ldrsh.w	r2, [r4, #82]	; 0x52
 8007b00:	4353      	muls	r3, r2
 8007b02:	fb93 f3f0 	sdiv	r3, r3, r0
 8007b06:	6872      	ldr	r2, [r6, #4]
 8007b08:	3a14      	subs	r2, #20
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
		    RC.rcCommand[YAW]      = map(RC_Raw.rcCommand[YAW], 0, 250, -100, 100); //0~250 left:0, right:250
 8007b10:	23c8      	movs	r3, #200	; 0xc8
 8007b12:	f9b4 2054 	ldrsh.w	r2, [r4, #84]	; 0x54
 8007b16:	4353      	muls	r3, r2
 8007b18:	fb93 f3f0 	sdiv	r3, r3, r0
 8007b1c:	3b64      	subs	r3, #100	; 0x64
 8007b1e:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
	      RC.rcCommand[THROTTLE] = map(RC_Raw.rcCommand[THROTTLE], 0, 250, 0, 1800);//0~250
 8007b22:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8007b26:	f9b4 2056 	ldrsh.w	r2, [r4, #86]	; 0x56
 8007b2a:	4353      	muls	r3, r2
 8007b2c:	fb93 f3f0 	sdiv	r3, r3, r0
 8007b30:	f8a1 3056 	strh.w	r3, [r1, #86]	; 0x56
	      RC.rcCommand[AUX1] 	   =  RC_Raw.rcCommand[GEAR];
 8007b34:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8007b38:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
			 break;
 8007b3c:	e7c0      	b.n	8007ac0 <evaluateCommand+0x1b8>
 8007b3e:	bf00      	nop
 8007b40:	2000000c 	.word	0x2000000c
 8007b44:	20000eec 	.word	0x20000eec
 8007b48:	20000824 	.word	0x20000824
 8007b4c:	20000f4c 	.word	0x20000f4c
		   s_struct((uint8_t*)&rc, 12);
 8007b50:	210c      	movs	r1, #12
		    rc.roll     = RC.rcCommand[ROLL];
 8007b52:	4bbd      	ldr	r3, [pc, #756]	; (8007e48 <evaluateCommand+0x540>)
 8007b54:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007b58:	f8ad 2014 	strh.w	r2, [sp, #20]
		    rc.pitch    = RC.rcCommand[PITCH];
 8007b5c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8007b60:	f8ad 2016 	strh.w	r2, [sp, #22]
		    rc.yaw      = RC.rcCommand[YAW];
 8007b64:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8007b68:	f8ad 2018 	strh.w	r2, [sp, #24]
		    rc.throttle = RC.rcCommand[THROTTLE];
 8007b6c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8007b70:	f8ad 201a 	strh.w	r2, [sp, #26]
        rc.aux1     = RC.rcCommand[AUX1];
 8007b74:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
        rc.gear     = RC.rcCommand[GEAR];
 8007b78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
        rc.aux1     = RC.rcCommand[AUX1];
 8007b7c:	f8ad 201e 	strh.w	r2, [sp, #30]
        rc.gear     = RC.rcCommand[GEAR];
 8007b80:	f8ad 301c 	strh.w	r3, [sp, #28]
	      	  s_struct((uint8_t*)&st,10);
 8007b84:	a805      	add	r0, sp, #20
 8007b86:	f7ff feb1 	bl	80078ec <s_struct>
 8007b8a:	e799      	b.n	8007ac0 <evaluateCommand+0x1b8>
	    	    st.ArmedTime    = armedTime;
 8007b8c:	4baf      	ldr	r3, [pc, #700]	; (8007e4c <evaluateCommand+0x544>)
	      	  if(f.ARMED) tmp |= 1<<BOXARM;
 8007b8e:	4ab0      	ldr	r2, [pc, #704]	; (8007e50 <evaluateCommand+0x548>)
	    	    st.ArmedTime    = armedTime;
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	9305      	str	r3, [sp, #20]
	      	  st.cycleTime    = loopTime;
 8007b94:	4baf      	ldr	r3, [pc, #700]	; (8007e54 <evaluateCommand+0x54c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	9306      	str	r3, [sp, #24]
	      	  st.error        = Error.error;
 8007b9a:	4baf      	ldr	r3, [pc, #700]	; (8007e58 <evaluateCommand+0x550>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f88d 301c 	strb.w	r3, [sp, #28]
	      	  if(f.ARMED) tmp |= 1<<BOXARM;
 8007ba2:	7853      	ldrb	r3, [r2, #1]
            if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8007ba4:	7b12      	ldrb	r2, [r2, #12]
	      	  if(f.ARMED) tmp |= 1<<BOXARM;
 8007ba6:	3300      	adds	r3, #0
 8007ba8:	bf18      	it	ne
 8007baa:	2301      	movne	r3, #1
            if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8007bac:	b10a      	cbz	r2, 8007bb2 <evaluateCommand+0x2aa>
 8007bae:	f043 0302 	orr.w	r3, r3, #2
	      	  st.flag         = tmp;
 8007bb2:	f88d 301d 	strb.w	r3, [sp, #29]
	      	  s_struct((uint8_t*)&st,10);
 8007bb6:	210a      	movs	r1, #10
 8007bb8:	e7e4      	b.n	8007b84 <evaluateCommand+0x27c>
	      s_struct((uint8_t*)&att,8);
 8007bba:	2108      	movs	r1, #8
 8007bbc:	48a7      	ldr	r0, [pc, #668]	; (8007e5c <evaluateCommand+0x554>)
 8007bbe:	e7e2      	b.n	8007b86 <evaluateCommand+0x27e>
	      tmp.alt = (int16_t) alt.EstAlt;
 8007bc0:	4ba7      	ldr	r3, [pc, #668]	; (8007e60 <evaluateCommand+0x558>)
 8007bc2:	a816      	add	r0, sp, #88	; 0x58
 8007bc4:	681b      	ldr	r3, [r3, #0]
	      s_struct((uint8_t*)&tmp,2);
 8007bc6:	2102      	movs	r1, #2
	      tmp.alt = (int16_t) alt.EstAlt;
 8007bc8:	f820 3d44 	strh.w	r3, [r0, #-68]!
 8007bcc:	e7db      	b.n	8007b86 <evaluateCommand+0x27e>
      tele.roll     = RC.rcCommand[ROLL];
 8007bce:	4b9e      	ldr	r3, [pc, #632]	; (8007e48 <evaluateCommand+0x540>)
 8007bd0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007bd4:	f8ad 2014 	strh.w	r2, [sp, #20]
      tele.pitch    = RC.rcCommand[PITCH];
 8007bd8:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8007bdc:	f8ad 2016 	strh.w	r2, [sp, #22]
      tele.yaw      = RC.rcCommand[YAW];
 8007be0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8007be4:	f8ad 2018 	strh.w	r2, [sp, #24]
      tele.throttle = RC.rcCommand[THROTTLE];
 8007be8:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8007bec:	f8ad 201a 	strh.w	r2, [sp, #26]
      tele.aux1     = RC.rcCommand[AUX1];
 8007bf0:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
      tele.gear     = RC.rcCommand[GEAR];
 8007bf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
      tele.aux1     = RC.rcCommand[AUX1];
 8007bf8:	f8ad 201e 	strh.w	r2, [sp, #30]
      tele.gear     = RC.rcCommand[GEAR];
 8007bfc:	f8ad 301c 	strh.w	r3, [sp, #28]
      tele.ArmedTime    = armedTime;
 8007c00:	4b92      	ldr	r3, [pc, #584]	; (8007e4c <evaluateCommand+0x544>)
      if(f.ARMED) tmp |= 1<<BOXARM;
 8007c02:	4a93      	ldr	r2, [pc, #588]	; (8007e50 <evaluateCommand+0x548>)
      tele.ArmedTime    = armedTime;
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	9308      	str	r3, [sp, #32]
      tele.cycleTime    = loopTime;
 8007c08:	4b92      	ldr	r3, [pc, #584]	; (8007e54 <evaluateCommand+0x54c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	9309      	str	r3, [sp, #36]	; 0x24
      tele.error        = Error.error;
 8007c0e:	4b92      	ldr	r3, [pc, #584]	; (8007e58 <evaluateCommand+0x550>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
      if(f.ARMED) tmp |= 1<<BOXARM;
 8007c16:	7853      	ldrb	r3, [r2, #1]
      if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8007c18:	7b12      	ldrb	r2, [r2, #12]
      if(f.ARMED) tmp |= 1<<BOXARM;
 8007c1a:	3300      	adds	r3, #0
 8007c1c:	bf18      	it	ne
 8007c1e:	2301      	movne	r3, #1
      if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8007c20:	b10a      	cbz	r2, 8007c26 <evaluateCommand+0x31e>
 8007c22:	f043 0302 	orr.w	r3, r3, #2
      tele.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 8007c26:	4c8f      	ldr	r4, [pc, #572]	; (8007e64 <evaluateCommand+0x55c>)
      tele.flag         = tmp;
 8007c28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
      tele.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 8007c2c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007c2e:	f7f9 fa61 	bl	80010f4 <__aeabi_f2iz>
 8007c32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007c36:	0040      	lsls	r0, r0, #1
 8007c38:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
      tele.angle[PITCH] = (int16_t) imu.AHRS[PITCH] * 10;
 8007c3c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007c40:	f7f9 fa58 	bl	80010f4 <__aeabi_f2iz>
 8007c44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007c48:	0040      	lsls	r0, r0, #1
 8007c4a:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
      tele.heading = (int16_t) imu.AHRS[YAW];
 8007c4e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007c52:	f7f9 fa4f 	bl	80010f4 <__aeabi_f2iz>
 8007c56:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
      tele.mag_heading = (int16_t) imu.actual_compass_heading;
 8007c5a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8007c5e:	f7f9 fa49 	bl	80010f4 <__aeabi_f2iz>
      tele.alt = (int16_t) alt.EstAlt;
 8007c62:	2600      	movs	r6, #0
        tele.acc[axis]  = (int16_t) map(imu.accADC[axis], -32768, 32768, -1000, 1000);
 8007c64:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
      tele.alt = (int16_t) alt.EstAlt;
 8007c68:	4b7d      	ldr	r3, [pc, #500]	; (8007e60 <evaluateCommand+0x558>)
 8007c6a:	ad16      	add	r5, sp, #88	; 0x58
 8007c6c:	681b      	ldr	r3, [r3, #0]
      tele.mag_heading = (int16_t) imu.actual_compass_heading;
 8007c6e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
      tele.alt = (int16_t) alt.EstAlt;
 8007c72:	f825 3d26 	strh.w	r3, [r5, #-38]!
 8007c76:	f104 0730 	add.w	r7, r4, #48	; 0x30
        tele.acc[axis]  = (int16_t) map(imu.accADC[axis], -32768, 32768, -1000, 1000);
 8007c7a:	19a3      	adds	r3, r4, r6
 8007c7c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
        tele.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 8007c80:	f857 0f04 	ldr.w	r0, [r7, #4]!
        tele.acc[axis]  = (int16_t) map(imu.accADC[axis], -32768, 32768, -1000, 1000);
 8007c84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007c88:	fb08 f303 	mul.w	r3, r8, r3
 8007c8c:	141b      	asrs	r3, r3, #16
 8007c8e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8007c92:	f825 3f02 	strh.w	r3, [r5, #2]!
        tele.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 8007c96:	f7f9 fa2d 	bl	80010f4 <__aeabi_f2iz>
 8007c9a:	80e8      	strh	r0, [r5, #6]
        tele.mag[axis]  = (int16_t) imu.magRaw[axis];
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7f9 fa29 	bl	80010f4 <__aeabi_f2iz>
 8007ca2:	3602      	adds	r6, #2
      for(uint8_t axis=0; axis<3;axis++){
 8007ca4:	2e06      	cmp	r6, #6
        tele.mag[axis]  = (int16_t) imu.magRaw[axis];
 8007ca6:	81a8      	strh	r0, [r5, #12]
      for(uint8_t axis=0; axis<3;axis++){
 8007ca8:	d1e7      	bne.n	8007c7a <evaluateCommand+0x372>
      tele.a     = GPS.fixquality;
 8007caa:	4b6f      	ldr	r3, [pc, #444]	; (8007e68 <evaluateCommand+0x560>)
      s_struct((uint8_t*)&tele,68);
 8007cac:	2144      	movs	r1, #68	; 0x44
      tele.a     = GPS.fixquality;
 8007cae:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8007cb2:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
      tele.b     = GPS.satellites;
 8007cb6:	f893 2091 	ldrb.w	r2, [r3, #145]	; 0x91
 8007cba:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
      tele.c     = GPS.latitudeDegrees;
 8007cbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
      tele.d     = GPS.longitudeDegrees;
 8007cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
      tele.c     = GPS.latitudeDegrees;
 8007cc6:	9212      	str	r2, [sp, #72]	; 0x48
      tele.d     = GPS.longitudeDegrees;
 8007cc8:	9313      	str	r3, [sp, #76]	; 0x4c
      tele.motor[0] = motor[0];
 8007cca:	4b68      	ldr	r3, [pc, #416]	; (8007e6c <evaluateCommand+0x564>)
 8007ccc:	881a      	ldrh	r2, [r3, #0]
 8007cce:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
      tele.motor[1] = motor[1];
 8007cd2:	885a      	ldrh	r2, [r3, #2]
 8007cd4:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
      tele.motor[2] = motor[2];
 8007cd8:	889a      	ldrh	r2, [r3, #4]
      tele.motor[3] = motor[3];
 8007cda:	88db      	ldrh	r3, [r3, #6]
      tele.motor[2] = motor[2];
 8007cdc:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
      tele.motor[3] = motor[3];
 8007ce0:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 8007ce4:	e74e      	b.n	8007b84 <evaluateCommand+0x27c>
	 switch(currentPortState->cmdMSP){
 8007ce6:	2400      	movs	r4, #0
          mpu.acc[axis]  = (int16_t) map(imu.accADC[axis], -32768, 32768, -1000, 1000);
 8007ce8:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
 8007cec:	4e60      	ldr	r6, [pc, #384]	; (8007e70 <evaluateCommand+0x568>)
 8007cee:	f10d 0512 	add.w	r5, sp, #18
 8007cf2:	f1a6 0830 	sub.w	r8, r6, #48	; 0x30
 8007cf6:	eb04 0308 	add.w	r3, r4, r8
 8007cfa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
          mpu.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 8007cfe:	f856 0f04 	ldr.w	r0, [r6, #4]!
          mpu.acc[axis]  = (int16_t) map(imu.accADC[axis], -32768, 32768, -1000, 1000);
 8007d02:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007d06:	437b      	muls	r3, r7
 8007d08:	141b      	asrs	r3, r3, #16
 8007d0a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8007d0e:	f825 3f02 	strh.w	r3, [r5, #2]!
          mpu.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 8007d12:	f7f9 f9ef 	bl	80010f4 <__aeabi_f2iz>
 8007d16:	80e8      	strh	r0, [r5, #6]
          mpu.mag[axis]  = (int16_t) imu.magRaw[axis];
 8007d18:	68f0      	ldr	r0, [r6, #12]
 8007d1a:	f7f9 f9eb 	bl	80010f4 <__aeabi_f2iz>
 8007d1e:	3402      	adds	r4, #2
        for(uint8_t axis=0; axis<3;axis++){
 8007d20:	2c06      	cmp	r4, #6
          mpu.mag[axis]  = (int16_t) imu.magRaw[axis];
 8007d22:	81a8      	strh	r0, [r5, #12]
        for(uint8_t axis=0; axis<3;axis++){
 8007d24:	d1e7      	bne.n	8007cf6 <evaluateCommand+0x3ee>
        s_struct((uint8_t*)&pid_t,18);
 8007d26:	2112      	movs	r1, #18
 8007d28:	e72c      	b.n	8007b84 <evaluateCommand+0x27c>
	      msp_raw_gps.a     = GPS.fixquality;
 8007d2a:	4b4f      	ldr	r3, [pc, #316]	; (8007e68 <evaluateCommand+0x560>)
 8007d2c:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8007d30:	f88d 2014 	strb.w	r2, [sp, #20]
	      msp_raw_gps.b     = GPS.satellites;
 8007d34:	f893 2091 	ldrb.w	r2, [r3, #145]	; 0x91
 8007d38:	f88d 2015 	strb.w	r2, [sp, #21]
	      msp_raw_gps.c     = GPS.latitudeDegrees;
 8007d3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	      msp_raw_gps.d     = GPS.longitudeDegrees;
 8007d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	      msp_raw_gps.c     = GPS.latitudeDegrees;
 8007d44:	9206      	str	r2, [sp, #24]
	      msp_raw_gps.d     = GPS.longitudeDegrees;
 8007d46:	9307      	str	r3, [sp, #28]
 8007d48:	e735      	b.n	8007bb6 <evaluateCommand+0x2ae>
	      s_struct((uint8_t*)&motor,8);
 8007d4a:	2108      	movs	r1, #8
 8007d4c:	4847      	ldr	r0, [pc, #284]	; (8007e6c <evaluateCommand+0x564>)
 8007d4e:	e71a      	b.n	8007b86 <evaluateCommand+0x27e>
        pid_t.ROLL[0]  = (int16_t) (pid.kp[ROLL]  * 10);
 8007d50:	4c48      	ldr	r4, [pc, #288]	; (8007e74 <evaluateCommand+0x56c>)
 8007d52:	4949      	ldr	r1, [pc, #292]	; (8007e78 <evaluateCommand+0x570>)
 8007d54:	6860      	ldr	r0, [r4, #4]
 8007d56:	f7f8 fff1 	bl	8000d3c <__aeabi_fmul>
 8007d5a:	f7f9 f9cb 	bl	80010f4 <__aeabi_f2iz>
        pid_t.ROLL[1]  = (int16_t) (pid.ki[ROLL]  * 10);
 8007d5e:	4946      	ldr	r1, [pc, #280]	; (8007e78 <evaluateCommand+0x570>)
        pid_t.ROLL[0]  = (int16_t) (pid.kp[ROLL]  * 10);
 8007d60:	f8ad 0014 	strh.w	r0, [sp, #20]
        pid_t.ROLL[1]  = (int16_t) (pid.ki[ROLL]  * 10);
 8007d64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007d66:	f7f8 ffe9 	bl	8000d3c <__aeabi_fmul>
 8007d6a:	f7f9 f9c3 	bl	80010f4 <__aeabi_f2iz>
        pid_t.ROLL[2]  = (int16_t) (pid.kd[ROLL]  * 10);
 8007d6e:	4942      	ldr	r1, [pc, #264]	; (8007e78 <evaluateCommand+0x570>)
        pid_t.ROLL[1]  = (int16_t) (pid.ki[ROLL]  * 10);
 8007d70:	f8ad 0016 	strh.w	r0, [sp, #22]
        pid_t.ROLL[2]  = (int16_t) (pid.kd[ROLL]  * 10);
 8007d74:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007d76:	f7f8 ffe1 	bl	8000d3c <__aeabi_fmul>
 8007d7a:	f7f9 f9bb 	bl	80010f4 <__aeabi_f2iz>
        pid_t.PITCH[0] = (int16_t) (pid.kp[PITCH] * 10);
 8007d7e:	493e      	ldr	r1, [pc, #248]	; (8007e78 <evaluateCommand+0x570>)
        pid_t.ROLL[2]  = (int16_t) (pid.kd[ROLL]  * 10);
 8007d80:	f8ad 0018 	strh.w	r0, [sp, #24]
        pid_t.PITCH[0] = (int16_t) (pid.kp[PITCH] * 10);
 8007d84:	68a0      	ldr	r0, [r4, #8]
 8007d86:	f7f8 ffd9 	bl	8000d3c <__aeabi_fmul>
 8007d8a:	f7f9 f9b3 	bl	80010f4 <__aeabi_f2iz>
        pid_t.PITCH[1] = (int16_t) (pid.ki[PITCH] * 10);
 8007d8e:	493a      	ldr	r1, [pc, #232]	; (8007e78 <evaluateCommand+0x570>)
        pid_t.PITCH[0] = (int16_t) (pid.kp[PITCH] * 10);
 8007d90:	f8ad 001a 	strh.w	r0, [sp, #26]
        pid_t.PITCH[1] = (int16_t) (pid.ki[PITCH] * 10);
 8007d94:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007d96:	f7f8 ffd1 	bl	8000d3c <__aeabi_fmul>
 8007d9a:	f7f9 f9ab 	bl	80010f4 <__aeabi_f2iz>
        pid_t.PITCH[2] = (int16_t) (pid.kd[PITCH] * 10);
 8007d9e:	4936      	ldr	r1, [pc, #216]	; (8007e78 <evaluateCommand+0x570>)
        pid_t.PITCH[1] = (int16_t) (pid.ki[PITCH] * 10);
 8007da0:	f8ad 001c 	strh.w	r0, [sp, #28]
        pid_t.PITCH[2] = (int16_t) (pid.kd[PITCH] * 10);
 8007da4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007da6:	f7f8 ffc9 	bl	8000d3c <__aeabi_fmul>
 8007daa:	f7f9 f9a3 	bl	80010f4 <__aeabi_f2iz>
        pid_t.YAW[0]   = (int16_t) (pid.kp[YAW]   * 10);
 8007dae:	4932      	ldr	r1, [pc, #200]	; (8007e78 <evaluateCommand+0x570>)
        pid_t.PITCH[2] = (int16_t) (pid.kd[PITCH] * 10);
 8007db0:	f8ad 001e 	strh.w	r0, [sp, #30]
        pid_t.YAW[0]   = (int16_t) (pid.kp[YAW]   * 10);
 8007db4:	68e0      	ldr	r0, [r4, #12]
 8007db6:	f7f8 ffc1 	bl	8000d3c <__aeabi_fmul>
 8007dba:	f7f9 f99b 	bl	80010f4 <__aeabi_f2iz>
        pid_t.YAW[1]   = (int16_t) (pid.ki[YAW]   * 10);
 8007dbe:	492e      	ldr	r1, [pc, #184]	; (8007e78 <evaluateCommand+0x570>)
        pid_t.YAW[0]   = (int16_t) (pid.kp[YAW]   * 10);
 8007dc0:	f8ad 0020 	strh.w	r0, [sp, #32]
        pid_t.YAW[1]   = (int16_t) (pid.ki[YAW]   * 10);
 8007dc4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007dc6:	f7f8 ffb9 	bl	8000d3c <__aeabi_fmul>
 8007dca:	f7f9 f993 	bl	80010f4 <__aeabi_f2iz>
        pid_t.YAW[2]   = (int16_t) (pid.kd[YAW]   * 10);
 8007dce:	492a      	ldr	r1, [pc, #168]	; (8007e78 <evaluateCommand+0x570>)
        pid_t.YAW[1]   = (int16_t) (pid.ki[YAW]   * 10);
 8007dd0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        pid_t.YAW[2]   = (int16_t) (pid.kd[YAW]   * 10);
 8007dd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dd6:	f7f8 ffb1 	bl	8000d3c <__aeabi_fmul>
 8007dda:	f7f9 f98b 	bl	80010f4 <__aeabi_f2iz>
 8007dde:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 8007de2:	e7a0      	b.n	8007d26 <evaluateCommand+0x41e>
	      analog.VBAT = BAT.VBAT;
 8007de4:	4b25      	ldr	r3, [pc, #148]	; (8007e7c <evaluateCommand+0x574>)
 8007de6:	6858      	ldr	r0, [r3, #4]
 8007de8:	f7f9 f9aa 	bl	8001140 <__aeabi_f2uiz>
	      analog.Temp = (imu.Temp*10);
 8007dec:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <evaluateCommand+0x55c>)
 8007dee:	4922      	ldr	r1, [pc, #136]	; (8007e78 <evaluateCommand+0x570>)
	      analog.VBAT = BAT.VBAT;
 8007df0:	f8ad 0014 	strh.w	r0, [sp, #20]
	      analog.Temp = (imu.Temp*10);
 8007df4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007df6:	f7f8 ffa1 	bl	8000d3c <__aeabi_fmul>
 8007dfa:	f7f9 f9a1 	bl	8001140 <__aeabi_f2uiz>
	      s_struct((uint8_t*)&analog,4);
 8007dfe:	2104      	movs	r1, #4
	      analog.Temp = (imu.Temp*10);
 8007e00:	f8ad 0016 	strh.w	r0, [sp, #22]
 8007e04:	e6be      	b.n	8007b84 <evaluateCommand+0x27c>
 8007e06:	4c1b      	ldr	r4, [pc, #108]	; (8007e74 <evaluateCommand+0x56c>)
				 pid.kp[i] /= 10;
 8007e08:	4d1b      	ldr	r5, [pc, #108]	; (8007e78 <evaluateCommand+0x570>)
 8007e0a:	f104 060c 	add.w	r6, r4, #12
				 pid.kp[i] = (float) read16();
 8007e0e:	f7ff fa51 	bl	80072b4 <read16>
 8007e12:	f7f8 ff3b 	bl	8000c8c <__aeabi_ui2f>
				 pid.kp[i] /= 10;
 8007e16:	4629      	mov	r1, r5
 8007e18:	f7f9 f844 	bl	8000ea4 <__aeabi_fdiv>
 8007e1c:	f844 0f04 	str.w	r0, [r4, #4]!
				 pid.ki[i] = (float) read16();
 8007e20:	f7ff fa48 	bl	80072b4 <read16>
 8007e24:	f7f8 ff32 	bl	8000c8c <__aeabi_ui2f>
				 pid.ki[i] /= 10;
 8007e28:	4629      	mov	r1, r5
 8007e2a:	f7f9 f83b 	bl	8000ea4 <__aeabi_fdiv>
 8007e2e:	6260      	str	r0, [r4, #36]	; 0x24
				 pid.kd[i] = (float) read16();
 8007e30:	f7ff fa40 	bl	80072b4 <read16>
 8007e34:	f7f8 ff2a 	bl	8000c8c <__aeabi_ui2f>
				 pid.kd[i] /= 10;
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f9 f833 	bl	8000ea4 <__aeabi_fdiv>
			 	for(i=0; i < 3; i++){
 8007e3e:	42b4      	cmp	r4, r6
				 pid.kd[i] /= 10;
 8007e40:	64a0      	str	r0, [r4, #72]	; 0x48
			 	for(i=0; i < 3; i++){
 8007e42:	d1e4      	bne.n	8007e0e <evaluateCommand+0x506>
 8007e44:	e63c      	b.n	8007ac0 <evaluateCommand+0x1b8>
 8007e46:	bf00      	nop
 8007e48:	20000f4c 	.word	0x20000f4c
 8007e4c:	20000a48 	.word	0x20000a48
 8007e50:	20000ed4 	.word	0x20000ed4
 8007e54:	20000a58 	.word	0x20000a58
 8007e58:	200013d0 	.word	0x200013d0
 8007e5c:	20000b7c 	.word	0x20000b7c
 8007e60:	200010d0 	.word	0x200010d0
 8007e64:	20001030 	.word	0x20001030
 8007e68:	20000ae4 	.word	0x20000ae4
 8007e6c:	20000bbe 	.word	0x20000bbe
 8007e70:	20001060 	.word	0x20001060
 8007e74:	20000bc8 	.word	0x20000bc8
 8007e78:	41200000 	.word	0x41200000
 8007e7c:	20001174 	.word	0x20001174
       Error.error = 0;
 8007e80:	2400      	movs	r4, #0
 8007e82:	4bab      	ldr	r3, [pc, #684]	; (8008130 <evaluateCommand+0x828>)
       RGB_R_OFF;
 8007e84:	2201      	movs	r2, #1
 8007e86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007e8a:	48aa      	ldr	r0, [pc, #680]	; (8008134 <evaluateCommand+0x82c>)
       Error.error = 0;
 8007e8c:	701c      	strb	r4, [r3, #0]
       RGB_R_OFF;
 8007e8e:	f7fa f861 	bl	8001f54 <HAL_GPIO_WritePin>
       cycleTimeMin = 65535;
 8007e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
       cycleTimeMax = 0;
 8007e96:	4ba8      	ldr	r3, [pc, #672]	; (8008138 <evaluateCommand+0x830>)
 8007e98:	801c      	strh	r4, [r3, #0]
       cycleTimeMin = 65535;
 8007e9a:	4ba8      	ldr	r3, [pc, #672]	; (800813c <evaluateCommand+0x834>)
 8007e9c:	801a      	strh	r2, [r3, #0]
        break;
 8007e9e:	e60f      	b.n	8007ac0 <evaluateCommand+0x1b8>
			 if(!f.HEADFREE_MODE){
 8007ea0:	4ba7      	ldr	r3, [pc, #668]	; (8008140 <evaluateCommand+0x838>)
 8007ea2:	7b1a      	ldrb	r2, [r3, #12]
 8007ea4:	b912      	cbnz	r2, 8007eac <evaluateCommand+0x5a4>
			   f.HEADFREE_MODE = 1;
 8007ea6:	2201      	movs	r2, #1
			   f.HEADFREE_MODE = 0;
 8007ea8:	731a      	strb	r2, [r3, #12]
 8007eaa:	e609      	b.n	8007ac0 <evaluateCommand+0x1b8>
 8007eac:	2200      	movs	r2, #0
 8007eae:	e7fb      	b.n	8007ea8 <evaluateCommand+0x5a0>
				MSP_TRIM[PITCH] += 1;
 8007eb0:	4aa4      	ldr	r2, [pc, #656]	; (8008144 <evaluateCommand+0x83c>)
 8007eb2:	6853      	ldr	r3, [r2, #4]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	6053      	str	r3, [r2, #4]
				sprintf(Buf, "MSP_TRIM_UP : %d, %d, %d, %d, %d\r\n ", currentPortState->inBuf[0], currentPortState->inBuf[1], currentPortState->inBuf[2], currentPortState->inBuf[3], currentPortState->inBuf[4]);
 8007eb8:	7988      	ldrb	r0, [r1, #6]
 8007eba:	78cb      	ldrb	r3, [r1, #3]
 8007ebc:	788a      	ldrb	r2, [r1, #2]
 8007ebe:	9002      	str	r0, [sp, #8]
 8007ec0:	7948      	ldrb	r0, [r1, #5]
 8007ec2:	9001      	str	r0, [sp, #4]
 8007ec4:	7909      	ldrb	r1, [r1, #4]
 8007ec6:	9100      	str	r1, [sp, #0]
 8007ec8:	499f      	ldr	r1, [pc, #636]	; (8008148 <evaluateCommand+0x840>)
				sprintf(Buf, "MSP_TRIM_RIGHT : %d, %d, %d, %d, %d\r\n ", currentPortState->inBuf[0], currentPortState->inBuf[1], currentPortState->inBuf[2], currentPortState->inBuf[3], currentPortState->inBuf[4]);
 8007eca:	48a0      	ldr	r0, [pc, #640]	; (800814c <evaluateCommand+0x844>)
 8007ecc:	f001 f998 	bl	8009200 <sprintf>
    		HAL_UART_Transmit_IT(&huart1, (uint8_t*)Buf, strlen(Buf));
 8007ed0:	489e      	ldr	r0, [pc, #632]	; (800814c <evaluateCommand+0x844>)
 8007ed2:	f7f8 f93d 	bl	8000150 <strlen>
 8007ed6:	499d      	ldr	r1, [pc, #628]	; (800814c <evaluateCommand+0x844>)
 8007ed8:	b282      	uxth	r2, r0
 8007eda:	489d      	ldr	r0, [pc, #628]	; (8008150 <evaluateCommand+0x848>)
 8007edc:	f7fb ff88 	bl	8003df0 <HAL_UART_Transmit_IT>
			 break;
 8007ee0:	e5ee      	b.n	8007ac0 <evaluateCommand+0x1b8>
				MSP_TRIM[PITCH] -= 1;
 8007ee2:	4a98      	ldr	r2, [pc, #608]	; (8008144 <evaluateCommand+0x83c>)
 8007ee4:	6853      	ldr	r3, [r2, #4]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	6053      	str	r3, [r2, #4]
				sprintf(Buf, "MSP_TRIM_DOWN : %d, %d, %d, %d, %d\r\n ", currentPortState->inBuf[0], currentPortState->inBuf[1], currentPortState->inBuf[2], currentPortState->inBuf[3], currentPortState->inBuf[4]);
 8007eea:	7988      	ldrb	r0, [r1, #6]
 8007eec:	78cb      	ldrb	r3, [r1, #3]
 8007eee:	788a      	ldrb	r2, [r1, #2]
 8007ef0:	9002      	str	r0, [sp, #8]
 8007ef2:	7948      	ldrb	r0, [r1, #5]
 8007ef4:	9001      	str	r0, [sp, #4]
 8007ef6:	7909      	ldrb	r1, [r1, #4]
 8007ef8:	9100      	str	r1, [sp, #0]
 8007efa:	4996      	ldr	r1, [pc, #600]	; (8008154 <evaluateCommand+0x84c>)
 8007efc:	e7e5      	b.n	8007eca <evaluateCommand+0x5c2>
				MSP_TRIM[ROLL] -= 1;
 8007efe:	4a91      	ldr	r2, [pc, #580]	; (8008144 <evaluateCommand+0x83c>)
 8007f00:	6813      	ldr	r3, [r2, #0]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	6013      	str	r3, [r2, #0]
				sprintf(Buf, "MSP_TRIM_LEFT : %d, %d, %d, %d, %d\r\n ", currentPortState->inBuf[0], currentPortState->inBuf[1], currentPortState->inBuf[2], currentPortState->inBuf[3], currentPortState->inBuf[4]);
 8007f06:	7988      	ldrb	r0, [r1, #6]
 8007f08:	78cb      	ldrb	r3, [r1, #3]
 8007f0a:	788a      	ldrb	r2, [r1, #2]
 8007f0c:	9002      	str	r0, [sp, #8]
 8007f0e:	7948      	ldrb	r0, [r1, #5]
 8007f10:	9001      	str	r0, [sp, #4]
 8007f12:	7909      	ldrb	r1, [r1, #4]
 8007f14:	9100      	str	r1, [sp, #0]
 8007f16:	4990      	ldr	r1, [pc, #576]	; (8008158 <evaluateCommand+0x850>)
 8007f18:	e7d7      	b.n	8007eca <evaluateCommand+0x5c2>
				MSP_TRIM[ROLL] += 1;
 8007f1a:	4a8a      	ldr	r2, [pc, #552]	; (8008144 <evaluateCommand+0x83c>)
 8007f1c:	6813      	ldr	r3, [r2, #0]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	6013      	str	r3, [r2, #0]
				sprintf(Buf, "MSP_TRIM_RIGHT : %d, %d, %d, %d, %d\r\n ", currentPortState->inBuf[0], currentPortState->inBuf[1], currentPortState->inBuf[2], currentPortState->inBuf[3], currentPortState->inBuf[4]);
 8007f22:	7988      	ldrb	r0, [r1, #6]
 8007f24:	78cb      	ldrb	r3, [r1, #3]
 8007f26:	788a      	ldrb	r2, [r1, #2]
 8007f28:	9002      	str	r0, [sp, #8]
 8007f2a:	7948      	ldrb	r0, [r1, #5]
 8007f2c:	9001      	str	r0, [sp, #4]
 8007f2e:	7909      	ldrb	r1, [r1, #4]
 8007f30:	9100      	str	r1, [sp, #0]
 8007f32:	498a      	ldr	r1, [pc, #552]	; (800815c <evaluateCommand+0x854>)
 8007f34:	e7c9      	b.n	8007eca <evaluateCommand+0x5c2>
		   pid.kp[ROLL] = read32();
 8007f36:	f7ff f9c7 	bl	80072c8 <read32>
 8007f3a:	f7f8 fea7 	bl	8000c8c <__aeabi_ui2f>
		   pid.kp[ROLL]/=10;
 8007f3e:	4988      	ldr	r1, [pc, #544]	; (8008160 <evaluateCommand+0x858>)
 8007f40:	f7f8 ffb0 	bl	8000ea4 <__aeabi_fdiv>
 8007f44:	4b87      	ldr	r3, [pc, #540]	; (8008164 <evaluateCommand+0x85c>)
 8007f46:	6058      	str	r0, [r3, #4]
		   pid.kp[PITCH] = pid.kp[ROLL];
 8007f48:	6098      	str	r0, [r3, #8]
			 break;
 8007f4a:	e5b9      	b.n	8007ac0 <evaluateCommand+0x1b8>
	     pid.ki[ROLL] = read32();
 8007f4c:	f7ff f9bc 	bl	80072c8 <read32>
 8007f50:	f7f8 fe9c 	bl	8000c8c <__aeabi_ui2f>
	     pid.ki[ROLL]/=10;
 8007f54:	4982      	ldr	r1, [pc, #520]	; (8008160 <evaluateCommand+0x858>)
 8007f56:	f7f8 ffa5 	bl	8000ea4 <__aeabi_fdiv>
 8007f5a:	4b82      	ldr	r3, [pc, #520]	; (8008164 <evaluateCommand+0x85c>)
 8007f5c:	6298      	str	r0, [r3, #40]	; 0x28
	     pid.ki[PITCH] = pid.ki[ROLL];
 8007f5e:	62d8      	str	r0, [r3, #44]	; 0x2c
	     break;
 8007f60:	e5ae      	b.n	8007ac0 <evaluateCommand+0x1b8>
	     pid.kd[ROLL] = read32();
 8007f62:	f7ff f9b1 	bl	80072c8 <read32>
 8007f66:	f7f8 fe91 	bl	8000c8c <__aeabi_ui2f>
	     pid.kd[ROLL]/=10;
 8007f6a:	497d      	ldr	r1, [pc, #500]	; (8008160 <evaluateCommand+0x858>)
 8007f6c:	f7f8 ff9a 	bl	8000ea4 <__aeabi_fdiv>
 8007f70:	4b7c      	ldr	r3, [pc, #496]	; (8008164 <evaluateCommand+0x85c>)
 8007f72:	64d8      	str	r0, [r3, #76]	; 0x4c
	     pid.kd[PITCH] = pid.kd[ROLL];
 8007f74:	6518      	str	r0, [r3, #80]	; 0x50
	     break;
 8007f76:	e5a3      	b.n	8007ac0 <evaluateCommand+0x1b8>
	     pid.kp[YAW] = read32();
 8007f78:	f7ff f9a6 	bl	80072c8 <read32>
 8007f7c:	f7f8 fe86 	bl	8000c8c <__aeabi_ui2f>
	     pid.kp[YAW]/=10;
 8007f80:	4977      	ldr	r1, [pc, #476]	; (8008160 <evaluateCommand+0x858>)
 8007f82:	f7f8 ff8f 	bl	8000ea4 <__aeabi_fdiv>
 8007f86:	4b77      	ldr	r3, [pc, #476]	; (8008164 <evaluateCommand+0x85c>)
 8007f88:	60d8      	str	r0, [r3, #12]
	     break;
 8007f8a:	e599      	b.n	8007ac0 <evaluateCommand+0x1b8>
	     pid.ki[YAW] = read32();
 8007f8c:	f7ff f99c 	bl	80072c8 <read32>
 8007f90:	f7f8 fe7c 	bl	8000c8c <__aeabi_ui2f>
	     pid.ki[YAW]/=10;
 8007f94:	4972      	ldr	r1, [pc, #456]	; (8008160 <evaluateCommand+0x858>)
 8007f96:	f7f8 ff85 	bl	8000ea4 <__aeabi_fdiv>
 8007f9a:	4b72      	ldr	r3, [pc, #456]	; (8008164 <evaluateCommand+0x85c>)
 8007f9c:	6318      	str	r0, [r3, #48]	; 0x30
	     break;
 8007f9e:	e58f      	b.n	8007ac0 <evaluateCommand+0x1b8>
	     pid.kd[YAW] = read32();
 8007fa0:	f7ff f992 	bl	80072c8 <read32>
 8007fa4:	f7f8 fe72 	bl	8000c8c <__aeabi_ui2f>
	     pid.kd[YAW]/=10;
 8007fa8:	496d      	ldr	r1, [pc, #436]	; (8008160 <evaluateCommand+0x858>)
 8007faa:	f7f8 ff7b 	bl	8000ea4 <__aeabi_fdiv>
 8007fae:	4b6d      	ldr	r3, [pc, #436]	; (8008164 <evaluateCommand+0x85c>)
 8007fb0:	6558      	str	r0, [r3, #84]	; 0x54
	     break;
 8007fb2:	e585      	b.n	8007ac0 <evaluateCommand+0x1b8>
	      RGB_B_TOGGLE;
 8007fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fb8:	485e      	ldr	r0, [pc, #376]	; (8008134 <evaluateCommand+0x82c>)
 8007fba:	f7f9 ffd0 	bl	8001f5e <HAL_GPIO_TogglePin>
 8007fbe:	2400      	movs	r4, #0
 8007fc0:	4d68      	ldr	r5, [pc, #416]	; (8008164 <evaluateCommand+0x85c>)
	        writeFloat( 0+(4*i), pid.kp[i]);
 8007fc2:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f7fc f937 	bl	800423a <writeFloat>
	        writeFloat(12+(4*i), pid.ki[i]);
 8007fcc:	f104 000c 	add.w	r0, r4, #12
 8007fd0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8007fd2:	f7fc f932 	bl	800423a <writeFloat>
	        writeFloat(24+(4*i), pid.kd[i]);
 8007fd6:	f104 0018 	add.w	r0, r4, #24
 8007fda:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8007fdc:	3404      	adds	r4, #4
 8007fde:	f7fc f92c 	bl	800423a <writeFloat>
	      for(int i = 0; i < 3; i++){
 8007fe2:	2c0c      	cmp	r4, #12
 8007fe4:	d1ed      	bne.n	8007fc2 <evaluateCommand+0x6ba>
 8007fe6:	e56b      	b.n	8007ac0 <evaluateCommand+0x1b8>
       headSerial(0, 1, TELEMERY_ERROR);
 8007fe8:	2201      	movs	r2, #1
 8007fea:	2000      	movs	r0, #0
 8007fec:	4611      	mov	r1, r2
 8007fee:	f7ff fc03 	bl	80077f8 <headSerial>
       serialize8(Error.error);
 8007ff2:	4b4f      	ldr	r3, [pc, #316]	; (8008130 <evaluateCommand+0x828>)
 8007ff4:	7818      	ldrb	r0, [r3, #0]
       serialize8(GPS.fixquality);
 8007ff6:	f7ff fbcf 	bl	8007798 <serialize8>
       tailSerialReply();
 8007ffa:	f7ff fc65 	bl	80078c8 <tailSerialReply>
 }
 8007ffe:	e55f      	b.n	8007ac0 <evaluateCommand+0x1b8>
       headSerial(0, 1, TELEMERY_ARMED_MODE);
 8008000:	2000      	movs	r0, #0
 8008002:	2202      	movs	r2, #2
 8008004:	2101      	movs	r1, #1
 8008006:	f7ff fbf7 	bl	80077f8 <headSerial>
       serialize8(f.ARMED);
 800800a:	4b4d      	ldr	r3, [pc, #308]	; (8008140 <evaluateCommand+0x838>)
 800800c:	7858      	ldrb	r0, [r3, #1]
 800800e:	e7f2      	b.n	8007ff6 <evaluateCommand+0x6ee>
       headSerial(0, 1, TELEMERY_HEADFREE_MODE);
 8008010:	2000      	movs	r0, #0
 8008012:	2203      	movs	r2, #3
 8008014:	2101      	movs	r1, #1
 8008016:	f7ff fbef 	bl	80077f8 <headSerial>
       serialize8(f.HEADFREE_MODE);
 800801a:	4b49      	ldr	r3, [pc, #292]	; (8008140 <evaluateCommand+0x838>)
 800801c:	7b18      	ldrb	r0, [r3, #12]
 800801e:	e7ea      	b.n	8007ff6 <evaluateCommand+0x6ee>
       headSerial(0, 4, TELEMERY_CYCLE_TIME);
 8008020:	2204      	movs	r2, #4
 8008022:	2000      	movs	r0, #0
 8008024:	4611      	mov	r1, r2
 8008026:	f7ff fbe7 	bl	80077f8 <headSerial>
       serialize32(loopTime);
 800802a:	4b4f      	ldr	r3, [pc, #316]	; (8008168 <evaluateCommand+0x860>)
       serialize32(armedTime);
 800802c:	6818      	ldr	r0, [r3, #0]
       serialize32(GPS.longitudeDegrees);
 800802e:	f7ff fbd0 	bl	80077d2 <serialize32>
 8008032:	e7e2      	b.n	8007ffa <evaluateCommand+0x6f2>
       headSerial(0, 4, TELEMERY_BAT_VOLT);
 8008034:	2000      	movs	r0, #0
 8008036:	2205      	movs	r2, #5
 8008038:	2104      	movs	r1, #4
 800803a:	f7ff fbdd 	bl	80077f8 <headSerial>
       serialize32(BAT.VBAT);
 800803e:	4b4b      	ldr	r3, [pc, #300]	; (800816c <evaluateCommand+0x864>)
 8008040:	6858      	ldr	r0, [r3, #4]
       serialize32(pid.kd[YAW]*10);
 8008042:	f7f9 f87d 	bl	8001140 <__aeabi_f2uiz>
 8008046:	e7f2      	b.n	800802e <evaluateCommand+0x726>
       headSerial(0, 4, TELEMERY_TEMPERATURE);
 8008048:	2104      	movs	r1, #4
 800804a:	2000      	movs	r0, #0
 800804c:	2206      	movs	r2, #6
 800804e:	f7ff fbd3 	bl	80077f8 <headSerial>
       serialize32(imu.Temp*10);
 8008052:	4b47      	ldr	r3, [pc, #284]	; (8008170 <evaluateCommand+0x868>)
 8008054:	4942      	ldr	r1, [pc, #264]	; (8008160 <evaluateCommand+0x858>)
 8008056:	6d18      	ldr	r0, [r3, #80]	; 0x50
       serialize32(pid.kd[YAW]*10);
 8008058:	f7f8 fe70 	bl	8000d3c <__aeabi_fmul>
 800805c:	e7f1      	b.n	8008042 <evaluateCommand+0x73a>
       headSerial(0, 4, TELEMERY_ANGLE_ROLL);
 800805e:	2104      	movs	r1, #4
 8008060:	2000      	movs	r0, #0
 8008062:	2207      	movs	r2, #7
 8008064:	f7ff fbc8 	bl	80077f8 <headSerial>
       serialize32(imu.AHRS[ROLL]+400);
 8008068:	4b41      	ldr	r3, [pc, #260]	; (8008170 <evaluateCommand+0x868>)
 800806a:	4942      	ldr	r1, [pc, #264]	; (8008174 <evaluateCommand+0x86c>)
 800806c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
       serialize32(imu.magRaw[YAW]+1000);
 800806e:	f7f8 fd5d 	bl	8000b2c <__addsf3>
 8008072:	e7e6      	b.n	8008042 <evaluateCommand+0x73a>
       headSerial(0, 4, TELEMERY_ANGLE_PITCH);
 8008074:	2104      	movs	r1, #4
 8008076:	2000      	movs	r0, #0
 8008078:	2208      	movs	r2, #8
 800807a:	f7ff fbbd 	bl	80077f8 <headSerial>
       serialize32(imu.AHRS[PITCH]+400);
 800807e:	4b3c      	ldr	r3, [pc, #240]	; (8008170 <evaluateCommand+0x868>)
 8008080:	493c      	ldr	r1, [pc, #240]	; (8008174 <evaluateCommand+0x86c>)
 8008082:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008086:	e7f2      	b.n	800806e <evaluateCommand+0x766>
       headSerial(0, 4, TELEMERY_ANGLE_YAW);
 8008088:	2104      	movs	r1, #4
 800808a:	2000      	movs	r0, #0
 800808c:	2209      	movs	r2, #9
 800808e:	f7ff fbb3 	bl	80077f8 <headSerial>
       serialize32(imu.AHRS[YAW]+400);
 8008092:	4b37      	ldr	r3, [pc, #220]	; (8008170 <evaluateCommand+0x868>)
 8008094:	4937      	ldr	r1, [pc, #220]	; (8008174 <evaluateCommand+0x86c>)
 8008096:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800809a:	e7e8      	b.n	800806e <evaluateCommand+0x766>
       headSerial(0, 4, TELEMERY_HEADING);
 800809c:	2000      	movs	r0, #0
 800809e:	220a      	movs	r2, #10
 80080a0:	2104      	movs	r1, #4
 80080a2:	f7ff fba9 	bl	80077f8 <headSerial>
       serialize32(imu.actual_compass_heading);
 80080a6:	4b32      	ldr	r3, [pc, #200]	; (8008170 <evaluateCommand+0x868>)
 80080a8:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 80080ac:	e7c9      	b.n	8008042 <evaluateCommand+0x73a>
       headSerial(0, 4, TELEMERY_ACC_ROLL);
 80080ae:	2000      	movs	r0, #0
 80080b0:	220b      	movs	r2, #11
 80080b2:	2104      	movs	r1, #4
 80080b4:	f7ff fba0 	bl	80077f8 <headSerial>
       serialize32((float)map(imu.accADC[ROLL], -32768, 32768, -1000, 1000)+1000);
 80080b8:	4b2d      	ldr	r3, [pc, #180]	; (8008170 <evaluateCommand+0x868>)
 80080ba:	f9b3 001a 	ldrsh.w	r0, [r3, #26]
       serialize32((float)map(imu.accADC[PITCH], -32768, 32768, -1000, 1000)+1000);
 80080be:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
 80080c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80080c6:	4358      	muls	r0, r3
 80080c8:	1400      	asrs	r0, r0, #16
 80080ca:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 80080ce:	f7f8 fde1 	bl	8000c94 <__aeabi_i2f>
 80080d2:	4929      	ldr	r1, [pc, #164]	; (8008178 <evaluateCommand+0x870>)
 80080d4:	e7cb      	b.n	800806e <evaluateCommand+0x766>
       headSerial(0, 4, TELEMERY_ACC_PITCH);
 80080d6:	2000      	movs	r0, #0
 80080d8:	220c      	movs	r2, #12
 80080da:	2104      	movs	r1, #4
 80080dc:	f7ff fb8c 	bl	80077f8 <headSerial>
       serialize32((float)map(imu.accADC[PITCH], -32768, 32768, -1000, 1000)+1000);
 80080e0:	4b23      	ldr	r3, [pc, #140]	; (8008170 <evaluateCommand+0x868>)
 80080e2:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 80080e6:	e7ea      	b.n	80080be <evaluateCommand+0x7b6>
       headSerial(0, 4, TELEMERY_ACC_YAW);
 80080e8:	2000      	movs	r0, #0
 80080ea:	220d      	movs	r2, #13
 80080ec:	2104      	movs	r1, #4
 80080ee:	f7ff fb83 	bl	80077f8 <headSerial>
       serialize32((float)map(imu.accADC[YAW], -32768, 32768, -1000, 1000)+1000);
 80080f2:	4b1f      	ldr	r3, [pc, #124]	; (8008170 <evaluateCommand+0x868>)
 80080f4:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80080f8:	e7e1      	b.n	80080be <evaluateCommand+0x7b6>
       headSerial(0, 4, TELEMERY_GYRO_ROLL);
 80080fa:	2104      	movs	r1, #4
 80080fc:	2000      	movs	r0, #0
 80080fe:	220e      	movs	r2, #14
 8008100:	f7ff fb7a 	bl	80077f8 <headSerial>
       serialize32(imu.gyroRaw[ROLL]+400);
 8008104:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <evaluateCommand+0x868>)
 8008106:	491b      	ldr	r1, [pc, #108]	; (8008174 <evaluateCommand+0x86c>)
 8008108:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800810a:	e7b0      	b.n	800806e <evaluateCommand+0x766>
       headSerial(0, 4, TELEMERY_GYRO_PITCH);
 800810c:	2104      	movs	r1, #4
 800810e:	2000      	movs	r0, #0
 8008110:	220f      	movs	r2, #15
 8008112:	f7ff fb71 	bl	80077f8 <headSerial>
       serialize32(imu.gyroRaw[PITCH]+400);
 8008116:	4b16      	ldr	r3, [pc, #88]	; (8008170 <evaluateCommand+0x868>)
 8008118:	4916      	ldr	r1, [pc, #88]	; (8008174 <evaluateCommand+0x86c>)
 800811a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800811c:	e7a7      	b.n	800806e <evaluateCommand+0x766>
       headSerial(0, 4, TELEMERY_GYRO_YAW);
 800811e:	2104      	movs	r1, #4
 8008120:	2000      	movs	r0, #0
 8008122:	2210      	movs	r2, #16
 8008124:	f7ff fb68 	bl	80077f8 <headSerial>
       serialize32(imu.gyroRaw[YAW]+400);
 8008128:	4b11      	ldr	r3, [pc, #68]	; (8008170 <evaluateCommand+0x868>)
 800812a:	4912      	ldr	r1, [pc, #72]	; (8008174 <evaluateCommand+0x86c>)
 800812c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800812e:	e79e      	b.n	800806e <evaluateCommand+0x766>
 8008130:	200013d0 	.word	0x200013d0
 8008134:	40010c00 	.word	0x40010c00
 8008138:	20000a54 	.word	0x20000a54
 800813c:	20000010 	.word	0x20000010
 8008140:	20000ed4 	.word	0x20000ed4
 8008144:	20000824 	.word	0x20000824
 8008148:	0801046d 	.word	0x0801046d
 800814c:	200010f0 	.word	0x200010f0
 8008150:	20001390 	.word	0x20001390
 8008154:	08010491 	.word	0x08010491
 8008158:	080104b7 	.word	0x080104b7
 800815c:	080104dd 	.word	0x080104dd
 8008160:	41200000 	.word	0x41200000
 8008164:	20000bc8 	.word	0x20000bc8
 8008168:	20000a58 	.word	0x20000a58
 800816c:	20001174 	.word	0x20001174
 8008170:	20001030 	.word	0x20001030
 8008174:	43c80000 	.word	0x43c80000
 8008178:	447a0000 	.word	0x447a0000
       headSerial(0, 4, TELEMERY_MAG_ROLL);
 800817c:	2104      	movs	r1, #4
 800817e:	2000      	movs	r0, #0
 8008180:	2211      	movs	r2, #17
 8008182:	f7ff fb39 	bl	80077f8 <headSerial>
       serialize32(imu.magRaw[ROLL]+1000);
 8008186:	4b6d      	ldr	r3, [pc, #436]	; (800833c <evaluateCommand+0xa34>)
 8008188:	496d      	ldr	r1, [pc, #436]	; (8008340 <evaluateCommand+0xa38>)
 800818a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800818c:	e76f      	b.n	800806e <evaluateCommand+0x766>
       headSerial(0, 4, TELEMERY_MAG_PITCH);
 800818e:	2104      	movs	r1, #4
 8008190:	2000      	movs	r0, #0
 8008192:	2212      	movs	r2, #18
 8008194:	f7ff fb30 	bl	80077f8 <headSerial>
       serialize32(imu.magRaw[PITCH]+1000);
 8008198:	4b68      	ldr	r3, [pc, #416]	; (800833c <evaluateCommand+0xa34>)
 800819a:	4969      	ldr	r1, [pc, #420]	; (8008340 <evaluateCommand+0xa38>)
 800819c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800819e:	e766      	b.n	800806e <evaluateCommand+0x766>
       headSerial(0, 4, TELEMERY_MAG_YAW);
 80081a0:	2104      	movs	r1, #4
 80081a2:	2000      	movs	r0, #0
 80081a4:	2213      	movs	r2, #19
 80081a6:	f7ff fb27 	bl	80077f8 <headSerial>
       serialize32(imu.magRaw[YAW]+1000);
 80081aa:	4b64      	ldr	r3, [pc, #400]	; (800833c <evaluateCommand+0xa34>)
 80081ac:	4964      	ldr	r1, [pc, #400]	; (8008340 <evaluateCommand+0xa38>)
 80081ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80081b0:	e75d      	b.n	800806e <evaluateCommand+0x766>
       headSerial(0, 4, TELEMERY_ARMD_TIME);
 80081b2:	2214      	movs	r2, #20
 80081b4:	2104      	movs	r1, #4
 80081b6:	2000      	movs	r0, #0
 80081b8:	f7ff fb1e 	bl	80077f8 <headSerial>
       serialize32(armedTime);
 80081bc:	4b61      	ldr	r3, [pc, #388]	; (8008344 <evaluateCommand+0xa3c>)
 80081be:	e735      	b.n	800802c <evaluateCommand+0x724>
       headSerial(0, 4, TELEMERY_BARO_EST);
 80081c0:	2000      	movs	r0, #0
 80081c2:	2215      	movs	r2, #21
 80081c4:	2104      	movs	r1, #4
 80081c6:	f7ff fb17 	bl	80077f8 <headSerial>
       serialize32(ms5611.altitude_ref_ground);
 80081ca:	4b5f      	ldr	r3, [pc, #380]	; (8008348 <evaluateCommand+0xa40>)
 80081cc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80081ce:	e72e      	b.n	800802e <evaluateCommand+0x726>
       headSerial(0, 4, TELEMERY_PID_RP_P);
 80081d0:	2104      	movs	r1, #4
 80081d2:	2000      	movs	r0, #0
 80081d4:	2216      	movs	r2, #22
 80081d6:	f7ff fb0f 	bl	80077f8 <headSerial>
       serialize32(pid.kp[ROLL]*10);
 80081da:	4b5c      	ldr	r3, [pc, #368]	; (800834c <evaluateCommand+0xa44>)
 80081dc:	495c      	ldr	r1, [pc, #368]	; (8008350 <evaluateCommand+0xa48>)
 80081de:	6858      	ldr	r0, [r3, #4]
 80081e0:	e73a      	b.n	8008058 <evaluateCommand+0x750>
       headSerial(0, 4, TELEMERY_PID_RP_I);
 80081e2:	2104      	movs	r1, #4
 80081e4:	2000      	movs	r0, #0
 80081e6:	2217      	movs	r2, #23
 80081e8:	f7ff fb06 	bl	80077f8 <headSerial>
       serialize32(pid.ki[ROLL]*10);
 80081ec:	4b57      	ldr	r3, [pc, #348]	; (800834c <evaluateCommand+0xa44>)
 80081ee:	4958      	ldr	r1, [pc, #352]	; (8008350 <evaluateCommand+0xa48>)
 80081f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80081f2:	e731      	b.n	8008058 <evaluateCommand+0x750>
       headSerial(0, 4, TELEMERY_PID_RP_D);
 80081f4:	2104      	movs	r1, #4
 80081f6:	2000      	movs	r0, #0
 80081f8:	2218      	movs	r2, #24
 80081fa:	f7ff fafd 	bl	80077f8 <headSerial>
       serialize32(pid.kd[ROLL]*10);
 80081fe:	4b53      	ldr	r3, [pc, #332]	; (800834c <evaluateCommand+0xa44>)
 8008200:	4953      	ldr	r1, [pc, #332]	; (8008350 <evaluateCommand+0xa48>)
 8008202:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008204:	e728      	b.n	8008058 <evaluateCommand+0x750>
       headSerial(0, 4, TELEMERY_PID_Y_P);
 8008206:	2104      	movs	r1, #4
 8008208:	2000      	movs	r0, #0
 800820a:	2219      	movs	r2, #25
 800820c:	f7ff faf4 	bl	80077f8 <headSerial>
       serialize32(pid.kp[YAW]*10);
 8008210:	4b4e      	ldr	r3, [pc, #312]	; (800834c <evaluateCommand+0xa44>)
 8008212:	494f      	ldr	r1, [pc, #316]	; (8008350 <evaluateCommand+0xa48>)
 8008214:	68d8      	ldr	r0, [r3, #12]
 8008216:	e71f      	b.n	8008058 <evaluateCommand+0x750>
       headSerial(0, 4, TELEMERY_PID_Y_I);
 8008218:	2104      	movs	r1, #4
 800821a:	2000      	movs	r0, #0
 800821c:	221a      	movs	r2, #26
 800821e:	f7ff faeb 	bl	80077f8 <headSerial>
       serialize32(pid.ki[YAW]*10);
 8008222:	4b4a      	ldr	r3, [pc, #296]	; (800834c <evaluateCommand+0xa44>)
 8008224:	494a      	ldr	r1, [pc, #296]	; (8008350 <evaluateCommand+0xa48>)
 8008226:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008228:	e716      	b.n	8008058 <evaluateCommand+0x750>
       headSerial(0, 4, TELEMERY_PID_Y_D);
 800822a:	2104      	movs	r1, #4
 800822c:	2000      	movs	r0, #0
 800822e:	221b      	movs	r2, #27
 8008230:	f7ff fae2 	bl	80077f8 <headSerial>
       serialize32(pid.kd[YAW]*10);
 8008234:	4b45      	ldr	r3, [pc, #276]	; (800834c <evaluateCommand+0xa44>)
 8008236:	4946      	ldr	r1, [pc, #280]	; (8008350 <evaluateCommand+0xa48>)
 8008238:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800823a:	e70d      	b.n	8008058 <evaluateCommand+0x750>
       headSerial(0, 1, TELEMERY_NUM_SATS);
 800823c:	2000      	movs	r0, #0
 800823e:	221c      	movs	r2, #28
 8008240:	2101      	movs	r1, #1
 8008242:	f7ff fad9 	bl	80077f8 <headSerial>
       serialize8(GPS.satellites);
 8008246:	4b43      	ldr	r3, [pc, #268]	; (8008354 <evaluateCommand+0xa4c>)
 8008248:	f893 0091 	ldrb.w	r0, [r3, #145]	; 0x91
 800824c:	e6d3      	b.n	8007ff6 <evaluateCommand+0x6ee>
       headSerial(0, 1, TELEMERY_FIX_TYPE);
 800824e:	2000      	movs	r0, #0
 8008250:	221d      	movs	r2, #29
 8008252:	2101      	movs	r1, #1
 8008254:	f7ff fad0 	bl	80077f8 <headSerial>
       serialize8(GPS.fixquality);
 8008258:	4b3e      	ldr	r3, [pc, #248]	; (8008354 <evaluateCommand+0xa4c>)
 800825a:	f893 0090 	ldrb.w	r0, [r3, #144]	; 0x90
 800825e:	e6ca      	b.n	8007ff6 <evaluateCommand+0x6ee>
       headSerial(0, 4, TELEMERY_GPS_LAT);
 8008260:	2000      	movs	r0, #0
 8008262:	221e      	movs	r2, #30
 8008264:	2104      	movs	r1, #4
 8008266:	f7ff fac7 	bl	80077f8 <headSerial>
       serialize32(GPS.latitudeDegrees);
 800826a:	4b3a      	ldr	r3, [pc, #232]	; (8008354 <evaluateCommand+0xa4c>)
 800826c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008270:	e6dd      	b.n	800802e <evaluateCommand+0x726>
       headSerial(0, 4, TELEMERY_GPS_LON);
 8008272:	2000      	movs	r0, #0
 8008274:	221f      	movs	r2, #31
 8008276:	2104      	movs	r1, #4
 8008278:	f7ff fabe 	bl	80077f8 <headSerial>
       serialize32(GPS.longitudeDegrees);
 800827c:	4b35      	ldr	r3, [pc, #212]	; (8008354 <evaluateCommand+0xa4c>)
 800827e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8008282:	e6d4      	b.n	800802e <evaluateCommand+0x726>
       headSerial(0, 2, TELEMERY_RADIO_ROLL);
 8008284:	2000      	movs	r0, #0
 8008286:	2220      	movs	r2, #32
 8008288:	2102      	movs	r1, #2
 800828a:	f7ff fab5 	bl	80077f8 <headSerial>
       serialize16(RC.rcCommand[ROLL]);
 800828e:	4b32      	ldr	r3, [pc, #200]	; (8008358 <evaluateCommand+0xa50>)
 8008290:	f9b3 0050 	ldrsh.w	r0, [r3, #80]	; 0x50
       serialize16(motor[3]);
 8008294:	f7ff fa92 	bl	80077bc <serialize16>
 8008298:	e6af      	b.n	8007ffa <evaluateCommand+0x6f2>
       headSerial(0, 2, TELEMERY_RADIO_PITCH);
 800829a:	2000      	movs	r0, #0
 800829c:	2221      	movs	r2, #33	; 0x21
 800829e:	2102      	movs	r1, #2
 80082a0:	f7ff faaa 	bl	80077f8 <headSerial>
       serialize16(RC.rcCommand[PITCH]);
 80082a4:	4b2c      	ldr	r3, [pc, #176]	; (8008358 <evaluateCommand+0xa50>)
 80082a6:	f9b3 0052 	ldrsh.w	r0, [r3, #82]	; 0x52
 80082aa:	e7f3      	b.n	8008294 <evaluateCommand+0x98c>
       headSerial(0, 2, TELEMERY_RADIO_YAW);
 80082ac:	2000      	movs	r0, #0
 80082ae:	2222      	movs	r2, #34	; 0x22
 80082b0:	2102      	movs	r1, #2
 80082b2:	f7ff faa1 	bl	80077f8 <headSerial>
       serialize16(RC.rcCommand[YAW]);
 80082b6:	4b28      	ldr	r3, [pc, #160]	; (8008358 <evaluateCommand+0xa50>)
 80082b8:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 80082bc:	e7ea      	b.n	8008294 <evaluateCommand+0x98c>
       headSerial(0, 2, TELEMERY_RADIO_THROTTLE);
 80082be:	2000      	movs	r0, #0
 80082c0:	2223      	movs	r2, #35	; 0x23
 80082c2:	2102      	movs	r1, #2
 80082c4:	f7ff fa98 	bl	80077f8 <headSerial>
       serialize16(RC.rcCommand[THROTTLE]);
 80082c8:	4b23      	ldr	r3, [pc, #140]	; (8008358 <evaluateCommand+0xa50>)
 80082ca:	f9b3 0056 	ldrsh.w	r0, [r3, #86]	; 0x56
 80082ce:	e7e1      	b.n	8008294 <evaluateCommand+0x98c>
       headSerial(0, 2, TELEMERY_RADIO_GEAR);
 80082d0:	2000      	movs	r0, #0
 80082d2:	2224      	movs	r2, #36	; 0x24
 80082d4:	2102      	movs	r1, #2
 80082d6:	f7ff fa8f 	bl	80077f8 <headSerial>
       serialize16(RC.rcCommand[GEAR]);
 80082da:	4b1f      	ldr	r3, [pc, #124]	; (8008358 <evaluateCommand+0xa50>)
 80082dc:	f9b3 0058 	ldrsh.w	r0, [r3, #88]	; 0x58
 80082e0:	e7d8      	b.n	8008294 <evaluateCommand+0x98c>
       headSerial(0, 2, TELEMERY_RADIO_AUX1);
 80082e2:	2000      	movs	r0, #0
 80082e4:	2225      	movs	r2, #37	; 0x25
 80082e6:	2102      	movs	r1, #2
 80082e8:	f7ff fa86 	bl	80077f8 <headSerial>
       serialize16(RC.rcCommand[AUX1]);
 80082ec:	4b1a      	ldr	r3, [pc, #104]	; (8008358 <evaluateCommand+0xa50>)
 80082ee:	f9b3 005a 	ldrsh.w	r0, [r3, #90]	; 0x5a
 80082f2:	e7cf      	b.n	8008294 <evaluateCommand+0x98c>
       headSerial(0, 2, TELEMERY_MOTOR_1);
 80082f4:	2000      	movs	r0, #0
 80082f6:	2226      	movs	r2, #38	; 0x26
 80082f8:	2102      	movs	r1, #2
 80082fa:	f7ff fa7d 	bl	80077f8 <headSerial>
       serialize16(motor[0]);
 80082fe:	4b17      	ldr	r3, [pc, #92]	; (800835c <evaluateCommand+0xa54>)
 8008300:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008304:	e7c6      	b.n	8008294 <evaluateCommand+0x98c>
       headSerial(0, 2, TELEMERY_MOTOR_2);
 8008306:	2000      	movs	r0, #0
 8008308:	2227      	movs	r2, #39	; 0x27
 800830a:	2102      	movs	r1, #2
 800830c:	f7ff fa74 	bl	80077f8 <headSerial>
       serialize16(motor[1]);
 8008310:	4b12      	ldr	r3, [pc, #72]	; (800835c <evaluateCommand+0xa54>)
 8008312:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8008316:	e7bd      	b.n	8008294 <evaluateCommand+0x98c>
       headSerial(0, 2, TELEMERY_MOTOR_3);
 8008318:	2000      	movs	r0, #0
 800831a:	2228      	movs	r2, #40	; 0x28
 800831c:	2102      	movs	r1, #2
 800831e:	f7ff fa6b 	bl	80077f8 <headSerial>
       serialize16(motor[2]);
 8008322:	4b0e      	ldr	r3, [pc, #56]	; (800835c <evaluateCommand+0xa54>)
 8008324:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8008328:	e7b4      	b.n	8008294 <evaluateCommand+0x98c>
       headSerial(0, 2, TELEMERY_MOTOR_4);
 800832a:	2000      	movs	r0, #0
 800832c:	2229      	movs	r2, #41	; 0x29
 800832e:	2102      	movs	r1, #2
 8008330:	f7ff fa62 	bl	80077f8 <headSerial>
       serialize16(motor[3]);
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <evaluateCommand+0xa54>)
 8008336:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 800833a:	e7ab      	b.n	8008294 <evaluateCommand+0x98c>
 800833c:	20001030 	.word	0x20001030
 8008340:	447a0000 	.word	0x447a0000
 8008344:	20000a48 	.word	0x20000a48
 8008348:	20000fb0 	.word	0x20000fb0
 800834c:	20000bc8 	.word	0x20000bc8
 8008350:	41200000 	.word	0x41200000
 8008354:	20000ae4 	.word	0x20000ae4
 8008358:	20000f4c 	.word	0x20000f4c
 800835c:	20000bbe 	.word	0x20000bbe

08008360 <SerialCom>:
void SerialCom(void) {
 8008360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentPortState = &ports[i];
 8008364:	4e39      	ldr	r6, [pc, #228]	; (800844c <SerialCom+0xec>)
  timeMax = micros();
 8008366:	f000 f881 	bl	800846c <micros>
	for(int i = 0; i < 2; i++){
 800836a:	f04f 0b00 	mov.w	fp, #0
 800836e:	4637      	mov	r7, r6
    currentPortState = &ports[i];
 8008370:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8008458 <SerialCom+0xf8>
 8008374:	2386      	movs	r3, #134	; 0x86
 8008376:	f44f 7484 	mov.w	r4, #264	; 0x108
      currentPortState->c_state = IDLE;
 800837a:	2500      	movs	r5, #0
      currentPortState->c_state = HEADER_CMD;
 800837c:	f04f 0905 	mov.w	r9, #5
        currentPortState->c_state = HEADER_SIZE;
 8008380:	f04f 0a04 	mov.w	sl, #4
    currentPortState = &ports[i];
 8008384:	fb03 830b 	mla	r3, r3, fp, r8
 8008388:	6033      	str	r3, [r6, #0]
    CURRENTPORT = i;
 800838a:	4b31      	ldr	r3, [pc, #196]	; (8008450 <SerialCom+0xf0>)
 800838c:	f883 b000 	strb.w	fp, [r3]
 8008390:	4b30      	ldr	r3, [pc, #192]	; (8008454 <SerialCom+0xf4>)
 8008392:	fb04 340b 	mla	r4, r4, fp, r3
    while(QueueAvailable(&Q_buffer[i]) > 0){
 8008396:	4620      	mov	r0, r4
 8008398:	f7fd f961 	bl	800565e <QueueAvailable>
 800839c:	b930      	cbnz	r0, 80083ac <SerialCom+0x4c>
	for(int i = 0; i < 2; i++){
 800839e:	f10b 0b01 	add.w	fp, fp, #1
 80083a2:	f1bb 0f02 	cmp.w	fp, #2
 80083a6:	d1e5      	bne.n	8008374 <SerialCom+0x14>
 }
 80083a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  c = read_Q(&Q_buffer[i]);
 80083ac:	4620      	mov	r0, r4
 80083ae:	f7fd f934 	bl	800561a <read_Q>
    if (currentPortState->c_state == IDLE) {
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
 80083b8:	b932      	cbnz	r2, 80083c8 <SerialCom+0x68>
      currentPortState->c_state = (c=='$') ? HEADER_START : IDLE;
 80083ba:	f1a0 0224 	sub.w	r2, r0, #36	; 0x24
 80083be:	4250      	negs	r0, r2
 80083c0:	4150      	adcs	r0, r2
 80083c2:	f883 0085 	strb.w	r0, [r3, #133]	; 0x85
 80083c6:	e7e6      	b.n	8008396 <SerialCom+0x36>
    } else if (currentPortState->c_state == HEADER_START) {
 80083c8:	2a01      	cmp	r2, #1
 80083ca:	d106      	bne.n	80083da <SerialCom+0x7a>
      currentPortState->c_state = (c=='M') ? HEADER_M : IDLE;
 80083cc:	284d      	cmp	r0, #77	; 0x4d
 80083ce:	bf14      	ite	ne
 80083d0:	2200      	movne	r2, #0
 80083d2:	2202      	moveq	r2, #2
      currentPortState->c_state = (c=='<') ? HEADER_ARROW : IDLE;
 80083d4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 80083d8:	e7dd      	b.n	8008396 <SerialCom+0x36>
    } else if (currentPortState->c_state == HEADER_M) {
 80083da:	2a02      	cmp	r2, #2
 80083dc:	d104      	bne.n	80083e8 <SerialCom+0x88>
      currentPortState->c_state = (c=='<') ? HEADER_ARROW : IDLE;
 80083de:	283c      	cmp	r0, #60	; 0x3c
 80083e0:	bf14      	ite	ne
 80083e2:	2200      	movne	r2, #0
 80083e4:	2203      	moveq	r2, #3
 80083e6:	e7f5      	b.n	80083d4 <SerialCom+0x74>
    } else if (currentPortState->c_state == HEADER_ARROW) {
 80083e8:	2a03      	cmp	r2, #3
 80083ea:	d10d      	bne.n	8008408 <SerialCom+0xa8>
      if (c > INBUF_SIZE) {  // now we are expecting the payload size
 80083ec:	2880      	cmp	r0, #128	; 0x80
 80083ee:	d902      	bls.n	80083f6 <SerialCom+0x96>
      currentPortState->c_state = IDLE;
 80083f0:	f883 5085 	strb.w	r5, [r3, #133]	; 0x85
 80083f4:	e7cf      	b.n	8008396 <SerialCom+0x36>
        currentPortState->dataSize = c;
 80083f6:	f883 0084 	strb.w	r0, [r3, #132]	; 0x84
        currentPortState->offset = 0;
 80083fa:	f883 5083 	strb.w	r5, [r3, #131]	; 0x83
        currentPortState->indRX = 0;
 80083fe:	705d      	strb	r5, [r3, #1]
        currentPortState->checksum ^= c;
 8008400:	7018      	strb	r0, [r3, #0]
        currentPortState->c_state = HEADER_SIZE;
 8008402:	f883 a085 	strb.w	sl, [r3, #133]	; 0x85
 8008406:	e7c6      	b.n	8008396 <SerialCom+0x36>
    } else if (currentPortState->c_state == HEADER_SIZE) {
 8008408:	2a04      	cmp	r2, #4
 800840a:	d107      	bne.n	800841c <SerialCom+0xbc>
      currentPortState->checksum ^= c;
 800840c:	781a      	ldrb	r2, [r3, #0]
      currentPortState->cmdMSP = c;
 800840e:	f883 0082 	strb.w	r0, [r3, #130]	; 0x82
      currentPortState->checksum ^= c;
 8008412:	4050      	eors	r0, r2
 8008414:	7018      	strb	r0, [r3, #0]
      currentPortState->c_state = HEADER_CMD;
 8008416:	f883 9085 	strb.w	r9, [r3, #133]	; 0x85
 800841a:	e7bc      	b.n	8008396 <SerialCom+0x36>
    } else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset < currentPortState->dataSize) {
 800841c:	2a05      	cmp	r2, #5
 800841e:	d1ba      	bne.n	8008396 <SerialCom+0x36>
 8008420:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 8008424:	f893 1083 	ldrb.w	r1, [r3, #131]	; 0x83
 8008428:	428a      	cmp	r2, r1
 800842a:	781a      	ldrb	r2, [r3, #0]
 800842c:	d907      	bls.n	800843e <SerialCom+0xde>
      currentPortState->checksum ^= c;
 800842e:	4042      	eors	r2, r0
 8008430:	701a      	strb	r2, [r3, #0]
      currentPortState->inBuf[currentPortState->offset++] = c;
 8008432:	1c4a      	adds	r2, r1, #1
 8008434:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8008438:	440b      	add	r3, r1
 800843a:	7098      	strb	r0, [r3, #2]
 800843c:	e7ab      	b.n	8008396 <SerialCom+0x36>
      if (currentPortState->checksum == c) {
 800843e:	4282      	cmp	r2, r0
 8008440:	d101      	bne.n	8008446 <SerialCom+0xe6>
				evaluateCommand();
 8008442:	f7ff fa61 	bl	8007908 <evaluateCommand>
      currentPortState->c_state = IDLE;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	e7d2      	b.n	80083f0 <SerialCom+0x90>
 800844a:	bf00      	nop
 800844c:	2000000c 	.word	0x2000000c
 8008450:	20000820 	.word	0x20000820
 8008454:	20000cc4 	.word	0x20000cc4
 8008458:	20000830 	.word	0x20000830

0800845c <HAL_SYSTICK_Callback>:
static volatile uint32_t msTicks = 0;


void HAL_SYSTICK_Callback(void)
{
	msTicks++;
 800845c:	4a02      	ldr	r2, [pc, #8]	; (8008468 <HAL_SYSTICK_Callback+0xc>)
 800845e:	6813      	ldr	r3, [r2, #0]
 8008460:	3301      	adds	r3, #1
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	20000a40 	.word	0x20000a40

0800846c <micros>:
}

uint32_t micros(void)
{
 800846c:	b510      	push	{r4, lr}
	 register uint32_t ms, cycle_cnt;
	    do {
	        ms = msTicks;
 800846e:	4909      	ldr	r1, [pc, #36]	; (8008494 <micros+0x28>)
	        cycle_cnt = SysTick->VAL;
 8008470:	4c09      	ldr	r4, [pc, #36]	; (8008498 <micros+0x2c>)
	        ms = msTicks;
 8008472:	680a      	ldr	r2, [r1, #0]
	        cycle_cnt = SysTick->VAL;
 8008474:	68a3      	ldr	r3, [r4, #8]
	    } while (ms != msTicks);
 8008476:	6808      	ldr	r0, [r1, #0]
 8008478:	4282      	cmp	r2, r0
 800847a:	d1fa      	bne.n	8008472 <micros+0x6>
	    return (ms * 1000) + (72 * 1000 - cycle_cnt) / 72; //168
 800847c:	2048      	movs	r0, #72	; 0x48
 800847e:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
 8008482:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008486:	fbb3 f3f0 	udiv	r3, r3, r0
}
 800848a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800848e:	fb00 3002 	mla	r0, r0, r2, r3
 8008492:	bd10      	pop	{r4, pc}
 8008494:	20000a40 	.word	0x20000a40
 8008498:	e000e010 	.word	0xe000e010

0800849c <millis>:

uint32_t millis(void)
{
  return HAL_GetTick();
 800849c:	f7f9 b83a 	b.w	8001514 <HAL_GetTick>

080084a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80084a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    RGB_R_TOGGLE;
 80084a2:	4c03      	ldr	r4, [pc, #12]	; (80084b0 <Error_Handler+0x10>)
 80084a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80084a8:	4620      	mov	r0, r4
 80084aa:	f7f9 fd58 	bl	8001f5e <HAL_GPIO_TogglePin>
 80084ae:	e7f9      	b.n	80084a4 <Error_Handler+0x4>
 80084b0:	40010c00 	.word	0x40010c00

080084b4 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084b4:	2228      	movs	r2, #40	; 0x28
{
 80084b6:	b510      	push	{r4, lr}
 80084b8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084ba:	2100      	movs	r1, #0
 80084bc:	eb0d 0002 	add.w	r0, sp, r2
 80084c0:	f000 fe95 	bl	80091ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084c4:	2214      	movs	r2, #20
 80084c6:	2100      	movs	r1, #0
 80084c8:	eb0d 0002 	add.w	r0, sp, r2
 80084cc:	f000 fe8f 	bl	80091ee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80084d0:	2210      	movs	r2, #16
 80084d2:	2100      	movs	r1, #0
 80084d4:	a801      	add	r0, sp, #4
 80084d6:	f000 fe8a 	bl	80091ee <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80084da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80084de:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80084e0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80084e2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80084e4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80084e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084ea:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80084ec:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80084ee:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80084f0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80084f2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084f4:	f7fa fb92 	bl	8002c1c <HAL_RCC_OscConfig>
 80084f8:	b108      	cbz	r0, 80084fe <SystemClock_Config+0x4a>
    Error_Handler();
 80084fa:	f7ff ffd1 	bl	80084a0 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80084fe:	230f      	movs	r3, #15
 8008500:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008502:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008506:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008508:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800850a:	4621      	mov	r1, r4
 800850c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800850e:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008510:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008512:	f7fa fd4b 	bl	8002fac <HAL_RCC_ClockConfig>
 8008516:	2800      	cmp	r0, #0
 8008518:	d1ef      	bne.n	80084fa <SystemClock_Config+0x46>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800851a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800851e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8008520:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8008522:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008524:	f7fa fe0c 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 8008528:	4604      	mov	r4, r0
 800852a:	2800      	cmp	r0, #0
 800852c:	d1e5      	bne.n	80084fa <SystemClock_Config+0x46>
HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800852e:	f7fa fde1 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 8008532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008536:	fbb0 f0f3 	udiv	r0, r0, r3
 800853a:	f7f9 fab7 	bl	8001aac <HAL_SYSTICK_Config>
HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800853e:	2004      	movs	r0, #4
 8008540:	f7f9 faca 	bl	8001ad8 <HAL_SYSTICK_CLKSourceConfig>
HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008544:	4622      	mov	r2, r4
 8008546:	4621      	mov	r1, r4
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	f7f9 fa6e 	bl	8001a2c <HAL_NVIC_SetPriority>
}
 8008550:	b014      	add	sp, #80	; 0x50
 8008552:	bd10      	pop	{r4, pc}
 8008554:	0000      	movs	r0, r0
	...

08008558 <main>:
int main(void){
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800855c:	4d3d      	ldr	r5, [pc, #244]	; (8008654 <main+0xfc>)
int main(void){
 800855e:	b0ab      	sub	sp, #172	; 0xac
  HAL_Init();
 8008560:	f7f8 ffba 	bl	80014d8 <HAL_Init>
  SystemClock_Config();
 8008564:	f7ff ffa6 	bl	80084b4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008568:	2210      	movs	r2, #16
 800856a:	2100      	movs	r1, #0
 800856c:	a823      	add	r0, sp, #140	; 0x8c
 800856e:	f000 fe3e 	bl	80091ee <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008572:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8008574:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008576:	f043 0320 	orr.w	r3, r3, #32
 800857a:	61ab      	str	r3, [r5, #24]
 800857c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800857e:	2118      	movs	r1, #24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008580:	f003 0320 	and.w	r3, r3, #32
 8008584:	9303      	str	r3, [sp, #12]
 8008586:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008588:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800858a:	4833      	ldr	r0, [pc, #204]	; (8008658 <main+0x100>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800858c:	f043 0304 	orr.w	r3, r3, #4
 8008590:	61ab      	str	r3, [r5, #24]
 8008592:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008594:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800859e:	69ab      	ldr	r3, [r5, #24]
 80085a0:	f043 0308 	orr.w	r3, r3, #8
 80085a4:	61ab      	str	r3, [r5, #24]
 80085a6:	69ab      	ldr	r3, [r5, #24]
 80085a8:	f003 0308 	and.w	r3, r3, #8
 80085ac:	9305      	str	r3, [sp, #20]
 80085ae:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80085b0:	f7f9 fcd0 	bl	8001f54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80085b4:	2201      	movs	r2, #1
 80085b6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80085ba:	4827      	ldr	r0, [pc, #156]	; (8008658 <main+0x100>)
 80085bc:	f7f9 fcca 	bl	8001f54 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80085c0:	f24e 0318 	movw	r3, #57368	; 0xe018
 80085c4:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085c6:	2301      	movs	r3, #1
 80085c8:	9324      	str	r3, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085ca:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085cc:	a923      	add	r1, sp, #140	; 0x8c
 80085ce:	4822      	ldr	r0, [pc, #136]	; (8008658 <main+0x100>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085d0:	9326      	str	r3, [sp, #152]	; 0x98
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085d2:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085d4:	f7f9 fbde 	bl	8001d94 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80085d8:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80085da:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80085dc:	f043 0301 	orr.w	r3, r3, #1
 80085e0:	616b      	str	r3, [r5, #20]
 80085e2:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80085e4:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80085ec:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80085ee:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80085f0:	f7f9 fa1c 	bl	8001a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80085f4:	200e      	movs	r0, #14
 80085f6:	f7f9 fa4d 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80085fa:	4622      	mov	r2, r4
 80085fc:	4621      	mov	r1, r4
 80085fe:	200f      	movs	r0, #15
 8008600:	f7f9 fa14 	bl	8001a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8008604:	200f      	movs	r0, #15
 8008606:	f7f9 fa45 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800860a:	4622      	mov	r2, r4
 800860c:	4621      	mov	r1, r4
 800860e:	2010      	movs	r0, #16
 8008610:	f7f9 fa0c 	bl	8001a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8008614:	2010      	movs	r0, #16
 8008616:	f7f9 fa3d 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800861a:	4622      	mov	r2, r4
 800861c:	4621      	mov	r1, r4
 800861e:	2011      	movs	r0, #17
 8008620:	f7f9 fa04 	bl	8001a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8008624:	2011      	movs	r0, #17
 8008626:	f7f9 fa35 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  hi2c2.Init.ClockSpeed = 400000;
 800862a:	4d0c      	ldr	r5, [pc, #48]	; (800865c <main+0x104>)
  hi2c2.Instance = I2C2;
 800862c:	480c      	ldr	r0, [pc, #48]	; (8008660 <main+0x108>)
  hi2c2.Init.ClockSpeed = 400000;
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <main+0x10c>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008630:	6084      	str	r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 400000;
 8008632:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008636:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 800863a:	60c4      	str	r4, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800863c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800863e:	6144      	str	r4, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8008640:	6184      	str	r4, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008642:	61c4      	str	r4, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008644:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008646:	f7f9 fe57 	bl	80022f8 <HAL_I2C_Init>
 800864a:	4605      	mov	r5, r0
 800864c:	b160      	cbz	r0, 8008668 <main+0x110>
    Error_Handler();
 800864e:	f7ff ff27 	bl	80084a0 <Error_Handler>
 8008652:	bf00      	nop
 8008654:	40021000 	.word	0x40021000
 8008658:	40010c00 	.word	0x40010c00
 800865c:	00061a80 	.word	0x00061a80
 8008660:	20001200 	.word	0x20001200
 8008664:	40005800 	.word	0x40005800
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008668:	4601      	mov	r1, r0
 800866a:	2210      	movs	r2, #16
 800866c:	a81f      	add	r0, sp, #124	; 0x7c
 800866e:	f000 fdbe 	bl	80091ee <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008672:	221c      	movs	r2, #28
 8008674:	4629      	mov	r1, r5
 8008676:	a823      	add	r0, sp, #140	; 0x8c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008678:	950a      	str	r5, [sp, #40]	; 0x28
 800867a:	950b      	str	r5, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800867c:	f000 fdb7 	bl	80091ee <memset>
  htim4.Init.Prescaler = 72-1;
 8008680:	2347      	movs	r3, #71	; 0x47
  htim4.Instance = TIM4;
 8008682:	4cb5      	ldr	r4, [pc, #724]	; (8008958 <main+0x400>)
  htim4.Init.Prescaler = 72-1;
 8008684:	48b5      	ldr	r0, [pc, #724]	; (800895c <main+0x404>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008686:	60a5      	str	r5, [r4, #8]
  htim4.Init.Prescaler = 72-1;
 8008688:	e884 0009 	stmia.w	r4, {r0, r3}
  htim4.Init.Period = 2000-1;
 800868c:	f240 73cf 	movw	r3, #1999	; 0x7cf
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008690:	4620      	mov	r0, r4
  htim4.Init.Period = 2000-1;
 8008692:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008694:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008696:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008698:	f7fb f84c 	bl	8003734 <HAL_TIM_Base_Init>
 800869c:	2800      	cmp	r0, #0
 800869e:	d1d6      	bne.n	800864e <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80086a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80086a4:	a91f      	add	r1, sp, #124	; 0x7c
 80086a6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80086a8:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80086aa:	f7fa fead 	bl	8003408 <HAL_TIM_ConfigClockSource>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d1cd      	bne.n	800864e <main+0xf6>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80086b2:	4620      	mov	r0, r4
 80086b4:	f7fb f858 	bl	8003768 <HAL_TIM_PWM_Init>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d1c8      	bne.n	800864e <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086bc:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086be:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80086c0:	a90a      	add	r1, sp, #40	; 0x28
 80086c2:	4620      	mov	r0, r4
 80086c4:	f7fb fa12 	bl	8003aec <HAL_TIMEx_MasterConfigSynchronization>
 80086c8:	4602      	mov	r2, r0
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d1bf      	bne.n	800864e <main+0xf6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80086ce:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80086d0:	9024      	str	r0, [sp, #144]	; 0x90
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80086d2:	9025      	str	r0, [sp, #148]	; 0x94
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80086d4:	9027      	str	r0, [sp, #156]	; 0x9c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80086d6:	a923      	add	r1, sp, #140	; 0x8c
 80086d8:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80086da:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80086dc:	f7fb f8a4 	bl	8003828 <HAL_TIM_PWM_ConfigChannel>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d1b4      	bne.n	800864e <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80086e4:	2204      	movs	r2, #4
 80086e6:	a923      	add	r1, sp, #140	; 0x8c
 80086e8:	4620      	mov	r0, r4
 80086ea:	f7fb f89d 	bl	8003828 <HAL_TIM_PWM_ConfigChannel>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d1ad      	bne.n	800864e <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80086f2:	2208      	movs	r2, #8
 80086f4:	a923      	add	r1, sp, #140	; 0x8c
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7fb f896 	bl	8003828 <HAL_TIM_PWM_ConfigChannel>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d1a6      	bne.n	800864e <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008700:	220c      	movs	r2, #12
 8008702:	a923      	add	r1, sp, #140	; 0x8c
 8008704:	4620      	mov	r0, r4
 8008706:	f7fb f88f 	bl	8003828 <HAL_TIM_PWM_ConfigChannel>
 800870a:	4605      	mov	r5, r0
 800870c:	2800      	cmp	r0, #0
 800870e:	d19e      	bne.n	800864e <main+0xf6>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8008710:	4601      	mov	r1, r0
 8008712:	4620      	mov	r0, r4
 8008714:	f7fb f9a8 	bl	8003a68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8008718:	2104      	movs	r1, #4
 800871a:	4620      	mov	r0, r4
 800871c:	f7fb f9a4 	bl	8003a68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8008720:	2108      	movs	r1, #8
 8008722:	4620      	mov	r0, r4
 8008724:	f7fb f9a0 	bl	8003a68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8008728:	210c      	movs	r1, #12
 800872a:	4620      	mov	r0, r4
 800872c:	f7fb f99c 	bl	8003a68 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim4);
 8008730:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 57600;
 8008732:	f44f 4461 	mov.w	r4, #57600	; 0xe100
  HAL_TIM_MspPostInit(&htim4);
 8008736:	f000 fb8d 	bl	8008e54 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 800873a:	4889      	ldr	r0, [pc, #548]	; (8008960 <main+0x408>)
  huart1.Init.BaudRate = 57600;
 800873c:	4b89      	ldr	r3, [pc, #548]	; (8008964 <main+0x40c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800873e:	6085      	str	r5, [r0, #8]
  huart1.Init.BaudRate = 57600;
 8008740:	e880 0018 	stmia.w	r0, {r3, r4}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008744:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008746:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008748:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800874a:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800874c:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800874e:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008750:	f7fb fac4 	bl	8003cdc <HAL_UART_Init>
 8008754:	2800      	cmp	r0, #0
 8008756:	f47f af7a 	bne.w	800864e <main+0xf6>
  huart2.Instance = USART2;
 800875a:	4883      	ldr	r0, [pc, #524]	; (8008968 <main+0x410>)
 800875c:	4b83      	ldr	r3, [pc, #524]	; (800896c <main+0x414>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 800875e:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 57600;
 8008760:	e880 0018 	stmia.w	r0, {r3, r4}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008764:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008766:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008768:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800876a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800876c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800876e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008770:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008772:	f7fb fab3 	bl	8003cdc <HAL_UART_Init>
 8008776:	2800      	cmp	r0, #0
 8008778:	f47f af69 	bne.w	800864e <main+0xf6>
  hadc1.Instance = ADC1;
 800877c:	4c7c      	ldr	r4, [pc, #496]	; (8008970 <main+0x418>)
 800877e:	4b7d      	ldr	r3, [pc, #500]	; (8008974 <main+0x41c>)
  hadc1.Init.NbrOfConversion = 1;
 8008780:	2601      	movs	r6, #1
  hadc1.Instance = ADC1;
 8008782:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008784:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8008788:	900c      	str	r0, [sp, #48]	; 0x30
 800878a:	900d      	str	r0, [sp, #52]	; 0x34
 800878c:	900e      	str	r0, [sp, #56]	; 0x38
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800878e:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008790:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008792:	6160      	str	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008794:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008796:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008798:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 800879a:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800879c:	f7f9 f8b4 	bl	8001908 <HAL_ADC_Init>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f47f af54 	bne.w	800864e <main+0xf6>
  sConfig.Channel = ADC_CHANNEL_4;
 80087a6:	2704      	movs	r7, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80087a8:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80087aa:	a90c      	add	r1, sp, #48	; 0x30
 80087ac:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 80087ae:	970c      	str	r7, [sp, #48]	; 0x30
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80087b0:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80087b2:	f7f8 ff69 	bl	8001688 <HAL_ADC_ConfigChannel>
 80087b6:	4605      	mov	r5, r0
 80087b8:	2800      	cmp	r0, #0
 80087ba:	f47f af48 	bne.w	800864e <main+0xf6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80087be:	4601      	mov	r1, r0
 80087c0:	2210      	movs	r2, #16
 80087c2:	a817      	add	r0, sp, #92	; 0x5c
 80087c4:	f000 fd13 	bl	80091ee <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80087c8:	4629      	mov	r1, r5
 80087ca:	2210      	movs	r2, #16
 80087cc:	a81b      	add	r0, sp, #108	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80087ce:	9508      	str	r5, [sp, #32]
 80087d0:	9509      	str	r5, [sp, #36]	; 0x24
  TIM_IC_InitTypeDef sConfigIC = {0};
 80087d2:	f000 fd0c 	bl	80091ee <memset>
  htim3.Init.Prescaler = 72-1;
 80087d6:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 80087d8:	4c67      	ldr	r4, [pc, #412]	; (8008978 <main+0x420>)
  htim3.Init.Prescaler = 72-1;
 80087da:	4968      	ldr	r1, [pc, #416]	; (800897c <main+0x424>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80087dc:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 72-1;
 80087de:	e884 000a 	stmia.w	r4, {r1, r3}
  htim3.Init.Period = 0xFFFF;
 80087e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087e6:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0xFFFF;
 80087e8:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087ea:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087ec:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80087ee:	f7fa ffa1 	bl	8003734 <HAL_TIM_Base_Init>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f47f af2b 	bne.w	800864e <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80087f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80087fc:	a917      	add	r1, sp, #92	; 0x5c
 80087fe:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008800:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008802:	f7fa fe01 	bl	8003408 <HAL_TIM_ConfigClockSource>
 8008806:	2800      	cmp	r0, #0
 8008808:	f47f af21 	bne.w	800864e <main+0xf6>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800880c:	4620      	mov	r0, r4
 800880e:	f7fa ffc5 	bl	800379c <HAL_TIM_IC_Init>
 8008812:	2800      	cmp	r0, #0
 8008814:	f47f af1b 	bne.w	800864e <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008818:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800881a:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800881c:	a908      	add	r1, sp, #32
 800881e:	4620      	mov	r0, r4
 8008820:	f7fb f964 	bl	8003aec <HAL_TIMEx_MasterConfigSynchronization>
 8008824:	4602      	mov	r2, r0
 8008826:	2800      	cmp	r0, #0
 8008828:	f47f af11 	bne.w	800864e <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800882c:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800882e:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigIC.ICFilter = 0;
 8008830:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008832:	a91b      	add	r1, sp, #108	; 0x6c
 8008834:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008836:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008838:	f7fb f882 	bl	8003940 <HAL_TIM_IC_ConfigChannel>
 800883c:	2800      	cmp	r0, #0
 800883e:	f47f af06 	bne.w	800864e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8008842:	463a      	mov	r2, r7
 8008844:	a91b      	add	r1, sp, #108	; 0x6c
 8008846:	4620      	mov	r0, r4
 8008848:	f7fb f87a 	bl	8003940 <HAL_TIM_IC_ConfigChannel>
 800884c:	2800      	cmp	r0, #0
 800884e:	f47f aefe 	bne.w	800864e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8008852:	2208      	movs	r2, #8
 8008854:	a91b      	add	r1, sp, #108	; 0x6c
 8008856:	4620      	mov	r0, r4
 8008858:	f7fb f872 	bl	8003940 <HAL_TIM_IC_ConfigChannel>
 800885c:	2800      	cmp	r0, #0
 800885e:	f47f aef6 	bne.w	800864e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8008862:	220c      	movs	r2, #12
 8008864:	a91b      	add	r1, sp, #108	; 0x6c
 8008866:	4620      	mov	r0, r4
 8008868:	f7fb f86a 	bl	8003940 <HAL_TIM_IC_ConfigChannel>
 800886c:	4605      	mov	r5, r0
 800886e:	2800      	cmp	r0, #0
 8008870:	f47f aeed 	bne.w	800864e <main+0xf6>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8008874:	4601      	mov	r1, r0
 8008876:	4620      	mov	r0, r4
 8008878:	f7fb f90c 	bl	8003a94 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800887c:	4639      	mov	r1, r7
 800887e:	4620      	mov	r0, r4
 8008880:	f7fb f908 	bl	8003a94 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8008884:	2108      	movs	r1, #8
 8008886:	4620      	mov	r0, r4
 8008888:	f7fb f904 	bl	8003a94 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 800888c:	210c      	movs	r1, #12
 800888e:	4620      	mov	r0, r4
 8008890:	f7fb f900 	bl	8003a94 <HAL_TIM_IC_Start_IT>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008894:	2210      	movs	r2, #16
 8008896:	4629      	mov	r1, r5
 8008898:	a80f      	add	r0, sp, #60	; 0x3c
 800889a:	f000 fca8 	bl	80091ee <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800889e:	2210      	movs	r2, #16
 80088a0:	4629      	mov	r1, r5
 80088a2:	a813      	add	r0, sp, #76	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088a4:	9506      	str	r5, [sp, #24]
 80088a6:	9507      	str	r5, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80088a8:	f000 fca1 	bl	80091ee <memset>
  htim2.Init.Prescaler = 72-1;
 80088ac:	2347      	movs	r3, #71	; 0x47
 80088ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80088b2:	4c33      	ldr	r4, [pc, #204]	; (8008980 <main+0x428>)
  htim2.Init.Prescaler = 72-1;
 80088b4:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.Period = 0xFFFF;
 80088b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80088bc:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088be:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 0xFFFF;
 80088c0:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088c2:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80088c4:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80088c6:	f7fa ff35 	bl	8003734 <HAL_TIM_Base_Init>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	f47f aebf 	bne.w	800864e <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80088d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80088d4:	a90f      	add	r1, sp, #60	; 0x3c
 80088d6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80088d8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80088da:	f7fa fd95 	bl	8003408 <HAL_TIM_ConfigClockSource>
 80088de:	2800      	cmp	r0, #0
 80088e0:	f47f aeb5 	bne.w	800864e <main+0xf6>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80088e4:	4620      	mov	r0, r4
 80088e6:	f7fa ff59 	bl	800379c <HAL_TIM_IC_Init>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	f47f aeaf 	bne.w	800864e <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80088f0:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088f2:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80088f4:	a906      	add	r1, sp, #24
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7fb f8f8 	bl	8003aec <HAL_TIMEx_MasterConfigSynchronization>
 80088fc:	4602      	mov	r2, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	f47f aea5 	bne.w	800864e <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008904:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008906:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 8008908:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800890a:	a913      	add	r1, sp, #76	; 0x4c
 800890c:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800890e:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008910:	f7fb f816 	bl	8003940 <HAL_TIM_IC_ConfigChannel>
 8008914:	2800      	cmp	r0, #0
 8008916:	f47f ae9a 	bne.w	800864e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800891a:	463a      	mov	r2, r7
 800891c:	a913      	add	r1, sp, #76	; 0x4c
 800891e:	4620      	mov	r0, r4
 8008920:	f7fb f80e 	bl	8003940 <HAL_TIM_IC_ConfigChannel>
 8008924:	4605      	mov	r5, r0
 8008926:	2800      	cmp	r0, #0
 8008928:	f47f ae91 	bne.w	800864e <main+0xf6>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800892c:	4601      	mov	r1, r0
 800892e:	4620      	mov	r0, r4
 8008930:	f7fb f8b0 	bl	8003a94 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8008934:	4639      	mov	r1, r7
 8008936:	4620      	mov	r0, r4
 8008938:	f7fb f8ac 	bl	8003a94 <HAL_TIM_IC_Start_IT>
  LED1_ON;
 800893c:	4632      	mov	r2, r6
 800893e:	2110      	movs	r1, #16
 8008940:	4810      	ldr	r0, [pc, #64]	; (8008984 <main+0x42c>)
 8008942:	f7f9 fb07 	bl	8001f54 <HAL_GPIO_WritePin>
  LED0_OFF;
 8008946:	462a      	mov	r2, r5
 8008948:	2108      	movs	r1, #8
 800894a:	480e      	ldr	r0, [pc, #56]	; (8008984 <main+0x42c>)
 800894c:	f7f9 fb02 	bl	8001f54 <HAL_GPIO_WritePin>
 8008950:	240a      	movs	r4, #10
    LED1_TOGGLE;
 8008952:	4d0c      	ldr	r5, [pc, #48]	; (8008984 <main+0x42c>)
 8008954:	e018      	b.n	8008988 <main+0x430>
 8008956:	bf00      	nop
 8008958:	200011c0 	.word	0x200011c0
 800895c:	40000800 	.word	0x40000800
 8008960:	20001390 	.word	0x20001390
 8008964:	40013800 	.word	0x40013800
 8008968:	20001418 	.word	0x20001418
 800896c:	40004400 	.word	0x40004400
 8008970:	200012d8 	.word	0x200012d8
 8008974:	40012400 	.word	0x40012400
 8008978:	20001254 	.word	0x20001254
 800897c:	40000400 	.word	0x40000400
 8008980:	200013d8 	.word	0x200013d8
 8008984:	40010c00 	.word	0x40010c00
 8008988:	2110      	movs	r1, #16
 800898a:	4628      	mov	r0, r5
 800898c:	f7f9 fae7 	bl	8001f5e <HAL_GPIO_TogglePin>
    LED0_TOGGLE;
 8008990:	2108      	movs	r1, #8
 8008992:	4628      	mov	r0, r5
 8008994:	f7f9 fae3 	bl	8001f5e <HAL_GPIO_TogglePin>
    HAL_Delay(25);
 8008998:	2019      	movs	r0, #25
 800899a:	f7f8 fdc1 	bl	8001520 <HAL_Delay>
    HAL_Delay(25);
 800899e:	2019      	movs	r0, #25
 80089a0:	f7f8 fdbe 	bl	8001520 <HAL_Delay>
  for (int i = 0; i < 10; i++){
 80089a4:	3c01      	subs	r4, #1
 80089a6:	d1ef      	bne.n	8008988 <main+0x430>
   LED0_OFF;
 80089a8:	4622      	mov	r2, r4
 80089aa:	2108      	movs	r1, #8
 80089ac:	4886      	ldr	r0, [pc, #536]	; (8008bc8 <main+0x670>)
 80089ae:	f7f9 fad1 	bl	8001f54 <HAL_GPIO_WritePin>
   LED1_OFF;
 80089b2:	4622      	mov	r2, r4
 80089b4:	2110      	movs	r1, #16
 80089b6:	4884      	ldr	r0, [pc, #528]	; (8008bc8 <main+0x670>)
 80089b8:	f7f9 facc 	bl	8001f54 <HAL_GPIO_WritePin>
   MPU9250_Init();
 80089bc:	f7fd ff02 	bl	80067c4 <MPU9250_Init>
   MS5611_Init(MS5611_ULTRA_HIGH_RES);
 80089c0:	2008      	movs	r0, #8
 80089c2:	f7fe fba3 	bl	800710c <MS5611_Init>
   gps_Init();
 80089c6:	f7fb fcc3 	bl	8004350 <gps_Init>
  TM_AHRSIMU_Init(&AHRS, 250, 1.2f, 0.0f);
 80089ca:	2300      	movs	r3, #0
 80089cc:	4a7f      	ldr	r2, [pc, #508]	; (8008bcc <main+0x674>)
 80089ce:	4980      	ldr	r1, [pc, #512]	; (8008bd0 <main+0x678>)
 80089d0:	4880      	ldr	r0, [pc, #512]	; (8008bd4 <main+0x67c>)
 80089d2:	f7fb ffbd 	bl	8004950 <TM_AHRSIMU_Init>
  Calibrate_gyro();
 80089d6:	f7fd f9c3 	bl	8005d60 <Calibrate_gyro>
  RC_Init();
 80089da:	f7fc ff1d 	bl	8005818 <RC_Init>
  mixerInit();
 80089de:	f7fc fb39 	bl	8005054 <mixerInit>
   QueueCreate(UART1);
 80089e2:	4620      	mov	r0, r4
 80089e4:	f7fc fde8 	bl	80055b8 <QueueCreate>
   QueueCreate(UART2);
 80089e8:	2001      	movs	r0, #1
 80089ea:	f7fc fde5 	bl	80055b8 <QueueCreate>
   PIDControlInit(&pid);
 80089ee:	487a      	ldr	r0, [pc, #488]	; (8008bd8 <main+0x680>)
 80089f0:	f7fc fbba 	bl	8005168 <PIDControlInit>
   EEPROM_Init();
 80089f4:	f7fb fc76 	bl	80042e4 <EEPROM_Init>
   HAL_UART_Receive_DMA(&huart1, (uint8_t*)rx1_buffer, 1);
 80089f8:	2201      	movs	r2, #1
 80089fa:	4978      	ldr	r1, [pc, #480]	; (8008bdc <main+0x684>)
 80089fc:	4878      	ldr	r0, [pc, #480]	; (8008be0 <main+0x688>)
 80089fe:	f7fb fa51 	bl	8003ea4 <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx2_buffer, 1);
 8008a02:	2201      	movs	r2, #1
 8008a04:	4977      	ldr	r1, [pc, #476]	; (8008be4 <main+0x68c>)
 8008a06:	4878      	ldr	r0, [pc, #480]	; (8008be8 <main+0x690>)
 8008a08:	f7fb fa4c 	bl	8003ea4 <HAL_UART_Receive_DMA>
   previousTime = micros();
 8008a0c:	f7ff fd2e 	bl	800846c <micros>
          BAT.VBAT = ((((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW)*10;
 8008a10:	f04f 0800 	mov.w	r8, #0
   previousTime = micros();
 8008a14:	4d75      	ldr	r5, [pc, #468]	; (8008bec <main+0x694>)
          BAT.VBAT = ((((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW)*10;
 8008a16:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8008c3c <main+0x6e4>
   previousTime = micros();
 8008a1a:	6028      	str	r0, [r5, #0]
    switch (taskOrder){ //4~206us
 8008a1c:	4c74      	ldr	r4, [pc, #464]	; (8008bf0 <main+0x698>)
    LED0_TOGGLE; //RED
 8008a1e:	2108      	movs	r1, #8
 8008a20:	4869      	ldr	r0, [pc, #420]	; (8008bc8 <main+0x670>)
 8008a22:	f7f9 fa9c 	bl	8001f5e <HAL_GPIO_TogglePin>
      computeRC();
 8008a26:	f7fc ff31 	bl	800588c <computeRC>
    computeIMU(); //1050~1500us
 8008a2a:	f7fc fa45 	bl	8004eb8 <computeIMU>
    switch (taskOrder){ //4~206us
 8008a2e:	7823      	ldrb	r3, [r4, #0]
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d868      	bhi.n	8008b06 <main+0x5ae>
 8008a34:	e8df f003 	tbb	[pc, r3]
 8008a38:	120f0802 	.word	0x120f0802
        taskOrder++;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	7023      	strb	r3, [r4, #0]
        if(Baro_update() !=0) break;
 8008a40:	f7fe fbcc 	bl	80071dc <Baro_update>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d15e      	bne.n	8008b06 <main+0x5ae>
        taskOrder++;
 8008a48:	7823      	ldrb	r3, [r4, #0]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	7023      	strb	r3, [r4, #0]
        if(getEstimatedAltitude() !=0) break;
 8008a4e:	f7fe f9ff 	bl	8006e50 <getEstimatedAltitude>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d157      	bne.n	8008b06 <main+0x5ae>
        taskOrder++;
 8008a56:	7823      	ldrb	r3, [r4, #0]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	7023      	strb	r3, [r4, #0]
        time = micros();
 8008a5c:	f7ff fd06 	bl	800846c <micros>
 8008a60:	4b64      	ldr	r3, [pc, #400]	; (8008bf4 <main+0x69c>)
 8008a62:	4f65      	ldr	r7, [pc, #404]	; (8008bf8 <main+0x6a0>)
 8008a64:	8018      	strh	r0, [r3, #0]
        taskOrder = 0;
 8008a66:	2300      	movs	r3, #0
        HAL_ADC_Start(&hadc1);
 8008a68:	4864      	ldr	r0, [pc, #400]	; (8008bfc <main+0x6a4>)
        taskOrder = 0;
 8008a6a:	7023      	strb	r3, [r4, #0]
        HAL_ADC_Start(&hadc1);
 8008a6c:	f7f8 fec8 	bl	8001800 <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc1,1000000) == HAL_OK)
 8008a70:	4963      	ldr	r1, [pc, #396]	; (8008c00 <main+0x6a8>)
 8008a72:	4862      	ldr	r0, [pc, #392]	; (8008bfc <main+0x6a4>)
 8008a74:	f7f8 fd66 	bl	8001544 <HAL_ADC_PollForConversion>
 8008a78:	b9f0      	cbnz	r0, 8008ab8 <main+0x560>
          BAT.VBAT_Sense = HAL_ADC_GetValue(&hadc1);
 8008a7a:	4860      	ldr	r0, [pc, #384]	; (8008bfc <main+0x6a4>)
 8008a7c:	f7f8 fe00 	bl	8001680 <HAL_ADC_GetValue>
 8008a80:	6038      	str	r0, [r7, #0]
          BAT.VBAT = ((((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW)*10;
 8008a82:	f7f7 fcaf 	bl	80003e4 <__aeabi_ui2d>
 8008a86:	a34c      	add	r3, pc, #304	; (adr r3, 8008bb8 <main+0x660>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f7f7 fd20 	bl	80004d0 <__aeabi_dmul>
 8008a90:	a34b      	add	r3, pc, #300	; (adr r3, 8008bc0 <main+0x668>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f7f7 fe45 	bl	8000724 <__aeabi_ddiv>
 8008a9a:	4642      	mov	r2, r8
 8008a9c:	464b      	mov	r3, r9
 8008a9e:	f7f7 fd17 	bl	80004d0 <__aeabi_dmul>
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	4b57      	ldr	r3, [pc, #348]	; (8008c04 <main+0x6ac>)
 8008aa6:	f7f7 fe3d 	bl	8000724 <__aeabi_ddiv>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4b56      	ldr	r3, [pc, #344]	; (8008c08 <main+0x6b0>)
 8008aae:	f7f7 fd0f 	bl	80004d0 <__aeabi_dmul>
 8008ab2:	f7f7 ffe5 	bl	8000a80 <__aeabi_d2f>
 8008ab6:	6078      	str	r0, [r7, #4]
        vsum += BAT.VBAT;
 8008ab8:	4a54      	ldr	r2, [pc, #336]	; (8008c0c <main+0x6b4>)
 8008aba:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8008abe:	8810      	ldrh	r0, [r2, #0]
 8008ac0:	9201      	str	r2, [sp, #4]
 8008ac2:	f7f8 f8e7 	bl	8000c94 <__aeabi_i2f>
 8008ac6:	4659      	mov	r1, fp
 8008ac8:	f7f8 f830 	bl	8000b2c <__addsf3>
 8008acc:	f7f8 fb38 	bl	8001140 <__aeabi_f2uiz>
        vsum -= vvec[ind];
 8008ad0:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8008c40 <main+0x6e8>
 8008ad4:	4b4e      	ldr	r3, [pc, #312]	; (8008c10 <main+0x6b8>)
 8008ad6:	f89a 4000 	ldrb.w	r4, [sl]
 8008ada:	9a01      	ldr	r2, [sp, #4]
 8008adc:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	1b86      	subs	r6, r0, r6
 8008ae4:	b2b6      	uxth	r6, r6
 8008ae6:	8016      	strh	r6, [r2, #0]
        vvec[ind++] = BAT.VBAT;
 8008ae8:	4658      	mov	r0, fp
 8008aea:	f7f8 fb29 	bl	8001140 <__aeabi_f2uiz>
 8008aee:	9b00      	ldr	r3, [sp, #0]
 8008af0:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 8008af4:	3401      	adds	r4, #1
        ind %= VBAT_SMOOTH;
 8008af6:	f004 0407 	and.w	r4, r4, #7
 8008afa:	f88a 4000 	strb.w	r4, [sl]
        BAT.VBAT = vsum/VBAT_SMOOTH;
 8008afe:	08f0      	lsrs	r0, r6, #3
 8008b00:	f7f8 f8c8 	bl	8000c94 <__aeabi_i2f>
 8008b04:	6078      	str	r0, [r7, #4]
   Control();
 8008b06:	f7fc fba5 	bl	8005254 <Control>
   mixTable();
 8008b0a:	f7fc fab5 	bl	8005078 <mixTable>
   PwmWriteMotor();
 8008b0e:	f7fc fd2f 	bl	8005570 <PwmWriteMotor>
   flight_mode_signal();
 8008b12:	f7fc fa2d 	bl	8004f70 <flight_mode_signal>
     timeInterleave = micros();
 8008b16:	f7ff fca9 	bl	800846c <micros>
 8008b1a:	4c3e      	ldr	r4, [pc, #248]	; (8008c14 <main+0x6bc>)
     uint8_t t=0;
 8008b1c:	2600      	movs	r6, #0
     timeInterleave = micros();
 8008b1e:	8020      	strh	r0, [r4, #0]
     while((int16_t)(micros()-timeInterleave)<650) t=1; //650
 8008b20:	f240 2789 	movw	r7, #649	; 0x289
     SerialCom(); //4us
 8008b24:	f7ff fc1c 	bl	8008360 <SerialCom>
     while((int16_t)(micros()-timeInterleave)<650) t=1; //650
 8008b28:	f7ff fca0 	bl	800846c <micros>
 8008b2c:	8823      	ldrh	r3, [r4, #0]
 8008b2e:	1ac0      	subs	r0, r0, r3
 8008b30:	b200      	sxth	r0, r0
 8008b32:	42b8      	cmp	r0, r7
 8008b34:	dd3e      	ble.n	8008bb4 <main+0x65c>
     if(!t) overrun_count++;
 8008b36:	b91e      	cbnz	r6, 8008b40 <main+0x5e8>
 8008b38:	4a37      	ldr	r2, [pc, #220]	; (8008c18 <main+0x6c0>)
 8008b3a:	8813      	ldrh	r3, [r2, #0]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	8013      	strh	r3, [r2, #0]
   loopTime = micros() - previousTime;
 8008b40:	f7ff fc94 	bl	800846c <micros>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	4c35      	ldr	r4, [pc, #212]	; (8008c1c <main+0x6c4>)
 8008b48:	1ac0      	subs	r0, r0, r3
     currentTime = micros();
 8008b4a:	4f35      	ldr	r7, [pc, #212]	; (8008c20 <main+0x6c8>)
     cycleTime = currentTime - previousTime;
 8008b4c:	4e35      	ldr	r6, [pc, #212]	; (8008c24 <main+0x6cc>)
   loopTime = micros() - previousTime;
 8008b4e:	6020      	str	r0, [r4, #0]
     currentTime = micros();
 8008b50:	f7ff fc8c 	bl	800846c <micros>
 8008b54:	6038      	str	r0, [r7, #0]
     cycleTime = currentTime - previousTime;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	682a      	ldr	r2, [r5, #0]
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	6033      	str	r3, [r6, #0]
       if (cycleTime >= LOOP_TIME){
 8008b5e:	6833      	ldr	r3, [r6, #0]
 8008b60:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008b64:	d3f4      	bcc.n	8008b50 <main+0x5f8>
         if(cycleTime > (LOOP_TIME+50)){
 8008b66:	f640 73d2 	movw	r3, #4050	; 0xfd2
 8008b6a:	6832      	ldr	r2, [r6, #0]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d907      	bls.n	8008b80 <main+0x628>
           RGB_R_TOGGLE;
 8008b70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008b74:	4814      	ldr	r0, [pc, #80]	; (8008bc8 <main+0x670>)
 8008b76:	f7f9 f9f2 	bl	8001f5e <HAL_GPIO_TogglePin>
           Error.error = 4;
 8008b7a:	2204      	movs	r2, #4
 8008b7c:	4b2a      	ldr	r3, [pc, #168]	; (8008c28 <main+0x6d0>)
 8008b7e:	701a      	strb	r2, [r3, #0]
   previousTime = currentTime;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	602b      	str	r3, [r5, #0]
   if(f.ARMED){
 8008b84:	4b29      	ldr	r3, [pc, #164]	; (8008c2c <main+0x6d4>)
 8008b86:	785b      	ldrb	r3, [r3, #1]
 8008b88:	b123      	cbz	r3, 8008b94 <main+0x63c>
     armedTime += (uint32_t)cycleTime;
 8008b8a:	4a29      	ldr	r2, [pc, #164]	; (8008c30 <main+0x6d8>)
 8008b8c:	6831      	ldr	r1, [r6, #0]
 8008b8e:	6813      	ldr	r3, [r2, #0]
 8008b90:	440b      	add	r3, r1
 8008b92:	6013      	str	r3, [r2, #0]
   if(loopTime > cycleTimeMax) cycleTimeMax = loopTime;
 8008b94:	4b27      	ldr	r3, [pc, #156]	; (8008c34 <main+0x6dc>)
 8008b96:	6822      	ldr	r2, [r4, #0]
 8008b98:	8819      	ldrh	r1, [r3, #0]
 8008b9a:	4291      	cmp	r1, r2
 8008b9c:	bf3c      	itt	cc
 8008b9e:	6822      	ldrcc	r2, [r4, #0]
 8008ba0:	801a      	strhcc	r2, [r3, #0]
   if(loopTime < cycleTimeMin) cycleTimeMin = loopTime;
 8008ba2:	4b25      	ldr	r3, [pc, #148]	; (8008c38 <main+0x6e0>)
 8008ba4:	6822      	ldr	r2, [r4, #0]
 8008ba6:	8819      	ldrh	r1, [r3, #0]
 8008ba8:	4291      	cmp	r1, r2
 8008baa:	f67f af37 	bls.w	8008a1c <main+0x4c4>
 8008bae:	6822      	ldr	r2, [r4, #0]
 8008bb0:	801a      	strh	r2, [r3, #0]
 8008bb2:	e733      	b.n	8008a1c <main+0x4c4>
     while((int16_t)(micros()-timeInterleave)<650) t=1; //650
 8008bb4:	2601      	movs	r6, #1
 8008bb6:	e7b7      	b.n	8008b28 <main+0x5d0>
 8008bb8:	66666666 	.word	0x66666666
 8008bbc:	400a6666 	.word	0x400a6666
 8008bc0:	00000000 	.word	0x00000000
 8008bc4:	40affe00 	.word	0x40affe00
 8008bc8:	40010c00 	.word	0x40010c00
 8008bcc:	3f99999a 	.word	0x3f99999a
 8008bd0:	437a0000 	.word	0x437a0000
 8008bd4:	20000b84 	.word	0x20000b84
 8008bd8:	20000bc8 	.word	0x20000bc8
 8008bdc:	20001170 	.word	0x20001170
 8008be0:	20001390 	.word	0x20001390
 8008be4:	20001171 	.word	0x20001171
 8008be8:	20001418 	.word	0x20001418
 8008bec:	20000a60 	.word	0x20000a60
 8008bf0:	20000a64 	.word	0x20000a64
 8008bf4:	20000a3e 	.word	0x20000a3e
 8008bf8:	20001174 	.word	0x20001174
 8008bfc:	200012d8 	.word	0x200012d8
 8008c00:	000f4240 	.word	0x000f4240
 8008c04:	40340000 	.word	0x40340000
 8008c08:	40240000 	.word	0x40240000
 8008c0c:	20000a68 	.word	0x20000a68
 8008c10:	20000a6a 	.word	0x20000a6a
 8008c14:	20000a66 	.word	0x20000a66
 8008c18:	20000a5c 	.word	0x20000a5c
 8008c1c:	20000a58 	.word	0x20000a58
 8008c20:	20000a4c 	.word	0x20000a4c
 8008c24:	20000a50 	.word	0x20000a50
 8008c28:	200013d0 	.word	0x200013d0
 8008c2c:	20000ed4 	.word	0x20000ed4
 8008c30:	20000a48 	.word	0x20000a48
 8008c34:	20000a54 	.word	0x20000a54
 8008c38:	20000010 	.word	0x20000010
 8008c3c:	403e0000 	.word	0x403e0000
 8008c40:	20000a56 	.word	0x20000a56

08008c44 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c44:	4770      	bx	lr
	...

08008c48 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c48:	4b0e      	ldr	r3, [pc, #56]	; (8008c84 <HAL_MspInit+0x3c>)
{
 8008c4a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c4c:	699a      	ldr	r2, [r3, #24]
 8008c4e:	f042 0201 	orr.w	r2, r2, #1
 8008c52:	619a      	str	r2, [r3, #24]
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	f002 0201 	and.w	r2, r2, #1
 8008c5a:	9200      	str	r2, [sp, #0]
 8008c5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c5e:	69da      	ldr	r2, [r3, #28]
 8008c60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008c64:	61da      	str	r2, [r3, #28]
 8008c66:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c68:	4a07      	ldr	r2, [pc, #28]	; (8008c88 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c6e:	9301      	str	r3, [sp, #4]
 8008c70:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c72:	6853      	ldr	r3, [r2, #4]
 8008c74:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c7e:	b002      	add	sp, #8
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	40021000 	.word	0x40021000
 8008c88:	40010000 	.word	0x40010000

08008c8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008c8c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c8e:	2410      	movs	r4, #16
{
 8008c90:	4605      	mov	r5, r0
 8008c92:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c94:	4622      	mov	r2, r4
 8008c96:	2100      	movs	r1, #0
 8008c98:	a802      	add	r0, sp, #8
 8008c9a:	f000 faa8 	bl	80091ee <memset>
  if(hadc->Instance==ADC1)
 8008c9e:	682a      	ldr	r2, [r5, #0]
 8008ca0:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <HAL_ADC_MspInit+0x54>)
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d11a      	bne.n	8008cdc <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008ca6:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8008caa:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cac:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cb2:	619a      	str	r2, [r3, #24]
 8008cb4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cb6:	480b      	ldr	r0, [pc, #44]	; (8008ce4 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008cb8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8008cbc:	9200      	str	r2, [sp, #0]
 8008cbe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cc0:	699a      	ldr	r2, [r3, #24]
 8008cc2:	f042 0204 	orr.w	r2, r2, #4
 8008cc6:	619a      	str	r2, [r3, #24]
 8008cc8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008cca:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cd8:	f7f9 f85c 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008cdc:	b007      	add	sp, #28
 8008cde:	bd30      	pop	{r4, r5, pc}
 8008ce0:	40012400 	.word	0x40012400
 8008ce4:	40010800 	.word	0x40010800

08008ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	4604      	mov	r4, r0
 8008cec:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cee:	2210      	movs	r2, #16
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	a802      	add	r0, sp, #8
 8008cf4:	f000 fa7b 	bl	80091ee <memset>
  if(hi2c->Instance==I2C2)
 8008cf8:	6822      	ldr	r2, [r4, #0]
 8008cfa:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <HAL_I2C_MspInit+0x58>)
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d11d      	bne.n	8008d3c <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d00:	4c10      	ldr	r4, [pc, #64]	; (8008d44 <HAL_I2C_MspInit+0x5c>)
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d02:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d04:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d06:	4810      	ldr	r0, [pc, #64]	; (8008d48 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d08:	f043 0308 	orr.w	r3, r3, #8
 8008d0c:	61a3      	str	r3, [r4, #24]
 8008d0e:	69a3      	ldr	r3, [r4, #24]
 8008d10:	f003 0308 	and.w	r3, r3, #8
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008d18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008d1c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d1e:	2312      	movs	r3, #18
 8008d20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d22:	2303      	movs	r3, #3
 8008d24:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d26:	f7f9 f835 	bl	8001d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008d2a:	69e3      	ldr	r3, [r4, #28]
 8008d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d30:	61e3      	str	r3, [r4, #28]
 8008d32:	69e3      	ldr	r3, [r4, #28]
 8008d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8008d3c:	b006      	add	sp, #24
 8008d3e:	bd10      	pop	{r4, pc}
 8008d40:	40005800 	.word	0x40005800
 8008d44:	40021000 	.word	0x40021000
 8008d48:	40010c00 	.word	0x40010c00

08008d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008d4c:	b510      	push	{r4, lr}
 8008d4e:	4604      	mov	r4, r0
 8008d50:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d52:	2210      	movs	r2, #16
 8008d54:	2100      	movs	r1, #0
 8008d56:	a806      	add	r0, sp, #24
 8008d58:	f000 fa49 	bl	80091ee <memset>
  if(htim_base->Instance==TIM2)
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d62:	d123      	bne.n	8008dac <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008d64:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008d68:	69da      	ldr	r2, [r3, #28]
    PA3     ------> TIM2_CH4  //UART2 reserved
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d6a:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008d6c:	f042 0201 	orr.w	r2, r2, #1
 8008d70:	61da      	str	r2, [r3, #28]
 8008d72:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d74:	4832      	ldr	r0, [pc, #200]	; (8008e40 <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008d76:	f002 0201 	and.w	r2, r2, #1
 8008d7a:	9200      	str	r2, [sp, #0]
 8008d7c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d7e:	699a      	ldr	r2, [r3, #24]
 8008d80:	f042 0204 	orr.w	r2, r2, #4
 8008d84:	619a      	str	r2, [r3, #24]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008d90:	2303      	movs	r3, #3
 8008d92:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d94:	f7f8 fffe 	bl	8001d94 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008d98:	2200      	movs	r2, #0
 8008d9a:	201c      	movs	r0, #28
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	f7f8 fe45 	bl	8001a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008da2:	201c      	movs	r0, #28
  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008da4:	f7f8 fe76 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008da8:	b00a      	add	sp, #40	; 0x28
 8008daa:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM3)
 8008dac:	4a25      	ldr	r2, [pc, #148]	; (8008e44 <HAL_TIM_Base_MspInit+0xf8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d131      	bne.n	8008e16 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008db2:	4b25      	ldr	r3, [pc, #148]	; (8008e48 <HAL_TIM_Base_MspInit+0xfc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008db4:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008db6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008db8:	4821      	ldr	r0, [pc, #132]	; (8008e40 <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008dba:	f042 0202 	orr.w	r2, r2, #2
 8008dbe:	61da      	str	r2, [r3, #28]
 8008dc0:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dc2:	2400      	movs	r4, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008dc4:	f002 0202 	and.w	r2, r2, #2
 8008dc8:	9202      	str	r2, [sp, #8]
 8008dca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dcc:	699a      	ldr	r2, [r3, #24]
 8008dce:	f042 0204 	orr.w	r2, r2, #4
 8008dd2:	619a      	str	r2, [r3, #24]
 8008dd4:	699a      	ldr	r2, [r3, #24]
 8008dd6:	f002 0204 	and.w	r2, r2, #4
 8008dda:	9203      	str	r2, [sp, #12]
 8008ddc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dde:	699a      	ldr	r2, [r3, #24]
 8008de0:	f042 0208 	orr.w	r2, r2, #8
 8008de4:	619a      	str	r2, [r3, #24]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	f003 0308 	and.w	r3, r3, #8
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008df0:	23c0      	movs	r3, #192	; 0xc0
 8008df2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008df4:	f7f8 ffce 	bl	8001d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008df8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dfa:	a906      	add	r1, sp, #24
 8008dfc:	4813      	ldr	r0, [pc, #76]	; (8008e4c <HAL_TIM_Base_MspInit+0x100>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008dfe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e00:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e02:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e04:	f7f8 ffc6 	bl	8001d94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008e08:	201d      	movs	r0, #29
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	f7f8 fe0d 	bl	8001a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008e12:	201d      	movs	r0, #29
 8008e14:	e7c6      	b.n	8008da4 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM4)
 8008e16:	4a0e      	ldr	r2, [pc, #56]	; (8008e50 <HAL_TIM_Base_MspInit+0x104>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d1c5      	bne.n	8008da8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <HAL_TIM_Base_MspInit+0xfc>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008e1e:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008e20:	69da      	ldr	r2, [r3, #28]
 8008e22:	f042 0204 	orr.w	r2, r2, #4
 8008e26:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008e28:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008e2a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008e2c:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008e2e:	f003 0304 	and.w	r3, r3, #4
 8008e32:	9305      	str	r3, [sp, #20]
 8008e34:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008e36:	f7f8 fdf9 	bl	8001a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008e3a:	201e      	movs	r0, #30
 8008e3c:	e7b2      	b.n	8008da4 <HAL_TIM_Base_MspInit+0x58>
 8008e3e:	bf00      	nop
 8008e40:	40010800 	.word	0x40010800
 8008e44:	40000400 	.word	0x40000400
 8008e48:	40021000 	.word	0x40021000
 8008e4c:	40010c00 	.word	0x40010c00
 8008e50:	40000800 	.word	0x40000800

08008e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008e54:	b510      	push	{r4, lr}
 8008e56:	4604      	mov	r4, r0
 8008e58:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e5a:	2210      	movs	r2, #16
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	a802      	add	r0, sp, #8
 8008e60:	f000 f9c5 	bl	80091ee <memset>
  if(htim->Instance==TIM4)
 8008e64:	6822      	ldr	r2, [r4, #0]
 8008e66:	4b0d      	ldr	r3, [pc, #52]	; (8008e9c <HAL_TIM_MspPostInit+0x48>)
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d115      	bne.n	8008e98 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e6c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8008e70:	699a      	ldr	r2, [r3, #24]
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e72:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e74:	f042 0208 	orr.w	r2, r2, #8
 8008e78:	619a      	str	r2, [r3, #24]
 8008e7a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e7c:	4808      	ldr	r0, [pc, #32]	; (8008ea0 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e7e:	f003 0308 	and.w	r3, r3, #8
 8008e82:	9301      	str	r3, [sp, #4]
 8008e84:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008e86:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008e8a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e90:	2303      	movs	r3, #3
 8008e92:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e94:	f7f8 ff7e 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008e98:	b006      	add	sp, #24
 8008e9a:	bd10      	pop	{r4, pc}
 8008e9c:	40000800 	.word	0x40000800
 8008ea0:	40010c00 	.word	0x40010c00

08008ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008ea4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ea6:	2710      	movs	r7, #16
{
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eac:	463a      	mov	r2, r7
 8008eae:	2100      	movs	r1, #0
 8008eb0:	eb0d 0007 	add.w	r0, sp, r7
 8008eb4:	f000 f99b 	bl	80091ee <memset>
  if(huart->Instance==USART1)
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	4a57      	ldr	r2, [pc, #348]	; (8009018 <HAL_UART_MspInit+0x174>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d15b      	bne.n	8008f78 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ec0:	4b56      	ldr	r3, [pc, #344]	; (800901c <HAL_UART_MspInit+0x178>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ec2:	eb0d 0107 	add.w	r1, sp, r7
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ec6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ec8:	4855      	ldr	r0, [pc, #340]	; (8009020 <HAL_UART_MspInit+0x17c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8008eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ece:	619a      	str	r2, [r3, #24]
 8008ed0:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ed2:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ed4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008ed8:	9201      	str	r2, [sp, #4]
 8008eda:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008edc:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8008ede:	4c51      	ldr	r4, [pc, #324]	; (8009024 <HAL_UART_MspInit+0x180>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ee0:	f042 0204 	orr.w	r2, r2, #4
 8008ee4:	619a      	str	r2, [r3, #24]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	f003 0304 	and.w	r3, r3, #4
 8008eec:	9302      	str	r3, [sp, #8]
 8008eee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ef4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008efa:	2303      	movs	r3, #3
 8008efc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008efe:	f7f8 ff49 	bl	8001d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f06:	4846      	ldr	r0, [pc, #280]	; (8009020 <HAL_UART_MspInit+0x17c>)
 8008f08:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008f0c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f0e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f10:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f12:	f7f8 ff3f 	bl	8001d94 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8008f16:	4b44      	ldr	r3, [pc, #272]	; (8009028 <HAL_UART_MspInit+0x184>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008f18:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008f1a:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008f1e:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f20:	60a6      	str	r6, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008f22:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f24:	6126      	str	r6, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008f26:	6166      	str	r6, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008f28:	61a6      	str	r6, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008f2a:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008f2c:	f7f8 fde4 	bl	8001af8 <HAL_DMA_Init>
 8008f30:	b108      	cbz	r0, 8008f36 <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 8008f32:	f7ff fab5 	bl	80084a0 <Error_Handler>

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008f36:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008f38:	4b3c      	ldr	r3, [pc, #240]	; (800902c <HAL_UART_MspInit+0x188>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008f3a:	632c      	str	r4, [r5, #48]	; 0x30
 8008f3c:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008f3e:	4c3c      	ldr	r4, [pc, #240]	; (8009030 <HAL_UART_MspInit+0x18c>)
 8008f40:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008f42:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f44:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8008f46:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008f48:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f4a:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f4c:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f4e:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008f50:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8008f52:	61a2      	str	r2, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008f54:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008f56:	f7f8 fdcf 	bl	8001af8 <HAL_DMA_Init>
 8008f5a:	b108      	cbz	r0, 8008f60 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8008f5c:	f7ff faa0 	bl	80084a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008f60:	2200      	movs	r2, #0
 8008f62:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008f64:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008f66:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008f68:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008f6a:	f7f8 fd5f 	bl	8001a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008f6e:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008f70:	f7f8 fd90 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008f74:	b009      	add	sp, #36	; 0x24
 8008f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART2)
 8008f78:	4a2e      	ldr	r2, [pc, #184]	; (8009034 <HAL_UART_MspInit+0x190>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d1fa      	bne.n	8008f74 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008f7e:	4b27      	ldr	r3, [pc, #156]	; (800901c <HAL_UART_MspInit+0x178>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f80:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8008f82:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f84:	4826      	ldr	r0, [pc, #152]	; (8009020 <HAL_UART_MspInit+0x17c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8008f86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008f8a:	61da      	str	r2, [r3, #28]
 8008f8c:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f8e:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8008f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f94:	9303      	str	r3, [sp, #12]
 8008f96:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008f98:	2304      	movs	r3, #4
 8008f9a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fa4:	f7f8 fef6 	bl	8001d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008fa8:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008faa:	481d      	ldr	r0, [pc, #116]	; (8009020 <HAL_UART_MspInit+0x17c>)
 8008fac:	a904      	add	r1, sp, #16
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8008fae:	4c22      	ldr	r4, [pc, #136]	; (8009038 <HAL_UART_MspInit+0x194>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008fb0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fb2:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fb4:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fb6:	f7f8 feed 	bl	8001d94 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8008fba:	4b20      	ldr	r3, [pc, #128]	; (800903c <HAL_UART_MspInit+0x198>)
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008fbc:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008fbe:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008fc2:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008fc4:	60a6      	str	r6, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008fc6:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008fc8:	6126      	str	r6, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008fca:	6166      	str	r6, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008fcc:	61a6      	str	r6, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008fce:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008fd0:	f7f8 fd92 	bl	8001af8 <HAL_DMA_Init>
 8008fd4:	b108      	cbz	r0, 8008fda <HAL_UART_MspInit+0x136>
      Error_Handler();
 8008fd6:	f7ff fa63 	bl	80084a0 <Error_Handler>
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008fda:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8008fdc:	4b18      	ldr	r3, [pc, #96]	; (8009040 <HAL_UART_MspInit+0x19c>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008fde:	632c      	str	r4, [r5, #48]	; 0x30
 8008fe0:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8008fe2:	4c18      	ldr	r4, [pc, #96]	; (8009044 <HAL_UART_MspInit+0x1a0>)
 8008fe4:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008fe6:	60e2      	str	r2, [r4, #12]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008fe8:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008fea:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008fec:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008fee:	6063      	str	r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ff0:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ff2:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ff4:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008ff6:	61a2      	str	r2, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008ff8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008ffa:	f7f8 fd7d 	bl	8001af8 <HAL_DMA_Init>
 8008ffe:	b108      	cbz	r0, 8009004 <HAL_UART_MspInit+0x160>
      Error_Handler();
 8009000:	f7ff fa4e 	bl	80084a0 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009004:	2200      	movs	r2, #0
 8009006:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8009008:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800900a:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800900c:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800900e:	f7f8 fd0d 	bl	8001a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009012:	2026      	movs	r0, #38	; 0x26
 8009014:	e7ac      	b.n	8008f70 <HAL_UART_MspInit+0xcc>
 8009016:	bf00      	nop
 8009018:	40013800 	.word	0x40013800
 800901c:	40021000 	.word	0x40021000
 8009020:	40010800 	.word	0x40010800
 8009024:	20001294 	.word	0x20001294
 8009028:	40020044 	.word	0x40020044
 800902c:	40020058 	.word	0x40020058
 8009030:	20001308 	.word	0x20001308
 8009034:	40004400 	.word	0x40004400
 8009038:	2000134c 	.word	0x2000134c
 800903c:	40020080 	.word	0x40020080
 8009040:	4002006c 	.word	0x4002006c
 8009044:	2000117c 	.word	0x2000117c

08009048 <NMI_Handler>:
 8009048:	4770      	bx	lr

0800904a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800904a:	e7fe      	b.n	800904a <HardFault_Handler>

0800904c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800904c:	e7fe      	b.n	800904c <MemManage_Handler>

0800904e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800904e:	e7fe      	b.n	800904e <BusFault_Handler>

08009050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009050:	e7fe      	b.n	8009050 <UsageFault_Handler>

08009052 <SVC_Handler>:
 8009052:	4770      	bx	lr

08009054 <DebugMon_Handler>:
 8009054:	4770      	bx	lr

08009056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009056:	4770      	bx	lr

08009058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009058:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800905a:	f7f8 fa4f 	bl	80014fc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800905e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8009062:	f7f8 bd45 	b.w	8001af0 <HAL_SYSTICK_IRQHandler>
	...

08009068 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009068:	4801      	ldr	r0, [pc, #4]	; (8009070 <DMA1_Channel4_IRQHandler+0x8>)
 800906a:	f7f8 bdff 	b.w	8001c6c <HAL_DMA_IRQHandler>
 800906e:	bf00      	nop
 8009070:	20001294 	.word	0x20001294

08009074 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009074:	4801      	ldr	r0, [pc, #4]	; (800907c <DMA1_Channel5_IRQHandler+0x8>)
 8009076:	f7f8 bdf9 	b.w	8001c6c <HAL_DMA_IRQHandler>
 800907a:	bf00      	nop
 800907c:	20001308 	.word	0x20001308

08009080 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009080:	4801      	ldr	r0, [pc, #4]	; (8009088 <DMA1_Channel6_IRQHandler+0x8>)
 8009082:	f7f8 bdf3 	b.w	8001c6c <HAL_DMA_IRQHandler>
 8009086:	bf00      	nop
 8009088:	2000117c 	.word	0x2000117c

0800908c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800908c:	4801      	ldr	r0, [pc, #4]	; (8009094 <DMA1_Channel7_IRQHandler+0x8>)
 800908e:	f7f8 bded 	b.w	8001c6c <HAL_DMA_IRQHandler>
 8009092:	bf00      	nop
 8009094:	2000134c 	.word	0x2000134c

08009098 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <TIM2_IRQHandler+0x8>)
 800909a:	f7fa ba71 	b.w	8003580 <HAL_TIM_IRQHandler>
 800909e:	bf00      	nop
 80090a0:	200013d8 	.word	0x200013d8

080090a4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <TIM3_IRQHandler+0x8>)
 80090a6:	f7fa ba6b 	b.w	8003580 <HAL_TIM_IRQHandler>
 80090aa:	bf00      	nop
 80090ac:	20001254 	.word	0x20001254

080090b0 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80090b0:	4801      	ldr	r0, [pc, #4]	; (80090b8 <TIM4_IRQHandler+0x8>)
 80090b2:	f7fa ba65 	b.w	8003580 <HAL_TIM_IRQHandler>
 80090b6:	bf00      	nop
 80090b8:	200011c0 	.word	0x200011c0

080090bc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80090bc:	4801      	ldr	r0, [pc, #4]	; (80090c4 <USART1_IRQHandler+0x8>)
 80090be:	f7fa bfdf 	b.w	8004080 <HAL_UART_IRQHandler>
 80090c2:	bf00      	nop
 80090c4:	20001390 	.word	0x20001390

080090c8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80090c8:	4801      	ldr	r0, [pc, #4]	; (80090d0 <USART2_IRQHandler+0x8>)
 80090ca:	f7fa bfd9 	b.w	8004080 <HAL_UART_IRQHandler>
 80090ce:	bf00      	nop
 80090d0:	20001418 	.word	0x20001418

080090d4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80090d4:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <SystemInit+0x40>)
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	f042 0201 	orr.w	r2, r2, #1
 80090dc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80090de:	6859      	ldr	r1, [r3, #4]
 80090e0:	4a0d      	ldr	r2, [pc, #52]	; (8009118 <SystemInit+0x44>)
 80090e2:	400a      	ands	r2, r1
 80090e4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80090ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80090f0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80090f8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8009100:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8009102:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8009106:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8009108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800910c:	4b03      	ldr	r3, [pc, #12]	; (800911c <SystemInit+0x48>)
 800910e:	609a      	str	r2, [r3, #8]
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	40021000 	.word	0x40021000
 8009118:	f8ff0000 	.word	0xf8ff0000
 800911c:	e000ed00 	.word	0xe000ed00

08009120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009120:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8009122:	e003      	b.n	800912c <LoopCopyDataInit>

08009124 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8009124:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8009126:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8009128:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800912a:	3104      	adds	r1, #4

0800912c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800912c:	480a      	ldr	r0, [pc, #40]	; (8009158 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800912e:	4b0b      	ldr	r3, [pc, #44]	; (800915c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8009130:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8009132:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8009134:	d3f6      	bcc.n	8009124 <CopyDataInit>
  ldr r2, =_sbss
 8009136:	4a0a      	ldr	r2, [pc, #40]	; (8009160 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8009138:	e002      	b.n	8009140 <LoopFillZerobss>

0800913a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800913a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800913c:	f842 3b04 	str.w	r3, [r2], #4

08009140 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8009140:	4b08      	ldr	r3, [pc, #32]	; (8009164 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8009142:	429a      	cmp	r2, r3
  bcc FillZerobss
 8009144:	d3f9      	bcc.n	800913a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009146:	f7ff ffc5 	bl	80090d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800914a:	f000 f80f 	bl	800916c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800914e:	f7ff fa03 	bl	8008558 <main>
  bx lr
 8009152:	4770      	bx	lr
  ldr r3, =_sidata
 8009154:	08010e50 	.word	0x08010e50
  ldr r0, =_sdata
 8009158:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800915c:	2000068c 	.word	0x2000068c
  ldr r2, =_sbss
 8009160:	20000690 	.word	0x20000690
  ldr r3, = _ebss
 8009164:	20001468 	.word	0x20001468

08009168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009168:	e7fe      	b.n	8009168 <ADC1_2_IRQHandler>
	...

0800916c <__libc_init_array>:
 800916c:	b570      	push	{r4, r5, r6, lr}
 800916e:	2500      	movs	r5, #0
 8009170:	4e0c      	ldr	r6, [pc, #48]	; (80091a4 <__libc_init_array+0x38>)
 8009172:	4c0d      	ldr	r4, [pc, #52]	; (80091a8 <__libc_init_array+0x3c>)
 8009174:	1ba4      	subs	r4, r4, r6
 8009176:	10a4      	asrs	r4, r4, #2
 8009178:	42a5      	cmp	r5, r4
 800917a:	d109      	bne.n	8009190 <__libc_init_array+0x24>
 800917c:	f006 fd54 	bl	800fc28 <_init>
 8009180:	2500      	movs	r5, #0
 8009182:	4e0a      	ldr	r6, [pc, #40]	; (80091ac <__libc_init_array+0x40>)
 8009184:	4c0a      	ldr	r4, [pc, #40]	; (80091b0 <__libc_init_array+0x44>)
 8009186:	1ba4      	subs	r4, r4, r6
 8009188:	10a4      	asrs	r4, r4, #2
 800918a:	42a5      	cmp	r5, r4
 800918c:	d105      	bne.n	800919a <__libc_init_array+0x2e>
 800918e:	bd70      	pop	{r4, r5, r6, pc}
 8009190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009194:	4798      	blx	r3
 8009196:	3501      	adds	r5, #1
 8009198:	e7ee      	b.n	8009178 <__libc_init_array+0xc>
 800919a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800919e:	4798      	blx	r3
 80091a0:	3501      	adds	r5, #1
 80091a2:	e7f2      	b.n	800918a <__libc_init_array+0x1e>
 80091a4:	08010e48 	.word	0x08010e48
 80091a8:	08010e48 	.word	0x08010e48
 80091ac:	08010e48 	.word	0x08010e48
 80091b0:	08010e4c 	.word	0x08010e4c

080091b4 <__ascii_mbtowc>:
 80091b4:	b082      	sub	sp, #8
 80091b6:	b901      	cbnz	r1, 80091ba <__ascii_mbtowc+0x6>
 80091b8:	a901      	add	r1, sp, #4
 80091ba:	b142      	cbz	r2, 80091ce <__ascii_mbtowc+0x1a>
 80091bc:	b14b      	cbz	r3, 80091d2 <__ascii_mbtowc+0x1e>
 80091be:	7813      	ldrb	r3, [r2, #0]
 80091c0:	600b      	str	r3, [r1, #0]
 80091c2:	7812      	ldrb	r2, [r2, #0]
 80091c4:	1c10      	adds	r0, r2, #0
 80091c6:	bf18      	it	ne
 80091c8:	2001      	movne	r0, #1
 80091ca:	b002      	add	sp, #8
 80091cc:	4770      	bx	lr
 80091ce:	4610      	mov	r0, r2
 80091d0:	e7fb      	b.n	80091ca <__ascii_mbtowc+0x16>
 80091d2:	f06f 0001 	mvn.w	r0, #1
 80091d6:	e7f8      	b.n	80091ca <__ascii_mbtowc+0x16>

080091d8 <memcpy>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	1e43      	subs	r3, r0, #1
 80091dc:	440a      	add	r2, r1
 80091de:	4291      	cmp	r1, r2
 80091e0:	d100      	bne.n	80091e4 <memcpy+0xc>
 80091e2:	bd10      	pop	{r4, pc}
 80091e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ec:	e7f7      	b.n	80091de <memcpy+0x6>

080091ee <memset>:
 80091ee:	4603      	mov	r3, r0
 80091f0:	4402      	add	r2, r0
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d100      	bne.n	80091f8 <memset+0xa>
 80091f6:	4770      	bx	lr
 80091f8:	f803 1b01 	strb.w	r1, [r3], #1
 80091fc:	e7f9      	b.n	80091f2 <memset+0x4>
	...

08009200 <sprintf>:
 8009200:	b40e      	push	{r1, r2, r3}
 8009202:	f44f 7102 	mov.w	r1, #520	; 0x208
 8009206:	b500      	push	{lr}
 8009208:	b09c      	sub	sp, #112	; 0x70
 800920a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800920e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009212:	9104      	str	r1, [sp, #16]
 8009214:	9107      	str	r1, [sp, #28]
 8009216:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800921a:	ab1d      	add	r3, sp, #116	; 0x74
 800921c:	9002      	str	r0, [sp, #8]
 800921e:	9006      	str	r0, [sp, #24]
 8009220:	4808      	ldr	r0, [pc, #32]	; (8009244 <sprintf+0x44>)
 8009222:	f853 2b04 	ldr.w	r2, [r3], #4
 8009226:	f8ad 1016 	strh.w	r1, [sp, #22]
 800922a:	6800      	ldr	r0, [r0, #0]
 800922c:	a902      	add	r1, sp, #8
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	f000 f812 	bl	8009258 <_svfprintf_r>
 8009234:	2200      	movs	r2, #0
 8009236:	9b02      	ldr	r3, [sp, #8]
 8009238:	701a      	strb	r2, [r3, #0]
 800923a:	b01c      	add	sp, #112	; 0x70
 800923c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009240:	b003      	add	sp, #12
 8009242:	4770      	bx	lr
 8009244:	20000184 	.word	0x20000184

08009248 <strcpy>:
 8009248:	4603      	mov	r3, r0
 800924a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800924e:	f803 2b01 	strb.w	r2, [r3], #1
 8009252:	2a00      	cmp	r2, #0
 8009254:	d1f9      	bne.n	800924a <strcpy+0x2>
 8009256:	4770      	bx	lr

08009258 <_svfprintf_r>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	b0bf      	sub	sp, #252	; 0xfc
 800925e:	4689      	mov	r9, r1
 8009260:	4615      	mov	r5, r2
 8009262:	461f      	mov	r7, r3
 8009264:	4682      	mov	sl, r0
 8009266:	f001 fe37 	bl	800aed8 <_localeconv_r>
 800926a:	6803      	ldr	r3, [r0, #0]
 800926c:	4618      	mov	r0, r3
 800926e:	9311      	str	r3, [sp, #68]	; 0x44
 8009270:	f7f6 ff6e 	bl	8000150 <strlen>
 8009274:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009278:	900a      	str	r0, [sp, #40]	; 0x28
 800927a:	061b      	lsls	r3, r3, #24
 800927c:	d518      	bpl.n	80092b0 <_svfprintf_r+0x58>
 800927e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009282:	b9ab      	cbnz	r3, 80092b0 <_svfprintf_r+0x58>
 8009284:	2140      	movs	r1, #64	; 0x40
 8009286:	4650      	mov	r0, sl
 8009288:	f001 fe3e 	bl	800af08 <_malloc_r>
 800928c:	f8c9 0000 	str.w	r0, [r9]
 8009290:	f8c9 0010 	str.w	r0, [r9, #16]
 8009294:	b948      	cbnz	r0, 80092aa <_svfprintf_r+0x52>
 8009296:	230c      	movs	r3, #12
 8009298:	f8ca 3000 	str.w	r3, [sl]
 800929c:	f04f 33ff 	mov.w	r3, #4294967295
 80092a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80092a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80092a4:	b03f      	add	sp, #252	; 0xfc
 80092a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092aa:	2340      	movs	r3, #64	; 0x40
 80092ac:	f8c9 3014 	str.w	r3, [r9, #20]
 80092b0:	2300      	movs	r3, #0
 80092b2:	ac2e      	add	r4, sp, #184	; 0xb8
 80092b4:	9421      	str	r4, [sp, #132]	; 0x84
 80092b6:	9323      	str	r3, [sp, #140]	; 0x8c
 80092b8:	9322      	str	r3, [sp, #136]	; 0x88
 80092ba:	9509      	str	r5, [sp, #36]	; 0x24
 80092bc:	9307      	str	r3, [sp, #28]
 80092be:	930d      	str	r3, [sp, #52]	; 0x34
 80092c0:	930e      	str	r3, [sp, #56]	; 0x38
 80092c2:	9315      	str	r3, [sp, #84]	; 0x54
 80092c4:	9314      	str	r3, [sp, #80]	; 0x50
 80092c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80092c8:	9312      	str	r3, [sp, #72]	; 0x48
 80092ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80092cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80092ce:	462b      	mov	r3, r5
 80092d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092d4:	b112      	cbz	r2, 80092dc <_svfprintf_r+0x84>
 80092d6:	2a25      	cmp	r2, #37	; 0x25
 80092d8:	f040 8083 	bne.w	80093e2 <_svfprintf_r+0x18a>
 80092dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092de:	1aee      	subs	r6, r5, r3
 80092e0:	d00d      	beq.n	80092fe <_svfprintf_r+0xa6>
 80092e2:	e884 0048 	stmia.w	r4, {r3, r6}
 80092e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092e8:	4433      	add	r3, r6
 80092ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80092ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092ee:	3301      	adds	r3, #1
 80092f0:	2b07      	cmp	r3, #7
 80092f2:	9322      	str	r3, [sp, #136]	; 0x88
 80092f4:	dc77      	bgt.n	80093e6 <_svfprintf_r+0x18e>
 80092f6:	3408      	adds	r4, #8
 80092f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092fa:	4433      	add	r3, r6
 80092fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80092fe:	782b      	ldrb	r3, [r5, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 8725 	beq.w	800a150 <_svfprintf_r+0xef8>
 8009306:	2300      	movs	r3, #0
 8009308:	1c69      	adds	r1, r5, #1
 800930a:	461a      	mov	r2, r3
 800930c:	f04f 3bff 	mov.w	fp, #4294967295
 8009310:	461d      	mov	r5, r3
 8009312:	200a      	movs	r0, #10
 8009314:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8009318:	930c      	str	r3, [sp, #48]	; 0x30
 800931a:	1c4e      	adds	r6, r1, #1
 800931c:	7809      	ldrb	r1, [r1, #0]
 800931e:	9609      	str	r6, [sp, #36]	; 0x24
 8009320:	9106      	str	r1, [sp, #24]
 8009322:	9906      	ldr	r1, [sp, #24]
 8009324:	3920      	subs	r1, #32
 8009326:	2958      	cmp	r1, #88	; 0x58
 8009328:	f200 8414 	bhi.w	8009b54 <_svfprintf_r+0x8fc>
 800932c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009330:	041200a5 	.word	0x041200a5
 8009334:	00aa0412 	.word	0x00aa0412
 8009338:	04120412 	.word	0x04120412
 800933c:	04120412 	.word	0x04120412
 8009340:	04120412 	.word	0x04120412
 8009344:	006500ad 	.word	0x006500ad
 8009348:	00b50412 	.word	0x00b50412
 800934c:	041200b8 	.word	0x041200b8
 8009350:	00d800d5 	.word	0x00d800d5
 8009354:	00d800d8 	.word	0x00d800d8
 8009358:	00d800d8 	.word	0x00d800d8
 800935c:	00d800d8 	.word	0x00d800d8
 8009360:	00d800d8 	.word	0x00d800d8
 8009364:	04120412 	.word	0x04120412
 8009368:	04120412 	.word	0x04120412
 800936c:	04120412 	.word	0x04120412
 8009370:	04120412 	.word	0x04120412
 8009374:	04120412 	.word	0x04120412
 8009378:	0122010c 	.word	0x0122010c
 800937c:	01220412 	.word	0x01220412
 8009380:	04120412 	.word	0x04120412
 8009384:	04120412 	.word	0x04120412
 8009388:	041200eb 	.word	0x041200eb
 800938c:	033c0412 	.word	0x033c0412
 8009390:	04120412 	.word	0x04120412
 8009394:	04120412 	.word	0x04120412
 8009398:	03a40412 	.word	0x03a40412
 800939c:	04120412 	.word	0x04120412
 80093a0:	04120085 	.word	0x04120085
 80093a4:	04120412 	.word	0x04120412
 80093a8:	04120412 	.word	0x04120412
 80093ac:	04120412 	.word	0x04120412
 80093b0:	04120412 	.word	0x04120412
 80093b4:	00fe0412 	.word	0x00fe0412
 80093b8:	0122006b 	.word	0x0122006b
 80093bc:	01220122 	.word	0x01220122
 80093c0:	006b00ee 	.word	0x006b00ee
 80093c4:	04120412 	.word	0x04120412
 80093c8:	041200f1 	.word	0x041200f1
 80093cc:	033e031e 	.word	0x033e031e
 80093d0:	00f80372 	.word	0x00f80372
 80093d4:	03830412 	.word	0x03830412
 80093d8:	03a60412 	.word	0x03a60412
 80093dc:	04120412 	.word	0x04120412
 80093e0:	03be      	.short	0x03be
 80093e2:	461d      	mov	r5, r3
 80093e4:	e773      	b.n	80092ce <_svfprintf_r+0x76>
 80093e6:	aa21      	add	r2, sp, #132	; 0x84
 80093e8:	4649      	mov	r1, r9
 80093ea:	4650      	mov	r0, sl
 80093ec:	f002 fc30 	bl	800bc50 <__ssprint_r>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	f040 868e 	bne.w	800a112 <_svfprintf_r+0xeba>
 80093f6:	ac2e      	add	r4, sp, #184	; 0xb8
 80093f8:	e77e      	b.n	80092f8 <_svfprintf_r+0xa0>
 80093fa:	2301      	movs	r3, #1
 80093fc:	222b      	movs	r2, #43	; 0x2b
 80093fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009400:	e78b      	b.n	800931a <_svfprintf_r+0xc2>
 8009402:	460f      	mov	r7, r1
 8009404:	e7fb      	b.n	80093fe <_svfprintf_r+0x1a6>
 8009406:	b10b      	cbz	r3, 800940c <_svfprintf_r+0x1b4>
 8009408:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800940c:	06ae      	lsls	r6, r5, #26
 800940e:	f140 80a1 	bpl.w	8009554 <_svfprintf_r+0x2fc>
 8009412:	3707      	adds	r7, #7
 8009414:	f027 0707 	bic.w	r7, r7, #7
 8009418:	f107 0308 	add.w	r3, r7, #8
 800941c:	9308      	str	r3, [sp, #32]
 800941e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009422:	2e00      	cmp	r6, #0
 8009424:	f177 0300 	sbcs.w	r3, r7, #0
 8009428:	da05      	bge.n	8009436 <_svfprintf_r+0x1de>
 800942a:	232d      	movs	r3, #45	; 0x2d
 800942c:	4276      	negs	r6, r6
 800942e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8009432:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8009436:	2301      	movs	r3, #1
 8009438:	e2c7      	b.n	80099ca <_svfprintf_r+0x772>
 800943a:	b10b      	cbz	r3, 8009440 <_svfprintf_r+0x1e8>
 800943c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8009440:	4ba0      	ldr	r3, [pc, #640]	; (80096c4 <_svfprintf_r+0x46c>)
 8009442:	9315      	str	r3, [sp, #84]	; 0x54
 8009444:	06ab      	lsls	r3, r5, #26
 8009446:	f140 8336 	bpl.w	8009ab6 <_svfprintf_r+0x85e>
 800944a:	3707      	adds	r7, #7
 800944c:	f027 0707 	bic.w	r7, r7, #7
 8009450:	f107 0308 	add.w	r3, r7, #8
 8009454:	9308      	str	r3, [sp, #32]
 8009456:	e9d7 6700 	ldrd	r6, r7, [r7]
 800945a:	07e8      	lsls	r0, r5, #31
 800945c:	d50b      	bpl.n	8009476 <_svfprintf_r+0x21e>
 800945e:	ea56 0307 	orrs.w	r3, r6, r7
 8009462:	d008      	beq.n	8009476 <_svfprintf_r+0x21e>
 8009464:	2330      	movs	r3, #48	; 0x30
 8009466:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800946a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800946e:	f045 0502 	orr.w	r5, r5, #2
 8009472:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8009476:	2302      	movs	r3, #2
 8009478:	e2a4      	b.n	80099c4 <_svfprintf_r+0x76c>
 800947a:	2a00      	cmp	r2, #0
 800947c:	d1bf      	bne.n	80093fe <_svfprintf_r+0x1a6>
 800947e:	2301      	movs	r3, #1
 8009480:	2220      	movs	r2, #32
 8009482:	e7bc      	b.n	80093fe <_svfprintf_r+0x1a6>
 8009484:	f045 0501 	orr.w	r5, r5, #1
 8009488:	e7b9      	b.n	80093fe <_svfprintf_r+0x1a6>
 800948a:	683e      	ldr	r6, [r7, #0]
 800948c:	1d39      	adds	r1, r7, #4
 800948e:	2e00      	cmp	r6, #0
 8009490:	960c      	str	r6, [sp, #48]	; 0x30
 8009492:	dab6      	bge.n	8009402 <_svfprintf_r+0x1aa>
 8009494:	460f      	mov	r7, r1
 8009496:	4276      	negs	r6, r6
 8009498:	960c      	str	r6, [sp, #48]	; 0x30
 800949a:	f045 0504 	orr.w	r5, r5, #4
 800949e:	e7ae      	b.n	80093fe <_svfprintf_r+0x1a6>
 80094a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094a2:	1c4e      	adds	r6, r1, #1
 80094a4:	7809      	ldrb	r1, [r1, #0]
 80094a6:	292a      	cmp	r1, #42	; 0x2a
 80094a8:	9106      	str	r1, [sp, #24]
 80094aa:	d010      	beq.n	80094ce <_svfprintf_r+0x276>
 80094ac:	f04f 0b00 	mov.w	fp, #0
 80094b0:	9609      	str	r6, [sp, #36]	; 0x24
 80094b2:	9906      	ldr	r1, [sp, #24]
 80094b4:	3930      	subs	r1, #48	; 0x30
 80094b6:	2909      	cmp	r1, #9
 80094b8:	f63f af33 	bhi.w	8009322 <_svfprintf_r+0xca>
 80094bc:	fb00 1b0b 	mla	fp, r0, fp, r1
 80094c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094c2:	460e      	mov	r6, r1
 80094c4:	f816 1b01 	ldrb.w	r1, [r6], #1
 80094c8:	9106      	str	r1, [sp, #24]
 80094ca:	9609      	str	r6, [sp, #36]	; 0x24
 80094cc:	e7f1      	b.n	80094b2 <_svfprintf_r+0x25a>
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	9609      	str	r6, [sp, #36]	; 0x24
 80094d2:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 80094d6:	3704      	adds	r7, #4
 80094d8:	e791      	b.n	80093fe <_svfprintf_r+0x1a6>
 80094da:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80094de:	e78e      	b.n	80093fe <_svfprintf_r+0x1a6>
 80094e0:	2100      	movs	r1, #0
 80094e2:	910c      	str	r1, [sp, #48]	; 0x30
 80094e4:	9906      	ldr	r1, [sp, #24]
 80094e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80094e8:	3930      	subs	r1, #48	; 0x30
 80094ea:	fb00 1106 	mla	r1, r0, r6, r1
 80094ee:	910c      	str	r1, [sp, #48]	; 0x30
 80094f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094f2:	460e      	mov	r6, r1
 80094f4:	f816 1b01 	ldrb.w	r1, [r6], #1
 80094f8:	9106      	str	r1, [sp, #24]
 80094fa:	9906      	ldr	r1, [sp, #24]
 80094fc:	9609      	str	r6, [sp, #36]	; 0x24
 80094fe:	3930      	subs	r1, #48	; 0x30
 8009500:	2909      	cmp	r1, #9
 8009502:	d9ef      	bls.n	80094e4 <_svfprintf_r+0x28c>
 8009504:	e70d      	b.n	8009322 <_svfprintf_r+0xca>
 8009506:	f045 0508 	orr.w	r5, r5, #8
 800950a:	e778      	b.n	80093fe <_svfprintf_r+0x1a6>
 800950c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8009510:	e775      	b.n	80093fe <_svfprintf_r+0x1a6>
 8009512:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009514:	7809      	ldrb	r1, [r1, #0]
 8009516:	296c      	cmp	r1, #108	; 0x6c
 8009518:	d105      	bne.n	8009526 <_svfprintf_r+0x2ce>
 800951a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800951c:	3101      	adds	r1, #1
 800951e:	9109      	str	r1, [sp, #36]	; 0x24
 8009520:	f045 0520 	orr.w	r5, r5, #32
 8009524:	e76b      	b.n	80093fe <_svfprintf_r+0x1a6>
 8009526:	f045 0510 	orr.w	r5, r5, #16
 800952a:	e768      	b.n	80093fe <_svfprintf_r+0x1a6>
 800952c:	2600      	movs	r6, #0
 800952e:	1d3b      	adds	r3, r7, #4
 8009530:	9308      	str	r3, [sp, #32]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8009538:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800953c:	f04f 0b01 	mov.w	fp, #1
 8009540:	4637      	mov	r7, r6
 8009542:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8009546:	e11c      	b.n	8009782 <_svfprintf_r+0x52a>
 8009548:	b10b      	cbz	r3, 800954e <_svfprintf_r+0x2f6>
 800954a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800954e:	f045 0510 	orr.w	r5, r5, #16
 8009552:	e75b      	b.n	800940c <_svfprintf_r+0x1b4>
 8009554:	f015 0f10 	tst.w	r5, #16
 8009558:	f107 0304 	add.w	r3, r7, #4
 800955c:	d003      	beq.n	8009566 <_svfprintf_r+0x30e>
 800955e:	683e      	ldr	r6, [r7, #0]
 8009560:	9308      	str	r3, [sp, #32]
 8009562:	17f7      	asrs	r7, r6, #31
 8009564:	e75d      	b.n	8009422 <_svfprintf_r+0x1ca>
 8009566:	683e      	ldr	r6, [r7, #0]
 8009568:	f015 0f40 	tst.w	r5, #64	; 0x40
 800956c:	9308      	str	r3, [sp, #32]
 800956e:	bf18      	it	ne
 8009570:	b236      	sxthne	r6, r6
 8009572:	e7f6      	b.n	8009562 <_svfprintf_r+0x30a>
 8009574:	b10b      	cbz	r3, 800957a <_svfprintf_r+0x322>
 8009576:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800957a:	3707      	adds	r7, #7
 800957c:	f027 0707 	bic.w	r7, r7, #7
 8009580:	f107 0308 	add.w	r3, r7, #8
 8009584:	9308      	str	r3, [sp, #32]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	f04f 32ff 	mov.w	r2, #4294967295
 800958c:	930d      	str	r3, [sp, #52]	; 0x34
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009592:	930e      	str	r3, [sp, #56]	; 0x38
 8009594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009596:	4638      	mov	r0, r7
 8009598:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800959c:	4631      	mov	r1, r6
 800959e:	4b4a      	ldr	r3, [pc, #296]	; (80096c8 <_svfprintf_r+0x470>)
 80095a0:	f7f7 fa30 	bl	8000a04 <__aeabi_dcmpun>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	f040 85dc 	bne.w	800a162 <_svfprintf_r+0xf0a>
 80095aa:	f04f 32ff 	mov.w	r2, #4294967295
 80095ae:	4b46      	ldr	r3, [pc, #280]	; (80096c8 <_svfprintf_r+0x470>)
 80095b0:	4638      	mov	r0, r7
 80095b2:	4631      	mov	r1, r6
 80095b4:	f7f7 fa08 	bl	80009c8 <__aeabi_dcmple>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	f040 85d2 	bne.w	800a162 <_svfprintf_r+0xf0a>
 80095be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80095c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80095c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80095c6:	f7f7 f9f5 	bl	80009b4 <__aeabi_dcmplt>
 80095ca:	b110      	cbz	r0, 80095d2 <_svfprintf_r+0x37a>
 80095cc:	232d      	movs	r3, #45	; 0x2d
 80095ce:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80095d2:	4b3e      	ldr	r3, [pc, #248]	; (80096cc <_svfprintf_r+0x474>)
 80095d4:	4a3e      	ldr	r2, [pc, #248]	; (80096d0 <_svfprintf_r+0x478>)
 80095d6:	9906      	ldr	r1, [sp, #24]
 80095d8:	f04f 0b03 	mov.w	fp, #3
 80095dc:	2947      	cmp	r1, #71	; 0x47
 80095de:	bfcc      	ite	gt
 80095e0:	4690      	movgt	r8, r2
 80095e2:	4698      	movle	r8, r3
 80095e4:	2600      	movs	r6, #0
 80095e6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80095ea:	4637      	mov	r7, r6
 80095ec:	e0c9      	b.n	8009782 <_svfprintf_r+0x52a>
 80095ee:	f1bb 3fff 	cmp.w	fp, #4294967295
 80095f2:	d026      	beq.n	8009642 <_svfprintf_r+0x3ea>
 80095f4:	9b06      	ldr	r3, [sp, #24]
 80095f6:	f023 0320 	bic.w	r3, r3, #32
 80095fa:	2b47      	cmp	r3, #71	; 0x47
 80095fc:	d104      	bne.n	8009608 <_svfprintf_r+0x3b0>
 80095fe:	f1bb 0f00 	cmp.w	fp, #0
 8009602:	bf08      	it	eq
 8009604:	f04f 0b01 	moveq.w	fp, #1
 8009608:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800960c:	9317      	str	r3, [sp, #92]	; 0x5c
 800960e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009610:	1e1f      	subs	r7, r3, #0
 8009612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009614:	bfa8      	it	ge
 8009616:	9710      	strge	r7, [sp, #64]	; 0x40
 8009618:	930f      	str	r3, [sp, #60]	; 0x3c
 800961a:	bfbd      	ittte	lt
 800961c:	463b      	movlt	r3, r7
 800961e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009622:	9310      	strlt	r3, [sp, #64]	; 0x40
 8009624:	2300      	movge	r3, #0
 8009626:	bfb8      	it	lt
 8009628:	232d      	movlt	r3, #45	; 0x2d
 800962a:	9316      	str	r3, [sp, #88]	; 0x58
 800962c:	9b06      	ldr	r3, [sp, #24]
 800962e:	f023 0720 	bic.w	r7, r3, #32
 8009632:	2f46      	cmp	r7, #70	; 0x46
 8009634:	d008      	beq.n	8009648 <_svfprintf_r+0x3f0>
 8009636:	2f45      	cmp	r7, #69	; 0x45
 8009638:	d142      	bne.n	80096c0 <_svfprintf_r+0x468>
 800963a:	f10b 0601 	add.w	r6, fp, #1
 800963e:	2302      	movs	r3, #2
 8009640:	e004      	b.n	800964c <_svfprintf_r+0x3f4>
 8009642:	f04f 0b06 	mov.w	fp, #6
 8009646:	e7df      	b.n	8009608 <_svfprintf_r+0x3b0>
 8009648:	465e      	mov	r6, fp
 800964a:	2303      	movs	r3, #3
 800964c:	aa1f      	add	r2, sp, #124	; 0x7c
 800964e:	9204      	str	r2, [sp, #16]
 8009650:	aa1c      	add	r2, sp, #112	; 0x70
 8009652:	9203      	str	r2, [sp, #12]
 8009654:	aa1b      	add	r2, sp, #108	; 0x6c
 8009656:	9202      	str	r2, [sp, #8]
 8009658:	e88d 0048 	stmia.w	sp, {r3, r6}
 800965c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800965e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009660:	4650      	mov	r0, sl
 8009662:	f000 fe65 	bl	800a330 <_dtoa_r>
 8009666:	2f47      	cmp	r7, #71	; 0x47
 8009668:	4680      	mov	r8, r0
 800966a:	d102      	bne.n	8009672 <_svfprintf_r+0x41a>
 800966c:	07e8      	lsls	r0, r5, #31
 800966e:	f140 8585 	bpl.w	800a17c <_svfprintf_r+0xf24>
 8009672:	eb08 0306 	add.w	r3, r8, r6
 8009676:	2f46      	cmp	r7, #70	; 0x46
 8009678:	9307      	str	r3, [sp, #28]
 800967a:	d111      	bne.n	80096a0 <_svfprintf_r+0x448>
 800967c:	f898 3000 	ldrb.w	r3, [r8]
 8009680:	2b30      	cmp	r3, #48	; 0x30
 8009682:	d109      	bne.n	8009698 <_svfprintf_r+0x440>
 8009684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009686:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009688:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800968a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800968c:	f7f7 f988 	bl	80009a0 <__aeabi_dcmpeq>
 8009690:	b910      	cbnz	r0, 8009698 <_svfprintf_r+0x440>
 8009692:	f1c6 0601 	rsb	r6, r6, #1
 8009696:	961b      	str	r6, [sp, #108]	; 0x6c
 8009698:	9a07      	ldr	r2, [sp, #28]
 800969a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800969c:	441a      	add	r2, r3
 800969e:	9207      	str	r2, [sp, #28]
 80096a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80096a6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80096a8:	f7f7 f97a 	bl	80009a0 <__aeabi_dcmpeq>
 80096ac:	b990      	cbnz	r0, 80096d4 <_svfprintf_r+0x47c>
 80096ae:	2230      	movs	r2, #48	; 0x30
 80096b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80096b2:	9907      	ldr	r1, [sp, #28]
 80096b4:	4299      	cmp	r1, r3
 80096b6:	d90f      	bls.n	80096d8 <_svfprintf_r+0x480>
 80096b8:	1c59      	adds	r1, r3, #1
 80096ba:	911f      	str	r1, [sp, #124]	; 0x7c
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	e7f7      	b.n	80096b0 <_svfprintf_r+0x458>
 80096c0:	465e      	mov	r6, fp
 80096c2:	e7bc      	b.n	800963e <_svfprintf_r+0x3e6>
 80096c4:	08010530 	.word	0x08010530
 80096c8:	7fefffff 	.word	0x7fefffff
 80096cc:	08010524 	.word	0x08010524
 80096d0:	080107ee 	.word	0x080107ee
 80096d4:	9b07      	ldr	r3, [sp, #28]
 80096d6:	931f      	str	r3, [sp, #124]	; 0x7c
 80096d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80096da:	2f47      	cmp	r7, #71	; 0x47
 80096dc:	eba3 0308 	sub.w	r3, r3, r8
 80096e0:	9307      	str	r3, [sp, #28]
 80096e2:	f040 8100 	bne.w	80098e6 <_svfprintf_r+0x68e>
 80096e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096e8:	1cd9      	adds	r1, r3, #3
 80096ea:	db02      	blt.n	80096f2 <_svfprintf_r+0x49a>
 80096ec:	459b      	cmp	fp, r3
 80096ee:	f280 8126 	bge.w	800993e <_svfprintf_r+0x6e6>
 80096f2:	9b06      	ldr	r3, [sp, #24]
 80096f4:	3b02      	subs	r3, #2
 80096f6:	9306      	str	r3, [sp, #24]
 80096f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80096fa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80096fe:	1e53      	subs	r3, r2, #1
 8009700:	2b00      	cmp	r3, #0
 8009702:	bfa8      	it	ge
 8009704:	222b      	movge	r2, #43	; 0x2b
 8009706:	931b      	str	r3, [sp, #108]	; 0x6c
 8009708:	bfbc      	itt	lt
 800970a:	f1c2 0301 	rsblt	r3, r2, #1
 800970e:	222d      	movlt	r2, #45	; 0x2d
 8009710:	2b09      	cmp	r3, #9
 8009712:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 8009716:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 800971a:	f340 8100 	ble.w	800991e <_svfprintf_r+0x6c6>
 800971e:	260a      	movs	r6, #10
 8009720:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8009724:	fb93 f0f6 	sdiv	r0, r3, r6
 8009728:	fb06 3310 	mls	r3, r6, r0, r3
 800972c:	2809      	cmp	r0, #9
 800972e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8009732:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009736:	f102 31ff 	add.w	r1, r2, #4294967295
 800973a:	4603      	mov	r3, r0
 800973c:	f300 80e8 	bgt.w	8009910 <_svfprintf_r+0x6b8>
 8009740:	3330      	adds	r3, #48	; 0x30
 8009742:	f801 3c01 	strb.w	r3, [r1, #-1]
 8009746:	3a02      	subs	r2, #2
 8009748:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 800974c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8009750:	4282      	cmp	r2, r0
 8009752:	4619      	mov	r1, r3
 8009754:	f0c0 80de 	bcc.w	8009914 <_svfprintf_r+0x6bc>
 8009758:	9a07      	ldr	r2, [sp, #28]
 800975a:	ab1d      	add	r3, sp, #116	; 0x74
 800975c:	1acb      	subs	r3, r1, r3
 800975e:	2a01      	cmp	r2, #1
 8009760:	9314      	str	r3, [sp, #80]	; 0x50
 8009762:	eb03 0b02 	add.w	fp, r3, r2
 8009766:	dc02      	bgt.n	800976e <_svfprintf_r+0x516>
 8009768:	f015 0701 	ands.w	r7, r5, #1
 800976c:	d002      	beq.n	8009774 <_svfprintf_r+0x51c>
 800976e:	2700      	movs	r7, #0
 8009770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009772:	449b      	add	fp, r3
 8009774:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009776:	b113      	cbz	r3, 800977e <_svfprintf_r+0x526>
 8009778:	232d      	movs	r3, #45	; 0x2d
 800977a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800977e:	2600      	movs	r6, #0
 8009780:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009782:	455e      	cmp	r6, fp
 8009784:	4633      	mov	r3, r6
 8009786:	bfb8      	it	lt
 8009788:	465b      	movlt	r3, fp
 800978a:	930f      	str	r3, [sp, #60]	; 0x3c
 800978c:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8009790:	b113      	cbz	r3, 8009798 <_svfprintf_r+0x540>
 8009792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009794:	3301      	adds	r3, #1
 8009796:	930f      	str	r3, [sp, #60]	; 0x3c
 8009798:	f015 0302 	ands.w	r3, r5, #2
 800979c:	9316      	str	r3, [sp, #88]	; 0x58
 800979e:	bf1e      	ittt	ne
 80097a0:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 80097a2:	3302      	addne	r3, #2
 80097a4:	930f      	strne	r3, [sp, #60]	; 0x3c
 80097a6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80097aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80097ac:	d118      	bne.n	80097e0 <_svfprintf_r+0x588>
 80097ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097b2:	1a9b      	subs	r3, r3, r2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	9310      	str	r3, [sp, #64]	; 0x40
 80097b8:	dd12      	ble.n	80097e0 <_svfprintf_r+0x588>
 80097ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097bc:	2b10      	cmp	r3, #16
 80097be:	4bab      	ldr	r3, [pc, #684]	; (8009a6c <_svfprintf_r+0x814>)
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	f300 81d9 	bgt.w	8009b78 <_svfprintf_r+0x920>
 80097c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097ca:	6063      	str	r3, [r4, #4]
 80097cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097ce:	4413      	add	r3, r2
 80097d0:	9323      	str	r3, [sp, #140]	; 0x8c
 80097d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097d4:	3301      	adds	r3, #1
 80097d6:	2b07      	cmp	r3, #7
 80097d8:	9322      	str	r3, [sp, #136]	; 0x88
 80097da:	f300 81e6 	bgt.w	8009baa <_svfprintf_r+0x952>
 80097de:	3408      	adds	r4, #8
 80097e0:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80097e4:	b173      	cbz	r3, 8009804 <_svfprintf_r+0x5ac>
 80097e6:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	2301      	movs	r3, #1
 80097ee:	6063      	str	r3, [r4, #4]
 80097f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097f2:	3301      	adds	r3, #1
 80097f4:	9323      	str	r3, [sp, #140]	; 0x8c
 80097f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097f8:	3301      	adds	r3, #1
 80097fa:	2b07      	cmp	r3, #7
 80097fc:	9322      	str	r3, [sp, #136]	; 0x88
 80097fe:	f300 81de 	bgt.w	8009bbe <_svfprintf_r+0x966>
 8009802:	3408      	adds	r4, #8
 8009804:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009806:	b16b      	cbz	r3, 8009824 <_svfprintf_r+0x5cc>
 8009808:	ab1a      	add	r3, sp, #104	; 0x68
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	2302      	movs	r3, #2
 800980e:	6063      	str	r3, [r4, #4]
 8009810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009812:	3302      	adds	r3, #2
 8009814:	9323      	str	r3, [sp, #140]	; 0x8c
 8009816:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009818:	3301      	adds	r3, #1
 800981a:	2b07      	cmp	r3, #7
 800981c:	9322      	str	r3, [sp, #136]	; 0x88
 800981e:	f300 81d8 	bgt.w	8009bd2 <_svfprintf_r+0x97a>
 8009822:	3408      	adds	r4, #8
 8009824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009826:	2b80      	cmp	r3, #128	; 0x80
 8009828:	d118      	bne.n	800985c <_svfprintf_r+0x604>
 800982a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800982c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800982e:	1a9b      	subs	r3, r3, r2
 8009830:	2b00      	cmp	r3, #0
 8009832:	9310      	str	r3, [sp, #64]	; 0x40
 8009834:	dd12      	ble.n	800985c <_svfprintf_r+0x604>
 8009836:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009838:	2b10      	cmp	r3, #16
 800983a:	4b8d      	ldr	r3, [pc, #564]	; (8009a70 <_svfprintf_r+0x818>)
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	f300 81d2 	bgt.w	8009be6 <_svfprintf_r+0x98e>
 8009842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009844:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009846:	6063      	str	r3, [r4, #4]
 8009848:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800984a:	4413      	add	r3, r2
 800984c:	9323      	str	r3, [sp, #140]	; 0x8c
 800984e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009850:	3301      	adds	r3, #1
 8009852:	2b07      	cmp	r3, #7
 8009854:	9322      	str	r3, [sp, #136]	; 0x88
 8009856:	f300 81df 	bgt.w	8009c18 <_svfprintf_r+0x9c0>
 800985a:	3408      	adds	r4, #8
 800985c:	eba6 060b 	sub.w	r6, r6, fp
 8009860:	2e00      	cmp	r6, #0
 8009862:	dd0f      	ble.n	8009884 <_svfprintf_r+0x62c>
 8009864:	4b82      	ldr	r3, [pc, #520]	; (8009a70 <_svfprintf_r+0x818>)
 8009866:	2e10      	cmp	r6, #16
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	f300 81df 	bgt.w	8009c2c <_svfprintf_r+0x9d4>
 800986e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009870:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8009872:	3301      	adds	r3, #1
 8009874:	6066      	str	r6, [r4, #4]
 8009876:	2b07      	cmp	r3, #7
 8009878:	4406      	add	r6, r0
 800987a:	9623      	str	r6, [sp, #140]	; 0x8c
 800987c:	9322      	str	r3, [sp, #136]	; 0x88
 800987e:	f300 81ec 	bgt.w	8009c5a <_svfprintf_r+0xa02>
 8009882:	3408      	adds	r4, #8
 8009884:	05eb      	lsls	r3, r5, #23
 8009886:	f100 81f2 	bmi.w	8009c6e <_svfprintf_r+0xa16>
 800988a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800988c:	e884 0900 	stmia.w	r4, {r8, fp}
 8009890:	445b      	add	r3, fp
 8009892:	9323      	str	r3, [sp, #140]	; 0x8c
 8009894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009896:	3301      	adds	r3, #1
 8009898:	2b07      	cmp	r3, #7
 800989a:	9322      	str	r3, [sp, #136]	; 0x88
 800989c:	f340 8419 	ble.w	800a0d2 <_svfprintf_r+0xe7a>
 80098a0:	aa21      	add	r2, sp, #132	; 0x84
 80098a2:	4649      	mov	r1, r9
 80098a4:	4650      	mov	r0, sl
 80098a6:	f002 f9d3 	bl	800bc50 <__ssprint_r>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	f040 8431 	bne.w	800a112 <_svfprintf_r+0xeba>
 80098b0:	ac2e      	add	r4, sp, #184	; 0xb8
 80098b2:	076b      	lsls	r3, r5, #29
 80098b4:	f100 8410 	bmi.w	800a0d8 <_svfprintf_r+0xe80>
 80098b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80098be:	428a      	cmp	r2, r1
 80098c0:	bfac      	ite	ge
 80098c2:	189b      	addge	r3, r3, r2
 80098c4:	185b      	addlt	r3, r3, r1
 80098c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80098c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098ca:	b13b      	cbz	r3, 80098dc <_svfprintf_r+0x684>
 80098cc:	aa21      	add	r2, sp, #132	; 0x84
 80098ce:	4649      	mov	r1, r9
 80098d0:	4650      	mov	r0, sl
 80098d2:	f002 f9bd 	bl	800bc50 <__ssprint_r>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f040 841b 	bne.w	800a112 <_svfprintf_r+0xeba>
 80098dc:	2300      	movs	r3, #0
 80098de:	9f08      	ldr	r7, [sp, #32]
 80098e0:	9322      	str	r3, [sp, #136]	; 0x88
 80098e2:	ac2e      	add	r4, sp, #184	; 0xb8
 80098e4:	e4f2      	b.n	80092cc <_svfprintf_r+0x74>
 80098e6:	9b06      	ldr	r3, [sp, #24]
 80098e8:	2b65      	cmp	r3, #101	; 0x65
 80098ea:	f77f af05 	ble.w	80096f8 <_svfprintf_r+0x4a0>
 80098ee:	9b06      	ldr	r3, [sp, #24]
 80098f0:	2b66      	cmp	r3, #102	; 0x66
 80098f2:	d124      	bne.n	800993e <_svfprintf_r+0x6e6>
 80098f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	dd19      	ble.n	800992e <_svfprintf_r+0x6d6>
 80098fa:	f1bb 0f00 	cmp.w	fp, #0
 80098fe:	d101      	bne.n	8009904 <_svfprintf_r+0x6ac>
 8009900:	07ea      	lsls	r2, r5, #31
 8009902:	d502      	bpl.n	800990a <_svfprintf_r+0x6b2>
 8009904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009906:	4413      	add	r3, r2
 8009908:	445b      	add	r3, fp
 800990a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800990c:	469b      	mov	fp, r3
 800990e:	e731      	b.n	8009774 <_svfprintf_r+0x51c>
 8009910:	460a      	mov	r2, r1
 8009912:	e707      	b.n	8009724 <_svfprintf_r+0x4cc>
 8009914:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009918:	f803 1b01 	strb.w	r1, [r3], #1
 800991c:	e718      	b.n	8009750 <_svfprintf_r+0x4f8>
 800991e:	2230      	movs	r2, #48	; 0x30
 8009920:	4413      	add	r3, r2
 8009922:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8009926:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800992a:	a91e      	add	r1, sp, #120	; 0x78
 800992c:	e714      	b.n	8009758 <_svfprintf_r+0x500>
 800992e:	f1bb 0f00 	cmp.w	fp, #0
 8009932:	d101      	bne.n	8009938 <_svfprintf_r+0x6e0>
 8009934:	07eb      	lsls	r3, r5, #31
 8009936:	d515      	bpl.n	8009964 <_svfprintf_r+0x70c>
 8009938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800993a:	3301      	adds	r3, #1
 800993c:	e7e4      	b.n	8009908 <_svfprintf_r+0x6b0>
 800993e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009940:	9b07      	ldr	r3, [sp, #28]
 8009942:	429a      	cmp	r2, r3
 8009944:	db06      	blt.n	8009954 <_svfprintf_r+0x6fc>
 8009946:	07ef      	lsls	r7, r5, #31
 8009948:	d50e      	bpl.n	8009968 <_svfprintf_r+0x710>
 800994a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800994c:	4413      	add	r3, r2
 800994e:	2267      	movs	r2, #103	; 0x67
 8009950:	9206      	str	r2, [sp, #24]
 8009952:	e7da      	b.n	800990a <_svfprintf_r+0x6b2>
 8009954:	9b07      	ldr	r3, [sp, #28]
 8009956:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009958:	2a00      	cmp	r2, #0
 800995a:	440b      	add	r3, r1
 800995c:	dcf7      	bgt.n	800994e <_svfprintf_r+0x6f6>
 800995e:	f1c2 0201 	rsb	r2, r2, #1
 8009962:	e7f3      	b.n	800994c <_svfprintf_r+0x6f4>
 8009964:	2301      	movs	r3, #1
 8009966:	e7d0      	b.n	800990a <_svfprintf_r+0x6b2>
 8009968:	4613      	mov	r3, r2
 800996a:	e7f0      	b.n	800994e <_svfprintf_r+0x6f6>
 800996c:	b10b      	cbz	r3, 8009972 <_svfprintf_r+0x71a>
 800996e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8009972:	f015 0f20 	tst.w	r5, #32
 8009976:	f107 0304 	add.w	r3, r7, #4
 800997a:	d008      	beq.n	800998e <_svfprintf_r+0x736>
 800997c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	17ce      	asrs	r6, r1, #31
 8009982:	4608      	mov	r0, r1
 8009984:	4631      	mov	r1, r6
 8009986:	e9c2 0100 	strd	r0, r1, [r2]
 800998a:	461f      	mov	r7, r3
 800998c:	e49e      	b.n	80092cc <_svfprintf_r+0x74>
 800998e:	06ee      	lsls	r6, r5, #27
 8009990:	d503      	bpl.n	800999a <_svfprintf_r+0x742>
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009996:	6011      	str	r1, [r2, #0]
 8009998:	e7f7      	b.n	800998a <_svfprintf_r+0x732>
 800999a:	0668      	lsls	r0, r5, #25
 800999c:	d5f9      	bpl.n	8009992 <_svfprintf_r+0x73a>
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80099a4:	8011      	strh	r1, [r2, #0]
 80099a6:	e7f0      	b.n	800998a <_svfprintf_r+0x732>
 80099a8:	f045 0510 	orr.w	r5, r5, #16
 80099ac:	f015 0320 	ands.w	r3, r5, #32
 80099b0:	d022      	beq.n	80099f8 <_svfprintf_r+0x7a0>
 80099b2:	3707      	adds	r7, #7
 80099b4:	f027 0707 	bic.w	r7, r7, #7
 80099b8:	f107 0308 	add.w	r3, r7, #8
 80099bc:	9308      	str	r3, [sp, #32]
 80099be:	e9d7 6700 	ldrd	r6, r7, [r7]
 80099c2:	2300      	movs	r3, #0
 80099c4:	2200      	movs	r2, #0
 80099c6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80099ca:	f1bb 3fff 	cmp.w	fp, #4294967295
 80099ce:	f000 83db 	beq.w	800a188 <_svfprintf_r+0xf30>
 80099d2:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80099d6:	920f      	str	r2, [sp, #60]	; 0x3c
 80099d8:	ea56 0207 	orrs.w	r2, r6, r7
 80099dc:	f040 83d9 	bne.w	800a192 <_svfprintf_r+0xf3a>
 80099e0:	f1bb 0f00 	cmp.w	fp, #0
 80099e4:	f000 80aa 	beq.w	8009b3c <_svfprintf_r+0x8e4>
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d076      	beq.n	8009ada <_svfprintf_r+0x882>
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	f000 8091 	beq.w	8009b14 <_svfprintf_r+0x8bc>
 80099f2:	2600      	movs	r6, #0
 80099f4:	2700      	movs	r7, #0
 80099f6:	e3d2      	b.n	800a19e <_svfprintf_r+0xf46>
 80099f8:	1d3a      	adds	r2, r7, #4
 80099fa:	f015 0110 	ands.w	r1, r5, #16
 80099fe:	9208      	str	r2, [sp, #32]
 8009a00:	d002      	beq.n	8009a08 <_svfprintf_r+0x7b0>
 8009a02:	683e      	ldr	r6, [r7, #0]
 8009a04:	2700      	movs	r7, #0
 8009a06:	e7dd      	b.n	80099c4 <_svfprintf_r+0x76c>
 8009a08:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8009a0c:	d0f9      	beq.n	8009a02 <_svfprintf_r+0x7aa>
 8009a0e:	883e      	ldrh	r6, [r7, #0]
 8009a10:	2700      	movs	r7, #0
 8009a12:	e7d6      	b.n	80099c2 <_svfprintf_r+0x76a>
 8009a14:	1d3b      	adds	r3, r7, #4
 8009a16:	9308      	str	r3, [sp, #32]
 8009a18:	2330      	movs	r3, #48	; 0x30
 8009a1a:	2278      	movs	r2, #120	; 0x78
 8009a1c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8009a20:	4b14      	ldr	r3, [pc, #80]	; (8009a74 <_svfprintf_r+0x81c>)
 8009a22:	683e      	ldr	r6, [r7, #0]
 8009a24:	9315      	str	r3, [sp, #84]	; 0x54
 8009a26:	2700      	movs	r7, #0
 8009a28:	f045 0502 	orr.w	r5, r5, #2
 8009a2c:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8009a30:	2302      	movs	r3, #2
 8009a32:	9206      	str	r2, [sp, #24]
 8009a34:	e7c6      	b.n	80099c4 <_svfprintf_r+0x76c>
 8009a36:	2600      	movs	r6, #0
 8009a38:	1d3b      	adds	r3, r7, #4
 8009a3a:	f1bb 3fff 	cmp.w	fp, #4294967295
 8009a3e:	9308      	str	r3, [sp, #32]
 8009a40:	f8d7 8000 	ldr.w	r8, [r7]
 8009a44:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8009a48:	d00a      	beq.n	8009a60 <_svfprintf_r+0x808>
 8009a4a:	465a      	mov	r2, fp
 8009a4c:	4631      	mov	r1, r6
 8009a4e:	4640      	mov	r0, r8
 8009a50:	f001 fc66 	bl	800b320 <memchr>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	f000 808d 	beq.w	8009b74 <_svfprintf_r+0x91c>
 8009a5a:	eba0 0b08 	sub.w	fp, r0, r8
 8009a5e:	e5c4      	b.n	80095ea <_svfprintf_r+0x392>
 8009a60:	4640      	mov	r0, r8
 8009a62:	f7f6 fb75 	bl	8000150 <strlen>
 8009a66:	4683      	mov	fp, r0
 8009a68:	e5bf      	b.n	80095ea <_svfprintf_r+0x392>
 8009a6a:	bf00      	nop
 8009a6c:	08010554 	.word	0x08010554
 8009a70:	08010564 	.word	0x08010564
 8009a74:	08010541 	.word	0x08010541
 8009a78:	f045 0510 	orr.w	r5, r5, #16
 8009a7c:	06a9      	lsls	r1, r5, #26
 8009a7e:	d509      	bpl.n	8009a94 <_svfprintf_r+0x83c>
 8009a80:	3707      	adds	r7, #7
 8009a82:	f027 0707 	bic.w	r7, r7, #7
 8009a86:	f107 0308 	add.w	r3, r7, #8
 8009a8a:	9308      	str	r3, [sp, #32]
 8009a8c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009a90:	2301      	movs	r3, #1
 8009a92:	e797      	b.n	80099c4 <_svfprintf_r+0x76c>
 8009a94:	1d3b      	adds	r3, r7, #4
 8009a96:	f015 0f10 	tst.w	r5, #16
 8009a9a:	9308      	str	r3, [sp, #32]
 8009a9c:	d001      	beq.n	8009aa2 <_svfprintf_r+0x84a>
 8009a9e:	683e      	ldr	r6, [r7, #0]
 8009aa0:	e002      	b.n	8009aa8 <_svfprintf_r+0x850>
 8009aa2:	066a      	lsls	r2, r5, #25
 8009aa4:	d5fb      	bpl.n	8009a9e <_svfprintf_r+0x846>
 8009aa6:	883e      	ldrh	r6, [r7, #0]
 8009aa8:	2700      	movs	r7, #0
 8009aaa:	e7f1      	b.n	8009a90 <_svfprintf_r+0x838>
 8009aac:	b10b      	cbz	r3, 8009ab2 <_svfprintf_r+0x85a>
 8009aae:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8009ab2:	4ba3      	ldr	r3, [pc, #652]	; (8009d40 <_svfprintf_r+0xae8>)
 8009ab4:	e4c5      	b.n	8009442 <_svfprintf_r+0x1ea>
 8009ab6:	1d3b      	adds	r3, r7, #4
 8009ab8:	f015 0f10 	tst.w	r5, #16
 8009abc:	9308      	str	r3, [sp, #32]
 8009abe:	d001      	beq.n	8009ac4 <_svfprintf_r+0x86c>
 8009ac0:	683e      	ldr	r6, [r7, #0]
 8009ac2:	e002      	b.n	8009aca <_svfprintf_r+0x872>
 8009ac4:	066e      	lsls	r6, r5, #25
 8009ac6:	d5fb      	bpl.n	8009ac0 <_svfprintf_r+0x868>
 8009ac8:	883e      	ldrh	r6, [r7, #0]
 8009aca:	2700      	movs	r7, #0
 8009acc:	e4c5      	b.n	800945a <_svfprintf_r+0x202>
 8009ace:	4643      	mov	r3, r8
 8009ad0:	e366      	b.n	800a1a0 <_svfprintf_r+0xf48>
 8009ad2:	2f00      	cmp	r7, #0
 8009ad4:	bf08      	it	eq
 8009ad6:	2e0a      	cmpeq	r6, #10
 8009ad8:	d205      	bcs.n	8009ae6 <_svfprintf_r+0x88e>
 8009ada:	3630      	adds	r6, #48	; 0x30
 8009adc:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8009ae0:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8009ae4:	e377      	b.n	800a1d6 <_svfprintf_r+0xf7e>
 8009ae6:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8009aea:	4630      	mov	r0, r6
 8009aec:	4639      	mov	r1, r7
 8009aee:	220a      	movs	r2, #10
 8009af0:	2300      	movs	r3, #0
 8009af2:	f7f7 fb45 	bl	8001180 <__aeabi_uldivmod>
 8009af6:	3230      	adds	r2, #48	; 0x30
 8009af8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8009afc:	2300      	movs	r3, #0
 8009afe:	4630      	mov	r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	220a      	movs	r2, #10
 8009b04:	f7f7 fb3c 	bl	8001180 <__aeabi_uldivmod>
 8009b08:	4606      	mov	r6, r0
 8009b0a:	460f      	mov	r7, r1
 8009b0c:	ea56 0307 	orrs.w	r3, r6, r7
 8009b10:	d1eb      	bne.n	8009aea <_svfprintf_r+0x892>
 8009b12:	e360      	b.n	800a1d6 <_svfprintf_r+0xf7e>
 8009b14:	2600      	movs	r6, #0
 8009b16:	2700      	movs	r7, #0
 8009b18:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8009b1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b1e:	f006 030f 	and.w	r3, r6, #15
 8009b22:	5cd3      	ldrb	r3, [r2, r3]
 8009b24:	093a      	lsrs	r2, r7, #4
 8009b26:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009b2a:	0933      	lsrs	r3, r6, #4
 8009b2c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8009b30:	461e      	mov	r6, r3
 8009b32:	4617      	mov	r7, r2
 8009b34:	ea56 0307 	orrs.w	r3, r6, r7
 8009b38:	d1f0      	bne.n	8009b1c <_svfprintf_r+0x8c4>
 8009b3a:	e34c      	b.n	800a1d6 <_svfprintf_r+0xf7e>
 8009b3c:	b93b      	cbnz	r3, 8009b4e <_svfprintf_r+0x8f6>
 8009b3e:	07ea      	lsls	r2, r5, #31
 8009b40:	d505      	bpl.n	8009b4e <_svfprintf_r+0x8f6>
 8009b42:	2330      	movs	r3, #48	; 0x30
 8009b44:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8009b48:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8009b4c:	e343      	b.n	800a1d6 <_svfprintf_r+0xf7e>
 8009b4e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8009b52:	e340      	b.n	800a1d6 <_svfprintf_r+0xf7e>
 8009b54:	b10b      	cbz	r3, 8009b5a <_svfprintf_r+0x902>
 8009b56:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8009b5a:	9b06      	ldr	r3, [sp, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 82f7 	beq.w	800a150 <_svfprintf_r+0xef8>
 8009b62:	2600      	movs	r6, #0
 8009b64:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009b68:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8009b6c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8009b70:	9708      	str	r7, [sp, #32]
 8009b72:	e4e3      	b.n	800953c <_svfprintf_r+0x2e4>
 8009b74:	4606      	mov	r6, r0
 8009b76:	e538      	b.n	80095ea <_svfprintf_r+0x392>
 8009b78:	2310      	movs	r3, #16
 8009b7a:	6063      	str	r3, [r4, #4]
 8009b7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b7e:	3310      	adds	r3, #16
 8009b80:	9323      	str	r3, [sp, #140]	; 0x8c
 8009b82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b84:	3301      	adds	r3, #1
 8009b86:	2b07      	cmp	r3, #7
 8009b88:	9322      	str	r3, [sp, #136]	; 0x88
 8009b8a:	dc04      	bgt.n	8009b96 <_svfprintf_r+0x93e>
 8009b8c:	3408      	adds	r4, #8
 8009b8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b90:	3b10      	subs	r3, #16
 8009b92:	9310      	str	r3, [sp, #64]	; 0x40
 8009b94:	e611      	b.n	80097ba <_svfprintf_r+0x562>
 8009b96:	aa21      	add	r2, sp, #132	; 0x84
 8009b98:	4649      	mov	r1, r9
 8009b9a:	4650      	mov	r0, sl
 8009b9c:	f002 f858 	bl	800bc50 <__ssprint_r>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	f040 82b6 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009ba6:	ac2e      	add	r4, sp, #184	; 0xb8
 8009ba8:	e7f1      	b.n	8009b8e <_svfprintf_r+0x936>
 8009baa:	aa21      	add	r2, sp, #132	; 0x84
 8009bac:	4649      	mov	r1, r9
 8009bae:	4650      	mov	r0, sl
 8009bb0:	f002 f84e 	bl	800bc50 <__ssprint_r>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	f040 82ac 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009bba:	ac2e      	add	r4, sp, #184	; 0xb8
 8009bbc:	e610      	b.n	80097e0 <_svfprintf_r+0x588>
 8009bbe:	aa21      	add	r2, sp, #132	; 0x84
 8009bc0:	4649      	mov	r1, r9
 8009bc2:	4650      	mov	r0, sl
 8009bc4:	f002 f844 	bl	800bc50 <__ssprint_r>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	f040 82a2 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009bce:	ac2e      	add	r4, sp, #184	; 0xb8
 8009bd0:	e618      	b.n	8009804 <_svfprintf_r+0x5ac>
 8009bd2:	aa21      	add	r2, sp, #132	; 0x84
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	f002 f83a 	bl	800bc50 <__ssprint_r>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	f040 8298 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009be2:	ac2e      	add	r4, sp, #184	; 0xb8
 8009be4:	e61e      	b.n	8009824 <_svfprintf_r+0x5cc>
 8009be6:	2310      	movs	r3, #16
 8009be8:	6063      	str	r3, [r4, #4]
 8009bea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bec:	3310      	adds	r3, #16
 8009bee:	9323      	str	r3, [sp, #140]	; 0x8c
 8009bf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	2b07      	cmp	r3, #7
 8009bf6:	9322      	str	r3, [sp, #136]	; 0x88
 8009bf8:	dc04      	bgt.n	8009c04 <_svfprintf_r+0x9ac>
 8009bfa:	3408      	adds	r4, #8
 8009bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bfe:	3b10      	subs	r3, #16
 8009c00:	9310      	str	r3, [sp, #64]	; 0x40
 8009c02:	e618      	b.n	8009836 <_svfprintf_r+0x5de>
 8009c04:	aa21      	add	r2, sp, #132	; 0x84
 8009c06:	4649      	mov	r1, r9
 8009c08:	4650      	mov	r0, sl
 8009c0a:	f002 f821 	bl	800bc50 <__ssprint_r>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f040 827f 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009c14:	ac2e      	add	r4, sp, #184	; 0xb8
 8009c16:	e7f1      	b.n	8009bfc <_svfprintf_r+0x9a4>
 8009c18:	aa21      	add	r2, sp, #132	; 0x84
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	4650      	mov	r0, sl
 8009c1e:	f002 f817 	bl	800bc50 <__ssprint_r>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	f040 8275 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009c28:	ac2e      	add	r4, sp, #184	; 0xb8
 8009c2a:	e617      	b.n	800985c <_svfprintf_r+0x604>
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	6063      	str	r3, [r4, #4]
 8009c30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c32:	3310      	adds	r3, #16
 8009c34:	9323      	str	r3, [sp, #140]	; 0x8c
 8009c36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c38:	3301      	adds	r3, #1
 8009c3a:	2b07      	cmp	r3, #7
 8009c3c:	9322      	str	r3, [sp, #136]	; 0x88
 8009c3e:	dc02      	bgt.n	8009c46 <_svfprintf_r+0x9ee>
 8009c40:	3408      	adds	r4, #8
 8009c42:	3e10      	subs	r6, #16
 8009c44:	e60e      	b.n	8009864 <_svfprintf_r+0x60c>
 8009c46:	aa21      	add	r2, sp, #132	; 0x84
 8009c48:	4649      	mov	r1, r9
 8009c4a:	4650      	mov	r0, sl
 8009c4c:	f002 f800 	bl	800bc50 <__ssprint_r>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	f040 825e 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009c56:	ac2e      	add	r4, sp, #184	; 0xb8
 8009c58:	e7f3      	b.n	8009c42 <_svfprintf_r+0x9ea>
 8009c5a:	aa21      	add	r2, sp, #132	; 0x84
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	4650      	mov	r0, sl
 8009c60:	f001 fff6 	bl	800bc50 <__ssprint_r>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	f040 8254 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009c6a:	ac2e      	add	r4, sp, #184	; 0xb8
 8009c6c:	e60a      	b.n	8009884 <_svfprintf_r+0x62c>
 8009c6e:	9b06      	ldr	r3, [sp, #24]
 8009c70:	2b65      	cmp	r3, #101	; 0x65
 8009c72:	f340 81a9 	ble.w	8009fc8 <_svfprintf_r+0xd70>
 8009c76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009c7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009c7e:	f7f6 fe8f 	bl	80009a0 <__aeabi_dcmpeq>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d062      	beq.n	8009d4c <_svfprintf_r+0xaf4>
 8009c86:	4b2f      	ldr	r3, [pc, #188]	; (8009d44 <_svfprintf_r+0xaec>)
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	6063      	str	r3, [r4, #4]
 8009c8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c90:	3301      	adds	r3, #1
 8009c92:	9323      	str	r3, [sp, #140]	; 0x8c
 8009c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c96:	3301      	adds	r3, #1
 8009c98:	2b07      	cmp	r3, #7
 8009c9a:	9322      	str	r3, [sp, #136]	; 0x88
 8009c9c:	dc25      	bgt.n	8009cea <_svfprintf_r+0xa92>
 8009c9e:	3408      	adds	r4, #8
 8009ca0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ca2:	9a07      	ldr	r2, [sp, #28]
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	db02      	blt.n	8009cae <_svfprintf_r+0xa56>
 8009ca8:	07ee      	lsls	r6, r5, #31
 8009caa:	f57f ae02 	bpl.w	80098b2 <_svfprintf_r+0x65a>
 8009cae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb6:	6063      	str	r3, [r4, #4]
 8009cb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009cba:	4413      	add	r3, r2
 8009cbc:	9323      	str	r3, [sp, #140]	; 0x8c
 8009cbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	2b07      	cmp	r3, #7
 8009cc4:	9322      	str	r3, [sp, #136]	; 0x88
 8009cc6:	dc1a      	bgt.n	8009cfe <_svfprintf_r+0xaa6>
 8009cc8:	3408      	adds	r4, #8
 8009cca:	9b07      	ldr	r3, [sp, #28]
 8009ccc:	1e5e      	subs	r6, r3, #1
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	f77f adef 	ble.w	80098b2 <_svfprintf_r+0x65a>
 8009cd4:	f04f 0810 	mov.w	r8, #16
 8009cd8:	4f1b      	ldr	r7, [pc, #108]	; (8009d48 <_svfprintf_r+0xaf0>)
 8009cda:	2e10      	cmp	r6, #16
 8009cdc:	6027      	str	r7, [r4, #0]
 8009cde:	dc18      	bgt.n	8009d12 <_svfprintf_r+0xaba>
 8009ce0:	6066      	str	r6, [r4, #4]
 8009ce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ce4:	441e      	add	r6, r3
 8009ce6:	9623      	str	r6, [sp, #140]	; 0x8c
 8009ce8:	e5d4      	b.n	8009894 <_svfprintf_r+0x63c>
 8009cea:	aa21      	add	r2, sp, #132	; 0x84
 8009cec:	4649      	mov	r1, r9
 8009cee:	4650      	mov	r0, sl
 8009cf0:	f001 ffae 	bl	800bc50 <__ssprint_r>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	f040 820c 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009cfa:	ac2e      	add	r4, sp, #184	; 0xb8
 8009cfc:	e7d0      	b.n	8009ca0 <_svfprintf_r+0xa48>
 8009cfe:	aa21      	add	r2, sp, #132	; 0x84
 8009d00:	4649      	mov	r1, r9
 8009d02:	4650      	mov	r0, sl
 8009d04:	f001 ffa4 	bl	800bc50 <__ssprint_r>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	f040 8202 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009d0e:	ac2e      	add	r4, sp, #184	; 0xb8
 8009d10:	e7db      	b.n	8009cca <_svfprintf_r+0xa72>
 8009d12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d14:	f8c4 8004 	str.w	r8, [r4, #4]
 8009d18:	3310      	adds	r3, #16
 8009d1a:	9323      	str	r3, [sp, #140]	; 0x8c
 8009d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d1e:	3301      	adds	r3, #1
 8009d20:	2b07      	cmp	r3, #7
 8009d22:	9322      	str	r3, [sp, #136]	; 0x88
 8009d24:	dc02      	bgt.n	8009d2c <_svfprintf_r+0xad4>
 8009d26:	3408      	adds	r4, #8
 8009d28:	3e10      	subs	r6, #16
 8009d2a:	e7d6      	b.n	8009cda <_svfprintf_r+0xa82>
 8009d2c:	aa21      	add	r2, sp, #132	; 0x84
 8009d2e:	4649      	mov	r1, r9
 8009d30:	4650      	mov	r0, sl
 8009d32:	f001 ff8d 	bl	800bc50 <__ssprint_r>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	f040 81eb 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009d3c:	ac2e      	add	r4, sp, #184	; 0xb8
 8009d3e:	e7f3      	b.n	8009d28 <_svfprintf_r+0xad0>
 8009d40:	08010541 	.word	0x08010541
 8009d44:	08010552 	.word	0x08010552
 8009d48:	08010564 	.word	0x08010564
 8009d4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	dc7a      	bgt.n	8009e48 <_svfprintf_r+0xbf0>
 8009d52:	4b9b      	ldr	r3, [pc, #620]	; (8009fc0 <_svfprintf_r+0xd68>)
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	2301      	movs	r3, #1
 8009d58:	6063      	str	r3, [r4, #4]
 8009d5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	9323      	str	r3, [sp, #140]	; 0x8c
 8009d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d62:	3301      	adds	r3, #1
 8009d64:	2b07      	cmp	r3, #7
 8009d66:	9322      	str	r3, [sp, #136]	; 0x88
 8009d68:	dc44      	bgt.n	8009df4 <_svfprintf_r+0xb9c>
 8009d6a:	3408      	adds	r4, #8
 8009d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d6e:	b923      	cbnz	r3, 8009d7a <_svfprintf_r+0xb22>
 8009d70:	9b07      	ldr	r3, [sp, #28]
 8009d72:	b913      	cbnz	r3, 8009d7a <_svfprintf_r+0xb22>
 8009d74:	07e8      	lsls	r0, r5, #31
 8009d76:	f57f ad9c 	bpl.w	80098b2 <_svfprintf_r+0x65a>
 8009d7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d7e:	6023      	str	r3, [r4, #0]
 8009d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d82:	6063      	str	r3, [r4, #4]
 8009d84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d86:	4413      	add	r3, r2
 8009d88:	9323      	str	r3, [sp, #140]	; 0x8c
 8009d8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	2b07      	cmp	r3, #7
 8009d90:	9322      	str	r3, [sp, #136]	; 0x88
 8009d92:	dc39      	bgt.n	8009e08 <_svfprintf_r+0xbb0>
 8009d94:	f104 0308 	add.w	r3, r4, #8
 8009d98:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009d9a:	2e00      	cmp	r6, #0
 8009d9c:	da19      	bge.n	8009dd2 <_svfprintf_r+0xb7a>
 8009d9e:	2410      	movs	r4, #16
 8009da0:	4f88      	ldr	r7, [pc, #544]	; (8009fc4 <_svfprintf_r+0xd6c>)
 8009da2:	4276      	negs	r6, r6
 8009da4:	2e10      	cmp	r6, #16
 8009da6:	601f      	str	r7, [r3, #0]
 8009da8:	dc38      	bgt.n	8009e1c <_svfprintf_r+0xbc4>
 8009daa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009dac:	605e      	str	r6, [r3, #4]
 8009dae:	4416      	add	r6, r2
 8009db0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009db2:	9623      	str	r6, [sp, #140]	; 0x8c
 8009db4:	3201      	adds	r2, #1
 8009db6:	2a07      	cmp	r2, #7
 8009db8:	f103 0308 	add.w	r3, r3, #8
 8009dbc:	9222      	str	r2, [sp, #136]	; 0x88
 8009dbe:	dd08      	ble.n	8009dd2 <_svfprintf_r+0xb7a>
 8009dc0:	aa21      	add	r2, sp, #132	; 0x84
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	f001 ff43 	bl	800bc50 <__ssprint_r>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	f040 81a1 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009dd0:	ab2e      	add	r3, sp, #184	; 0xb8
 8009dd2:	9a07      	ldr	r2, [sp, #28]
 8009dd4:	9907      	ldr	r1, [sp, #28]
 8009dd6:	605a      	str	r2, [r3, #4]
 8009dd8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009dda:	f8c3 8000 	str.w	r8, [r3]
 8009dde:	440a      	add	r2, r1
 8009de0:	9223      	str	r2, [sp, #140]	; 0x8c
 8009de2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009de4:	3201      	adds	r2, #1
 8009de6:	2a07      	cmp	r2, #7
 8009de8:	9222      	str	r2, [sp, #136]	; 0x88
 8009dea:	f73f ad59 	bgt.w	80098a0 <_svfprintf_r+0x648>
 8009dee:	f103 0408 	add.w	r4, r3, #8
 8009df2:	e55e      	b.n	80098b2 <_svfprintf_r+0x65a>
 8009df4:	aa21      	add	r2, sp, #132	; 0x84
 8009df6:	4649      	mov	r1, r9
 8009df8:	4650      	mov	r0, sl
 8009dfa:	f001 ff29 	bl	800bc50 <__ssprint_r>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f040 8187 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009e04:	ac2e      	add	r4, sp, #184	; 0xb8
 8009e06:	e7b1      	b.n	8009d6c <_svfprintf_r+0xb14>
 8009e08:	aa21      	add	r2, sp, #132	; 0x84
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	4650      	mov	r0, sl
 8009e0e:	f001 ff1f 	bl	800bc50 <__ssprint_r>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f040 817d 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009e18:	ab2e      	add	r3, sp, #184	; 0xb8
 8009e1a:	e7bd      	b.n	8009d98 <_svfprintf_r+0xb40>
 8009e1c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009e1e:	605c      	str	r4, [r3, #4]
 8009e20:	3210      	adds	r2, #16
 8009e22:	9223      	str	r2, [sp, #140]	; 0x8c
 8009e24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e26:	3201      	adds	r2, #1
 8009e28:	2a07      	cmp	r2, #7
 8009e2a:	9222      	str	r2, [sp, #136]	; 0x88
 8009e2c:	dc02      	bgt.n	8009e34 <_svfprintf_r+0xbdc>
 8009e2e:	3308      	adds	r3, #8
 8009e30:	3e10      	subs	r6, #16
 8009e32:	e7b7      	b.n	8009da4 <_svfprintf_r+0xb4c>
 8009e34:	aa21      	add	r2, sp, #132	; 0x84
 8009e36:	4649      	mov	r1, r9
 8009e38:	4650      	mov	r0, sl
 8009e3a:	f001 ff09 	bl	800bc50 <__ssprint_r>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f040 8167 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009e44:	ab2e      	add	r3, sp, #184	; 0xb8
 8009e46:	e7f3      	b.n	8009e30 <_svfprintf_r+0xbd8>
 8009e48:	9b07      	ldr	r3, [sp, #28]
 8009e4a:	42bb      	cmp	r3, r7
 8009e4c:	bfa8      	it	ge
 8009e4e:	463b      	movge	r3, r7
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	461e      	mov	r6, r3
 8009e54:	dd0b      	ble.n	8009e6e <_svfprintf_r+0xc16>
 8009e56:	6063      	str	r3, [r4, #4]
 8009e58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e5a:	f8c4 8000 	str.w	r8, [r4]
 8009e5e:	4433      	add	r3, r6
 8009e60:	9323      	str	r3, [sp, #140]	; 0x8c
 8009e62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e64:	3301      	adds	r3, #1
 8009e66:	2b07      	cmp	r3, #7
 8009e68:	9322      	str	r3, [sp, #136]	; 0x88
 8009e6a:	dc5f      	bgt.n	8009f2c <_svfprintf_r+0xcd4>
 8009e6c:	3408      	adds	r4, #8
 8009e6e:	2e00      	cmp	r6, #0
 8009e70:	bfb4      	ite	lt
 8009e72:	463e      	movlt	r6, r7
 8009e74:	1bbe      	subge	r6, r7, r6
 8009e76:	2e00      	cmp	r6, #0
 8009e78:	dd0f      	ble.n	8009e9a <_svfprintf_r+0xc42>
 8009e7a:	f8df b148 	ldr.w	fp, [pc, #328]	; 8009fc4 <_svfprintf_r+0xd6c>
 8009e7e:	2e10      	cmp	r6, #16
 8009e80:	f8c4 b000 	str.w	fp, [r4]
 8009e84:	dc5c      	bgt.n	8009f40 <_svfprintf_r+0xce8>
 8009e86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e88:	6066      	str	r6, [r4, #4]
 8009e8a:	441e      	add	r6, r3
 8009e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e8e:	9623      	str	r6, [sp, #140]	; 0x8c
 8009e90:	3301      	adds	r3, #1
 8009e92:	2b07      	cmp	r3, #7
 8009e94:	9322      	str	r3, [sp, #136]	; 0x88
 8009e96:	dc6a      	bgt.n	8009f6e <_svfprintf_r+0xd16>
 8009e98:	3408      	adds	r4, #8
 8009e9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e9c:	9a07      	ldr	r2, [sp, #28]
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	db01      	blt.n	8009ea6 <_svfprintf_r+0xc4e>
 8009ea2:	07e9      	lsls	r1, r5, #31
 8009ea4:	d50d      	bpl.n	8009ec2 <_svfprintf_r+0xc6a>
 8009ea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eaa:	6023      	str	r3, [r4, #0]
 8009eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eae:	6063      	str	r3, [r4, #4]
 8009eb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009eb2:	4413      	add	r3, r2
 8009eb4:	9323      	str	r3, [sp, #140]	; 0x8c
 8009eb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009eb8:	3301      	adds	r3, #1
 8009eba:	2b07      	cmp	r3, #7
 8009ebc:	9322      	str	r3, [sp, #136]	; 0x88
 8009ebe:	dc60      	bgt.n	8009f82 <_svfprintf_r+0xd2a>
 8009ec0:	3408      	adds	r4, #8
 8009ec2:	9b07      	ldr	r3, [sp, #28]
 8009ec4:	9a07      	ldr	r2, [sp, #28]
 8009ec6:	1bde      	subs	r6, r3, r7
 8009ec8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	429e      	cmp	r6, r3
 8009ece:	bfa8      	it	ge
 8009ed0:	461e      	movge	r6, r3
 8009ed2:	2e00      	cmp	r6, #0
 8009ed4:	dd0b      	ble.n	8009eee <_svfprintf_r+0xc96>
 8009ed6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ed8:	4447      	add	r7, r8
 8009eda:	4433      	add	r3, r6
 8009edc:	9323      	str	r3, [sp, #140]	; 0x8c
 8009ede:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ee0:	6027      	str	r7, [r4, #0]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	2b07      	cmp	r3, #7
 8009ee6:	6066      	str	r6, [r4, #4]
 8009ee8:	9322      	str	r3, [sp, #136]	; 0x88
 8009eea:	dc54      	bgt.n	8009f96 <_svfprintf_r+0xd3e>
 8009eec:	3408      	adds	r4, #8
 8009eee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ef0:	9a07      	ldr	r2, [sp, #28]
 8009ef2:	2e00      	cmp	r6, #0
 8009ef4:	eba2 0303 	sub.w	r3, r2, r3
 8009ef8:	bfb4      	ite	lt
 8009efa:	461e      	movlt	r6, r3
 8009efc:	1b9e      	subge	r6, r3, r6
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	f77f acd7 	ble.w	80098b2 <_svfprintf_r+0x65a>
 8009f04:	f04f 0810 	mov.w	r8, #16
 8009f08:	4f2e      	ldr	r7, [pc, #184]	; (8009fc4 <_svfprintf_r+0xd6c>)
 8009f0a:	2e10      	cmp	r6, #16
 8009f0c:	6027      	str	r7, [r4, #0]
 8009f0e:	f77f aee7 	ble.w	8009ce0 <_svfprintf_r+0xa88>
 8009f12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f14:	f8c4 8004 	str.w	r8, [r4, #4]
 8009f18:	3310      	adds	r3, #16
 8009f1a:	9323      	str	r3, [sp, #140]	; 0x8c
 8009f1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f1e:	3301      	adds	r3, #1
 8009f20:	2b07      	cmp	r3, #7
 8009f22:	9322      	str	r3, [sp, #136]	; 0x88
 8009f24:	dc41      	bgt.n	8009faa <_svfprintf_r+0xd52>
 8009f26:	3408      	adds	r4, #8
 8009f28:	3e10      	subs	r6, #16
 8009f2a:	e7ee      	b.n	8009f0a <_svfprintf_r+0xcb2>
 8009f2c:	aa21      	add	r2, sp, #132	; 0x84
 8009f2e:	4649      	mov	r1, r9
 8009f30:	4650      	mov	r0, sl
 8009f32:	f001 fe8d 	bl	800bc50 <__ssprint_r>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	f040 80eb 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009f3c:	ac2e      	add	r4, sp, #184	; 0xb8
 8009f3e:	e796      	b.n	8009e6e <_svfprintf_r+0xc16>
 8009f40:	2310      	movs	r3, #16
 8009f42:	6063      	str	r3, [r4, #4]
 8009f44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f46:	3310      	adds	r3, #16
 8009f48:	9323      	str	r3, [sp, #140]	; 0x8c
 8009f4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	2b07      	cmp	r3, #7
 8009f50:	9322      	str	r3, [sp, #136]	; 0x88
 8009f52:	dc02      	bgt.n	8009f5a <_svfprintf_r+0xd02>
 8009f54:	3408      	adds	r4, #8
 8009f56:	3e10      	subs	r6, #16
 8009f58:	e791      	b.n	8009e7e <_svfprintf_r+0xc26>
 8009f5a:	aa21      	add	r2, sp, #132	; 0x84
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	4650      	mov	r0, sl
 8009f60:	f001 fe76 	bl	800bc50 <__ssprint_r>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	f040 80d4 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009f6a:	ac2e      	add	r4, sp, #184	; 0xb8
 8009f6c:	e7f3      	b.n	8009f56 <_svfprintf_r+0xcfe>
 8009f6e:	aa21      	add	r2, sp, #132	; 0x84
 8009f70:	4649      	mov	r1, r9
 8009f72:	4650      	mov	r0, sl
 8009f74:	f001 fe6c 	bl	800bc50 <__ssprint_r>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	f040 80ca 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009f7e:	ac2e      	add	r4, sp, #184	; 0xb8
 8009f80:	e78b      	b.n	8009e9a <_svfprintf_r+0xc42>
 8009f82:	aa21      	add	r2, sp, #132	; 0x84
 8009f84:	4649      	mov	r1, r9
 8009f86:	4650      	mov	r0, sl
 8009f88:	f001 fe62 	bl	800bc50 <__ssprint_r>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	f040 80c0 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009f92:	ac2e      	add	r4, sp, #184	; 0xb8
 8009f94:	e795      	b.n	8009ec2 <_svfprintf_r+0xc6a>
 8009f96:	aa21      	add	r2, sp, #132	; 0x84
 8009f98:	4649      	mov	r1, r9
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	f001 fe58 	bl	800bc50 <__ssprint_r>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	f040 80b6 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009fa6:	ac2e      	add	r4, sp, #184	; 0xb8
 8009fa8:	e7a1      	b.n	8009eee <_svfprintf_r+0xc96>
 8009faa:	aa21      	add	r2, sp, #132	; 0x84
 8009fac:	4649      	mov	r1, r9
 8009fae:	4650      	mov	r0, sl
 8009fb0:	f001 fe4e 	bl	800bc50 <__ssprint_r>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	f040 80ac 	bne.w	800a112 <_svfprintf_r+0xeba>
 8009fba:	ac2e      	add	r4, sp, #184	; 0xb8
 8009fbc:	e7b4      	b.n	8009f28 <_svfprintf_r+0xcd0>
 8009fbe:	bf00      	nop
 8009fc0:	08010552 	.word	0x08010552
 8009fc4:	08010564 	.word	0x08010564
 8009fc8:	9b07      	ldr	r3, [sp, #28]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	dc01      	bgt.n	8009fd2 <_svfprintf_r+0xd7a>
 8009fce:	07ea      	lsls	r2, r5, #31
 8009fd0:	d576      	bpl.n	800a0c0 <_svfprintf_r+0xe68>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	6063      	str	r3, [r4, #4]
 8009fd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009fd8:	f8c4 8000 	str.w	r8, [r4]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	9323      	str	r3, [sp, #140]	; 0x8c
 8009fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	2b07      	cmp	r3, #7
 8009fe6:	9322      	str	r3, [sp, #136]	; 0x88
 8009fe8:	dc36      	bgt.n	800a058 <_svfprintf_r+0xe00>
 8009fea:	3408      	adds	r4, #8
 8009fec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff4:	6063      	str	r3, [r4, #4]
 8009ff6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ff8:	4413      	add	r3, r2
 8009ffa:	9323      	str	r3, [sp, #140]	; 0x8c
 8009ffc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ffe:	3301      	adds	r3, #1
 800a000:	2b07      	cmp	r3, #7
 800a002:	9322      	str	r3, [sp, #136]	; 0x88
 800a004:	dc31      	bgt.n	800a06a <_svfprintf_r+0xe12>
 800a006:	3408      	adds	r4, #8
 800a008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a00a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a00c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a00e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a010:	f7f6 fcc6 	bl	80009a0 <__aeabi_dcmpeq>
 800a014:	9b07      	ldr	r3, [sp, #28]
 800a016:	1e5e      	subs	r6, r3, #1
 800a018:	2800      	cmp	r0, #0
 800a01a:	d12f      	bne.n	800a07c <_svfprintf_r+0xe24>
 800a01c:	f108 0301 	add.w	r3, r8, #1
 800a020:	e884 0048 	stmia.w	r4, {r3, r6}
 800a024:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a026:	9a07      	ldr	r2, [sp, #28]
 800a028:	3b01      	subs	r3, #1
 800a02a:	4413      	add	r3, r2
 800a02c:	9323      	str	r3, [sp, #140]	; 0x8c
 800a02e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a030:	3301      	adds	r3, #1
 800a032:	2b07      	cmp	r3, #7
 800a034:	9322      	str	r3, [sp, #136]	; 0x88
 800a036:	dd4a      	ble.n	800a0ce <_svfprintf_r+0xe76>
 800a038:	aa21      	add	r2, sp, #132	; 0x84
 800a03a:	4649      	mov	r1, r9
 800a03c:	4650      	mov	r0, sl
 800a03e:	f001 fe07 	bl	800bc50 <__ssprint_r>
 800a042:	2800      	cmp	r0, #0
 800a044:	d165      	bne.n	800a112 <_svfprintf_r+0xeba>
 800a046:	ac2e      	add	r4, sp, #184	; 0xb8
 800a048:	ab1d      	add	r3, sp, #116	; 0x74
 800a04a:	6023      	str	r3, [r4, #0]
 800a04c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a04e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a050:	6063      	str	r3, [r4, #4]
 800a052:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a054:	4413      	add	r3, r2
 800a056:	e41c      	b.n	8009892 <_svfprintf_r+0x63a>
 800a058:	aa21      	add	r2, sp, #132	; 0x84
 800a05a:	4649      	mov	r1, r9
 800a05c:	4650      	mov	r0, sl
 800a05e:	f001 fdf7 	bl	800bc50 <__ssprint_r>
 800a062:	2800      	cmp	r0, #0
 800a064:	d155      	bne.n	800a112 <_svfprintf_r+0xeba>
 800a066:	ac2e      	add	r4, sp, #184	; 0xb8
 800a068:	e7c0      	b.n	8009fec <_svfprintf_r+0xd94>
 800a06a:	aa21      	add	r2, sp, #132	; 0x84
 800a06c:	4649      	mov	r1, r9
 800a06e:	4650      	mov	r0, sl
 800a070:	f001 fdee 	bl	800bc50 <__ssprint_r>
 800a074:	2800      	cmp	r0, #0
 800a076:	d14c      	bne.n	800a112 <_svfprintf_r+0xeba>
 800a078:	ac2e      	add	r4, sp, #184	; 0xb8
 800a07a:	e7c5      	b.n	800a008 <_svfprintf_r+0xdb0>
 800a07c:	2e00      	cmp	r6, #0
 800a07e:	dde3      	ble.n	800a048 <_svfprintf_r+0xdf0>
 800a080:	f04f 0810 	mov.w	r8, #16
 800a084:	4f58      	ldr	r7, [pc, #352]	; (800a1e8 <_svfprintf_r+0xf90>)
 800a086:	2e10      	cmp	r6, #16
 800a088:	6027      	str	r7, [r4, #0]
 800a08a:	dc04      	bgt.n	800a096 <_svfprintf_r+0xe3e>
 800a08c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a08e:	6066      	str	r6, [r4, #4]
 800a090:	441e      	add	r6, r3
 800a092:	9623      	str	r6, [sp, #140]	; 0x8c
 800a094:	e7cb      	b.n	800a02e <_svfprintf_r+0xdd6>
 800a096:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a098:	f8c4 8004 	str.w	r8, [r4, #4]
 800a09c:	3310      	adds	r3, #16
 800a09e:	9323      	str	r3, [sp, #140]	; 0x8c
 800a0a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	2b07      	cmp	r3, #7
 800a0a6:	9322      	str	r3, [sp, #136]	; 0x88
 800a0a8:	dc02      	bgt.n	800a0b0 <_svfprintf_r+0xe58>
 800a0aa:	3408      	adds	r4, #8
 800a0ac:	3e10      	subs	r6, #16
 800a0ae:	e7ea      	b.n	800a086 <_svfprintf_r+0xe2e>
 800a0b0:	aa21      	add	r2, sp, #132	; 0x84
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	4650      	mov	r0, sl
 800a0b6:	f001 fdcb 	bl	800bc50 <__ssprint_r>
 800a0ba:	bb50      	cbnz	r0, 800a112 <_svfprintf_r+0xeba>
 800a0bc:	ac2e      	add	r4, sp, #184	; 0xb8
 800a0be:	e7f5      	b.n	800a0ac <_svfprintf_r+0xe54>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	6063      	str	r3, [r4, #4]
 800a0c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0c6:	f8c4 8000 	str.w	r8, [r4]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	e7ae      	b.n	800a02c <_svfprintf_r+0xdd4>
 800a0ce:	3408      	adds	r4, #8
 800a0d0:	e7ba      	b.n	800a048 <_svfprintf_r+0xdf0>
 800a0d2:	3408      	adds	r4, #8
 800a0d4:	f7ff bbed 	b.w	80098b2 <_svfprintf_r+0x65a>
 800a0d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0dc:	1a9d      	subs	r5, r3, r2
 800a0de:	2d00      	cmp	r5, #0
 800a0e0:	f77f abea 	ble.w	80098b8 <_svfprintf_r+0x660>
 800a0e4:	2610      	movs	r6, #16
 800a0e6:	4b41      	ldr	r3, [pc, #260]	; (800a1ec <_svfprintf_r+0xf94>)
 800a0e8:	2d10      	cmp	r5, #16
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	dc1b      	bgt.n	800a126 <_svfprintf_r+0xece>
 800a0ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0f0:	6065      	str	r5, [r4, #4]
 800a0f2:	441d      	add	r5, r3
 800a0f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0f6:	9523      	str	r5, [sp, #140]	; 0x8c
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	2b07      	cmp	r3, #7
 800a0fc:	9322      	str	r3, [sp, #136]	; 0x88
 800a0fe:	f77f abdb 	ble.w	80098b8 <_svfprintf_r+0x660>
 800a102:	aa21      	add	r2, sp, #132	; 0x84
 800a104:	4649      	mov	r1, r9
 800a106:	4650      	mov	r0, sl
 800a108:	f001 fda2 	bl	800bc50 <__ssprint_r>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	f43f abd3 	beq.w	80098b8 <_svfprintf_r+0x660>
 800a112:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a116:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a11c:	bf18      	it	ne
 800a11e:	f04f 33ff 	movne.w	r3, #4294967295
 800a122:	f7ff b8bd 	b.w	80092a0 <_svfprintf_r+0x48>
 800a126:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a128:	6066      	str	r6, [r4, #4]
 800a12a:	3310      	adds	r3, #16
 800a12c:	9323      	str	r3, [sp, #140]	; 0x8c
 800a12e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a130:	3301      	adds	r3, #1
 800a132:	2b07      	cmp	r3, #7
 800a134:	9322      	str	r3, [sp, #136]	; 0x88
 800a136:	dc02      	bgt.n	800a13e <_svfprintf_r+0xee6>
 800a138:	3408      	adds	r4, #8
 800a13a:	3d10      	subs	r5, #16
 800a13c:	e7d3      	b.n	800a0e6 <_svfprintf_r+0xe8e>
 800a13e:	aa21      	add	r2, sp, #132	; 0x84
 800a140:	4649      	mov	r1, r9
 800a142:	4650      	mov	r0, sl
 800a144:	f001 fd84 	bl	800bc50 <__ssprint_r>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d1e2      	bne.n	800a112 <_svfprintf_r+0xeba>
 800a14c:	ac2e      	add	r4, sp, #184	; 0xb8
 800a14e:	e7f4      	b.n	800a13a <_svfprintf_r+0xee2>
 800a150:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a152:	2b00      	cmp	r3, #0
 800a154:	d0dd      	beq.n	800a112 <_svfprintf_r+0xeba>
 800a156:	aa21      	add	r2, sp, #132	; 0x84
 800a158:	4649      	mov	r1, r9
 800a15a:	4650      	mov	r0, sl
 800a15c:	f001 fd78 	bl	800bc50 <__ssprint_r>
 800a160:	e7d7      	b.n	800a112 <_svfprintf_r+0xeba>
 800a162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a166:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a168:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a16a:	f7f6 fc4b 	bl	8000a04 <__aeabi_dcmpun>
 800a16e:	2800      	cmp	r0, #0
 800a170:	f43f aa3d 	beq.w	80095ee <_svfprintf_r+0x396>
 800a174:	4b1e      	ldr	r3, [pc, #120]	; (800a1f0 <_svfprintf_r+0xf98>)
 800a176:	4a1f      	ldr	r2, [pc, #124]	; (800a1f4 <_svfprintf_r+0xf9c>)
 800a178:	f7ff ba2d 	b.w	80095d6 <_svfprintf_r+0x37e>
 800a17c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a17e:	eba3 0308 	sub.w	r3, r3, r8
 800a182:	9307      	str	r3, [sp, #28]
 800a184:	f7ff baaf 	b.w	80096e6 <_svfprintf_r+0x48e>
 800a188:	ea56 0207 	orrs.w	r2, r6, r7
 800a18c:	950f      	str	r5, [sp, #60]	; 0x3c
 800a18e:	f43f ac2b 	beq.w	80099e8 <_svfprintf_r+0x790>
 800a192:	2b01      	cmp	r3, #1
 800a194:	f43f ac9d 	beq.w	8009ad2 <_svfprintf_r+0x87a>
 800a198:	2b02      	cmp	r3, #2
 800a19a:	f43f acbd 	beq.w	8009b18 <_svfprintf_r+0x8c0>
 800a19e:	ab2e      	add	r3, sp, #184	; 0xb8
 800a1a0:	08f1      	lsrs	r1, r6, #3
 800a1a2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800a1a6:	08f8      	lsrs	r0, r7, #3
 800a1a8:	f006 0207 	and.w	r2, r6, #7
 800a1ac:	4607      	mov	r7, r0
 800a1ae:	460e      	mov	r6, r1
 800a1b0:	3230      	adds	r2, #48	; 0x30
 800a1b2:	ea56 0107 	orrs.w	r1, r6, r7
 800a1b6:	f103 38ff 	add.w	r8, r3, #4294967295
 800a1ba:	f803 2c01 	strb.w	r2, [r3, #-1]
 800a1be:	f47f ac86 	bne.w	8009ace <_svfprintf_r+0x876>
 800a1c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a1c4:	07c9      	lsls	r1, r1, #31
 800a1c6:	d506      	bpl.n	800a1d6 <_svfprintf_r+0xf7e>
 800a1c8:	2a30      	cmp	r2, #48	; 0x30
 800a1ca:	d004      	beq.n	800a1d6 <_svfprintf_r+0xf7e>
 800a1cc:	2230      	movs	r2, #48	; 0x30
 800a1ce:	f808 2c01 	strb.w	r2, [r8, #-1]
 800a1d2:	f1a3 0802 	sub.w	r8, r3, #2
 800a1d6:	ab2e      	add	r3, sp, #184	; 0xb8
 800a1d8:	465e      	mov	r6, fp
 800a1da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a1dc:	eba3 0b08 	sub.w	fp, r3, r8
 800a1e0:	2700      	movs	r7, #0
 800a1e2:	f7ff bace 	b.w	8009782 <_svfprintf_r+0x52a>
 800a1e6:	bf00      	nop
 800a1e8:	08010564 	.word	0x08010564
 800a1ec:	08010554 	.word	0x08010554
 800a1f0:	08010528 	.word	0x08010528
 800a1f4:	0801052c 	.word	0x0801052c

0800a1f8 <__ascii_wctomb>:
 800a1f8:	b149      	cbz	r1, 800a20e <__ascii_wctomb+0x16>
 800a1fa:	2aff      	cmp	r2, #255	; 0xff
 800a1fc:	bf8b      	itete	hi
 800a1fe:	238a      	movhi	r3, #138	; 0x8a
 800a200:	700a      	strbls	r2, [r1, #0]
 800a202:	6003      	strhi	r3, [r0, #0]
 800a204:	2001      	movls	r0, #1
 800a206:	bf88      	it	hi
 800a208:	f04f 30ff 	movhi.w	r0, #4294967295
 800a20c:	4770      	bx	lr
 800a20e:	4608      	mov	r0, r1
 800a210:	4770      	bx	lr

0800a212 <quorem>:
 800a212:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a216:	6903      	ldr	r3, [r0, #16]
 800a218:	690c      	ldr	r4, [r1, #16]
 800a21a:	4680      	mov	r8, r0
 800a21c:	429c      	cmp	r4, r3
 800a21e:	f300 8082 	bgt.w	800a326 <quorem+0x114>
 800a222:	3c01      	subs	r4, #1
 800a224:	f101 0714 	add.w	r7, r1, #20
 800a228:	f100 0614 	add.w	r6, r0, #20
 800a22c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a230:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a234:	3501      	adds	r5, #1
 800a236:	fbb0 f5f5 	udiv	r5, r0, r5
 800a23a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800a23e:	eb06 030e 	add.w	r3, r6, lr
 800a242:	eb07 090e 	add.w	r9, r7, lr
 800a246:	9301      	str	r3, [sp, #4]
 800a248:	b38d      	cbz	r5, 800a2ae <quorem+0x9c>
 800a24a:	f04f 0a00 	mov.w	sl, #0
 800a24e:	4638      	mov	r0, r7
 800a250:	46b4      	mov	ip, r6
 800a252:	46d3      	mov	fp, sl
 800a254:	f850 2b04 	ldr.w	r2, [r0], #4
 800a258:	b293      	uxth	r3, r2
 800a25a:	fb05 a303 	mla	r3, r5, r3, sl
 800a25e:	0c12      	lsrs	r2, r2, #16
 800a260:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a264:	fb05 a202 	mla	r2, r5, r2, sl
 800a268:	b29b      	uxth	r3, r3
 800a26a:	ebab 0303 	sub.w	r3, fp, r3
 800a26e:	f8bc b000 	ldrh.w	fp, [ip]
 800a272:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a276:	445b      	add	r3, fp
 800a278:	fa1f fb82 	uxth.w	fp, r2
 800a27c:	f8dc 2000 	ldr.w	r2, [ip]
 800a280:	4581      	cmp	r9, r0
 800a282:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a286:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a290:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a294:	f84c 3b04 	str.w	r3, [ip], #4
 800a298:	d2dc      	bcs.n	800a254 <quorem+0x42>
 800a29a:	f856 300e 	ldr.w	r3, [r6, lr]
 800a29e:	b933      	cbnz	r3, 800a2ae <quorem+0x9c>
 800a2a0:	9b01      	ldr	r3, [sp, #4]
 800a2a2:	3b04      	subs	r3, #4
 800a2a4:	429e      	cmp	r6, r3
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	d331      	bcc.n	800a30e <quorem+0xfc>
 800a2aa:	f8c8 4010 	str.w	r4, [r8, #16]
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	f001 fa73 	bl	800b79a <__mcmp>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	db26      	blt.n	800a306 <quorem+0xf4>
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f04f 0e00 	mov.w	lr, #0
 800a2be:	3501      	adds	r5, #1
 800a2c0:	f857 1b04 	ldr.w	r1, [r7], #4
 800a2c4:	f8d0 c000 	ldr.w	ip, [r0]
 800a2c8:	b28b      	uxth	r3, r1
 800a2ca:	ebae 0303 	sub.w	r3, lr, r3
 800a2ce:	fa1f f28c 	uxth.w	r2, ip
 800a2d2:	4413      	add	r3, r2
 800a2d4:	0c0a      	lsrs	r2, r1, #16
 800a2d6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a2da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2e4:	45b9      	cmp	r9, r7
 800a2e6:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a2ea:	f840 3b04 	str.w	r3, [r0], #4
 800a2ee:	d2e7      	bcs.n	800a2c0 <quorem+0xae>
 800a2f0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a2f4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a2f8:	b92a      	cbnz	r2, 800a306 <quorem+0xf4>
 800a2fa:	3b04      	subs	r3, #4
 800a2fc:	429e      	cmp	r6, r3
 800a2fe:	461a      	mov	r2, r3
 800a300:	d30b      	bcc.n	800a31a <quorem+0x108>
 800a302:	f8c8 4010 	str.w	r4, [r8, #16]
 800a306:	4628      	mov	r0, r5
 800a308:	b003      	add	sp, #12
 800a30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30e:	6812      	ldr	r2, [r2, #0]
 800a310:	3b04      	subs	r3, #4
 800a312:	2a00      	cmp	r2, #0
 800a314:	d1c9      	bne.n	800a2aa <quorem+0x98>
 800a316:	3c01      	subs	r4, #1
 800a318:	e7c4      	b.n	800a2a4 <quorem+0x92>
 800a31a:	6812      	ldr	r2, [r2, #0]
 800a31c:	3b04      	subs	r3, #4
 800a31e:	2a00      	cmp	r2, #0
 800a320:	d1ef      	bne.n	800a302 <quorem+0xf0>
 800a322:	3c01      	subs	r4, #1
 800a324:	e7ea      	b.n	800a2fc <quorem+0xea>
 800a326:	2000      	movs	r0, #0
 800a328:	e7ee      	b.n	800a308 <quorem+0xf6>
 800a32a:	0000      	movs	r0, r0
 800a32c:	0000      	movs	r0, r0
	...

0800a330 <_dtoa_r>:
 800a330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a334:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a336:	b095      	sub	sp, #84	; 0x54
 800a338:	4604      	mov	r4, r0
 800a33a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800a33c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a340:	b93e      	cbnz	r6, 800a352 <_dtoa_r+0x22>
 800a342:	2010      	movs	r0, #16
 800a344:	f000 fdd8 	bl	800aef8 <malloc>
 800a348:	6260      	str	r0, [r4, #36]	; 0x24
 800a34a:	6046      	str	r6, [r0, #4]
 800a34c:	6086      	str	r6, [r0, #8]
 800a34e:	6006      	str	r6, [r0, #0]
 800a350:	60c6      	str	r6, [r0, #12]
 800a352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a354:	6819      	ldr	r1, [r3, #0]
 800a356:	b151      	cbz	r1, 800a36e <_dtoa_r+0x3e>
 800a358:	685a      	ldr	r2, [r3, #4]
 800a35a:	2301      	movs	r3, #1
 800a35c:	4093      	lsls	r3, r2
 800a35e:	604a      	str	r2, [r1, #4]
 800a360:	608b      	str	r3, [r1, #8]
 800a362:	4620      	mov	r0, r4
 800a364:	f001 f844 	bl	800b3f0 <_Bfree>
 800a368:	2200      	movs	r2, #0
 800a36a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a36c:	601a      	str	r2, [r3, #0]
 800a36e:	9b03      	ldr	r3, [sp, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	bfb7      	itett	lt
 800a374:	2301      	movlt	r3, #1
 800a376:	2300      	movge	r3, #0
 800a378:	602b      	strlt	r3, [r5, #0]
 800a37a:	9b03      	ldrlt	r3, [sp, #12]
 800a37c:	bfae      	itee	ge
 800a37e:	602b      	strge	r3, [r5, #0]
 800a380:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a384:	9303      	strlt	r3, [sp, #12]
 800a386:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a38a:	4bab      	ldr	r3, [pc, #684]	; (800a638 <_dtoa_r+0x308>)
 800a38c:	ea33 0309 	bics.w	r3, r3, r9
 800a390:	d11b      	bne.n	800a3ca <_dtoa_r+0x9a>
 800a392:	f242 730f 	movw	r3, #9999	; 0x270f
 800a396:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	9b02      	ldr	r3, [sp, #8]
 800a39c:	b923      	cbnz	r3, 800a3a8 <_dtoa_r+0x78>
 800a39e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	f000 8583 	beq.w	800aeae <_dtoa_r+0xb7e>
 800a3a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3aa:	b953      	cbnz	r3, 800a3c2 <_dtoa_r+0x92>
 800a3ac:	4ba3      	ldr	r3, [pc, #652]	; (800a63c <_dtoa_r+0x30c>)
 800a3ae:	e021      	b.n	800a3f4 <_dtoa_r+0xc4>
 800a3b0:	4ba3      	ldr	r3, [pc, #652]	; (800a640 <_dtoa_r+0x310>)
 800a3b2:	9306      	str	r3, [sp, #24]
 800a3b4:	3308      	adds	r3, #8
 800a3b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a3b8:	6013      	str	r3, [r2, #0]
 800a3ba:	9806      	ldr	r0, [sp, #24]
 800a3bc:	b015      	add	sp, #84	; 0x54
 800a3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c2:	4b9e      	ldr	r3, [pc, #632]	; (800a63c <_dtoa_r+0x30c>)
 800a3c4:	9306      	str	r3, [sp, #24]
 800a3c6:	3303      	adds	r3, #3
 800a3c8:	e7f5      	b.n	800a3b6 <_dtoa_r+0x86>
 800a3ca:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	f7f6 fae3 	bl	80009a0 <__aeabi_dcmpeq>
 800a3da:	4680      	mov	r8, r0
 800a3dc:	b160      	cbz	r0, 800a3f8 <_dtoa_r+0xc8>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f000 855e 	beq.w	800aea8 <_dtoa_r+0xb78>
 800a3ec:	4b95      	ldr	r3, [pc, #596]	; (800a644 <_dtoa_r+0x314>)
 800a3ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	9306      	str	r3, [sp, #24]
 800a3f6:	e7e0      	b.n	800a3ba <_dtoa_r+0x8a>
 800a3f8:	ab12      	add	r3, sp, #72	; 0x48
 800a3fa:	9301      	str	r3, [sp, #4]
 800a3fc:	ab13      	add	r3, sp, #76	; 0x4c
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	4632      	mov	r2, r6
 800a402:	463b      	mov	r3, r7
 800a404:	4620      	mov	r0, r4
 800a406:	f001 fa41 	bl	800b88c <__d2b>
 800a40a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a40e:	4682      	mov	sl, r0
 800a410:	2d00      	cmp	r5, #0
 800a412:	d07d      	beq.n	800a510 <_dtoa_r+0x1e0>
 800a414:	4630      	mov	r0, r6
 800a416:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a41a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a41e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a422:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a426:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a42a:	2200      	movs	r2, #0
 800a42c:	4b86      	ldr	r3, [pc, #536]	; (800a648 <_dtoa_r+0x318>)
 800a42e:	f7f5 fe9b 	bl	8000168 <__aeabi_dsub>
 800a432:	a37b      	add	r3, pc, #492	; (adr r3, 800a620 <_dtoa_r+0x2f0>)
 800a434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a438:	f7f6 f84a 	bl	80004d0 <__aeabi_dmul>
 800a43c:	a37a      	add	r3, pc, #488	; (adr r3, 800a628 <_dtoa_r+0x2f8>)
 800a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a442:	f7f5 fe93 	bl	800016c <__adddf3>
 800a446:	4606      	mov	r6, r0
 800a448:	4628      	mov	r0, r5
 800a44a:	460f      	mov	r7, r1
 800a44c:	f7f5 ffda 	bl	8000404 <__aeabi_i2d>
 800a450:	a377      	add	r3, pc, #476	; (adr r3, 800a630 <_dtoa_r+0x300>)
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	f7f6 f83b 	bl	80004d0 <__aeabi_dmul>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	4630      	mov	r0, r6
 800a460:	4639      	mov	r1, r7
 800a462:	f7f5 fe83 	bl	800016c <__adddf3>
 800a466:	4606      	mov	r6, r0
 800a468:	460f      	mov	r7, r1
 800a46a:	f7f6 fae1 	bl	8000a30 <__aeabi_d2iz>
 800a46e:	2200      	movs	r2, #0
 800a470:	4683      	mov	fp, r0
 800a472:	2300      	movs	r3, #0
 800a474:	4630      	mov	r0, r6
 800a476:	4639      	mov	r1, r7
 800a478:	f7f6 fa9c 	bl	80009b4 <__aeabi_dcmplt>
 800a47c:	b158      	cbz	r0, 800a496 <_dtoa_r+0x166>
 800a47e:	4658      	mov	r0, fp
 800a480:	f7f5 ffc0 	bl	8000404 <__aeabi_i2d>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4630      	mov	r0, r6
 800a48a:	4639      	mov	r1, r7
 800a48c:	f7f6 fa88 	bl	80009a0 <__aeabi_dcmpeq>
 800a490:	b908      	cbnz	r0, 800a496 <_dtoa_r+0x166>
 800a492:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a496:	f1bb 0f16 	cmp.w	fp, #22
 800a49a:	d858      	bhi.n	800a54e <_dtoa_r+0x21e>
 800a49c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4a0:	496a      	ldr	r1, [pc, #424]	; (800a64c <_dtoa_r+0x31c>)
 800a4a2:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a4a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4aa:	f7f6 faa1 	bl	80009f0 <__aeabi_dcmpgt>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d04f      	beq.n	800a552 <_dtoa_r+0x222>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4b8:	930d      	str	r3, [sp, #52]	; 0x34
 800a4ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4bc:	1b5d      	subs	r5, r3, r5
 800a4be:	1e6b      	subs	r3, r5, #1
 800a4c0:	9307      	str	r3, [sp, #28]
 800a4c2:	bf43      	ittte	mi
 800a4c4:	2300      	movmi	r3, #0
 800a4c6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a4ca:	9307      	strmi	r3, [sp, #28]
 800a4cc:	f04f 0800 	movpl.w	r8, #0
 800a4d0:	f1bb 0f00 	cmp.w	fp, #0
 800a4d4:	db3f      	blt.n	800a556 <_dtoa_r+0x226>
 800a4d6:	9b07      	ldr	r3, [sp, #28]
 800a4d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800a4dc:	445b      	add	r3, fp
 800a4de:	9307      	str	r3, [sp, #28]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	9308      	str	r3, [sp, #32]
 800a4e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4e6:	2b09      	cmp	r3, #9
 800a4e8:	f200 80b4 	bhi.w	800a654 <_dtoa_r+0x324>
 800a4ec:	2b05      	cmp	r3, #5
 800a4ee:	bfc4      	itt	gt
 800a4f0:	3b04      	subgt	r3, #4
 800a4f2:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a4f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4f6:	bfc8      	it	gt
 800a4f8:	2600      	movgt	r6, #0
 800a4fa:	f1a3 0302 	sub.w	r3, r3, #2
 800a4fe:	bfd8      	it	le
 800a500:	2601      	movle	r6, #1
 800a502:	2b03      	cmp	r3, #3
 800a504:	f200 80b2 	bhi.w	800a66c <_dtoa_r+0x33c>
 800a508:	e8df f003 	tbb	[pc, r3]
 800a50c:	782d8684 	.word	0x782d8684
 800a510:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a512:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800a514:	441d      	add	r5, r3
 800a516:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a51a:	2b20      	cmp	r3, #32
 800a51c:	dd11      	ble.n	800a542 <_dtoa_r+0x212>
 800a51e:	9a02      	ldr	r2, [sp, #8]
 800a520:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a524:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800a528:	fa22 f000 	lsr.w	r0, r2, r0
 800a52c:	fa09 f303 	lsl.w	r3, r9, r3
 800a530:	4318      	orrs	r0, r3
 800a532:	f7f5 ff57 	bl	80003e4 <__aeabi_ui2d>
 800a536:	2301      	movs	r3, #1
 800a538:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a53c:	3d01      	subs	r5, #1
 800a53e:	9310      	str	r3, [sp, #64]	; 0x40
 800a540:	e773      	b.n	800a42a <_dtoa_r+0xfa>
 800a542:	f1c3 0020 	rsb	r0, r3, #32
 800a546:	9b02      	ldr	r3, [sp, #8]
 800a548:	fa03 f000 	lsl.w	r0, r3, r0
 800a54c:	e7f1      	b.n	800a532 <_dtoa_r+0x202>
 800a54e:	2301      	movs	r3, #1
 800a550:	e7b2      	b.n	800a4b8 <_dtoa_r+0x188>
 800a552:	900d      	str	r0, [sp, #52]	; 0x34
 800a554:	e7b1      	b.n	800a4ba <_dtoa_r+0x18a>
 800a556:	f1cb 0300 	rsb	r3, fp, #0
 800a55a:	9308      	str	r3, [sp, #32]
 800a55c:	2300      	movs	r3, #0
 800a55e:	eba8 080b 	sub.w	r8, r8, fp
 800a562:	930c      	str	r3, [sp, #48]	; 0x30
 800a564:	e7be      	b.n	800a4e4 <_dtoa_r+0x1b4>
 800a566:	2301      	movs	r3, #1
 800a568:	9309      	str	r3, [sp, #36]	; 0x24
 800a56a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f340 8080 	ble.w	800a672 <_dtoa_r+0x342>
 800a572:	4699      	mov	r9, r3
 800a574:	9304      	str	r3, [sp, #16]
 800a576:	2200      	movs	r2, #0
 800a578:	2104      	movs	r1, #4
 800a57a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a57c:	606a      	str	r2, [r5, #4]
 800a57e:	f101 0214 	add.w	r2, r1, #20
 800a582:	429a      	cmp	r2, r3
 800a584:	d97a      	bls.n	800a67c <_dtoa_r+0x34c>
 800a586:	6869      	ldr	r1, [r5, #4]
 800a588:	4620      	mov	r0, r4
 800a58a:	f000 fefd 	bl	800b388 <_Balloc>
 800a58e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a590:	6028      	str	r0, [r5, #0]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f1b9 0f0e 	cmp.w	r9, #14
 800a598:	9306      	str	r3, [sp, #24]
 800a59a:	f200 80f0 	bhi.w	800a77e <_dtoa_r+0x44e>
 800a59e:	2e00      	cmp	r6, #0
 800a5a0:	f000 80ed 	beq.w	800a77e <_dtoa_r+0x44e>
 800a5a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5a8:	f1bb 0f00 	cmp.w	fp, #0
 800a5ac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a5b0:	dd79      	ble.n	800a6a6 <_dtoa_r+0x376>
 800a5b2:	4a26      	ldr	r2, [pc, #152]	; (800a64c <_dtoa_r+0x31c>)
 800a5b4:	f00b 030f 	and.w	r3, fp, #15
 800a5b8:	ea4f 162b 	mov.w	r6, fp, asr #4
 800a5bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5c0:	06f0      	lsls	r0, r6, #27
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a5ca:	d55c      	bpl.n	800a686 <_dtoa_r+0x356>
 800a5cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a5d0:	4b1f      	ldr	r3, [pc, #124]	; (800a650 <_dtoa_r+0x320>)
 800a5d2:	2503      	movs	r5, #3
 800a5d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5d8:	f7f6 f8a4 	bl	8000724 <__aeabi_ddiv>
 800a5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e0:	f006 060f 	and.w	r6, r6, #15
 800a5e4:	4f1a      	ldr	r7, [pc, #104]	; (800a650 <_dtoa_r+0x320>)
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	d14f      	bne.n	800a68a <_dtoa_r+0x35a>
 800a5ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5f2:	f7f6 f897 	bl	8000724 <__aeabi_ddiv>
 800a5f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5fa:	e06e      	b.n	800a6da <_dtoa_r+0x3aa>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a600:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a602:	445b      	add	r3, fp
 800a604:	f103 0901 	add.w	r9, r3, #1
 800a608:	9304      	str	r3, [sp, #16]
 800a60a:	464b      	mov	r3, r9
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	bfb8      	it	lt
 800a610:	2301      	movlt	r3, #1
 800a612:	e7b0      	b.n	800a576 <_dtoa_r+0x246>
 800a614:	2300      	movs	r3, #0
 800a616:	e7a7      	b.n	800a568 <_dtoa_r+0x238>
 800a618:	2300      	movs	r3, #0
 800a61a:	e7f0      	b.n	800a5fe <_dtoa_r+0x2ce>
 800a61c:	f3af 8000 	nop.w
 800a620:	636f4361 	.word	0x636f4361
 800a624:	3fd287a7 	.word	0x3fd287a7
 800a628:	8b60c8b3 	.word	0x8b60c8b3
 800a62c:	3fc68a28 	.word	0x3fc68a28
 800a630:	509f79fb 	.word	0x509f79fb
 800a634:	3fd34413 	.word	0x3fd34413
 800a638:	7ff00000 	.word	0x7ff00000
 800a63c:	0801067e 	.word	0x0801067e
 800a640:	08010675 	.word	0x08010675
 800a644:	08010553 	.word	0x08010553
 800a648:	3ff80000 	.word	0x3ff80000
 800a64c:	08010710 	.word	0x08010710
 800a650:	080106e8 	.word	0x080106e8
 800a654:	2601      	movs	r6, #1
 800a656:	2300      	movs	r3, #0
 800a658:	9609      	str	r6, [sp, #36]	; 0x24
 800a65a:	931e      	str	r3, [sp, #120]	; 0x78
 800a65c:	f04f 33ff 	mov.w	r3, #4294967295
 800a660:	2200      	movs	r2, #0
 800a662:	9304      	str	r3, [sp, #16]
 800a664:	4699      	mov	r9, r3
 800a666:	2312      	movs	r3, #18
 800a668:	921f      	str	r2, [sp, #124]	; 0x7c
 800a66a:	e784      	b.n	800a576 <_dtoa_r+0x246>
 800a66c:	2301      	movs	r3, #1
 800a66e:	9309      	str	r3, [sp, #36]	; 0x24
 800a670:	e7f4      	b.n	800a65c <_dtoa_r+0x32c>
 800a672:	2301      	movs	r3, #1
 800a674:	9304      	str	r3, [sp, #16]
 800a676:	4699      	mov	r9, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	e7f5      	b.n	800a668 <_dtoa_r+0x338>
 800a67c:	686a      	ldr	r2, [r5, #4]
 800a67e:	0049      	lsls	r1, r1, #1
 800a680:	3201      	adds	r2, #1
 800a682:	606a      	str	r2, [r5, #4]
 800a684:	e77b      	b.n	800a57e <_dtoa_r+0x24e>
 800a686:	2502      	movs	r5, #2
 800a688:	e7ac      	b.n	800a5e4 <_dtoa_r+0x2b4>
 800a68a:	07f1      	lsls	r1, r6, #31
 800a68c:	d508      	bpl.n	800a6a0 <_dtoa_r+0x370>
 800a68e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a692:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a696:	f7f5 ff1b 	bl	80004d0 <__aeabi_dmul>
 800a69a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a69e:	3501      	adds	r5, #1
 800a6a0:	1076      	asrs	r6, r6, #1
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	e79f      	b.n	800a5e6 <_dtoa_r+0x2b6>
 800a6a6:	f000 80a5 	beq.w	800a7f4 <_dtoa_r+0x4c4>
 800a6aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a6ae:	f1cb 0600 	rsb	r6, fp, #0
 800a6b2:	4ba2      	ldr	r3, [pc, #648]	; (800a93c <_dtoa_r+0x60c>)
 800a6b4:	f006 020f 	and.w	r2, r6, #15
 800a6b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f7f5 ff06 	bl	80004d0 <__aeabi_dmul>
 800a6c4:	2502      	movs	r5, #2
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6cc:	4f9c      	ldr	r7, [pc, #624]	; (800a940 <_dtoa_r+0x610>)
 800a6ce:	1136      	asrs	r6, r6, #4
 800a6d0:	2e00      	cmp	r6, #0
 800a6d2:	f040 8084 	bne.w	800a7de <_dtoa_r+0x4ae>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d18d      	bne.n	800a5f6 <_dtoa_r+0x2c6>
 800a6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f000 808b 	beq.w	800a7f8 <_dtoa_r+0x4c8>
 800a6e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a6ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	4b94      	ldr	r3, [pc, #592]	; (800a944 <_dtoa_r+0x614>)
 800a6f2:	f7f6 f95f 	bl	80009b4 <__aeabi_dcmplt>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d07e      	beq.n	800a7f8 <_dtoa_r+0x4c8>
 800a6fa:	f1b9 0f00 	cmp.w	r9, #0
 800a6fe:	d07b      	beq.n	800a7f8 <_dtoa_r+0x4c8>
 800a700:	9b04      	ldr	r3, [sp, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	dd37      	ble.n	800a776 <_dtoa_r+0x446>
 800a706:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a70a:	2200      	movs	r2, #0
 800a70c:	4b8e      	ldr	r3, [pc, #568]	; (800a948 <_dtoa_r+0x618>)
 800a70e:	f7f5 fedf 	bl	80004d0 <__aeabi_dmul>
 800a712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a716:	9e04      	ldr	r6, [sp, #16]
 800a718:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a71c:	3501      	adds	r5, #1
 800a71e:	4628      	mov	r0, r5
 800a720:	f7f5 fe70 	bl	8000404 <__aeabi_i2d>
 800a724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a728:	f7f5 fed2 	bl	80004d0 <__aeabi_dmul>
 800a72c:	4b87      	ldr	r3, [pc, #540]	; (800a94c <_dtoa_r+0x61c>)
 800a72e:	2200      	movs	r2, #0
 800a730:	f7f5 fd1c 	bl	800016c <__adddf3>
 800a734:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a73a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 800a73e:	950b      	str	r5, [sp, #44]	; 0x2c
 800a740:	2e00      	cmp	r6, #0
 800a742:	d15c      	bne.n	800a7fe <_dtoa_r+0x4ce>
 800a744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a748:	2200      	movs	r2, #0
 800a74a:	4b81      	ldr	r3, [pc, #516]	; (800a950 <_dtoa_r+0x620>)
 800a74c:	f7f5 fd0c 	bl	8000168 <__aeabi_dsub>
 800a750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a752:	462b      	mov	r3, r5
 800a754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a758:	f7f6 f94a 	bl	80009f0 <__aeabi_dcmpgt>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	f040 82f7 	bne.w	800ad50 <_dtoa_r+0xa20>
 800a762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a768:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a76c:	f7f6 f922 	bl	80009b4 <__aeabi_dcmplt>
 800a770:	2800      	cmp	r0, #0
 800a772:	f040 82eb 	bne.w	800ad4c <_dtoa_r+0xa1c>
 800a776:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a77a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a77e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a780:	2b00      	cmp	r3, #0
 800a782:	f2c0 8150 	blt.w	800aa26 <_dtoa_r+0x6f6>
 800a786:	f1bb 0f0e 	cmp.w	fp, #14
 800a78a:	f300 814c 	bgt.w	800aa26 <_dtoa_r+0x6f6>
 800a78e:	4b6b      	ldr	r3, [pc, #428]	; (800a93c <_dtoa_r+0x60c>)
 800a790:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a79c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f280 80da 	bge.w	800a958 <_dtoa_r+0x628>
 800a7a4:	f1b9 0f00 	cmp.w	r9, #0
 800a7a8:	f300 80d6 	bgt.w	800a958 <_dtoa_r+0x628>
 800a7ac:	f040 82cd 	bne.w	800ad4a <_dtoa_r+0xa1a>
 800a7b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	4b66      	ldr	r3, [pc, #408]	; (800a950 <_dtoa_r+0x620>)
 800a7b8:	f7f5 fe8a 	bl	80004d0 <__aeabi_dmul>
 800a7bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7c0:	f7f6 f90c 	bl	80009dc <__aeabi_dcmpge>
 800a7c4:	464e      	mov	r6, r9
 800a7c6:	464f      	mov	r7, r9
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	f040 82a4 	bne.w	800ad16 <_dtoa_r+0x9e6>
 800a7ce:	9b06      	ldr	r3, [sp, #24]
 800a7d0:	9a06      	ldr	r2, [sp, #24]
 800a7d2:	1c5d      	adds	r5, r3, #1
 800a7d4:	2331      	movs	r3, #49	; 0x31
 800a7d6:	f10b 0b01 	add.w	fp, fp, #1
 800a7da:	7013      	strb	r3, [r2, #0]
 800a7dc:	e29f      	b.n	800ad1e <_dtoa_r+0x9ee>
 800a7de:	07f2      	lsls	r2, r6, #31
 800a7e0:	d505      	bpl.n	800a7ee <_dtoa_r+0x4be>
 800a7e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7e6:	f7f5 fe73 	bl	80004d0 <__aeabi_dmul>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	3501      	adds	r5, #1
 800a7ee:	1076      	asrs	r6, r6, #1
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	e76d      	b.n	800a6d0 <_dtoa_r+0x3a0>
 800a7f4:	2502      	movs	r5, #2
 800a7f6:	e770      	b.n	800a6da <_dtoa_r+0x3aa>
 800a7f8:	465f      	mov	r7, fp
 800a7fa:	464e      	mov	r6, r9
 800a7fc:	e78f      	b.n	800a71e <_dtoa_r+0x3ee>
 800a7fe:	9a06      	ldr	r2, [sp, #24]
 800a800:	4b4e      	ldr	r3, [pc, #312]	; (800a93c <_dtoa_r+0x60c>)
 800a802:	4432      	add	r2, r6
 800a804:	9211      	str	r2, [sp, #68]	; 0x44
 800a806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a808:	1e71      	subs	r1, r6, #1
 800a80a:	2a00      	cmp	r2, #0
 800a80c:	d048      	beq.n	800a8a0 <_dtoa_r+0x570>
 800a80e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	2000      	movs	r0, #0
 800a818:	494e      	ldr	r1, [pc, #312]	; (800a954 <_dtoa_r+0x624>)
 800a81a:	f7f5 ff83 	bl	8000724 <__aeabi_ddiv>
 800a81e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a822:	f7f5 fca1 	bl	8000168 <__aeabi_dsub>
 800a826:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a82a:	9d06      	ldr	r5, [sp, #24]
 800a82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a830:	f7f6 f8fe 	bl	8000a30 <__aeabi_d2iz>
 800a834:	4606      	mov	r6, r0
 800a836:	f7f5 fde5 	bl	8000404 <__aeabi_i2d>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a842:	f7f5 fc91 	bl	8000168 <__aeabi_dsub>
 800a846:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a84a:	3630      	adds	r6, #48	; 0x30
 800a84c:	f805 6b01 	strb.w	r6, [r5], #1
 800a850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a854:	f7f6 f8ae 	bl	80009b4 <__aeabi_dcmplt>
 800a858:	2800      	cmp	r0, #0
 800a85a:	d164      	bne.n	800a926 <_dtoa_r+0x5f6>
 800a85c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a860:	2000      	movs	r0, #0
 800a862:	4938      	ldr	r1, [pc, #224]	; (800a944 <_dtoa_r+0x614>)
 800a864:	f7f5 fc80 	bl	8000168 <__aeabi_dsub>
 800a868:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a86c:	f7f6 f8a2 	bl	80009b4 <__aeabi_dcmplt>
 800a870:	2800      	cmp	r0, #0
 800a872:	f040 80b9 	bne.w	800a9e8 <_dtoa_r+0x6b8>
 800a876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a878:	429d      	cmp	r5, r3
 800a87a:	f43f af7c 	beq.w	800a776 <_dtoa_r+0x446>
 800a87e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a882:	2200      	movs	r2, #0
 800a884:	4b30      	ldr	r3, [pc, #192]	; (800a948 <_dtoa_r+0x618>)
 800a886:	f7f5 fe23 	bl	80004d0 <__aeabi_dmul>
 800a88a:	2200      	movs	r2, #0
 800a88c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a894:	4b2c      	ldr	r3, [pc, #176]	; (800a948 <_dtoa_r+0x618>)
 800a896:	f7f5 fe1b 	bl	80004d0 <__aeabi_dmul>
 800a89a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a89e:	e7c5      	b.n	800a82c <_dtoa_r+0x4fc>
 800a8a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a8a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8ac:	f7f5 fe10 	bl	80004d0 <__aeabi_dmul>
 800a8b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a8b4:	9d06      	ldr	r5, [sp, #24]
 800a8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ba:	f7f6 f8b9 	bl	8000a30 <__aeabi_d2iz>
 800a8be:	4606      	mov	r6, r0
 800a8c0:	f7f5 fda0 	bl	8000404 <__aeabi_i2d>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8cc:	f7f5 fc4c 	bl	8000168 <__aeabi_dsub>
 800a8d0:	3630      	adds	r6, #48	; 0x30
 800a8d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8d4:	f805 6b01 	strb.w	r6, [r5], #1
 800a8d8:	42ab      	cmp	r3, r5
 800a8da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8de:	f04f 0200 	mov.w	r2, #0
 800a8e2:	d124      	bne.n	800a92e <_dtoa_r+0x5fe>
 800a8e4:	4b1b      	ldr	r3, [pc, #108]	; (800a954 <_dtoa_r+0x624>)
 800a8e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8ea:	f7f5 fc3f 	bl	800016c <__adddf3>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8f6:	f7f6 f87b 	bl	80009f0 <__aeabi_dcmpgt>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d174      	bne.n	800a9e8 <_dtoa_r+0x6b8>
 800a8fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a902:	2000      	movs	r0, #0
 800a904:	4913      	ldr	r1, [pc, #76]	; (800a954 <_dtoa_r+0x624>)
 800a906:	f7f5 fc2f 	bl	8000168 <__aeabi_dsub>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a912:	f7f6 f84f 	bl	80009b4 <__aeabi_dcmplt>
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f af2d 	beq.w	800a776 <_dtoa_r+0x446>
 800a91c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a920:	1e6a      	subs	r2, r5, #1
 800a922:	2b30      	cmp	r3, #48	; 0x30
 800a924:	d001      	beq.n	800a92a <_dtoa_r+0x5fa>
 800a926:	46bb      	mov	fp, r7
 800a928:	e04d      	b.n	800a9c6 <_dtoa_r+0x696>
 800a92a:	4615      	mov	r5, r2
 800a92c:	e7f6      	b.n	800a91c <_dtoa_r+0x5ec>
 800a92e:	4b06      	ldr	r3, [pc, #24]	; (800a948 <_dtoa_r+0x618>)
 800a930:	f7f5 fdce 	bl	80004d0 <__aeabi_dmul>
 800a934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a938:	e7bd      	b.n	800a8b6 <_dtoa_r+0x586>
 800a93a:	bf00      	nop
 800a93c:	08010710 	.word	0x08010710
 800a940:	080106e8 	.word	0x080106e8
 800a944:	3ff00000 	.word	0x3ff00000
 800a948:	40240000 	.word	0x40240000
 800a94c:	401c0000 	.word	0x401c0000
 800a950:	40140000 	.word	0x40140000
 800a954:	3fe00000 	.word	0x3fe00000
 800a958:	9d06      	ldr	r5, [sp, #24]
 800a95a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a95e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a962:	4630      	mov	r0, r6
 800a964:	4639      	mov	r1, r7
 800a966:	f7f5 fedd 	bl	8000724 <__aeabi_ddiv>
 800a96a:	f7f6 f861 	bl	8000a30 <__aeabi_d2iz>
 800a96e:	4680      	mov	r8, r0
 800a970:	f7f5 fd48 	bl	8000404 <__aeabi_i2d>
 800a974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a978:	f7f5 fdaa 	bl	80004d0 <__aeabi_dmul>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4630      	mov	r0, r6
 800a982:	4639      	mov	r1, r7
 800a984:	f7f5 fbf0 	bl	8000168 <__aeabi_dsub>
 800a988:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a98c:	f805 6b01 	strb.w	r6, [r5], #1
 800a990:	9e06      	ldr	r6, [sp, #24]
 800a992:	4602      	mov	r2, r0
 800a994:	1bae      	subs	r6, r5, r6
 800a996:	45b1      	cmp	r9, r6
 800a998:	460b      	mov	r3, r1
 800a99a:	d137      	bne.n	800aa0c <_dtoa_r+0x6dc>
 800a99c:	f7f5 fbe6 	bl	800016c <__adddf3>
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	460f      	mov	r7, r1
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9ac:	f7f6 f802 	bl	80009b4 <__aeabi_dcmplt>
 800a9b0:	b9c8      	cbnz	r0, 800a9e6 <_dtoa_r+0x6b6>
 800a9b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9b6:	4632      	mov	r2, r6
 800a9b8:	463b      	mov	r3, r7
 800a9ba:	f7f5 fff1 	bl	80009a0 <__aeabi_dcmpeq>
 800a9be:	b110      	cbz	r0, 800a9c6 <_dtoa_r+0x696>
 800a9c0:	f018 0f01 	tst.w	r8, #1
 800a9c4:	d10f      	bne.n	800a9e6 <_dtoa_r+0x6b6>
 800a9c6:	4651      	mov	r1, sl
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 fd11 	bl	800b3f0 <_Bfree>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a9d2:	702b      	strb	r3, [r5, #0]
 800a9d4:	f10b 0301 	add.w	r3, fp, #1
 800a9d8:	6013      	str	r3, [r2, #0]
 800a9da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f43f acec 	beq.w	800a3ba <_dtoa_r+0x8a>
 800a9e2:	601d      	str	r5, [r3, #0]
 800a9e4:	e4e9      	b.n	800a3ba <_dtoa_r+0x8a>
 800a9e6:	465f      	mov	r7, fp
 800a9e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9ec:	1e6b      	subs	r3, r5, #1
 800a9ee:	2a39      	cmp	r2, #57	; 0x39
 800a9f0:	d106      	bne.n	800aa00 <_dtoa_r+0x6d0>
 800a9f2:	9a06      	ldr	r2, [sp, #24]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d107      	bne.n	800aa08 <_dtoa_r+0x6d8>
 800a9f8:	2330      	movs	r3, #48	; 0x30
 800a9fa:	7013      	strb	r3, [r2, #0]
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	3701      	adds	r7, #1
 800aa00:	781a      	ldrb	r2, [r3, #0]
 800aa02:	3201      	adds	r2, #1
 800aa04:	701a      	strb	r2, [r3, #0]
 800aa06:	e78e      	b.n	800a926 <_dtoa_r+0x5f6>
 800aa08:	461d      	mov	r5, r3
 800aa0a:	e7ed      	b.n	800a9e8 <_dtoa_r+0x6b8>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4bb5      	ldr	r3, [pc, #724]	; (800ace4 <_dtoa_r+0x9b4>)
 800aa10:	f7f5 fd5e 	bl	80004d0 <__aeabi_dmul>
 800aa14:	2200      	movs	r2, #0
 800aa16:	2300      	movs	r3, #0
 800aa18:	4606      	mov	r6, r0
 800aa1a:	460f      	mov	r7, r1
 800aa1c:	f7f5 ffc0 	bl	80009a0 <__aeabi_dcmpeq>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d09c      	beq.n	800a95e <_dtoa_r+0x62e>
 800aa24:	e7cf      	b.n	800a9c6 <_dtoa_r+0x696>
 800aa26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa28:	2a00      	cmp	r2, #0
 800aa2a:	f000 8129 	beq.w	800ac80 <_dtoa_r+0x950>
 800aa2e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aa30:	2a01      	cmp	r2, #1
 800aa32:	f300 810e 	bgt.w	800ac52 <_dtoa_r+0x922>
 800aa36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa38:	2a00      	cmp	r2, #0
 800aa3a:	f000 8106 	beq.w	800ac4a <_dtoa_r+0x91a>
 800aa3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa42:	4645      	mov	r5, r8
 800aa44:	9e08      	ldr	r6, [sp, #32]
 800aa46:	9a07      	ldr	r2, [sp, #28]
 800aa48:	2101      	movs	r1, #1
 800aa4a:	441a      	add	r2, r3
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	4498      	add	r8, r3
 800aa50:	9207      	str	r2, [sp, #28]
 800aa52:	f000 fd6d 	bl	800b530 <__i2b>
 800aa56:	4607      	mov	r7, r0
 800aa58:	2d00      	cmp	r5, #0
 800aa5a:	dd0b      	ble.n	800aa74 <_dtoa_r+0x744>
 800aa5c:	9b07      	ldr	r3, [sp, #28]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	dd08      	ble.n	800aa74 <_dtoa_r+0x744>
 800aa62:	42ab      	cmp	r3, r5
 800aa64:	bfa8      	it	ge
 800aa66:	462b      	movge	r3, r5
 800aa68:	9a07      	ldr	r2, [sp, #28]
 800aa6a:	eba8 0803 	sub.w	r8, r8, r3
 800aa6e:	1aed      	subs	r5, r5, r3
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	9307      	str	r3, [sp, #28]
 800aa74:	9b08      	ldr	r3, [sp, #32]
 800aa76:	b1fb      	cbz	r3, 800aab8 <_dtoa_r+0x788>
 800aa78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f000 8104 	beq.w	800ac88 <_dtoa_r+0x958>
 800aa80:	2e00      	cmp	r6, #0
 800aa82:	dd11      	ble.n	800aaa8 <_dtoa_r+0x778>
 800aa84:	4639      	mov	r1, r7
 800aa86:	4632      	mov	r2, r6
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f000 fde7 	bl	800b65c <__pow5mult>
 800aa8e:	4652      	mov	r2, sl
 800aa90:	4601      	mov	r1, r0
 800aa92:	4607      	mov	r7, r0
 800aa94:	4620      	mov	r0, r4
 800aa96:	f000 fd54 	bl	800b542 <__multiply>
 800aa9a:	4651      	mov	r1, sl
 800aa9c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f000 fca6 	bl	800b3f0 <_Bfree>
 800aaa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa6:	469a      	mov	sl, r3
 800aaa8:	9b08      	ldr	r3, [sp, #32]
 800aaaa:	1b9a      	subs	r2, r3, r6
 800aaac:	d004      	beq.n	800aab8 <_dtoa_r+0x788>
 800aaae:	4651      	mov	r1, sl
 800aab0:	4620      	mov	r0, r4
 800aab2:	f000 fdd3 	bl	800b65c <__pow5mult>
 800aab6:	4682      	mov	sl, r0
 800aab8:	2101      	movs	r1, #1
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 fd38 	bl	800b530 <__i2b>
 800aac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aac2:	4606      	mov	r6, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f340 80e1 	ble.w	800ac8c <_dtoa_r+0x95c>
 800aaca:	461a      	mov	r2, r3
 800aacc:	4601      	mov	r1, r0
 800aace:	4620      	mov	r0, r4
 800aad0:	f000 fdc4 	bl	800b65c <__pow5mult>
 800aad4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aad6:	4606      	mov	r6, r0
 800aad8:	2b01      	cmp	r3, #1
 800aada:	f340 80da 	ble.w	800ac92 <_dtoa_r+0x962>
 800aade:	2300      	movs	r3, #0
 800aae0:	9308      	str	r3, [sp, #32]
 800aae2:	6933      	ldr	r3, [r6, #16]
 800aae4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aae8:	6918      	ldr	r0, [r3, #16]
 800aaea:	f000 fcd3 	bl	800b494 <__hi0bits>
 800aaee:	f1c0 0020 	rsb	r0, r0, #32
 800aaf2:	9b07      	ldr	r3, [sp, #28]
 800aaf4:	4418      	add	r0, r3
 800aaf6:	f010 001f 	ands.w	r0, r0, #31
 800aafa:	f000 80f0 	beq.w	800acde <_dtoa_r+0x9ae>
 800aafe:	f1c0 0320 	rsb	r3, r0, #32
 800ab02:	2b04      	cmp	r3, #4
 800ab04:	f340 80e2 	ble.w	800accc <_dtoa_r+0x99c>
 800ab08:	9b07      	ldr	r3, [sp, #28]
 800ab0a:	f1c0 001c 	rsb	r0, r0, #28
 800ab0e:	4480      	add	r8, r0
 800ab10:	4405      	add	r5, r0
 800ab12:	4403      	add	r3, r0
 800ab14:	9307      	str	r3, [sp, #28]
 800ab16:	f1b8 0f00 	cmp.w	r8, #0
 800ab1a:	dd05      	ble.n	800ab28 <_dtoa_r+0x7f8>
 800ab1c:	4651      	mov	r1, sl
 800ab1e:	4642      	mov	r2, r8
 800ab20:	4620      	mov	r0, r4
 800ab22:	f000 fde9 	bl	800b6f8 <__lshift>
 800ab26:	4682      	mov	sl, r0
 800ab28:	9b07      	ldr	r3, [sp, #28]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	dd05      	ble.n	800ab3a <_dtoa_r+0x80a>
 800ab2e:	4631      	mov	r1, r6
 800ab30:	461a      	mov	r2, r3
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fde0 	bl	800b6f8 <__lshift>
 800ab38:	4606      	mov	r6, r0
 800ab3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 80d3 	beq.w	800ace8 <_dtoa_r+0x9b8>
 800ab42:	4631      	mov	r1, r6
 800ab44:	4650      	mov	r0, sl
 800ab46:	f000 fe28 	bl	800b79a <__mcmp>
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	f280 80cc 	bge.w	800ace8 <_dtoa_r+0x9b8>
 800ab50:	2300      	movs	r3, #0
 800ab52:	4651      	mov	r1, sl
 800ab54:	220a      	movs	r2, #10
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 fc61 	bl	800b41e <__multadd>
 800ab5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab62:	4682      	mov	sl, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 81a9 	beq.w	800aebc <_dtoa_r+0xb8c>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	220a      	movs	r2, #10
 800ab70:	4620      	mov	r0, r4
 800ab72:	f000 fc54 	bl	800b41e <__multadd>
 800ab76:	9b04      	ldr	r3, [sp, #16]
 800ab78:	4607      	mov	r7, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	dc03      	bgt.n	800ab86 <_dtoa_r+0x856>
 800ab7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	f300 80b9 	bgt.w	800acf8 <_dtoa_r+0x9c8>
 800ab86:	2d00      	cmp	r5, #0
 800ab88:	dd05      	ble.n	800ab96 <_dtoa_r+0x866>
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	462a      	mov	r2, r5
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f000 fdb2 	bl	800b6f8 <__lshift>
 800ab94:	4607      	mov	r7, r0
 800ab96:	9b08      	ldr	r3, [sp, #32]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 8110 	beq.w	800adbe <_dtoa_r+0xa8e>
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	4620      	mov	r0, r4
 800aba2:	f000 fbf1 	bl	800b388 <_Balloc>
 800aba6:	4605      	mov	r5, r0
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	f107 010c 	add.w	r1, r7, #12
 800abae:	3202      	adds	r2, #2
 800abb0:	0092      	lsls	r2, r2, #2
 800abb2:	300c      	adds	r0, #12
 800abb4:	f7fe fb10 	bl	80091d8 <memcpy>
 800abb8:	2201      	movs	r2, #1
 800abba:	4629      	mov	r1, r5
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fd9b 	bl	800b6f8 <__lshift>
 800abc2:	9707      	str	r7, [sp, #28]
 800abc4:	4607      	mov	r7, r0
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800abcc:	f003 0301 	and.w	r3, r3, #1
 800abd0:	9308      	str	r3, [sp, #32]
 800abd2:	4631      	mov	r1, r6
 800abd4:	4650      	mov	r0, sl
 800abd6:	f7ff fb1c 	bl	800a212 <quorem>
 800abda:	9907      	ldr	r1, [sp, #28]
 800abdc:	4605      	mov	r5, r0
 800abde:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800abe2:	4650      	mov	r0, sl
 800abe4:	f000 fdd9 	bl	800b79a <__mcmp>
 800abe8:	463a      	mov	r2, r7
 800abea:	9002      	str	r0, [sp, #8]
 800abec:	4631      	mov	r1, r6
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 fded 	bl	800b7ce <__mdiff>
 800abf4:	68c3      	ldr	r3, [r0, #12]
 800abf6:	4602      	mov	r2, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f040 80e2 	bne.w	800adc2 <_dtoa_r+0xa92>
 800abfe:	4601      	mov	r1, r0
 800ac00:	9009      	str	r0, [sp, #36]	; 0x24
 800ac02:	4650      	mov	r0, sl
 800ac04:	f000 fdc9 	bl	800b79a <__mcmp>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	4620      	mov	r0, r4
 800ac10:	9309      	str	r3, [sp, #36]	; 0x24
 800ac12:	f000 fbed 	bl	800b3f0 <_Bfree>
 800ac16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f040 80d4 	bne.w	800adc6 <_dtoa_r+0xa96>
 800ac1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	f040 80d0 	bne.w	800adc6 <_dtoa_r+0xa96>
 800ac26:	9a08      	ldr	r2, [sp, #32]
 800ac28:	2a00      	cmp	r2, #0
 800ac2a:	f040 80cc 	bne.w	800adc6 <_dtoa_r+0xa96>
 800ac2e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac32:	f000 80e8 	beq.w	800ae06 <_dtoa_r+0xad6>
 800ac36:	9b02      	ldr	r3, [sp, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	dd01      	ble.n	800ac40 <_dtoa_r+0x910>
 800ac3c:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800ac40:	f108 0501 	add.w	r5, r8, #1
 800ac44:	f888 9000 	strb.w	r9, [r8]
 800ac48:	e06b      	b.n	800ad22 <_dtoa_r+0x9f2>
 800ac4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac4c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac50:	e6f7      	b.n	800aa42 <_dtoa_r+0x712>
 800ac52:	9b08      	ldr	r3, [sp, #32]
 800ac54:	f109 36ff 	add.w	r6, r9, #4294967295
 800ac58:	42b3      	cmp	r3, r6
 800ac5a:	bfb7      	itett	lt
 800ac5c:	9b08      	ldrlt	r3, [sp, #32]
 800ac5e:	1b9e      	subge	r6, r3, r6
 800ac60:	1af2      	sublt	r2, r6, r3
 800ac62:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800ac64:	bfbf      	itttt	lt
 800ac66:	9608      	strlt	r6, [sp, #32]
 800ac68:	189b      	addlt	r3, r3, r2
 800ac6a:	930c      	strlt	r3, [sp, #48]	; 0x30
 800ac6c:	2600      	movlt	r6, #0
 800ac6e:	f1b9 0f00 	cmp.w	r9, #0
 800ac72:	bfb9      	ittee	lt
 800ac74:	eba8 0509 	sublt.w	r5, r8, r9
 800ac78:	2300      	movlt	r3, #0
 800ac7a:	4645      	movge	r5, r8
 800ac7c:	464b      	movge	r3, r9
 800ac7e:	e6e2      	b.n	800aa46 <_dtoa_r+0x716>
 800ac80:	9e08      	ldr	r6, [sp, #32]
 800ac82:	4645      	mov	r5, r8
 800ac84:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ac86:	e6e7      	b.n	800aa58 <_dtoa_r+0x728>
 800ac88:	9a08      	ldr	r2, [sp, #32]
 800ac8a:	e710      	b.n	800aaae <_dtoa_r+0x77e>
 800ac8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	dc18      	bgt.n	800acc4 <_dtoa_r+0x994>
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	b9b3      	cbnz	r3, 800acc4 <_dtoa_r+0x994>
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac9c:	b9a3      	cbnz	r3, 800acc8 <_dtoa_r+0x998>
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aca4:	0d1b      	lsrs	r3, r3, #20
 800aca6:	051b      	lsls	r3, r3, #20
 800aca8:	b12b      	cbz	r3, 800acb6 <_dtoa_r+0x986>
 800acaa:	9b07      	ldr	r3, [sp, #28]
 800acac:	f108 0801 	add.w	r8, r8, #1
 800acb0:	3301      	adds	r3, #1
 800acb2:	9307      	str	r3, [sp, #28]
 800acb4:	2301      	movs	r3, #1
 800acb6:	9308      	str	r3, [sp, #32]
 800acb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f47f af11 	bne.w	800aae2 <_dtoa_r+0x7b2>
 800acc0:	2001      	movs	r0, #1
 800acc2:	e716      	b.n	800aaf2 <_dtoa_r+0x7c2>
 800acc4:	2300      	movs	r3, #0
 800acc6:	e7f6      	b.n	800acb6 <_dtoa_r+0x986>
 800acc8:	9b02      	ldr	r3, [sp, #8]
 800acca:	e7f4      	b.n	800acb6 <_dtoa_r+0x986>
 800accc:	f43f af23 	beq.w	800ab16 <_dtoa_r+0x7e6>
 800acd0:	9a07      	ldr	r2, [sp, #28]
 800acd2:	331c      	adds	r3, #28
 800acd4:	441a      	add	r2, r3
 800acd6:	4498      	add	r8, r3
 800acd8:	441d      	add	r5, r3
 800acda:	4613      	mov	r3, r2
 800acdc:	e71a      	b.n	800ab14 <_dtoa_r+0x7e4>
 800acde:	4603      	mov	r3, r0
 800ace0:	e7f6      	b.n	800acd0 <_dtoa_r+0x9a0>
 800ace2:	bf00      	nop
 800ace4:	40240000 	.word	0x40240000
 800ace8:	f1b9 0f00 	cmp.w	r9, #0
 800acec:	dc33      	bgt.n	800ad56 <_dtoa_r+0xa26>
 800acee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	dd30      	ble.n	800ad56 <_dtoa_r+0xa26>
 800acf4:	f8cd 9010 	str.w	r9, [sp, #16]
 800acf8:	9b04      	ldr	r3, [sp, #16]
 800acfa:	b963      	cbnz	r3, 800ad16 <_dtoa_r+0x9e6>
 800acfc:	4631      	mov	r1, r6
 800acfe:	2205      	movs	r2, #5
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 fb8c 	bl	800b41e <__multadd>
 800ad06:	4601      	mov	r1, r0
 800ad08:	4606      	mov	r6, r0
 800ad0a:	4650      	mov	r0, sl
 800ad0c:	f000 fd45 	bl	800b79a <__mcmp>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	f73f ad5c 	bgt.w	800a7ce <_dtoa_r+0x49e>
 800ad16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad18:	9d06      	ldr	r5, [sp, #24]
 800ad1a:	ea6f 0b03 	mvn.w	fp, r3
 800ad1e:	2300      	movs	r3, #0
 800ad20:	9307      	str	r3, [sp, #28]
 800ad22:	4631      	mov	r1, r6
 800ad24:	4620      	mov	r0, r4
 800ad26:	f000 fb63 	bl	800b3f0 <_Bfree>
 800ad2a:	2f00      	cmp	r7, #0
 800ad2c:	f43f ae4b 	beq.w	800a9c6 <_dtoa_r+0x696>
 800ad30:	9b07      	ldr	r3, [sp, #28]
 800ad32:	b12b      	cbz	r3, 800ad40 <_dtoa_r+0xa10>
 800ad34:	42bb      	cmp	r3, r7
 800ad36:	d003      	beq.n	800ad40 <_dtoa_r+0xa10>
 800ad38:	4619      	mov	r1, r3
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 fb58 	bl	800b3f0 <_Bfree>
 800ad40:	4639      	mov	r1, r7
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 fb54 	bl	800b3f0 <_Bfree>
 800ad48:	e63d      	b.n	800a9c6 <_dtoa_r+0x696>
 800ad4a:	2600      	movs	r6, #0
 800ad4c:	4637      	mov	r7, r6
 800ad4e:	e7e2      	b.n	800ad16 <_dtoa_r+0x9e6>
 800ad50:	46bb      	mov	fp, r7
 800ad52:	4637      	mov	r7, r6
 800ad54:	e53b      	b.n	800a7ce <_dtoa_r+0x49e>
 800ad56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad58:	f8cd 9010 	str.w	r9, [sp, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f47f af12 	bne.w	800ab86 <_dtoa_r+0x856>
 800ad62:	9d06      	ldr	r5, [sp, #24]
 800ad64:	4631      	mov	r1, r6
 800ad66:	4650      	mov	r0, sl
 800ad68:	f7ff fa53 	bl	800a212 <quorem>
 800ad6c:	9b06      	ldr	r3, [sp, #24]
 800ad6e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ad72:	f805 9b01 	strb.w	r9, [r5], #1
 800ad76:	9a04      	ldr	r2, [sp, #16]
 800ad78:	1aeb      	subs	r3, r5, r3
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	f300 8081 	bgt.w	800ae82 <_dtoa_r+0xb52>
 800ad80:	9b06      	ldr	r3, [sp, #24]
 800ad82:	2a01      	cmp	r2, #1
 800ad84:	bfac      	ite	ge
 800ad86:	189b      	addge	r3, r3, r2
 800ad88:	3301      	addlt	r3, #1
 800ad8a:	4698      	mov	r8, r3
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	9307      	str	r3, [sp, #28]
 800ad90:	4651      	mov	r1, sl
 800ad92:	2201      	movs	r2, #1
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fcaf 	bl	800b6f8 <__lshift>
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4682      	mov	sl, r0
 800ad9e:	f000 fcfc 	bl	800b79a <__mcmp>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	dc34      	bgt.n	800ae10 <_dtoa_r+0xae0>
 800ada6:	d102      	bne.n	800adae <_dtoa_r+0xa7e>
 800ada8:	f019 0f01 	tst.w	r9, #1
 800adac:	d130      	bne.n	800ae10 <_dtoa_r+0xae0>
 800adae:	4645      	mov	r5, r8
 800adb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800adb4:	1e6a      	subs	r2, r5, #1
 800adb6:	2b30      	cmp	r3, #48	; 0x30
 800adb8:	d1b3      	bne.n	800ad22 <_dtoa_r+0x9f2>
 800adba:	4615      	mov	r5, r2
 800adbc:	e7f8      	b.n	800adb0 <_dtoa_r+0xa80>
 800adbe:	4638      	mov	r0, r7
 800adc0:	e6ff      	b.n	800abc2 <_dtoa_r+0x892>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e722      	b.n	800ac0c <_dtoa_r+0x8dc>
 800adc6:	9a02      	ldr	r2, [sp, #8]
 800adc8:	2a00      	cmp	r2, #0
 800adca:	db04      	blt.n	800add6 <_dtoa_r+0xaa6>
 800adcc:	d128      	bne.n	800ae20 <_dtoa_r+0xaf0>
 800adce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800add0:	bb32      	cbnz	r2, 800ae20 <_dtoa_r+0xaf0>
 800add2:	9a08      	ldr	r2, [sp, #32]
 800add4:	bb22      	cbnz	r2, 800ae20 <_dtoa_r+0xaf0>
 800add6:	2b00      	cmp	r3, #0
 800add8:	f77f af32 	ble.w	800ac40 <_dtoa_r+0x910>
 800addc:	4651      	mov	r1, sl
 800adde:	2201      	movs	r2, #1
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 fc89 	bl	800b6f8 <__lshift>
 800ade6:	4631      	mov	r1, r6
 800ade8:	4682      	mov	sl, r0
 800adea:	f000 fcd6 	bl	800b79a <__mcmp>
 800adee:	2800      	cmp	r0, #0
 800adf0:	dc05      	bgt.n	800adfe <_dtoa_r+0xace>
 800adf2:	f47f af25 	bne.w	800ac40 <_dtoa_r+0x910>
 800adf6:	f019 0f01 	tst.w	r9, #1
 800adfa:	f43f af21 	beq.w	800ac40 <_dtoa_r+0x910>
 800adfe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ae02:	f47f af1b 	bne.w	800ac3c <_dtoa_r+0x90c>
 800ae06:	2339      	movs	r3, #57	; 0x39
 800ae08:	f108 0801 	add.w	r8, r8, #1
 800ae0c:	f808 3c01 	strb.w	r3, [r8, #-1]
 800ae10:	4645      	mov	r5, r8
 800ae12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae16:	1e6a      	subs	r2, r5, #1
 800ae18:	2b39      	cmp	r3, #57	; 0x39
 800ae1a:	d03a      	beq.n	800ae92 <_dtoa_r+0xb62>
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	e03f      	b.n	800aea0 <_dtoa_r+0xb70>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f108 0501 	add.w	r5, r8, #1
 800ae26:	dd05      	ble.n	800ae34 <_dtoa_r+0xb04>
 800ae28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ae2c:	d0eb      	beq.n	800ae06 <_dtoa_r+0xad6>
 800ae2e:	f109 0901 	add.w	r9, r9, #1
 800ae32:	e707      	b.n	800ac44 <_dtoa_r+0x914>
 800ae34:	9b06      	ldr	r3, [sp, #24]
 800ae36:	9a04      	ldr	r2, [sp, #16]
 800ae38:	1aeb      	subs	r3, r5, r3
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	46a8      	mov	r8, r5
 800ae3e:	f805 9c01 	strb.w	r9, [r5, #-1]
 800ae42:	d0a5      	beq.n	800ad90 <_dtoa_r+0xa60>
 800ae44:	4651      	mov	r1, sl
 800ae46:	2300      	movs	r3, #0
 800ae48:	220a      	movs	r2, #10
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f000 fae7 	bl	800b41e <__multadd>
 800ae50:	9b07      	ldr	r3, [sp, #28]
 800ae52:	4682      	mov	sl, r0
 800ae54:	42bb      	cmp	r3, r7
 800ae56:	f04f 020a 	mov.w	r2, #10
 800ae5a:	f04f 0300 	mov.w	r3, #0
 800ae5e:	9907      	ldr	r1, [sp, #28]
 800ae60:	4620      	mov	r0, r4
 800ae62:	d104      	bne.n	800ae6e <_dtoa_r+0xb3e>
 800ae64:	f000 fadb 	bl	800b41e <__multadd>
 800ae68:	9007      	str	r0, [sp, #28]
 800ae6a:	4607      	mov	r7, r0
 800ae6c:	e6b1      	b.n	800abd2 <_dtoa_r+0x8a2>
 800ae6e:	f000 fad6 	bl	800b41e <__multadd>
 800ae72:	2300      	movs	r3, #0
 800ae74:	9007      	str	r0, [sp, #28]
 800ae76:	220a      	movs	r2, #10
 800ae78:	4639      	mov	r1, r7
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f000 facf 	bl	800b41e <__multadd>
 800ae80:	e7f3      	b.n	800ae6a <_dtoa_r+0xb3a>
 800ae82:	4651      	mov	r1, sl
 800ae84:	2300      	movs	r3, #0
 800ae86:	220a      	movs	r2, #10
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f000 fac8 	bl	800b41e <__multadd>
 800ae8e:	4682      	mov	sl, r0
 800ae90:	e768      	b.n	800ad64 <_dtoa_r+0xa34>
 800ae92:	9b06      	ldr	r3, [sp, #24]
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d105      	bne.n	800aea4 <_dtoa_r+0xb74>
 800ae98:	2331      	movs	r3, #49	; 0x31
 800ae9a:	9a06      	ldr	r2, [sp, #24]
 800ae9c:	f10b 0b01 	add.w	fp, fp, #1
 800aea0:	7013      	strb	r3, [r2, #0]
 800aea2:	e73e      	b.n	800ad22 <_dtoa_r+0x9f2>
 800aea4:	4615      	mov	r5, r2
 800aea6:	e7b4      	b.n	800ae12 <_dtoa_r+0xae2>
 800aea8:	4b09      	ldr	r3, [pc, #36]	; (800aed0 <_dtoa_r+0xba0>)
 800aeaa:	f7ff baa3 	b.w	800a3f4 <_dtoa_r+0xc4>
 800aeae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f47f aa7d 	bne.w	800a3b0 <_dtoa_r+0x80>
 800aeb6:	4b07      	ldr	r3, [pc, #28]	; (800aed4 <_dtoa_r+0xba4>)
 800aeb8:	f7ff ba9c 	b.w	800a3f4 <_dtoa_r+0xc4>
 800aebc:	9b04      	ldr	r3, [sp, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f73f af4f 	bgt.w	800ad62 <_dtoa_r+0xa32>
 800aec4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	f77f af4b 	ble.w	800ad62 <_dtoa_r+0xa32>
 800aecc:	e714      	b.n	800acf8 <_dtoa_r+0x9c8>
 800aece:	bf00      	nop
 800aed0:	08010552 	.word	0x08010552
 800aed4:	08010675 	.word	0x08010675

0800aed8 <_localeconv_r>:
 800aed8:	4b04      	ldr	r3, [pc, #16]	; (800aeec <_localeconv_r+0x14>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6a18      	ldr	r0, [r3, #32]
 800aede:	4b04      	ldr	r3, [pc, #16]	; (800aef0 <_localeconv_r+0x18>)
 800aee0:	2800      	cmp	r0, #0
 800aee2:	bf08      	it	eq
 800aee4:	4618      	moveq	r0, r3
 800aee6:	30f0      	adds	r0, #240	; 0xf0
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	20000184 	.word	0x20000184
 800aef0:	20000018 	.word	0x20000018

0800aef4 <__retarget_lock_acquire_recursive>:
 800aef4:	4770      	bx	lr

0800aef6 <__retarget_lock_release_recursive>:
 800aef6:	4770      	bx	lr

0800aef8 <malloc>:
 800aef8:	4b02      	ldr	r3, [pc, #8]	; (800af04 <malloc+0xc>)
 800aefa:	4601      	mov	r1, r0
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	f000 b803 	b.w	800af08 <_malloc_r>
 800af02:	bf00      	nop
 800af04:	20000184 	.word	0x20000184

0800af08 <_malloc_r>:
 800af08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0c:	f101 040b 	add.w	r4, r1, #11
 800af10:	2c16      	cmp	r4, #22
 800af12:	4681      	mov	r9, r0
 800af14:	d907      	bls.n	800af26 <_malloc_r+0x1e>
 800af16:	f034 0407 	bics.w	r4, r4, #7
 800af1a:	d505      	bpl.n	800af28 <_malloc_r+0x20>
 800af1c:	230c      	movs	r3, #12
 800af1e:	f8c9 3000 	str.w	r3, [r9]
 800af22:	2600      	movs	r6, #0
 800af24:	e131      	b.n	800b18a <_malloc_r+0x282>
 800af26:	2410      	movs	r4, #16
 800af28:	428c      	cmp	r4, r1
 800af2a:	d3f7      	bcc.n	800af1c <_malloc_r+0x14>
 800af2c:	4648      	mov	r0, r9
 800af2e:	f000 fa1f 	bl	800b370 <__malloc_lock>
 800af32:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800af36:	4d9b      	ldr	r5, [pc, #620]	; (800b1a4 <_malloc_r+0x29c>)
 800af38:	d236      	bcs.n	800afa8 <_malloc_r+0xa0>
 800af3a:	f104 0208 	add.w	r2, r4, #8
 800af3e:	442a      	add	r2, r5
 800af40:	6856      	ldr	r6, [r2, #4]
 800af42:	f1a2 0108 	sub.w	r1, r2, #8
 800af46:	428e      	cmp	r6, r1
 800af48:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800af4c:	d102      	bne.n	800af54 <_malloc_r+0x4c>
 800af4e:	68d6      	ldr	r6, [r2, #12]
 800af50:	42b2      	cmp	r2, r6
 800af52:	d010      	beq.n	800af76 <_malloc_r+0x6e>
 800af54:	6873      	ldr	r3, [r6, #4]
 800af56:	68f2      	ldr	r2, [r6, #12]
 800af58:	68b1      	ldr	r1, [r6, #8]
 800af5a:	f023 0303 	bic.w	r3, r3, #3
 800af5e:	60ca      	str	r2, [r1, #12]
 800af60:	4433      	add	r3, r6
 800af62:	6091      	str	r1, [r2, #8]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	f042 0201 	orr.w	r2, r2, #1
 800af6a:	605a      	str	r2, [r3, #4]
 800af6c:	4648      	mov	r0, r9
 800af6e:	f000 fa05 	bl	800b37c <__malloc_unlock>
 800af72:	3608      	adds	r6, #8
 800af74:	e109      	b.n	800b18a <_malloc_r+0x282>
 800af76:	3302      	adds	r3, #2
 800af78:	4a8b      	ldr	r2, [pc, #556]	; (800b1a8 <_malloc_r+0x2a0>)
 800af7a:	692e      	ldr	r6, [r5, #16]
 800af7c:	4611      	mov	r1, r2
 800af7e:	4296      	cmp	r6, r2
 800af80:	d06d      	beq.n	800b05e <_malloc_r+0x156>
 800af82:	6870      	ldr	r0, [r6, #4]
 800af84:	f020 0003 	bic.w	r0, r0, #3
 800af88:	1b07      	subs	r7, r0, r4
 800af8a:	2f0f      	cmp	r7, #15
 800af8c:	dd47      	ble.n	800b01e <_malloc_r+0x116>
 800af8e:	1933      	adds	r3, r6, r4
 800af90:	f044 0401 	orr.w	r4, r4, #1
 800af94:	6074      	str	r4, [r6, #4]
 800af96:	616b      	str	r3, [r5, #20]
 800af98:	612b      	str	r3, [r5, #16]
 800af9a:	60da      	str	r2, [r3, #12]
 800af9c:	609a      	str	r2, [r3, #8]
 800af9e:	f047 0201 	orr.w	r2, r7, #1
 800afa2:	605a      	str	r2, [r3, #4]
 800afa4:	5037      	str	r7, [r6, r0]
 800afa6:	e7e1      	b.n	800af6c <_malloc_r+0x64>
 800afa8:	0a63      	lsrs	r3, r4, #9
 800afaa:	d02a      	beq.n	800b002 <_malloc_r+0xfa>
 800afac:	2b04      	cmp	r3, #4
 800afae:	d812      	bhi.n	800afd6 <_malloc_r+0xce>
 800afb0:	09a3      	lsrs	r3, r4, #6
 800afb2:	3338      	adds	r3, #56	; 0x38
 800afb4:	1c5a      	adds	r2, r3, #1
 800afb6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800afba:	6856      	ldr	r6, [r2, #4]
 800afbc:	f1a2 0008 	sub.w	r0, r2, #8
 800afc0:	4286      	cmp	r6, r0
 800afc2:	d006      	beq.n	800afd2 <_malloc_r+0xca>
 800afc4:	6872      	ldr	r2, [r6, #4]
 800afc6:	f022 0203 	bic.w	r2, r2, #3
 800afca:	1b11      	subs	r1, r2, r4
 800afcc:	290f      	cmp	r1, #15
 800afce:	dd1c      	ble.n	800b00a <_malloc_r+0x102>
 800afd0:	3b01      	subs	r3, #1
 800afd2:	3301      	adds	r3, #1
 800afd4:	e7d0      	b.n	800af78 <_malloc_r+0x70>
 800afd6:	2b14      	cmp	r3, #20
 800afd8:	d801      	bhi.n	800afde <_malloc_r+0xd6>
 800afda:	335b      	adds	r3, #91	; 0x5b
 800afdc:	e7ea      	b.n	800afb4 <_malloc_r+0xac>
 800afde:	2b54      	cmp	r3, #84	; 0x54
 800afe0:	d802      	bhi.n	800afe8 <_malloc_r+0xe0>
 800afe2:	0b23      	lsrs	r3, r4, #12
 800afe4:	336e      	adds	r3, #110	; 0x6e
 800afe6:	e7e5      	b.n	800afb4 <_malloc_r+0xac>
 800afe8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800afec:	d802      	bhi.n	800aff4 <_malloc_r+0xec>
 800afee:	0be3      	lsrs	r3, r4, #15
 800aff0:	3377      	adds	r3, #119	; 0x77
 800aff2:	e7df      	b.n	800afb4 <_malloc_r+0xac>
 800aff4:	f240 5254 	movw	r2, #1364	; 0x554
 800aff8:	4293      	cmp	r3, r2
 800affa:	d804      	bhi.n	800b006 <_malloc_r+0xfe>
 800affc:	0ca3      	lsrs	r3, r4, #18
 800affe:	337c      	adds	r3, #124	; 0x7c
 800b000:	e7d8      	b.n	800afb4 <_malloc_r+0xac>
 800b002:	233f      	movs	r3, #63	; 0x3f
 800b004:	e7d6      	b.n	800afb4 <_malloc_r+0xac>
 800b006:	237e      	movs	r3, #126	; 0x7e
 800b008:	e7d4      	b.n	800afb4 <_malloc_r+0xac>
 800b00a:	2900      	cmp	r1, #0
 800b00c:	68f1      	ldr	r1, [r6, #12]
 800b00e:	db04      	blt.n	800b01a <_malloc_r+0x112>
 800b010:	68b3      	ldr	r3, [r6, #8]
 800b012:	60d9      	str	r1, [r3, #12]
 800b014:	608b      	str	r3, [r1, #8]
 800b016:	18b3      	adds	r3, r6, r2
 800b018:	e7a4      	b.n	800af64 <_malloc_r+0x5c>
 800b01a:	460e      	mov	r6, r1
 800b01c:	e7d0      	b.n	800afc0 <_malloc_r+0xb8>
 800b01e:	2f00      	cmp	r7, #0
 800b020:	616a      	str	r2, [r5, #20]
 800b022:	612a      	str	r2, [r5, #16]
 800b024:	db05      	blt.n	800b032 <_malloc_r+0x12a>
 800b026:	4430      	add	r0, r6
 800b028:	6843      	ldr	r3, [r0, #4]
 800b02a:	f043 0301 	orr.w	r3, r3, #1
 800b02e:	6043      	str	r3, [r0, #4]
 800b030:	e79c      	b.n	800af6c <_malloc_r+0x64>
 800b032:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b036:	d244      	bcs.n	800b0c2 <_malloc_r+0x1ba>
 800b038:	2201      	movs	r2, #1
 800b03a:	08c0      	lsrs	r0, r0, #3
 800b03c:	1087      	asrs	r7, r0, #2
 800b03e:	fa02 f707 	lsl.w	r7, r2, r7
 800b042:	686a      	ldr	r2, [r5, #4]
 800b044:	3001      	adds	r0, #1
 800b046:	433a      	orrs	r2, r7
 800b048:	606a      	str	r2, [r5, #4]
 800b04a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800b04e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800b052:	3a08      	subs	r2, #8
 800b054:	60f2      	str	r2, [r6, #12]
 800b056:	60b7      	str	r7, [r6, #8]
 800b058:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800b05c:	60fe      	str	r6, [r7, #12]
 800b05e:	2001      	movs	r0, #1
 800b060:	109a      	asrs	r2, r3, #2
 800b062:	fa00 f202 	lsl.w	r2, r0, r2
 800b066:	6868      	ldr	r0, [r5, #4]
 800b068:	4282      	cmp	r2, r0
 800b06a:	f200 809f 	bhi.w	800b1ac <_malloc_r+0x2a4>
 800b06e:	4202      	tst	r2, r0
 800b070:	d106      	bne.n	800b080 <_malloc_r+0x178>
 800b072:	f023 0303 	bic.w	r3, r3, #3
 800b076:	0052      	lsls	r2, r2, #1
 800b078:	4202      	tst	r2, r0
 800b07a:	f103 0304 	add.w	r3, r3, #4
 800b07e:	d0fa      	beq.n	800b076 <_malloc_r+0x16e>
 800b080:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800b084:	46e0      	mov	r8, ip
 800b086:	469e      	mov	lr, r3
 800b088:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800b08c:	4546      	cmp	r6, r8
 800b08e:	d153      	bne.n	800b138 <_malloc_r+0x230>
 800b090:	f10e 0e01 	add.w	lr, lr, #1
 800b094:	f01e 0f03 	tst.w	lr, #3
 800b098:	f108 0808 	add.w	r8, r8, #8
 800b09c:	d1f4      	bne.n	800b088 <_malloc_r+0x180>
 800b09e:	0798      	lsls	r0, r3, #30
 800b0a0:	d179      	bne.n	800b196 <_malloc_r+0x28e>
 800b0a2:	686b      	ldr	r3, [r5, #4]
 800b0a4:	ea23 0302 	bic.w	r3, r3, r2
 800b0a8:	606b      	str	r3, [r5, #4]
 800b0aa:	6868      	ldr	r0, [r5, #4]
 800b0ac:	0052      	lsls	r2, r2, #1
 800b0ae:	4282      	cmp	r2, r0
 800b0b0:	d87c      	bhi.n	800b1ac <_malloc_r+0x2a4>
 800b0b2:	2a00      	cmp	r2, #0
 800b0b4:	d07a      	beq.n	800b1ac <_malloc_r+0x2a4>
 800b0b6:	4673      	mov	r3, lr
 800b0b8:	4202      	tst	r2, r0
 800b0ba:	d1e1      	bne.n	800b080 <_malloc_r+0x178>
 800b0bc:	3304      	adds	r3, #4
 800b0be:	0052      	lsls	r2, r2, #1
 800b0c0:	e7fa      	b.n	800b0b8 <_malloc_r+0x1b0>
 800b0c2:	0a42      	lsrs	r2, r0, #9
 800b0c4:	2a04      	cmp	r2, #4
 800b0c6:	d815      	bhi.n	800b0f4 <_malloc_r+0x1ec>
 800b0c8:	0982      	lsrs	r2, r0, #6
 800b0ca:	3238      	adds	r2, #56	; 0x38
 800b0cc:	1c57      	adds	r7, r2, #1
 800b0ce:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800b0d2:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800b0d6:	45be      	cmp	lr, r7
 800b0d8:	d126      	bne.n	800b128 <_malloc_r+0x220>
 800b0da:	2001      	movs	r0, #1
 800b0dc:	1092      	asrs	r2, r2, #2
 800b0de:	fa00 f202 	lsl.w	r2, r0, r2
 800b0e2:	6868      	ldr	r0, [r5, #4]
 800b0e4:	4310      	orrs	r0, r2
 800b0e6:	6068      	str	r0, [r5, #4]
 800b0e8:	f8c6 e00c 	str.w	lr, [r6, #12]
 800b0ec:	60b7      	str	r7, [r6, #8]
 800b0ee:	f8ce 6008 	str.w	r6, [lr, #8]
 800b0f2:	e7b3      	b.n	800b05c <_malloc_r+0x154>
 800b0f4:	2a14      	cmp	r2, #20
 800b0f6:	d801      	bhi.n	800b0fc <_malloc_r+0x1f4>
 800b0f8:	325b      	adds	r2, #91	; 0x5b
 800b0fa:	e7e7      	b.n	800b0cc <_malloc_r+0x1c4>
 800b0fc:	2a54      	cmp	r2, #84	; 0x54
 800b0fe:	d802      	bhi.n	800b106 <_malloc_r+0x1fe>
 800b100:	0b02      	lsrs	r2, r0, #12
 800b102:	326e      	adds	r2, #110	; 0x6e
 800b104:	e7e2      	b.n	800b0cc <_malloc_r+0x1c4>
 800b106:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b10a:	d802      	bhi.n	800b112 <_malloc_r+0x20a>
 800b10c:	0bc2      	lsrs	r2, r0, #15
 800b10e:	3277      	adds	r2, #119	; 0x77
 800b110:	e7dc      	b.n	800b0cc <_malloc_r+0x1c4>
 800b112:	f240 5754 	movw	r7, #1364	; 0x554
 800b116:	42ba      	cmp	r2, r7
 800b118:	bf9a      	itte	ls
 800b11a:	0c82      	lsrls	r2, r0, #18
 800b11c:	327c      	addls	r2, #124	; 0x7c
 800b11e:	227e      	movhi	r2, #126	; 0x7e
 800b120:	e7d4      	b.n	800b0cc <_malloc_r+0x1c4>
 800b122:	68bf      	ldr	r7, [r7, #8]
 800b124:	45be      	cmp	lr, r7
 800b126:	d004      	beq.n	800b132 <_malloc_r+0x22a>
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	f022 0203 	bic.w	r2, r2, #3
 800b12e:	4290      	cmp	r0, r2
 800b130:	d3f7      	bcc.n	800b122 <_malloc_r+0x21a>
 800b132:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800b136:	e7d7      	b.n	800b0e8 <_malloc_r+0x1e0>
 800b138:	6870      	ldr	r0, [r6, #4]
 800b13a:	68f7      	ldr	r7, [r6, #12]
 800b13c:	f020 0003 	bic.w	r0, r0, #3
 800b140:	eba0 0a04 	sub.w	sl, r0, r4
 800b144:	f1ba 0f0f 	cmp.w	sl, #15
 800b148:	dd10      	ble.n	800b16c <_malloc_r+0x264>
 800b14a:	68b2      	ldr	r2, [r6, #8]
 800b14c:	1933      	adds	r3, r6, r4
 800b14e:	f044 0401 	orr.w	r4, r4, #1
 800b152:	6074      	str	r4, [r6, #4]
 800b154:	60d7      	str	r7, [r2, #12]
 800b156:	60ba      	str	r2, [r7, #8]
 800b158:	f04a 0201 	orr.w	r2, sl, #1
 800b15c:	616b      	str	r3, [r5, #20]
 800b15e:	612b      	str	r3, [r5, #16]
 800b160:	60d9      	str	r1, [r3, #12]
 800b162:	6099      	str	r1, [r3, #8]
 800b164:	605a      	str	r2, [r3, #4]
 800b166:	f846 a000 	str.w	sl, [r6, r0]
 800b16a:	e6ff      	b.n	800af6c <_malloc_r+0x64>
 800b16c:	f1ba 0f00 	cmp.w	sl, #0
 800b170:	db0f      	blt.n	800b192 <_malloc_r+0x28a>
 800b172:	4430      	add	r0, r6
 800b174:	6843      	ldr	r3, [r0, #4]
 800b176:	f043 0301 	orr.w	r3, r3, #1
 800b17a:	6043      	str	r3, [r0, #4]
 800b17c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800b180:	4648      	mov	r0, r9
 800b182:	60df      	str	r7, [r3, #12]
 800b184:	60bb      	str	r3, [r7, #8]
 800b186:	f000 f8f9 	bl	800b37c <__malloc_unlock>
 800b18a:	4630      	mov	r0, r6
 800b18c:	b003      	add	sp, #12
 800b18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b192:	463e      	mov	r6, r7
 800b194:	e77a      	b.n	800b08c <_malloc_r+0x184>
 800b196:	f85c 0908 	ldr.w	r0, [ip], #-8
 800b19a:	3b01      	subs	r3, #1
 800b19c:	4584      	cmp	ip, r0
 800b19e:	f43f af7e 	beq.w	800b09e <_malloc_r+0x196>
 800b1a2:	e782      	b.n	800b0aa <_malloc_r+0x1a2>
 800b1a4:	20000278 	.word	0x20000278
 800b1a8:	20000280 	.word	0x20000280
 800b1ac:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800b1b0:	f8db 6004 	ldr.w	r6, [fp, #4]
 800b1b4:	f026 0603 	bic.w	r6, r6, #3
 800b1b8:	42b4      	cmp	r4, r6
 800b1ba:	d803      	bhi.n	800b1c4 <_malloc_r+0x2bc>
 800b1bc:	1b33      	subs	r3, r6, r4
 800b1be:	2b0f      	cmp	r3, #15
 800b1c0:	f300 8095 	bgt.w	800b2ee <_malloc_r+0x3e6>
 800b1c4:	4a4f      	ldr	r2, [pc, #316]	; (800b304 <_malloc_r+0x3fc>)
 800b1c6:	eb0b 0306 	add.w	r3, fp, r6
 800b1ca:	6817      	ldr	r7, [r2, #0]
 800b1cc:	4a4e      	ldr	r2, [pc, #312]	; (800b308 <_malloc_r+0x400>)
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	6811      	ldr	r1, [r2, #0]
 800b1d2:	4427      	add	r7, r4
 800b1d4:	3101      	adds	r1, #1
 800b1d6:	d005      	beq.n	800b1e4 <_malloc_r+0x2dc>
 800b1d8:	494c      	ldr	r1, [pc, #304]	; (800b30c <_malloc_r+0x404>)
 800b1da:	3901      	subs	r1, #1
 800b1dc:	440f      	add	r7, r1
 800b1de:	3101      	adds	r1, #1
 800b1e0:	4249      	negs	r1, r1
 800b1e2:	400f      	ands	r7, r1
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	4648      	mov	r0, r9
 800b1e8:	9201      	str	r2, [sp, #4]
 800b1ea:	9300      	str	r3, [sp, #0]
 800b1ec:	f000 fd20 	bl	800bc30 <_sbrk_r>
 800b1f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b1f4:	4680      	mov	r8, r0
 800b1f6:	d055      	beq.n	800b2a4 <_malloc_r+0x39c>
 800b1f8:	9b00      	ldr	r3, [sp, #0]
 800b1fa:	9a01      	ldr	r2, [sp, #4]
 800b1fc:	4283      	cmp	r3, r0
 800b1fe:	d901      	bls.n	800b204 <_malloc_r+0x2fc>
 800b200:	45ab      	cmp	fp, r5
 800b202:	d14f      	bne.n	800b2a4 <_malloc_r+0x39c>
 800b204:	4842      	ldr	r0, [pc, #264]	; (800b310 <_malloc_r+0x408>)
 800b206:	4543      	cmp	r3, r8
 800b208:	6801      	ldr	r1, [r0, #0]
 800b20a:	4682      	mov	sl, r0
 800b20c:	eb07 0e01 	add.w	lr, r7, r1
 800b210:	f8c0 e000 	str.w	lr, [r0]
 800b214:	493f      	ldr	r1, [pc, #252]	; (800b314 <_malloc_r+0x40c>)
 800b216:	d113      	bne.n	800b240 <_malloc_r+0x338>
 800b218:	420b      	tst	r3, r1
 800b21a:	d111      	bne.n	800b240 <_malloc_r+0x338>
 800b21c:	68ab      	ldr	r3, [r5, #8]
 800b21e:	443e      	add	r6, r7
 800b220:	f046 0601 	orr.w	r6, r6, #1
 800b224:	605e      	str	r6, [r3, #4]
 800b226:	4a3c      	ldr	r2, [pc, #240]	; (800b318 <_malloc_r+0x410>)
 800b228:	f8da 3000 	ldr.w	r3, [sl]
 800b22c:	6811      	ldr	r1, [r2, #0]
 800b22e:	428b      	cmp	r3, r1
 800b230:	bf88      	it	hi
 800b232:	6013      	strhi	r3, [r2, #0]
 800b234:	4a39      	ldr	r2, [pc, #228]	; (800b31c <_malloc_r+0x414>)
 800b236:	6811      	ldr	r1, [r2, #0]
 800b238:	428b      	cmp	r3, r1
 800b23a:	bf88      	it	hi
 800b23c:	6013      	strhi	r3, [r2, #0]
 800b23e:	e031      	b.n	800b2a4 <_malloc_r+0x39c>
 800b240:	6810      	ldr	r0, [r2, #0]
 800b242:	3001      	adds	r0, #1
 800b244:	bf1b      	ittet	ne
 800b246:	eba8 0303 	subne.w	r3, r8, r3
 800b24a:	4473      	addne	r3, lr
 800b24c:	f8c2 8000 	streq.w	r8, [r2]
 800b250:	f8ca 3000 	strne.w	r3, [sl]
 800b254:	f018 0007 	ands.w	r0, r8, #7
 800b258:	bf1c      	itt	ne
 800b25a:	f1c0 0008 	rsbne	r0, r0, #8
 800b25e:	4480      	addne	r8, r0
 800b260:	4b2a      	ldr	r3, [pc, #168]	; (800b30c <_malloc_r+0x404>)
 800b262:	4447      	add	r7, r8
 800b264:	4418      	add	r0, r3
 800b266:	400f      	ands	r7, r1
 800b268:	1bc7      	subs	r7, r0, r7
 800b26a:	4639      	mov	r1, r7
 800b26c:	4648      	mov	r0, r9
 800b26e:	f000 fcdf 	bl	800bc30 <_sbrk_r>
 800b272:	1c43      	adds	r3, r0, #1
 800b274:	bf04      	itt	eq
 800b276:	4640      	moveq	r0, r8
 800b278:	2700      	moveq	r7, #0
 800b27a:	f8da 3000 	ldr.w	r3, [sl]
 800b27e:	eba0 0008 	sub.w	r0, r0, r8
 800b282:	443b      	add	r3, r7
 800b284:	4407      	add	r7, r0
 800b286:	f047 0701 	orr.w	r7, r7, #1
 800b28a:	45ab      	cmp	fp, r5
 800b28c:	f8c5 8008 	str.w	r8, [r5, #8]
 800b290:	f8ca 3000 	str.w	r3, [sl]
 800b294:	f8c8 7004 	str.w	r7, [r8, #4]
 800b298:	d0c5      	beq.n	800b226 <_malloc_r+0x31e>
 800b29a:	2e0f      	cmp	r6, #15
 800b29c:	d810      	bhi.n	800b2c0 <_malloc_r+0x3b8>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	f8c8 3004 	str.w	r3, [r8, #4]
 800b2a4:	68ab      	ldr	r3, [r5, #8]
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	f022 0203 	bic.w	r2, r2, #3
 800b2ac:	4294      	cmp	r4, r2
 800b2ae:	eba2 0304 	sub.w	r3, r2, r4
 800b2b2:	d801      	bhi.n	800b2b8 <_malloc_r+0x3b0>
 800b2b4:	2b0f      	cmp	r3, #15
 800b2b6:	dc1a      	bgt.n	800b2ee <_malloc_r+0x3e6>
 800b2b8:	4648      	mov	r0, r9
 800b2ba:	f000 f85f 	bl	800b37c <__malloc_unlock>
 800b2be:	e630      	b.n	800af22 <_malloc_r+0x1a>
 800b2c0:	2205      	movs	r2, #5
 800b2c2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b2c6:	3e0c      	subs	r6, #12
 800b2c8:	f026 0607 	bic.w	r6, r6, #7
 800b2cc:	f003 0301 	and.w	r3, r3, #1
 800b2d0:	4333      	orrs	r3, r6
 800b2d2:	f8cb 3004 	str.w	r3, [fp, #4]
 800b2d6:	2e0f      	cmp	r6, #15
 800b2d8:	eb0b 0306 	add.w	r3, fp, r6
 800b2dc:	605a      	str	r2, [r3, #4]
 800b2de:	609a      	str	r2, [r3, #8]
 800b2e0:	d9a1      	bls.n	800b226 <_malloc_r+0x31e>
 800b2e2:	f10b 0108 	add.w	r1, fp, #8
 800b2e6:	4648      	mov	r0, r9
 800b2e8:	f000 fdb0 	bl	800be4c <_free_r>
 800b2ec:	e79b      	b.n	800b226 <_malloc_r+0x31e>
 800b2ee:	68ae      	ldr	r6, [r5, #8]
 800b2f0:	f044 0201 	orr.w	r2, r4, #1
 800b2f4:	f043 0301 	orr.w	r3, r3, #1
 800b2f8:	4434      	add	r4, r6
 800b2fa:	6072      	str	r2, [r6, #4]
 800b2fc:	60ac      	str	r4, [r5, #8]
 800b2fe:	6063      	str	r3, [r4, #4]
 800b300:	e634      	b.n	800af6c <_malloc_r+0x64>
 800b302:	bf00      	nop
 800b304:	20000aac 	.word	0x20000aac
 800b308:	20000680 	.word	0x20000680
 800b30c:	00000080 	.word	0x00000080
 800b310:	20000a7c 	.word	0x20000a7c
 800b314:	0000007f 	.word	0x0000007f
 800b318:	20000aa4 	.word	0x20000aa4
 800b31c:	20000aa8 	.word	0x20000aa8

0800b320 <memchr>:
 800b320:	b510      	push	{r4, lr}
 800b322:	b2c9      	uxtb	r1, r1
 800b324:	4402      	add	r2, r0
 800b326:	4290      	cmp	r0, r2
 800b328:	4603      	mov	r3, r0
 800b32a:	d101      	bne.n	800b330 <memchr+0x10>
 800b32c:	2000      	movs	r0, #0
 800b32e:	bd10      	pop	{r4, pc}
 800b330:	781c      	ldrb	r4, [r3, #0]
 800b332:	3001      	adds	r0, #1
 800b334:	428c      	cmp	r4, r1
 800b336:	d1f6      	bne.n	800b326 <memchr+0x6>
 800b338:	4618      	mov	r0, r3
 800b33a:	bd10      	pop	{r4, pc}

0800b33c <memmove>:
 800b33c:	4288      	cmp	r0, r1
 800b33e:	b510      	push	{r4, lr}
 800b340:	eb01 0302 	add.w	r3, r1, r2
 800b344:	d803      	bhi.n	800b34e <memmove+0x12>
 800b346:	1e42      	subs	r2, r0, #1
 800b348:	4299      	cmp	r1, r3
 800b34a:	d10c      	bne.n	800b366 <memmove+0x2a>
 800b34c:	bd10      	pop	{r4, pc}
 800b34e:	4298      	cmp	r0, r3
 800b350:	d2f9      	bcs.n	800b346 <memmove+0xa>
 800b352:	1881      	adds	r1, r0, r2
 800b354:	1ad2      	subs	r2, r2, r3
 800b356:	42d3      	cmn	r3, r2
 800b358:	d100      	bne.n	800b35c <memmove+0x20>
 800b35a:	bd10      	pop	{r4, pc}
 800b35c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b360:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b364:	e7f7      	b.n	800b356 <memmove+0x1a>
 800b366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b36a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b36e:	e7eb      	b.n	800b348 <memmove+0xc>

0800b370 <__malloc_lock>:
 800b370:	4801      	ldr	r0, [pc, #4]	; (800b378 <__malloc_lock+0x8>)
 800b372:	f7ff bdbf 	b.w	800aef4 <__retarget_lock_acquire_recursive>
 800b376:	bf00      	nop
 800b378:	2000145c 	.word	0x2000145c

0800b37c <__malloc_unlock>:
 800b37c:	4801      	ldr	r0, [pc, #4]	; (800b384 <__malloc_unlock+0x8>)
 800b37e:	f7ff bdba 	b.w	800aef6 <__retarget_lock_release_recursive>
 800b382:	bf00      	nop
 800b384:	2000145c 	.word	0x2000145c

0800b388 <_Balloc>:
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b38c:	4604      	mov	r4, r0
 800b38e:	460e      	mov	r6, r1
 800b390:	b93d      	cbnz	r5, 800b3a2 <_Balloc+0x1a>
 800b392:	2010      	movs	r0, #16
 800b394:	f7ff fdb0 	bl	800aef8 <malloc>
 800b398:	6260      	str	r0, [r4, #36]	; 0x24
 800b39a:	6045      	str	r5, [r0, #4]
 800b39c:	6085      	str	r5, [r0, #8]
 800b39e:	6005      	str	r5, [r0, #0]
 800b3a0:	60c5      	str	r5, [r0, #12]
 800b3a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b3a4:	68eb      	ldr	r3, [r5, #12]
 800b3a6:	b183      	cbz	r3, 800b3ca <_Balloc+0x42>
 800b3a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b3b0:	b9b8      	cbnz	r0, 800b3e2 <_Balloc+0x5a>
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	fa01 f506 	lsl.w	r5, r1, r6
 800b3b8:	1d6a      	adds	r2, r5, #5
 800b3ba:	0092      	lsls	r2, r2, #2
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f000 fcc1 	bl	800bd44 <_calloc_r>
 800b3c2:	b160      	cbz	r0, 800b3de <_Balloc+0x56>
 800b3c4:	6046      	str	r6, [r0, #4]
 800b3c6:	6085      	str	r5, [r0, #8]
 800b3c8:	e00e      	b.n	800b3e8 <_Balloc+0x60>
 800b3ca:	2221      	movs	r2, #33	; 0x21
 800b3cc:	2104      	movs	r1, #4
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f000 fcb8 	bl	800bd44 <_calloc_r>
 800b3d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3d6:	60e8      	str	r0, [r5, #12]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e4      	bne.n	800b3a8 <_Balloc+0x20>
 800b3de:	2000      	movs	r0, #0
 800b3e0:	bd70      	pop	{r4, r5, r6, pc}
 800b3e2:	6802      	ldr	r2, [r0, #0]
 800b3e4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	6103      	str	r3, [r0, #16]
 800b3ec:	60c3      	str	r3, [r0, #12]
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}

0800b3f0 <_Bfree>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	460d      	mov	r5, r1
 800b3f8:	b93c      	cbnz	r4, 800b40a <_Bfree+0x1a>
 800b3fa:	2010      	movs	r0, #16
 800b3fc:	f7ff fd7c 	bl	800aef8 <malloc>
 800b400:	6270      	str	r0, [r6, #36]	; 0x24
 800b402:	6044      	str	r4, [r0, #4]
 800b404:	6084      	str	r4, [r0, #8]
 800b406:	6004      	str	r4, [r0, #0]
 800b408:	60c4      	str	r4, [r0, #12]
 800b40a:	b13d      	cbz	r5, 800b41c <_Bfree+0x2c>
 800b40c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b40e:	686a      	ldr	r2, [r5, #4]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b416:	6029      	str	r1, [r5, #0]
 800b418:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b41c:	bd70      	pop	{r4, r5, r6, pc}

0800b41e <__multadd>:
 800b41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b422:	461f      	mov	r7, r3
 800b424:	4606      	mov	r6, r0
 800b426:	460c      	mov	r4, r1
 800b428:	2300      	movs	r3, #0
 800b42a:	690d      	ldr	r5, [r1, #16]
 800b42c:	f101 0e14 	add.w	lr, r1, #20
 800b430:	f8de 0000 	ldr.w	r0, [lr]
 800b434:	3301      	adds	r3, #1
 800b436:	b281      	uxth	r1, r0
 800b438:	fb02 7101 	mla	r1, r2, r1, r7
 800b43c:	0c00      	lsrs	r0, r0, #16
 800b43e:	0c0f      	lsrs	r7, r1, #16
 800b440:	fb02 7000 	mla	r0, r2, r0, r7
 800b444:	b289      	uxth	r1, r1
 800b446:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b44a:	429d      	cmp	r5, r3
 800b44c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b450:	f84e 1b04 	str.w	r1, [lr], #4
 800b454:	dcec      	bgt.n	800b430 <__multadd+0x12>
 800b456:	b1d7      	cbz	r7, 800b48e <__multadd+0x70>
 800b458:	68a3      	ldr	r3, [r4, #8]
 800b45a:	429d      	cmp	r5, r3
 800b45c:	db12      	blt.n	800b484 <__multadd+0x66>
 800b45e:	6861      	ldr	r1, [r4, #4]
 800b460:	4630      	mov	r0, r6
 800b462:	3101      	adds	r1, #1
 800b464:	f7ff ff90 	bl	800b388 <_Balloc>
 800b468:	4680      	mov	r8, r0
 800b46a:	6922      	ldr	r2, [r4, #16]
 800b46c:	f104 010c 	add.w	r1, r4, #12
 800b470:	3202      	adds	r2, #2
 800b472:	0092      	lsls	r2, r2, #2
 800b474:	300c      	adds	r0, #12
 800b476:	f7fd feaf 	bl	80091d8 <memcpy>
 800b47a:	4621      	mov	r1, r4
 800b47c:	4630      	mov	r0, r6
 800b47e:	f7ff ffb7 	bl	800b3f0 <_Bfree>
 800b482:	4644      	mov	r4, r8
 800b484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b488:	3501      	adds	r5, #1
 800b48a:	615f      	str	r7, [r3, #20]
 800b48c:	6125      	str	r5, [r4, #16]
 800b48e:	4620      	mov	r0, r4
 800b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b494 <__hi0bits>:
 800b494:	0c02      	lsrs	r2, r0, #16
 800b496:	0412      	lsls	r2, r2, #16
 800b498:	4603      	mov	r3, r0
 800b49a:	b9b2      	cbnz	r2, 800b4ca <__hi0bits+0x36>
 800b49c:	0403      	lsls	r3, r0, #16
 800b49e:	2010      	movs	r0, #16
 800b4a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b4a4:	bf04      	itt	eq
 800b4a6:	021b      	lsleq	r3, r3, #8
 800b4a8:	3008      	addeq	r0, #8
 800b4aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b4ae:	bf04      	itt	eq
 800b4b0:	011b      	lsleq	r3, r3, #4
 800b4b2:	3004      	addeq	r0, #4
 800b4b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b4b8:	bf04      	itt	eq
 800b4ba:	009b      	lsleq	r3, r3, #2
 800b4bc:	3002      	addeq	r0, #2
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	db06      	blt.n	800b4d0 <__hi0bits+0x3c>
 800b4c2:	005b      	lsls	r3, r3, #1
 800b4c4:	d503      	bpl.n	800b4ce <__hi0bits+0x3a>
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	4770      	bx	lr
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	e7e8      	b.n	800b4a0 <__hi0bits+0xc>
 800b4ce:	2020      	movs	r0, #32
 800b4d0:	4770      	bx	lr

0800b4d2 <__lo0bits>:
 800b4d2:	6803      	ldr	r3, [r0, #0]
 800b4d4:	4601      	mov	r1, r0
 800b4d6:	f013 0207 	ands.w	r2, r3, #7
 800b4da:	d00b      	beq.n	800b4f4 <__lo0bits+0x22>
 800b4dc:	07da      	lsls	r2, r3, #31
 800b4de:	d423      	bmi.n	800b528 <__lo0bits+0x56>
 800b4e0:	0798      	lsls	r0, r3, #30
 800b4e2:	bf49      	itett	mi
 800b4e4:	085b      	lsrmi	r3, r3, #1
 800b4e6:	089b      	lsrpl	r3, r3, #2
 800b4e8:	2001      	movmi	r0, #1
 800b4ea:	600b      	strmi	r3, [r1, #0]
 800b4ec:	bf5c      	itt	pl
 800b4ee:	600b      	strpl	r3, [r1, #0]
 800b4f0:	2002      	movpl	r0, #2
 800b4f2:	4770      	bx	lr
 800b4f4:	b298      	uxth	r0, r3
 800b4f6:	b9a8      	cbnz	r0, 800b524 <__lo0bits+0x52>
 800b4f8:	2010      	movs	r0, #16
 800b4fa:	0c1b      	lsrs	r3, r3, #16
 800b4fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b500:	bf04      	itt	eq
 800b502:	0a1b      	lsreq	r3, r3, #8
 800b504:	3008      	addeq	r0, #8
 800b506:	071a      	lsls	r2, r3, #28
 800b508:	bf04      	itt	eq
 800b50a:	091b      	lsreq	r3, r3, #4
 800b50c:	3004      	addeq	r0, #4
 800b50e:	079a      	lsls	r2, r3, #30
 800b510:	bf04      	itt	eq
 800b512:	089b      	lsreq	r3, r3, #2
 800b514:	3002      	addeq	r0, #2
 800b516:	07da      	lsls	r2, r3, #31
 800b518:	d402      	bmi.n	800b520 <__lo0bits+0x4e>
 800b51a:	085b      	lsrs	r3, r3, #1
 800b51c:	d006      	beq.n	800b52c <__lo0bits+0x5a>
 800b51e:	3001      	adds	r0, #1
 800b520:	600b      	str	r3, [r1, #0]
 800b522:	4770      	bx	lr
 800b524:	4610      	mov	r0, r2
 800b526:	e7e9      	b.n	800b4fc <__lo0bits+0x2a>
 800b528:	2000      	movs	r0, #0
 800b52a:	4770      	bx	lr
 800b52c:	2020      	movs	r0, #32
 800b52e:	4770      	bx	lr

0800b530 <__i2b>:
 800b530:	b510      	push	{r4, lr}
 800b532:	460c      	mov	r4, r1
 800b534:	2101      	movs	r1, #1
 800b536:	f7ff ff27 	bl	800b388 <_Balloc>
 800b53a:	2201      	movs	r2, #1
 800b53c:	6144      	str	r4, [r0, #20]
 800b53e:	6102      	str	r2, [r0, #16]
 800b540:	bd10      	pop	{r4, pc}

0800b542 <__multiply>:
 800b542:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b546:	4614      	mov	r4, r2
 800b548:	690a      	ldr	r2, [r1, #16]
 800b54a:	6923      	ldr	r3, [r4, #16]
 800b54c:	4689      	mov	r9, r1
 800b54e:	429a      	cmp	r2, r3
 800b550:	bfbe      	ittt	lt
 800b552:	460b      	movlt	r3, r1
 800b554:	46a1      	movlt	r9, r4
 800b556:	461c      	movlt	r4, r3
 800b558:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b55c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b560:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b564:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b568:	eb07 060a 	add.w	r6, r7, sl
 800b56c:	429e      	cmp	r6, r3
 800b56e:	bfc8      	it	gt
 800b570:	3101      	addgt	r1, #1
 800b572:	f7ff ff09 	bl	800b388 <_Balloc>
 800b576:	f100 0514 	add.w	r5, r0, #20
 800b57a:	462b      	mov	r3, r5
 800b57c:	2200      	movs	r2, #0
 800b57e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b582:	4543      	cmp	r3, r8
 800b584:	d316      	bcc.n	800b5b4 <__multiply+0x72>
 800b586:	f104 0214 	add.w	r2, r4, #20
 800b58a:	f109 0114 	add.w	r1, r9, #20
 800b58e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800b592:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	9c01      	ldr	r4, [sp, #4]
 800b59a:	4613      	mov	r3, r2
 800b59c:	4294      	cmp	r4, r2
 800b59e:	d80c      	bhi.n	800b5ba <__multiply+0x78>
 800b5a0:	2e00      	cmp	r6, #0
 800b5a2:	dd03      	ble.n	800b5ac <__multiply+0x6a>
 800b5a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d054      	beq.n	800b656 <__multiply+0x114>
 800b5ac:	6106      	str	r6, [r0, #16]
 800b5ae:	b003      	add	sp, #12
 800b5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b4:	f843 2b04 	str.w	r2, [r3], #4
 800b5b8:	e7e3      	b.n	800b582 <__multiply+0x40>
 800b5ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5be:	3204      	adds	r2, #4
 800b5c0:	f1ba 0f00 	cmp.w	sl, #0
 800b5c4:	d020      	beq.n	800b608 <__multiply+0xc6>
 800b5c6:	46ae      	mov	lr, r5
 800b5c8:	4689      	mov	r9, r1
 800b5ca:	f04f 0c00 	mov.w	ip, #0
 800b5ce:	f859 4b04 	ldr.w	r4, [r9], #4
 800b5d2:	f8be b000 	ldrh.w	fp, [lr]
 800b5d6:	b2a3      	uxth	r3, r4
 800b5d8:	fb0a b303 	mla	r3, sl, r3, fp
 800b5dc:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800b5e0:	f8de 4000 	ldr.w	r4, [lr]
 800b5e4:	4463      	add	r3, ip
 800b5e6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800b5ea:	fb0a c40b 	mla	r4, sl, fp, ip
 800b5ee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b5f8:	454f      	cmp	r7, r9
 800b5fa:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800b5fe:	f84e 3b04 	str.w	r3, [lr], #4
 800b602:	d8e4      	bhi.n	800b5ce <__multiply+0x8c>
 800b604:	f8ce c000 	str.w	ip, [lr]
 800b608:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800b60c:	f1b9 0f00 	cmp.w	r9, #0
 800b610:	d01f      	beq.n	800b652 <__multiply+0x110>
 800b612:	46ae      	mov	lr, r5
 800b614:	468c      	mov	ip, r1
 800b616:	f04f 0a00 	mov.w	sl, #0
 800b61a:	682b      	ldr	r3, [r5, #0]
 800b61c:	f8bc 4000 	ldrh.w	r4, [ip]
 800b620:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b624:	b29b      	uxth	r3, r3
 800b626:	fb09 b404 	mla	r4, r9, r4, fp
 800b62a:	44a2      	add	sl, r4
 800b62c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800b630:	f84e 3b04 	str.w	r3, [lr], #4
 800b634:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b638:	f8be 4000 	ldrh.w	r4, [lr]
 800b63c:	0c1b      	lsrs	r3, r3, #16
 800b63e:	fb09 4303 	mla	r3, r9, r3, r4
 800b642:	4567      	cmp	r7, ip
 800b644:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800b648:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b64c:	d8e6      	bhi.n	800b61c <__multiply+0xda>
 800b64e:	f8ce 3000 	str.w	r3, [lr]
 800b652:	3504      	adds	r5, #4
 800b654:	e7a0      	b.n	800b598 <__multiply+0x56>
 800b656:	3e01      	subs	r6, #1
 800b658:	e7a2      	b.n	800b5a0 <__multiply+0x5e>
	...

0800b65c <__pow5mult>:
 800b65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b660:	4615      	mov	r5, r2
 800b662:	f012 0203 	ands.w	r2, r2, #3
 800b666:	4606      	mov	r6, r0
 800b668:	460f      	mov	r7, r1
 800b66a:	d007      	beq.n	800b67c <__pow5mult+0x20>
 800b66c:	4c21      	ldr	r4, [pc, #132]	; (800b6f4 <__pow5mult+0x98>)
 800b66e:	3a01      	subs	r2, #1
 800b670:	2300      	movs	r3, #0
 800b672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b676:	f7ff fed2 	bl	800b41e <__multadd>
 800b67a:	4607      	mov	r7, r0
 800b67c:	10ad      	asrs	r5, r5, #2
 800b67e:	d035      	beq.n	800b6ec <__pow5mult+0x90>
 800b680:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b682:	b93c      	cbnz	r4, 800b694 <__pow5mult+0x38>
 800b684:	2010      	movs	r0, #16
 800b686:	f7ff fc37 	bl	800aef8 <malloc>
 800b68a:	6270      	str	r0, [r6, #36]	; 0x24
 800b68c:	6044      	str	r4, [r0, #4]
 800b68e:	6084      	str	r4, [r0, #8]
 800b690:	6004      	str	r4, [r0, #0]
 800b692:	60c4      	str	r4, [r0, #12]
 800b694:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b69c:	b94c      	cbnz	r4, 800b6b2 <__pow5mult+0x56>
 800b69e:	f240 2171 	movw	r1, #625	; 0x271
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f7ff ff44 	bl	800b530 <__i2b>
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6b0:	6003      	str	r3, [r0, #0]
 800b6b2:	f04f 0800 	mov.w	r8, #0
 800b6b6:	07eb      	lsls	r3, r5, #31
 800b6b8:	d50a      	bpl.n	800b6d0 <__pow5mult+0x74>
 800b6ba:	4639      	mov	r1, r7
 800b6bc:	4622      	mov	r2, r4
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f7ff ff3f 	bl	800b542 <__multiply>
 800b6c4:	4681      	mov	r9, r0
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7ff fe91 	bl	800b3f0 <_Bfree>
 800b6ce:	464f      	mov	r7, r9
 800b6d0:	106d      	asrs	r5, r5, #1
 800b6d2:	d00b      	beq.n	800b6ec <__pow5mult+0x90>
 800b6d4:	6820      	ldr	r0, [r4, #0]
 800b6d6:	b938      	cbnz	r0, 800b6e8 <__pow5mult+0x8c>
 800b6d8:	4622      	mov	r2, r4
 800b6da:	4621      	mov	r1, r4
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f7ff ff30 	bl	800b542 <__multiply>
 800b6e2:	6020      	str	r0, [r4, #0]
 800b6e4:	f8c0 8000 	str.w	r8, [r0]
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	e7e4      	b.n	800b6b6 <__pow5mult+0x5a>
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6f2:	bf00      	nop
 800b6f4:	080107d8 	.word	0x080107d8

0800b6f8 <__lshift>:
 800b6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	4607      	mov	r7, r0
 800b700:	4616      	mov	r6, r2
 800b702:	6923      	ldr	r3, [r4, #16]
 800b704:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b708:	eb0a 0903 	add.w	r9, sl, r3
 800b70c:	6849      	ldr	r1, [r1, #4]
 800b70e:	68a3      	ldr	r3, [r4, #8]
 800b710:	f109 0501 	add.w	r5, r9, #1
 800b714:	42ab      	cmp	r3, r5
 800b716:	db31      	blt.n	800b77c <__lshift+0x84>
 800b718:	4638      	mov	r0, r7
 800b71a:	f7ff fe35 	bl	800b388 <_Balloc>
 800b71e:	2200      	movs	r2, #0
 800b720:	4680      	mov	r8, r0
 800b722:	4611      	mov	r1, r2
 800b724:	f100 0314 	add.w	r3, r0, #20
 800b728:	4552      	cmp	r2, sl
 800b72a:	db2a      	blt.n	800b782 <__lshift+0x8a>
 800b72c:	6920      	ldr	r0, [r4, #16]
 800b72e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b732:	f104 0114 	add.w	r1, r4, #20
 800b736:	f016 021f 	ands.w	r2, r6, #31
 800b73a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b73e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800b742:	d022      	beq.n	800b78a <__lshift+0x92>
 800b744:	2000      	movs	r0, #0
 800b746:	f1c2 0c20 	rsb	ip, r2, #32
 800b74a:	680e      	ldr	r6, [r1, #0]
 800b74c:	4096      	lsls	r6, r2
 800b74e:	4330      	orrs	r0, r6
 800b750:	f843 0b04 	str.w	r0, [r3], #4
 800b754:	f851 0b04 	ldr.w	r0, [r1], #4
 800b758:	458e      	cmp	lr, r1
 800b75a:	fa20 f00c 	lsr.w	r0, r0, ip
 800b75e:	d8f4      	bhi.n	800b74a <__lshift+0x52>
 800b760:	6018      	str	r0, [r3, #0]
 800b762:	b108      	cbz	r0, 800b768 <__lshift+0x70>
 800b764:	f109 0502 	add.w	r5, r9, #2
 800b768:	3d01      	subs	r5, #1
 800b76a:	4638      	mov	r0, r7
 800b76c:	f8c8 5010 	str.w	r5, [r8, #16]
 800b770:	4621      	mov	r1, r4
 800b772:	f7ff fe3d 	bl	800b3f0 <_Bfree>
 800b776:	4640      	mov	r0, r8
 800b778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b77c:	3101      	adds	r1, #1
 800b77e:	005b      	lsls	r3, r3, #1
 800b780:	e7c8      	b.n	800b714 <__lshift+0x1c>
 800b782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b786:	3201      	adds	r2, #1
 800b788:	e7ce      	b.n	800b728 <__lshift+0x30>
 800b78a:	3b04      	subs	r3, #4
 800b78c:	f851 2b04 	ldr.w	r2, [r1], #4
 800b790:	458e      	cmp	lr, r1
 800b792:	f843 2f04 	str.w	r2, [r3, #4]!
 800b796:	d8f9      	bhi.n	800b78c <__lshift+0x94>
 800b798:	e7e6      	b.n	800b768 <__lshift+0x70>

0800b79a <__mcmp>:
 800b79a:	6903      	ldr	r3, [r0, #16]
 800b79c:	690a      	ldr	r2, [r1, #16]
 800b79e:	b530      	push	{r4, r5, lr}
 800b7a0:	1a9b      	subs	r3, r3, r2
 800b7a2:	d10c      	bne.n	800b7be <__mcmp+0x24>
 800b7a4:	0092      	lsls	r2, r2, #2
 800b7a6:	3014      	adds	r0, #20
 800b7a8:	3114      	adds	r1, #20
 800b7aa:	1884      	adds	r4, r0, r2
 800b7ac:	4411      	add	r1, r2
 800b7ae:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b7b2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b7b6:	4295      	cmp	r5, r2
 800b7b8:	d003      	beq.n	800b7c2 <__mcmp+0x28>
 800b7ba:	d305      	bcc.n	800b7c8 <__mcmp+0x2e>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	4618      	mov	r0, r3
 800b7c0:	bd30      	pop	{r4, r5, pc}
 800b7c2:	42a0      	cmp	r0, r4
 800b7c4:	d3f3      	bcc.n	800b7ae <__mcmp+0x14>
 800b7c6:	e7fa      	b.n	800b7be <__mcmp+0x24>
 800b7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7cc:	e7f7      	b.n	800b7be <__mcmp+0x24>

0800b7ce <__mdiff>:
 800b7ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d2:	460d      	mov	r5, r1
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	4611      	mov	r1, r2
 800b7d8:	4628      	mov	r0, r5
 800b7da:	4614      	mov	r4, r2
 800b7dc:	f7ff ffdd 	bl	800b79a <__mcmp>
 800b7e0:	1e06      	subs	r6, r0, #0
 800b7e2:	d108      	bne.n	800b7f6 <__mdiff+0x28>
 800b7e4:	4631      	mov	r1, r6
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	f7ff fdce 	bl	800b388 <_Balloc>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	6146      	str	r6, [r0, #20]
 800b7f0:	6103      	str	r3, [r0, #16]
 800b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f6:	bfa4      	itt	ge
 800b7f8:	4623      	movge	r3, r4
 800b7fa:	462c      	movge	r4, r5
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	6861      	ldr	r1, [r4, #4]
 800b800:	bfa6      	itte	ge
 800b802:	461d      	movge	r5, r3
 800b804:	2600      	movge	r6, #0
 800b806:	2601      	movlt	r6, #1
 800b808:	f7ff fdbe 	bl	800b388 <_Balloc>
 800b80c:	f04f 0c00 	mov.w	ip, #0
 800b810:	60c6      	str	r6, [r0, #12]
 800b812:	692b      	ldr	r3, [r5, #16]
 800b814:	6926      	ldr	r6, [r4, #16]
 800b816:	f104 0214 	add.w	r2, r4, #20
 800b81a:	f105 0914 	add.w	r9, r5, #20
 800b81e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b822:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b826:	f100 0114 	add.w	r1, r0, #20
 800b82a:	f852 ab04 	ldr.w	sl, [r2], #4
 800b82e:	f859 5b04 	ldr.w	r5, [r9], #4
 800b832:	fa1f f38a 	uxth.w	r3, sl
 800b836:	4463      	add	r3, ip
 800b838:	b2ac      	uxth	r4, r5
 800b83a:	1b1b      	subs	r3, r3, r4
 800b83c:	0c2c      	lsrs	r4, r5, #16
 800b83e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b842:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b846:	b29b      	uxth	r3, r3
 800b848:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b84c:	45c8      	cmp	r8, r9
 800b84e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b852:	4696      	mov	lr, r2
 800b854:	f841 4b04 	str.w	r4, [r1], #4
 800b858:	d8e7      	bhi.n	800b82a <__mdiff+0x5c>
 800b85a:	45be      	cmp	lr, r7
 800b85c:	d305      	bcc.n	800b86a <__mdiff+0x9c>
 800b85e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b862:	b18b      	cbz	r3, 800b888 <__mdiff+0xba>
 800b864:	6106      	str	r6, [r0, #16]
 800b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b86e:	b2a2      	uxth	r2, r4
 800b870:	4462      	add	r2, ip
 800b872:	1413      	asrs	r3, r2, #16
 800b874:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b878:	b292      	uxth	r2, r2
 800b87a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b87e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b882:	f841 2b04 	str.w	r2, [r1], #4
 800b886:	e7e8      	b.n	800b85a <__mdiff+0x8c>
 800b888:	3e01      	subs	r6, #1
 800b88a:	e7e8      	b.n	800b85e <__mdiff+0x90>

0800b88c <__d2b>:
 800b88c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b890:	461c      	mov	r4, r3
 800b892:	2101      	movs	r1, #1
 800b894:	4690      	mov	r8, r2
 800b896:	9e08      	ldr	r6, [sp, #32]
 800b898:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b89a:	f7ff fd75 	bl	800b388 <_Balloc>
 800b89e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b8a2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b8a6:	4607      	mov	r7, r0
 800b8a8:	bb34      	cbnz	r4, 800b8f8 <__d2b+0x6c>
 800b8aa:	9201      	str	r2, [sp, #4]
 800b8ac:	f1b8 0f00 	cmp.w	r8, #0
 800b8b0:	d027      	beq.n	800b902 <__d2b+0x76>
 800b8b2:	a802      	add	r0, sp, #8
 800b8b4:	f840 8d08 	str.w	r8, [r0, #-8]!
 800b8b8:	f7ff fe0b 	bl	800b4d2 <__lo0bits>
 800b8bc:	9900      	ldr	r1, [sp, #0]
 800b8be:	b1f0      	cbz	r0, 800b8fe <__d2b+0x72>
 800b8c0:	9a01      	ldr	r2, [sp, #4]
 800b8c2:	f1c0 0320 	rsb	r3, r0, #32
 800b8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ca:	430b      	orrs	r3, r1
 800b8cc:	40c2      	lsrs	r2, r0
 800b8ce:	617b      	str	r3, [r7, #20]
 800b8d0:	9201      	str	r2, [sp, #4]
 800b8d2:	9b01      	ldr	r3, [sp, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	bf14      	ite	ne
 800b8d8:	2102      	movne	r1, #2
 800b8da:	2101      	moveq	r1, #1
 800b8dc:	61bb      	str	r3, [r7, #24]
 800b8de:	6139      	str	r1, [r7, #16]
 800b8e0:	b1c4      	cbz	r4, 800b914 <__d2b+0x88>
 800b8e2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b8e6:	4404      	add	r4, r0
 800b8e8:	6034      	str	r4, [r6, #0]
 800b8ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8ee:	6028      	str	r0, [r5, #0]
 800b8f0:	4638      	mov	r0, r7
 800b8f2:	b002      	add	sp, #8
 800b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b8fc:	e7d5      	b.n	800b8aa <__d2b+0x1e>
 800b8fe:	6179      	str	r1, [r7, #20]
 800b900:	e7e7      	b.n	800b8d2 <__d2b+0x46>
 800b902:	a801      	add	r0, sp, #4
 800b904:	f7ff fde5 	bl	800b4d2 <__lo0bits>
 800b908:	2101      	movs	r1, #1
 800b90a:	9b01      	ldr	r3, [sp, #4]
 800b90c:	6139      	str	r1, [r7, #16]
 800b90e:	617b      	str	r3, [r7, #20]
 800b910:	3020      	adds	r0, #32
 800b912:	e7e5      	b.n	800b8e0 <__d2b+0x54>
 800b914:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b918:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b91c:	6030      	str	r0, [r6, #0]
 800b91e:	6918      	ldr	r0, [r3, #16]
 800b920:	f7ff fdb8 	bl	800b494 <__hi0bits>
 800b924:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b928:	e7e1      	b.n	800b8ee <__d2b+0x62>
	...

0800b92c <_realloc_r>:
 800b92c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b930:	4682      	mov	sl, r0
 800b932:	460c      	mov	r4, r1
 800b934:	b929      	cbnz	r1, 800b942 <_realloc_r+0x16>
 800b936:	4611      	mov	r1, r2
 800b938:	b003      	add	sp, #12
 800b93a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93e:	f7ff bae3 	b.w	800af08 <_malloc_r>
 800b942:	9201      	str	r2, [sp, #4]
 800b944:	f7ff fd14 	bl	800b370 <__malloc_lock>
 800b948:	9a01      	ldr	r2, [sp, #4]
 800b94a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b94e:	f102 080b 	add.w	r8, r2, #11
 800b952:	f1b8 0f16 	cmp.w	r8, #22
 800b956:	f1a4 0908 	sub.w	r9, r4, #8
 800b95a:	f025 0603 	bic.w	r6, r5, #3
 800b95e:	d90a      	bls.n	800b976 <_realloc_r+0x4a>
 800b960:	f038 0807 	bics.w	r8, r8, #7
 800b964:	d509      	bpl.n	800b97a <_realloc_r+0x4e>
 800b966:	230c      	movs	r3, #12
 800b968:	2700      	movs	r7, #0
 800b96a:	f8ca 3000 	str.w	r3, [sl]
 800b96e:	4638      	mov	r0, r7
 800b970:	b003      	add	sp, #12
 800b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b976:	f04f 0810 	mov.w	r8, #16
 800b97a:	4590      	cmp	r8, r2
 800b97c:	d3f3      	bcc.n	800b966 <_realloc_r+0x3a>
 800b97e:	45b0      	cmp	r8, r6
 800b980:	f340 8148 	ble.w	800bc14 <_realloc_r+0x2e8>
 800b984:	4ba9      	ldr	r3, [pc, #676]	; (800bc2c <_realloc_r+0x300>)
 800b986:	eb09 0106 	add.w	r1, r9, r6
 800b98a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800b98e:	469b      	mov	fp, r3
 800b990:	4571      	cmp	r1, lr
 800b992:	684b      	ldr	r3, [r1, #4]
 800b994:	d005      	beq.n	800b9a2 <_realloc_r+0x76>
 800b996:	f023 0001 	bic.w	r0, r3, #1
 800b99a:	4408      	add	r0, r1
 800b99c:	6840      	ldr	r0, [r0, #4]
 800b99e:	07c7      	lsls	r7, r0, #31
 800b9a0:	d447      	bmi.n	800ba32 <_realloc_r+0x106>
 800b9a2:	f023 0303 	bic.w	r3, r3, #3
 800b9a6:	4571      	cmp	r1, lr
 800b9a8:	eb06 0703 	add.w	r7, r6, r3
 800b9ac:	d119      	bne.n	800b9e2 <_realloc_r+0xb6>
 800b9ae:	f108 0010 	add.w	r0, r8, #16
 800b9b2:	4287      	cmp	r7, r0
 800b9b4:	db3f      	blt.n	800ba36 <_realloc_r+0x10a>
 800b9b6:	eba7 0708 	sub.w	r7, r7, r8
 800b9ba:	eb09 0308 	add.w	r3, r9, r8
 800b9be:	f047 0701 	orr.w	r7, r7, #1
 800b9c2:	f8cb 3008 	str.w	r3, [fp, #8]
 800b9c6:	605f      	str	r7, [r3, #4]
 800b9c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b9cc:	4650      	mov	r0, sl
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	ea43 0308 	orr.w	r3, r3, r8
 800b9d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9da:	f7ff fccf 	bl	800b37c <__malloc_unlock>
 800b9de:	4627      	mov	r7, r4
 800b9e0:	e7c5      	b.n	800b96e <_realloc_r+0x42>
 800b9e2:	45b8      	cmp	r8, r7
 800b9e4:	dc27      	bgt.n	800ba36 <_realloc_r+0x10a>
 800b9e6:	68cb      	ldr	r3, [r1, #12]
 800b9e8:	688a      	ldr	r2, [r1, #8]
 800b9ea:	60d3      	str	r3, [r2, #12]
 800b9ec:	609a      	str	r2, [r3, #8]
 800b9ee:	eba7 0008 	sub.w	r0, r7, r8
 800b9f2:	280f      	cmp	r0, #15
 800b9f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b9f8:	eb09 0207 	add.w	r2, r9, r7
 800b9fc:	f240 810c 	bls.w	800bc18 <_realloc_r+0x2ec>
 800ba00:	f003 0301 	and.w	r3, r3, #1
 800ba04:	eb09 0108 	add.w	r1, r9, r8
 800ba08:	ea43 0308 	orr.w	r3, r3, r8
 800ba0c:	f040 0001 	orr.w	r0, r0, #1
 800ba10:	f8c9 3004 	str.w	r3, [r9, #4]
 800ba14:	6048      	str	r0, [r1, #4]
 800ba16:	6853      	ldr	r3, [r2, #4]
 800ba18:	3108      	adds	r1, #8
 800ba1a:	f043 0301 	orr.w	r3, r3, #1
 800ba1e:	6053      	str	r3, [r2, #4]
 800ba20:	4650      	mov	r0, sl
 800ba22:	f000 fa13 	bl	800be4c <_free_r>
 800ba26:	4650      	mov	r0, sl
 800ba28:	f7ff fca8 	bl	800b37c <__malloc_unlock>
 800ba2c:	f109 0708 	add.w	r7, r9, #8
 800ba30:	e79d      	b.n	800b96e <_realloc_r+0x42>
 800ba32:	2300      	movs	r3, #0
 800ba34:	4619      	mov	r1, r3
 800ba36:	07e8      	lsls	r0, r5, #31
 800ba38:	f100 8085 	bmi.w	800bb46 <_realloc_r+0x21a>
 800ba3c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800ba40:	eba9 0505 	sub.w	r5, r9, r5
 800ba44:	6868      	ldr	r0, [r5, #4]
 800ba46:	f020 0003 	bic.w	r0, r0, #3
 800ba4a:	4430      	add	r0, r6
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	d077      	beq.n	800bb40 <_realloc_r+0x214>
 800ba50:	4571      	cmp	r1, lr
 800ba52:	d151      	bne.n	800baf8 <_realloc_r+0x1cc>
 800ba54:	4403      	add	r3, r0
 800ba56:	f108 0110 	add.w	r1, r8, #16
 800ba5a:	428b      	cmp	r3, r1
 800ba5c:	db70      	blt.n	800bb40 <_realloc_r+0x214>
 800ba5e:	462f      	mov	r7, r5
 800ba60:	68ea      	ldr	r2, [r5, #12]
 800ba62:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800ba66:	60ca      	str	r2, [r1, #12]
 800ba68:	6091      	str	r1, [r2, #8]
 800ba6a:	1f32      	subs	r2, r6, #4
 800ba6c:	2a24      	cmp	r2, #36	; 0x24
 800ba6e:	d83c      	bhi.n	800baea <_realloc_r+0x1be>
 800ba70:	2a13      	cmp	r2, #19
 800ba72:	d937      	bls.n	800bae4 <_realloc_r+0x1b8>
 800ba74:	6821      	ldr	r1, [r4, #0]
 800ba76:	2a1b      	cmp	r2, #27
 800ba78:	60a9      	str	r1, [r5, #8]
 800ba7a:	6861      	ldr	r1, [r4, #4]
 800ba7c:	60e9      	str	r1, [r5, #12]
 800ba7e:	d81c      	bhi.n	800baba <_realloc_r+0x18e>
 800ba80:	f105 0210 	add.w	r2, r5, #16
 800ba84:	f104 0108 	add.w	r1, r4, #8
 800ba88:	6808      	ldr	r0, [r1, #0]
 800ba8a:	6010      	str	r0, [r2, #0]
 800ba8c:	6848      	ldr	r0, [r1, #4]
 800ba8e:	6050      	str	r0, [r2, #4]
 800ba90:	6889      	ldr	r1, [r1, #8]
 800ba92:	6091      	str	r1, [r2, #8]
 800ba94:	eba3 0308 	sub.w	r3, r3, r8
 800ba98:	eb05 0208 	add.w	r2, r5, r8
 800ba9c:	f043 0301 	orr.w	r3, r3, #1
 800baa0:	f8cb 2008 	str.w	r2, [fp, #8]
 800baa4:	6053      	str	r3, [r2, #4]
 800baa6:	686b      	ldr	r3, [r5, #4]
 800baa8:	f003 0301 	and.w	r3, r3, #1
 800baac:	ea43 0308 	orr.w	r3, r3, r8
 800bab0:	606b      	str	r3, [r5, #4]
 800bab2:	4650      	mov	r0, sl
 800bab4:	f7ff fc62 	bl	800b37c <__malloc_unlock>
 800bab8:	e759      	b.n	800b96e <_realloc_r+0x42>
 800baba:	68a1      	ldr	r1, [r4, #8]
 800babc:	2a24      	cmp	r2, #36	; 0x24
 800babe:	6129      	str	r1, [r5, #16]
 800bac0:	68e1      	ldr	r1, [r4, #12]
 800bac2:	bf18      	it	ne
 800bac4:	f105 0218 	addne.w	r2, r5, #24
 800bac8:	6169      	str	r1, [r5, #20]
 800baca:	bf09      	itett	eq
 800bacc:	6922      	ldreq	r2, [r4, #16]
 800bace:	f104 0110 	addne.w	r1, r4, #16
 800bad2:	61aa      	streq	r2, [r5, #24]
 800bad4:	6960      	ldreq	r0, [r4, #20]
 800bad6:	bf02      	ittt	eq
 800bad8:	f105 0220 	addeq.w	r2, r5, #32
 800badc:	f104 0118 	addeq.w	r1, r4, #24
 800bae0:	61e8      	streq	r0, [r5, #28]
 800bae2:	e7d1      	b.n	800ba88 <_realloc_r+0x15c>
 800bae4:	463a      	mov	r2, r7
 800bae6:	4621      	mov	r1, r4
 800bae8:	e7ce      	b.n	800ba88 <_realloc_r+0x15c>
 800baea:	4621      	mov	r1, r4
 800baec:	4638      	mov	r0, r7
 800baee:	9301      	str	r3, [sp, #4]
 800baf0:	f7ff fc24 	bl	800b33c <memmove>
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	e7cd      	b.n	800ba94 <_realloc_r+0x168>
 800baf8:	18c7      	adds	r7, r0, r3
 800bafa:	45b8      	cmp	r8, r7
 800bafc:	dc20      	bgt.n	800bb40 <_realloc_r+0x214>
 800bafe:	68cb      	ldr	r3, [r1, #12]
 800bb00:	688a      	ldr	r2, [r1, #8]
 800bb02:	60d3      	str	r3, [r2, #12]
 800bb04:	609a      	str	r2, [r3, #8]
 800bb06:	4628      	mov	r0, r5
 800bb08:	68eb      	ldr	r3, [r5, #12]
 800bb0a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800bb0e:	60d3      	str	r3, [r2, #12]
 800bb10:	609a      	str	r2, [r3, #8]
 800bb12:	1f32      	subs	r2, r6, #4
 800bb14:	2a24      	cmp	r2, #36	; 0x24
 800bb16:	d843      	bhi.n	800bba0 <_realloc_r+0x274>
 800bb18:	2a13      	cmp	r2, #19
 800bb1a:	d93f      	bls.n	800bb9c <_realloc_r+0x270>
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	2a1b      	cmp	r2, #27
 800bb20:	60ab      	str	r3, [r5, #8]
 800bb22:	6863      	ldr	r3, [r4, #4]
 800bb24:	60eb      	str	r3, [r5, #12]
 800bb26:	d824      	bhi.n	800bb72 <_realloc_r+0x246>
 800bb28:	f105 0010 	add.w	r0, r5, #16
 800bb2c:	f104 0308 	add.w	r3, r4, #8
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	6002      	str	r2, [r0, #0]
 800bb34:	685a      	ldr	r2, [r3, #4]
 800bb36:	6042      	str	r2, [r0, #4]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	6083      	str	r3, [r0, #8]
 800bb3c:	46a9      	mov	r9, r5
 800bb3e:	e756      	b.n	800b9ee <_realloc_r+0xc2>
 800bb40:	4580      	cmp	r8, r0
 800bb42:	4607      	mov	r7, r0
 800bb44:	dddf      	ble.n	800bb06 <_realloc_r+0x1da>
 800bb46:	4611      	mov	r1, r2
 800bb48:	4650      	mov	r0, sl
 800bb4a:	f7ff f9dd 	bl	800af08 <_malloc_r>
 800bb4e:	4607      	mov	r7, r0
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d0ae      	beq.n	800bab2 <_realloc_r+0x186>
 800bb54:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bb58:	f1a0 0208 	sub.w	r2, r0, #8
 800bb5c:	f023 0301 	bic.w	r3, r3, #1
 800bb60:	444b      	add	r3, r9
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d120      	bne.n	800bba8 <_realloc_r+0x27c>
 800bb66:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800bb6a:	f027 0703 	bic.w	r7, r7, #3
 800bb6e:	4437      	add	r7, r6
 800bb70:	e73d      	b.n	800b9ee <_realloc_r+0xc2>
 800bb72:	68a3      	ldr	r3, [r4, #8]
 800bb74:	2a24      	cmp	r2, #36	; 0x24
 800bb76:	612b      	str	r3, [r5, #16]
 800bb78:	68e3      	ldr	r3, [r4, #12]
 800bb7a:	bf18      	it	ne
 800bb7c:	f105 0018 	addne.w	r0, r5, #24
 800bb80:	616b      	str	r3, [r5, #20]
 800bb82:	bf09      	itett	eq
 800bb84:	6923      	ldreq	r3, [r4, #16]
 800bb86:	f104 0310 	addne.w	r3, r4, #16
 800bb8a:	61ab      	streq	r3, [r5, #24]
 800bb8c:	6962      	ldreq	r2, [r4, #20]
 800bb8e:	bf02      	ittt	eq
 800bb90:	f105 0020 	addeq.w	r0, r5, #32
 800bb94:	f104 0318 	addeq.w	r3, r4, #24
 800bb98:	61ea      	streq	r2, [r5, #28]
 800bb9a:	e7c9      	b.n	800bb30 <_realloc_r+0x204>
 800bb9c:	4623      	mov	r3, r4
 800bb9e:	e7c7      	b.n	800bb30 <_realloc_r+0x204>
 800bba0:	4621      	mov	r1, r4
 800bba2:	f7ff fbcb 	bl	800b33c <memmove>
 800bba6:	e7c9      	b.n	800bb3c <_realloc_r+0x210>
 800bba8:	1f32      	subs	r2, r6, #4
 800bbaa:	2a24      	cmp	r2, #36	; 0x24
 800bbac:	d82e      	bhi.n	800bc0c <_realloc_r+0x2e0>
 800bbae:	2a13      	cmp	r2, #19
 800bbb0:	d929      	bls.n	800bc06 <_realloc_r+0x2da>
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	2a1b      	cmp	r2, #27
 800bbb6:	6003      	str	r3, [r0, #0]
 800bbb8:	6863      	ldr	r3, [r4, #4]
 800bbba:	6043      	str	r3, [r0, #4]
 800bbbc:	d80e      	bhi.n	800bbdc <_realloc_r+0x2b0>
 800bbbe:	f100 0308 	add.w	r3, r0, #8
 800bbc2:	f104 0208 	add.w	r2, r4, #8
 800bbc6:	6811      	ldr	r1, [r2, #0]
 800bbc8:	6019      	str	r1, [r3, #0]
 800bbca:	6851      	ldr	r1, [r2, #4]
 800bbcc:	6059      	str	r1, [r3, #4]
 800bbce:	6892      	ldr	r2, [r2, #8]
 800bbd0:	609a      	str	r2, [r3, #8]
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	4650      	mov	r0, sl
 800bbd6:	f000 f939 	bl	800be4c <_free_r>
 800bbda:	e76a      	b.n	800bab2 <_realloc_r+0x186>
 800bbdc:	68a3      	ldr	r3, [r4, #8]
 800bbde:	2a24      	cmp	r2, #36	; 0x24
 800bbe0:	6083      	str	r3, [r0, #8]
 800bbe2:	68e3      	ldr	r3, [r4, #12]
 800bbe4:	bf18      	it	ne
 800bbe6:	f104 0210 	addne.w	r2, r4, #16
 800bbea:	60c3      	str	r3, [r0, #12]
 800bbec:	bf09      	itett	eq
 800bbee:	6923      	ldreq	r3, [r4, #16]
 800bbf0:	f100 0310 	addne.w	r3, r0, #16
 800bbf4:	6103      	streq	r3, [r0, #16]
 800bbf6:	6961      	ldreq	r1, [r4, #20]
 800bbf8:	bf02      	ittt	eq
 800bbfa:	f100 0318 	addeq.w	r3, r0, #24
 800bbfe:	f104 0218 	addeq.w	r2, r4, #24
 800bc02:	6141      	streq	r1, [r0, #20]
 800bc04:	e7df      	b.n	800bbc6 <_realloc_r+0x29a>
 800bc06:	4603      	mov	r3, r0
 800bc08:	4622      	mov	r2, r4
 800bc0a:	e7dc      	b.n	800bbc6 <_realloc_r+0x29a>
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	f7ff fb95 	bl	800b33c <memmove>
 800bc12:	e7de      	b.n	800bbd2 <_realloc_r+0x2a6>
 800bc14:	4637      	mov	r7, r6
 800bc16:	e6ea      	b.n	800b9ee <_realloc_r+0xc2>
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	431f      	orrs	r7, r3
 800bc1e:	f8c9 7004 	str.w	r7, [r9, #4]
 800bc22:	6853      	ldr	r3, [r2, #4]
 800bc24:	f043 0301 	orr.w	r3, r3, #1
 800bc28:	6053      	str	r3, [r2, #4]
 800bc2a:	e6fc      	b.n	800ba26 <_realloc_r+0xfa>
 800bc2c:	20000278 	.word	0x20000278

0800bc30 <_sbrk_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	2300      	movs	r3, #0
 800bc34:	4c05      	ldr	r4, [pc, #20]	; (800bc4c <_sbrk_r+0x1c>)
 800bc36:	4605      	mov	r5, r0
 800bc38:	4608      	mov	r0, r1
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	f003 ffe6 	bl	800fc0c <_sbrk>
 800bc40:	1c43      	adds	r3, r0, #1
 800bc42:	d102      	bne.n	800bc4a <_sbrk_r+0x1a>
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	b103      	cbz	r3, 800bc4a <_sbrk_r+0x1a>
 800bc48:	602b      	str	r3, [r5, #0]
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	20001464 	.word	0x20001464

0800bc50 <__ssprint_r>:
 800bc50:	6893      	ldr	r3, [r2, #8]
 800bc52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc56:	4681      	mov	r9, r0
 800bc58:	460c      	mov	r4, r1
 800bc5a:	4617      	mov	r7, r2
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d060      	beq.n	800bd22 <__ssprint_r+0xd2>
 800bc60:	f04f 0b00 	mov.w	fp, #0
 800bc64:	465e      	mov	r6, fp
 800bc66:	f8d2 a000 	ldr.w	sl, [r2]
 800bc6a:	b356      	cbz	r6, 800bcc2 <__ssprint_r+0x72>
 800bc6c:	68a3      	ldr	r3, [r4, #8]
 800bc6e:	429e      	cmp	r6, r3
 800bc70:	d344      	bcc.n	800bcfc <__ssprint_r+0xac>
 800bc72:	89a2      	ldrh	r2, [r4, #12]
 800bc74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc78:	d03e      	beq.n	800bcf8 <__ssprint_r+0xa8>
 800bc7a:	2302      	movs	r3, #2
 800bc7c:	6825      	ldr	r5, [r4, #0]
 800bc7e:	6921      	ldr	r1, [r4, #16]
 800bc80:	eba5 0801 	sub.w	r8, r5, r1
 800bc84:	6965      	ldr	r5, [r4, #20]
 800bc86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc8a:	fb95 f5f3 	sdiv	r5, r5, r3
 800bc8e:	f108 0301 	add.w	r3, r8, #1
 800bc92:	4433      	add	r3, r6
 800bc94:	429d      	cmp	r5, r3
 800bc96:	bf38      	it	cc
 800bc98:	461d      	movcc	r5, r3
 800bc9a:	0553      	lsls	r3, r2, #21
 800bc9c:	d546      	bpl.n	800bd2c <__ssprint_r+0xdc>
 800bc9e:	4629      	mov	r1, r5
 800bca0:	4648      	mov	r0, r9
 800bca2:	f7ff f931 	bl	800af08 <_malloc_r>
 800bca6:	b998      	cbnz	r0, 800bcd0 <__ssprint_r+0x80>
 800bca8:	230c      	movs	r3, #12
 800bcaa:	f8c9 3000 	str.w	r3, [r9]
 800bcae:	89a3      	ldrh	r3, [r4, #12]
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcb8:	81a3      	strh	r3, [r4, #12]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60bb      	str	r3, [r7, #8]
 800bcbe:	607b      	str	r3, [r7, #4]
 800bcc0:	e031      	b.n	800bd26 <__ssprint_r+0xd6>
 800bcc2:	f8da b000 	ldr.w	fp, [sl]
 800bcc6:	f8da 6004 	ldr.w	r6, [sl, #4]
 800bcca:	f10a 0a08 	add.w	sl, sl, #8
 800bcce:	e7cc      	b.n	800bc6a <__ssprint_r+0x1a>
 800bcd0:	4642      	mov	r2, r8
 800bcd2:	6921      	ldr	r1, [r4, #16]
 800bcd4:	9001      	str	r0, [sp, #4]
 800bcd6:	f7fd fa7f 	bl	80091d8 <memcpy>
 800bcda:	89a2      	ldrh	r2, [r4, #12]
 800bcdc:	9b01      	ldr	r3, [sp, #4]
 800bcde:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800bce2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bce6:	81a2      	strh	r2, [r4, #12]
 800bce8:	6123      	str	r3, [r4, #16]
 800bcea:	4443      	add	r3, r8
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	4633      	mov	r3, r6
 800bcf0:	6165      	str	r5, [r4, #20]
 800bcf2:	eba5 0508 	sub.w	r5, r5, r8
 800bcf6:	60a5      	str	r5, [r4, #8]
 800bcf8:	429e      	cmp	r6, r3
 800bcfa:	d200      	bcs.n	800bcfe <__ssprint_r+0xae>
 800bcfc:	4633      	mov	r3, r6
 800bcfe:	461a      	mov	r2, r3
 800bd00:	4659      	mov	r1, fp
 800bd02:	6820      	ldr	r0, [r4, #0]
 800bd04:	9301      	str	r3, [sp, #4]
 800bd06:	f7ff fb19 	bl	800b33c <memmove>
 800bd0a:	68a2      	ldr	r2, [r4, #8]
 800bd0c:	9b01      	ldr	r3, [sp, #4]
 800bd0e:	1ad2      	subs	r2, r2, r3
 800bd10:	60a2      	str	r2, [r4, #8]
 800bd12:	6822      	ldr	r2, [r4, #0]
 800bd14:	4413      	add	r3, r2
 800bd16:	6023      	str	r3, [r4, #0]
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	1b9e      	subs	r6, r3, r6
 800bd1c:	60be      	str	r6, [r7, #8]
 800bd1e:	2e00      	cmp	r6, #0
 800bd20:	d1cf      	bne.n	800bcc2 <__ssprint_r+0x72>
 800bd22:	2000      	movs	r0, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	b003      	add	sp, #12
 800bd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2c:	462a      	mov	r2, r5
 800bd2e:	4648      	mov	r0, r9
 800bd30:	f7ff fdfc 	bl	800b92c <_realloc_r>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d1d6      	bne.n	800bce8 <__ssprint_r+0x98>
 800bd3a:	6921      	ldr	r1, [r4, #16]
 800bd3c:	4648      	mov	r0, r9
 800bd3e:	f000 f885 	bl	800be4c <_free_r>
 800bd42:	e7b1      	b.n	800bca8 <__ssprint_r+0x58>

0800bd44 <_calloc_r>:
 800bd44:	b510      	push	{r4, lr}
 800bd46:	4351      	muls	r1, r2
 800bd48:	f7ff f8de 	bl	800af08 <_malloc_r>
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	b198      	cbz	r0, 800bd78 <_calloc_r+0x34>
 800bd50:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800bd54:	f022 0203 	bic.w	r2, r2, #3
 800bd58:	3a04      	subs	r2, #4
 800bd5a:	2a24      	cmp	r2, #36	; 0x24
 800bd5c:	d81b      	bhi.n	800bd96 <_calloc_r+0x52>
 800bd5e:	2a13      	cmp	r2, #19
 800bd60:	d917      	bls.n	800bd92 <_calloc_r+0x4e>
 800bd62:	2100      	movs	r1, #0
 800bd64:	2a1b      	cmp	r2, #27
 800bd66:	6001      	str	r1, [r0, #0]
 800bd68:	6041      	str	r1, [r0, #4]
 800bd6a:	d807      	bhi.n	800bd7c <_calloc_r+0x38>
 800bd6c:	f100 0308 	add.w	r3, r0, #8
 800bd70:	2200      	movs	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	605a      	str	r2, [r3, #4]
 800bd76:	609a      	str	r2, [r3, #8]
 800bd78:	4620      	mov	r0, r4
 800bd7a:	bd10      	pop	{r4, pc}
 800bd7c:	2a24      	cmp	r2, #36	; 0x24
 800bd7e:	6081      	str	r1, [r0, #8]
 800bd80:	60c1      	str	r1, [r0, #12]
 800bd82:	bf11      	iteee	ne
 800bd84:	f100 0310 	addne.w	r3, r0, #16
 800bd88:	6101      	streq	r1, [r0, #16]
 800bd8a:	f100 0318 	addeq.w	r3, r0, #24
 800bd8e:	6141      	streq	r1, [r0, #20]
 800bd90:	e7ee      	b.n	800bd70 <_calloc_r+0x2c>
 800bd92:	4603      	mov	r3, r0
 800bd94:	e7ec      	b.n	800bd70 <_calloc_r+0x2c>
 800bd96:	2100      	movs	r1, #0
 800bd98:	f7fd fa29 	bl	80091ee <memset>
 800bd9c:	e7ec      	b.n	800bd78 <_calloc_r+0x34>
	...

0800bda0 <_malloc_trim_r>:
 800bda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda4:	4689      	mov	r9, r1
 800bda6:	4f25      	ldr	r7, [pc, #148]	; (800be3c <_malloc_trim_r+0x9c>)
 800bda8:	4606      	mov	r6, r0
 800bdaa:	f7ff fae1 	bl	800b370 <__malloc_lock>
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800be48 <_malloc_trim_r+0xa8>
 800bdb4:	685d      	ldr	r5, [r3, #4]
 800bdb6:	f1a8 0411 	sub.w	r4, r8, #17
 800bdba:	f025 0503 	bic.w	r5, r5, #3
 800bdbe:	eba4 0409 	sub.w	r4, r4, r9
 800bdc2:	442c      	add	r4, r5
 800bdc4:	fbb4 f4f8 	udiv	r4, r4, r8
 800bdc8:	3c01      	subs	r4, #1
 800bdca:	fb08 f404 	mul.w	r4, r8, r4
 800bdce:	4544      	cmp	r4, r8
 800bdd0:	da05      	bge.n	800bdde <_malloc_trim_r+0x3e>
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f7ff fad2 	bl	800b37c <__malloc_unlock>
 800bdd8:	2000      	movs	r0, #0
 800bdda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdde:	2100      	movs	r1, #0
 800bde0:	4630      	mov	r0, r6
 800bde2:	f7ff ff25 	bl	800bc30 <_sbrk_r>
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	442b      	add	r3, r5
 800bdea:	4298      	cmp	r0, r3
 800bdec:	d1f1      	bne.n	800bdd2 <_malloc_trim_r+0x32>
 800bdee:	4261      	negs	r1, r4
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	f7ff ff1d 	bl	800bc30 <_sbrk_r>
 800bdf6:	3001      	adds	r0, #1
 800bdf8:	d110      	bne.n	800be1c <_malloc_trim_r+0x7c>
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	f7ff ff17 	bl	800bc30 <_sbrk_r>
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	1a83      	subs	r3, r0, r2
 800be06:	2b0f      	cmp	r3, #15
 800be08:	dde3      	ble.n	800bdd2 <_malloc_trim_r+0x32>
 800be0a:	490d      	ldr	r1, [pc, #52]	; (800be40 <_malloc_trim_r+0xa0>)
 800be0c:	f043 0301 	orr.w	r3, r3, #1
 800be10:	6809      	ldr	r1, [r1, #0]
 800be12:	6053      	str	r3, [r2, #4]
 800be14:	1a40      	subs	r0, r0, r1
 800be16:	490b      	ldr	r1, [pc, #44]	; (800be44 <_malloc_trim_r+0xa4>)
 800be18:	6008      	str	r0, [r1, #0]
 800be1a:	e7da      	b.n	800bdd2 <_malloc_trim_r+0x32>
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	4a09      	ldr	r2, [pc, #36]	; (800be44 <_malloc_trim_r+0xa4>)
 800be20:	1b2d      	subs	r5, r5, r4
 800be22:	f045 0501 	orr.w	r5, r5, #1
 800be26:	605d      	str	r5, [r3, #4]
 800be28:	6813      	ldr	r3, [r2, #0]
 800be2a:	4630      	mov	r0, r6
 800be2c:	1b1c      	subs	r4, r3, r4
 800be2e:	6014      	str	r4, [r2, #0]
 800be30:	f7ff faa4 	bl	800b37c <__malloc_unlock>
 800be34:	2001      	movs	r0, #1
 800be36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be3a:	bf00      	nop
 800be3c:	20000278 	.word	0x20000278
 800be40:	20000680 	.word	0x20000680
 800be44:	20000a7c 	.word	0x20000a7c
 800be48:	00000080 	.word	0x00000080

0800be4c <_free_r>:
 800be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be50:	4604      	mov	r4, r0
 800be52:	4688      	mov	r8, r1
 800be54:	2900      	cmp	r1, #0
 800be56:	f000 80ab 	beq.w	800bfb0 <_free_r+0x164>
 800be5a:	f7ff fa89 	bl	800b370 <__malloc_lock>
 800be5e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800be62:	4d54      	ldr	r5, [pc, #336]	; (800bfb4 <_free_r+0x168>)
 800be64:	f022 0001 	bic.w	r0, r2, #1
 800be68:	f1a8 0308 	sub.w	r3, r8, #8
 800be6c:	181f      	adds	r7, r3, r0
 800be6e:	68a9      	ldr	r1, [r5, #8]
 800be70:	687e      	ldr	r6, [r7, #4]
 800be72:	428f      	cmp	r7, r1
 800be74:	f026 0603 	bic.w	r6, r6, #3
 800be78:	f002 0201 	and.w	r2, r2, #1
 800be7c:	d11b      	bne.n	800beb6 <_free_r+0x6a>
 800be7e:	4430      	add	r0, r6
 800be80:	b93a      	cbnz	r2, 800be92 <_free_r+0x46>
 800be82:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800be86:	1a9b      	subs	r3, r3, r2
 800be88:	6899      	ldr	r1, [r3, #8]
 800be8a:	4410      	add	r0, r2
 800be8c:	68da      	ldr	r2, [r3, #12]
 800be8e:	60ca      	str	r2, [r1, #12]
 800be90:	6091      	str	r1, [r2, #8]
 800be92:	f040 0201 	orr.w	r2, r0, #1
 800be96:	605a      	str	r2, [r3, #4]
 800be98:	60ab      	str	r3, [r5, #8]
 800be9a:	4b47      	ldr	r3, [pc, #284]	; (800bfb8 <_free_r+0x16c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4298      	cmp	r0, r3
 800bea0:	d304      	bcc.n	800beac <_free_r+0x60>
 800bea2:	4b46      	ldr	r3, [pc, #280]	; (800bfbc <_free_r+0x170>)
 800bea4:	4620      	mov	r0, r4
 800bea6:	6819      	ldr	r1, [r3, #0]
 800bea8:	f7ff ff7a 	bl	800bda0 <_malloc_trim_r>
 800beac:	4620      	mov	r0, r4
 800beae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beb2:	f7ff ba63 	b.w	800b37c <__malloc_unlock>
 800beb6:	607e      	str	r6, [r7, #4]
 800beb8:	2a00      	cmp	r2, #0
 800beba:	d139      	bne.n	800bf30 <_free_r+0xe4>
 800bebc:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800bec0:	f105 0e08 	add.w	lr, r5, #8
 800bec4:	1a5b      	subs	r3, r3, r1
 800bec6:	4408      	add	r0, r1
 800bec8:	6899      	ldr	r1, [r3, #8]
 800beca:	4571      	cmp	r1, lr
 800becc:	d032      	beq.n	800bf34 <_free_r+0xe8>
 800bece:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800bed2:	f8c1 e00c 	str.w	lr, [r1, #12]
 800bed6:	f8ce 1008 	str.w	r1, [lr, #8]
 800beda:	19b9      	adds	r1, r7, r6
 800bedc:	6849      	ldr	r1, [r1, #4]
 800bede:	07c9      	lsls	r1, r1, #31
 800bee0:	d40a      	bmi.n	800bef8 <_free_r+0xac>
 800bee2:	4430      	add	r0, r6
 800bee4:	68b9      	ldr	r1, [r7, #8]
 800bee6:	bb3a      	cbnz	r2, 800bf38 <_free_r+0xec>
 800bee8:	4e35      	ldr	r6, [pc, #212]	; (800bfc0 <_free_r+0x174>)
 800beea:	42b1      	cmp	r1, r6
 800beec:	d124      	bne.n	800bf38 <_free_r+0xec>
 800beee:	2201      	movs	r2, #1
 800bef0:	616b      	str	r3, [r5, #20]
 800bef2:	612b      	str	r3, [r5, #16]
 800bef4:	60d9      	str	r1, [r3, #12]
 800bef6:	6099      	str	r1, [r3, #8]
 800bef8:	f040 0101 	orr.w	r1, r0, #1
 800befc:	6059      	str	r1, [r3, #4]
 800befe:	5018      	str	r0, [r3, r0]
 800bf00:	2a00      	cmp	r2, #0
 800bf02:	d1d3      	bne.n	800beac <_free_r+0x60>
 800bf04:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800bf08:	d21a      	bcs.n	800bf40 <_free_r+0xf4>
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	08c0      	lsrs	r0, r0, #3
 800bf0e:	1081      	asrs	r1, r0, #2
 800bf10:	408a      	lsls	r2, r1
 800bf12:	6869      	ldr	r1, [r5, #4]
 800bf14:	3001      	adds	r0, #1
 800bf16:	430a      	orrs	r2, r1
 800bf18:	606a      	str	r2, [r5, #4]
 800bf1a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800bf1e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800bf22:	3a08      	subs	r2, #8
 800bf24:	60da      	str	r2, [r3, #12]
 800bf26:	6099      	str	r1, [r3, #8]
 800bf28:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800bf2c:	60cb      	str	r3, [r1, #12]
 800bf2e:	e7bd      	b.n	800beac <_free_r+0x60>
 800bf30:	2200      	movs	r2, #0
 800bf32:	e7d2      	b.n	800beda <_free_r+0x8e>
 800bf34:	2201      	movs	r2, #1
 800bf36:	e7d0      	b.n	800beda <_free_r+0x8e>
 800bf38:	68fe      	ldr	r6, [r7, #12]
 800bf3a:	60ce      	str	r6, [r1, #12]
 800bf3c:	60b1      	str	r1, [r6, #8]
 800bf3e:	e7db      	b.n	800bef8 <_free_r+0xac>
 800bf40:	0a42      	lsrs	r2, r0, #9
 800bf42:	2a04      	cmp	r2, #4
 800bf44:	d813      	bhi.n	800bf6e <_free_r+0x122>
 800bf46:	0982      	lsrs	r2, r0, #6
 800bf48:	3238      	adds	r2, #56	; 0x38
 800bf4a:	1c51      	adds	r1, r2, #1
 800bf4c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800bf50:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800bf54:	428e      	cmp	r6, r1
 800bf56:	d124      	bne.n	800bfa2 <_free_r+0x156>
 800bf58:	2001      	movs	r0, #1
 800bf5a:	1092      	asrs	r2, r2, #2
 800bf5c:	fa00 f202 	lsl.w	r2, r0, r2
 800bf60:	6868      	ldr	r0, [r5, #4]
 800bf62:	4302      	orrs	r2, r0
 800bf64:	606a      	str	r2, [r5, #4]
 800bf66:	60de      	str	r6, [r3, #12]
 800bf68:	6099      	str	r1, [r3, #8]
 800bf6a:	60b3      	str	r3, [r6, #8]
 800bf6c:	e7de      	b.n	800bf2c <_free_r+0xe0>
 800bf6e:	2a14      	cmp	r2, #20
 800bf70:	d801      	bhi.n	800bf76 <_free_r+0x12a>
 800bf72:	325b      	adds	r2, #91	; 0x5b
 800bf74:	e7e9      	b.n	800bf4a <_free_r+0xfe>
 800bf76:	2a54      	cmp	r2, #84	; 0x54
 800bf78:	d802      	bhi.n	800bf80 <_free_r+0x134>
 800bf7a:	0b02      	lsrs	r2, r0, #12
 800bf7c:	326e      	adds	r2, #110	; 0x6e
 800bf7e:	e7e4      	b.n	800bf4a <_free_r+0xfe>
 800bf80:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800bf84:	d802      	bhi.n	800bf8c <_free_r+0x140>
 800bf86:	0bc2      	lsrs	r2, r0, #15
 800bf88:	3277      	adds	r2, #119	; 0x77
 800bf8a:	e7de      	b.n	800bf4a <_free_r+0xfe>
 800bf8c:	f240 5154 	movw	r1, #1364	; 0x554
 800bf90:	428a      	cmp	r2, r1
 800bf92:	bf9a      	itte	ls
 800bf94:	0c82      	lsrls	r2, r0, #18
 800bf96:	327c      	addls	r2, #124	; 0x7c
 800bf98:	227e      	movhi	r2, #126	; 0x7e
 800bf9a:	e7d6      	b.n	800bf4a <_free_r+0xfe>
 800bf9c:	6889      	ldr	r1, [r1, #8]
 800bf9e:	428e      	cmp	r6, r1
 800bfa0:	d004      	beq.n	800bfac <_free_r+0x160>
 800bfa2:	684a      	ldr	r2, [r1, #4]
 800bfa4:	f022 0203 	bic.w	r2, r2, #3
 800bfa8:	4290      	cmp	r0, r2
 800bfaa:	d3f7      	bcc.n	800bf9c <_free_r+0x150>
 800bfac:	68ce      	ldr	r6, [r1, #12]
 800bfae:	e7da      	b.n	800bf66 <_free_r+0x11a>
 800bfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb4:	20000278 	.word	0x20000278
 800bfb8:	20000684 	.word	0x20000684
 800bfbc:	20000aac 	.word	0x20000aac
 800bfc0:	20000280 	.word	0x20000280

0800bfc4 <cos>:
 800bfc4:	b530      	push	{r4, r5, lr}
 800bfc6:	4a18      	ldr	r2, [pc, #96]	; (800c028 <cos+0x64>)
 800bfc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	b087      	sub	sp, #28
 800bfd0:	dc04      	bgt.n	800bfdc <cos+0x18>
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f002 f8c3 	bl	800e160 <__kernel_cos>
 800bfda:	e006      	b.n	800bfea <cos+0x26>
 800bfdc:	4a13      	ldr	r2, [pc, #76]	; (800c02c <cos+0x68>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	dd05      	ble.n	800bfee <cos+0x2a>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	f7f4 f8bf 	bl	8000168 <__aeabi_dsub>
 800bfea:	b007      	add	sp, #28
 800bfec:	bd30      	pop	{r4, r5, pc}
 800bfee:	aa02      	add	r2, sp, #8
 800bff0:	f001 fa96 	bl	800d520 <__ieee754_rem_pio2>
 800bff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bff8:	f000 0403 	and.w	r4, r0, #3
 800bffc:	2c01      	cmp	r4, #1
 800bffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c002:	d008      	beq.n	800c016 <cos+0x52>
 800c004:	2c02      	cmp	r4, #2
 800c006:	d00c      	beq.n	800c022 <cos+0x5e>
 800c008:	2c00      	cmp	r4, #0
 800c00a:	d0e4      	beq.n	800bfd6 <cos+0x12>
 800c00c:	2401      	movs	r4, #1
 800c00e:	9400      	str	r4, [sp, #0]
 800c010:	f002 fcda 	bl	800e9c8 <__kernel_sin>
 800c014:	e7e9      	b.n	800bfea <cos+0x26>
 800c016:	9400      	str	r4, [sp, #0]
 800c018:	f002 fcd6 	bl	800e9c8 <__kernel_sin>
 800c01c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c020:	e7e3      	b.n	800bfea <cos+0x26>
 800c022:	f002 f89d 	bl	800e160 <__kernel_cos>
 800c026:	e7f9      	b.n	800c01c <cos+0x58>
 800c028:	3fe921fb 	.word	0x3fe921fb
 800c02c:	7fefffff 	.word	0x7fefffff

0800c030 <sin>:
 800c030:	b530      	push	{r4, r5, lr}
 800c032:	4a1a      	ldr	r2, [pc, #104]	; (800c09c <sin+0x6c>)
 800c034:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c038:	4293      	cmp	r3, r2
 800c03a:	b087      	sub	sp, #28
 800c03c:	dc06      	bgt.n	800c04c <sin+0x1c>
 800c03e:	2300      	movs	r3, #0
 800c040:	2200      	movs	r2, #0
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	2300      	movs	r3, #0
 800c046:	f002 fcbf 	bl	800e9c8 <__kernel_sin>
 800c04a:	e006      	b.n	800c05a <sin+0x2a>
 800c04c:	4a14      	ldr	r2, [pc, #80]	; (800c0a0 <sin+0x70>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	dd05      	ble.n	800c05e <sin+0x2e>
 800c052:	4602      	mov	r2, r0
 800c054:	460b      	mov	r3, r1
 800c056:	f7f4 f887 	bl	8000168 <__aeabi_dsub>
 800c05a:	b007      	add	sp, #28
 800c05c:	bd30      	pop	{r4, r5, pc}
 800c05e:	aa02      	add	r2, sp, #8
 800c060:	f001 fa5e 	bl	800d520 <__ieee754_rem_pio2>
 800c064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c068:	f000 0403 	and.w	r4, r0, #3
 800c06c:	2c01      	cmp	r4, #1
 800c06e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c072:	d005      	beq.n	800c080 <sin+0x50>
 800c074:	2c02      	cmp	r4, #2
 800c076:	d006      	beq.n	800c086 <sin+0x56>
 800c078:	b964      	cbnz	r4, 800c094 <sin+0x64>
 800c07a:	2401      	movs	r4, #1
 800c07c:	9400      	str	r4, [sp, #0]
 800c07e:	e7e2      	b.n	800c046 <sin+0x16>
 800c080:	f002 f86e 	bl	800e160 <__kernel_cos>
 800c084:	e7e9      	b.n	800c05a <sin+0x2a>
 800c086:	2401      	movs	r4, #1
 800c088:	9400      	str	r4, [sp, #0]
 800c08a:	f002 fc9d 	bl	800e9c8 <__kernel_sin>
 800c08e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c092:	e7e2      	b.n	800c05a <sin+0x2a>
 800c094:	f002 f864 	bl	800e160 <__kernel_cos>
 800c098:	e7f9      	b.n	800c08e <sin+0x5e>
 800c09a:	bf00      	nop
 800c09c:	3fe921fb 	.word	0x3fe921fb
 800c0a0:	7fefffff 	.word	0x7fefffff

0800c0a4 <cosf>:
 800c0a4:	b507      	push	{r0, r1, r2, lr}
 800c0a6:	4a18      	ldr	r2, [pc, #96]	; (800c108 <cosf+0x64>)
 800c0a8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	4601      	mov	r1, r0
 800c0b0:	dc03      	bgt.n	800c0ba <cosf+0x16>
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	f002 fd3e 	bl	800eb34 <__kernel_cosf>
 800c0b8:	e004      	b.n	800c0c4 <cosf+0x20>
 800c0ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c0be:	db04      	blt.n	800c0ca <cosf+0x26>
 800c0c0:	f7f4 fd32 	bl	8000b28 <__aeabi_fsub>
 800c0c4:	b003      	add	sp, #12
 800c0c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0ca:	4669      	mov	r1, sp
 800c0cc:	f001 fe9c 	bl	800de08 <__ieee754_rem_pio2f>
 800c0d0:	f000 0203 	and.w	r2, r0, #3
 800c0d4:	2a01      	cmp	r2, #1
 800c0d6:	d005      	beq.n	800c0e4 <cosf+0x40>
 800c0d8:	2a02      	cmp	r2, #2
 800c0da:	d00a      	beq.n	800c0f2 <cosf+0x4e>
 800c0dc:	b972      	cbnz	r2, 800c0fc <cosf+0x58>
 800c0de:	9901      	ldr	r1, [sp, #4]
 800c0e0:	9800      	ldr	r0, [sp, #0]
 800c0e2:	e7e7      	b.n	800c0b4 <cosf+0x10>
 800c0e4:	9901      	ldr	r1, [sp, #4]
 800c0e6:	9800      	ldr	r0, [sp, #0]
 800c0e8:	f003 f846 	bl	800f178 <__kernel_sinf>
 800c0ec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c0f0:	e7e8      	b.n	800c0c4 <cosf+0x20>
 800c0f2:	9901      	ldr	r1, [sp, #4]
 800c0f4:	9800      	ldr	r0, [sp, #0]
 800c0f6:	f002 fd1d 	bl	800eb34 <__kernel_cosf>
 800c0fa:	e7f7      	b.n	800c0ec <cosf+0x48>
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	9901      	ldr	r1, [sp, #4]
 800c100:	9800      	ldr	r0, [sp, #0]
 800c102:	f003 f839 	bl	800f178 <__kernel_sinf>
 800c106:	e7dd      	b.n	800c0c4 <cosf+0x20>
 800c108:	3f490fd8 	.word	0x3f490fd8

0800c10c <sinf>:
 800c10c:	b507      	push	{r0, r1, r2, lr}
 800c10e:	4a19      	ldr	r2, [pc, #100]	; (800c174 <sinf+0x68>)
 800c110:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c114:	4293      	cmp	r3, r2
 800c116:	4601      	mov	r1, r0
 800c118:	dc04      	bgt.n	800c124 <sinf+0x18>
 800c11a:	2200      	movs	r2, #0
 800c11c:	2100      	movs	r1, #0
 800c11e:	f003 f82b 	bl	800f178 <__kernel_sinf>
 800c122:	e004      	b.n	800c12e <sinf+0x22>
 800c124:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c128:	db04      	blt.n	800c134 <sinf+0x28>
 800c12a:	f7f4 fcfd 	bl	8000b28 <__aeabi_fsub>
 800c12e:	b003      	add	sp, #12
 800c130:	f85d fb04 	ldr.w	pc, [sp], #4
 800c134:	4669      	mov	r1, sp
 800c136:	f001 fe67 	bl	800de08 <__ieee754_rem_pio2f>
 800c13a:	f000 0003 	and.w	r0, r0, #3
 800c13e:	2801      	cmp	r0, #1
 800c140:	d006      	beq.n	800c150 <sinf+0x44>
 800c142:	2802      	cmp	r0, #2
 800c144:	d009      	beq.n	800c15a <sinf+0x4e>
 800c146:	b980      	cbnz	r0, 800c16a <sinf+0x5e>
 800c148:	2201      	movs	r2, #1
 800c14a:	9901      	ldr	r1, [sp, #4]
 800c14c:	9800      	ldr	r0, [sp, #0]
 800c14e:	e7e6      	b.n	800c11e <sinf+0x12>
 800c150:	9901      	ldr	r1, [sp, #4]
 800c152:	9800      	ldr	r0, [sp, #0]
 800c154:	f002 fcee 	bl	800eb34 <__kernel_cosf>
 800c158:	e7e9      	b.n	800c12e <sinf+0x22>
 800c15a:	2201      	movs	r2, #1
 800c15c:	9901      	ldr	r1, [sp, #4]
 800c15e:	9800      	ldr	r0, [sp, #0]
 800c160:	f003 f80a 	bl	800f178 <__kernel_sinf>
 800c164:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c168:	e7e1      	b.n	800c12e <sinf+0x22>
 800c16a:	9901      	ldr	r1, [sp, #4]
 800c16c:	9800      	ldr	r0, [sp, #0]
 800c16e:	f002 fce1 	bl	800eb34 <__kernel_cosf>
 800c172:	e7f7      	b.n	800c164 <sinf+0x58>
 800c174:	3f490fd8 	.word	0x3f490fd8

0800c178 <atan2>:
 800c178:	f000 ba2e 	b.w	800c5d8 <__ieee754_atan2>

0800c17c <log>:
 800c17c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c180:	b08a      	sub	sp, #40	; 0x28
 800c182:	4604      	mov	r4, r0
 800c184:	460d      	mov	r5, r1
 800c186:	f000 fb03 	bl	800c790 <__ieee754_log>
 800c18a:	4b34      	ldr	r3, [pc, #208]	; (800c25c <log+0xe0>)
 800c18c:	4680      	mov	r8, r0
 800c18e:	f993 6000 	ldrsb.w	r6, [r3]
 800c192:	4689      	mov	r9, r1
 800c194:	1c73      	adds	r3, r6, #1
 800c196:	d05b      	beq.n	800c250 <log+0xd4>
 800c198:	4622      	mov	r2, r4
 800c19a:	462b      	mov	r3, r5
 800c19c:	4620      	mov	r0, r4
 800c19e:	4629      	mov	r1, r5
 800c1a0:	f7f4 fc30 	bl	8000a04 <__aeabi_dcmpun>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	d153      	bne.n	800c250 <log+0xd4>
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	f7f4 fc1e 	bl	80009f0 <__aeabi_dcmpgt>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d14b      	bne.n	800c250 <log+0xd4>
 800c1b8:	4b29      	ldr	r3, [pc, #164]	; (800c260 <log+0xe4>)
 800c1ba:	9008      	str	r0, [sp, #32]
 800c1bc:	9301      	str	r3, [sp, #4]
 800c1be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c1c2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c1c6:	b9a6      	cbnz	r6, 800c1f2 <log+0x76>
 800c1c8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c1cc:	4b25      	ldr	r3, [pc, #148]	; (800c264 <log+0xe8>)
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2300      	movs	r3, #0
 800c1da:	f7f4 fbe1 	bl	80009a0 <__aeabi_dcmpeq>
 800c1de:	bb40      	cbnz	r0, 800c232 <log+0xb6>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	2e02      	cmp	r6, #2
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	d119      	bne.n	800c21c <log+0xa0>
 800c1e8:	f003 fd0a 	bl	800fc00 <__errno>
 800c1ec:	2321      	movs	r3, #33	; 0x21
 800c1ee:	6003      	str	r3, [r0, #0]
 800c1f0:	e019      	b.n	800c226 <log+0xaa>
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4b1c      	ldr	r3, [pc, #112]	; (800c268 <log+0xec>)
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	2200      	movs	r2, #0
 800c200:	2300      	movs	r3, #0
 800c202:	f7f4 fbcd 	bl	80009a0 <__aeabi_dcmpeq>
 800c206:	2800      	cmp	r0, #0
 800c208:	d0ea      	beq.n	800c1e0 <log+0x64>
 800c20a:	2302      	movs	r3, #2
 800c20c:	429e      	cmp	r6, r3
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	d111      	bne.n	800c236 <log+0xba>
 800c212:	f003 fcf5 	bl	800fc00 <__errno>
 800c216:	2322      	movs	r3, #34	; 0x22
 800c218:	6003      	str	r3, [r0, #0]
 800c21a:	e011      	b.n	800c240 <log+0xc4>
 800c21c:	4668      	mov	r0, sp
 800c21e:	f003 fa43 	bl	800f6a8 <matherr>
 800c222:	2800      	cmp	r0, #0
 800c224:	d0e0      	beq.n	800c1e8 <log+0x6c>
 800c226:	4811      	ldr	r0, [pc, #68]	; (800c26c <log+0xf0>)
 800c228:	f003 fa40 	bl	800f6ac <nan>
 800c22c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c230:	e006      	b.n	800c240 <log+0xc4>
 800c232:	2302      	movs	r3, #2
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	4668      	mov	r0, sp
 800c238:	f003 fa36 	bl	800f6a8 <matherr>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d0e8      	beq.n	800c212 <log+0x96>
 800c240:	9b08      	ldr	r3, [sp, #32]
 800c242:	b11b      	cbz	r3, 800c24c <log+0xd0>
 800c244:	f003 fcdc 	bl	800fc00 <__errno>
 800c248:	9b08      	ldr	r3, [sp, #32]
 800c24a:	6003      	str	r3, [r0, #0]
 800c24c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800c250:	4640      	mov	r0, r8
 800c252:	4649      	mov	r1, r9
 800c254:	b00a      	add	sp, #40	; 0x28
 800c256:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c25a:	bf00      	nop
 800c25c:	20000688 	.word	0x20000688
 800c260:	080107e4 	.word	0x080107e4
 800c264:	c7efffff 	.word	0xc7efffff
 800c268:	fff00000 	.word	0xfff00000
 800c26c:	080101dc 	.word	0x080101dc

0800c270 <pow>:
 800c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	b08f      	sub	sp, #60	; 0x3c
 800c276:	461d      	mov	r5, r3
 800c278:	4680      	mov	r8, r0
 800c27a:	4689      	mov	r9, r1
 800c27c:	4614      	mov	r4, r2
 800c27e:	f000 fc5b 	bl	800cb38 <__ieee754_pow>
 800c282:	4fa5      	ldr	r7, [pc, #660]	; (800c518 <pow+0x2a8>)
 800c284:	e9cd 0100 	strd	r0, r1, [sp]
 800c288:	f997 3000 	ldrsb.w	r3, [r7]
 800c28c:	463e      	mov	r6, r7
 800c28e:	9302      	str	r3, [sp, #8]
 800c290:	3301      	adds	r3, #1
 800c292:	d05f      	beq.n	800c354 <pow+0xe4>
 800c294:	4622      	mov	r2, r4
 800c296:	462b      	mov	r3, r5
 800c298:	4620      	mov	r0, r4
 800c29a:	4629      	mov	r1, r5
 800c29c:	f7f4 fbb2 	bl	8000a04 <__aeabi_dcmpun>
 800c2a0:	4682      	mov	sl, r0
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d156      	bne.n	800c354 <pow+0xe4>
 800c2a6:	4642      	mov	r2, r8
 800c2a8:	464b      	mov	r3, r9
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	4649      	mov	r1, r9
 800c2ae:	f7f4 fba9 	bl	8000a04 <__aeabi_dcmpun>
 800c2b2:	9003      	str	r0, [sp, #12]
 800c2b4:	b1e8      	cbz	r0, 800c2f2 <pow+0x82>
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	4629      	mov	r1, r5
 800c2be:	f7f4 fb6f 	bl	80009a0 <__aeabi_dcmpeq>
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d046      	beq.n	800c354 <pow+0xe4>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	9304      	str	r3, [sp, #16]
 800c2cc:	4b93      	ldr	r3, [pc, #588]	; (800c51c <pow+0x2ac>)
 800c2ce:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800c2d2:	9305      	str	r3, [sp, #20]
 800c2d4:	4b92      	ldr	r3, [pc, #584]	; (800c520 <pow+0x2b0>)
 800c2d6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c2da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c2de:	9b02      	ldr	r3, [sp, #8]
 800c2e0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d031      	beq.n	800c34c <pow+0xdc>
 800c2e8:	a804      	add	r0, sp, #16
 800c2ea:	f003 f9dd 	bl	800f6a8 <matherr>
 800c2ee:	bb38      	cbnz	r0, 800c340 <pow+0xd0>
 800c2f0:	e058      	b.n	800c3a4 <pow+0x134>
 800c2f2:	f04f 0a00 	mov.w	sl, #0
 800c2f6:	f04f 0b00 	mov.w	fp, #0
 800c2fa:	4652      	mov	r2, sl
 800c2fc:	465b      	mov	r3, fp
 800c2fe:	4640      	mov	r0, r8
 800c300:	4649      	mov	r1, r9
 800c302:	f7f4 fb4d 	bl	80009a0 <__aeabi_dcmpeq>
 800c306:	2800      	cmp	r0, #0
 800c308:	d051      	beq.n	800c3ae <pow+0x13e>
 800c30a:	4652      	mov	r2, sl
 800c30c:	465b      	mov	r3, fp
 800c30e:	4620      	mov	r0, r4
 800c310:	4629      	mov	r1, r5
 800c312:	f7f4 fb45 	bl	80009a0 <__aeabi_dcmpeq>
 800c316:	4606      	mov	r6, r0
 800c318:	b308      	cbz	r0, 800c35e <pow+0xee>
 800c31a:	2301      	movs	r3, #1
 800c31c:	9304      	str	r3, [sp, #16]
 800c31e:	4b7f      	ldr	r3, [pc, #508]	; (800c51c <pow+0x2ac>)
 800c320:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c324:	9305      	str	r3, [sp, #20]
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c32c:	930c      	str	r3, [sp, #48]	; 0x30
 800c32e:	9b02      	ldr	r3, [sp, #8]
 800c330:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c334:	2b00      	cmp	r3, #0
 800c336:	d0d7      	beq.n	800c2e8 <pow+0x78>
 800c338:	2200      	movs	r2, #0
 800c33a:	4b79      	ldr	r3, [pc, #484]	; (800c520 <pow+0x2b0>)
 800c33c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c342:	b11b      	cbz	r3, 800c34c <pow+0xdc>
 800c344:	f003 fc5c 	bl	800fc00 <__errno>
 800c348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c34a:	6003      	str	r3, [r0, #0]
 800c34c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800c350:	e88d 0018 	stmia.w	sp, {r3, r4}
 800c354:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c358:	b00f      	add	sp, #60	; 0x3c
 800c35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35e:	4620      	mov	r0, r4
 800c360:	4629      	mov	r1, r5
 800c362:	f003 f916 	bl	800f592 <finite>
 800c366:	2800      	cmp	r0, #0
 800c368:	d0f4      	beq.n	800c354 <pow+0xe4>
 800c36a:	4652      	mov	r2, sl
 800c36c:	465b      	mov	r3, fp
 800c36e:	4620      	mov	r0, r4
 800c370:	4629      	mov	r1, r5
 800c372:	f7f4 fb1f 	bl	80009b4 <__aeabi_dcmplt>
 800c376:	2800      	cmp	r0, #0
 800c378:	d0ec      	beq.n	800c354 <pow+0xe4>
 800c37a:	2301      	movs	r3, #1
 800c37c:	9304      	str	r3, [sp, #16]
 800c37e:	4b67      	ldr	r3, [pc, #412]	; (800c51c <pow+0x2ac>)
 800c380:	960c      	str	r6, [sp, #48]	; 0x30
 800c382:	9305      	str	r3, [sp, #20]
 800c384:	f997 3000 	ldrsb.w	r3, [r7]
 800c388:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c38c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c390:	b913      	cbnz	r3, 800c398 <pow+0x128>
 800c392:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c396:	e7a7      	b.n	800c2e8 <pow+0x78>
 800c398:	2000      	movs	r0, #0
 800c39a:	4962      	ldr	r1, [pc, #392]	; (800c524 <pow+0x2b4>)
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c3a2:	d1a1      	bne.n	800c2e8 <pow+0x78>
 800c3a4:	f003 fc2c 	bl	800fc00 <__errno>
 800c3a8:	2321      	movs	r3, #33	; 0x21
 800c3aa:	6003      	str	r3, [r0, #0]
 800c3ac:	e7c8      	b.n	800c340 <pow+0xd0>
 800c3ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3b2:	f003 f8ee 	bl	800f592 <finite>
 800c3b6:	9002      	str	r0, [sp, #8]
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d17f      	bne.n	800c4bc <pow+0x24c>
 800c3bc:	4640      	mov	r0, r8
 800c3be:	4649      	mov	r1, r9
 800c3c0:	f003 f8e7 	bl	800f592 <finite>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d079      	beq.n	800c4bc <pow+0x24c>
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	f003 f8e1 	bl	800f592 <finite>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d073      	beq.n	800c4bc <pow+0x24c>
 800c3d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	4610      	mov	r0, r2
 800c3dc:	f7f4 fb12 	bl	8000a04 <__aeabi_dcmpun>
 800c3e0:	f997 7000 	ldrsb.w	r7, [r7]
 800c3e4:	4b4d      	ldr	r3, [pc, #308]	; (800c51c <pow+0x2ac>)
 800c3e6:	b1a0      	cbz	r0, 800c412 <pow+0x1a2>
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	9305      	str	r3, [sp, #20]
 800c3ec:	9b02      	ldr	r3, [sp, #8]
 800c3ee:	9204      	str	r2, [sp, #16]
 800c3f0:	930c      	str	r3, [sp, #48]	; 0x30
 800c3f2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c3f6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c3fa:	2f00      	cmp	r7, #0
 800c3fc:	d0c9      	beq.n	800c392 <pow+0x122>
 800c3fe:	4652      	mov	r2, sl
 800c400:	465b      	mov	r3, fp
 800c402:	4650      	mov	r0, sl
 800c404:	4659      	mov	r1, fp
 800c406:	f7f4 f98d 	bl	8000724 <__aeabi_ddiv>
 800c40a:	2f02      	cmp	r7, #2
 800c40c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c410:	e7c7      	b.n	800c3a2 <pow+0x132>
 800c412:	2203      	movs	r2, #3
 800c414:	9305      	str	r3, [sp, #20]
 800c416:	9204      	str	r2, [sp, #16]
 800c418:	900c      	str	r0, [sp, #48]	; 0x30
 800c41a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c41e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c422:	bb57      	cbnz	r7, 800c47a <pow+0x20a>
 800c424:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c428:	4b3f      	ldr	r3, [pc, #252]	; (800c528 <pow+0x2b8>)
 800c42a:	4640      	mov	r0, r8
 800c42c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c430:	4649      	mov	r1, r9
 800c432:	4652      	mov	r2, sl
 800c434:	465b      	mov	r3, fp
 800c436:	f7f4 fabd 	bl	80009b4 <__aeabi_dcmplt>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d064      	beq.n	800c508 <pow+0x298>
 800c43e:	2200      	movs	r2, #0
 800c440:	4b3a      	ldr	r3, [pc, #232]	; (800c52c <pow+0x2bc>)
 800c442:	4620      	mov	r0, r4
 800c444:	4629      	mov	r1, r5
 800c446:	f7f4 f843 	bl	80004d0 <__aeabi_dmul>
 800c44a:	4604      	mov	r4, r0
 800c44c:	460d      	mov	r5, r1
 800c44e:	f003 f933 	bl	800f6b8 <rint>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4620      	mov	r0, r4
 800c458:	4629      	mov	r1, r5
 800c45a:	f7f4 faa1 	bl	80009a0 <__aeabi_dcmpeq>
 800c45e:	b920      	cbnz	r0, 800c46a <pow+0x1fa>
 800c460:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c464:	4b32      	ldr	r3, [pc, #200]	; (800c530 <pow+0x2c0>)
 800c466:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c46a:	f996 3000 	ldrsb.w	r3, [r6]
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d14a      	bne.n	800c508 <pow+0x298>
 800c472:	f003 fbc5 	bl	800fc00 <__errno>
 800c476:	2322      	movs	r3, #34	; 0x22
 800c478:	e797      	b.n	800c3aa <pow+0x13a>
 800c47a:	2200      	movs	r2, #0
 800c47c:	4b2d      	ldr	r3, [pc, #180]	; (800c534 <pow+0x2c4>)
 800c47e:	4640      	mov	r0, r8
 800c480:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c484:	4649      	mov	r1, r9
 800c486:	4652      	mov	r2, sl
 800c488:	465b      	mov	r3, fp
 800c48a:	f7f4 fa93 	bl	80009b4 <__aeabi_dcmplt>
 800c48e:	2800      	cmp	r0, #0
 800c490:	d0eb      	beq.n	800c46a <pow+0x1fa>
 800c492:	2200      	movs	r2, #0
 800c494:	4b25      	ldr	r3, [pc, #148]	; (800c52c <pow+0x2bc>)
 800c496:	4620      	mov	r0, r4
 800c498:	4629      	mov	r1, r5
 800c49a:	f7f4 f819 	bl	80004d0 <__aeabi_dmul>
 800c49e:	4604      	mov	r4, r0
 800c4a0:	460d      	mov	r5, r1
 800c4a2:	f003 f909 	bl	800f6b8 <rint>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	f7f4 fa77 	bl	80009a0 <__aeabi_dcmpeq>
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d1d9      	bne.n	800c46a <pow+0x1fa>
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	4b1a      	ldr	r3, [pc, #104]	; (800c524 <pow+0x2b4>)
 800c4ba:	e7d4      	b.n	800c466 <pow+0x1f6>
 800c4bc:	2200      	movs	r2, #0
 800c4be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f7f4 fa6c 	bl	80009a0 <__aeabi_dcmpeq>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	f43f af43 	beq.w	800c354 <pow+0xe4>
 800c4ce:	4640      	mov	r0, r8
 800c4d0:	4649      	mov	r1, r9
 800c4d2:	f003 f85e 	bl	800f592 <finite>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f43f af3c 	beq.w	800c354 <pow+0xe4>
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f003 f857 	bl	800f592 <finite>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	f43f af35 	beq.w	800c354 <pow+0xe4>
 800c4ea:	2304      	movs	r3, #4
 800c4ec:	9304      	str	r3, [sp, #16]
 800c4ee:	4b0b      	ldr	r3, [pc, #44]	; (800c51c <pow+0x2ac>)
 800c4f0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c4f4:	9305      	str	r3, [sp, #20]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	2400      	movs	r4, #0
 800c4fa:	930c      	str	r3, [sp, #48]	; 0x30
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c502:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800c506:	e7b0      	b.n	800c46a <pow+0x1fa>
 800c508:	a804      	add	r0, sp, #16
 800c50a:	f003 f8cd 	bl	800f6a8 <matherr>
 800c50e:	2800      	cmp	r0, #0
 800c510:	f47f af16 	bne.w	800c340 <pow+0xd0>
 800c514:	e7ad      	b.n	800c472 <pow+0x202>
 800c516:	bf00      	nop
 800c518:	20000688 	.word	0x20000688
 800c51c:	080107e8 	.word	0x080107e8
 800c520:	3ff00000 	.word	0x3ff00000
 800c524:	fff00000 	.word	0xfff00000
 800c528:	47efffff 	.word	0x47efffff
 800c52c:	3fe00000 	.word	0x3fe00000
 800c530:	c7efffff 	.word	0xc7efffff
 800c534:	7ff00000 	.word	0x7ff00000

0800c538 <asinf>:
 800c538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c53a:	b08b      	sub	sp, #44	; 0x2c
 800c53c:	4604      	mov	r4, r0
 800c53e:	f001 fa8f 	bl	800da60 <__ieee754_asinf>
 800c542:	4e21      	ldr	r6, [pc, #132]	; (800c5c8 <asinf+0x90>)
 800c544:	4605      	mov	r5, r0
 800c546:	f996 3000 	ldrsb.w	r3, [r6]
 800c54a:	3301      	adds	r3, #1
 800c54c:	d038      	beq.n	800c5c0 <asinf+0x88>
 800c54e:	4621      	mov	r1, r4
 800c550:	4620      	mov	r0, r4
 800c552:	f7f4 fdb9 	bl	80010c8 <__aeabi_fcmpun>
 800c556:	4607      	mov	r7, r0
 800c558:	2800      	cmp	r0, #0
 800c55a:	d131      	bne.n	800c5c0 <asinf+0x88>
 800c55c:	4620      	mov	r0, r4
 800c55e:	f003 fab1 	bl	800fac4 <fabsf>
 800c562:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c566:	f7f4 fda5 	bl	80010b4 <__aeabi_fcmpgt>
 800c56a:	b348      	cbz	r0, 800c5c0 <asinf+0x88>
 800c56c:	2301      	movs	r3, #1
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	4b16      	ldr	r3, [pc, #88]	; (800c5cc <asinf+0x94>)
 800c572:	4620      	mov	r0, r4
 800c574:	9301      	str	r3, [sp, #4]
 800c576:	9708      	str	r7, [sp, #32]
 800c578:	f7f3 ff56 	bl	8000428 <__aeabi_f2d>
 800c57c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c584:	4812      	ldr	r0, [pc, #72]	; (800c5d0 <asinf+0x98>)
 800c586:	f003 f891 	bl	800f6ac <nan>
 800c58a:	f996 3000 	ldrsb.w	r3, [r6]
 800c58e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c592:	2b02      	cmp	r3, #2
 800c594:	d104      	bne.n	800c5a0 <asinf+0x68>
 800c596:	f003 fb33 	bl	800fc00 <__errno>
 800c59a:	2321      	movs	r3, #33	; 0x21
 800c59c:	6003      	str	r3, [r0, #0]
 800c59e:	e004      	b.n	800c5aa <asinf+0x72>
 800c5a0:	4668      	mov	r0, sp
 800c5a2:	f003 f881 	bl	800f6a8 <matherr>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d0f5      	beq.n	800c596 <asinf+0x5e>
 800c5aa:	9b08      	ldr	r3, [sp, #32]
 800c5ac:	b11b      	cbz	r3, 800c5b6 <asinf+0x7e>
 800c5ae:	f003 fb27 	bl	800fc00 <__errno>
 800c5b2:	9b08      	ldr	r3, [sp, #32]
 800c5b4:	6003      	str	r3, [r0, #0]
 800c5b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5ba:	f7f4 fa61 	bl	8000a80 <__aeabi_d2f>
 800c5be:	4605      	mov	r5, r0
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	b00b      	add	sp, #44	; 0x2c
 800c5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	20000688 	.word	0x20000688
 800c5cc:	080107ec 	.word	0x080107ec
 800c5d0:	080101dc 	.word	0x080101dc

0800c5d4 <atan2f>:
 800c5d4:	f001 bb88 	b.w	800dce8 <__ieee754_atan2f>

0800c5d8 <__ieee754_atan2>:
 800c5d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	4256      	negs	r6, r2
 800c5de:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800c5e2:	4316      	orrs	r6, r2
 800c5e4:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800c788 <__ieee754_atan2+0x1b0>
 800c5e8:	ea4e 76d6 	orr.w	r6, lr, r6, lsr #31
 800c5ec:	454e      	cmp	r6, r9
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	460d      	mov	r5, r1
 800c5f2:	4688      	mov	r8, r1
 800c5f4:	d807      	bhi.n	800c606 <__ieee754_atan2+0x2e>
 800c5f6:	4246      	negs	r6, r0
 800c5f8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c5fc:	4306      	orrs	r6, r0
 800c5fe:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800c602:	454e      	cmp	r6, r9
 800c604:	d906      	bls.n	800c614 <__ieee754_atan2+0x3c>
 800c606:	4620      	mov	r0, r4
 800c608:	4629      	mov	r1, r5
 800c60a:	f7f3 fdaf 	bl	800016c <__adddf3>
 800c60e:	4604      	mov	r4, r0
 800c610:	460d      	mov	r5, r1
 800c612:	e015      	b.n	800c640 <__ieee754_atan2+0x68>
 800c614:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800c618:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800c61c:	4316      	orrs	r6, r2
 800c61e:	d103      	bne.n	800c628 <__ieee754_atan2+0x50>
 800c620:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c624:	f002 be20 	b.w	800f268 <atan>
 800c628:	179e      	asrs	r6, r3, #30
 800c62a:	f006 0602 	and.w	r6, r6, #2
 800c62e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800c632:	ea50 0107 	orrs.w	r1, r0, r7
 800c636:	d107      	bne.n	800c648 <__ieee754_atan2+0x70>
 800c638:	2e02      	cmp	r6, #2
 800c63a:	d030      	beq.n	800c69e <__ieee754_atan2+0xc6>
 800c63c:	2e03      	cmp	r6, #3
 800c63e:	d032      	beq.n	800c6a6 <__ieee754_atan2+0xce>
 800c640:	4620      	mov	r0, r4
 800c642:	4629      	mov	r1, r5
 800c644:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c648:	ea52 010e 	orrs.w	r1, r2, lr
 800c64c:	d106      	bne.n	800c65c <__ieee754_atan2+0x84>
 800c64e:	f1b8 0f00 	cmp.w	r8, #0
 800c652:	da71      	bge.n	800c738 <__ieee754_atan2+0x160>
 800c654:	a53a      	add	r5, pc, #232	; (adr r5, 800c740 <__ieee754_atan2+0x168>)
 800c656:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c65a:	e7f1      	b.n	800c640 <__ieee754_atan2+0x68>
 800c65c:	45ce      	cmp	lr, r9
 800c65e:	d126      	bne.n	800c6ae <__ieee754_atan2+0xd6>
 800c660:	4577      	cmp	r7, lr
 800c662:	d111      	bne.n	800c688 <__ieee754_atan2+0xb0>
 800c664:	2e02      	cmp	r6, #2
 800c666:	d007      	beq.n	800c678 <__ieee754_atan2+0xa0>
 800c668:	2e03      	cmp	r6, #3
 800c66a:	d009      	beq.n	800c680 <__ieee754_atan2+0xa8>
 800c66c:	2e01      	cmp	r6, #1
 800c66e:	d15d      	bne.n	800c72c <__ieee754_atan2+0x154>
 800c670:	a535      	add	r5, pc, #212	; (adr r5, 800c748 <__ieee754_atan2+0x170>)
 800c672:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c676:	e7e3      	b.n	800c640 <__ieee754_atan2+0x68>
 800c678:	a535      	add	r5, pc, #212	; (adr r5, 800c750 <__ieee754_atan2+0x178>)
 800c67a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c67e:	e7df      	b.n	800c640 <__ieee754_atan2+0x68>
 800c680:	a535      	add	r5, pc, #212	; (adr r5, 800c758 <__ieee754_atan2+0x180>)
 800c682:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c686:	e7db      	b.n	800c640 <__ieee754_atan2+0x68>
 800c688:	2e02      	cmp	r6, #2
 800c68a:	d008      	beq.n	800c69e <__ieee754_atan2+0xc6>
 800c68c:	2e03      	cmp	r6, #3
 800c68e:	d00a      	beq.n	800c6a6 <__ieee754_atan2+0xce>
 800c690:	2e01      	cmp	r6, #1
 800c692:	f04f 0400 	mov.w	r4, #0
 800c696:	d14d      	bne.n	800c734 <__ieee754_atan2+0x15c>
 800c698:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800c69c:	e7d0      	b.n	800c640 <__ieee754_atan2+0x68>
 800c69e:	a530      	add	r5, pc, #192	; (adr r5, 800c760 <__ieee754_atan2+0x188>)
 800c6a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c6a4:	e7cc      	b.n	800c640 <__ieee754_atan2+0x68>
 800c6a6:	a530      	add	r5, pc, #192	; (adr r5, 800c768 <__ieee754_atan2+0x190>)
 800c6a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c6ac:	e7c8      	b.n	800c640 <__ieee754_atan2+0x68>
 800c6ae:	454f      	cmp	r7, r9
 800c6b0:	d0cd      	beq.n	800c64e <__ieee754_atan2+0x76>
 800c6b2:	eba7 070e 	sub.w	r7, r7, lr
 800c6b6:	153f      	asrs	r7, r7, #20
 800c6b8:	2f3c      	cmp	r7, #60	; 0x3c
 800c6ba:	dc1e      	bgt.n	800c6fa <__ieee754_atan2+0x122>
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	da01      	bge.n	800c6c4 <__ieee754_atan2+0xec>
 800c6c0:	373c      	adds	r7, #60	; 0x3c
 800c6c2:	db1e      	blt.n	800c702 <__ieee754_atan2+0x12a>
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	f7f4 f82c 	bl	8000724 <__aeabi_ddiv>
 800c6cc:	f002 ff5e 	bl	800f58c <fabs>
 800c6d0:	f002 fdca 	bl	800f268 <atan>
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	460d      	mov	r5, r1
 800c6d8:	2e01      	cmp	r6, #1
 800c6da:	d015      	beq.n	800c708 <__ieee754_atan2+0x130>
 800c6dc:	2e02      	cmp	r6, #2
 800c6de:	d016      	beq.n	800c70e <__ieee754_atan2+0x136>
 800c6e0:	2e00      	cmp	r6, #0
 800c6e2:	d0ad      	beq.n	800c640 <__ieee754_atan2+0x68>
 800c6e4:	a322      	add	r3, pc, #136	; (adr r3, 800c770 <__ieee754_atan2+0x198>)
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	f7f3 fd3b 	bl	8000168 <__aeabi_dsub>
 800c6f2:	a31b      	add	r3, pc, #108	; (adr r3, 800c760 <__ieee754_atan2+0x188>)
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	e015      	b.n	800c726 <__ieee754_atan2+0x14e>
 800c6fa:	a51f      	add	r5, pc, #124	; (adr r5, 800c778 <__ieee754_atan2+0x1a0>)
 800c6fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c700:	e7ea      	b.n	800c6d8 <__ieee754_atan2+0x100>
 800c702:	2400      	movs	r4, #0
 800c704:	2500      	movs	r5, #0
 800c706:	e7e7      	b.n	800c6d8 <__ieee754_atan2+0x100>
 800c708:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800c70c:	e798      	b.n	800c640 <__ieee754_atan2+0x68>
 800c70e:	a318      	add	r3, pc, #96	; (adr r3, 800c770 <__ieee754_atan2+0x198>)
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	4620      	mov	r0, r4
 800c716:	4629      	mov	r1, r5
 800c718:	f7f3 fd26 	bl	8000168 <__aeabi_dsub>
 800c71c:	4602      	mov	r2, r0
 800c71e:	460b      	mov	r3, r1
 800c720:	a10f      	add	r1, pc, #60	; (adr r1, 800c760 <__ieee754_atan2+0x188>)
 800c722:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c726:	f7f3 fd1f 	bl	8000168 <__aeabi_dsub>
 800c72a:	e770      	b.n	800c60e <__ieee754_atan2+0x36>
 800c72c:	a514      	add	r5, pc, #80	; (adr r5, 800c780 <__ieee754_atan2+0x1a8>)
 800c72e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c732:	e785      	b.n	800c640 <__ieee754_atan2+0x68>
 800c734:	2500      	movs	r5, #0
 800c736:	e783      	b.n	800c640 <__ieee754_atan2+0x68>
 800c738:	a50f      	add	r5, pc, #60	; (adr r5, 800c778 <__ieee754_atan2+0x1a0>)
 800c73a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c73e:	e77f      	b.n	800c640 <__ieee754_atan2+0x68>
 800c740:	54442d18 	.word	0x54442d18
 800c744:	bff921fb 	.word	0xbff921fb
 800c748:	54442d18 	.word	0x54442d18
 800c74c:	bfe921fb 	.word	0xbfe921fb
 800c750:	7f3321d2 	.word	0x7f3321d2
 800c754:	4002d97c 	.word	0x4002d97c
 800c758:	7f3321d2 	.word	0x7f3321d2
 800c75c:	c002d97c 	.word	0xc002d97c
 800c760:	54442d18 	.word	0x54442d18
 800c764:	400921fb 	.word	0x400921fb
 800c768:	54442d18 	.word	0x54442d18
 800c76c:	c00921fb 	.word	0xc00921fb
 800c770:	33145c07 	.word	0x33145c07
 800c774:	3ca1a626 	.word	0x3ca1a626
 800c778:	54442d18 	.word	0x54442d18
 800c77c:	3ff921fb 	.word	0x3ff921fb
 800c780:	54442d18 	.word	0x54442d18
 800c784:	3fe921fb 	.word	0x3fe921fb
 800c788:	7ff00000 	.word	0x7ff00000
 800c78c:	00000000 	.word	0x00000000

0800c790 <__ieee754_log>:
 800c790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c794:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c798:	b087      	sub	sp, #28
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	4604      	mov	r4, r0
 800c7a0:	460d      	mov	r5, r1
 800c7a2:	da24      	bge.n	800c7ee <__ieee754_log+0x5e>
 800c7a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c7a8:	4334      	orrs	r4, r6
 800c7aa:	d108      	bne.n	800c7be <__ieee754_log+0x2e>
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	49c9      	ldr	r1, [pc, #804]	; (800cad8 <__ieee754_log+0x348>)
 800c7b4:	f7f3 ffb6 	bl	8000724 <__aeabi_ddiv>
 800c7b8:	b007      	add	sp, #28
 800c7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7be:	2900      	cmp	r1, #0
 800c7c0:	da04      	bge.n	800c7cc <__ieee754_log+0x3c>
 800c7c2:	f7f3 fcd1 	bl	8000168 <__aeabi_dsub>
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	e7f3      	b.n	800c7b4 <__ieee754_log+0x24>
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	4bc3      	ldr	r3, [pc, #780]	; (800cadc <__ieee754_log+0x34c>)
 800c7d0:	f7f3 fe7e 	bl	80004d0 <__aeabi_dmul>
 800c7d4:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800c7d8:	4602      	mov	r2, r0
 800c7da:	460b      	mov	r3, r1
 800c7dc:	460d      	mov	r5, r1
 800c7de:	49c0      	ldr	r1, [pc, #768]	; (800cae0 <__ieee754_log+0x350>)
 800c7e0:	428d      	cmp	r5, r1
 800c7e2:	dd06      	ble.n	800c7f2 <__ieee754_log+0x62>
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	f7f3 fcc0 	bl	800016c <__adddf3>
 800c7ec:	e7e4      	b.n	800c7b8 <__ieee754_log+0x28>
 800c7ee:	2600      	movs	r6, #0
 800c7f0:	e7f5      	b.n	800c7de <__ieee754_log+0x4e>
 800c7f2:	152c      	asrs	r4, r5, #20
 800c7f4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c7f8:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800c7fc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c800:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800c804:	4426      	add	r6, r4
 800c806:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800c80a:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800c80e:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800c812:	ea41 0305 	orr.w	r3, r1, r5
 800c816:	4610      	mov	r0, r2
 800c818:	4619      	mov	r1, r3
 800c81a:	2200      	movs	r2, #0
 800c81c:	4bb1      	ldr	r3, [pc, #708]	; (800cae4 <__ieee754_log+0x354>)
 800c81e:	f7f3 fca3 	bl	8000168 <__aeabi_dsub>
 800c822:	1cab      	adds	r3, r5, #2
 800c824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c828:	2b02      	cmp	r3, #2
 800c82a:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800c82e:	4682      	mov	sl, r0
 800c830:	468b      	mov	fp, r1
 800c832:	f04f 0200 	mov.w	r2, #0
 800c836:	dc5b      	bgt.n	800c8f0 <__ieee754_log+0x160>
 800c838:	2300      	movs	r3, #0
 800c83a:	f7f4 f8b1 	bl	80009a0 <__aeabi_dcmpeq>
 800c83e:	b1d0      	cbz	r0, 800c876 <__ieee754_log+0xe6>
 800c840:	2c00      	cmp	r4, #0
 800c842:	f000 816e 	beq.w	800cb22 <__ieee754_log+0x392>
 800c846:	4620      	mov	r0, r4
 800c848:	f7f3 fddc 	bl	8000404 <__aeabi_i2d>
 800c84c:	a38e      	add	r3, pc, #568	; (adr r3, 800ca88 <__ieee754_log+0x2f8>)
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	4606      	mov	r6, r0
 800c854:	460f      	mov	r7, r1
 800c856:	f7f3 fe3b 	bl	80004d0 <__aeabi_dmul>
 800c85a:	a38d      	add	r3, pc, #564	; (adr r3, 800ca90 <__ieee754_log+0x300>)
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	4604      	mov	r4, r0
 800c862:	460d      	mov	r5, r1
 800c864:	4630      	mov	r0, r6
 800c866:	4639      	mov	r1, r7
 800c868:	f7f3 fe32 	bl	80004d0 <__aeabi_dmul>
 800c86c:	4602      	mov	r2, r0
 800c86e:	460b      	mov	r3, r1
 800c870:	4620      	mov	r0, r4
 800c872:	4629      	mov	r1, r5
 800c874:	e7b8      	b.n	800c7e8 <__ieee754_log+0x58>
 800c876:	a388      	add	r3, pc, #544	; (adr r3, 800ca98 <__ieee754_log+0x308>)
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	4650      	mov	r0, sl
 800c87e:	4659      	mov	r1, fp
 800c880:	f7f3 fe26 	bl	80004d0 <__aeabi_dmul>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	2000      	movs	r0, #0
 800c88a:	4997      	ldr	r1, [pc, #604]	; (800cae8 <__ieee754_log+0x358>)
 800c88c:	f7f3 fc6c 	bl	8000168 <__aeabi_dsub>
 800c890:	4652      	mov	r2, sl
 800c892:	4606      	mov	r6, r0
 800c894:	460f      	mov	r7, r1
 800c896:	465b      	mov	r3, fp
 800c898:	4650      	mov	r0, sl
 800c89a:	4659      	mov	r1, fp
 800c89c:	f7f3 fe18 	bl	80004d0 <__aeabi_dmul>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	4639      	mov	r1, r7
 800c8a8:	f7f3 fe12 	bl	80004d0 <__aeabi_dmul>
 800c8ac:	4606      	mov	r6, r0
 800c8ae:	460f      	mov	r7, r1
 800c8b0:	b934      	cbnz	r4, 800c8c0 <__ieee754_log+0x130>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	4650      	mov	r0, sl
 800c8b8:	4659      	mov	r1, fp
 800c8ba:	f7f3 fc55 	bl	8000168 <__aeabi_dsub>
 800c8be:	e77b      	b.n	800c7b8 <__ieee754_log+0x28>
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f7f3 fd9f 	bl	8000404 <__aeabi_i2d>
 800c8c6:	a370      	add	r3, pc, #448	; (adr r3, 800ca88 <__ieee754_log+0x2f8>)
 800c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8cc:	4680      	mov	r8, r0
 800c8ce:	4689      	mov	r9, r1
 800c8d0:	f7f3 fdfe 	bl	80004d0 <__aeabi_dmul>
 800c8d4:	a36e      	add	r3, pc, #440	; (adr r3, 800ca90 <__ieee754_log+0x300>)
 800c8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8da:	4604      	mov	r4, r0
 800c8dc:	460d      	mov	r5, r1
 800c8de:	4640      	mov	r0, r8
 800c8e0:	4649      	mov	r1, r9
 800c8e2:	f7f3 fdf5 	bl	80004d0 <__aeabi_dmul>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	4639      	mov	r1, r7
 800c8ee:	e0b2      	b.n	800ca56 <__ieee754_log+0x2c6>
 800c8f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8f4:	f7f3 fc3a 	bl	800016c <__adddf3>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4650      	mov	r0, sl
 800c8fe:	4659      	mov	r1, fp
 800c900:	f7f3 ff10 	bl	8000724 <__aeabi_ddiv>
 800c904:	e9cd 0100 	strd	r0, r1, [sp]
 800c908:	4620      	mov	r0, r4
 800c90a:	f7f3 fd7b 	bl	8000404 <__aeabi_i2d>
 800c90e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c916:	4610      	mov	r0, r2
 800c918:	4619      	mov	r1, r3
 800c91a:	f7f3 fdd9 	bl	80004d0 <__aeabi_dmul>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c926:	f7f3 fdd3 	bl	80004d0 <__aeabi_dmul>
 800c92a:	a35d      	add	r3, pc, #372	; (adr r3, 800caa0 <__ieee754_log+0x310>)
 800c92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c930:	4606      	mov	r6, r0
 800c932:	460f      	mov	r7, r1
 800c934:	f7f3 fdcc 	bl	80004d0 <__aeabi_dmul>
 800c938:	a35b      	add	r3, pc, #364	; (adr r3, 800caa8 <__ieee754_log+0x318>)
 800c93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93e:	f7f3 fc15 	bl	800016c <__adddf3>
 800c942:	4632      	mov	r2, r6
 800c944:	463b      	mov	r3, r7
 800c946:	f7f3 fdc3 	bl	80004d0 <__aeabi_dmul>
 800c94a:	a359      	add	r3, pc, #356	; (adr r3, 800cab0 <__ieee754_log+0x320>)
 800c94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c950:	f7f3 fc0c 	bl	800016c <__adddf3>
 800c954:	4632      	mov	r2, r6
 800c956:	463b      	mov	r3, r7
 800c958:	f7f3 fdba 	bl	80004d0 <__aeabi_dmul>
 800c95c:	a356      	add	r3, pc, #344	; (adr r3, 800cab8 <__ieee754_log+0x328>)
 800c95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c962:	f7f3 fc03 	bl	800016c <__adddf3>
 800c966:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c96a:	f7f3 fdb1 	bl	80004d0 <__aeabi_dmul>
 800c96e:	a354      	add	r3, pc, #336	; (adr r3, 800cac0 <__ieee754_log+0x330>)
 800c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c978:	4630      	mov	r0, r6
 800c97a:	4639      	mov	r1, r7
 800c97c:	f7f3 fda8 	bl	80004d0 <__aeabi_dmul>
 800c980:	a351      	add	r3, pc, #324	; (adr r3, 800cac8 <__ieee754_log+0x338>)
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	f7f3 fbf1 	bl	800016c <__adddf3>
 800c98a:	4632      	mov	r2, r6
 800c98c:	463b      	mov	r3, r7
 800c98e:	f7f3 fd9f 	bl	80004d0 <__aeabi_dmul>
 800c992:	a34f      	add	r3, pc, #316	; (adr r3, 800cad0 <__ieee754_log+0x340>)
 800c994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c998:	f7f3 fbe8 	bl	800016c <__adddf3>
 800c99c:	4632      	mov	r2, r6
 800c99e:	463b      	mov	r3, r7
 800c9a0:	f7f3 fd96 	bl	80004d0 <__aeabi_dmul>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9ac:	f7f3 fbde 	bl	800016c <__adddf3>
 800c9b0:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 800c9b4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c9b8:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 800c9bc:	3551      	adds	r5, #81	; 0x51
 800c9be:	ea45 0508 	orr.w	r5, r5, r8
 800c9c2:	2d00      	cmp	r5, #0
 800c9c4:	4606      	mov	r6, r0
 800c9c6:	460f      	mov	r7, r1
 800c9c8:	dd50      	ble.n	800ca6c <__ieee754_log+0x2dc>
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	4b46      	ldr	r3, [pc, #280]	; (800cae8 <__ieee754_log+0x358>)
 800c9ce:	4650      	mov	r0, sl
 800c9d0:	4659      	mov	r1, fp
 800c9d2:	f7f3 fd7d 	bl	80004d0 <__aeabi_dmul>
 800c9d6:	4652      	mov	r2, sl
 800c9d8:	465b      	mov	r3, fp
 800c9da:	f7f3 fd79 	bl	80004d0 <__aeabi_dmul>
 800c9de:	4680      	mov	r8, r0
 800c9e0:	4689      	mov	r9, r1
 800c9e2:	b994      	cbnz	r4, 800ca0a <__ieee754_log+0x27a>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	4639      	mov	r1, r7
 800c9ec:	f7f3 fbbe 	bl	800016c <__adddf3>
 800c9f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9f4:	f7f3 fd6c 	bl	80004d0 <__aeabi_dmul>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	4649      	mov	r1, r9
 800ca00:	f7f3 fbb2 	bl	8000168 <__aeabi_dsub>
 800ca04:	4602      	mov	r2, r0
 800ca06:	460b      	mov	r3, r1
 800ca08:	e755      	b.n	800c8b6 <__ieee754_log+0x126>
 800ca0a:	a31f      	add	r3, pc, #124	; (adr r3, 800ca88 <__ieee754_log+0x2f8>)
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca14:	f7f3 fd5c 	bl	80004d0 <__aeabi_dmul>
 800ca18:	4642      	mov	r2, r8
 800ca1a:	464b      	mov	r3, r9
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	460d      	mov	r5, r1
 800ca20:	4630      	mov	r0, r6
 800ca22:	4639      	mov	r1, r7
 800ca24:	f7f3 fba2 	bl	800016c <__adddf3>
 800ca28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca2c:	f7f3 fd50 	bl	80004d0 <__aeabi_dmul>
 800ca30:	a317      	add	r3, pc, #92	; (adr r3, 800ca90 <__ieee754_log+0x300>)
 800ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca36:	4606      	mov	r6, r0
 800ca38:	460f      	mov	r7, r1
 800ca3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca3e:	f7f3 fd47 	bl	80004d0 <__aeabi_dmul>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4630      	mov	r0, r6
 800ca48:	4639      	mov	r1, r7
 800ca4a:	f7f3 fb8f 	bl	800016c <__adddf3>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4640      	mov	r0, r8
 800ca54:	4649      	mov	r1, r9
 800ca56:	f7f3 fb87 	bl	8000168 <__aeabi_dsub>
 800ca5a:	4652      	mov	r2, sl
 800ca5c:	465b      	mov	r3, fp
 800ca5e:	f7f3 fb83 	bl	8000168 <__aeabi_dsub>
 800ca62:	4602      	mov	r2, r0
 800ca64:	460b      	mov	r3, r1
 800ca66:	4620      	mov	r0, r4
 800ca68:	4629      	mov	r1, r5
 800ca6a:	e726      	b.n	800c8ba <__ieee754_log+0x12a>
 800ca6c:	2c00      	cmp	r4, #0
 800ca6e:	d13d      	bne.n	800caec <__ieee754_log+0x35c>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4650      	mov	r0, sl
 800ca76:	4659      	mov	r1, fp
 800ca78:	f7f3 fb76 	bl	8000168 <__aeabi_dsub>
 800ca7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca80:	f7f3 fd26 	bl	80004d0 <__aeabi_dmul>
 800ca84:	e7be      	b.n	800ca04 <__ieee754_log+0x274>
 800ca86:	bf00      	nop
 800ca88:	fee00000 	.word	0xfee00000
 800ca8c:	3fe62e42 	.word	0x3fe62e42
 800ca90:	35793c76 	.word	0x35793c76
 800ca94:	3dea39ef 	.word	0x3dea39ef
 800ca98:	55555555 	.word	0x55555555
 800ca9c:	3fd55555 	.word	0x3fd55555
 800caa0:	df3e5244 	.word	0xdf3e5244
 800caa4:	3fc2f112 	.word	0x3fc2f112
 800caa8:	96cb03de 	.word	0x96cb03de
 800caac:	3fc74664 	.word	0x3fc74664
 800cab0:	94229359 	.word	0x94229359
 800cab4:	3fd24924 	.word	0x3fd24924
 800cab8:	55555593 	.word	0x55555593
 800cabc:	3fe55555 	.word	0x3fe55555
 800cac0:	d078c69f 	.word	0xd078c69f
 800cac4:	3fc39a09 	.word	0x3fc39a09
 800cac8:	1d8e78af 	.word	0x1d8e78af
 800cacc:	3fcc71c5 	.word	0x3fcc71c5
 800cad0:	9997fa04 	.word	0x9997fa04
 800cad4:	3fd99999 	.word	0x3fd99999
 800cad8:	c3500000 	.word	0xc3500000
 800cadc:	43500000 	.word	0x43500000
 800cae0:	7fefffff 	.word	0x7fefffff
 800cae4:	3ff00000 	.word	0x3ff00000
 800cae8:	3fe00000 	.word	0x3fe00000
 800caec:	a30e      	add	r3, pc, #56	; (adr r3, 800cb28 <__ieee754_log+0x398>)
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caf6:	f7f3 fceb 	bl	80004d0 <__aeabi_dmul>
 800cafa:	4632      	mov	r2, r6
 800cafc:	463b      	mov	r3, r7
 800cafe:	4604      	mov	r4, r0
 800cb00:	460d      	mov	r5, r1
 800cb02:	4650      	mov	r0, sl
 800cb04:	4659      	mov	r1, fp
 800cb06:	f7f3 fb2f 	bl	8000168 <__aeabi_dsub>
 800cb0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb0e:	f7f3 fcdf 	bl	80004d0 <__aeabi_dmul>
 800cb12:	a307      	add	r3, pc, #28	; (adr r3, 800cb30 <__ieee754_log+0x3a0>)
 800cb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb18:	4606      	mov	r6, r0
 800cb1a:	460f      	mov	r7, r1
 800cb1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb20:	e6df      	b.n	800c8e2 <__ieee754_log+0x152>
 800cb22:	2000      	movs	r0, #0
 800cb24:	2100      	movs	r1, #0
 800cb26:	e647      	b.n	800c7b8 <__ieee754_log+0x28>
 800cb28:	fee00000 	.word	0xfee00000
 800cb2c:	3fe62e42 	.word	0x3fe62e42
 800cb30:	35793c76 	.word	0x35793c76
 800cb34:	3dea39ef 	.word	0x3dea39ef

0800cb38 <__ieee754_pow>:
 800cb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3c:	b093      	sub	sp, #76	; 0x4c
 800cb3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb42:	9e03      	ldr	r6, [sp, #12]
 800cb44:	9a02      	ldr	r2, [sp, #8]
 800cb46:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cb4a:	ea55 0302 	orrs.w	r3, r5, r2
 800cb4e:	4607      	mov	r7, r0
 800cb50:	4688      	mov	r8, r1
 800cb52:	4682      	mov	sl, r0
 800cb54:	4689      	mov	r9, r1
 800cb56:	f000 849e 	beq.w	800d496 <__ieee754_pow+0x95e>
 800cb5a:	4b77      	ldr	r3, [pc, #476]	; (800cd38 <__ieee754_pow+0x200>)
 800cb5c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800cb60:	429c      	cmp	r4, r3
 800cb62:	dc09      	bgt.n	800cb78 <__ieee754_pow+0x40>
 800cb64:	d103      	bne.n	800cb6e <__ieee754_pow+0x36>
 800cb66:	b938      	cbnz	r0, 800cb78 <__ieee754_pow+0x40>
 800cb68:	42a5      	cmp	r5, r4
 800cb6a:	dc0d      	bgt.n	800cb88 <__ieee754_pow+0x50>
 800cb6c:	e001      	b.n	800cb72 <__ieee754_pow+0x3a>
 800cb6e:	429d      	cmp	r5, r3
 800cb70:	dc02      	bgt.n	800cb78 <__ieee754_pow+0x40>
 800cb72:	429d      	cmp	r5, r3
 800cb74:	d10e      	bne.n	800cb94 <__ieee754_pow+0x5c>
 800cb76:	b16a      	cbz	r2, 800cb94 <__ieee754_pow+0x5c>
 800cb78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cb7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cb80:	ea54 030a 	orrs.w	r3, r4, sl
 800cb84:	f000 8487 	beq.w	800d496 <__ieee754_pow+0x95e>
 800cb88:	486c      	ldr	r0, [pc, #432]	; (800cd3c <__ieee754_pow+0x204>)
 800cb8a:	b013      	add	sp, #76	; 0x4c
 800cb8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb90:	f002 bd8c 	b.w	800f6ac <nan>
 800cb94:	f1b9 0f00 	cmp.w	r9, #0
 800cb98:	da4f      	bge.n	800cc3a <__ieee754_pow+0x102>
 800cb9a:	4b69      	ldr	r3, [pc, #420]	; (800cd40 <__ieee754_pow+0x208>)
 800cb9c:	429d      	cmp	r5, r3
 800cb9e:	dc4a      	bgt.n	800cc36 <__ieee754_pow+0xfe>
 800cba0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cba4:	429d      	cmp	r5, r3
 800cba6:	dd48      	ble.n	800cc3a <__ieee754_pow+0x102>
 800cba8:	152b      	asrs	r3, r5, #20
 800cbaa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cbae:	2b14      	cmp	r3, #20
 800cbb0:	dd24      	ble.n	800cbfc <__ieee754_pow+0xc4>
 800cbb2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cbb6:	fa22 f103 	lsr.w	r1, r2, r3
 800cbba:	fa01 f303 	lsl.w	r3, r1, r3
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d13b      	bne.n	800cc3a <__ieee754_pow+0x102>
 800cbc2:	f001 0101 	and.w	r1, r1, #1
 800cbc6:	f1c1 0302 	rsb	r3, r1, #2
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	2a00      	cmp	r2, #0
 800cbce:	d156      	bne.n	800cc7e <__ieee754_pow+0x146>
 800cbd0:	4b59      	ldr	r3, [pc, #356]	; (800cd38 <__ieee754_pow+0x200>)
 800cbd2:	429d      	cmp	r5, r3
 800cbd4:	d122      	bne.n	800cc1c <__ieee754_pow+0xe4>
 800cbd6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cbda:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cbde:	ea53 030a 	orrs.w	r3, r3, sl
 800cbe2:	f000 8458 	beq.w	800d496 <__ieee754_pow+0x95e>
 800cbe6:	4b57      	ldr	r3, [pc, #348]	; (800cd44 <__ieee754_pow+0x20c>)
 800cbe8:	429c      	cmp	r4, r3
 800cbea:	dd28      	ble.n	800cc3e <__ieee754_pow+0x106>
 800cbec:	2e00      	cmp	r6, #0
 800cbee:	f280 8456 	bge.w	800d49e <__ieee754_pow+0x966>
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	b013      	add	sp, #76	; 0x4c
 800cbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfc:	2a00      	cmp	r2, #0
 800cbfe:	d13c      	bne.n	800cc7a <__ieee754_pow+0x142>
 800cc00:	f1c3 0314 	rsb	r3, r3, #20
 800cc04:	fa45 f103 	asr.w	r1, r5, r3
 800cc08:	fa01 f303 	lsl.w	r3, r1, r3
 800cc0c:	429d      	cmp	r5, r3
 800cc0e:	f040 844e 	bne.w	800d4ae <__ieee754_pow+0x976>
 800cc12:	f001 0101 	and.w	r1, r1, #1
 800cc16:	f1c1 0302 	rsb	r3, r1, #2
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	4b4a      	ldr	r3, [pc, #296]	; (800cd48 <__ieee754_pow+0x210>)
 800cc1e:	429d      	cmp	r5, r3
 800cc20:	d114      	bne.n	800cc4c <__ieee754_pow+0x114>
 800cc22:	2e00      	cmp	r6, #0
 800cc24:	f280 843f 	bge.w	800d4a6 <__ieee754_pow+0x96e>
 800cc28:	463a      	mov	r2, r7
 800cc2a:	4643      	mov	r3, r8
 800cc2c:	2000      	movs	r0, #0
 800cc2e:	4946      	ldr	r1, [pc, #280]	; (800cd48 <__ieee754_pow+0x210>)
 800cc30:	f7f3 fd78 	bl	8000724 <__aeabi_ddiv>
 800cc34:	e7df      	b.n	800cbf6 <__ieee754_pow+0xbe>
 800cc36:	2302      	movs	r3, #2
 800cc38:	e7c7      	b.n	800cbca <__ieee754_pow+0x92>
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	e7c5      	b.n	800cbca <__ieee754_pow+0x92>
 800cc3e:	2e00      	cmp	r6, #0
 800cc40:	dad7      	bge.n	800cbf2 <__ieee754_pow+0xba>
 800cc42:	9b03      	ldr	r3, [sp, #12]
 800cc44:	9802      	ldr	r0, [sp, #8]
 800cc46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cc4a:	e7d4      	b.n	800cbf6 <__ieee754_pow+0xbe>
 800cc4c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800cc50:	d106      	bne.n	800cc60 <__ieee754_pow+0x128>
 800cc52:	463a      	mov	r2, r7
 800cc54:	4643      	mov	r3, r8
 800cc56:	4638      	mov	r0, r7
 800cc58:	4641      	mov	r1, r8
 800cc5a:	f7f3 fc39 	bl	80004d0 <__aeabi_dmul>
 800cc5e:	e7ca      	b.n	800cbf6 <__ieee754_pow+0xbe>
 800cc60:	4b3a      	ldr	r3, [pc, #232]	; (800cd4c <__ieee754_pow+0x214>)
 800cc62:	429e      	cmp	r6, r3
 800cc64:	d10b      	bne.n	800cc7e <__ieee754_pow+0x146>
 800cc66:	f1b9 0f00 	cmp.w	r9, #0
 800cc6a:	db08      	blt.n	800cc7e <__ieee754_pow+0x146>
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	4641      	mov	r1, r8
 800cc70:	b013      	add	sp, #76	; 0x4c
 800cc72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc76:	f000 be47 	b.w	800d908 <__ieee754_sqrt>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	4638      	mov	r0, r7
 800cc80:	4641      	mov	r1, r8
 800cc82:	f002 fc83 	bl	800f58c <fabs>
 800cc86:	f1ba 0f00 	cmp.w	sl, #0
 800cc8a:	d125      	bne.n	800ccd8 <__ieee754_pow+0x1a0>
 800cc8c:	b124      	cbz	r4, 800cc98 <__ieee754_pow+0x160>
 800cc8e:	4b2e      	ldr	r3, [pc, #184]	; (800cd48 <__ieee754_pow+0x210>)
 800cc90:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d11f      	bne.n	800ccd8 <__ieee754_pow+0x1a0>
 800cc98:	2e00      	cmp	r6, #0
 800cc9a:	da05      	bge.n	800cca8 <__ieee754_pow+0x170>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	2000      	movs	r0, #0
 800cca2:	4929      	ldr	r1, [pc, #164]	; (800cd48 <__ieee754_pow+0x210>)
 800cca4:	f7f3 fd3e 	bl	8000724 <__aeabi_ddiv>
 800cca8:	f1b9 0f00 	cmp.w	r9, #0
 800ccac:	daa3      	bge.n	800cbf6 <__ieee754_pow+0xbe>
 800ccae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ccb2:	9b00      	ldr	r3, [sp, #0]
 800ccb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ccb8:	4323      	orrs	r3, r4
 800ccba:	d106      	bne.n	800ccca <__ieee754_pow+0x192>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	f7f3 fa52 	bl	8000168 <__aeabi_dsub>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	e7b2      	b.n	800cc30 <__ieee754_pow+0xf8>
 800ccca:	9b00      	ldr	r3, [sp, #0]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d192      	bne.n	800cbf6 <__ieee754_pow+0xbe>
 800ccd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	e78e      	b.n	800cbf6 <__ieee754_pow+0xbe>
 800ccd8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800ccdc:	f109 33ff 	add.w	r3, r9, #4294967295
 800cce0:	930c      	str	r3, [sp, #48]	; 0x30
 800cce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cce4:	9b00      	ldr	r3, [sp, #0]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	d104      	bne.n	800ccf4 <__ieee754_pow+0x1bc>
 800ccea:	463a      	mov	r2, r7
 800ccec:	4643      	mov	r3, r8
 800ccee:	4638      	mov	r0, r7
 800ccf0:	4641      	mov	r1, r8
 800ccf2:	e7e5      	b.n	800ccc0 <__ieee754_pow+0x188>
 800ccf4:	4b16      	ldr	r3, [pc, #88]	; (800cd50 <__ieee754_pow+0x218>)
 800ccf6:	429d      	cmp	r5, r3
 800ccf8:	f340 80fc 	ble.w	800cef4 <__ieee754_pow+0x3bc>
 800ccfc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cd00:	429d      	cmp	r5, r3
 800cd02:	dd0b      	ble.n	800cd1c <__ieee754_pow+0x1e4>
 800cd04:	4b0f      	ldr	r3, [pc, #60]	; (800cd44 <__ieee754_pow+0x20c>)
 800cd06:	429c      	cmp	r4, r3
 800cd08:	dc0e      	bgt.n	800cd28 <__ieee754_pow+0x1f0>
 800cd0a:	2e00      	cmp	r6, #0
 800cd0c:	f6bf af71 	bge.w	800cbf2 <__ieee754_pow+0xba>
 800cd10:	a307      	add	r3, pc, #28	; (adr r3, 800cd30 <__ieee754_pow+0x1f8>)
 800cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd16:	4610      	mov	r0, r2
 800cd18:	4619      	mov	r1, r3
 800cd1a:	e79e      	b.n	800cc5a <__ieee754_pow+0x122>
 800cd1c:	4b0d      	ldr	r3, [pc, #52]	; (800cd54 <__ieee754_pow+0x21c>)
 800cd1e:	429c      	cmp	r4, r3
 800cd20:	ddf3      	ble.n	800cd0a <__ieee754_pow+0x1d2>
 800cd22:	4b09      	ldr	r3, [pc, #36]	; (800cd48 <__ieee754_pow+0x210>)
 800cd24:	429c      	cmp	r4, r3
 800cd26:	dd17      	ble.n	800cd58 <__ieee754_pow+0x220>
 800cd28:	2e00      	cmp	r6, #0
 800cd2a:	dcf1      	bgt.n	800cd10 <__ieee754_pow+0x1d8>
 800cd2c:	e761      	b.n	800cbf2 <__ieee754_pow+0xba>
 800cd2e:	bf00      	nop
 800cd30:	8800759c 	.word	0x8800759c
 800cd34:	7e37e43c 	.word	0x7e37e43c
 800cd38:	7ff00000 	.word	0x7ff00000
 800cd3c:	080101dc 	.word	0x080101dc
 800cd40:	433fffff 	.word	0x433fffff
 800cd44:	3fefffff 	.word	0x3fefffff
 800cd48:	3ff00000 	.word	0x3ff00000
 800cd4c:	3fe00000 	.word	0x3fe00000
 800cd50:	41e00000 	.word	0x41e00000
 800cd54:	3feffffe 	.word	0x3feffffe
 800cd58:	2200      	movs	r2, #0
 800cd5a:	4b61      	ldr	r3, [pc, #388]	; (800cee0 <__ieee754_pow+0x3a8>)
 800cd5c:	f7f3 fa04 	bl	8000168 <__aeabi_dsub>
 800cd60:	a355      	add	r3, pc, #340	; (adr r3, 800ceb8 <__ieee754_pow+0x380>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	4604      	mov	r4, r0
 800cd68:	460d      	mov	r5, r1
 800cd6a:	f7f3 fbb1 	bl	80004d0 <__aeabi_dmul>
 800cd6e:	a354      	add	r3, pc, #336	; (adr r3, 800cec0 <__ieee754_pow+0x388>)
 800cd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd74:	4606      	mov	r6, r0
 800cd76:	460f      	mov	r7, r1
 800cd78:	4620      	mov	r0, r4
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f7f3 fba8 	bl	80004d0 <__aeabi_dmul>
 800cd80:	2200      	movs	r2, #0
 800cd82:	4682      	mov	sl, r0
 800cd84:	468b      	mov	fp, r1
 800cd86:	4b57      	ldr	r3, [pc, #348]	; (800cee4 <__ieee754_pow+0x3ac>)
 800cd88:	4620      	mov	r0, r4
 800cd8a:	4629      	mov	r1, r5
 800cd8c:	f7f3 fba0 	bl	80004d0 <__aeabi_dmul>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	a14c      	add	r1, pc, #304	; (adr r1, 800cec8 <__ieee754_pow+0x390>)
 800cd96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd9a:	f7f3 f9e5 	bl	8000168 <__aeabi_dsub>
 800cd9e:	4622      	mov	r2, r4
 800cda0:	462b      	mov	r3, r5
 800cda2:	f7f3 fb95 	bl	80004d0 <__aeabi_dmul>
 800cda6:	4602      	mov	r2, r0
 800cda8:	460b      	mov	r3, r1
 800cdaa:	2000      	movs	r0, #0
 800cdac:	494e      	ldr	r1, [pc, #312]	; (800cee8 <__ieee754_pow+0x3b0>)
 800cdae:	f7f3 f9db 	bl	8000168 <__aeabi_dsub>
 800cdb2:	4622      	mov	r2, r4
 800cdb4:	462b      	mov	r3, r5
 800cdb6:	4680      	mov	r8, r0
 800cdb8:	4689      	mov	r9, r1
 800cdba:	4620      	mov	r0, r4
 800cdbc:	4629      	mov	r1, r5
 800cdbe:	f7f3 fb87 	bl	80004d0 <__aeabi_dmul>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4640      	mov	r0, r8
 800cdc8:	4649      	mov	r1, r9
 800cdca:	f7f3 fb81 	bl	80004d0 <__aeabi_dmul>
 800cdce:	a340      	add	r3, pc, #256	; (adr r3, 800ced0 <__ieee754_pow+0x398>)
 800cdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd4:	f7f3 fb7c 	bl	80004d0 <__aeabi_dmul>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	460b      	mov	r3, r1
 800cddc:	4650      	mov	r0, sl
 800cdde:	4659      	mov	r1, fp
 800cde0:	f7f3 f9c2 	bl	8000168 <__aeabi_dsub>
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	4604      	mov	r4, r0
 800cdea:	460d      	mov	r5, r1
 800cdec:	4630      	mov	r0, r6
 800cdee:	4639      	mov	r1, r7
 800cdf0:	f7f3 f9bc 	bl	800016c <__adddf3>
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	468b      	mov	fp, r1
 800cdf8:	4682      	mov	sl, r0
 800cdfa:	4632      	mov	r2, r6
 800cdfc:	463b      	mov	r3, r7
 800cdfe:	f7f3 f9b3 	bl	8000168 <__aeabi_dsub>
 800ce02:	4602      	mov	r2, r0
 800ce04:	460b      	mov	r3, r1
 800ce06:	4620      	mov	r0, r4
 800ce08:	4629      	mov	r1, r5
 800ce0a:	f7f3 f9ad 	bl	8000168 <__aeabi_dsub>
 800ce0e:	9b00      	ldr	r3, [sp, #0]
 800ce10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce12:	3b01      	subs	r3, #1
 800ce14:	4313      	orrs	r3, r2
 800ce16:	f04f 0300 	mov.w	r3, #0
 800ce1a:	bf0c      	ite	eq
 800ce1c:	4c33      	ldreq	r4, [pc, #204]	; (800ceec <__ieee754_pow+0x3b4>)
 800ce1e:	4c30      	ldrne	r4, [pc, #192]	; (800cee0 <__ieee754_pow+0x3a8>)
 800ce20:	4606      	mov	r6, r0
 800ce22:	e88d 0018 	stmia.w	sp, {r3, r4}
 800ce26:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce2a:	2400      	movs	r4, #0
 800ce2c:	460f      	mov	r7, r1
 800ce2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce32:	4622      	mov	r2, r4
 800ce34:	462b      	mov	r3, r5
 800ce36:	f7f3 f997 	bl	8000168 <__aeabi_dsub>
 800ce3a:	4652      	mov	r2, sl
 800ce3c:	465b      	mov	r3, fp
 800ce3e:	f7f3 fb47 	bl	80004d0 <__aeabi_dmul>
 800ce42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce46:	4680      	mov	r8, r0
 800ce48:	4689      	mov	r9, r1
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	4639      	mov	r1, r7
 800ce4e:	f7f3 fb3f 	bl	80004d0 <__aeabi_dmul>
 800ce52:	4602      	mov	r2, r0
 800ce54:	460b      	mov	r3, r1
 800ce56:	4640      	mov	r0, r8
 800ce58:	4649      	mov	r1, r9
 800ce5a:	f7f3 f987 	bl	800016c <__adddf3>
 800ce5e:	4622      	mov	r2, r4
 800ce60:	462b      	mov	r3, r5
 800ce62:	4680      	mov	r8, r0
 800ce64:	4689      	mov	r9, r1
 800ce66:	4650      	mov	r0, sl
 800ce68:	4659      	mov	r1, fp
 800ce6a:	f7f3 fb31 	bl	80004d0 <__aeabi_dmul>
 800ce6e:	4604      	mov	r4, r0
 800ce70:	460d      	mov	r5, r1
 800ce72:	460b      	mov	r3, r1
 800ce74:	4602      	mov	r2, r0
 800ce76:	4649      	mov	r1, r9
 800ce78:	4640      	mov	r0, r8
 800ce7a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ce7e:	f7f3 f975 	bl	800016c <__adddf3>
 800ce82:	4b1b      	ldr	r3, [pc, #108]	; (800cef0 <__ieee754_pow+0x3b8>)
 800ce84:	4682      	mov	sl, r0
 800ce86:	4299      	cmp	r1, r3
 800ce88:	460f      	mov	r7, r1
 800ce8a:	460e      	mov	r6, r1
 800ce8c:	f340 82da 	ble.w	800d444 <__ieee754_pow+0x90c>
 800ce90:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ce94:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ce98:	4303      	orrs	r3, r0
 800ce9a:	f000 81d5 	beq.w	800d248 <__ieee754_pow+0x710>
 800ce9e:	a30e      	add	r3, pc, #56	; (adr r3, 800ced8 <__ieee754_pow+0x3a0>)
 800cea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cea8:	f7f3 fb12 	bl	80004d0 <__aeabi_dmul>
 800ceac:	a30a      	add	r3, pc, #40	; (adr r3, 800ced8 <__ieee754_pow+0x3a0>)
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	e6d2      	b.n	800cc5a <__ieee754_pow+0x122>
 800ceb4:	f3af 8000 	nop.w
 800ceb8:	60000000 	.word	0x60000000
 800cebc:	3ff71547 	.word	0x3ff71547
 800cec0:	f85ddf44 	.word	0xf85ddf44
 800cec4:	3e54ae0b 	.word	0x3e54ae0b
 800cec8:	55555555 	.word	0x55555555
 800cecc:	3fd55555 	.word	0x3fd55555
 800ced0:	652b82fe 	.word	0x652b82fe
 800ced4:	3ff71547 	.word	0x3ff71547
 800ced8:	8800759c 	.word	0x8800759c
 800cedc:	7e37e43c 	.word	0x7e37e43c
 800cee0:	3ff00000 	.word	0x3ff00000
 800cee4:	3fd00000 	.word	0x3fd00000
 800cee8:	3fe00000 	.word	0x3fe00000
 800ceec:	bff00000 	.word	0xbff00000
 800cef0:	408fffff 	.word	0x408fffff
 800cef4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cef8:	f04f 0200 	mov.w	r2, #0
 800cefc:	da05      	bge.n	800cf0a <__ieee754_pow+0x3d2>
 800cefe:	4bca      	ldr	r3, [pc, #808]	; (800d228 <__ieee754_pow+0x6f0>)
 800cf00:	f7f3 fae6 	bl	80004d0 <__aeabi_dmul>
 800cf04:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cf08:	460c      	mov	r4, r1
 800cf0a:	1523      	asrs	r3, r4, #20
 800cf0c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cf10:	4413      	add	r3, r2
 800cf12:	9307      	str	r3, [sp, #28]
 800cf14:	4bc5      	ldr	r3, [pc, #788]	; (800d22c <__ieee754_pow+0x6f4>)
 800cf16:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cf1a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cf1e:	429c      	cmp	r4, r3
 800cf20:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cf24:	dd08      	ble.n	800cf38 <__ieee754_pow+0x400>
 800cf26:	4bc2      	ldr	r3, [pc, #776]	; (800d230 <__ieee754_pow+0x6f8>)
 800cf28:	429c      	cmp	r4, r3
 800cf2a:	f340 8154 	ble.w	800d1d6 <__ieee754_pow+0x69e>
 800cf2e:	9b07      	ldr	r3, [sp, #28]
 800cf30:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cf34:	3301      	adds	r3, #1
 800cf36:	9307      	str	r3, [sp, #28]
 800cf38:	2600      	movs	r6, #0
 800cf3a:	4629      	mov	r1, r5
 800cf3c:	00f3      	lsls	r3, r6, #3
 800cf3e:	930d      	str	r3, [sp, #52]	; 0x34
 800cf40:	4bbc      	ldr	r3, [pc, #752]	; (800d234 <__ieee754_pow+0x6fc>)
 800cf42:	00f2      	lsls	r2, r6, #3
 800cf44:	4413      	add	r3, r2
 800cf46:	cb18      	ldmia	r3, {r3, r4}
 800cf48:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	4623      	mov	r3, r4
 800cf50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cf54:	f7f3 f908 	bl	8000168 <__aeabi_dsub>
 800cf58:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cf60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf64:	f7f3 f902 	bl	800016c <__adddf3>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	49b2      	ldr	r1, [pc, #712]	; (800d238 <__ieee754_pow+0x700>)
 800cf70:	f7f3 fbd8 	bl	8000724 <__aeabi_ddiv>
 800cf74:	4602      	mov	r2, r0
 800cf76:	460b      	mov	r3, r1
 800cf78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cf7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cf80:	f7f3 faa6 	bl	80004d0 <__aeabi_dmul>
 800cf84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf88:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cf8c:	f04f 0a00 	mov.w	sl, #0
 800cf90:	2200      	movs	r2, #0
 800cf92:	106d      	asrs	r5, r5, #1
 800cf94:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cf98:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cf9c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800cfa0:	4659      	mov	r1, fp
 800cfa2:	4650      	mov	r0, sl
 800cfa4:	4614      	mov	r4, r2
 800cfa6:	461d      	mov	r5, r3
 800cfa8:	f7f3 fa92 	bl	80004d0 <__aeabi_dmul>
 800cfac:	4602      	mov	r2, r0
 800cfae:	460b      	mov	r3, r1
 800cfb0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cfb4:	f7f3 f8d8 	bl	8000168 <__aeabi_dsub>
 800cfb8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	460f      	mov	r7, r1
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	f7f3 f8d0 	bl	8000168 <__aeabi_dsub>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cfd0:	f7f3 f8ca 	bl	8000168 <__aeabi_dsub>
 800cfd4:	465b      	mov	r3, fp
 800cfd6:	4652      	mov	r2, sl
 800cfd8:	f7f3 fa7a 	bl	80004d0 <__aeabi_dmul>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	f7f3 f8c0 	bl	8000168 <__aeabi_dsub>
 800cfe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cfec:	f7f3 fa70 	bl	80004d0 <__aeabi_dmul>
 800cff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cff4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cff8:	4610      	mov	r0, r2
 800cffa:	4619      	mov	r1, r3
 800cffc:	f7f3 fa68 	bl	80004d0 <__aeabi_dmul>
 800d000:	a377      	add	r3, pc, #476	; (adr r3, 800d1e0 <__ieee754_pow+0x6a8>)
 800d002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d006:	4604      	mov	r4, r0
 800d008:	460d      	mov	r5, r1
 800d00a:	f7f3 fa61 	bl	80004d0 <__aeabi_dmul>
 800d00e:	a376      	add	r3, pc, #472	; (adr r3, 800d1e8 <__ieee754_pow+0x6b0>)
 800d010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d014:	f7f3 f8aa 	bl	800016c <__adddf3>
 800d018:	4622      	mov	r2, r4
 800d01a:	462b      	mov	r3, r5
 800d01c:	f7f3 fa58 	bl	80004d0 <__aeabi_dmul>
 800d020:	a373      	add	r3, pc, #460	; (adr r3, 800d1f0 <__ieee754_pow+0x6b8>)
 800d022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d026:	f7f3 f8a1 	bl	800016c <__adddf3>
 800d02a:	4622      	mov	r2, r4
 800d02c:	462b      	mov	r3, r5
 800d02e:	f7f3 fa4f 	bl	80004d0 <__aeabi_dmul>
 800d032:	a371      	add	r3, pc, #452	; (adr r3, 800d1f8 <__ieee754_pow+0x6c0>)
 800d034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d038:	f7f3 f898 	bl	800016c <__adddf3>
 800d03c:	4622      	mov	r2, r4
 800d03e:	462b      	mov	r3, r5
 800d040:	f7f3 fa46 	bl	80004d0 <__aeabi_dmul>
 800d044:	a36e      	add	r3, pc, #440	; (adr r3, 800d200 <__ieee754_pow+0x6c8>)
 800d046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04a:	f7f3 f88f 	bl	800016c <__adddf3>
 800d04e:	4622      	mov	r2, r4
 800d050:	462b      	mov	r3, r5
 800d052:	f7f3 fa3d 	bl	80004d0 <__aeabi_dmul>
 800d056:	a36c      	add	r3, pc, #432	; (adr r3, 800d208 <__ieee754_pow+0x6d0>)
 800d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05c:	f7f3 f886 	bl	800016c <__adddf3>
 800d060:	4622      	mov	r2, r4
 800d062:	4606      	mov	r6, r0
 800d064:	460f      	mov	r7, r1
 800d066:	462b      	mov	r3, r5
 800d068:	4620      	mov	r0, r4
 800d06a:	4629      	mov	r1, r5
 800d06c:	f7f3 fa30 	bl	80004d0 <__aeabi_dmul>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	4630      	mov	r0, r6
 800d076:	4639      	mov	r1, r7
 800d078:	f7f3 fa2a 	bl	80004d0 <__aeabi_dmul>
 800d07c:	4604      	mov	r4, r0
 800d07e:	460d      	mov	r5, r1
 800d080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d084:	465b      	mov	r3, fp
 800d086:	4652      	mov	r2, sl
 800d088:	f7f3 f870 	bl	800016c <__adddf3>
 800d08c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d090:	f7f3 fa1e 	bl	80004d0 <__aeabi_dmul>
 800d094:	4622      	mov	r2, r4
 800d096:	462b      	mov	r3, r5
 800d098:	f7f3 f868 	bl	800016c <__adddf3>
 800d09c:	465b      	mov	r3, fp
 800d09e:	4606      	mov	r6, r0
 800d0a0:	460f      	mov	r7, r1
 800d0a2:	4652      	mov	r2, sl
 800d0a4:	4659      	mov	r1, fp
 800d0a6:	4650      	mov	r0, sl
 800d0a8:	f7f3 fa12 	bl	80004d0 <__aeabi_dmul>
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4b63      	ldr	r3, [pc, #396]	; (800d23c <__ieee754_pow+0x704>)
 800d0b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d0b4:	f7f3 f85a 	bl	800016c <__adddf3>
 800d0b8:	4632      	mov	r2, r6
 800d0ba:	463b      	mov	r3, r7
 800d0bc:	f7f3 f856 	bl	800016c <__adddf3>
 800d0c0:	4650      	mov	r0, sl
 800d0c2:	460d      	mov	r5, r1
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4650      	mov	r0, sl
 800d0ca:	4659      	mov	r1, fp
 800d0cc:	f7f3 fa00 	bl	80004d0 <__aeabi_dmul>
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	4680      	mov	r8, r0
 800d0d4:	4689      	mov	r9, r1
 800d0d6:	4b59      	ldr	r3, [pc, #356]	; (800d23c <__ieee754_pow+0x704>)
 800d0d8:	4629      	mov	r1, r5
 800d0da:	4650      	mov	r0, sl
 800d0dc:	f7f3 f844 	bl	8000168 <__aeabi_dsub>
 800d0e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d0e4:	f7f3 f840 	bl	8000168 <__aeabi_dsub>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	4639      	mov	r1, r7
 800d0f0:	f7f3 f83a 	bl	8000168 <__aeabi_dsub>
 800d0f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0f8:	f7f3 f9ea 	bl	80004d0 <__aeabi_dmul>
 800d0fc:	462b      	mov	r3, r5
 800d0fe:	4606      	mov	r6, r0
 800d100:	460f      	mov	r7, r1
 800d102:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d106:	4652      	mov	r2, sl
 800d108:	f7f3 f9e2 	bl	80004d0 <__aeabi_dmul>
 800d10c:	4602      	mov	r2, r0
 800d10e:	460b      	mov	r3, r1
 800d110:	4630      	mov	r0, r6
 800d112:	4639      	mov	r1, r7
 800d114:	f7f3 f82a 	bl	800016c <__adddf3>
 800d118:	4606      	mov	r6, r0
 800d11a:	460f      	mov	r7, r1
 800d11c:	4602      	mov	r2, r0
 800d11e:	460b      	mov	r3, r1
 800d120:	4640      	mov	r0, r8
 800d122:	4649      	mov	r1, r9
 800d124:	f7f3 f822 	bl	800016c <__adddf3>
 800d128:	a339      	add	r3, pc, #228	; (adr r3, 800d210 <__ieee754_pow+0x6d8>)
 800d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12e:	4650      	mov	r0, sl
 800d130:	460d      	mov	r5, r1
 800d132:	f7f3 f9cd 	bl	80004d0 <__aeabi_dmul>
 800d136:	4642      	mov	r2, r8
 800d138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d13c:	464b      	mov	r3, r9
 800d13e:	4629      	mov	r1, r5
 800d140:	4650      	mov	r0, sl
 800d142:	f7f3 f811 	bl	8000168 <__aeabi_dsub>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	4630      	mov	r0, r6
 800d14c:	4639      	mov	r1, r7
 800d14e:	f7f3 f80b 	bl	8000168 <__aeabi_dsub>
 800d152:	a331      	add	r3, pc, #196	; (adr r3, 800d218 <__ieee754_pow+0x6e0>)
 800d154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d158:	f7f3 f9ba 	bl	80004d0 <__aeabi_dmul>
 800d15c:	a330      	add	r3, pc, #192	; (adr r3, 800d220 <__ieee754_pow+0x6e8>)
 800d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d162:	4606      	mov	r6, r0
 800d164:	460f      	mov	r7, r1
 800d166:	4650      	mov	r0, sl
 800d168:	4629      	mov	r1, r5
 800d16a:	f7f3 f9b1 	bl	80004d0 <__aeabi_dmul>
 800d16e:	4602      	mov	r2, r0
 800d170:	460b      	mov	r3, r1
 800d172:	4630      	mov	r0, r6
 800d174:	4639      	mov	r1, r7
 800d176:	f7f2 fff9 	bl	800016c <__adddf3>
 800d17a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d17c:	4b30      	ldr	r3, [pc, #192]	; (800d240 <__ieee754_pow+0x708>)
 800d17e:	4413      	add	r3, r2
 800d180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d184:	f7f2 fff2 	bl	800016c <__adddf3>
 800d188:	4604      	mov	r4, r0
 800d18a:	9807      	ldr	r0, [sp, #28]
 800d18c:	460d      	mov	r5, r1
 800d18e:	f7f3 f939 	bl	8000404 <__aeabi_i2d>
 800d192:	4606      	mov	r6, r0
 800d194:	460f      	mov	r7, r1
 800d196:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d198:	4b2a      	ldr	r3, [pc, #168]	; (800d244 <__ieee754_pow+0x70c>)
 800d19a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d19e:	4413      	add	r3, r2
 800d1a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	462b      	mov	r3, r5
 800d1a8:	f7f2 ffe0 	bl	800016c <__adddf3>
 800d1ac:	4642      	mov	r2, r8
 800d1ae:	464b      	mov	r3, r9
 800d1b0:	f7f2 ffdc 	bl	800016c <__adddf3>
 800d1b4:	4632      	mov	r2, r6
 800d1b6:	463b      	mov	r3, r7
 800d1b8:	f7f2 ffd8 	bl	800016c <__adddf3>
 800d1bc:	4632      	mov	r2, r6
 800d1be:	463b      	mov	r3, r7
 800d1c0:	4650      	mov	r0, sl
 800d1c2:	468b      	mov	fp, r1
 800d1c4:	f7f2 ffd0 	bl	8000168 <__aeabi_dsub>
 800d1c8:	4642      	mov	r2, r8
 800d1ca:	464b      	mov	r3, r9
 800d1cc:	f7f2 ffcc 	bl	8000168 <__aeabi_dsub>
 800d1d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1d4:	e613      	b.n	800cdfe <__ieee754_pow+0x2c6>
 800d1d6:	2601      	movs	r6, #1
 800d1d8:	e6af      	b.n	800cf3a <__ieee754_pow+0x402>
 800d1da:	bf00      	nop
 800d1dc:	f3af 8000 	nop.w
 800d1e0:	4a454eef 	.word	0x4a454eef
 800d1e4:	3fca7e28 	.word	0x3fca7e28
 800d1e8:	93c9db65 	.word	0x93c9db65
 800d1ec:	3fcd864a 	.word	0x3fcd864a
 800d1f0:	a91d4101 	.word	0xa91d4101
 800d1f4:	3fd17460 	.word	0x3fd17460
 800d1f8:	518f264d 	.word	0x518f264d
 800d1fc:	3fd55555 	.word	0x3fd55555
 800d200:	db6fabff 	.word	0xdb6fabff
 800d204:	3fdb6db6 	.word	0x3fdb6db6
 800d208:	33333303 	.word	0x33333303
 800d20c:	3fe33333 	.word	0x3fe33333
 800d210:	e0000000 	.word	0xe0000000
 800d214:	3feec709 	.word	0x3feec709
 800d218:	dc3a03fd 	.word	0xdc3a03fd
 800d21c:	3feec709 	.word	0x3feec709
 800d220:	145b01f5 	.word	0x145b01f5
 800d224:	be3e2fe0 	.word	0xbe3e2fe0
 800d228:	43400000 	.word	0x43400000
 800d22c:	0003988e 	.word	0x0003988e
 800d230:	000bb679 	.word	0x000bb679
 800d234:	080107f8 	.word	0x080107f8
 800d238:	3ff00000 	.word	0x3ff00000
 800d23c:	40080000 	.word	0x40080000
 800d240:	08010818 	.word	0x08010818
 800d244:	08010808 	.word	0x08010808
 800d248:	a39b      	add	r3, pc, #620	; (adr r3, 800d4b8 <__ieee754_pow+0x980>)
 800d24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24e:	4640      	mov	r0, r8
 800d250:	4649      	mov	r1, r9
 800d252:	f7f2 ff8b 	bl	800016c <__adddf3>
 800d256:	4622      	mov	r2, r4
 800d258:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d25c:	462b      	mov	r3, r5
 800d25e:	4650      	mov	r0, sl
 800d260:	4639      	mov	r1, r7
 800d262:	f7f2 ff81 	bl	8000168 <__aeabi_dsub>
 800d266:	4602      	mov	r2, r0
 800d268:	460b      	mov	r3, r1
 800d26a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d26e:	f7f3 fbbf 	bl	80009f0 <__aeabi_dcmpgt>
 800d272:	2800      	cmp	r0, #0
 800d274:	f47f ae13 	bne.w	800ce9e <__ieee754_pow+0x366>
 800d278:	4aa3      	ldr	r2, [pc, #652]	; (800d508 <__ieee754_pow+0x9d0>)
 800d27a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d27e:	4293      	cmp	r3, r2
 800d280:	f340 8104 	ble.w	800d48c <__ieee754_pow+0x954>
 800d284:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d288:	2000      	movs	r0, #0
 800d28a:	151b      	asrs	r3, r3, #20
 800d28c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d290:	fa4a f303 	asr.w	r3, sl, r3
 800d294:	4433      	add	r3, r6
 800d296:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d29a:	4f9c      	ldr	r7, [pc, #624]	; (800d50c <__ieee754_pow+0x9d4>)
 800d29c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d2a0:	4117      	asrs	r7, r2
 800d2a2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d2a6:	ea23 0107 	bic.w	r1, r3, r7
 800d2aa:	f1c2 0214 	rsb	r2, r2, #20
 800d2ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d2b2:	fa4a fa02 	asr.w	sl, sl, r2
 800d2b6:	2e00      	cmp	r6, #0
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	4620      	mov	r0, r4
 800d2be:	4629      	mov	r1, r5
 800d2c0:	bfb8      	it	lt
 800d2c2:	f1ca 0a00 	rsblt	sl, sl, #0
 800d2c6:	f7f2 ff4f 	bl	8000168 <__aeabi_dsub>
 800d2ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2d2:	4642      	mov	r2, r8
 800d2d4:	464b      	mov	r3, r9
 800d2d6:	f7f2 ff49 	bl	800016c <__adddf3>
 800d2da:	a379      	add	r3, pc, #484	; (adr r3, 800d4c0 <__ieee754_pow+0x988>)
 800d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	460d      	mov	r5, r1
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	f7f3 f8f3 	bl	80004d0 <__aeabi_dmul>
 800d2ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2ee:	4606      	mov	r6, r0
 800d2f0:	460f      	mov	r7, r1
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	f7f2 ff37 	bl	8000168 <__aeabi_dsub>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	4640      	mov	r0, r8
 800d300:	4649      	mov	r1, r9
 800d302:	f7f2 ff31 	bl	8000168 <__aeabi_dsub>
 800d306:	a370      	add	r3, pc, #448	; (adr r3, 800d4c8 <__ieee754_pow+0x990>)
 800d308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30c:	f7f3 f8e0 	bl	80004d0 <__aeabi_dmul>
 800d310:	a36f      	add	r3, pc, #444	; (adr r3, 800d4d0 <__ieee754_pow+0x998>)
 800d312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d316:	4680      	mov	r8, r0
 800d318:	4689      	mov	r9, r1
 800d31a:	4620      	mov	r0, r4
 800d31c:	4629      	mov	r1, r5
 800d31e:	f7f3 f8d7 	bl	80004d0 <__aeabi_dmul>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	4640      	mov	r0, r8
 800d328:	4649      	mov	r1, r9
 800d32a:	f7f2 ff1f 	bl	800016c <__adddf3>
 800d32e:	4604      	mov	r4, r0
 800d330:	460d      	mov	r5, r1
 800d332:	4602      	mov	r2, r0
 800d334:	460b      	mov	r3, r1
 800d336:	4630      	mov	r0, r6
 800d338:	4639      	mov	r1, r7
 800d33a:	f7f2 ff17 	bl	800016c <__adddf3>
 800d33e:	4632      	mov	r2, r6
 800d340:	463b      	mov	r3, r7
 800d342:	4680      	mov	r8, r0
 800d344:	4689      	mov	r9, r1
 800d346:	f7f2 ff0f 	bl	8000168 <__aeabi_dsub>
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	4620      	mov	r0, r4
 800d350:	4629      	mov	r1, r5
 800d352:	f7f2 ff09 	bl	8000168 <__aeabi_dsub>
 800d356:	4642      	mov	r2, r8
 800d358:	4606      	mov	r6, r0
 800d35a:	460f      	mov	r7, r1
 800d35c:	464b      	mov	r3, r9
 800d35e:	4640      	mov	r0, r8
 800d360:	4649      	mov	r1, r9
 800d362:	f7f3 f8b5 	bl	80004d0 <__aeabi_dmul>
 800d366:	a35c      	add	r3, pc, #368	; (adr r3, 800d4d8 <__ieee754_pow+0x9a0>)
 800d368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36c:	4604      	mov	r4, r0
 800d36e:	460d      	mov	r5, r1
 800d370:	f7f3 f8ae 	bl	80004d0 <__aeabi_dmul>
 800d374:	a35a      	add	r3, pc, #360	; (adr r3, 800d4e0 <__ieee754_pow+0x9a8>)
 800d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37a:	f7f2 fef5 	bl	8000168 <__aeabi_dsub>
 800d37e:	4622      	mov	r2, r4
 800d380:	462b      	mov	r3, r5
 800d382:	f7f3 f8a5 	bl	80004d0 <__aeabi_dmul>
 800d386:	a358      	add	r3, pc, #352	; (adr r3, 800d4e8 <__ieee754_pow+0x9b0>)
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	f7f2 feee 	bl	800016c <__adddf3>
 800d390:	4622      	mov	r2, r4
 800d392:	462b      	mov	r3, r5
 800d394:	f7f3 f89c 	bl	80004d0 <__aeabi_dmul>
 800d398:	a355      	add	r3, pc, #340	; (adr r3, 800d4f0 <__ieee754_pow+0x9b8>)
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	f7f2 fee3 	bl	8000168 <__aeabi_dsub>
 800d3a2:	4622      	mov	r2, r4
 800d3a4:	462b      	mov	r3, r5
 800d3a6:	f7f3 f893 	bl	80004d0 <__aeabi_dmul>
 800d3aa:	a353      	add	r3, pc, #332	; (adr r3, 800d4f8 <__ieee754_pow+0x9c0>)
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	f7f2 fedc 	bl	800016c <__adddf3>
 800d3b4:	4622      	mov	r2, r4
 800d3b6:	462b      	mov	r3, r5
 800d3b8:	f7f3 f88a 	bl	80004d0 <__aeabi_dmul>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	4640      	mov	r0, r8
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	f7f2 fed0 	bl	8000168 <__aeabi_dsub>
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	4640      	mov	r0, r8
 800d3d2:	4649      	mov	r1, r9
 800d3d4:	f7f3 f87c 	bl	80004d0 <__aeabi_dmul>
 800d3d8:	2200      	movs	r2, #0
 800d3da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	f7f2 febf 	bl	8000168 <__aeabi_dsub>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3f2:	f7f3 f997 	bl	8000724 <__aeabi_ddiv>
 800d3f6:	4632      	mov	r2, r6
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	460d      	mov	r5, r1
 800d3fc:	463b      	mov	r3, r7
 800d3fe:	4640      	mov	r0, r8
 800d400:	4649      	mov	r1, r9
 800d402:	f7f3 f865 	bl	80004d0 <__aeabi_dmul>
 800d406:	4632      	mov	r2, r6
 800d408:	463b      	mov	r3, r7
 800d40a:	f7f2 feaf 	bl	800016c <__adddf3>
 800d40e:	4602      	mov	r2, r0
 800d410:	460b      	mov	r3, r1
 800d412:	4620      	mov	r0, r4
 800d414:	4629      	mov	r1, r5
 800d416:	f7f2 fea7 	bl	8000168 <__aeabi_dsub>
 800d41a:	4642      	mov	r2, r8
 800d41c:	464b      	mov	r3, r9
 800d41e:	f7f2 fea3 	bl	8000168 <__aeabi_dsub>
 800d422:	4602      	mov	r2, r0
 800d424:	460b      	mov	r3, r1
 800d426:	2000      	movs	r0, #0
 800d428:	4939      	ldr	r1, [pc, #228]	; (800d510 <__ieee754_pow+0x9d8>)
 800d42a:	f7f2 fe9d 	bl	8000168 <__aeabi_dsub>
 800d42e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d432:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d436:	da2c      	bge.n	800d492 <__ieee754_pow+0x95a>
 800d438:	4652      	mov	r2, sl
 800d43a:	f002 f9c5 	bl	800f7c8 <scalbn>
 800d43e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d442:	e40a      	b.n	800cc5a <__ieee754_pow+0x122>
 800d444:	4b33      	ldr	r3, [pc, #204]	; (800d514 <__ieee754_pow+0x9dc>)
 800d446:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d44a:	429f      	cmp	r7, r3
 800d44c:	f77f af14 	ble.w	800d278 <__ieee754_pow+0x740>
 800d450:	4b31      	ldr	r3, [pc, #196]	; (800d518 <__ieee754_pow+0x9e0>)
 800d452:	440b      	add	r3, r1
 800d454:	4303      	orrs	r3, r0
 800d456:	d00b      	beq.n	800d470 <__ieee754_pow+0x938>
 800d458:	a329      	add	r3, pc, #164	; (adr r3, 800d500 <__ieee754_pow+0x9c8>)
 800d45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d462:	f7f3 f835 	bl	80004d0 <__aeabi_dmul>
 800d466:	a326      	add	r3, pc, #152	; (adr r3, 800d500 <__ieee754_pow+0x9c8>)
 800d468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46c:	f7ff bbf5 	b.w	800cc5a <__ieee754_pow+0x122>
 800d470:	4622      	mov	r2, r4
 800d472:	462b      	mov	r3, r5
 800d474:	f7f2 fe78 	bl	8000168 <__aeabi_dsub>
 800d478:	4602      	mov	r2, r0
 800d47a:	460b      	mov	r3, r1
 800d47c:	4640      	mov	r0, r8
 800d47e:	4649      	mov	r1, r9
 800d480:	f7f3 faa2 	bl	80009c8 <__aeabi_dcmple>
 800d484:	2800      	cmp	r0, #0
 800d486:	f43f aef7 	beq.w	800d278 <__ieee754_pow+0x740>
 800d48a:	e7e5      	b.n	800d458 <__ieee754_pow+0x920>
 800d48c:	f04f 0a00 	mov.w	sl, #0
 800d490:	e71d      	b.n	800d2ce <__ieee754_pow+0x796>
 800d492:	4621      	mov	r1, r4
 800d494:	e7d3      	b.n	800d43e <__ieee754_pow+0x906>
 800d496:	2000      	movs	r0, #0
 800d498:	491d      	ldr	r1, [pc, #116]	; (800d510 <__ieee754_pow+0x9d8>)
 800d49a:	f7ff bbac 	b.w	800cbf6 <__ieee754_pow+0xbe>
 800d49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4a2:	f7ff bba8 	b.w	800cbf6 <__ieee754_pow+0xbe>
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	4641      	mov	r1, r8
 800d4aa:	f7ff bba4 	b.w	800cbf6 <__ieee754_pow+0xbe>
 800d4ae:	9200      	str	r2, [sp, #0]
 800d4b0:	f7ff bbb4 	b.w	800cc1c <__ieee754_pow+0xe4>
 800d4b4:	f3af 8000 	nop.w
 800d4b8:	652b82fe 	.word	0x652b82fe
 800d4bc:	3c971547 	.word	0x3c971547
 800d4c0:	00000000 	.word	0x00000000
 800d4c4:	3fe62e43 	.word	0x3fe62e43
 800d4c8:	fefa39ef 	.word	0xfefa39ef
 800d4cc:	3fe62e42 	.word	0x3fe62e42
 800d4d0:	0ca86c39 	.word	0x0ca86c39
 800d4d4:	be205c61 	.word	0xbe205c61
 800d4d8:	72bea4d0 	.word	0x72bea4d0
 800d4dc:	3e663769 	.word	0x3e663769
 800d4e0:	c5d26bf1 	.word	0xc5d26bf1
 800d4e4:	3ebbbd41 	.word	0x3ebbbd41
 800d4e8:	af25de2c 	.word	0xaf25de2c
 800d4ec:	3f11566a 	.word	0x3f11566a
 800d4f0:	16bebd93 	.word	0x16bebd93
 800d4f4:	3f66c16c 	.word	0x3f66c16c
 800d4f8:	5555553e 	.word	0x5555553e
 800d4fc:	3fc55555 	.word	0x3fc55555
 800d500:	c2f8f359 	.word	0xc2f8f359
 800d504:	01a56e1f 	.word	0x01a56e1f
 800d508:	3fe00000 	.word	0x3fe00000
 800d50c:	000fffff 	.word	0x000fffff
 800d510:	3ff00000 	.word	0x3ff00000
 800d514:	4090cbff 	.word	0x4090cbff
 800d518:	3f6f3400 	.word	0x3f6f3400
 800d51c:	00000000 	.word	0x00000000

0800d520 <__ieee754_rem_pio2>:
 800d520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d524:	4614      	mov	r4, r2
 800d526:	4ac4      	ldr	r2, [pc, #784]	; (800d838 <__ieee754_rem_pio2+0x318>)
 800d528:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800d52c:	4592      	cmp	sl, r2
 800d52e:	b08d      	sub	sp, #52	; 0x34
 800d530:	468b      	mov	fp, r1
 800d532:	dc07      	bgt.n	800d544 <__ieee754_rem_pio2+0x24>
 800d534:	2200      	movs	r2, #0
 800d536:	2300      	movs	r3, #0
 800d538:	e9c4 0100 	strd	r0, r1, [r4]
 800d53c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d540:	2500      	movs	r5, #0
 800d542:	e023      	b.n	800d58c <__ieee754_rem_pio2+0x6c>
 800d544:	4abd      	ldr	r2, [pc, #756]	; (800d83c <__ieee754_rem_pio2+0x31c>)
 800d546:	4592      	cmp	sl, r2
 800d548:	dc71      	bgt.n	800d62e <__ieee754_rem_pio2+0x10e>
 800d54a:	a3ad      	add	r3, pc, #692	; (adr r3, 800d800 <__ieee754_rem_pio2+0x2e0>)
 800d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d550:	2900      	cmp	r1, #0
 800d552:	4dbb      	ldr	r5, [pc, #748]	; (800d840 <__ieee754_rem_pio2+0x320>)
 800d554:	dd36      	ble.n	800d5c4 <__ieee754_rem_pio2+0xa4>
 800d556:	f7f2 fe07 	bl	8000168 <__aeabi_dsub>
 800d55a:	45aa      	cmp	sl, r5
 800d55c:	4606      	mov	r6, r0
 800d55e:	460f      	mov	r7, r1
 800d560:	d018      	beq.n	800d594 <__ieee754_rem_pio2+0x74>
 800d562:	a3a9      	add	r3, pc, #676	; (adr r3, 800d808 <__ieee754_rem_pio2+0x2e8>)
 800d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d568:	f7f2 fdfe 	bl	8000168 <__aeabi_dsub>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4630      	mov	r0, r6
 800d572:	e9c4 2300 	strd	r2, r3, [r4]
 800d576:	4639      	mov	r1, r7
 800d578:	f7f2 fdf6 	bl	8000168 <__aeabi_dsub>
 800d57c:	a3a2      	add	r3, pc, #648	; (adr r3, 800d808 <__ieee754_rem_pio2+0x2e8>)
 800d57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d582:	f7f2 fdf1 	bl	8000168 <__aeabi_dsub>
 800d586:	2501      	movs	r5, #1
 800d588:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d58c:	4628      	mov	r0, r5
 800d58e:	b00d      	add	sp, #52	; 0x34
 800d590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d594:	a39e      	add	r3, pc, #632	; (adr r3, 800d810 <__ieee754_rem_pio2+0x2f0>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f2 fde5 	bl	8000168 <__aeabi_dsub>
 800d59e:	a39e      	add	r3, pc, #632	; (adr r3, 800d818 <__ieee754_rem_pio2+0x2f8>)
 800d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a4:	4606      	mov	r6, r0
 800d5a6:	460f      	mov	r7, r1
 800d5a8:	f7f2 fdde 	bl	8000168 <__aeabi_dsub>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	e9c4 2300 	strd	r2, r3, [r4]
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	f7f2 fdd6 	bl	8000168 <__aeabi_dsub>
 800d5bc:	a396      	add	r3, pc, #600	; (adr r3, 800d818 <__ieee754_rem_pio2+0x2f8>)
 800d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c2:	e7de      	b.n	800d582 <__ieee754_rem_pio2+0x62>
 800d5c4:	f7f2 fdd2 	bl	800016c <__adddf3>
 800d5c8:	45aa      	cmp	sl, r5
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	460f      	mov	r7, r1
 800d5ce:	d016      	beq.n	800d5fe <__ieee754_rem_pio2+0xde>
 800d5d0:	a38d      	add	r3, pc, #564	; (adr r3, 800d808 <__ieee754_rem_pio2+0x2e8>)
 800d5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d6:	f7f2 fdc9 	bl	800016c <__adddf3>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	460b      	mov	r3, r1
 800d5de:	4630      	mov	r0, r6
 800d5e0:	e9c4 2300 	strd	r2, r3, [r4]
 800d5e4:	4639      	mov	r1, r7
 800d5e6:	f7f2 fdbf 	bl	8000168 <__aeabi_dsub>
 800d5ea:	a387      	add	r3, pc, #540	; (adr r3, 800d808 <__ieee754_rem_pio2+0x2e8>)
 800d5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f0:	f7f2 fdbc 	bl	800016c <__adddf3>
 800d5f4:	f04f 35ff 	mov.w	r5, #4294967295
 800d5f8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d5fc:	e7c6      	b.n	800d58c <__ieee754_rem_pio2+0x6c>
 800d5fe:	a384      	add	r3, pc, #528	; (adr r3, 800d810 <__ieee754_rem_pio2+0x2f0>)
 800d600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d604:	f7f2 fdb2 	bl	800016c <__adddf3>
 800d608:	a383      	add	r3, pc, #524	; (adr r3, 800d818 <__ieee754_rem_pio2+0x2f8>)
 800d60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60e:	4606      	mov	r6, r0
 800d610:	460f      	mov	r7, r1
 800d612:	f7f2 fdab 	bl	800016c <__adddf3>
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	4630      	mov	r0, r6
 800d61c:	e9c4 2300 	strd	r2, r3, [r4]
 800d620:	4639      	mov	r1, r7
 800d622:	f7f2 fda1 	bl	8000168 <__aeabi_dsub>
 800d626:	a37c      	add	r3, pc, #496	; (adr r3, 800d818 <__ieee754_rem_pio2+0x2f8>)
 800d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62c:	e7e0      	b.n	800d5f0 <__ieee754_rem_pio2+0xd0>
 800d62e:	4a85      	ldr	r2, [pc, #532]	; (800d844 <__ieee754_rem_pio2+0x324>)
 800d630:	4592      	cmp	sl, r2
 800d632:	f300 80d6 	bgt.w	800d7e2 <__ieee754_rem_pio2+0x2c2>
 800d636:	f001 ffa9 	bl	800f58c <fabs>
 800d63a:	a379      	add	r3, pc, #484	; (adr r3, 800d820 <__ieee754_rem_pio2+0x300>)
 800d63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d640:	4606      	mov	r6, r0
 800d642:	460f      	mov	r7, r1
 800d644:	f7f2 ff44 	bl	80004d0 <__aeabi_dmul>
 800d648:	2200      	movs	r2, #0
 800d64a:	4b7f      	ldr	r3, [pc, #508]	; (800d848 <__ieee754_rem_pio2+0x328>)
 800d64c:	f7f2 fd8e 	bl	800016c <__adddf3>
 800d650:	f7f3 f9ee 	bl	8000a30 <__aeabi_d2iz>
 800d654:	4605      	mov	r5, r0
 800d656:	f7f2 fed5 	bl	8000404 <__aeabi_i2d>
 800d65a:	a369      	add	r3, pc, #420	; (adr r3, 800d800 <__ieee754_rem_pio2+0x2e0>)
 800d65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d664:	f7f2 ff34 	bl	80004d0 <__aeabi_dmul>
 800d668:	4602      	mov	r2, r0
 800d66a:	460b      	mov	r3, r1
 800d66c:	4630      	mov	r0, r6
 800d66e:	4639      	mov	r1, r7
 800d670:	f7f2 fd7a 	bl	8000168 <__aeabi_dsub>
 800d674:	a364      	add	r3, pc, #400	; (adr r3, 800d808 <__ieee754_rem_pio2+0x2e8>)
 800d676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67a:	4606      	mov	r6, r0
 800d67c:	460f      	mov	r7, r1
 800d67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d682:	f7f2 ff25 	bl	80004d0 <__aeabi_dmul>
 800d686:	2d1f      	cmp	r5, #31
 800d688:	4680      	mov	r8, r0
 800d68a:	4689      	mov	r9, r1
 800d68c:	dc2e      	bgt.n	800d6ec <__ieee754_rem_pio2+0x1cc>
 800d68e:	4b6f      	ldr	r3, [pc, #444]	; (800d84c <__ieee754_rem_pio2+0x32c>)
 800d690:	1e6a      	subs	r2, r5, #1
 800d692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d696:	459a      	cmp	sl, r3
 800d698:	d028      	beq.n	800d6ec <__ieee754_rem_pio2+0x1cc>
 800d69a:	4642      	mov	r2, r8
 800d69c:	464b      	mov	r3, r9
 800d69e:	4630      	mov	r0, r6
 800d6a0:	4639      	mov	r1, r7
 800d6a2:	f7f2 fd61 	bl	8000168 <__aeabi_dsub>
 800d6a6:	e9c4 0100 	strd	r0, r1, [r4]
 800d6aa:	6823      	ldr	r3, [r4, #0]
 800d6ac:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800d6b0:	9302      	str	r3, [sp, #8]
 800d6b2:	9a02      	ldr	r2, [sp, #8]
 800d6b4:	4653      	mov	r3, sl
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	4639      	mov	r1, r7
 800d6ba:	f7f2 fd55 	bl	8000168 <__aeabi_dsub>
 800d6be:	4642      	mov	r2, r8
 800d6c0:	464b      	mov	r3, r9
 800d6c2:	f7f2 fd51 	bl	8000168 <__aeabi_dsub>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	f1bb 0f00 	cmp.w	fp, #0
 800d6ce:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d6d2:	f6bf af5b 	bge.w	800d58c <__ieee754_rem_pio2+0x6c>
 800d6d6:	9b02      	ldr	r3, [sp, #8]
 800d6d8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d6dc:	6023      	str	r3, [r4, #0]
 800d6de:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800d6e2:	6063      	str	r3, [r4, #4]
 800d6e4:	60a0      	str	r0, [r4, #8]
 800d6e6:	60e1      	str	r1, [r4, #12]
 800d6e8:	426d      	negs	r5, r5
 800d6ea:	e74f      	b.n	800d58c <__ieee754_rem_pio2+0x6c>
 800d6ec:	4642      	mov	r2, r8
 800d6ee:	464b      	mov	r3, r9
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	4639      	mov	r1, r7
 800d6f4:	f7f2 fd38 	bl	8000168 <__aeabi_dsub>
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d700:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d704:	ebaa 0101 	sub.w	r1, sl, r1
 800d708:	2910      	cmp	r1, #16
 800d70a:	e9c4 2300 	strd	r2, r3, [r4]
 800d70e:	ddcc      	ble.n	800d6aa <__ieee754_rem_pio2+0x18a>
 800d710:	a33f      	add	r3, pc, #252	; (adr r3, 800d810 <__ieee754_rem_pio2+0x2f0>)
 800d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d71a:	f7f2 fed9 	bl	80004d0 <__aeabi_dmul>
 800d71e:	4680      	mov	r8, r0
 800d720:	4689      	mov	r9, r1
 800d722:	4602      	mov	r2, r0
 800d724:	460b      	mov	r3, r1
 800d726:	4630      	mov	r0, r6
 800d728:	4639      	mov	r1, r7
 800d72a:	f7f2 fd1d 	bl	8000168 <__aeabi_dsub>
 800d72e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d732:	4602      	mov	r2, r0
 800d734:	460b      	mov	r3, r1
 800d736:	4630      	mov	r0, r6
 800d738:	4639      	mov	r1, r7
 800d73a:	f7f2 fd15 	bl	8000168 <__aeabi_dsub>
 800d73e:	4642      	mov	r2, r8
 800d740:	464b      	mov	r3, r9
 800d742:	f7f2 fd11 	bl	8000168 <__aeabi_dsub>
 800d746:	a334      	add	r3, pc, #208	; (adr r3, 800d818 <__ieee754_rem_pio2+0x2f8>)
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	4606      	mov	r6, r0
 800d74e:	460f      	mov	r7, r1
 800d750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d754:	f7f2 febc 	bl	80004d0 <__aeabi_dmul>
 800d758:	4632      	mov	r2, r6
 800d75a:	463b      	mov	r3, r7
 800d75c:	f7f2 fd04 	bl	8000168 <__aeabi_dsub>
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	4680      	mov	r8, r0
 800d766:	4689      	mov	r9, r1
 800d768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d76c:	f7f2 fcfc 	bl	8000168 <__aeabi_dsub>
 800d770:	460b      	mov	r3, r1
 800d772:	4602      	mov	r2, r0
 800d774:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d778:	ebaa 0a01 	sub.w	sl, sl, r1
 800d77c:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800d780:	e9c4 2300 	strd	r2, r3, [r4]
 800d784:	dd2a      	ble.n	800d7dc <__ieee754_rem_pio2+0x2bc>
 800d786:	a328      	add	r3, pc, #160	; (adr r3, 800d828 <__ieee754_rem_pio2+0x308>)
 800d788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d790:	f7f2 fe9e 	bl	80004d0 <__aeabi_dmul>
 800d794:	4680      	mov	r8, r0
 800d796:	4689      	mov	r9, r1
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7a0:	f7f2 fce2 	bl	8000168 <__aeabi_dsub>
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	460f      	mov	r7, r1
 800d7ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7b0:	f7f2 fcda 	bl	8000168 <__aeabi_dsub>
 800d7b4:	4642      	mov	r2, r8
 800d7b6:	464b      	mov	r3, r9
 800d7b8:	f7f2 fcd6 	bl	8000168 <__aeabi_dsub>
 800d7bc:	a31c      	add	r3, pc, #112	; (adr r3, 800d830 <__ieee754_rem_pio2+0x310>)
 800d7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c2:	4680      	mov	r8, r0
 800d7c4:	4689      	mov	r9, r1
 800d7c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ca:	f7f2 fe81 	bl	80004d0 <__aeabi_dmul>
 800d7ce:	4642      	mov	r2, r8
 800d7d0:	464b      	mov	r3, r9
 800d7d2:	f7f2 fcc9 	bl	8000168 <__aeabi_dsub>
 800d7d6:	4680      	mov	r8, r0
 800d7d8:	4689      	mov	r9, r1
 800d7da:	e75e      	b.n	800d69a <__ieee754_rem_pio2+0x17a>
 800d7dc:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800d7e0:	e763      	b.n	800d6aa <__ieee754_rem_pio2+0x18a>
 800d7e2:	4a1b      	ldr	r2, [pc, #108]	; (800d850 <__ieee754_rem_pio2+0x330>)
 800d7e4:	4592      	cmp	sl, r2
 800d7e6:	dd35      	ble.n	800d854 <__ieee754_rem_pio2+0x334>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	f7f2 fcbc 	bl	8000168 <__aeabi_dsub>
 800d7f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d7f4:	e9c4 0100 	strd	r0, r1, [r4]
 800d7f8:	e6a2      	b.n	800d540 <__ieee754_rem_pio2+0x20>
 800d7fa:	bf00      	nop
 800d7fc:	f3af 8000 	nop.w
 800d800:	54400000 	.word	0x54400000
 800d804:	3ff921fb 	.word	0x3ff921fb
 800d808:	1a626331 	.word	0x1a626331
 800d80c:	3dd0b461 	.word	0x3dd0b461
 800d810:	1a600000 	.word	0x1a600000
 800d814:	3dd0b461 	.word	0x3dd0b461
 800d818:	2e037073 	.word	0x2e037073
 800d81c:	3ba3198a 	.word	0x3ba3198a
 800d820:	6dc9c883 	.word	0x6dc9c883
 800d824:	3fe45f30 	.word	0x3fe45f30
 800d828:	2e000000 	.word	0x2e000000
 800d82c:	3ba3198a 	.word	0x3ba3198a
 800d830:	252049c1 	.word	0x252049c1
 800d834:	397b839a 	.word	0x397b839a
 800d838:	3fe921fb 	.word	0x3fe921fb
 800d83c:	4002d97b 	.word	0x4002d97b
 800d840:	3ff921fb 	.word	0x3ff921fb
 800d844:	413921fb 	.word	0x413921fb
 800d848:	3fe00000 	.word	0x3fe00000
 800d84c:	08010828 	.word	0x08010828
 800d850:	7fefffff 	.word	0x7fefffff
 800d854:	ea4f 552a 	mov.w	r5, sl, asr #20
 800d858:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d85c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800d860:	460f      	mov	r7, r1
 800d862:	4606      	mov	r6, r0
 800d864:	f7f3 f8e4 	bl	8000a30 <__aeabi_d2iz>
 800d868:	f7f2 fdcc 	bl	8000404 <__aeabi_i2d>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	4630      	mov	r0, r6
 800d872:	4639      	mov	r1, r7
 800d874:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d878:	f7f2 fc76 	bl	8000168 <__aeabi_dsub>
 800d87c:	2200      	movs	r2, #0
 800d87e:	4b20      	ldr	r3, [pc, #128]	; (800d900 <__ieee754_rem_pio2+0x3e0>)
 800d880:	f7f2 fe26 	bl	80004d0 <__aeabi_dmul>
 800d884:	460f      	mov	r7, r1
 800d886:	4606      	mov	r6, r0
 800d888:	f7f3 f8d2 	bl	8000a30 <__aeabi_d2iz>
 800d88c:	f7f2 fdba 	bl	8000404 <__aeabi_i2d>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	4630      	mov	r0, r6
 800d896:	4639      	mov	r1, r7
 800d898:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d89c:	f7f2 fc64 	bl	8000168 <__aeabi_dsub>
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	4b17      	ldr	r3, [pc, #92]	; (800d900 <__ieee754_rem_pio2+0x3e0>)
 800d8a4:	f7f2 fe14 	bl	80004d0 <__aeabi_dmul>
 800d8a8:	f04f 0803 	mov.w	r8, #3
 800d8ac:	2600      	movs	r6, #0
 800d8ae:	2700      	movs	r7, #0
 800d8b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d8b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d8b8:	4632      	mov	r2, r6
 800d8ba:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d8be:	463b      	mov	r3, r7
 800d8c0:	f108 3aff 	add.w	sl, r8, #4294967295
 800d8c4:	f7f3 f86c 	bl	80009a0 <__aeabi_dcmpeq>
 800d8c8:	b9b8      	cbnz	r0, 800d8fa <__ieee754_rem_pio2+0x3da>
 800d8ca:	4b0e      	ldr	r3, [pc, #56]	; (800d904 <__ieee754_rem_pio2+0x3e4>)
 800d8cc:	462a      	mov	r2, r5
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	2302      	movs	r3, #2
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	a806      	add	r0, sp, #24
 800d8d8:	4643      	mov	r3, r8
 800d8da:	f000 fd1f 	bl	800e31c <__kernel_rem_pio2>
 800d8de:	f1bb 0f00 	cmp.w	fp, #0
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	f6bf ae52 	bge.w	800d58c <__ieee754_rem_pio2+0x6c>
 800d8e8:	6863      	ldr	r3, [r4, #4]
 800d8ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d8ee:	6063      	str	r3, [r4, #4]
 800d8f0:	68e3      	ldr	r3, [r4, #12]
 800d8f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d8f6:	60e3      	str	r3, [r4, #12]
 800d8f8:	e6f6      	b.n	800d6e8 <__ieee754_rem_pio2+0x1c8>
 800d8fa:	46d0      	mov	r8, sl
 800d8fc:	e7dc      	b.n	800d8b8 <__ieee754_rem_pio2+0x398>
 800d8fe:	bf00      	nop
 800d900:	41700000 	.word	0x41700000
 800d904:	080108a8 	.word	0x080108a8

0800d908 <__ieee754_sqrt>:
 800d908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d90c:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800da5c <__ieee754_sqrt+0x154>
 800d910:	4606      	mov	r6, r0
 800d912:	ea3e 0e01 	bics.w	lr, lr, r1
 800d916:	460d      	mov	r5, r1
 800d918:	4607      	mov	r7, r0
 800d91a:	460a      	mov	r2, r1
 800d91c:	460c      	mov	r4, r1
 800d91e:	4603      	mov	r3, r0
 800d920:	d10f      	bne.n	800d942 <__ieee754_sqrt+0x3a>
 800d922:	4602      	mov	r2, r0
 800d924:	460b      	mov	r3, r1
 800d926:	f7f2 fdd3 	bl	80004d0 <__aeabi_dmul>
 800d92a:	4602      	mov	r2, r0
 800d92c:	460b      	mov	r3, r1
 800d92e:	4630      	mov	r0, r6
 800d930:	4629      	mov	r1, r5
 800d932:	f7f2 fc1b 	bl	800016c <__adddf3>
 800d936:	4606      	mov	r6, r0
 800d938:	460d      	mov	r5, r1
 800d93a:	4630      	mov	r0, r6
 800d93c:	4629      	mov	r1, r5
 800d93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d942:	2900      	cmp	r1, #0
 800d944:	dc0e      	bgt.n	800d964 <__ieee754_sqrt+0x5c>
 800d946:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800d94a:	ea5e 0707 	orrs.w	r7, lr, r7
 800d94e:	d0f4      	beq.n	800d93a <__ieee754_sqrt+0x32>
 800d950:	b141      	cbz	r1, 800d964 <__ieee754_sqrt+0x5c>
 800d952:	4602      	mov	r2, r0
 800d954:	460b      	mov	r3, r1
 800d956:	f7f2 fc07 	bl	8000168 <__aeabi_dsub>
 800d95a:	4602      	mov	r2, r0
 800d95c:	460b      	mov	r3, r1
 800d95e:	f7f2 fee1 	bl	8000724 <__aeabi_ddiv>
 800d962:	e7e8      	b.n	800d936 <__ieee754_sqrt+0x2e>
 800d964:	1512      	asrs	r2, r2, #20
 800d966:	d10c      	bne.n	800d982 <__ieee754_sqrt+0x7a>
 800d968:	2c00      	cmp	r4, #0
 800d96a:	d06e      	beq.n	800da4a <__ieee754_sqrt+0x142>
 800d96c:	2100      	movs	r1, #0
 800d96e:	02e6      	lsls	r6, r4, #11
 800d970:	d56f      	bpl.n	800da52 <__ieee754_sqrt+0x14a>
 800d972:	1e48      	subs	r0, r1, #1
 800d974:	1a12      	subs	r2, r2, r0
 800d976:	f1c1 0020 	rsb	r0, r1, #32
 800d97a:	fa23 f000 	lsr.w	r0, r3, r0
 800d97e:	4304      	orrs	r4, r0
 800d980:	408b      	lsls	r3, r1
 800d982:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d986:	07d5      	lsls	r5, r2, #31
 800d988:	f04f 0500 	mov.w	r5, #0
 800d98c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d990:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800d994:	bf42      	ittt	mi
 800d996:	0064      	lslmi	r4, r4, #1
 800d998:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 800d99c:	005b      	lslmi	r3, r3, #1
 800d99e:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 800d9a2:	1050      	asrs	r0, r2, #1
 800d9a4:	4421      	add	r1, r4
 800d9a6:	2216      	movs	r2, #22
 800d9a8:	462c      	mov	r4, r5
 800d9aa:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d9ae:	005b      	lsls	r3, r3, #1
 800d9b0:	19a7      	adds	r7, r4, r6
 800d9b2:	428f      	cmp	r7, r1
 800d9b4:	bfde      	ittt	le
 800d9b6:	1bc9      	suble	r1, r1, r7
 800d9b8:	19bc      	addle	r4, r7, r6
 800d9ba:	19ad      	addle	r5, r5, r6
 800d9bc:	0049      	lsls	r1, r1, #1
 800d9be:	3a01      	subs	r2, #1
 800d9c0:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d9c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d9c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d9cc:	d1f0      	bne.n	800d9b0 <__ieee754_sqrt+0xa8>
 800d9ce:	f04f 0e20 	mov.w	lr, #32
 800d9d2:	4694      	mov	ip, r2
 800d9d4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d9d8:	42a1      	cmp	r1, r4
 800d9da:	eb06 070c 	add.w	r7, r6, ip
 800d9de:	dc02      	bgt.n	800d9e6 <__ieee754_sqrt+0xde>
 800d9e0:	d112      	bne.n	800da08 <__ieee754_sqrt+0x100>
 800d9e2:	429f      	cmp	r7, r3
 800d9e4:	d810      	bhi.n	800da08 <__ieee754_sqrt+0x100>
 800d9e6:	2f00      	cmp	r7, #0
 800d9e8:	eb07 0c06 	add.w	ip, r7, r6
 800d9ec:	da34      	bge.n	800da58 <__ieee754_sqrt+0x150>
 800d9ee:	f1bc 0f00 	cmp.w	ip, #0
 800d9f2:	db31      	blt.n	800da58 <__ieee754_sqrt+0x150>
 800d9f4:	f104 0801 	add.w	r8, r4, #1
 800d9f8:	1b09      	subs	r1, r1, r4
 800d9fa:	4644      	mov	r4, r8
 800d9fc:	429f      	cmp	r7, r3
 800d9fe:	bf88      	it	hi
 800da00:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800da04:	1bdb      	subs	r3, r3, r7
 800da06:	4432      	add	r2, r6
 800da08:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 800da0c:	f1be 0e01 	subs.w	lr, lr, #1
 800da10:	4439      	add	r1, r7
 800da12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800da16:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800da1a:	d1dd      	bne.n	800d9d8 <__ieee754_sqrt+0xd0>
 800da1c:	430b      	orrs	r3, r1
 800da1e:	d006      	beq.n	800da2e <__ieee754_sqrt+0x126>
 800da20:	1c54      	adds	r4, r2, #1
 800da22:	bf0b      	itete	eq
 800da24:	4672      	moveq	r2, lr
 800da26:	3201      	addne	r2, #1
 800da28:	3501      	addeq	r5, #1
 800da2a:	f022 0201 	bicne.w	r2, r2, #1
 800da2e:	106b      	asrs	r3, r5, #1
 800da30:	0852      	lsrs	r2, r2, #1
 800da32:	07e9      	lsls	r1, r5, #31
 800da34:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800da38:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800da3c:	bf48      	it	mi
 800da3e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800da42:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800da46:	4616      	mov	r6, r2
 800da48:	e777      	b.n	800d93a <__ieee754_sqrt+0x32>
 800da4a:	0adc      	lsrs	r4, r3, #11
 800da4c:	3a15      	subs	r2, #21
 800da4e:	055b      	lsls	r3, r3, #21
 800da50:	e78a      	b.n	800d968 <__ieee754_sqrt+0x60>
 800da52:	0064      	lsls	r4, r4, #1
 800da54:	3101      	adds	r1, #1
 800da56:	e78a      	b.n	800d96e <__ieee754_sqrt+0x66>
 800da58:	46a0      	mov	r8, r4
 800da5a:	e7cd      	b.n	800d9f8 <__ieee754_sqrt+0xf0>
 800da5c:	7ff00000 	.word	0x7ff00000

0800da60 <__ieee754_asinf>:
 800da60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da64:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800da68:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800da6c:	4604      	mov	r4, r0
 800da6e:	4607      	mov	r7, r0
 800da70:	d10c      	bne.n	800da8c <__ieee754_asinf+0x2c>
 800da72:	498d      	ldr	r1, [pc, #564]	; (800dca8 <__ieee754_asinf+0x248>)
 800da74:	f7f3 f962 	bl	8000d3c <__aeabi_fmul>
 800da78:	498c      	ldr	r1, [pc, #560]	; (800dcac <__ieee754_asinf+0x24c>)
 800da7a:	4605      	mov	r5, r0
 800da7c:	4620      	mov	r0, r4
 800da7e:	f7f3 f95d 	bl	8000d3c <__aeabi_fmul>
 800da82:	4601      	mov	r1, r0
 800da84:	4628      	mov	r0, r5
 800da86:	f7f3 f851 	bl	8000b2c <__addsf3>
 800da8a:	e006      	b.n	800da9a <__ieee754_asinf+0x3a>
 800da8c:	dd09      	ble.n	800daa2 <__ieee754_asinf+0x42>
 800da8e:	4601      	mov	r1, r0
 800da90:	f7f3 f84a 	bl	8000b28 <__aeabi_fsub>
 800da94:	4601      	mov	r1, r0
 800da96:	f7f3 fa05 	bl	8000ea4 <__aeabi_fdiv>
 800da9a:	4604      	mov	r4, r0
 800da9c:	4620      	mov	r0, r4
 800da9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800daa6:	da0b      	bge.n	800dac0 <__ieee754_asinf+0x60>
 800daa8:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800daac:	da73      	bge.n	800db96 <__ieee754_asinf+0x136>
 800daae:	4980      	ldr	r1, [pc, #512]	; (800dcb0 <__ieee754_asinf+0x250>)
 800dab0:	f7f3 f83c 	bl	8000b2c <__addsf3>
 800dab4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dab8:	f7f3 fafc 	bl	80010b4 <__aeabi_fcmpgt>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d1ed      	bne.n	800da9c <__ieee754_asinf+0x3c>
 800dac0:	4620      	mov	r0, r4
 800dac2:	f001 ffff 	bl	800fac4 <fabsf>
 800dac6:	4601      	mov	r1, r0
 800dac8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dacc:	f7f3 f82c 	bl	8000b28 <__aeabi_fsub>
 800dad0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dad4:	f7f3 f932 	bl	8000d3c <__aeabi_fmul>
 800dad8:	4604      	mov	r4, r0
 800dada:	4976      	ldr	r1, [pc, #472]	; (800dcb4 <__ieee754_asinf+0x254>)
 800dadc:	f7f3 f92e 	bl	8000d3c <__aeabi_fmul>
 800dae0:	4975      	ldr	r1, [pc, #468]	; (800dcb8 <__ieee754_asinf+0x258>)
 800dae2:	f7f3 f823 	bl	8000b2c <__addsf3>
 800dae6:	4621      	mov	r1, r4
 800dae8:	f7f3 f928 	bl	8000d3c <__aeabi_fmul>
 800daec:	4973      	ldr	r1, [pc, #460]	; (800dcbc <__ieee754_asinf+0x25c>)
 800daee:	f7f3 f81b 	bl	8000b28 <__aeabi_fsub>
 800daf2:	4621      	mov	r1, r4
 800daf4:	f7f3 f922 	bl	8000d3c <__aeabi_fmul>
 800daf8:	4971      	ldr	r1, [pc, #452]	; (800dcc0 <__ieee754_asinf+0x260>)
 800dafa:	f7f3 f817 	bl	8000b2c <__addsf3>
 800dafe:	4621      	mov	r1, r4
 800db00:	f7f3 f91c 	bl	8000d3c <__aeabi_fmul>
 800db04:	496f      	ldr	r1, [pc, #444]	; (800dcc4 <__ieee754_asinf+0x264>)
 800db06:	f7f3 f80f 	bl	8000b28 <__aeabi_fsub>
 800db0a:	4621      	mov	r1, r4
 800db0c:	f7f3 f916 	bl	8000d3c <__aeabi_fmul>
 800db10:	496d      	ldr	r1, [pc, #436]	; (800dcc8 <__ieee754_asinf+0x268>)
 800db12:	f7f3 f80b 	bl	8000b2c <__addsf3>
 800db16:	4621      	mov	r1, r4
 800db18:	f7f3 f910 	bl	8000d3c <__aeabi_fmul>
 800db1c:	496b      	ldr	r1, [pc, #428]	; (800dccc <__ieee754_asinf+0x26c>)
 800db1e:	4680      	mov	r8, r0
 800db20:	4620      	mov	r0, r4
 800db22:	f7f3 f90b 	bl	8000d3c <__aeabi_fmul>
 800db26:	496a      	ldr	r1, [pc, #424]	; (800dcd0 <__ieee754_asinf+0x270>)
 800db28:	f7f2 fffe 	bl	8000b28 <__aeabi_fsub>
 800db2c:	4621      	mov	r1, r4
 800db2e:	f7f3 f905 	bl	8000d3c <__aeabi_fmul>
 800db32:	4968      	ldr	r1, [pc, #416]	; (800dcd4 <__ieee754_asinf+0x274>)
 800db34:	f7f2 fffa 	bl	8000b2c <__addsf3>
 800db38:	4621      	mov	r1, r4
 800db3a:	f7f3 f8ff 	bl	8000d3c <__aeabi_fmul>
 800db3e:	4966      	ldr	r1, [pc, #408]	; (800dcd8 <__ieee754_asinf+0x278>)
 800db40:	f7f2 fff2 	bl	8000b28 <__aeabi_fsub>
 800db44:	4621      	mov	r1, r4
 800db46:	f7f3 f8f9 	bl	8000d3c <__aeabi_fmul>
 800db4a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800db4e:	f7f2 ffed 	bl	8000b2c <__addsf3>
 800db52:	4681      	mov	r9, r0
 800db54:	4620      	mov	r0, r4
 800db56:	f000 faaf 	bl	800e0b8 <__ieee754_sqrtf>
 800db5a:	4b60      	ldr	r3, [pc, #384]	; (800dcdc <__ieee754_asinf+0x27c>)
 800db5c:	4606      	mov	r6, r0
 800db5e:	429d      	cmp	r5, r3
 800db60:	dd63      	ble.n	800dc2a <__ieee754_asinf+0x1ca>
 800db62:	4649      	mov	r1, r9
 800db64:	4640      	mov	r0, r8
 800db66:	f7f3 f99d 	bl	8000ea4 <__aeabi_fdiv>
 800db6a:	4631      	mov	r1, r6
 800db6c:	f7f3 f8e6 	bl	8000d3c <__aeabi_fmul>
 800db70:	4631      	mov	r1, r6
 800db72:	f7f2 ffdb 	bl	8000b2c <__addsf3>
 800db76:	4601      	mov	r1, r0
 800db78:	f7f2 ffd8 	bl	8000b2c <__addsf3>
 800db7c:	4958      	ldr	r1, [pc, #352]	; (800dce0 <__ieee754_asinf+0x280>)
 800db7e:	f7f2 ffd5 	bl	8000b2c <__addsf3>
 800db82:	4601      	mov	r1, r0
 800db84:	4848      	ldr	r0, [pc, #288]	; (800dca8 <__ieee754_asinf+0x248>)
 800db86:	f7f2 ffcf 	bl	8000b28 <__aeabi_fsub>
 800db8a:	2f00      	cmp	r7, #0
 800db8c:	4604      	mov	r4, r0
 800db8e:	bfd8      	it	le
 800db90:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800db94:	e782      	b.n	800da9c <__ieee754_asinf+0x3c>
 800db96:	4601      	mov	r1, r0
 800db98:	f7f3 f8d0 	bl	8000d3c <__aeabi_fmul>
 800db9c:	4605      	mov	r5, r0
 800db9e:	4945      	ldr	r1, [pc, #276]	; (800dcb4 <__ieee754_asinf+0x254>)
 800dba0:	f7f3 f8cc 	bl	8000d3c <__aeabi_fmul>
 800dba4:	4944      	ldr	r1, [pc, #272]	; (800dcb8 <__ieee754_asinf+0x258>)
 800dba6:	f7f2 ffc1 	bl	8000b2c <__addsf3>
 800dbaa:	4629      	mov	r1, r5
 800dbac:	f7f3 f8c6 	bl	8000d3c <__aeabi_fmul>
 800dbb0:	4942      	ldr	r1, [pc, #264]	; (800dcbc <__ieee754_asinf+0x25c>)
 800dbb2:	f7f2 ffb9 	bl	8000b28 <__aeabi_fsub>
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	f7f3 f8c0 	bl	8000d3c <__aeabi_fmul>
 800dbbc:	4940      	ldr	r1, [pc, #256]	; (800dcc0 <__ieee754_asinf+0x260>)
 800dbbe:	f7f2 ffb5 	bl	8000b2c <__addsf3>
 800dbc2:	4629      	mov	r1, r5
 800dbc4:	f7f3 f8ba 	bl	8000d3c <__aeabi_fmul>
 800dbc8:	493e      	ldr	r1, [pc, #248]	; (800dcc4 <__ieee754_asinf+0x264>)
 800dbca:	f7f2 ffad 	bl	8000b28 <__aeabi_fsub>
 800dbce:	4629      	mov	r1, r5
 800dbd0:	f7f3 f8b4 	bl	8000d3c <__aeabi_fmul>
 800dbd4:	493c      	ldr	r1, [pc, #240]	; (800dcc8 <__ieee754_asinf+0x268>)
 800dbd6:	f7f2 ffa9 	bl	8000b2c <__addsf3>
 800dbda:	4629      	mov	r1, r5
 800dbdc:	f7f3 f8ae 	bl	8000d3c <__aeabi_fmul>
 800dbe0:	493a      	ldr	r1, [pc, #232]	; (800dccc <__ieee754_asinf+0x26c>)
 800dbe2:	4606      	mov	r6, r0
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f7f3 f8a9 	bl	8000d3c <__aeabi_fmul>
 800dbea:	4939      	ldr	r1, [pc, #228]	; (800dcd0 <__ieee754_asinf+0x270>)
 800dbec:	f7f2 ff9c 	bl	8000b28 <__aeabi_fsub>
 800dbf0:	4629      	mov	r1, r5
 800dbf2:	f7f3 f8a3 	bl	8000d3c <__aeabi_fmul>
 800dbf6:	4937      	ldr	r1, [pc, #220]	; (800dcd4 <__ieee754_asinf+0x274>)
 800dbf8:	f7f2 ff98 	bl	8000b2c <__addsf3>
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	f7f3 f89d 	bl	8000d3c <__aeabi_fmul>
 800dc02:	4935      	ldr	r1, [pc, #212]	; (800dcd8 <__ieee754_asinf+0x278>)
 800dc04:	f7f2 ff90 	bl	8000b28 <__aeabi_fsub>
 800dc08:	4629      	mov	r1, r5
 800dc0a:	f7f3 f897 	bl	8000d3c <__aeabi_fmul>
 800dc0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc12:	f7f2 ff8b 	bl	8000b2c <__addsf3>
 800dc16:	4601      	mov	r1, r0
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f7f3 f943 	bl	8000ea4 <__aeabi_fdiv>
 800dc1e:	4621      	mov	r1, r4
 800dc20:	f7f3 f88c 	bl	8000d3c <__aeabi_fmul>
 800dc24:	4601      	mov	r1, r0
 800dc26:	4620      	mov	r0, r4
 800dc28:	e72d      	b.n	800da86 <__ieee754_asinf+0x26>
 800dc2a:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800dc2e:	4649      	mov	r1, r9
 800dc30:	4640      	mov	r0, r8
 800dc32:	f7f3 f937 	bl	8000ea4 <__aeabi_fdiv>
 800dc36:	4631      	mov	r1, r6
 800dc38:	4680      	mov	r8, r0
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	f7f2 ff76 	bl	8000b2c <__addsf3>
 800dc40:	4601      	mov	r1, r0
 800dc42:	4640      	mov	r0, r8
 800dc44:	f7f3 f87a 	bl	8000d3c <__aeabi_fmul>
 800dc48:	f025 050f 	bic.w	r5, r5, #15
 800dc4c:	4680      	mov	r8, r0
 800dc4e:	4629      	mov	r1, r5
 800dc50:	4628      	mov	r0, r5
 800dc52:	f7f3 f873 	bl	8000d3c <__aeabi_fmul>
 800dc56:	4601      	mov	r1, r0
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f7f2 ff65 	bl	8000b28 <__aeabi_fsub>
 800dc5e:	4631      	mov	r1, r6
 800dc60:	4604      	mov	r4, r0
 800dc62:	4628      	mov	r0, r5
 800dc64:	f7f2 ff62 	bl	8000b2c <__addsf3>
 800dc68:	4601      	mov	r1, r0
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f7f3 f91a 	bl	8000ea4 <__aeabi_fdiv>
 800dc70:	4601      	mov	r1, r0
 800dc72:	f7f2 ff5b 	bl	8000b2c <__addsf3>
 800dc76:	4601      	mov	r1, r0
 800dc78:	480c      	ldr	r0, [pc, #48]	; (800dcac <__ieee754_asinf+0x24c>)
 800dc7a:	f7f2 ff55 	bl	8000b28 <__aeabi_fsub>
 800dc7e:	4601      	mov	r1, r0
 800dc80:	4640      	mov	r0, r8
 800dc82:	f7f2 ff51 	bl	8000b28 <__aeabi_fsub>
 800dc86:	4629      	mov	r1, r5
 800dc88:	4604      	mov	r4, r0
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	f7f2 ff4e 	bl	8000b2c <__addsf3>
 800dc90:	4601      	mov	r1, r0
 800dc92:	4814      	ldr	r0, [pc, #80]	; (800dce4 <__ieee754_asinf+0x284>)
 800dc94:	f7f2 ff48 	bl	8000b28 <__aeabi_fsub>
 800dc98:	4601      	mov	r1, r0
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f7f2 ff44 	bl	8000b28 <__aeabi_fsub>
 800dca0:	4601      	mov	r1, r0
 800dca2:	4810      	ldr	r0, [pc, #64]	; (800dce4 <__ieee754_asinf+0x284>)
 800dca4:	e76f      	b.n	800db86 <__ieee754_asinf+0x126>
 800dca6:	bf00      	nop
 800dca8:	3fc90fdb 	.word	0x3fc90fdb
 800dcac:	b33bbd2e 	.word	0xb33bbd2e
 800dcb0:	7149f2ca 	.word	0x7149f2ca
 800dcb4:	3811ef08 	.word	0x3811ef08
 800dcb8:	3a4f7f04 	.word	0x3a4f7f04
 800dcbc:	3d241146 	.word	0x3d241146
 800dcc0:	3e4e0aa8 	.word	0x3e4e0aa8
 800dcc4:	3ea6b090 	.word	0x3ea6b090
 800dcc8:	3e2aaaab 	.word	0x3e2aaaab
 800dccc:	3d9dc62e 	.word	0x3d9dc62e
 800dcd0:	3f303361 	.word	0x3f303361
 800dcd4:	4001572d 	.word	0x4001572d
 800dcd8:	4019d139 	.word	0x4019d139
 800dcdc:	3f799999 	.word	0x3f799999
 800dce0:	333bbd2e 	.word	0x333bbd2e
 800dce4:	3f490fdb 	.word	0x3f490fdb

0800dce8 <__ieee754_atan2f>:
 800dce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dcee:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	dc05      	bgt.n	800dd02 <__ieee754_atan2f+0x1a>
 800dcf6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800dcfa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dcfe:	4607      	mov	r7, r0
 800dd00:	dd04      	ble.n	800dd0c <__ieee754_atan2f+0x24>
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7f2 ff12 	bl	8000b2c <__addsf3>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	e010      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800dd0c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800dd10:	d103      	bne.n	800dd1a <__ieee754_atan2f+0x32>
 800dd12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dd16:	f001 bdc5 	b.w	800f8a4 <atanf>
 800dd1a:	178c      	asrs	r4, r1, #30
 800dd1c:	f004 0402 	and.w	r4, r4, #2
 800dd20:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800dd24:	b92a      	cbnz	r2, 800dd32 <__ieee754_atan2f+0x4a>
 800dd26:	2c02      	cmp	r4, #2
 800dd28:	d023      	beq.n	800dd72 <__ieee754_atan2f+0x8a>
 800dd2a:	2c03      	cmp	r4, #3
 800dd2c:	d023      	beq.n	800dd76 <__ieee754_atan2f+0x8e>
 800dd2e:	4618      	mov	r0, r3
 800dd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd32:	b91e      	cbnz	r6, 800dd3c <__ieee754_atan2f+0x54>
 800dd34:	2f00      	cmp	r7, #0
 800dd36:	da53      	bge.n	800dde0 <__ieee754_atan2f+0xf8>
 800dd38:	4b2a      	ldr	r3, [pc, #168]	; (800dde4 <__ieee754_atan2f+0xfc>)
 800dd3a:	e7f8      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800dd3c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800dd40:	d11b      	bne.n	800dd7a <__ieee754_atan2f+0x92>
 800dd42:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dd46:	d10b      	bne.n	800dd60 <__ieee754_atan2f+0x78>
 800dd48:	2c02      	cmp	r4, #2
 800dd4a:	d005      	beq.n	800dd58 <__ieee754_atan2f+0x70>
 800dd4c:	2c03      	cmp	r4, #3
 800dd4e:	d005      	beq.n	800dd5c <__ieee754_atan2f+0x74>
 800dd50:	2c01      	cmp	r4, #1
 800dd52:	d141      	bne.n	800ddd8 <__ieee754_atan2f+0xf0>
 800dd54:	4b24      	ldr	r3, [pc, #144]	; (800dde8 <__ieee754_atan2f+0x100>)
 800dd56:	e7ea      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800dd58:	4b24      	ldr	r3, [pc, #144]	; (800ddec <__ieee754_atan2f+0x104>)
 800dd5a:	e7e8      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800dd5c:	4b24      	ldr	r3, [pc, #144]	; (800ddf0 <__ieee754_atan2f+0x108>)
 800dd5e:	e7e6      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800dd60:	2c02      	cmp	r4, #2
 800dd62:	d006      	beq.n	800dd72 <__ieee754_atan2f+0x8a>
 800dd64:	2c03      	cmp	r4, #3
 800dd66:	d006      	beq.n	800dd76 <__ieee754_atan2f+0x8e>
 800dd68:	2c01      	cmp	r4, #1
 800dd6a:	d137      	bne.n	800dddc <__ieee754_atan2f+0xf4>
 800dd6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd70:	e7dd      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800dd72:	4b20      	ldr	r3, [pc, #128]	; (800ddf4 <__ieee754_atan2f+0x10c>)
 800dd74:	e7db      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800dd76:	4b20      	ldr	r3, [pc, #128]	; (800ddf8 <__ieee754_atan2f+0x110>)
 800dd78:	e7d9      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800dd7a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dd7e:	d0d9      	beq.n	800dd34 <__ieee754_atan2f+0x4c>
 800dd80:	1b92      	subs	r2, r2, r6
 800dd82:	15d2      	asrs	r2, r2, #23
 800dd84:	2a3c      	cmp	r2, #60	; 0x3c
 800dd86:	dc17      	bgt.n	800ddb8 <__ieee754_atan2f+0xd0>
 800dd88:	2900      	cmp	r1, #0
 800dd8a:	da01      	bge.n	800dd90 <__ieee754_atan2f+0xa8>
 800dd8c:	323c      	adds	r2, #60	; 0x3c
 800dd8e:	db15      	blt.n	800ddbc <__ieee754_atan2f+0xd4>
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7f3 f887 	bl	8000ea4 <__aeabi_fdiv>
 800dd96:	f001 fe95 	bl	800fac4 <fabsf>
 800dd9a:	f001 fd83 	bl	800f8a4 <atanf>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2c01      	cmp	r4, #1
 800dda2:	d00d      	beq.n	800ddc0 <__ieee754_atan2f+0xd8>
 800dda4:	2c02      	cmp	r4, #2
 800dda6:	d00e      	beq.n	800ddc6 <__ieee754_atan2f+0xde>
 800dda8:	2c00      	cmp	r4, #0
 800ddaa:	d0c0      	beq.n	800dd2e <__ieee754_atan2f+0x46>
 800ddac:	4913      	ldr	r1, [pc, #76]	; (800ddfc <__ieee754_atan2f+0x114>)
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7f2 febc 	bl	8000b2c <__addsf3>
 800ddb4:	490f      	ldr	r1, [pc, #60]	; (800ddf4 <__ieee754_atan2f+0x10c>)
 800ddb6:	e00c      	b.n	800ddd2 <__ieee754_atan2f+0xea>
 800ddb8:	4b11      	ldr	r3, [pc, #68]	; (800de00 <__ieee754_atan2f+0x118>)
 800ddba:	e7f1      	b.n	800dda0 <__ieee754_atan2f+0xb8>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	e7ef      	b.n	800dda0 <__ieee754_atan2f+0xb8>
 800ddc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ddc4:	e7b3      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800ddc6:	490d      	ldr	r1, [pc, #52]	; (800ddfc <__ieee754_atan2f+0x114>)
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7f2 feaf 	bl	8000b2c <__addsf3>
 800ddce:	4601      	mov	r1, r0
 800ddd0:	4808      	ldr	r0, [pc, #32]	; (800ddf4 <__ieee754_atan2f+0x10c>)
 800ddd2:	f7f2 fea9 	bl	8000b28 <__aeabi_fsub>
 800ddd6:	e797      	b.n	800dd08 <__ieee754_atan2f+0x20>
 800ddd8:	4b0a      	ldr	r3, [pc, #40]	; (800de04 <__ieee754_atan2f+0x11c>)
 800ddda:	e7a8      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800dddc:	2300      	movs	r3, #0
 800ddde:	e7a6      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800dde0:	4b07      	ldr	r3, [pc, #28]	; (800de00 <__ieee754_atan2f+0x118>)
 800dde2:	e7a4      	b.n	800dd2e <__ieee754_atan2f+0x46>
 800dde4:	bfc90fdb 	.word	0xbfc90fdb
 800dde8:	bf490fdb 	.word	0xbf490fdb
 800ddec:	4016cbe4 	.word	0x4016cbe4
 800ddf0:	c016cbe4 	.word	0xc016cbe4
 800ddf4:	40490fdb 	.word	0x40490fdb
 800ddf8:	c0490fdb 	.word	0xc0490fdb
 800ddfc:	33bbbd2e 	.word	0x33bbbd2e
 800de00:	3fc90fdb 	.word	0x3fc90fdb
 800de04:	3f490fdb 	.word	0x3f490fdb

0800de08 <__ieee754_rem_pio2f>:
 800de08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de0c:	4a9d      	ldr	r2, [pc, #628]	; (800e084 <__ieee754_rem_pio2f+0x27c>)
 800de0e:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800de12:	4295      	cmp	r5, r2
 800de14:	b087      	sub	sp, #28
 800de16:	460c      	mov	r4, r1
 800de18:	4607      	mov	r7, r0
 800de1a:	dc04      	bgt.n	800de26 <__ieee754_rem_pio2f+0x1e>
 800de1c:	2300      	movs	r3, #0
 800de1e:	6020      	str	r0, [r4, #0]
 800de20:	604b      	str	r3, [r1, #4]
 800de22:	2600      	movs	r6, #0
 800de24:	e01a      	b.n	800de5c <__ieee754_rem_pio2f+0x54>
 800de26:	4a98      	ldr	r2, [pc, #608]	; (800e088 <__ieee754_rem_pio2f+0x280>)
 800de28:	4295      	cmp	r5, r2
 800de2a:	dc4b      	bgt.n	800dec4 <__ieee754_rem_pio2f+0xbc>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	4997      	ldr	r1, [pc, #604]	; (800e08c <__ieee754_rem_pio2f+0x284>)
 800de30:	f025 050f 	bic.w	r5, r5, #15
 800de34:	4e96      	ldr	r6, [pc, #600]	; (800e090 <__ieee754_rem_pio2f+0x288>)
 800de36:	dd23      	ble.n	800de80 <__ieee754_rem_pio2f+0x78>
 800de38:	f7f2 fe76 	bl	8000b28 <__aeabi_fsub>
 800de3c:	42b5      	cmp	r5, r6
 800de3e:	4607      	mov	r7, r0
 800de40:	d010      	beq.n	800de64 <__ieee754_rem_pio2f+0x5c>
 800de42:	4994      	ldr	r1, [pc, #592]	; (800e094 <__ieee754_rem_pio2f+0x28c>)
 800de44:	f7f2 fe70 	bl	8000b28 <__aeabi_fsub>
 800de48:	4601      	mov	r1, r0
 800de4a:	6020      	str	r0, [r4, #0]
 800de4c:	4638      	mov	r0, r7
 800de4e:	f7f2 fe6b 	bl	8000b28 <__aeabi_fsub>
 800de52:	4990      	ldr	r1, [pc, #576]	; (800e094 <__ieee754_rem_pio2f+0x28c>)
 800de54:	f7f2 fe68 	bl	8000b28 <__aeabi_fsub>
 800de58:	2601      	movs	r6, #1
 800de5a:	6060      	str	r0, [r4, #4]
 800de5c:	4630      	mov	r0, r6
 800de5e:	b007      	add	sp, #28
 800de60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de64:	498c      	ldr	r1, [pc, #560]	; (800e098 <__ieee754_rem_pio2f+0x290>)
 800de66:	f7f2 fe5f 	bl	8000b28 <__aeabi_fsub>
 800de6a:	498c      	ldr	r1, [pc, #560]	; (800e09c <__ieee754_rem_pio2f+0x294>)
 800de6c:	4605      	mov	r5, r0
 800de6e:	f7f2 fe5b 	bl	8000b28 <__aeabi_fsub>
 800de72:	4601      	mov	r1, r0
 800de74:	6020      	str	r0, [r4, #0]
 800de76:	4628      	mov	r0, r5
 800de78:	f7f2 fe56 	bl	8000b28 <__aeabi_fsub>
 800de7c:	4987      	ldr	r1, [pc, #540]	; (800e09c <__ieee754_rem_pio2f+0x294>)
 800de7e:	e7e9      	b.n	800de54 <__ieee754_rem_pio2f+0x4c>
 800de80:	f7f2 fe54 	bl	8000b2c <__addsf3>
 800de84:	42b5      	cmp	r5, r6
 800de86:	4607      	mov	r7, r0
 800de88:	d00e      	beq.n	800dea8 <__ieee754_rem_pio2f+0xa0>
 800de8a:	4982      	ldr	r1, [pc, #520]	; (800e094 <__ieee754_rem_pio2f+0x28c>)
 800de8c:	f7f2 fe4e 	bl	8000b2c <__addsf3>
 800de90:	4601      	mov	r1, r0
 800de92:	6020      	str	r0, [r4, #0]
 800de94:	4638      	mov	r0, r7
 800de96:	f7f2 fe47 	bl	8000b28 <__aeabi_fsub>
 800de9a:	497e      	ldr	r1, [pc, #504]	; (800e094 <__ieee754_rem_pio2f+0x28c>)
 800de9c:	f7f2 fe46 	bl	8000b2c <__addsf3>
 800dea0:	f04f 36ff 	mov.w	r6, #4294967295
 800dea4:	6060      	str	r0, [r4, #4]
 800dea6:	e7d9      	b.n	800de5c <__ieee754_rem_pio2f+0x54>
 800dea8:	497b      	ldr	r1, [pc, #492]	; (800e098 <__ieee754_rem_pio2f+0x290>)
 800deaa:	f7f2 fe3f 	bl	8000b2c <__addsf3>
 800deae:	497b      	ldr	r1, [pc, #492]	; (800e09c <__ieee754_rem_pio2f+0x294>)
 800deb0:	4605      	mov	r5, r0
 800deb2:	f7f2 fe3b 	bl	8000b2c <__addsf3>
 800deb6:	4601      	mov	r1, r0
 800deb8:	6020      	str	r0, [r4, #0]
 800deba:	4628      	mov	r0, r5
 800debc:	f7f2 fe34 	bl	8000b28 <__aeabi_fsub>
 800dec0:	4976      	ldr	r1, [pc, #472]	; (800e09c <__ieee754_rem_pio2f+0x294>)
 800dec2:	e7eb      	b.n	800de9c <__ieee754_rem_pio2f+0x94>
 800dec4:	4a76      	ldr	r2, [pc, #472]	; (800e0a0 <__ieee754_rem_pio2f+0x298>)
 800dec6:	4295      	cmp	r5, r2
 800dec8:	f300 808c 	bgt.w	800dfe4 <__ieee754_rem_pio2f+0x1dc>
 800decc:	f001 fdfa 	bl	800fac4 <fabsf>
 800ded0:	4974      	ldr	r1, [pc, #464]	; (800e0a4 <__ieee754_rem_pio2f+0x29c>)
 800ded2:	4680      	mov	r8, r0
 800ded4:	f7f2 ff32 	bl	8000d3c <__aeabi_fmul>
 800ded8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dedc:	f7f2 fe26 	bl	8000b2c <__addsf3>
 800dee0:	f7f3 f908 	bl	80010f4 <__aeabi_f2iz>
 800dee4:	4606      	mov	r6, r0
 800dee6:	f7f2 fed5 	bl	8000c94 <__aeabi_i2f>
 800deea:	4968      	ldr	r1, [pc, #416]	; (800e08c <__ieee754_rem_pio2f+0x284>)
 800deec:	4682      	mov	sl, r0
 800deee:	f7f2 ff25 	bl	8000d3c <__aeabi_fmul>
 800def2:	4601      	mov	r1, r0
 800def4:	4640      	mov	r0, r8
 800def6:	f7f2 fe17 	bl	8000b28 <__aeabi_fsub>
 800defa:	4966      	ldr	r1, [pc, #408]	; (800e094 <__ieee754_rem_pio2f+0x28c>)
 800defc:	4680      	mov	r8, r0
 800defe:	4650      	mov	r0, sl
 800df00:	f7f2 ff1c 	bl	8000d3c <__aeabi_fmul>
 800df04:	2e1f      	cmp	r6, #31
 800df06:	4681      	mov	r9, r0
 800df08:	dc0c      	bgt.n	800df24 <__ieee754_rem_pio2f+0x11c>
 800df0a:	4a67      	ldr	r2, [pc, #412]	; (800e0a8 <__ieee754_rem_pio2f+0x2a0>)
 800df0c:	1e71      	subs	r1, r6, #1
 800df0e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800df12:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800df16:	4293      	cmp	r3, r2
 800df18:	d004      	beq.n	800df24 <__ieee754_rem_pio2f+0x11c>
 800df1a:	4649      	mov	r1, r9
 800df1c:	4640      	mov	r0, r8
 800df1e:	f7f2 fe03 	bl	8000b28 <__aeabi_fsub>
 800df22:	e009      	b.n	800df38 <__ieee754_rem_pio2f+0x130>
 800df24:	4649      	mov	r1, r9
 800df26:	4640      	mov	r0, r8
 800df28:	f7f2 fdfe 	bl	8000b28 <__aeabi_fsub>
 800df2c:	15ed      	asrs	r5, r5, #23
 800df2e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800df32:	1aeb      	subs	r3, r5, r3
 800df34:	2b08      	cmp	r3, #8
 800df36:	dc01      	bgt.n	800df3c <__ieee754_rem_pio2f+0x134>
 800df38:	6020      	str	r0, [r4, #0]
 800df3a:	e024      	b.n	800df86 <__ieee754_rem_pio2f+0x17e>
 800df3c:	4956      	ldr	r1, [pc, #344]	; (800e098 <__ieee754_rem_pio2f+0x290>)
 800df3e:	4650      	mov	r0, sl
 800df40:	f7f2 fefc 	bl	8000d3c <__aeabi_fmul>
 800df44:	4681      	mov	r9, r0
 800df46:	4601      	mov	r1, r0
 800df48:	4640      	mov	r0, r8
 800df4a:	f7f2 fded 	bl	8000b28 <__aeabi_fsub>
 800df4e:	4601      	mov	r1, r0
 800df50:	4683      	mov	fp, r0
 800df52:	4640      	mov	r0, r8
 800df54:	f7f2 fde8 	bl	8000b28 <__aeabi_fsub>
 800df58:	4649      	mov	r1, r9
 800df5a:	f7f2 fde5 	bl	8000b28 <__aeabi_fsub>
 800df5e:	4680      	mov	r8, r0
 800df60:	494e      	ldr	r1, [pc, #312]	; (800e09c <__ieee754_rem_pio2f+0x294>)
 800df62:	4650      	mov	r0, sl
 800df64:	f7f2 feea 	bl	8000d3c <__aeabi_fmul>
 800df68:	4641      	mov	r1, r8
 800df6a:	f7f2 fddd 	bl	8000b28 <__aeabi_fsub>
 800df6e:	4601      	mov	r1, r0
 800df70:	4681      	mov	r9, r0
 800df72:	4658      	mov	r0, fp
 800df74:	f7f2 fdd8 	bl	8000b28 <__aeabi_fsub>
 800df78:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800df7c:	1aed      	subs	r5, r5, r3
 800df7e:	2d19      	cmp	r5, #25
 800df80:	dc15      	bgt.n	800dfae <__ieee754_rem_pio2f+0x1a6>
 800df82:	46d8      	mov	r8, fp
 800df84:	6020      	str	r0, [r4, #0]
 800df86:	6825      	ldr	r5, [r4, #0]
 800df88:	4640      	mov	r0, r8
 800df8a:	4629      	mov	r1, r5
 800df8c:	f7f2 fdcc 	bl	8000b28 <__aeabi_fsub>
 800df90:	4649      	mov	r1, r9
 800df92:	f7f2 fdc9 	bl	8000b28 <__aeabi_fsub>
 800df96:	2f00      	cmp	r7, #0
 800df98:	6060      	str	r0, [r4, #4]
 800df9a:	f6bf af5f 	bge.w	800de5c <__ieee754_rem_pio2f+0x54>
 800df9e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800dfa2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dfa6:	6025      	str	r5, [r4, #0]
 800dfa8:	6060      	str	r0, [r4, #4]
 800dfaa:	4276      	negs	r6, r6
 800dfac:	e756      	b.n	800de5c <__ieee754_rem_pio2f+0x54>
 800dfae:	493f      	ldr	r1, [pc, #252]	; (800e0ac <__ieee754_rem_pio2f+0x2a4>)
 800dfb0:	4650      	mov	r0, sl
 800dfb2:	f7f2 fec3 	bl	8000d3c <__aeabi_fmul>
 800dfb6:	4605      	mov	r5, r0
 800dfb8:	4601      	mov	r1, r0
 800dfba:	4658      	mov	r0, fp
 800dfbc:	f7f2 fdb4 	bl	8000b28 <__aeabi_fsub>
 800dfc0:	4601      	mov	r1, r0
 800dfc2:	4680      	mov	r8, r0
 800dfc4:	4658      	mov	r0, fp
 800dfc6:	f7f2 fdaf 	bl	8000b28 <__aeabi_fsub>
 800dfca:	4629      	mov	r1, r5
 800dfcc:	f7f2 fdac 	bl	8000b28 <__aeabi_fsub>
 800dfd0:	4605      	mov	r5, r0
 800dfd2:	4937      	ldr	r1, [pc, #220]	; (800e0b0 <__ieee754_rem_pio2f+0x2a8>)
 800dfd4:	4650      	mov	r0, sl
 800dfd6:	f7f2 feb1 	bl	8000d3c <__aeabi_fmul>
 800dfda:	4629      	mov	r1, r5
 800dfdc:	f7f2 fda4 	bl	8000b28 <__aeabi_fsub>
 800dfe0:	4681      	mov	r9, r0
 800dfe2:	e79a      	b.n	800df1a <__ieee754_rem_pio2f+0x112>
 800dfe4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800dfe8:	db05      	blt.n	800dff6 <__ieee754_rem_pio2f+0x1ee>
 800dfea:	4601      	mov	r1, r0
 800dfec:	f7f2 fd9c 	bl	8000b28 <__aeabi_fsub>
 800dff0:	6060      	str	r0, [r4, #4]
 800dff2:	6020      	str	r0, [r4, #0]
 800dff4:	e715      	b.n	800de22 <__ieee754_rem_pio2f+0x1a>
 800dff6:	15ee      	asrs	r6, r5, #23
 800dff8:	3e86      	subs	r6, #134	; 0x86
 800dffa:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800dffe:	4628      	mov	r0, r5
 800e000:	f7f3 f878 	bl	80010f4 <__aeabi_f2iz>
 800e004:	f7f2 fe46 	bl	8000c94 <__aeabi_i2f>
 800e008:	4601      	mov	r1, r0
 800e00a:	9003      	str	r0, [sp, #12]
 800e00c:	4628      	mov	r0, r5
 800e00e:	f7f2 fd8b 	bl	8000b28 <__aeabi_fsub>
 800e012:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e016:	f7f2 fe91 	bl	8000d3c <__aeabi_fmul>
 800e01a:	4680      	mov	r8, r0
 800e01c:	f7f3 f86a 	bl	80010f4 <__aeabi_f2iz>
 800e020:	f7f2 fe38 	bl	8000c94 <__aeabi_i2f>
 800e024:	4601      	mov	r1, r0
 800e026:	9004      	str	r0, [sp, #16]
 800e028:	4605      	mov	r5, r0
 800e02a:	4640      	mov	r0, r8
 800e02c:	f7f2 fd7c 	bl	8000b28 <__aeabi_fsub>
 800e030:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e034:	f7f2 fe82 	bl	8000d3c <__aeabi_fmul>
 800e038:	2100      	movs	r1, #0
 800e03a:	9005      	str	r0, [sp, #20]
 800e03c:	f7f3 f812 	bl	8001064 <__aeabi_fcmpeq>
 800e040:	b1e8      	cbz	r0, 800e07e <__ieee754_rem_pio2f+0x276>
 800e042:	2100      	movs	r1, #0
 800e044:	4628      	mov	r0, r5
 800e046:	f7f3 f80d 	bl	8001064 <__aeabi_fcmpeq>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	bf14      	ite	ne
 800e04e:	2301      	movne	r3, #1
 800e050:	2302      	moveq	r3, #2
 800e052:	4a18      	ldr	r2, [pc, #96]	; (800e0b4 <__ieee754_rem_pio2f+0x2ac>)
 800e054:	4621      	mov	r1, r4
 800e056:	9201      	str	r2, [sp, #4]
 800e058:	2202      	movs	r2, #2
 800e05a:	a803      	add	r0, sp, #12
 800e05c:	9200      	str	r2, [sp, #0]
 800e05e:	4632      	mov	r2, r6
 800e060:	f000 fdfc 	bl	800ec5c <__kernel_rem_pio2f>
 800e064:	2f00      	cmp	r7, #0
 800e066:	4606      	mov	r6, r0
 800e068:	f6bf aef8 	bge.w	800de5c <__ieee754_rem_pio2f+0x54>
 800e06c:	6823      	ldr	r3, [r4, #0]
 800e06e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e072:	6023      	str	r3, [r4, #0]
 800e074:	6863      	ldr	r3, [r4, #4]
 800e076:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e07a:	6063      	str	r3, [r4, #4]
 800e07c:	e795      	b.n	800dfaa <__ieee754_rem_pio2f+0x1a2>
 800e07e:	2303      	movs	r3, #3
 800e080:	e7e7      	b.n	800e052 <__ieee754_rem_pio2f+0x24a>
 800e082:	bf00      	nop
 800e084:	3f490fd8 	.word	0x3f490fd8
 800e088:	4016cbe3 	.word	0x4016cbe3
 800e08c:	3fc90f80 	.word	0x3fc90f80
 800e090:	3fc90fd0 	.word	0x3fc90fd0
 800e094:	37354443 	.word	0x37354443
 800e098:	37354400 	.word	0x37354400
 800e09c:	2e85a308 	.word	0x2e85a308
 800e0a0:	43490f80 	.word	0x43490f80
 800e0a4:	3f22f984 	.word	0x3f22f984
 800e0a8:	080109b0 	.word	0x080109b0
 800e0ac:	2e85a300 	.word	0x2e85a300
 800e0b0:	248d3132 	.word	0x248d3132
 800e0b4:	08010a30 	.word	0x08010a30

0800e0b8 <__ieee754_sqrtf>:
 800e0b8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e0bc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e0c0:	b570      	push	{r4, r5, r6, lr}
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	4604      	mov	r4, r0
 800e0c6:	d309      	bcc.n	800e0dc <__ieee754_sqrtf+0x24>
 800e0c8:	4601      	mov	r1, r0
 800e0ca:	f7f2 fe37 	bl	8000d3c <__aeabi_fmul>
 800e0ce:	4601      	mov	r1, r0
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f7f2 fd2b 	bl	8000b2c <__addsf3>
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	4620      	mov	r0, r4
 800e0da:	bd70      	pop	{r4, r5, r6, pc}
 800e0dc:	2a00      	cmp	r2, #0
 800e0de:	d0fb      	beq.n	800e0d8 <__ieee754_sqrtf+0x20>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	da06      	bge.n	800e0f2 <__ieee754_sqrtf+0x3a>
 800e0e4:	4601      	mov	r1, r0
 800e0e6:	f7f2 fd1f 	bl	8000b28 <__aeabi_fsub>
 800e0ea:	4601      	mov	r1, r0
 800e0ec:	f7f2 feda 	bl	8000ea4 <__aeabi_fdiv>
 800e0f0:	e7f1      	b.n	800e0d6 <__ieee754_sqrtf+0x1e>
 800e0f2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800e0f6:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800e0fa:	d204      	bcs.n	800e106 <__ieee754_sqrtf+0x4e>
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	0219      	lsls	r1, r3, #8
 800e100:	d529      	bpl.n	800e156 <__ieee754_sqrtf+0x9e>
 800e102:	3a01      	subs	r2, #1
 800e104:	1aa4      	subs	r4, r4, r2
 800e106:	3c7f      	subs	r4, #127	; 0x7f
 800e108:	07e2      	lsls	r2, r4, #31
 800e10a:	f04f 0200 	mov.w	r2, #0
 800e10e:	ea4f 0164 	mov.w	r1, r4, asr #1
 800e112:	4616      	mov	r6, r2
 800e114:	f04f 0419 	mov.w	r4, #25
 800e118:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800e11c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e120:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e124:	bf48      	it	mi
 800e126:	005b      	lslmi	r3, r3, #1
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	1835      	adds	r5, r6, r0
 800e12c:	429d      	cmp	r5, r3
 800e12e:	bfde      	ittt	le
 800e130:	182e      	addle	r6, r5, r0
 800e132:	1b5b      	suble	r3, r3, r5
 800e134:	1812      	addle	r2, r2, r0
 800e136:	3c01      	subs	r4, #1
 800e138:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e13c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800e140:	d1f3      	bne.n	800e12a <__ieee754_sqrtf+0x72>
 800e142:	b113      	cbz	r3, 800e14a <__ieee754_sqrtf+0x92>
 800e144:	3201      	adds	r2, #1
 800e146:	f022 0201 	bic.w	r2, r2, #1
 800e14a:	1054      	asrs	r4, r2, #1
 800e14c:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800e150:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800e154:	e7c0      	b.n	800e0d8 <__ieee754_sqrtf+0x20>
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	3201      	adds	r2, #1
 800e15a:	e7d0      	b.n	800e0fe <__ieee754_sqrtf+0x46>
 800e15c:	0000      	movs	r0, r0
	...

0800e160 <__kernel_cos>:
 800e160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e164:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800e168:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800e16c:	b085      	sub	sp, #20
 800e16e:	4605      	mov	r5, r0
 800e170:	460c      	mov	r4, r1
 800e172:	4692      	mov	sl, r2
 800e174:	469b      	mov	fp, r3
 800e176:	da04      	bge.n	800e182 <__kernel_cos+0x22>
 800e178:	f7f2 fc5a 	bl	8000a30 <__aeabi_d2iz>
 800e17c:	2800      	cmp	r0, #0
 800e17e:	f000 80a8 	beq.w	800e2d2 <__kernel_cos+0x172>
 800e182:	462a      	mov	r2, r5
 800e184:	4623      	mov	r3, r4
 800e186:	4628      	mov	r0, r5
 800e188:	4621      	mov	r1, r4
 800e18a:	f7f2 f9a1 	bl	80004d0 <__aeabi_dmul>
 800e18e:	a352      	add	r3, pc, #328	; (adr r3, 800e2d8 <__kernel_cos+0x178>)
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	4680      	mov	r8, r0
 800e196:	4689      	mov	r9, r1
 800e198:	f7f2 f99a 	bl	80004d0 <__aeabi_dmul>
 800e19c:	a350      	add	r3, pc, #320	; (adr r3, 800e2e0 <__kernel_cos+0x180>)
 800e19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a2:	f7f1 ffe3 	bl	800016c <__adddf3>
 800e1a6:	4642      	mov	r2, r8
 800e1a8:	464b      	mov	r3, r9
 800e1aa:	f7f2 f991 	bl	80004d0 <__aeabi_dmul>
 800e1ae:	a34e      	add	r3, pc, #312	; (adr r3, 800e2e8 <__kernel_cos+0x188>)
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	f7f1 ffd8 	bl	8000168 <__aeabi_dsub>
 800e1b8:	4642      	mov	r2, r8
 800e1ba:	464b      	mov	r3, r9
 800e1bc:	f7f2 f988 	bl	80004d0 <__aeabi_dmul>
 800e1c0:	a34b      	add	r3, pc, #300	; (adr r3, 800e2f0 <__kernel_cos+0x190>)
 800e1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c6:	f7f1 ffd1 	bl	800016c <__adddf3>
 800e1ca:	4642      	mov	r2, r8
 800e1cc:	464b      	mov	r3, r9
 800e1ce:	f7f2 f97f 	bl	80004d0 <__aeabi_dmul>
 800e1d2:	a349      	add	r3, pc, #292	; (adr r3, 800e2f8 <__kernel_cos+0x198>)
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	f7f1 ffc6 	bl	8000168 <__aeabi_dsub>
 800e1dc:	4642      	mov	r2, r8
 800e1de:	464b      	mov	r3, r9
 800e1e0:	f7f2 f976 	bl	80004d0 <__aeabi_dmul>
 800e1e4:	a346      	add	r3, pc, #280	; (adr r3, 800e300 <__kernel_cos+0x1a0>)
 800e1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ea:	f7f1 ffbf 	bl	800016c <__adddf3>
 800e1ee:	464b      	mov	r3, r9
 800e1f0:	4642      	mov	r2, r8
 800e1f2:	f7f2 f96d 	bl	80004d0 <__aeabi_dmul>
 800e1f6:	4b44      	ldr	r3, [pc, #272]	; (800e308 <__kernel_cos+0x1a8>)
 800e1f8:	e9cd 0100 	strd	r0, r1, [sp]
 800e1fc:	429f      	cmp	r7, r3
 800e1fe:	dc2a      	bgt.n	800e256 <__kernel_cos+0xf6>
 800e200:	2200      	movs	r2, #0
 800e202:	4b42      	ldr	r3, [pc, #264]	; (800e30c <__kernel_cos+0x1ac>)
 800e204:	4640      	mov	r0, r8
 800e206:	4649      	mov	r1, r9
 800e208:	f7f2 f962 	bl	80004d0 <__aeabi_dmul>
 800e20c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e210:	4606      	mov	r6, r0
 800e212:	460f      	mov	r7, r1
 800e214:	4640      	mov	r0, r8
 800e216:	4649      	mov	r1, r9
 800e218:	f7f2 f95a 	bl	80004d0 <__aeabi_dmul>
 800e21c:	4652      	mov	r2, sl
 800e21e:	4680      	mov	r8, r0
 800e220:	4689      	mov	r9, r1
 800e222:	465b      	mov	r3, fp
 800e224:	4628      	mov	r0, r5
 800e226:	4621      	mov	r1, r4
 800e228:	f7f2 f952 	bl	80004d0 <__aeabi_dmul>
 800e22c:	4602      	mov	r2, r0
 800e22e:	460b      	mov	r3, r1
 800e230:	4640      	mov	r0, r8
 800e232:	4649      	mov	r1, r9
 800e234:	f7f1 ff98 	bl	8000168 <__aeabi_dsub>
 800e238:	4602      	mov	r2, r0
 800e23a:	460b      	mov	r3, r1
 800e23c:	4630      	mov	r0, r6
 800e23e:	4639      	mov	r1, r7
 800e240:	f7f1 ff92 	bl	8000168 <__aeabi_dsub>
 800e244:	4602      	mov	r2, r0
 800e246:	2000      	movs	r0, #0
 800e248:	460b      	mov	r3, r1
 800e24a:	4931      	ldr	r1, [pc, #196]	; (800e310 <__kernel_cos+0x1b0>)
 800e24c:	f7f1 ff8c 	bl	8000168 <__aeabi_dsub>
 800e250:	b005      	add	sp, #20
 800e252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e256:	4b2f      	ldr	r3, [pc, #188]	; (800e314 <__kernel_cos+0x1b4>)
 800e258:	2000      	movs	r0, #0
 800e25a:	429f      	cmp	r7, r3
 800e25c:	bfdf      	itttt	le
 800e25e:	2200      	movle	r2, #0
 800e260:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800e264:	4616      	movle	r6, r2
 800e266:	461f      	movle	r7, r3
 800e268:	bfc4      	itt	gt
 800e26a:	2600      	movgt	r6, #0
 800e26c:	4f2a      	ldrgt	r7, [pc, #168]	; (800e318 <__kernel_cos+0x1b8>)
 800e26e:	4632      	mov	r2, r6
 800e270:	463b      	mov	r3, r7
 800e272:	4927      	ldr	r1, [pc, #156]	; (800e310 <__kernel_cos+0x1b0>)
 800e274:	f7f1 ff78 	bl	8000168 <__aeabi_dsub>
 800e278:	2200      	movs	r2, #0
 800e27a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e27e:	4b23      	ldr	r3, [pc, #140]	; (800e30c <__kernel_cos+0x1ac>)
 800e280:	4640      	mov	r0, r8
 800e282:	4649      	mov	r1, r9
 800e284:	f7f2 f924 	bl	80004d0 <__aeabi_dmul>
 800e288:	4632      	mov	r2, r6
 800e28a:	463b      	mov	r3, r7
 800e28c:	f7f1 ff6c 	bl	8000168 <__aeabi_dsub>
 800e290:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e294:	4606      	mov	r6, r0
 800e296:	460f      	mov	r7, r1
 800e298:	4640      	mov	r0, r8
 800e29a:	4649      	mov	r1, r9
 800e29c:	f7f2 f918 	bl	80004d0 <__aeabi_dmul>
 800e2a0:	4652      	mov	r2, sl
 800e2a2:	4680      	mov	r8, r0
 800e2a4:	4689      	mov	r9, r1
 800e2a6:	465b      	mov	r3, fp
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	4621      	mov	r1, r4
 800e2ac:	f7f2 f910 	bl	80004d0 <__aeabi_dmul>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	4640      	mov	r0, r8
 800e2b6:	4649      	mov	r1, r9
 800e2b8:	f7f1 ff56 	bl	8000168 <__aeabi_dsub>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	460b      	mov	r3, r1
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	4639      	mov	r1, r7
 800e2c4:	f7f1 ff50 	bl	8000168 <__aeabi_dsub>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2d0:	e7bc      	b.n	800e24c <__kernel_cos+0xec>
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	490e      	ldr	r1, [pc, #56]	; (800e310 <__kernel_cos+0x1b0>)
 800e2d6:	e7bb      	b.n	800e250 <__kernel_cos+0xf0>
 800e2d8:	be8838d4 	.word	0xbe8838d4
 800e2dc:	bda8fae9 	.word	0xbda8fae9
 800e2e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800e2e4:	3e21ee9e 	.word	0x3e21ee9e
 800e2e8:	809c52ad 	.word	0x809c52ad
 800e2ec:	3e927e4f 	.word	0x3e927e4f
 800e2f0:	19cb1590 	.word	0x19cb1590
 800e2f4:	3efa01a0 	.word	0x3efa01a0
 800e2f8:	16c15177 	.word	0x16c15177
 800e2fc:	3f56c16c 	.word	0x3f56c16c
 800e300:	5555554c 	.word	0x5555554c
 800e304:	3fa55555 	.word	0x3fa55555
 800e308:	3fd33332 	.word	0x3fd33332
 800e30c:	3fe00000 	.word	0x3fe00000
 800e310:	3ff00000 	.word	0x3ff00000
 800e314:	3fe90000 	.word	0x3fe90000
 800e318:	3fd20000 	.word	0x3fd20000

0800e31c <__kernel_rem_pio2>:
 800e31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e320:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e324:	9306      	str	r3, [sp, #24]
 800e326:	9101      	str	r1, [sp, #4]
 800e328:	4bc0      	ldr	r3, [pc, #768]	; (800e62c <__kernel_rem_pio2+0x310>)
 800e32a:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e32c:	1ed4      	subs	r4, r2, #3
 800e32e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e332:	2500      	movs	r5, #0
 800e334:	9302      	str	r3, [sp, #8]
 800e336:	9b06      	ldr	r3, [sp, #24]
 800e338:	900a      	str	r0, [sp, #40]	; 0x28
 800e33a:	3b01      	subs	r3, #1
 800e33c:	9308      	str	r3, [sp, #32]
 800e33e:	2318      	movs	r3, #24
 800e340:	fb94 f4f3 	sdiv	r4, r4, r3
 800e344:	f06f 0317 	mvn.w	r3, #23
 800e348:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800e34c:	fb04 3303 	mla	r3, r4, r3, r3
 800e350:	eb03 0a02 	add.w	sl, r3, r2
 800e354:	9a08      	ldr	r2, [sp, #32]
 800e356:	9b02      	ldr	r3, [sp, #8]
 800e358:	1aa7      	subs	r7, r4, r2
 800e35a:	eb03 0802 	add.w	r8, r3, r2
 800e35e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e360:	2200      	movs	r2, #0
 800e362:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e366:	2300      	movs	r3, #0
 800e368:	ae20      	add	r6, sp, #128	; 0x80
 800e36a:	4545      	cmp	r5, r8
 800e36c:	dd14      	ble.n	800e398 <__kernel_rem_pio2+0x7c>
 800e36e:	2600      	movs	r6, #0
 800e370:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e374:	9b02      	ldr	r3, [sp, #8]
 800e376:	429e      	cmp	r6, r3
 800e378:	dc39      	bgt.n	800e3ee <__kernel_rem_pio2+0xd2>
 800e37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e37c:	f04f 0800 	mov.w	r8, #0
 800e380:	3b08      	subs	r3, #8
 800e382:	9304      	str	r3, [sp, #16]
 800e384:	9b06      	ldr	r3, [sp, #24]
 800e386:	f04f 0900 	mov.w	r9, #0
 800e38a:	199d      	adds	r5, r3, r6
 800e38c:	ab22      	add	r3, sp, #136	; 0x88
 800e38e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e392:	9309      	str	r3, [sp, #36]	; 0x24
 800e394:	2700      	movs	r7, #0
 800e396:	e023      	b.n	800e3e0 <__kernel_rem_pio2+0xc4>
 800e398:	42ef      	cmn	r7, r5
 800e39a:	d40b      	bmi.n	800e3b4 <__kernel_rem_pio2+0x98>
 800e39c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e3a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3a4:	f7f2 f82e 	bl	8000404 <__aeabi_i2d>
 800e3a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3ac:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800e3b0:	3501      	adds	r5, #1
 800e3b2:	e7da      	b.n	800e36a <__kernel_rem_pio2+0x4e>
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	e7f8      	b.n	800e3ac <__kernel_rem_pio2+0x90>
 800e3ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3bc:	9d04      	ldr	r5, [sp, #16]
 800e3be:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800e3c2:	9109      	str	r1, [sp, #36]	; 0x24
 800e3c4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800e3c8:	9504      	str	r5, [sp, #16]
 800e3ca:	f7f2 f881 	bl	80004d0 <__aeabi_dmul>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	4640      	mov	r0, r8
 800e3d4:	4649      	mov	r1, r9
 800e3d6:	f7f1 fec9 	bl	800016c <__adddf3>
 800e3da:	4680      	mov	r8, r0
 800e3dc:	4689      	mov	r9, r1
 800e3de:	3701      	adds	r7, #1
 800e3e0:	9b08      	ldr	r3, [sp, #32]
 800e3e2:	429f      	cmp	r7, r3
 800e3e4:	dde9      	ble.n	800e3ba <__kernel_rem_pio2+0x9e>
 800e3e6:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800e3ea:	3601      	adds	r6, #1
 800e3ec:	e7c2      	b.n	800e374 <__kernel_rem_pio2+0x58>
 800e3ee:	9b02      	ldr	r3, [sp, #8]
 800e3f0:	aa0e      	add	r2, sp, #56	; 0x38
 800e3f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3f6:	930d      	str	r3, [sp, #52]	; 0x34
 800e3f8:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e3fa:	9f02      	ldr	r7, [sp, #8]
 800e3fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e400:	930c      	str	r3, [sp, #48]	; 0x30
 800e402:	2600      	movs	r6, #0
 800e404:	ab9a      	add	r3, sp, #616	; 0x268
 800e406:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800e40a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e40e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e412:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800e416:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e41a:	9309      	str	r3, [sp, #36]	; 0x24
 800e41c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e41e:	ab9a      	add	r3, sp, #616	; 0x268
 800e420:	4413      	add	r3, r2
 800e422:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800e426:	1bbb      	subs	r3, r7, r6
 800e428:	2b00      	cmp	r3, #0
 800e42a:	dc70      	bgt.n	800e50e <__kernel_rem_pio2+0x1f2>
 800e42c:	4652      	mov	r2, sl
 800e42e:	4640      	mov	r0, r8
 800e430:	4649      	mov	r1, r9
 800e432:	f001 f9c9 	bl	800f7c8 <scalbn>
 800e436:	2200      	movs	r2, #0
 800e438:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e43c:	4604      	mov	r4, r0
 800e43e:	460d      	mov	r5, r1
 800e440:	f7f2 f846 	bl	80004d0 <__aeabi_dmul>
 800e444:	f001 f8ac 	bl	800f5a0 <floor>
 800e448:	2200      	movs	r2, #0
 800e44a:	4b79      	ldr	r3, [pc, #484]	; (800e630 <__kernel_rem_pio2+0x314>)
 800e44c:	f7f2 f840 	bl	80004d0 <__aeabi_dmul>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	4620      	mov	r0, r4
 800e456:	4629      	mov	r1, r5
 800e458:	f7f1 fe86 	bl	8000168 <__aeabi_dsub>
 800e45c:	460d      	mov	r5, r1
 800e45e:	4604      	mov	r4, r0
 800e460:	f7f2 fae6 	bl	8000a30 <__aeabi_d2iz>
 800e464:	9004      	str	r0, [sp, #16]
 800e466:	f7f1 ffcd 	bl	8000404 <__aeabi_i2d>
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	4620      	mov	r0, r4
 800e470:	4629      	mov	r1, r5
 800e472:	f7f1 fe79 	bl	8000168 <__aeabi_dsub>
 800e476:	f1ba 0f00 	cmp.w	sl, #0
 800e47a:	4680      	mov	r8, r0
 800e47c:	4689      	mov	r9, r1
 800e47e:	dd6b      	ble.n	800e558 <__kernel_rem_pio2+0x23c>
 800e480:	1e7a      	subs	r2, r7, #1
 800e482:	ab0e      	add	r3, sp, #56	; 0x38
 800e484:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e488:	f1ca 0118 	rsb	r1, sl, #24
 800e48c:	9c04      	ldr	r4, [sp, #16]
 800e48e:	fa40 f301 	asr.w	r3, r0, r1
 800e492:	441c      	add	r4, r3
 800e494:	408b      	lsls	r3, r1
 800e496:	1ac0      	subs	r0, r0, r3
 800e498:	ab0e      	add	r3, sp, #56	; 0x38
 800e49a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e49e:	f1ca 0317 	rsb	r3, sl, #23
 800e4a2:	9404      	str	r4, [sp, #16]
 800e4a4:	fa40 fb03 	asr.w	fp, r0, r3
 800e4a8:	f1bb 0f00 	cmp.w	fp, #0
 800e4ac:	dd62      	ble.n	800e574 <__kernel_rem_pio2+0x258>
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e4b4:	4614      	mov	r4, r2
 800e4b6:	9b04      	ldr	r3, [sp, #16]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	9304      	str	r3, [sp, #16]
 800e4bc:	4297      	cmp	r7, r2
 800e4be:	f300 8088 	bgt.w	800e5d2 <__kernel_rem_pio2+0x2b6>
 800e4c2:	f1ba 0f00 	cmp.w	sl, #0
 800e4c6:	dd07      	ble.n	800e4d8 <__kernel_rem_pio2+0x1bc>
 800e4c8:	f1ba 0f01 	cmp.w	sl, #1
 800e4cc:	f000 8095 	beq.w	800e5fa <__kernel_rem_pio2+0x2de>
 800e4d0:	f1ba 0f02 	cmp.w	sl, #2
 800e4d4:	f000 809b 	beq.w	800e60e <__kernel_rem_pio2+0x2f2>
 800e4d8:	f1bb 0f02 	cmp.w	fp, #2
 800e4dc:	d14a      	bne.n	800e574 <__kernel_rem_pio2+0x258>
 800e4de:	4642      	mov	r2, r8
 800e4e0:	464b      	mov	r3, r9
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	4953      	ldr	r1, [pc, #332]	; (800e634 <__kernel_rem_pio2+0x318>)
 800e4e6:	f7f1 fe3f 	bl	8000168 <__aeabi_dsub>
 800e4ea:	4680      	mov	r8, r0
 800e4ec:	4689      	mov	r9, r1
 800e4ee:	2c00      	cmp	r4, #0
 800e4f0:	d040      	beq.n	800e574 <__kernel_rem_pio2+0x258>
 800e4f2:	4652      	mov	r2, sl
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	494f      	ldr	r1, [pc, #316]	; (800e634 <__kernel_rem_pio2+0x318>)
 800e4f8:	f001 f966 	bl	800f7c8 <scalbn>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	460b      	mov	r3, r1
 800e500:	4640      	mov	r0, r8
 800e502:	4649      	mov	r1, r9
 800e504:	f7f1 fe30 	bl	8000168 <__aeabi_dsub>
 800e508:	4680      	mov	r8, r0
 800e50a:	4689      	mov	r9, r1
 800e50c:	e032      	b.n	800e574 <__kernel_rem_pio2+0x258>
 800e50e:	2200      	movs	r2, #0
 800e510:	4b49      	ldr	r3, [pc, #292]	; (800e638 <__kernel_rem_pio2+0x31c>)
 800e512:	4640      	mov	r0, r8
 800e514:	4649      	mov	r1, r9
 800e516:	f7f1 ffdb 	bl	80004d0 <__aeabi_dmul>
 800e51a:	f7f2 fa89 	bl	8000a30 <__aeabi_d2iz>
 800e51e:	f7f1 ff71 	bl	8000404 <__aeabi_i2d>
 800e522:	2200      	movs	r2, #0
 800e524:	4b45      	ldr	r3, [pc, #276]	; (800e63c <__kernel_rem_pio2+0x320>)
 800e526:	4604      	mov	r4, r0
 800e528:	460d      	mov	r5, r1
 800e52a:	f7f1 ffd1 	bl	80004d0 <__aeabi_dmul>
 800e52e:	4602      	mov	r2, r0
 800e530:	460b      	mov	r3, r1
 800e532:	4640      	mov	r0, r8
 800e534:	4649      	mov	r1, r9
 800e536:	f7f1 fe17 	bl	8000168 <__aeabi_dsub>
 800e53a:	f7f2 fa79 	bl	8000a30 <__aeabi_d2iz>
 800e53e:	ab0e      	add	r3, sp, #56	; 0x38
 800e540:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800e544:	4629      	mov	r1, r5
 800e546:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e54a:	4620      	mov	r0, r4
 800e54c:	f7f1 fe0e 	bl	800016c <__adddf3>
 800e550:	3601      	adds	r6, #1
 800e552:	4680      	mov	r8, r0
 800e554:	4689      	mov	r9, r1
 800e556:	e766      	b.n	800e426 <__kernel_rem_pio2+0x10a>
 800e558:	d106      	bne.n	800e568 <__kernel_rem_pio2+0x24c>
 800e55a:	1e7b      	subs	r3, r7, #1
 800e55c:	aa0e      	add	r2, sp, #56	; 0x38
 800e55e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e562:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e566:	e79f      	b.n	800e4a8 <__kernel_rem_pio2+0x18c>
 800e568:	2200      	movs	r2, #0
 800e56a:	4b35      	ldr	r3, [pc, #212]	; (800e640 <__kernel_rem_pio2+0x324>)
 800e56c:	f7f2 fa36 	bl	80009dc <__aeabi_dcmpge>
 800e570:	bb60      	cbnz	r0, 800e5cc <__kernel_rem_pio2+0x2b0>
 800e572:	4683      	mov	fp, r0
 800e574:	2200      	movs	r2, #0
 800e576:	2300      	movs	r3, #0
 800e578:	4640      	mov	r0, r8
 800e57a:	4649      	mov	r1, r9
 800e57c:	f7f2 fa10 	bl	80009a0 <__aeabi_dcmpeq>
 800e580:	2800      	cmp	r0, #0
 800e582:	f000 80c4 	beq.w	800e70e <__kernel_rem_pio2+0x3f2>
 800e586:	1e7c      	subs	r4, r7, #1
 800e588:	4623      	mov	r3, r4
 800e58a:	2200      	movs	r2, #0
 800e58c:	9902      	ldr	r1, [sp, #8]
 800e58e:	428b      	cmp	r3, r1
 800e590:	da44      	bge.n	800e61c <__kernel_rem_pio2+0x300>
 800e592:	2a00      	cmp	r2, #0
 800e594:	f040 8088 	bne.w	800e6a8 <__kernel_rem_pio2+0x38c>
 800e598:	2401      	movs	r4, #1
 800e59a:	f06f 0203 	mvn.w	r2, #3
 800e59e:	fb02 f304 	mul.w	r3, r2, r4
 800e5a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e5a4:	58cb      	ldr	r3, [r1, r3]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d03e      	beq.n	800e628 <__kernel_rem_pio2+0x30c>
 800e5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5ac:	aa9a      	add	r2, sp, #616	; 0x268
 800e5ae:	4413      	add	r3, r2
 800e5b0:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800e5b4:	9b06      	ldr	r3, [sp, #24]
 800e5b6:	1c7e      	adds	r6, r7, #1
 800e5b8:	19dd      	adds	r5, r3, r7
 800e5ba:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e5be:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800e5c2:	443c      	add	r4, r7
 800e5c4:	42a6      	cmp	r6, r4
 800e5c6:	dd3d      	ble.n	800e644 <__kernel_rem_pio2+0x328>
 800e5c8:	4627      	mov	r7, r4
 800e5ca:	e71a      	b.n	800e402 <__kernel_rem_pio2+0xe6>
 800e5cc:	f04f 0b02 	mov.w	fp, #2
 800e5d0:	e76d      	b.n	800e4ae <__kernel_rem_pio2+0x192>
 800e5d2:	ab0e      	add	r3, sp, #56	; 0x38
 800e5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5d8:	b94c      	cbnz	r4, 800e5ee <__kernel_rem_pio2+0x2d2>
 800e5da:	b12b      	cbz	r3, 800e5e8 <__kernel_rem_pio2+0x2cc>
 800e5dc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e5e0:	a80e      	add	r0, sp, #56	; 0x38
 800e5e2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	3201      	adds	r2, #1
 800e5ea:	461c      	mov	r4, r3
 800e5ec:	e766      	b.n	800e4bc <__kernel_rem_pio2+0x1a0>
 800e5ee:	1acb      	subs	r3, r1, r3
 800e5f0:	a80e      	add	r0, sp, #56	; 0x38
 800e5f2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e5f6:	4623      	mov	r3, r4
 800e5f8:	e7f6      	b.n	800e5e8 <__kernel_rem_pio2+0x2cc>
 800e5fa:	1e7a      	subs	r2, r7, #1
 800e5fc:	ab0e      	add	r3, sp, #56	; 0x38
 800e5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e602:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e606:	a90e      	add	r1, sp, #56	; 0x38
 800e608:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e60c:	e764      	b.n	800e4d8 <__kernel_rem_pio2+0x1bc>
 800e60e:	1e7a      	subs	r2, r7, #1
 800e610:	ab0e      	add	r3, sp, #56	; 0x38
 800e612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e616:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e61a:	e7f4      	b.n	800e606 <__kernel_rem_pio2+0x2ea>
 800e61c:	a90e      	add	r1, sp, #56	; 0x38
 800e61e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e622:	3b01      	subs	r3, #1
 800e624:	430a      	orrs	r2, r1
 800e626:	e7b1      	b.n	800e58c <__kernel_rem_pio2+0x270>
 800e628:	3401      	adds	r4, #1
 800e62a:	e7b8      	b.n	800e59e <__kernel_rem_pio2+0x282>
 800e62c:	08010d88 	.word	0x08010d88
 800e630:	40200000 	.word	0x40200000
 800e634:	3ff00000 	.word	0x3ff00000
 800e638:	3e700000 	.word	0x3e700000
 800e63c:	41700000 	.word	0x41700000
 800e640:	3fe00000 	.word	0x3fe00000
 800e644:	f105 0308 	add.w	r3, r5, #8
 800e648:	930b      	str	r3, [sp, #44]	; 0x2c
 800e64a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e64c:	2700      	movs	r7, #0
 800e64e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e652:	f7f1 fed7 	bl	8000404 <__aeabi_i2d>
 800e656:	f04f 0800 	mov.w	r8, #0
 800e65a:	f04f 0900 	mov.w	r9, #0
 800e65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e660:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e664:	3b08      	subs	r3, #8
 800e666:	9304      	str	r3, [sp, #16]
 800e668:	f105 0310 	add.w	r3, r5, #16
 800e66c:	9309      	str	r3, [sp, #36]	; 0x24
 800e66e:	9b08      	ldr	r3, [sp, #32]
 800e670:	429f      	cmp	r7, r3
 800e672:	dd04      	ble.n	800e67e <__kernel_rem_pio2+0x362>
 800e674:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800e678:	3601      	adds	r6, #1
 800e67a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e67c:	e7a2      	b.n	800e5c4 <__kernel_rem_pio2+0x2a8>
 800e67e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e680:	9d04      	ldr	r5, [sp, #16]
 800e682:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800e686:	9109      	str	r1, [sp, #36]	; 0x24
 800e688:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800e68c:	9504      	str	r5, [sp, #16]
 800e68e:	f7f1 ff1f 	bl	80004d0 <__aeabi_dmul>
 800e692:	4602      	mov	r2, r0
 800e694:	460b      	mov	r3, r1
 800e696:	4640      	mov	r0, r8
 800e698:	4649      	mov	r1, r9
 800e69a:	f7f1 fd67 	bl	800016c <__adddf3>
 800e69e:	3701      	adds	r7, #1
 800e6a0:	4680      	mov	r8, r0
 800e6a2:	4689      	mov	r9, r1
 800e6a4:	e7e3      	b.n	800e66e <__kernel_rem_pio2+0x352>
 800e6a6:	3c01      	subs	r4, #1
 800e6a8:	ab0e      	add	r3, sp, #56	; 0x38
 800e6aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e6ae:	f1aa 0a18 	sub.w	sl, sl, #24
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d0f7      	beq.n	800e6a6 <__kernel_rem_pio2+0x38a>
 800e6b6:	4652      	mov	r2, sl
 800e6b8:	2000      	movs	r0, #0
 800e6ba:	49b5      	ldr	r1, [pc, #724]	; (800e990 <__kernel_rem_pio2+0x674>)
 800e6bc:	f001 f884 	bl	800f7c8 <scalbn>
 800e6c0:	4625      	mov	r5, r4
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	460f      	mov	r7, r1
 800e6c6:	f04f 0900 	mov.w	r9, #0
 800e6ca:	00e3      	lsls	r3, r4, #3
 800e6cc:	aa9a      	add	r2, sp, #616	; 0x268
 800e6ce:	eb02 0803 	add.w	r8, r2, r3
 800e6d2:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 800e998 <__kernel_rem_pio2+0x67c>
 800e6d6:	9308      	str	r3, [sp, #32]
 800e6d8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800e6dc:	2d00      	cmp	r5, #0
 800e6de:	da4c      	bge.n	800e77a <__kernel_rem_pio2+0x45e>
 800e6e0:	2500      	movs	r5, #0
 800e6e2:	f104 5800 	add.w	r8, r4, #536870912	; 0x20000000
 800e6e6:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 800e6ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6ee:	1b63      	subs	r3, r4, r5
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	db71      	blt.n	800e7d8 <__kernel_rem_pio2+0x4bc>
 800e6f4:	ab72      	add	r3, sp, #456	; 0x1c8
 800e6f6:	eba8 0705 	sub.w	r7, r8, r5
 800e6fa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e6fe:	2200      	movs	r2, #0
 800e700:	2300      	movs	r3, #0
 800e702:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e99c <__kernel_rem_pio2+0x680>
 800e706:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e70a:	2600      	movs	r6, #0
 800e70c:	e059      	b.n	800e7c2 <__kernel_rem_pio2+0x4a6>
 800e70e:	f1ca 0200 	rsb	r2, sl, #0
 800e712:	4640      	mov	r0, r8
 800e714:	4649      	mov	r1, r9
 800e716:	f001 f857 	bl	800f7c8 <scalbn>
 800e71a:	2200      	movs	r2, #0
 800e71c:	4b9d      	ldr	r3, [pc, #628]	; (800e994 <__kernel_rem_pio2+0x678>)
 800e71e:	4604      	mov	r4, r0
 800e720:	460d      	mov	r5, r1
 800e722:	f7f2 f95b 	bl	80009dc <__aeabi_dcmpge>
 800e726:	b1f8      	cbz	r0, 800e768 <__kernel_rem_pio2+0x44c>
 800e728:	2200      	movs	r2, #0
 800e72a:	4b9b      	ldr	r3, [pc, #620]	; (800e998 <__kernel_rem_pio2+0x67c>)
 800e72c:	4620      	mov	r0, r4
 800e72e:	4629      	mov	r1, r5
 800e730:	f7f1 fece 	bl	80004d0 <__aeabi_dmul>
 800e734:	f7f2 f97c 	bl	8000a30 <__aeabi_d2iz>
 800e738:	4606      	mov	r6, r0
 800e73a:	f7f1 fe63 	bl	8000404 <__aeabi_i2d>
 800e73e:	2200      	movs	r2, #0
 800e740:	4b94      	ldr	r3, [pc, #592]	; (800e994 <__kernel_rem_pio2+0x678>)
 800e742:	f7f1 fec5 	bl	80004d0 <__aeabi_dmul>
 800e746:	460b      	mov	r3, r1
 800e748:	4602      	mov	r2, r0
 800e74a:	4629      	mov	r1, r5
 800e74c:	4620      	mov	r0, r4
 800e74e:	f7f1 fd0b 	bl	8000168 <__aeabi_dsub>
 800e752:	f7f2 f96d 	bl	8000a30 <__aeabi_d2iz>
 800e756:	1c7c      	adds	r4, r7, #1
 800e758:	ab0e      	add	r3, sp, #56	; 0x38
 800e75a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e75e:	f10a 0a18 	add.w	sl, sl, #24
 800e762:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800e766:	e7a6      	b.n	800e6b6 <__kernel_rem_pio2+0x39a>
 800e768:	4620      	mov	r0, r4
 800e76a:	4629      	mov	r1, r5
 800e76c:	f7f2 f960 	bl	8000a30 <__aeabi_d2iz>
 800e770:	ab0e      	add	r3, sp, #56	; 0x38
 800e772:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e776:	463c      	mov	r4, r7
 800e778:	e79d      	b.n	800e6b6 <__kernel_rem_pio2+0x39a>
 800e77a:	ab0e      	add	r3, sp, #56	; 0x38
 800e77c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e780:	f7f1 fe40 	bl	8000404 <__aeabi_i2d>
 800e784:	4632      	mov	r2, r6
 800e786:	463b      	mov	r3, r7
 800e788:	f7f1 fea2 	bl	80004d0 <__aeabi_dmul>
 800e78c:	464a      	mov	r2, r9
 800e78e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e792:	4653      	mov	r3, sl
 800e794:	4630      	mov	r0, r6
 800e796:	4639      	mov	r1, r7
 800e798:	f7f1 fe9a 	bl	80004d0 <__aeabi_dmul>
 800e79c:	3d01      	subs	r5, #1
 800e79e:	4606      	mov	r6, r0
 800e7a0:	460f      	mov	r7, r1
 800e7a2:	e79b      	b.n	800e6dc <__kernel_rem_pio2+0x3c0>
 800e7a4:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 800e7a8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800e7ac:	f7f1 fe90 	bl	80004d0 <__aeabi_dmul>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7b8:	f7f1 fcd8 	bl	800016c <__adddf3>
 800e7bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e7c0:	3601      	adds	r6, #1
 800e7c2:	9b02      	ldr	r3, [sp, #8]
 800e7c4:	429e      	cmp	r6, r3
 800e7c6:	dc01      	bgt.n	800e7cc <__kernel_rem_pio2+0x4b0>
 800e7c8:	42ae      	cmp	r6, r5
 800e7ca:	ddeb      	ble.n	800e7a4 <__kernel_rem_pio2+0x488>
 800e7cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e7d0:	3501      	adds	r5, #1
 800e7d2:	e9ea 2302 	strd	r2, r3, [sl, #8]!
 800e7d6:	e78a      	b.n	800e6ee <__kernel_rem_pio2+0x3d2>
 800e7d8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e7da:	2b03      	cmp	r3, #3
 800e7dc:	d86c      	bhi.n	800e8b8 <__kernel_rem_pio2+0x59c>
 800e7de:	e8df f003 	tbb	[pc, r3]
 800e7e2:	2c58      	.short	0x2c58
 800e7e4:	022c      	.short	0x022c
 800e7e6:	9a08      	ldr	r2, [sp, #32]
 800e7e8:	ab4a      	add	r3, sp, #296	; 0x128
 800e7ea:	189d      	adds	r5, r3, r2
 800e7ec:	46aa      	mov	sl, r5
 800e7ee:	4626      	mov	r6, r4
 800e7f0:	2e00      	cmp	r6, #0
 800e7f2:	f300 8088 	bgt.w	800e906 <__kernel_rem_pio2+0x5ea>
 800e7f6:	46a2      	mov	sl, r4
 800e7f8:	f1ba 0f01 	cmp.w	sl, #1
 800e7fc:	f300 80a1 	bgt.w	800e942 <__kernel_rem_pio2+0x626>
 800e800:	2700      	movs	r7, #0
 800e802:	463e      	mov	r6, r7
 800e804:	9d08      	ldr	r5, [sp, #32]
 800e806:	ab4a      	add	r3, sp, #296	; 0x128
 800e808:	3508      	adds	r5, #8
 800e80a:	441d      	add	r5, r3
 800e80c:	2c01      	cmp	r4, #1
 800e80e:	f300 80b5 	bgt.w	800e97c <__kernel_rem_pio2+0x660>
 800e812:	f1bb 0f00 	cmp.w	fp, #0
 800e816:	f040 80c3 	bne.w	800e9a0 <__kernel_rem_pio2+0x684>
 800e81a:	9901      	ldr	r1, [sp, #4]
 800e81c:	ab4a      	add	r3, sp, #296	; 0x128
 800e81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e822:	e9c1 2300 	strd	r2, r3, [r1]
 800e826:	ab4c      	add	r3, sp, #304	; 0x130
 800e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800e830:	463a      	mov	r2, r7
 800e832:	4633      	mov	r3, r6
 800e834:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800e838:	e03e      	b.n	800e8b8 <__kernel_rem_pio2+0x59c>
 800e83a:	f04f 0e00 	mov.w	lr, #0
 800e83e:	4626      	mov	r6, r4
 800e840:	4677      	mov	r7, lr
 800e842:	9d08      	ldr	r5, [sp, #32]
 800e844:	ab4a      	add	r3, sp, #296	; 0x128
 800e846:	3508      	adds	r5, #8
 800e848:	441d      	add	r5, r3
 800e84a:	2e00      	cmp	r6, #0
 800e84c:	da45      	bge.n	800e8da <__kernel_rem_pio2+0x5be>
 800e84e:	f1bb 0f00 	cmp.w	fp, #0
 800e852:	d04c      	beq.n	800e8ee <__kernel_rem_pio2+0x5d2>
 800e854:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800e858:	4672      	mov	r2, lr
 800e85a:	460b      	mov	r3, r1
 800e85c:	9901      	ldr	r1, [sp, #4]
 800e85e:	2601      	movs	r6, #1
 800e860:	e9c1 2300 	strd	r2, r3, [r1]
 800e864:	a94a      	add	r1, sp, #296	; 0x128
 800e866:	4672      	mov	r2, lr
 800e868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e86c:	463b      	mov	r3, r7
 800e86e:	f7f1 fc7b 	bl	8000168 <__aeabi_dsub>
 800e872:	4686      	mov	lr, r0
 800e874:	460f      	mov	r7, r1
 800e876:	ad4a      	add	r5, sp, #296	; 0x128
 800e878:	42b4      	cmp	r4, r6
 800e87a:	da3a      	bge.n	800e8f2 <__kernel_rem_pio2+0x5d6>
 800e87c:	f1bb 0f00 	cmp.w	fp, #0
 800e880:	d001      	beq.n	800e886 <__kernel_rem_pio2+0x56a>
 800e882:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800e886:	4672      	mov	r2, lr
 800e888:	463b      	mov	r3, r7
 800e88a:	9901      	ldr	r1, [sp, #4]
 800e88c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800e890:	e012      	b.n	800e8b8 <__kernel_rem_pio2+0x59c>
 800e892:	2700      	movs	r7, #0
 800e894:	463d      	mov	r5, r7
 800e896:	9b08      	ldr	r3, [sp, #32]
 800e898:	aa9a      	add	r2, sp, #616	; 0x268
 800e89a:	4413      	add	r3, r2
 800e89c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800e8a0:	2c00      	cmp	r4, #0
 800e8a2:	da10      	bge.n	800e8c6 <__kernel_rem_pio2+0x5aa>
 800e8a4:	f1bb 0f00 	cmp.w	fp, #0
 800e8a8:	d001      	beq.n	800e8ae <__kernel_rem_pio2+0x592>
 800e8aa:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800e8ae:	463a      	mov	r2, r7
 800e8b0:	462b      	mov	r3, r5
 800e8b2:	9901      	ldr	r1, [sp, #4]
 800e8b4:	e9c1 2300 	strd	r2, r3, [r1]
 800e8b8:	9b04      	ldr	r3, [sp, #16]
 800e8ba:	f003 0007 	and.w	r0, r3, #7
 800e8be:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c6:	4638      	mov	r0, r7
 800e8c8:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	f7f1 fc4d 	bl	800016c <__adddf3>
 800e8d2:	3c01      	subs	r4, #1
 800e8d4:	4607      	mov	r7, r0
 800e8d6:	460d      	mov	r5, r1
 800e8d8:	e7e2      	b.n	800e8a0 <__kernel_rem_pio2+0x584>
 800e8da:	4670      	mov	r0, lr
 800e8dc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e8e0:	4639      	mov	r1, r7
 800e8e2:	f7f1 fc43 	bl	800016c <__adddf3>
 800e8e6:	3e01      	subs	r6, #1
 800e8e8:	4686      	mov	lr, r0
 800e8ea:	460f      	mov	r7, r1
 800e8ec:	e7ad      	b.n	800e84a <__kernel_rem_pio2+0x52e>
 800e8ee:	4639      	mov	r1, r7
 800e8f0:	e7b2      	b.n	800e858 <__kernel_rem_pio2+0x53c>
 800e8f2:	4670      	mov	r0, lr
 800e8f4:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800e8f8:	4639      	mov	r1, r7
 800e8fa:	f7f1 fc37 	bl	800016c <__adddf3>
 800e8fe:	3601      	adds	r6, #1
 800e900:	4686      	mov	lr, r0
 800e902:	460f      	mov	r7, r1
 800e904:	e7b8      	b.n	800e878 <__kernel_rem_pio2+0x55c>
 800e906:	e9da 2300 	ldrd	r2, r3, [sl]
 800e90a:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800e90e:	4640      	mov	r0, r8
 800e910:	4649      	mov	r1, r9
 800e912:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e916:	f7f1 fc29 	bl	800016c <__adddf3>
 800e91a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e91e:	4602      	mov	r2, r0
 800e920:	460b      	mov	r3, r1
 800e922:	4640      	mov	r0, r8
 800e924:	4649      	mov	r1, r9
 800e926:	f7f1 fc1f 	bl	8000168 <__aeabi_dsub>
 800e92a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e92e:	f7f1 fc1d 	bl	800016c <__adddf3>
 800e932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e936:	e9ca 0100 	strd	r0, r1, [sl]
 800e93a:	3e01      	subs	r6, #1
 800e93c:	e96a 2302 	strd	r2, r3, [sl, #-8]!
 800e940:	e756      	b.n	800e7f0 <__kernel_rem_pio2+0x4d4>
 800e942:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e946:	e955 6702 	ldrd	r6, r7, [r5, #-8]
 800e94a:	4630      	mov	r0, r6
 800e94c:	4639      	mov	r1, r7
 800e94e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e952:	f7f1 fc0b 	bl	800016c <__adddf3>
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	4680      	mov	r8, r0
 800e95c:	4689      	mov	r9, r1
 800e95e:	4630      	mov	r0, r6
 800e960:	4639      	mov	r1, r7
 800e962:	f7f1 fc01 	bl	8000168 <__aeabi_dsub>
 800e966:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e96a:	f7f1 fbff 	bl	800016c <__adddf3>
 800e96e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e972:	e9c5 0100 	strd	r0, r1, [r5]
 800e976:	e965 8902 	strd	r8, r9, [r5, #-8]!
 800e97a:	e73d      	b.n	800e7f8 <__kernel_rem_pio2+0x4dc>
 800e97c:	4638      	mov	r0, r7
 800e97e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e982:	4631      	mov	r1, r6
 800e984:	f7f1 fbf2 	bl	800016c <__adddf3>
 800e988:	3c01      	subs	r4, #1
 800e98a:	4607      	mov	r7, r0
 800e98c:	460e      	mov	r6, r1
 800e98e:	e73d      	b.n	800e80c <__kernel_rem_pio2+0x4f0>
 800e990:	3ff00000 	.word	0x3ff00000
 800e994:	41700000 	.word	0x41700000
 800e998:	3e700000 	.word	0x3e700000
 800e99c:	08010d40 	.word	0x08010d40
 800e9a0:	9a01      	ldr	r2, [sp, #4]
 800e9a2:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800e9a4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e9a8:	6013      	str	r3, [r2, #0]
 800e9aa:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800e9ac:	6117      	str	r7, [r2, #16]
 800e9ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e9b2:	6053      	str	r3, [r2, #4]
 800e9b4:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800e9b6:	6156      	str	r6, [r2, #20]
 800e9b8:	6093      	str	r3, [r2, #8]
 800e9ba:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 800e9bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e9c0:	60d3      	str	r3, [r2, #12]
 800e9c2:	e779      	b.n	800e8b8 <__kernel_rem_pio2+0x59c>
 800e9c4:	0000      	movs	r0, r0
	...

0800e9c8 <__kernel_sin>:
 800e9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9cc:	b086      	sub	sp, #24
 800e9ce:	e9cd 2300 	strd	r2, r3, [sp]
 800e9d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e9d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e9da:	4682      	mov	sl, r0
 800e9dc:	460c      	mov	r4, r1
 800e9de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e9e0:	da03      	bge.n	800e9ea <__kernel_sin+0x22>
 800e9e2:	f7f2 f825 	bl	8000a30 <__aeabi_d2iz>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	d050      	beq.n	800ea8c <__kernel_sin+0xc4>
 800e9ea:	4652      	mov	r2, sl
 800e9ec:	4623      	mov	r3, r4
 800e9ee:	4650      	mov	r0, sl
 800e9f0:	4621      	mov	r1, r4
 800e9f2:	f7f1 fd6d 	bl	80004d0 <__aeabi_dmul>
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	460f      	mov	r7, r1
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	4650      	mov	r0, sl
 800ea00:	4621      	mov	r1, r4
 800ea02:	f7f1 fd65 	bl	80004d0 <__aeabi_dmul>
 800ea06:	a33e      	add	r3, pc, #248	; (adr r3, 800eb00 <__kernel_sin+0x138>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	4680      	mov	r8, r0
 800ea0e:	4689      	mov	r9, r1
 800ea10:	4630      	mov	r0, r6
 800ea12:	4639      	mov	r1, r7
 800ea14:	f7f1 fd5c 	bl	80004d0 <__aeabi_dmul>
 800ea18:	a33b      	add	r3, pc, #236	; (adr r3, 800eb08 <__kernel_sin+0x140>)
 800ea1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1e:	f7f1 fba3 	bl	8000168 <__aeabi_dsub>
 800ea22:	4632      	mov	r2, r6
 800ea24:	463b      	mov	r3, r7
 800ea26:	f7f1 fd53 	bl	80004d0 <__aeabi_dmul>
 800ea2a:	a339      	add	r3, pc, #228	; (adr r3, 800eb10 <__kernel_sin+0x148>)
 800ea2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea30:	f7f1 fb9c 	bl	800016c <__adddf3>
 800ea34:	4632      	mov	r2, r6
 800ea36:	463b      	mov	r3, r7
 800ea38:	f7f1 fd4a 	bl	80004d0 <__aeabi_dmul>
 800ea3c:	a336      	add	r3, pc, #216	; (adr r3, 800eb18 <__kernel_sin+0x150>)
 800ea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea42:	f7f1 fb91 	bl	8000168 <__aeabi_dsub>
 800ea46:	4632      	mov	r2, r6
 800ea48:	463b      	mov	r3, r7
 800ea4a:	f7f1 fd41 	bl	80004d0 <__aeabi_dmul>
 800ea4e:	a334      	add	r3, pc, #208	; (adr r3, 800eb20 <__kernel_sin+0x158>)
 800ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea54:	f7f1 fb8a 	bl	800016c <__adddf3>
 800ea58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea5c:	b9dd      	cbnz	r5, 800ea96 <__kernel_sin+0xce>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	460b      	mov	r3, r1
 800ea62:	4630      	mov	r0, r6
 800ea64:	4639      	mov	r1, r7
 800ea66:	f7f1 fd33 	bl	80004d0 <__aeabi_dmul>
 800ea6a:	a32f      	add	r3, pc, #188	; (adr r3, 800eb28 <__kernel_sin+0x160>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	f7f1 fb7a 	bl	8000168 <__aeabi_dsub>
 800ea74:	4642      	mov	r2, r8
 800ea76:	464b      	mov	r3, r9
 800ea78:	f7f1 fd2a 	bl	80004d0 <__aeabi_dmul>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4650      	mov	r0, sl
 800ea82:	4621      	mov	r1, r4
 800ea84:	f7f1 fb72 	bl	800016c <__adddf3>
 800ea88:	4682      	mov	sl, r0
 800ea8a:	460c      	mov	r4, r1
 800ea8c:	4650      	mov	r0, sl
 800ea8e:	4621      	mov	r1, r4
 800ea90:	b006      	add	sp, #24
 800ea92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea96:	2200      	movs	r2, #0
 800ea98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea9c:	4b24      	ldr	r3, [pc, #144]	; (800eb30 <__kernel_sin+0x168>)
 800ea9e:	f7f1 fd17 	bl	80004d0 <__aeabi_dmul>
 800eaa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eaa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eaaa:	4640      	mov	r0, r8
 800eaac:	4649      	mov	r1, r9
 800eaae:	f7f1 fd0f 	bl	80004d0 <__aeabi_dmul>
 800eab2:	4602      	mov	r2, r0
 800eab4:	460b      	mov	r3, r1
 800eab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eaba:	f7f1 fb55 	bl	8000168 <__aeabi_dsub>
 800eabe:	4632      	mov	r2, r6
 800eac0:	463b      	mov	r3, r7
 800eac2:	f7f1 fd05 	bl	80004d0 <__aeabi_dmul>
 800eac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eaca:	f7f1 fb4d 	bl	8000168 <__aeabi_dsub>
 800eace:	a316      	add	r3, pc, #88	; (adr r3, 800eb28 <__kernel_sin+0x160>)
 800ead0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead4:	4606      	mov	r6, r0
 800ead6:	460f      	mov	r7, r1
 800ead8:	4640      	mov	r0, r8
 800eada:	4649      	mov	r1, r9
 800eadc:	f7f1 fcf8 	bl	80004d0 <__aeabi_dmul>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	4630      	mov	r0, r6
 800eae6:	4639      	mov	r1, r7
 800eae8:	f7f1 fb40 	bl	800016c <__adddf3>
 800eaec:	4602      	mov	r2, r0
 800eaee:	460b      	mov	r3, r1
 800eaf0:	4650      	mov	r0, sl
 800eaf2:	4621      	mov	r1, r4
 800eaf4:	f7f1 fb38 	bl	8000168 <__aeabi_dsub>
 800eaf8:	e7c6      	b.n	800ea88 <__kernel_sin+0xc0>
 800eafa:	bf00      	nop
 800eafc:	f3af 8000 	nop.w
 800eb00:	5acfd57c 	.word	0x5acfd57c
 800eb04:	3de5d93a 	.word	0x3de5d93a
 800eb08:	8a2b9ceb 	.word	0x8a2b9ceb
 800eb0c:	3e5ae5e6 	.word	0x3e5ae5e6
 800eb10:	57b1fe7d 	.word	0x57b1fe7d
 800eb14:	3ec71de3 	.word	0x3ec71de3
 800eb18:	19c161d5 	.word	0x19c161d5
 800eb1c:	3f2a01a0 	.word	0x3f2a01a0
 800eb20:	1110f8a6 	.word	0x1110f8a6
 800eb24:	3f811111 	.word	0x3f811111
 800eb28:	55555549 	.word	0x55555549
 800eb2c:	3fc55555 	.word	0x3fc55555
 800eb30:	3fe00000 	.word	0x3fe00000

0800eb34 <__kernel_cosf>:
 800eb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb38:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800eb3c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800eb40:	4606      	mov	r6, r0
 800eb42:	460f      	mov	r7, r1
 800eb44:	da03      	bge.n	800eb4e <__kernel_cosf+0x1a>
 800eb46:	f7f2 fad5 	bl	80010f4 <__aeabi_f2iz>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	d070      	beq.n	800ec30 <__kernel_cosf+0xfc>
 800eb4e:	4631      	mov	r1, r6
 800eb50:	4630      	mov	r0, r6
 800eb52:	f7f2 f8f3 	bl	8000d3c <__aeabi_fmul>
 800eb56:	4605      	mov	r5, r0
 800eb58:	4937      	ldr	r1, [pc, #220]	; (800ec38 <__kernel_cosf+0x104>)
 800eb5a:	f7f2 f8ef 	bl	8000d3c <__aeabi_fmul>
 800eb5e:	4937      	ldr	r1, [pc, #220]	; (800ec3c <__kernel_cosf+0x108>)
 800eb60:	f7f1 ffe4 	bl	8000b2c <__addsf3>
 800eb64:	4629      	mov	r1, r5
 800eb66:	f7f2 f8e9 	bl	8000d3c <__aeabi_fmul>
 800eb6a:	4935      	ldr	r1, [pc, #212]	; (800ec40 <__kernel_cosf+0x10c>)
 800eb6c:	f7f1 ffdc 	bl	8000b28 <__aeabi_fsub>
 800eb70:	4629      	mov	r1, r5
 800eb72:	f7f2 f8e3 	bl	8000d3c <__aeabi_fmul>
 800eb76:	4933      	ldr	r1, [pc, #204]	; (800ec44 <__kernel_cosf+0x110>)
 800eb78:	f7f1 ffd8 	bl	8000b2c <__addsf3>
 800eb7c:	4629      	mov	r1, r5
 800eb7e:	f7f2 f8dd 	bl	8000d3c <__aeabi_fmul>
 800eb82:	4931      	ldr	r1, [pc, #196]	; (800ec48 <__kernel_cosf+0x114>)
 800eb84:	f7f1 ffd0 	bl	8000b28 <__aeabi_fsub>
 800eb88:	4629      	mov	r1, r5
 800eb8a:	f7f2 f8d7 	bl	8000d3c <__aeabi_fmul>
 800eb8e:	492f      	ldr	r1, [pc, #188]	; (800ec4c <__kernel_cosf+0x118>)
 800eb90:	f7f1 ffcc 	bl	8000b2c <__addsf3>
 800eb94:	4629      	mov	r1, r5
 800eb96:	f7f2 f8d1 	bl	8000d3c <__aeabi_fmul>
 800eb9a:	4b2d      	ldr	r3, [pc, #180]	; (800ec50 <__kernel_cosf+0x11c>)
 800eb9c:	4680      	mov	r8, r0
 800eb9e:	429c      	cmp	r4, r3
 800eba0:	dc1d      	bgt.n	800ebde <__kernel_cosf+0xaa>
 800eba2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800eba6:	4628      	mov	r0, r5
 800eba8:	f7f2 f8c8 	bl	8000d3c <__aeabi_fmul>
 800ebac:	4641      	mov	r1, r8
 800ebae:	4604      	mov	r4, r0
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	f7f2 f8c3 	bl	8000d3c <__aeabi_fmul>
 800ebb6:	4639      	mov	r1, r7
 800ebb8:	4605      	mov	r5, r0
 800ebba:	4630      	mov	r0, r6
 800ebbc:	f7f2 f8be 	bl	8000d3c <__aeabi_fmul>
 800ebc0:	4601      	mov	r1, r0
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	f7f1 ffb0 	bl	8000b28 <__aeabi_fsub>
 800ebc8:	4601      	mov	r1, r0
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f7f1 ffac 	bl	8000b28 <__aeabi_fsub>
 800ebd0:	4601      	mov	r1, r0
 800ebd2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ebd6:	f7f1 ffa7 	bl	8000b28 <__aeabi_fsub>
 800ebda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebde:	4b1d      	ldr	r3, [pc, #116]	; (800ec54 <__kernel_cosf+0x120>)
 800ebe0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ebe4:	429c      	cmp	r4, r3
 800ebe6:	bfcc      	ite	gt
 800ebe8:	4c1b      	ldrgt	r4, [pc, #108]	; (800ec58 <__kernel_cosf+0x124>)
 800ebea:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ebee:	4621      	mov	r1, r4
 800ebf0:	f7f1 ff9a 	bl	8000b28 <__aeabi_fsub>
 800ebf4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ebf8:	4681      	mov	r9, r0
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	f7f2 f89e 	bl	8000d3c <__aeabi_fmul>
 800ec00:	4621      	mov	r1, r4
 800ec02:	f7f1 ff91 	bl	8000b28 <__aeabi_fsub>
 800ec06:	4641      	mov	r1, r8
 800ec08:	4604      	mov	r4, r0
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	f7f2 f896 	bl	8000d3c <__aeabi_fmul>
 800ec10:	4639      	mov	r1, r7
 800ec12:	4605      	mov	r5, r0
 800ec14:	4630      	mov	r0, r6
 800ec16:	f7f2 f891 	bl	8000d3c <__aeabi_fmul>
 800ec1a:	4601      	mov	r1, r0
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	f7f1 ff83 	bl	8000b28 <__aeabi_fsub>
 800ec22:	4601      	mov	r1, r0
 800ec24:	4620      	mov	r0, r4
 800ec26:	f7f1 ff7f 	bl	8000b28 <__aeabi_fsub>
 800ec2a:	4601      	mov	r1, r0
 800ec2c:	4648      	mov	r0, r9
 800ec2e:	e7d2      	b.n	800ebd6 <__kernel_cosf+0xa2>
 800ec30:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ec34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec38:	ad47d74e 	.word	0xad47d74e
 800ec3c:	310f74f6 	.word	0x310f74f6
 800ec40:	3493f27c 	.word	0x3493f27c
 800ec44:	37d00d01 	.word	0x37d00d01
 800ec48:	3ab60b61 	.word	0x3ab60b61
 800ec4c:	3d2aaaab 	.word	0x3d2aaaab
 800ec50:	3e999999 	.word	0x3e999999
 800ec54:	3f480000 	.word	0x3f480000
 800ec58:	3e900000 	.word	0x3e900000

0800ec5c <__kernel_rem_pio2f>:
 800ec5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec60:	b0d9      	sub	sp, #356	; 0x164
 800ec62:	9304      	str	r3, [sp, #16]
 800ec64:	9101      	str	r1, [sp, #4]
 800ec66:	4bb4      	ldr	r3, [pc, #720]	; (800ef38 <__kernel_rem_pio2f+0x2dc>)
 800ec68:	9962      	ldr	r1, [sp, #392]	; 0x188
 800ec6a:	1ed4      	subs	r4, r2, #3
 800ec6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec70:	2500      	movs	r5, #0
 800ec72:	9302      	str	r3, [sp, #8]
 800ec74:	9b04      	ldr	r3, [sp, #16]
 800ec76:	f04f 0b00 	mov.w	fp, #0
 800ec7a:	3b01      	subs	r3, #1
 800ec7c:	9303      	str	r3, [sp, #12]
 800ec7e:	2308      	movs	r3, #8
 800ec80:	fb94 f4f3 	sdiv	r4, r4, r3
 800ec84:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ec88:	1c66      	adds	r6, r4, #1
 800ec8a:	9b02      	ldr	r3, [sp, #8]
 800ec8c:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800ec90:	9a03      	ldr	r2, [sp, #12]
 800ec92:	9005      	str	r0, [sp, #20]
 800ec94:	eb03 0802 	add.w	r8, r3, r2
 800ec98:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800ec9a:	1aa7      	subs	r7, r4, r2
 800ec9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800eca0:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 800eca4:	4545      	cmp	r5, r8
 800eca6:	dd10      	ble.n	800ecca <__kernel_rem_pio2f+0x6e>
 800eca8:	2500      	movs	r5, #0
 800ecaa:	f04f 0b00 	mov.w	fp, #0
 800ecae:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 800ecb2:	9b02      	ldr	r3, [sp, #8]
 800ecb4:	429d      	cmp	r5, r3
 800ecb6:	dc28      	bgt.n	800ed0a <__kernel_rem_pio2f+0xae>
 800ecb8:	9b04      	ldr	r3, [sp, #16]
 800ecba:	46d9      	mov	r9, fp
 800ecbc:	eb03 0805 	add.w	r8, r3, r5
 800ecc0:	ab1c      	add	r3, sp, #112	; 0x70
 800ecc2:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800ecc6:	2700      	movs	r7, #0
 800ecc8:	e018      	b.n	800ecfc <__kernel_rem_pio2f+0xa0>
 800ecca:	42ef      	cmn	r7, r5
 800eccc:	d407      	bmi.n	800ecde <__kernel_rem_pio2f+0x82>
 800ecce:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ecd2:	f7f1 ffdf 	bl	8000c94 <__aeabi_i2f>
 800ecd6:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 800ecda:	3501      	adds	r5, #1
 800ecdc:	e7e2      	b.n	800eca4 <__kernel_rem_pio2f+0x48>
 800ecde:	4658      	mov	r0, fp
 800ece0:	e7f9      	b.n	800ecd6 <__kernel_rem_pio2f+0x7a>
 800ece2:	9b05      	ldr	r3, [sp, #20]
 800ece4:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 800ece8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ecec:	f7f2 f826 	bl	8000d3c <__aeabi_fmul>
 800ecf0:	4601      	mov	r1, r0
 800ecf2:	4648      	mov	r0, r9
 800ecf4:	f7f1 ff1a 	bl	8000b2c <__addsf3>
 800ecf8:	4681      	mov	r9, r0
 800ecfa:	3701      	adds	r7, #1
 800ecfc:	9b03      	ldr	r3, [sp, #12]
 800ecfe:	429f      	cmp	r7, r3
 800ed00:	ddef      	ble.n	800ece2 <__kernel_rem_pio2f+0x86>
 800ed02:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 800ed06:	3501      	adds	r5, #1
 800ed08:	e7d3      	b.n	800ecb2 <__kernel_rem_pio2f+0x56>
 800ed0a:	9b02      	ldr	r3, [sp, #8]
 800ed0c:	aa08      	add	r2, sp, #32
 800ed0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed12:	9307      	str	r3, [sp, #28]
 800ed14:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800ed16:	9f02      	ldr	r7, [sp, #8]
 800ed18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ed1c:	9306      	str	r3, [sp, #24]
 800ed1e:	46ba      	mov	sl, r7
 800ed20:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800ed24:	ab58      	add	r3, sp, #352	; 0x160
 800ed26:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800ed2a:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800ed2e:	ad07      	add	r5, sp, #28
 800ed30:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800ed34:	f1ba 0f00 	cmp.w	sl, #0
 800ed38:	dc57      	bgt.n	800edea <__kernel_rem_pio2f+0x18e>
 800ed3a:	4631      	mov	r1, r6
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	f000 ff05 	bl	800fb4c <scalbnf>
 800ed42:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800ed46:	4604      	mov	r4, r0
 800ed48:	f7f1 fff8 	bl	8000d3c <__aeabi_fmul>
 800ed4c:	f000 febe 	bl	800facc <floorf>
 800ed50:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800ed54:	f7f1 fff2 	bl	8000d3c <__aeabi_fmul>
 800ed58:	4601      	mov	r1, r0
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f7f1 fee4 	bl	8000b28 <__aeabi_fsub>
 800ed60:	4604      	mov	r4, r0
 800ed62:	f7f2 f9c7 	bl	80010f4 <__aeabi_f2iz>
 800ed66:	4680      	mov	r8, r0
 800ed68:	f7f1 ff94 	bl	8000c94 <__aeabi_i2f>
 800ed6c:	4601      	mov	r1, r0
 800ed6e:	4620      	mov	r0, r4
 800ed70:	f7f1 feda 	bl	8000b28 <__aeabi_fsub>
 800ed74:	2e00      	cmp	r6, #0
 800ed76:	4604      	mov	r4, r0
 800ed78:	dd55      	ble.n	800ee26 <__kernel_rem_pio2f+0x1ca>
 800ed7a:	1e7b      	subs	r3, r7, #1
 800ed7c:	aa08      	add	r2, sp, #32
 800ed7e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800ed82:	f1c6 0208 	rsb	r2, r6, #8
 800ed86:	fa45 f002 	asr.w	r0, r5, r2
 800ed8a:	4480      	add	r8, r0
 800ed8c:	4090      	lsls	r0, r2
 800ed8e:	1a2d      	subs	r5, r5, r0
 800ed90:	aa08      	add	r2, sp, #32
 800ed92:	f1c6 0007 	rsb	r0, r6, #7
 800ed96:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800ed9a:	4105      	asrs	r5, r0
 800ed9c:	2d00      	cmp	r5, #0
 800ed9e:	dd50      	ble.n	800ee42 <__kernel_rem_pio2f+0x1e6>
 800eda0:	2200      	movs	r2, #0
 800eda2:	4691      	mov	r9, r2
 800eda4:	f108 0801 	add.w	r8, r8, #1
 800eda8:	4297      	cmp	r7, r2
 800edaa:	f300 8085 	bgt.w	800eeb8 <__kernel_rem_pio2f+0x25c>
 800edae:	2e00      	cmp	r6, #0
 800edb0:	dd05      	ble.n	800edbe <__kernel_rem_pio2f+0x162>
 800edb2:	2e01      	cmp	r6, #1
 800edb4:	f000 8097 	beq.w	800eee6 <__kernel_rem_pio2f+0x28a>
 800edb8:	2e02      	cmp	r6, #2
 800edba:	f000 809e 	beq.w	800eefa <__kernel_rem_pio2f+0x29e>
 800edbe:	2d02      	cmp	r5, #2
 800edc0:	d13f      	bne.n	800ee42 <__kernel_rem_pio2f+0x1e6>
 800edc2:	4621      	mov	r1, r4
 800edc4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800edc8:	f7f1 feae 	bl	8000b28 <__aeabi_fsub>
 800edcc:	4604      	mov	r4, r0
 800edce:	f1b9 0f00 	cmp.w	r9, #0
 800edd2:	d036      	beq.n	800ee42 <__kernel_rem_pio2f+0x1e6>
 800edd4:	4631      	mov	r1, r6
 800edd6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800edda:	f000 feb7 	bl	800fb4c <scalbnf>
 800edde:	4601      	mov	r1, r0
 800ede0:	4620      	mov	r0, r4
 800ede2:	f7f1 fea1 	bl	8000b28 <__aeabi_fsub>
 800ede6:	4604      	mov	r4, r0
 800ede8:	e02b      	b.n	800ee42 <__kernel_rem_pio2f+0x1e6>
 800edea:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800edee:	4620      	mov	r0, r4
 800edf0:	f7f1 ffa4 	bl	8000d3c <__aeabi_fmul>
 800edf4:	f7f2 f97e 	bl	80010f4 <__aeabi_f2iz>
 800edf8:	f7f1 ff4c 	bl	8000c94 <__aeabi_i2f>
 800edfc:	4641      	mov	r1, r8
 800edfe:	4683      	mov	fp, r0
 800ee00:	f7f1 ff9c 	bl	8000d3c <__aeabi_fmul>
 800ee04:	4601      	mov	r1, r0
 800ee06:	4620      	mov	r0, r4
 800ee08:	f7f1 fe8e 	bl	8000b28 <__aeabi_fsub>
 800ee0c:	f7f2 f972 	bl	80010f4 <__aeabi_f2iz>
 800ee10:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee14:	f845 0f04 	str.w	r0, [r5, #4]!
 800ee18:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800ee1c:	4658      	mov	r0, fp
 800ee1e:	f7f1 fe85 	bl	8000b2c <__addsf3>
 800ee22:	4604      	mov	r4, r0
 800ee24:	e786      	b.n	800ed34 <__kernel_rem_pio2f+0xd8>
 800ee26:	d105      	bne.n	800ee34 <__kernel_rem_pio2f+0x1d8>
 800ee28:	1e7b      	subs	r3, r7, #1
 800ee2a:	aa08      	add	r2, sp, #32
 800ee2c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800ee30:	122d      	asrs	r5, r5, #8
 800ee32:	e7b3      	b.n	800ed9c <__kernel_rem_pio2f+0x140>
 800ee34:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ee38:	f7f2 f932 	bl	80010a0 <__aeabi_fcmpge>
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d139      	bne.n	800eeb4 <__kernel_rem_pio2f+0x258>
 800ee40:	4605      	mov	r5, r0
 800ee42:	2100      	movs	r1, #0
 800ee44:	4620      	mov	r0, r4
 800ee46:	f7f2 f90d 	bl	8001064 <__aeabi_fcmpeq>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	f000 8098 	beq.w	800ef80 <__kernel_rem_pio2f+0x324>
 800ee50:	1e7c      	subs	r4, r7, #1
 800ee52:	4623      	mov	r3, r4
 800ee54:	2200      	movs	r2, #0
 800ee56:	9902      	ldr	r1, [sp, #8]
 800ee58:	428b      	cmp	r3, r1
 800ee5a:	da55      	bge.n	800ef08 <__kernel_rem_pio2f+0x2ac>
 800ee5c:	2a00      	cmp	r2, #0
 800ee5e:	d16e      	bne.n	800ef3e <__kernel_rem_pio2f+0x2e2>
 800ee60:	2301      	movs	r3, #1
 800ee62:	f06f 0103 	mvn.w	r1, #3
 800ee66:	fb01 f203 	mul.w	r2, r1, r3
 800ee6a:	9807      	ldr	r0, [sp, #28]
 800ee6c:	5882      	ldr	r2, [r0, r2]
 800ee6e:	2a00      	cmp	r2, #0
 800ee70:	d050      	beq.n	800ef14 <__kernel_rem_pio2f+0x2b8>
 800ee72:	f06f 0803 	mvn.w	r8, #3
 800ee76:	9a04      	ldr	r2, [sp, #16]
 800ee78:	1c7d      	adds	r5, r7, #1
 800ee7a:	19d4      	adds	r4, r2, r7
 800ee7c:	aa58      	add	r2, sp, #352	; 0x160
 800ee7e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ee82:	3cf4      	subs	r4, #244	; 0xf4
 800ee84:	441f      	add	r7, r3
 800ee86:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800ee8a:	42bd      	cmp	r5, r7
 800ee8c:	f73f af47 	bgt.w	800ed1e <__kernel_rem_pio2f+0xc2>
 800ee90:	9b06      	ldr	r3, [sp, #24]
 800ee92:	f04f 0a00 	mov.w	sl, #0
 800ee96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee9a:	f7f1 fefb 	bl	8000c94 <__aeabi_i2f>
 800ee9e:	f04f 0b00 	mov.w	fp, #0
 800eea2:	f844 0f04 	str.w	r0, [r4, #4]!
 800eea6:	9b03      	ldr	r3, [sp, #12]
 800eea8:	459a      	cmp	sl, r3
 800eeaa:	dd35      	ble.n	800ef18 <__kernel_rem_pio2f+0x2bc>
 800eeac:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800eeb0:	3501      	adds	r5, #1
 800eeb2:	e7ea      	b.n	800ee8a <__kernel_rem_pio2f+0x22e>
 800eeb4:	2502      	movs	r5, #2
 800eeb6:	e773      	b.n	800eda0 <__kernel_rem_pio2f+0x144>
 800eeb8:	ab08      	add	r3, sp, #32
 800eeba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eebe:	f1b9 0f00 	cmp.w	r9, #0
 800eec2:	d109      	bne.n	800eed8 <__kernel_rem_pio2f+0x27c>
 800eec4:	b12b      	cbz	r3, 800eed2 <__kernel_rem_pio2f+0x276>
 800eec6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800eeca:	a908      	add	r1, sp, #32
 800eecc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eed0:	2301      	movs	r3, #1
 800eed2:	3201      	adds	r2, #1
 800eed4:	4699      	mov	r9, r3
 800eed6:	e767      	b.n	800eda8 <__kernel_rem_pio2f+0x14c>
 800eed8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800eedc:	a908      	add	r1, sp, #32
 800eede:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eee2:	464b      	mov	r3, r9
 800eee4:	e7f5      	b.n	800eed2 <__kernel_rem_pio2f+0x276>
 800eee6:	1e7a      	subs	r2, r7, #1
 800eee8:	ab08      	add	r3, sp, #32
 800eeea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eef2:	a908      	add	r1, sp, #32
 800eef4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eef8:	e761      	b.n	800edbe <__kernel_rem_pio2f+0x162>
 800eefa:	1e7a      	subs	r2, r7, #1
 800eefc:	ab08      	add	r3, sp, #32
 800eefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef06:	e7f4      	b.n	800eef2 <__kernel_rem_pio2f+0x296>
 800ef08:	a908      	add	r1, sp, #32
 800ef0a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ef0e:	3b01      	subs	r3, #1
 800ef10:	430a      	orrs	r2, r1
 800ef12:	e7a0      	b.n	800ee56 <__kernel_rem_pio2f+0x1fa>
 800ef14:	3301      	adds	r3, #1
 800ef16:	e7a6      	b.n	800ee66 <__kernel_rem_pio2f+0x20a>
 800ef18:	fb08 f30a 	mul.w	r3, r8, sl
 800ef1c:	9a05      	ldr	r2, [sp, #20]
 800ef1e:	58e0      	ldr	r0, [r4, r3]
 800ef20:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800ef24:	f7f1 ff0a 	bl	8000d3c <__aeabi_fmul>
 800ef28:	4601      	mov	r1, r0
 800ef2a:	4658      	mov	r0, fp
 800ef2c:	f7f1 fdfe 	bl	8000b2c <__addsf3>
 800ef30:	f10a 0a01 	add.w	sl, sl, #1
 800ef34:	4683      	mov	fp, r0
 800ef36:	e7b6      	b.n	800eea6 <__kernel_rem_pio2f+0x24a>
 800ef38:	08010dc4 	.word	0x08010dc4
 800ef3c:	3c01      	subs	r4, #1
 800ef3e:	ab08      	add	r3, sp, #32
 800ef40:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ef44:	3e08      	subs	r6, #8
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d0f8      	beq.n	800ef3c <__kernel_rem_pio2f+0x2e0>
 800ef4a:	4631      	mov	r1, r6
 800ef4c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef50:	f000 fdfc 	bl	800fb4c <scalbnf>
 800ef54:	46a1      	mov	r9, r4
 800ef56:	4682      	mov	sl, r0
 800ef58:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 800ef5c:	ae44      	add	r6, sp, #272	; 0x110
 800ef5e:	f1b9 0f00 	cmp.w	r9, #0
 800ef62:	da3f      	bge.n	800efe4 <__kernel_rem_pio2f+0x388>
 800ef64:	2700      	movs	r7, #0
 800ef66:	f04f 0b00 	mov.w	fp, #0
 800ef6a:	4b82      	ldr	r3, [pc, #520]	; (800f174 <__kernel_rem_pio2f+0x518>)
 800ef6c:	aa30      	add	r2, sp, #192	; 0xc0
 800ef6e:	ebb4 0a07 	subs.w	sl, r4, r7
 800ef72:	d462      	bmi.n	800f03a <__kernel_rem_pio2f+0x3de>
 800ef74:	a944      	add	r1, sp, #272	; 0x110
 800ef76:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 800ef7a:	46d9      	mov	r9, fp
 800ef7c:	2600      	movs	r6, #0
 800ef7e:	e053      	b.n	800f028 <__kernel_rem_pio2f+0x3cc>
 800ef80:	4271      	negs	r1, r6
 800ef82:	4620      	mov	r0, r4
 800ef84:	f000 fde2 	bl	800fb4c <scalbnf>
 800ef88:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	f7f2 f887 	bl	80010a0 <__aeabi_fcmpge>
 800ef92:	b1f8      	cbz	r0, 800efd4 <__kernel_rem_pio2f+0x378>
 800ef94:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800ef98:	4620      	mov	r0, r4
 800ef9a:	f7f1 fecf 	bl	8000d3c <__aeabi_fmul>
 800ef9e:	f7f2 f8a9 	bl	80010f4 <__aeabi_f2iz>
 800efa2:	f7f1 fe77 	bl	8000c94 <__aeabi_i2f>
 800efa6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800efaa:	4681      	mov	r9, r0
 800efac:	f7f1 fec6 	bl	8000d3c <__aeabi_fmul>
 800efb0:	4601      	mov	r1, r0
 800efb2:	4620      	mov	r0, r4
 800efb4:	f7f1 fdb8 	bl	8000b28 <__aeabi_fsub>
 800efb8:	f7f2 f89c 	bl	80010f4 <__aeabi_f2iz>
 800efbc:	ab08      	add	r3, sp, #32
 800efbe:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800efc2:	4648      	mov	r0, r9
 800efc4:	f7f2 f896 	bl	80010f4 <__aeabi_f2iz>
 800efc8:	1c7c      	adds	r4, r7, #1
 800efca:	ab08      	add	r3, sp, #32
 800efcc:	3608      	adds	r6, #8
 800efce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800efd2:	e7ba      	b.n	800ef4a <__kernel_rem_pio2f+0x2ee>
 800efd4:	4620      	mov	r0, r4
 800efd6:	f7f2 f88d 	bl	80010f4 <__aeabi_f2iz>
 800efda:	ab08      	add	r3, sp, #32
 800efdc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800efe0:	463c      	mov	r4, r7
 800efe2:	e7b2      	b.n	800ef4a <__kernel_rem_pio2f+0x2ee>
 800efe4:	ab08      	add	r3, sp, #32
 800efe6:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800efea:	f7f1 fe53 	bl	8000c94 <__aeabi_i2f>
 800efee:	4651      	mov	r1, sl
 800eff0:	f7f1 fea4 	bl	8000d3c <__aeabi_fmul>
 800eff4:	4639      	mov	r1, r7
 800eff6:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 800effa:	4650      	mov	r0, sl
 800effc:	f7f1 fe9e 	bl	8000d3c <__aeabi_fmul>
 800f000:	f109 39ff 	add.w	r9, r9, #4294967295
 800f004:	4682      	mov	sl, r0
 800f006:	e7aa      	b.n	800ef5e <__kernel_rem_pio2f+0x302>
 800f008:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f00c:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 800f010:	9204      	str	r2, [sp, #16]
 800f012:	9303      	str	r3, [sp, #12]
 800f014:	f7f1 fe92 	bl	8000d3c <__aeabi_fmul>
 800f018:	4601      	mov	r1, r0
 800f01a:	4648      	mov	r0, r9
 800f01c:	f7f1 fd86 	bl	8000b2c <__addsf3>
 800f020:	4681      	mov	r9, r0
 800f022:	9a04      	ldr	r2, [sp, #16]
 800f024:	9b03      	ldr	r3, [sp, #12]
 800f026:	3601      	adds	r6, #1
 800f028:	9902      	ldr	r1, [sp, #8]
 800f02a:	428e      	cmp	r6, r1
 800f02c:	dc01      	bgt.n	800f032 <__kernel_rem_pio2f+0x3d6>
 800f02e:	42be      	cmp	r6, r7
 800f030:	ddea      	ble.n	800f008 <__kernel_rem_pio2f+0x3ac>
 800f032:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 800f036:	3701      	adds	r7, #1
 800f038:	e799      	b.n	800ef6e <__kernel_rem_pio2f+0x312>
 800f03a:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800f03c:	2b03      	cmp	r3, #3
 800f03e:	d826      	bhi.n	800f08e <__kernel_rem_pio2f+0x432>
 800f040:	e8df f003 	tbb	[pc, r3]
 800f044:	2a02021c 	.word	0x2a02021c
 800f048:	4626      	mov	r6, r4
 800f04a:	2000      	movs	r0, #0
 800f04c:	af30      	add	r7, sp, #192	; 0xc0
 800f04e:	2e00      	cmp	r6, #0
 800f050:	da40      	bge.n	800f0d4 <__kernel_rem_pio2f+0x478>
 800f052:	2d00      	cmp	r5, #0
 800f054:	d044      	beq.n	800f0e0 <__kernel_rem_pio2f+0x484>
 800f056:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800f05a:	9a01      	ldr	r2, [sp, #4]
 800f05c:	af58      	add	r7, sp, #352	; 0x160
 800f05e:	4601      	mov	r1, r0
 800f060:	6013      	str	r3, [r2, #0]
 800f062:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800f066:	f7f1 fd5f 	bl	8000b28 <__aeabi_fsub>
 800f06a:	2601      	movs	r6, #1
 800f06c:	42b4      	cmp	r4, r6
 800f06e:	da39      	bge.n	800f0e4 <__kernel_rem_pio2f+0x488>
 800f070:	b10d      	cbz	r5, 800f076 <__kernel_rem_pio2f+0x41a>
 800f072:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f076:	9b01      	ldr	r3, [sp, #4]
 800f078:	6058      	str	r0, [r3, #4]
 800f07a:	e008      	b.n	800f08e <__kernel_rem_pio2f+0x432>
 800f07c:	2000      	movs	r0, #0
 800f07e:	ae30      	add	r6, sp, #192	; 0xc0
 800f080:	2c00      	cmp	r4, #0
 800f082:	da21      	bge.n	800f0c8 <__kernel_rem_pio2f+0x46c>
 800f084:	b10d      	cbz	r5, 800f08a <__kernel_rem_pio2f+0x42e>
 800f086:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f08a:	9b01      	ldr	r3, [sp, #4]
 800f08c:	6018      	str	r0, [r3, #0]
 800f08e:	f008 0007 	and.w	r0, r8, #7
 800f092:	b059      	add	sp, #356	; 0x164
 800f094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f098:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800f09c:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 800f0a0:	4637      	mov	r7, r6
 800f0a2:	46a1      	mov	r9, r4
 800f0a4:	f1b9 0f00 	cmp.w	r9, #0
 800f0a8:	dc22      	bgt.n	800f0f0 <__kernel_rem_pio2f+0x494>
 800f0aa:	4627      	mov	r7, r4
 800f0ac:	2f01      	cmp	r7, #1
 800f0ae:	dc38      	bgt.n	800f122 <__kernel_rem_pio2f+0x4c6>
 800f0b0:	2000      	movs	r0, #0
 800f0b2:	2c01      	cmp	r4, #1
 800f0b4:	dc4c      	bgt.n	800f150 <__kernel_rem_pio2f+0x4f4>
 800f0b6:	2d00      	cmp	r5, #0
 800f0b8:	d150      	bne.n	800f15c <__kernel_rem_pio2f+0x500>
 800f0ba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800f0bc:	9a01      	ldr	r2, [sp, #4]
 800f0be:	6013      	str	r3, [r2, #0]
 800f0c0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800f0c2:	6053      	str	r3, [r2, #4]
 800f0c4:	6090      	str	r0, [r2, #8]
 800f0c6:	e7e2      	b.n	800f08e <__kernel_rem_pio2f+0x432>
 800f0c8:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800f0cc:	f7f1 fd2e 	bl	8000b2c <__addsf3>
 800f0d0:	3c01      	subs	r4, #1
 800f0d2:	e7d5      	b.n	800f080 <__kernel_rem_pio2f+0x424>
 800f0d4:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800f0d8:	f7f1 fd28 	bl	8000b2c <__addsf3>
 800f0dc:	3e01      	subs	r6, #1
 800f0de:	e7b6      	b.n	800f04e <__kernel_rem_pio2f+0x3f2>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	e7ba      	b.n	800f05a <__kernel_rem_pio2f+0x3fe>
 800f0e4:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800f0e8:	f7f1 fd20 	bl	8000b2c <__addsf3>
 800f0ec:	3601      	adds	r6, #1
 800f0ee:	e7bd      	b.n	800f06c <__kernel_rem_pio2f+0x410>
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	4610      	mov	r0, r2
 800f0fa:	9303      	str	r3, [sp, #12]
 800f0fc:	9202      	str	r2, [sp, #8]
 800f0fe:	f7f1 fd15 	bl	8000b2c <__addsf3>
 800f102:	9a02      	ldr	r2, [sp, #8]
 800f104:	4601      	mov	r1, r0
 800f106:	4683      	mov	fp, r0
 800f108:	4610      	mov	r0, r2
 800f10a:	f7f1 fd0d 	bl	8000b28 <__aeabi_fsub>
 800f10e:	9b03      	ldr	r3, [sp, #12]
 800f110:	f109 39ff 	add.w	r9, r9, #4294967295
 800f114:	4619      	mov	r1, r3
 800f116:	f7f1 fd09 	bl	8000b2c <__addsf3>
 800f11a:	6038      	str	r0, [r7, #0]
 800f11c:	f847 bd04 	str.w	fp, [r7, #-4]!
 800f120:	e7c0      	b.n	800f0a4 <__kernel_rem_pio2f+0x448>
 800f122:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f126:	f8d6 b000 	ldr.w	fp, [r6]
 800f12a:	4618      	mov	r0, r3
 800f12c:	4659      	mov	r1, fp
 800f12e:	9302      	str	r3, [sp, #8]
 800f130:	f7f1 fcfc 	bl	8000b2c <__addsf3>
 800f134:	9b02      	ldr	r3, [sp, #8]
 800f136:	4601      	mov	r1, r0
 800f138:	4681      	mov	r9, r0
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7f1 fcf4 	bl	8000b28 <__aeabi_fsub>
 800f140:	4659      	mov	r1, fp
 800f142:	f7f1 fcf3 	bl	8000b2c <__addsf3>
 800f146:	3f01      	subs	r7, #1
 800f148:	6030      	str	r0, [r6, #0]
 800f14a:	f846 9d04 	str.w	r9, [r6, #-4]!
 800f14e:	e7ad      	b.n	800f0ac <__kernel_rem_pio2f+0x450>
 800f150:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800f154:	f7f1 fcea 	bl	8000b2c <__addsf3>
 800f158:	3c01      	subs	r4, #1
 800f15a:	e7aa      	b.n	800f0b2 <__kernel_rem_pio2f+0x456>
 800f15c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800f15e:	9a01      	ldr	r2, [sp, #4]
 800f160:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f164:	6013      	str	r3, [r2, #0]
 800f166:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800f168:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f16c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f170:	6053      	str	r3, [r2, #4]
 800f172:	e7a7      	b.n	800f0c4 <__kernel_rem_pio2f+0x468>
 800f174:	08010d98 	.word	0x08010d98

0800f178 <__kernel_sinf>:
 800f178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f17c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f180:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f184:	4604      	mov	r4, r0
 800f186:	460f      	mov	r7, r1
 800f188:	4691      	mov	r9, r2
 800f18a:	da03      	bge.n	800f194 <__kernel_sinf+0x1c>
 800f18c:	f7f1 ffb2 	bl	80010f4 <__aeabi_f2iz>
 800f190:	2800      	cmp	r0, #0
 800f192:	d035      	beq.n	800f200 <__kernel_sinf+0x88>
 800f194:	4621      	mov	r1, r4
 800f196:	4620      	mov	r0, r4
 800f198:	f7f1 fdd0 	bl	8000d3c <__aeabi_fmul>
 800f19c:	4605      	mov	r5, r0
 800f19e:	4601      	mov	r1, r0
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f7f1 fdcb 	bl	8000d3c <__aeabi_fmul>
 800f1a6:	4929      	ldr	r1, [pc, #164]	; (800f24c <__kernel_sinf+0xd4>)
 800f1a8:	4606      	mov	r6, r0
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	f7f1 fdc6 	bl	8000d3c <__aeabi_fmul>
 800f1b0:	4927      	ldr	r1, [pc, #156]	; (800f250 <__kernel_sinf+0xd8>)
 800f1b2:	f7f1 fcb9 	bl	8000b28 <__aeabi_fsub>
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	f7f1 fdc0 	bl	8000d3c <__aeabi_fmul>
 800f1bc:	4925      	ldr	r1, [pc, #148]	; (800f254 <__kernel_sinf+0xdc>)
 800f1be:	f7f1 fcb5 	bl	8000b2c <__addsf3>
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	f7f1 fdba 	bl	8000d3c <__aeabi_fmul>
 800f1c8:	4923      	ldr	r1, [pc, #140]	; (800f258 <__kernel_sinf+0xe0>)
 800f1ca:	f7f1 fcad 	bl	8000b28 <__aeabi_fsub>
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	f7f1 fdb4 	bl	8000d3c <__aeabi_fmul>
 800f1d4:	4921      	ldr	r1, [pc, #132]	; (800f25c <__kernel_sinf+0xe4>)
 800f1d6:	f7f1 fca9 	bl	8000b2c <__addsf3>
 800f1da:	4680      	mov	r8, r0
 800f1dc:	f1b9 0f00 	cmp.w	r9, #0
 800f1e0:	d111      	bne.n	800f206 <__kernel_sinf+0x8e>
 800f1e2:	4601      	mov	r1, r0
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	f7f1 fda9 	bl	8000d3c <__aeabi_fmul>
 800f1ea:	491d      	ldr	r1, [pc, #116]	; (800f260 <__kernel_sinf+0xe8>)
 800f1ec:	f7f1 fc9c 	bl	8000b28 <__aeabi_fsub>
 800f1f0:	4631      	mov	r1, r6
 800f1f2:	f7f1 fda3 	bl	8000d3c <__aeabi_fmul>
 800f1f6:	4601      	mov	r1, r0
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f7f1 fc97 	bl	8000b2c <__addsf3>
 800f1fe:	4604      	mov	r4, r0
 800f200:	4620      	mov	r0, r4
 800f202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f206:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f20a:	4638      	mov	r0, r7
 800f20c:	f7f1 fd96 	bl	8000d3c <__aeabi_fmul>
 800f210:	4641      	mov	r1, r8
 800f212:	4681      	mov	r9, r0
 800f214:	4630      	mov	r0, r6
 800f216:	f7f1 fd91 	bl	8000d3c <__aeabi_fmul>
 800f21a:	4601      	mov	r1, r0
 800f21c:	4648      	mov	r0, r9
 800f21e:	f7f1 fc83 	bl	8000b28 <__aeabi_fsub>
 800f222:	4629      	mov	r1, r5
 800f224:	f7f1 fd8a 	bl	8000d3c <__aeabi_fmul>
 800f228:	4639      	mov	r1, r7
 800f22a:	f7f1 fc7d 	bl	8000b28 <__aeabi_fsub>
 800f22e:	490c      	ldr	r1, [pc, #48]	; (800f260 <__kernel_sinf+0xe8>)
 800f230:	4605      	mov	r5, r0
 800f232:	4630      	mov	r0, r6
 800f234:	f7f1 fd82 	bl	8000d3c <__aeabi_fmul>
 800f238:	4601      	mov	r1, r0
 800f23a:	4628      	mov	r0, r5
 800f23c:	f7f1 fc76 	bl	8000b2c <__addsf3>
 800f240:	4601      	mov	r1, r0
 800f242:	4620      	mov	r0, r4
 800f244:	f7f1 fc70 	bl	8000b28 <__aeabi_fsub>
 800f248:	e7d9      	b.n	800f1fe <__kernel_sinf+0x86>
 800f24a:	bf00      	nop
 800f24c:	2f2ec9d3 	.word	0x2f2ec9d3
 800f250:	32d72f34 	.word	0x32d72f34
 800f254:	3638ef1b 	.word	0x3638ef1b
 800f258:	39500d01 	.word	0x39500d01
 800f25c:	3c088889 	.word	0x3c088889
 800f260:	3e2aaaab 	.word	0x3e2aaaab
 800f264:	00000000 	.word	0x00000000

0800f268 <atan>:
 800f268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f26c:	4bba      	ldr	r3, [pc, #744]	; (800f558 <atan+0x2f0>)
 800f26e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f272:	429e      	cmp	r6, r3
 800f274:	4604      	mov	r4, r0
 800f276:	460d      	mov	r5, r1
 800f278:	468b      	mov	fp, r1
 800f27a:	dd17      	ble.n	800f2ac <atan+0x44>
 800f27c:	4ab7      	ldr	r2, [pc, #732]	; (800f55c <atan+0x2f4>)
 800f27e:	4296      	cmp	r6, r2
 800f280:	dc01      	bgt.n	800f286 <atan+0x1e>
 800f282:	d109      	bne.n	800f298 <atan+0x30>
 800f284:	b140      	cbz	r0, 800f298 <atan+0x30>
 800f286:	4622      	mov	r2, r4
 800f288:	462b      	mov	r3, r5
 800f28a:	4620      	mov	r0, r4
 800f28c:	4629      	mov	r1, r5
 800f28e:	f7f0 ff6d 	bl	800016c <__adddf3>
 800f292:	4604      	mov	r4, r0
 800f294:	460d      	mov	r5, r1
 800f296:	e005      	b.n	800f2a4 <atan+0x3c>
 800f298:	f1bb 0f00 	cmp.w	fp, #0
 800f29c:	4cb0      	ldr	r4, [pc, #704]	; (800f560 <atan+0x2f8>)
 800f29e:	f300 8129 	bgt.w	800f4f4 <atan+0x28c>
 800f2a2:	4db0      	ldr	r5, [pc, #704]	; (800f564 <atan+0x2fc>)
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	4629      	mov	r1, r5
 800f2a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ac:	4bae      	ldr	r3, [pc, #696]	; (800f568 <atan+0x300>)
 800f2ae:	429e      	cmp	r6, r3
 800f2b0:	dc11      	bgt.n	800f2d6 <atan+0x6e>
 800f2b2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f2b6:	429e      	cmp	r6, r3
 800f2b8:	dc0a      	bgt.n	800f2d0 <atan+0x68>
 800f2ba:	a38f      	add	r3, pc, #572	; (adr r3, 800f4f8 <atan+0x290>)
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	f7f0 ff54 	bl	800016c <__adddf3>
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	4ba9      	ldr	r3, [pc, #676]	; (800f56c <atan+0x304>)
 800f2c8:	f7f1 fb92 	bl	80009f0 <__aeabi_dcmpgt>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	d1e9      	bne.n	800f2a4 <atan+0x3c>
 800f2d0:	f04f 3aff 	mov.w	sl, #4294967295
 800f2d4:	e027      	b.n	800f326 <atan+0xbe>
 800f2d6:	f000 f959 	bl	800f58c <fabs>
 800f2da:	4ba5      	ldr	r3, [pc, #660]	; (800f570 <atan+0x308>)
 800f2dc:	4604      	mov	r4, r0
 800f2de:	429e      	cmp	r6, r3
 800f2e0:	460d      	mov	r5, r1
 800f2e2:	f300 80b8 	bgt.w	800f456 <atan+0x1ee>
 800f2e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f2ea:	429e      	cmp	r6, r3
 800f2ec:	f300 809c 	bgt.w	800f428 <atan+0x1c0>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	f7f0 ff3a 	bl	800016c <__adddf3>
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	4b9c      	ldr	r3, [pc, #624]	; (800f56c <atan+0x304>)
 800f2fc:	f7f0 ff34 	bl	8000168 <__aeabi_dsub>
 800f300:	2200      	movs	r2, #0
 800f302:	4606      	mov	r6, r0
 800f304:	460f      	mov	r7, r1
 800f306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f30a:	4620      	mov	r0, r4
 800f30c:	4629      	mov	r1, r5
 800f30e:	f7f0 ff2d 	bl	800016c <__adddf3>
 800f312:	4602      	mov	r2, r0
 800f314:	460b      	mov	r3, r1
 800f316:	4630      	mov	r0, r6
 800f318:	4639      	mov	r1, r7
 800f31a:	f7f1 fa03 	bl	8000724 <__aeabi_ddiv>
 800f31e:	f04f 0a00 	mov.w	sl, #0
 800f322:	4604      	mov	r4, r0
 800f324:	460d      	mov	r5, r1
 800f326:	4622      	mov	r2, r4
 800f328:	462b      	mov	r3, r5
 800f32a:	4620      	mov	r0, r4
 800f32c:	4629      	mov	r1, r5
 800f32e:	f7f1 f8cf 	bl	80004d0 <__aeabi_dmul>
 800f332:	4602      	mov	r2, r0
 800f334:	460b      	mov	r3, r1
 800f336:	4680      	mov	r8, r0
 800f338:	4689      	mov	r9, r1
 800f33a:	f7f1 f8c9 	bl	80004d0 <__aeabi_dmul>
 800f33e:	a370      	add	r3, pc, #448	; (adr r3, 800f500 <atan+0x298>)
 800f340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f344:	4606      	mov	r6, r0
 800f346:	460f      	mov	r7, r1
 800f348:	f7f1 f8c2 	bl	80004d0 <__aeabi_dmul>
 800f34c:	a36e      	add	r3, pc, #440	; (adr r3, 800f508 <atan+0x2a0>)
 800f34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f352:	f7f0 ff0b 	bl	800016c <__adddf3>
 800f356:	4632      	mov	r2, r6
 800f358:	463b      	mov	r3, r7
 800f35a:	f7f1 f8b9 	bl	80004d0 <__aeabi_dmul>
 800f35e:	a36c      	add	r3, pc, #432	; (adr r3, 800f510 <atan+0x2a8>)
 800f360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f364:	f7f0 ff02 	bl	800016c <__adddf3>
 800f368:	4632      	mov	r2, r6
 800f36a:	463b      	mov	r3, r7
 800f36c:	f7f1 f8b0 	bl	80004d0 <__aeabi_dmul>
 800f370:	a369      	add	r3, pc, #420	; (adr r3, 800f518 <atan+0x2b0>)
 800f372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f376:	f7f0 fef9 	bl	800016c <__adddf3>
 800f37a:	4632      	mov	r2, r6
 800f37c:	463b      	mov	r3, r7
 800f37e:	f7f1 f8a7 	bl	80004d0 <__aeabi_dmul>
 800f382:	a367      	add	r3, pc, #412	; (adr r3, 800f520 <atan+0x2b8>)
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	f7f0 fef0 	bl	800016c <__adddf3>
 800f38c:	4632      	mov	r2, r6
 800f38e:	463b      	mov	r3, r7
 800f390:	f7f1 f89e 	bl	80004d0 <__aeabi_dmul>
 800f394:	a364      	add	r3, pc, #400	; (adr r3, 800f528 <atan+0x2c0>)
 800f396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39a:	f7f0 fee7 	bl	800016c <__adddf3>
 800f39e:	4642      	mov	r2, r8
 800f3a0:	464b      	mov	r3, r9
 800f3a2:	f7f1 f895 	bl	80004d0 <__aeabi_dmul>
 800f3a6:	a362      	add	r3, pc, #392	; (adr r3, 800f530 <atan+0x2c8>)
 800f3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ac:	4680      	mov	r8, r0
 800f3ae:	4689      	mov	r9, r1
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	4639      	mov	r1, r7
 800f3b4:	f7f1 f88c 	bl	80004d0 <__aeabi_dmul>
 800f3b8:	a35f      	add	r3, pc, #380	; (adr r3, 800f538 <atan+0x2d0>)
 800f3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3be:	f7f0 fed3 	bl	8000168 <__aeabi_dsub>
 800f3c2:	4632      	mov	r2, r6
 800f3c4:	463b      	mov	r3, r7
 800f3c6:	f7f1 f883 	bl	80004d0 <__aeabi_dmul>
 800f3ca:	a35d      	add	r3, pc, #372	; (adr r3, 800f540 <atan+0x2d8>)
 800f3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d0:	f7f0 feca 	bl	8000168 <__aeabi_dsub>
 800f3d4:	4632      	mov	r2, r6
 800f3d6:	463b      	mov	r3, r7
 800f3d8:	f7f1 f87a 	bl	80004d0 <__aeabi_dmul>
 800f3dc:	a35a      	add	r3, pc, #360	; (adr r3, 800f548 <atan+0x2e0>)
 800f3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e2:	f7f0 fec1 	bl	8000168 <__aeabi_dsub>
 800f3e6:	4632      	mov	r2, r6
 800f3e8:	463b      	mov	r3, r7
 800f3ea:	f7f1 f871 	bl	80004d0 <__aeabi_dmul>
 800f3ee:	a358      	add	r3, pc, #352	; (adr r3, 800f550 <atan+0x2e8>)
 800f3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f4:	f7f0 feb8 	bl	8000168 <__aeabi_dsub>
 800f3f8:	4632      	mov	r2, r6
 800f3fa:	463b      	mov	r3, r7
 800f3fc:	f7f1 f868 	bl	80004d0 <__aeabi_dmul>
 800f400:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	d14e      	bne.n	800f4a8 <atan+0x240>
 800f40a:	4640      	mov	r0, r8
 800f40c:	4649      	mov	r1, r9
 800f40e:	f7f0 fead 	bl	800016c <__adddf3>
 800f412:	4622      	mov	r2, r4
 800f414:	462b      	mov	r3, r5
 800f416:	f7f1 f85b 	bl	80004d0 <__aeabi_dmul>
 800f41a:	4602      	mov	r2, r0
 800f41c:	460b      	mov	r3, r1
 800f41e:	4620      	mov	r0, r4
 800f420:	4629      	mov	r1, r5
 800f422:	f7f0 fea1 	bl	8000168 <__aeabi_dsub>
 800f426:	e734      	b.n	800f292 <atan+0x2a>
 800f428:	2200      	movs	r2, #0
 800f42a:	4b50      	ldr	r3, [pc, #320]	; (800f56c <atan+0x304>)
 800f42c:	f7f0 fe9c 	bl	8000168 <__aeabi_dsub>
 800f430:	2200      	movs	r2, #0
 800f432:	4606      	mov	r6, r0
 800f434:	460f      	mov	r7, r1
 800f436:	4b4d      	ldr	r3, [pc, #308]	; (800f56c <atan+0x304>)
 800f438:	4620      	mov	r0, r4
 800f43a:	4629      	mov	r1, r5
 800f43c:	f7f0 fe96 	bl	800016c <__adddf3>
 800f440:	4602      	mov	r2, r0
 800f442:	460b      	mov	r3, r1
 800f444:	4630      	mov	r0, r6
 800f446:	4639      	mov	r1, r7
 800f448:	f7f1 f96c 	bl	8000724 <__aeabi_ddiv>
 800f44c:	f04f 0a01 	mov.w	sl, #1
 800f450:	4604      	mov	r4, r0
 800f452:	460d      	mov	r5, r1
 800f454:	e767      	b.n	800f326 <atan+0xbe>
 800f456:	4b47      	ldr	r3, [pc, #284]	; (800f574 <atan+0x30c>)
 800f458:	429e      	cmp	r6, r3
 800f45a:	dc1a      	bgt.n	800f492 <atan+0x22a>
 800f45c:	2200      	movs	r2, #0
 800f45e:	4b46      	ldr	r3, [pc, #280]	; (800f578 <atan+0x310>)
 800f460:	f7f0 fe82 	bl	8000168 <__aeabi_dsub>
 800f464:	2200      	movs	r2, #0
 800f466:	4606      	mov	r6, r0
 800f468:	460f      	mov	r7, r1
 800f46a:	4b43      	ldr	r3, [pc, #268]	; (800f578 <atan+0x310>)
 800f46c:	4620      	mov	r0, r4
 800f46e:	4629      	mov	r1, r5
 800f470:	f7f1 f82e 	bl	80004d0 <__aeabi_dmul>
 800f474:	2200      	movs	r2, #0
 800f476:	4b3d      	ldr	r3, [pc, #244]	; (800f56c <atan+0x304>)
 800f478:	f7f0 fe78 	bl	800016c <__adddf3>
 800f47c:	4602      	mov	r2, r0
 800f47e:	460b      	mov	r3, r1
 800f480:	4630      	mov	r0, r6
 800f482:	4639      	mov	r1, r7
 800f484:	f7f1 f94e 	bl	8000724 <__aeabi_ddiv>
 800f488:	f04f 0a02 	mov.w	sl, #2
 800f48c:	4604      	mov	r4, r0
 800f48e:	460d      	mov	r5, r1
 800f490:	e749      	b.n	800f326 <atan+0xbe>
 800f492:	4602      	mov	r2, r0
 800f494:	460b      	mov	r3, r1
 800f496:	2000      	movs	r0, #0
 800f498:	4938      	ldr	r1, [pc, #224]	; (800f57c <atan+0x314>)
 800f49a:	f7f1 f943 	bl	8000724 <__aeabi_ddiv>
 800f49e:	f04f 0a03 	mov.w	sl, #3
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	460d      	mov	r5, r1
 800f4a6:	e73e      	b.n	800f326 <atan+0xbe>
 800f4a8:	4640      	mov	r0, r8
 800f4aa:	4649      	mov	r1, r9
 800f4ac:	f7f0 fe5e 	bl	800016c <__adddf3>
 800f4b0:	4622      	mov	r2, r4
 800f4b2:	462b      	mov	r3, r5
 800f4b4:	f7f1 f80c 	bl	80004d0 <__aeabi_dmul>
 800f4b8:	4e31      	ldr	r6, [pc, #196]	; (800f580 <atan+0x318>)
 800f4ba:	4b32      	ldr	r3, [pc, #200]	; (800f584 <atan+0x31c>)
 800f4bc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800f4c0:	4456      	add	r6, sl
 800f4c2:	449a      	add	sl, r3
 800f4c4:	e9da 2300 	ldrd	r2, r3, [sl]
 800f4c8:	f7f0 fe4e 	bl	8000168 <__aeabi_dsub>
 800f4cc:	4622      	mov	r2, r4
 800f4ce:	462b      	mov	r3, r5
 800f4d0:	f7f0 fe4a 	bl	8000168 <__aeabi_dsub>
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f4dc:	f7f0 fe44 	bl	8000168 <__aeabi_dsub>
 800f4e0:	f1bb 0f00 	cmp.w	fp, #0
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	460d      	mov	r5, r1
 800f4e8:	f6bf aedc 	bge.w	800f2a4 <atan+0x3c>
 800f4ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4f0:	461d      	mov	r5, r3
 800f4f2:	e6d7      	b.n	800f2a4 <atan+0x3c>
 800f4f4:	4d24      	ldr	r5, [pc, #144]	; (800f588 <atan+0x320>)
 800f4f6:	e6d5      	b.n	800f2a4 <atan+0x3c>
 800f4f8:	8800759c 	.word	0x8800759c
 800f4fc:	7e37e43c 	.word	0x7e37e43c
 800f500:	e322da11 	.word	0xe322da11
 800f504:	3f90ad3a 	.word	0x3f90ad3a
 800f508:	24760deb 	.word	0x24760deb
 800f50c:	3fa97b4b 	.word	0x3fa97b4b
 800f510:	a0d03d51 	.word	0xa0d03d51
 800f514:	3fb10d66 	.word	0x3fb10d66
 800f518:	c54c206e 	.word	0xc54c206e
 800f51c:	3fb745cd 	.word	0x3fb745cd
 800f520:	920083ff 	.word	0x920083ff
 800f524:	3fc24924 	.word	0x3fc24924
 800f528:	5555550d 	.word	0x5555550d
 800f52c:	3fd55555 	.word	0x3fd55555
 800f530:	2c6a6c2f 	.word	0x2c6a6c2f
 800f534:	bfa2b444 	.word	0xbfa2b444
 800f538:	52defd9a 	.word	0x52defd9a
 800f53c:	3fadde2d 	.word	0x3fadde2d
 800f540:	af749a6d 	.word	0xaf749a6d
 800f544:	3fb3b0f2 	.word	0x3fb3b0f2
 800f548:	fe231671 	.word	0xfe231671
 800f54c:	3fbc71c6 	.word	0x3fbc71c6
 800f550:	9998ebc4 	.word	0x9998ebc4
 800f554:	3fc99999 	.word	0x3fc99999
 800f558:	440fffff 	.word	0x440fffff
 800f55c:	7ff00000 	.word	0x7ff00000
 800f560:	54442d18 	.word	0x54442d18
 800f564:	bff921fb 	.word	0xbff921fb
 800f568:	3fdbffff 	.word	0x3fdbffff
 800f56c:	3ff00000 	.word	0x3ff00000
 800f570:	3ff2ffff 	.word	0x3ff2ffff
 800f574:	40037fff 	.word	0x40037fff
 800f578:	3ff80000 	.word	0x3ff80000
 800f57c:	bff00000 	.word	0xbff00000
 800f580:	08010dd0 	.word	0x08010dd0
 800f584:	08010df0 	.word	0x08010df0
 800f588:	3ff921fb 	.word	0x3ff921fb

0800f58c <fabs>:
 800f58c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f590:	4770      	bx	lr

0800f592 <finite>:
 800f592:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800f596:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800f59a:	0fc0      	lsrs	r0, r0, #31
 800f59c:	4770      	bx	lr
	...

0800f5a0 <floor>:
 800f5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5a4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f5a8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f5ac:	2e13      	cmp	r6, #19
 800f5ae:	4607      	mov	r7, r0
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	460c      	mov	r4, r1
 800f5b4:	4605      	mov	r5, r0
 800f5b6:	dc35      	bgt.n	800f624 <floor+0x84>
 800f5b8:	2e00      	cmp	r6, #0
 800f5ba:	da16      	bge.n	800f5ea <floor+0x4a>
 800f5bc:	a336      	add	r3, pc, #216	; (adr r3, 800f698 <floor+0xf8>)
 800f5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c2:	f7f0 fdd3 	bl	800016c <__adddf3>
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	f7f1 fa11 	bl	80009f0 <__aeabi_dcmpgt>
 800f5ce:	b148      	cbz	r0, 800f5e4 <floor+0x44>
 800f5d0:	2c00      	cmp	r4, #0
 800f5d2:	da5c      	bge.n	800f68e <floor+0xee>
 800f5d4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f5d8:	433b      	orrs	r3, r7
 800f5da:	4b31      	ldr	r3, [pc, #196]	; (800f6a0 <floor+0x100>)
 800f5dc:	f04f 0500 	mov.w	r5, #0
 800f5e0:	bf18      	it	ne
 800f5e2:	461c      	movne	r4, r3
 800f5e4:	4623      	mov	r3, r4
 800f5e6:	462f      	mov	r7, r5
 800f5e8:	e027      	b.n	800f63a <floor+0x9a>
 800f5ea:	4a2e      	ldr	r2, [pc, #184]	; (800f6a4 <floor+0x104>)
 800f5ec:	fa42 f806 	asr.w	r8, r2, r6
 800f5f0:	ea01 0208 	and.w	r2, r1, r8
 800f5f4:	4302      	orrs	r2, r0
 800f5f6:	d020      	beq.n	800f63a <floor+0x9a>
 800f5f8:	a327      	add	r3, pc, #156	; (adr r3, 800f698 <floor+0xf8>)
 800f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fe:	f7f0 fdb5 	bl	800016c <__adddf3>
 800f602:	2200      	movs	r2, #0
 800f604:	2300      	movs	r3, #0
 800f606:	f7f1 f9f3 	bl	80009f0 <__aeabi_dcmpgt>
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d0ea      	beq.n	800f5e4 <floor+0x44>
 800f60e:	2c00      	cmp	r4, #0
 800f610:	bfbe      	ittt	lt
 800f612:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f616:	fa43 f606 	asrlt.w	r6, r3, r6
 800f61a:	19a4      	addlt	r4, r4, r6
 800f61c:	ea24 0408 	bic.w	r4, r4, r8
 800f620:	2500      	movs	r5, #0
 800f622:	e7df      	b.n	800f5e4 <floor+0x44>
 800f624:	2e33      	cmp	r6, #51	; 0x33
 800f626:	dd0c      	ble.n	800f642 <floor+0xa2>
 800f628:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f62c:	d105      	bne.n	800f63a <floor+0x9a>
 800f62e:	460b      	mov	r3, r1
 800f630:	4602      	mov	r2, r0
 800f632:	f7f0 fd9b 	bl	800016c <__adddf3>
 800f636:	4607      	mov	r7, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	4638      	mov	r0, r7
 800f63c:	4619      	mov	r1, r3
 800f63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f642:	f04f 32ff 	mov.w	r2, #4294967295
 800f646:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800f64a:	fa22 f808 	lsr.w	r8, r2, r8
 800f64e:	ea10 0f08 	tst.w	r0, r8
 800f652:	d0f2      	beq.n	800f63a <floor+0x9a>
 800f654:	a310      	add	r3, pc, #64	; (adr r3, 800f698 <floor+0xf8>)
 800f656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65a:	f7f0 fd87 	bl	800016c <__adddf3>
 800f65e:	2200      	movs	r2, #0
 800f660:	2300      	movs	r3, #0
 800f662:	f7f1 f9c5 	bl	80009f0 <__aeabi_dcmpgt>
 800f666:	2800      	cmp	r0, #0
 800f668:	d0bc      	beq.n	800f5e4 <floor+0x44>
 800f66a:	2c00      	cmp	r4, #0
 800f66c:	da02      	bge.n	800f674 <floor+0xd4>
 800f66e:	2e14      	cmp	r6, #20
 800f670:	d103      	bne.n	800f67a <floor+0xda>
 800f672:	3401      	adds	r4, #1
 800f674:	ea25 0508 	bic.w	r5, r5, r8
 800f678:	e7b4      	b.n	800f5e4 <floor+0x44>
 800f67a:	2301      	movs	r3, #1
 800f67c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f680:	fa03 f606 	lsl.w	r6, r3, r6
 800f684:	4435      	add	r5, r6
 800f686:	42af      	cmp	r7, r5
 800f688:	bf88      	it	hi
 800f68a:	18e4      	addhi	r4, r4, r3
 800f68c:	e7f2      	b.n	800f674 <floor+0xd4>
 800f68e:	2500      	movs	r5, #0
 800f690:	462c      	mov	r4, r5
 800f692:	e7a7      	b.n	800f5e4 <floor+0x44>
 800f694:	f3af 8000 	nop.w
 800f698:	8800759c 	.word	0x8800759c
 800f69c:	7e37e43c 	.word	0x7e37e43c
 800f6a0:	bff00000 	.word	0xbff00000
 800f6a4:	000fffff 	.word	0x000fffff

0800f6a8 <matherr>:
 800f6a8:	2000      	movs	r0, #0
 800f6aa:	4770      	bx	lr

0800f6ac <nan>:
 800f6ac:	2000      	movs	r0, #0
 800f6ae:	4901      	ldr	r1, [pc, #4]	; (800f6b4 <nan+0x8>)
 800f6b0:	4770      	bx	lr
 800f6b2:	bf00      	nop
 800f6b4:	7ff80000 	.word	0x7ff80000

0800f6b8 <rint>:
 800f6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6ba:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 800f6be:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 800f6c2:	2f13      	cmp	r7, #19
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	4684      	mov	ip, r0
 800f6ca:	460c      	mov	r4, r1
 800f6cc:	4605      	mov	r5, r0
 800f6ce:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800f6d2:	dc56      	bgt.n	800f782 <rint+0xca>
 800f6d4:	2f00      	cmp	r7, #0
 800f6d6:	da29      	bge.n	800f72c <rint+0x74>
 800f6d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f6dc:	4301      	orrs	r1, r0
 800f6de:	d021      	beq.n	800f724 <rint+0x6c>
 800f6e0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800f6e4:	4305      	orrs	r5, r0
 800f6e6:	426b      	negs	r3, r5
 800f6e8:	432b      	orrs	r3, r5
 800f6ea:	0b1b      	lsrs	r3, r3, #12
 800f6ec:	0c64      	lsrs	r4, r4, #17
 800f6ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f6f2:	0464      	lsls	r4, r4, #17
 800f6f4:	ea43 0104 	orr.w	r1, r3, r4
 800f6f8:	4b31      	ldr	r3, [pc, #196]	; (800f7c0 <rint+0x108>)
 800f6fa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f6fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f702:	4622      	mov	r2, r4
 800f704:	462b      	mov	r3, r5
 800f706:	f7f0 fd31 	bl	800016c <__adddf3>
 800f70a:	e9cd 0100 	strd	r0, r1, [sp]
 800f70e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f712:	4622      	mov	r2, r4
 800f714:	462b      	mov	r3, r5
 800f716:	f7f0 fd27 	bl	8000168 <__aeabi_dsub>
 800f71a:	4602      	mov	r2, r0
 800f71c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f720:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 800f724:	4610      	mov	r0, r2
 800f726:	4619      	mov	r1, r3
 800f728:	b003      	add	sp, #12
 800f72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f72c:	4925      	ldr	r1, [pc, #148]	; (800f7c4 <rint+0x10c>)
 800f72e:	4139      	asrs	r1, r7
 800f730:	ea03 0001 	and.w	r0, r3, r1
 800f734:	4310      	orrs	r0, r2
 800f736:	d0f5      	beq.n	800f724 <rint+0x6c>
 800f738:	084b      	lsrs	r3, r1, #1
 800f73a:	ea04 0203 	and.w	r2, r4, r3
 800f73e:	ea52 050c 	orrs.w	r5, r2, ip
 800f742:	d00a      	beq.n	800f75a <rint+0xa2>
 800f744:	ea24 0303 	bic.w	r3, r4, r3
 800f748:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800f74c:	2f13      	cmp	r7, #19
 800f74e:	bf0c      	ite	eq
 800f750:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800f754:	2500      	movne	r5, #0
 800f756:	413c      	asrs	r4, r7
 800f758:	431c      	orrs	r4, r3
 800f75a:	4b19      	ldr	r3, [pc, #100]	; (800f7c0 <rint+0x108>)
 800f75c:	4621      	mov	r1, r4
 800f75e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f762:	4628      	mov	r0, r5
 800f764:	e9d6 4500 	ldrd	r4, r5, [r6]
 800f768:	4622      	mov	r2, r4
 800f76a:	462b      	mov	r3, r5
 800f76c:	f7f0 fcfe 	bl	800016c <__adddf3>
 800f770:	e9cd 0100 	strd	r0, r1, [sp]
 800f774:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f778:	4622      	mov	r2, r4
 800f77a:	462b      	mov	r3, r5
 800f77c:	f7f0 fcf4 	bl	8000168 <__aeabi_dsub>
 800f780:	e006      	b.n	800f790 <rint+0xd8>
 800f782:	2f33      	cmp	r7, #51	; 0x33
 800f784:	dd07      	ble.n	800f796 <rint+0xde>
 800f786:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800f78a:	d1cb      	bne.n	800f724 <rint+0x6c>
 800f78c:	f7f0 fcee 	bl	800016c <__adddf3>
 800f790:	4602      	mov	r2, r0
 800f792:	460b      	mov	r3, r1
 800f794:	e7c6      	b.n	800f724 <rint+0x6c>
 800f796:	f04f 31ff 	mov.w	r1, #4294967295
 800f79a:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 800f79e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f7a2:	4208      	tst	r0, r1
 800f7a4:	d0be      	beq.n	800f724 <rint+0x6c>
 800f7a6:	084b      	lsrs	r3, r1, #1
 800f7a8:	4218      	tst	r0, r3
 800f7aa:	bf1f      	itttt	ne
 800f7ac:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800f7b0:	ea20 0303 	bicne.w	r3, r0, r3
 800f7b4:	fa45 fe0e 	asrne.w	lr, r5, lr
 800f7b8:	ea4e 0503 	orrne.w	r5, lr, r3
 800f7bc:	e7cd      	b.n	800f75a <rint+0xa2>
 800f7be:	bf00      	nop
 800f7c0:	08010e10 	.word	0x08010e10
 800f7c4:	000fffff 	.word	0x000fffff

0800f7c8 <scalbn>:
 800f7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ca:	4616      	mov	r6, r2
 800f7cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	460d      	mov	r5, r1
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	b98a      	cbnz	r2, 800f7fc <scalbn+0x34>
 800f7d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f7dc:	4303      	orrs	r3, r0
 800f7de:	d035      	beq.n	800f84c <scalbn+0x84>
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	4b2d      	ldr	r3, [pc, #180]	; (800f898 <scalbn+0xd0>)
 800f7e4:	f7f0 fe74 	bl	80004d0 <__aeabi_dmul>
 800f7e8:	4a2c      	ldr	r2, [pc, #176]	; (800f89c <scalbn+0xd4>)
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	4296      	cmp	r6, r2
 800f7ee:	460d      	mov	r5, r1
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	da0e      	bge.n	800f812 <scalbn+0x4a>
 800f7f4:	a324      	add	r3, pc, #144	; (adr r3, 800f888 <scalbn+0xc0>)
 800f7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fa:	e01c      	b.n	800f836 <scalbn+0x6e>
 800f7fc:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800f800:	42ba      	cmp	r2, r7
 800f802:	d109      	bne.n	800f818 <scalbn+0x50>
 800f804:	4602      	mov	r2, r0
 800f806:	460b      	mov	r3, r1
 800f808:	f7f0 fcb0 	bl	800016c <__adddf3>
 800f80c:	4604      	mov	r4, r0
 800f80e:	460d      	mov	r5, r1
 800f810:	e01c      	b.n	800f84c <scalbn+0x84>
 800f812:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f816:	3a36      	subs	r2, #54	; 0x36
 800f818:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f81c:	4432      	add	r2, r6
 800f81e:	428a      	cmp	r2, r1
 800f820:	dd0c      	ble.n	800f83c <scalbn+0x74>
 800f822:	4622      	mov	r2, r4
 800f824:	462b      	mov	r3, r5
 800f826:	a11a      	add	r1, pc, #104	; (adr r1, 800f890 <scalbn+0xc8>)
 800f828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f82c:	f000 f9da 	bl	800fbe4 <copysign>
 800f830:	a317      	add	r3, pc, #92	; (adr r3, 800f890 <scalbn+0xc8>)
 800f832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f836:	f7f0 fe4b 	bl	80004d0 <__aeabi_dmul>
 800f83a:	e7e7      	b.n	800f80c <scalbn+0x44>
 800f83c:	2a00      	cmp	r2, #0
 800f83e:	dd08      	ble.n	800f852 <scalbn+0x8a>
 800f840:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f844:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f848:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f84c:	4620      	mov	r0, r4
 800f84e:	4629      	mov	r1, r5
 800f850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f852:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f856:	da0b      	bge.n	800f870 <scalbn+0xa8>
 800f858:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f85c:	429e      	cmp	r6, r3
 800f85e:	4622      	mov	r2, r4
 800f860:	462b      	mov	r3, r5
 800f862:	dce0      	bgt.n	800f826 <scalbn+0x5e>
 800f864:	a108      	add	r1, pc, #32	; (adr r1, 800f888 <scalbn+0xc0>)
 800f866:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f86a:	f000 f9bb 	bl	800fbe4 <copysign>
 800f86e:	e7c1      	b.n	800f7f4 <scalbn+0x2c>
 800f870:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f874:	3236      	adds	r2, #54	; 0x36
 800f876:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f87a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f87e:	4620      	mov	r0, r4
 800f880:	4629      	mov	r1, r5
 800f882:	2200      	movs	r2, #0
 800f884:	4b06      	ldr	r3, [pc, #24]	; (800f8a0 <scalbn+0xd8>)
 800f886:	e7d6      	b.n	800f836 <scalbn+0x6e>
 800f888:	c2f8f359 	.word	0xc2f8f359
 800f88c:	01a56e1f 	.word	0x01a56e1f
 800f890:	8800759c 	.word	0x8800759c
 800f894:	7e37e43c 	.word	0x7e37e43c
 800f898:	43500000 	.word	0x43500000
 800f89c:	ffff3cb0 	.word	0xffff3cb0
 800f8a0:	3c900000 	.word	0x3c900000

0800f8a4 <atanf>:
 800f8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800f8ac:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	4607      	mov	r7, r0
 800f8b4:	db0e      	blt.n	800f8d4 <atanf+0x30>
 800f8b6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f8ba:	dd04      	ble.n	800f8c6 <atanf+0x22>
 800f8bc:	4601      	mov	r1, r0
 800f8be:	f7f1 f935 	bl	8000b2c <__addsf3>
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	e003      	b.n	800f8ce <atanf+0x2a>
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	f300 80d2 	bgt.w	800fa70 <atanf+0x1cc>
 800f8cc:	4c69      	ldr	r4, [pc, #420]	; (800fa74 <atanf+0x1d0>)
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d4:	4b68      	ldr	r3, [pc, #416]	; (800fa78 <atanf+0x1d4>)
 800f8d6:	429d      	cmp	r5, r3
 800f8d8:	dc0e      	bgt.n	800f8f8 <atanf+0x54>
 800f8da:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800f8de:	da08      	bge.n	800f8f2 <atanf+0x4e>
 800f8e0:	4966      	ldr	r1, [pc, #408]	; (800fa7c <atanf+0x1d8>)
 800f8e2:	f7f1 f923 	bl	8000b2c <__addsf3>
 800f8e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f8ea:	f7f1 fbe3 	bl	80010b4 <__aeabi_fcmpgt>
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	d1ed      	bne.n	800f8ce <atanf+0x2a>
 800f8f2:	f04f 36ff 	mov.w	r6, #4294967295
 800f8f6:	e01c      	b.n	800f932 <atanf+0x8e>
 800f8f8:	f000 f8e4 	bl	800fac4 <fabsf>
 800f8fc:	4b60      	ldr	r3, [pc, #384]	; (800fa80 <atanf+0x1dc>)
 800f8fe:	4604      	mov	r4, r0
 800f900:	429d      	cmp	r5, r3
 800f902:	dc7c      	bgt.n	800f9fe <atanf+0x15a>
 800f904:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800f908:	429d      	cmp	r5, r3
 800f90a:	dc67      	bgt.n	800f9dc <atanf+0x138>
 800f90c:	4601      	mov	r1, r0
 800f90e:	f7f1 f90d 	bl	8000b2c <__addsf3>
 800f912:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f916:	f7f1 f907 	bl	8000b28 <__aeabi_fsub>
 800f91a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f91e:	4605      	mov	r5, r0
 800f920:	4620      	mov	r0, r4
 800f922:	f7f1 f903 	bl	8000b2c <__addsf3>
 800f926:	4601      	mov	r1, r0
 800f928:	4628      	mov	r0, r5
 800f92a:	f7f1 fabb 	bl	8000ea4 <__aeabi_fdiv>
 800f92e:	2600      	movs	r6, #0
 800f930:	4604      	mov	r4, r0
 800f932:	4621      	mov	r1, r4
 800f934:	4620      	mov	r0, r4
 800f936:	f7f1 fa01 	bl	8000d3c <__aeabi_fmul>
 800f93a:	4601      	mov	r1, r0
 800f93c:	4680      	mov	r8, r0
 800f93e:	f7f1 f9fd 	bl	8000d3c <__aeabi_fmul>
 800f942:	4605      	mov	r5, r0
 800f944:	494f      	ldr	r1, [pc, #316]	; (800fa84 <atanf+0x1e0>)
 800f946:	f7f1 f9f9 	bl	8000d3c <__aeabi_fmul>
 800f94a:	494f      	ldr	r1, [pc, #316]	; (800fa88 <atanf+0x1e4>)
 800f94c:	f7f1 f8ee 	bl	8000b2c <__addsf3>
 800f950:	4629      	mov	r1, r5
 800f952:	f7f1 f9f3 	bl	8000d3c <__aeabi_fmul>
 800f956:	494d      	ldr	r1, [pc, #308]	; (800fa8c <atanf+0x1e8>)
 800f958:	f7f1 f8e8 	bl	8000b2c <__addsf3>
 800f95c:	4629      	mov	r1, r5
 800f95e:	f7f1 f9ed 	bl	8000d3c <__aeabi_fmul>
 800f962:	494b      	ldr	r1, [pc, #300]	; (800fa90 <atanf+0x1ec>)
 800f964:	f7f1 f8e2 	bl	8000b2c <__addsf3>
 800f968:	4629      	mov	r1, r5
 800f96a:	f7f1 f9e7 	bl	8000d3c <__aeabi_fmul>
 800f96e:	4949      	ldr	r1, [pc, #292]	; (800fa94 <atanf+0x1f0>)
 800f970:	f7f1 f8dc 	bl	8000b2c <__addsf3>
 800f974:	4629      	mov	r1, r5
 800f976:	f7f1 f9e1 	bl	8000d3c <__aeabi_fmul>
 800f97a:	4947      	ldr	r1, [pc, #284]	; (800fa98 <atanf+0x1f4>)
 800f97c:	f7f1 f8d6 	bl	8000b2c <__addsf3>
 800f980:	4641      	mov	r1, r8
 800f982:	f7f1 f9db 	bl	8000d3c <__aeabi_fmul>
 800f986:	4945      	ldr	r1, [pc, #276]	; (800fa9c <atanf+0x1f8>)
 800f988:	4680      	mov	r8, r0
 800f98a:	4628      	mov	r0, r5
 800f98c:	f7f1 f9d6 	bl	8000d3c <__aeabi_fmul>
 800f990:	4943      	ldr	r1, [pc, #268]	; (800faa0 <atanf+0x1fc>)
 800f992:	f7f1 f8c9 	bl	8000b28 <__aeabi_fsub>
 800f996:	4629      	mov	r1, r5
 800f998:	f7f1 f9d0 	bl	8000d3c <__aeabi_fmul>
 800f99c:	4941      	ldr	r1, [pc, #260]	; (800faa4 <atanf+0x200>)
 800f99e:	f7f1 f8c3 	bl	8000b28 <__aeabi_fsub>
 800f9a2:	4629      	mov	r1, r5
 800f9a4:	f7f1 f9ca 	bl	8000d3c <__aeabi_fmul>
 800f9a8:	493f      	ldr	r1, [pc, #252]	; (800faa8 <atanf+0x204>)
 800f9aa:	f7f1 f8bd 	bl	8000b28 <__aeabi_fsub>
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	f7f1 f9c4 	bl	8000d3c <__aeabi_fmul>
 800f9b4:	493d      	ldr	r1, [pc, #244]	; (800faac <atanf+0x208>)
 800f9b6:	f7f1 f8b7 	bl	8000b28 <__aeabi_fsub>
 800f9ba:	4629      	mov	r1, r5
 800f9bc:	f7f1 f9be 	bl	8000d3c <__aeabi_fmul>
 800f9c0:	1c73      	adds	r3, r6, #1
 800f9c2:	4601      	mov	r1, r0
 800f9c4:	4640      	mov	r0, r8
 800f9c6:	d139      	bne.n	800fa3c <atanf+0x198>
 800f9c8:	f7f1 f8b0 	bl	8000b2c <__addsf3>
 800f9cc:	4621      	mov	r1, r4
 800f9ce:	f7f1 f9b5 	bl	8000d3c <__aeabi_fmul>
 800f9d2:	4601      	mov	r1, r0
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f7f1 f8a7 	bl	8000b28 <__aeabi_fsub>
 800f9da:	e772      	b.n	800f8c2 <atanf+0x1e>
 800f9dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f9e0:	f7f1 f8a2 	bl	8000b28 <__aeabi_fsub>
 800f9e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f9e8:	4605      	mov	r5, r0
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	f7f1 f89e 	bl	8000b2c <__addsf3>
 800f9f0:	4601      	mov	r1, r0
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	f7f1 fa56 	bl	8000ea4 <__aeabi_fdiv>
 800f9f8:	2601      	movs	r6, #1
 800f9fa:	4604      	mov	r4, r0
 800f9fc:	e799      	b.n	800f932 <atanf+0x8e>
 800f9fe:	4b2c      	ldr	r3, [pc, #176]	; (800fab0 <atanf+0x20c>)
 800fa00:	429d      	cmp	r5, r3
 800fa02:	dc14      	bgt.n	800fa2e <atanf+0x18a>
 800fa04:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800fa08:	f7f1 f88e 	bl	8000b28 <__aeabi_fsub>
 800fa0c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800fa10:	4605      	mov	r5, r0
 800fa12:	4620      	mov	r0, r4
 800fa14:	f7f1 f992 	bl	8000d3c <__aeabi_fmul>
 800fa18:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fa1c:	f7f1 f886 	bl	8000b2c <__addsf3>
 800fa20:	4601      	mov	r1, r0
 800fa22:	4628      	mov	r0, r5
 800fa24:	f7f1 fa3e 	bl	8000ea4 <__aeabi_fdiv>
 800fa28:	2602      	movs	r6, #2
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	e781      	b.n	800f932 <atanf+0x8e>
 800fa2e:	4601      	mov	r1, r0
 800fa30:	4820      	ldr	r0, [pc, #128]	; (800fab4 <atanf+0x210>)
 800fa32:	f7f1 fa37 	bl	8000ea4 <__aeabi_fdiv>
 800fa36:	2603      	movs	r6, #3
 800fa38:	4604      	mov	r4, r0
 800fa3a:	e77a      	b.n	800f932 <atanf+0x8e>
 800fa3c:	f7f1 f876 	bl	8000b2c <__addsf3>
 800fa40:	4621      	mov	r1, r4
 800fa42:	f7f1 f97b 	bl	8000d3c <__aeabi_fmul>
 800fa46:	4b1c      	ldr	r3, [pc, #112]	; (800fab8 <atanf+0x214>)
 800fa48:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800fa4c:	f7f1 f86c 	bl	8000b28 <__aeabi_fsub>
 800fa50:	4621      	mov	r1, r4
 800fa52:	f7f1 f869 	bl	8000b28 <__aeabi_fsub>
 800fa56:	4b19      	ldr	r3, [pc, #100]	; (800fabc <atanf+0x218>)
 800fa58:	4601      	mov	r1, r0
 800fa5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fa5e:	f7f1 f863 	bl	8000b28 <__aeabi_fsub>
 800fa62:	2f00      	cmp	r7, #0
 800fa64:	4604      	mov	r4, r0
 800fa66:	f6bf af32 	bge.w	800f8ce <atanf+0x2a>
 800fa6a:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800fa6e:	e72e      	b.n	800f8ce <atanf+0x2a>
 800fa70:	4c13      	ldr	r4, [pc, #76]	; (800fac0 <atanf+0x21c>)
 800fa72:	e72c      	b.n	800f8ce <atanf+0x2a>
 800fa74:	bfc90fdb 	.word	0xbfc90fdb
 800fa78:	3edfffff 	.word	0x3edfffff
 800fa7c:	7149f2ca 	.word	0x7149f2ca
 800fa80:	3f97ffff 	.word	0x3f97ffff
 800fa84:	3c8569d7 	.word	0x3c8569d7
 800fa88:	3d4bda59 	.word	0x3d4bda59
 800fa8c:	3d886b35 	.word	0x3d886b35
 800fa90:	3dba2e6e 	.word	0x3dba2e6e
 800fa94:	3e124925 	.word	0x3e124925
 800fa98:	3eaaaaab 	.word	0x3eaaaaab
 800fa9c:	bd15a221 	.word	0xbd15a221
 800faa0:	3d6ef16b 	.word	0x3d6ef16b
 800faa4:	3d9d8795 	.word	0x3d9d8795
 800faa8:	3de38e38 	.word	0x3de38e38
 800faac:	3e4ccccd 	.word	0x3e4ccccd
 800fab0:	401bffff 	.word	0x401bffff
 800fab4:	bf800000 	.word	0xbf800000
 800fab8:	08010e30 	.word	0x08010e30
 800fabc:	08010e20 	.word	0x08010e20
 800fac0:	3fc90fdb 	.word	0x3fc90fdb

0800fac4 <fabsf>:
 800fac4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fac8:	4770      	bx	lr
	...

0800facc <floorf>:
 800facc:	b570      	push	{r4, r5, r6, lr}
 800face:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800fad2:	0df5      	lsrs	r5, r6, #23
 800fad4:	3d7f      	subs	r5, #127	; 0x7f
 800fad6:	2d16      	cmp	r5, #22
 800fad8:	4601      	mov	r1, r0
 800fada:	4604      	mov	r4, r0
 800fadc:	dc26      	bgt.n	800fb2c <floorf+0x60>
 800fade:	2d00      	cmp	r5, #0
 800fae0:	da0e      	bge.n	800fb00 <floorf+0x34>
 800fae2:	4917      	ldr	r1, [pc, #92]	; (800fb40 <floorf+0x74>)
 800fae4:	f7f1 f822 	bl	8000b2c <__addsf3>
 800fae8:	2100      	movs	r1, #0
 800faea:	f7f1 fae3 	bl	80010b4 <__aeabi_fcmpgt>
 800faee:	b128      	cbz	r0, 800fafc <floorf+0x30>
 800faf0:	2c00      	cmp	r4, #0
 800faf2:	da23      	bge.n	800fb3c <floorf+0x70>
 800faf4:	4b13      	ldr	r3, [pc, #76]	; (800fb44 <floorf+0x78>)
 800faf6:	2e00      	cmp	r6, #0
 800faf8:	bf18      	it	ne
 800fafa:	461c      	movne	r4, r3
 800fafc:	4621      	mov	r1, r4
 800fafe:	e01b      	b.n	800fb38 <floorf+0x6c>
 800fb00:	4e11      	ldr	r6, [pc, #68]	; (800fb48 <floorf+0x7c>)
 800fb02:	412e      	asrs	r6, r5
 800fb04:	4230      	tst	r0, r6
 800fb06:	d017      	beq.n	800fb38 <floorf+0x6c>
 800fb08:	490d      	ldr	r1, [pc, #52]	; (800fb40 <floorf+0x74>)
 800fb0a:	f7f1 f80f 	bl	8000b2c <__addsf3>
 800fb0e:	2100      	movs	r1, #0
 800fb10:	f7f1 fad0 	bl	80010b4 <__aeabi_fcmpgt>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	d0f1      	beq.n	800fafc <floorf+0x30>
 800fb18:	2c00      	cmp	r4, #0
 800fb1a:	bfbe      	ittt	lt
 800fb1c:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800fb20:	fa43 f505 	asrlt.w	r5, r3, r5
 800fb24:	1964      	addlt	r4, r4, r5
 800fb26:	ea24 0406 	bic.w	r4, r4, r6
 800fb2a:	e7e7      	b.n	800fafc <floorf+0x30>
 800fb2c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800fb30:	d302      	bcc.n	800fb38 <floorf+0x6c>
 800fb32:	f7f0 fffb 	bl	8000b2c <__addsf3>
 800fb36:	4601      	mov	r1, r0
 800fb38:	4608      	mov	r0, r1
 800fb3a:	bd70      	pop	{r4, r5, r6, pc}
 800fb3c:	2400      	movs	r4, #0
 800fb3e:	e7dd      	b.n	800fafc <floorf+0x30>
 800fb40:	7149f2ca 	.word	0x7149f2ca
 800fb44:	bf800000 	.word	0xbf800000
 800fb48:	007fffff 	.word	0x007fffff

0800fb4c <scalbnf>:
 800fb4c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800fb50:	b510      	push	{r4, lr}
 800fb52:	4602      	mov	r2, r0
 800fb54:	460c      	mov	r4, r1
 800fb56:	d028      	beq.n	800fbaa <scalbnf+0x5e>
 800fb58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fb5c:	d304      	bcc.n	800fb68 <scalbnf+0x1c>
 800fb5e:	4601      	mov	r1, r0
 800fb60:	f7f0 ffe4 	bl	8000b2c <__addsf3>
 800fb64:	4602      	mov	r2, r0
 800fb66:	e020      	b.n	800fbaa <scalbnf+0x5e>
 800fb68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fb6c:	d215      	bcs.n	800fb9a <scalbnf+0x4e>
 800fb6e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800fb72:	f7f1 f8e3 	bl	8000d3c <__aeabi_fmul>
 800fb76:	4b18      	ldr	r3, [pc, #96]	; (800fbd8 <scalbnf+0x8c>)
 800fb78:	4602      	mov	r2, r0
 800fb7a:	429c      	cmp	r4, r3
 800fb7c:	db22      	blt.n	800fbc4 <scalbnf+0x78>
 800fb7e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fb82:	3b19      	subs	r3, #25
 800fb84:	4423      	add	r3, r4
 800fb86:	2bfe      	cmp	r3, #254	; 0xfe
 800fb88:	dd09      	ble.n	800fb9e <scalbnf+0x52>
 800fb8a:	4611      	mov	r1, r2
 800fb8c:	4813      	ldr	r0, [pc, #76]	; (800fbdc <scalbnf+0x90>)
 800fb8e:	f000 f830 	bl	800fbf2 <copysignf>
 800fb92:	4912      	ldr	r1, [pc, #72]	; (800fbdc <scalbnf+0x90>)
 800fb94:	f7f1 f8d2 	bl	8000d3c <__aeabi_fmul>
 800fb98:	e7e4      	b.n	800fb64 <scalbnf+0x18>
 800fb9a:	0ddb      	lsrs	r3, r3, #23
 800fb9c:	e7f2      	b.n	800fb84 <scalbnf+0x38>
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	dd05      	ble.n	800fbae <scalbnf+0x62>
 800fba2:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800fba6:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800fbaa:	4610      	mov	r0, r2
 800fbac:	bd10      	pop	{r4, pc}
 800fbae:	f113 0f16 	cmn.w	r3, #22
 800fbb2:	da09      	bge.n	800fbc8 <scalbnf+0x7c>
 800fbb4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fbb8:	429c      	cmp	r4, r3
 800fbba:	4611      	mov	r1, r2
 800fbbc:	dce6      	bgt.n	800fb8c <scalbnf+0x40>
 800fbbe:	4808      	ldr	r0, [pc, #32]	; (800fbe0 <scalbnf+0x94>)
 800fbc0:	f000 f817 	bl	800fbf2 <copysignf>
 800fbc4:	4906      	ldr	r1, [pc, #24]	; (800fbe0 <scalbnf+0x94>)
 800fbc6:	e7e5      	b.n	800fb94 <scalbnf+0x48>
 800fbc8:	3319      	adds	r3, #25
 800fbca:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800fbce:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800fbd2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800fbd6:	e7dd      	b.n	800fb94 <scalbnf+0x48>
 800fbd8:	ffff3cb0 	.word	0xffff3cb0
 800fbdc:	7149f2ca 	.word	0x7149f2ca
 800fbe0:	0da24260 	.word	0x0da24260

0800fbe4 <copysign>:
 800fbe4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800fbe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbec:	ea42 0103 	orr.w	r1, r2, r3
 800fbf0:	4770      	bx	lr

0800fbf2 <copysignf>:
 800fbf2:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800fbf6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fbfa:	4308      	orrs	r0, r1
 800fbfc:	4770      	bx	lr
	...

0800fc00 <__errno>:
 800fc00:	4b01      	ldr	r3, [pc, #4]	; (800fc08 <__errno+0x8>)
 800fc02:	6818      	ldr	r0, [r3, #0]
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop
 800fc08:	20000184 	.word	0x20000184

0800fc0c <_sbrk>:
 800fc0c:	4b04      	ldr	r3, [pc, #16]	; (800fc20 <_sbrk+0x14>)
 800fc0e:	4602      	mov	r2, r0
 800fc10:	6819      	ldr	r1, [r3, #0]
 800fc12:	b909      	cbnz	r1, 800fc18 <_sbrk+0xc>
 800fc14:	4903      	ldr	r1, [pc, #12]	; (800fc24 <_sbrk+0x18>)
 800fc16:	6019      	str	r1, [r3, #0]
 800fc18:	6818      	ldr	r0, [r3, #0]
 800fc1a:	4402      	add	r2, r0
 800fc1c:	601a      	str	r2, [r3, #0]
 800fc1e:	4770      	bx	lr
 800fc20:	20000ab0 	.word	0x20000ab0
 800fc24:	20001468 	.word	0x20001468

0800fc28 <_init>:
 800fc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc2a:	bf00      	nop
 800fc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc2e:	bc08      	pop	{r3}
 800fc30:	469e      	mov	lr, r3
 800fc32:	4770      	bx	lr

0800fc34 <_fini>:
 800fc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc36:	bf00      	nop
 800fc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc3a:	bc08      	pop	{r3}
 800fc3c:	469e      	mov	lr, r3
 800fc3e:	4770      	bx	lr
