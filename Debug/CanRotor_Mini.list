
CanRotor_Mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b178  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  0800b288  0800b288  0001b288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800bbc0  0800bbc0  0001bbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800bbc4  0800bbc4  0001bbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  20000000  0800bbc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000cac  20000480  0800c044  00020480  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  2000112c  0800c044  0002112c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003bd72  00000000  00000000  000204a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005c38  00000000  00000000  0005c217  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ed07  00000000  00000000  00061e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001130  00000000  00000000  00070b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001828  00000000  00000000  00071c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000cb9c  00000000  00000000  000734b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005a66  00000000  00000000  0008004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00085ab2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000424c  00000000  00000000  00085b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000014d  00000000  00000000  00089d7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000480 	.word	0x20000480
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b270 	.word	0x0800b270

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000484 	.word	0x20000484
 800014c:	0800b270 	.word	0x0800b270

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2f>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a38:	bf24      	itt	cs
 8000a3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a42:	d90d      	bls.n	8000a60 <__aeabi_d2f+0x30>
 8000a44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a58:	bf08      	it	eq
 8000a5a:	f020 0001 	biceq.w	r0, r0, #1
 8000a5e:	4770      	bx	lr
 8000a60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a64:	d121      	bne.n	8000aaa <__aeabi_d2f+0x7a>
 8000a66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a6a:	bfbc      	itt	lt
 8000a6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	4770      	bxlt	lr
 8000a72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a7a:	f1c2 0218 	rsb	r2, r2, #24
 8000a7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a86:	fa20 f002 	lsr.w	r0, r0, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	f040 0001 	orrne.w	r0, r0, #1
 8000a90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a9c:	ea40 000c 	orr.w	r0, r0, ip
 8000aa0:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa8:	e7cc      	b.n	8000a44 <__aeabi_d2f+0x14>
 8000aaa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aae:	d107      	bne.n	8000ac0 <__aeabi_d2f+0x90>
 8000ab0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab4:	bf1e      	ittt	ne
 8000ab6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000abe:	4770      	bxne	lr
 8000ac0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_frsub>:
 8000ad0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ad4:	e002      	b.n	8000adc <__addsf3>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_fsub>:
 8000ad8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000adc <__addsf3>:
 8000adc:	0042      	lsls	r2, r0, #1
 8000ade:	bf1f      	itttt	ne
 8000ae0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ae4:	ea92 0f03 	teqne	r2, r3
 8000ae8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af0:	d06a      	beq.n	8000bc8 <__addsf3+0xec>
 8000af2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000af6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000afa:	bfc1      	itttt	gt
 8000afc:	18d2      	addgt	r2, r2, r3
 8000afe:	4041      	eorgt	r1, r0
 8000b00:	4048      	eorgt	r0, r1
 8000b02:	4041      	eorgt	r1, r0
 8000b04:	bfb8      	it	lt
 8000b06:	425b      	neglt	r3, r3
 8000b08:	2b19      	cmp	r3, #25
 8000b0a:	bf88      	it	hi
 8000b0c:	4770      	bxhi	lr
 8000b0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b2a:	bf18      	it	ne
 8000b2c:	4249      	negne	r1, r1
 8000b2e:	ea92 0f03 	teq	r2, r3
 8000b32:	d03f      	beq.n	8000bb4 <__addsf3+0xd8>
 8000b34:	f1a2 0201 	sub.w	r2, r2, #1
 8000b38:	fa41 fc03 	asr.w	ip, r1, r3
 8000b3c:	eb10 000c 	adds.w	r0, r0, ip
 8000b40:	f1c3 0320 	rsb	r3, r3, #32
 8000b44:	fa01 f103 	lsl.w	r1, r1, r3
 8000b48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b4c:	d502      	bpl.n	8000b54 <__addsf3+0x78>
 8000b4e:	4249      	negs	r1, r1
 8000b50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b58:	d313      	bcc.n	8000b82 <__addsf3+0xa6>
 8000b5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b5e:	d306      	bcc.n	8000b6e <__addsf3+0x92>
 8000b60:	0840      	lsrs	r0, r0, #1
 8000b62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b66:	f102 0201 	add.w	r2, r2, #1
 8000b6a:	2afe      	cmp	r2, #254	; 0xfe
 8000b6c:	d251      	bcs.n	8000c12 <__addsf3+0x136>
 8000b6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b76:	bf08      	it	eq
 8000b78:	f020 0001 	biceq.w	r0, r0, #1
 8000b7c:	ea40 0003 	orr.w	r0, r0, r3
 8000b80:	4770      	bx	lr
 8000b82:	0049      	lsls	r1, r1, #1
 8000b84:	eb40 0000 	adc.w	r0, r0, r0
 8000b88:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	d1ed      	bne.n	8000b6e <__addsf3+0x92>
 8000b92:	fab0 fc80 	clz	ip, r0
 8000b96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ba2:	bfaa      	itet	ge
 8000ba4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba8:	4252      	neglt	r2, r2
 8000baa:	4318      	orrge	r0, r3
 8000bac:	bfbc      	itt	lt
 8000bae:	40d0      	lsrlt	r0, r2
 8000bb0:	4318      	orrlt	r0, r3
 8000bb2:	4770      	bx	lr
 8000bb4:	f092 0f00 	teq	r2, #0
 8000bb8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bbc:	bf06      	itte	eq
 8000bbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bc2:	3201      	addeq	r2, #1
 8000bc4:	3b01      	subne	r3, #1
 8000bc6:	e7b5      	b.n	8000b34 <__addsf3+0x58>
 8000bc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	bf18      	it	ne
 8000bd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd6:	d021      	beq.n	8000c1c <__addsf3+0x140>
 8000bd8:	ea92 0f03 	teq	r2, r3
 8000bdc:	d004      	beq.n	8000be8 <__addsf3+0x10c>
 8000bde:	f092 0f00 	teq	r2, #0
 8000be2:	bf08      	it	eq
 8000be4:	4608      	moveq	r0, r1
 8000be6:	4770      	bx	lr
 8000be8:	ea90 0f01 	teq	r0, r1
 8000bec:	bf1c      	itt	ne
 8000bee:	2000      	movne	r0, #0
 8000bf0:	4770      	bxne	lr
 8000bf2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bf6:	d104      	bne.n	8000c02 <__addsf3+0x126>
 8000bf8:	0040      	lsls	r0, r0, #1
 8000bfa:	bf28      	it	cs
 8000bfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c00:	4770      	bx	lr
 8000c02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c06:	bf3c      	itt	cc
 8000c08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bxcc	lr
 8000c0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1a:	4770      	bx	lr
 8000c1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c20:	bf16      	itet	ne
 8000c22:	4608      	movne	r0, r1
 8000c24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c28:	4601      	movne	r1, r0
 8000c2a:	0242      	lsls	r2, r0, #9
 8000c2c:	bf06      	itte	eq
 8000c2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c32:	ea90 0f01 	teqeq	r0, r1
 8000c36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_ui2f>:
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e004      	b.n	8000c4c <__aeabi_i2f+0x8>
 8000c42:	bf00      	nop

08000c44 <__aeabi_i2f>:
 8000c44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c48:	bf48      	it	mi
 8000c4a:	4240      	negmi	r0, r0
 8000c4c:	ea5f 0c00 	movs.w	ip, r0
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c58:	4601      	mov	r1, r0
 8000c5a:	f04f 0000 	mov.w	r0, #0
 8000c5e:	e01c      	b.n	8000c9a <__aeabi_l2f+0x2a>

08000c60 <__aeabi_ul2f>:
 8000c60:	ea50 0201 	orrs.w	r2, r0, r1
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e00a      	b.n	8000c84 <__aeabi_l2f+0x14>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_l2f>:
 8000c70:	ea50 0201 	orrs.w	r2, r0, r1
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__aeabi_l2f+0x14>
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	ea5f 0c01 	movs.w	ip, r1
 8000c88:	bf02      	ittt	eq
 8000c8a:	4684      	moveq	ip, r0
 8000c8c:	4601      	moveq	r1, r0
 8000c8e:	2000      	moveq	r0, #0
 8000c90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c94:	bf08      	it	eq
 8000c96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c9e:	fabc f28c 	clz	r2, ip
 8000ca2:	3a08      	subs	r2, #8
 8000ca4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca8:	db10      	blt.n	8000ccc <__aeabi_l2f+0x5c>
 8000caa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cae:	4463      	add	r3, ip
 8000cb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cb4:	f1c2 0220 	rsb	r2, r2, #32
 8000cb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	eb43 0002 	adc.w	r0, r3, r2
 8000cc4:	bf08      	it	eq
 8000cc6:	f020 0001 	biceq.w	r0, r0, #1
 8000cca:	4770      	bx	lr
 8000ccc:	f102 0220 	add.w	r2, r2, #32
 8000cd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd4:	f1c2 0220 	rsb	r2, r2, #32
 8000cd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cdc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce0:	eb43 0002 	adc.w	r0, r3, r2
 8000ce4:	bf08      	it	eq
 8000ce6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cea:	4770      	bx	lr

08000cec <__aeabi_fmul>:
 8000cec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cf4:	bf1e      	ittt	ne
 8000cf6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cfa:	ea92 0f0c 	teqne	r2, ip
 8000cfe:	ea93 0f0c 	teqne	r3, ip
 8000d02:	d06f      	beq.n	8000de4 <__aeabi_fmul+0xf8>
 8000d04:	441a      	add	r2, r3
 8000d06:	ea80 0c01 	eor.w	ip, r0, r1
 8000d0a:	0240      	lsls	r0, r0, #9
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d12:	d01e      	beq.n	8000d52 <__aeabi_fmul+0x66>
 8000d14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d18:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d1c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d20:	fba0 3101 	umull	r3, r1, r0, r1
 8000d24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d28:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d2c:	bf3e      	ittt	cc
 8000d2e:	0049      	lslcc	r1, r1, #1
 8000d30:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d34:	005b      	lslcc	r3, r3, #1
 8000d36:	ea40 0001 	orr.w	r0, r0, r1
 8000d3a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d3e:	2afd      	cmp	r2, #253	; 0xfd
 8000d40:	d81d      	bhi.n	8000d7e <__aeabi_fmul+0x92>
 8000d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4a:	bf08      	it	eq
 8000d4c:	f020 0001 	biceq.w	r0, r0, #1
 8000d50:	4770      	bx	lr
 8000d52:	f090 0f00 	teq	r0, #0
 8000d56:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d5a:	bf08      	it	eq
 8000d5c:	0249      	lsleq	r1, r1, #9
 8000d5e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d62:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d66:	3a7f      	subs	r2, #127	; 0x7f
 8000d68:	bfc2      	ittt	gt
 8000d6a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d6e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d72:	4770      	bxgt	lr
 8000d74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	3a01      	subs	r2, #1
 8000d7e:	dc5d      	bgt.n	8000e3c <__aeabi_fmul+0x150>
 8000d80:	f112 0f19 	cmn.w	r2, #25
 8000d84:	bfdc      	itt	le
 8000d86:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d8a:	4770      	bxle	lr
 8000d8c:	f1c2 0200 	rsb	r2, r2, #0
 8000d90:	0041      	lsls	r1, r0, #1
 8000d92:	fa21 f102 	lsr.w	r1, r1, r2
 8000d96:	f1c2 0220 	rsb	r2, r2, #32
 8000d9a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d9e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000da2:	f140 0000 	adc.w	r0, r0, #0
 8000da6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000daa:	bf08      	it	eq
 8000dac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db0:	4770      	bx	lr
 8000db2:	f092 0f00 	teq	r2, #0
 8000db6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0040      	lsleq	r0, r0, #1
 8000dbe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dc2:	3a01      	subeq	r2, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xce>
 8000dc6:	ea40 000c 	orr.w	r0, r0, ip
 8000dca:	f093 0f00 	teq	r3, #0
 8000dce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0049      	lsleq	r1, r1, #1
 8000dd6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dda:	3b01      	subeq	r3, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fmul+0xe6>
 8000dde:	ea41 010c 	orr.w	r1, r1, ip
 8000de2:	e78f      	b.n	8000d04 <__aeabi_fmul+0x18>
 8000de4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de8:	ea92 0f0c 	teq	r2, ip
 8000dec:	bf18      	it	ne
 8000dee:	ea93 0f0c 	teqne	r3, ip
 8000df2:	d00a      	beq.n	8000e0a <__aeabi_fmul+0x11e>
 8000df4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df8:	bf18      	it	ne
 8000dfa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	d1d8      	bne.n	8000db2 <__aeabi_fmul+0xc6>
 8000e00:	ea80 0001 	eor.w	r0, r0, r1
 8000e04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	bf17      	itett	ne
 8000e10:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e14:	4608      	moveq	r0, r1
 8000e16:	f091 0f00 	teqne	r1, #0
 8000e1a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e1e:	d014      	beq.n	8000e4a <__aeabi_fmul+0x15e>
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	d101      	bne.n	8000e2a <__aeabi_fmul+0x13e>
 8000e26:	0242      	lsls	r2, r0, #9
 8000e28:	d10f      	bne.n	8000e4a <__aeabi_fmul+0x15e>
 8000e2a:	ea93 0f0c 	teq	r3, ip
 8000e2e:	d103      	bne.n	8000e38 <__aeabi_fmul+0x14c>
 8000e30:	024b      	lsls	r3, r1, #9
 8000e32:	bf18      	it	ne
 8000e34:	4608      	movne	r0, r1
 8000e36:	d108      	bne.n	8000e4a <__aeabi_fmul+0x15e>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	4770      	bx	lr
 8000e4a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fdiv>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d069      	beq.n	8000f40 <__aeabi_fdiv+0xec>
 8000e6c:	eba2 0203 	sub.w	r2, r2, r3
 8000e70:	ea80 0c01 	eor.w	ip, r0, r1
 8000e74:	0249      	lsls	r1, r1, #9
 8000e76:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e7a:	d037      	beq.n	8000eec <__aeabi_fdiv+0x98>
 8000e7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e80:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e84:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	bf38      	it	cc
 8000e90:	005b      	lslcc	r3, r3, #1
 8000e92:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e96:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	bf24      	itt	cs
 8000e9e:	1a5b      	subcs	r3, r3, r1
 8000ea0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ea4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea8:	bf24      	itt	cs
 8000eaa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eb2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eb6:	bf24      	itt	cs
 8000eb8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ebc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	bf18      	it	ne
 8000ed2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ed6:	d1e0      	bne.n	8000e9a <__aeabi_fdiv+0x46>
 8000ed8:	2afd      	cmp	r2, #253	; 0xfd
 8000eda:	f63f af50 	bhi.w	8000d7e <__aeabi_fmul+0x92>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ee4:	bf08      	it	eq
 8000ee6:	f020 0001 	biceq.w	r0, r0, #1
 8000eea:	4770      	bx	lr
 8000eec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ef4:	327f      	adds	r2, #127	; 0x7f
 8000ef6:	bfc2      	ittt	gt
 8000ef8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000efc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f00:	4770      	bxgt	lr
 8000f02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	3a01      	subs	r2, #1
 8000f0c:	e737      	b.n	8000d7e <__aeabi_fmul+0x92>
 8000f0e:	f092 0f00 	teq	r2, #0
 8000f12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0040      	lsleq	r0, r0, #1
 8000f1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f1e:	3a01      	subeq	r2, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xc2>
 8000f22:	ea40 000c 	orr.w	r0, r0, ip
 8000f26:	f093 0f00 	teq	r3, #0
 8000f2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	bf02      	ittt	eq
 8000f30:	0049      	lsleq	r1, r1, #1
 8000f32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f36:	3b01      	subeq	r3, #1
 8000f38:	d0f9      	beq.n	8000f2e <__aeabi_fdiv+0xda>
 8000f3a:	ea41 010c 	orr.w	r1, r1, ip
 8000f3e:	e795      	b.n	8000e6c <__aeabi_fdiv+0x18>
 8000f40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f44:	ea92 0f0c 	teq	r2, ip
 8000f48:	d108      	bne.n	8000f5c <__aeabi_fdiv+0x108>
 8000f4a:	0242      	lsls	r2, r0, #9
 8000f4c:	f47f af7d 	bne.w	8000e4a <__aeabi_fmul+0x15e>
 8000f50:	ea93 0f0c 	teq	r3, ip
 8000f54:	f47f af70 	bne.w	8000e38 <__aeabi_fmul+0x14c>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e776      	b.n	8000e4a <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	d104      	bne.n	8000f6c <__aeabi_fdiv+0x118>
 8000f62:	024b      	lsls	r3, r1, #9
 8000f64:	f43f af4c 	beq.w	8000e00 <__aeabi_fmul+0x114>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e76e      	b.n	8000e4a <__aeabi_fmul+0x15e>
 8000f6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f70:	bf18      	it	ne
 8000f72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	d1ca      	bne.n	8000f0e <__aeabi_fdiv+0xba>
 8000f78:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f7c:	f47f af5c 	bne.w	8000e38 <__aeabi_fmul+0x14c>
 8000f80:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f84:	f47f af3c 	bne.w	8000e00 <__aeabi_fmul+0x114>
 8000f88:	e75f      	b.n	8000e4a <__aeabi_fmul+0x15e>
 8000f8a:	bf00      	nop

08000f8c <__gesf2>:
 8000f8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000f90:	e006      	b.n	8000fa0 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__lesf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	e002      	b.n	8000fa0 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__cmpsf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fa4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb0:	bf18      	it	ne
 8000fb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fb6:	d011      	beq.n	8000fdc <__cmpsf2+0x40>
 8000fb8:	b001      	add	sp, #4
 8000fba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fbe:	bf18      	it	ne
 8000fc0:	ea90 0f01 	teqne	r0, r1
 8000fc4:	bf58      	it	pl
 8000fc6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fca:	bf88      	it	hi
 8000fcc:	17c8      	asrhi	r0, r1, #31
 8000fce:	bf38      	it	cc
 8000fd0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fd4:	bf18      	it	ne
 8000fd6:	f040 0001 	orrne.w	r0, r0, #1
 8000fda:	4770      	bx	lr
 8000fdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe0:	d102      	bne.n	8000fe8 <__cmpsf2+0x4c>
 8000fe2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fe6:	d105      	bne.n	8000ff4 <__cmpsf2+0x58>
 8000fe8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fec:	d1e4      	bne.n	8000fb8 <__cmpsf2+0x1c>
 8000fee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ff2:	d0e1      	beq.n	8000fb8 <__cmpsf2+0x1c>
 8000ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <__aeabi_cfrcmple>:
 8000ffc:	4684      	mov	ip, r0
 8000ffe:	4608      	mov	r0, r1
 8001000:	4661      	mov	r1, ip
 8001002:	e7ff      	b.n	8001004 <__aeabi_cfcmpeq>

08001004 <__aeabi_cfcmpeq>:
 8001004:	b50f      	push	{r0, r1, r2, r3, lr}
 8001006:	f7ff ffc9 	bl	8000f9c <__cmpsf2>
 800100a:	2800      	cmp	r0, #0
 800100c:	bf48      	it	mi
 800100e:	f110 0f00 	cmnmi.w	r0, #0
 8001012:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001014 <__aeabi_fcmpeq>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff fff4 	bl	8001004 <__aeabi_cfcmpeq>
 800101c:	bf0c      	ite	eq
 800101e:	2001      	moveq	r0, #1
 8001020:	2000      	movne	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmplt>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffea 	bl	8001004 <__aeabi_cfcmpeq>
 8001030:	bf34      	ite	cc
 8001032:	2001      	movcc	r0, #1
 8001034:	2000      	movcs	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmple>:
 800103c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001040:	f7ff ffe0 	bl	8001004 <__aeabi_cfcmpeq>
 8001044:	bf94      	ite	ls
 8001046:	2001      	movls	r0, #1
 8001048:	2000      	movhi	r0, #0
 800104a:	f85d fb08 	ldr.w	pc, [sp], #8
 800104e:	bf00      	nop

08001050 <__aeabi_fcmpge>:
 8001050:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001054:	f7ff ffd2 	bl	8000ffc <__aeabi_cfrcmple>
 8001058:	bf94      	ite	ls
 800105a:	2001      	movls	r0, #1
 800105c:	2000      	movhi	r0, #0
 800105e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001062:	bf00      	nop

08001064 <__aeabi_fcmpgt>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff ffc8 	bl	8000ffc <__aeabi_cfrcmple>
 800106c:	bf34      	ite	cc
 800106e:	2001      	movcc	r0, #1
 8001070:	2000      	movcs	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmpun>:
 8001078:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800107c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001080:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001084:	d102      	bne.n	800108c <__aeabi_fcmpun+0x14>
 8001086:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800108a:	d108      	bne.n	800109e <__aeabi_fcmpun+0x26>
 800108c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001090:	d102      	bne.n	8001098 <__aeabi_fcmpun+0x20>
 8001092:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001096:	d102      	bne.n	800109e <__aeabi_fcmpun+0x26>
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	f04f 0001 	mov.w	r0, #1
 80010a2:	4770      	bx	lr

080010a4 <__aeabi_f2iz>:
 80010a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ac:	d30f      	bcc.n	80010ce <__aeabi_f2iz+0x2a>
 80010ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010b6:	d90d      	bls.n	80010d4 <__aeabi_f2iz+0x30>
 80010b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	bf18      	it	ne
 80010ca:	4240      	negne	r0, r0
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2iz+0x3a>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d105      	bne.n	80010ea <__aeabi_f2iz+0x46>
 80010de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010e2:	bf08      	it	eq
 80010e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_InitTick+0x3c>)
{
 80010f4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f6:	7818      	ldrb	r0, [r3, #0]
 80010f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <HAL_InitTick+0x40>)
 8001102:	6810      	ldr	r0, [r2, #0]
 8001104:	fbb0 f0f3 	udiv	r0, r0, r3
 8001108:	f000 fb00 	bl	800170c <HAL_SYSTICK_Config>
 800110c:	4604      	mov	r4, r0
 800110e:	b958      	cbnz	r0, 8001128 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	2d0f      	cmp	r5, #15
 8001112:	d809      	bhi.n	8001128 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	4602      	mov	r2, r0
 8001116:	4629      	mov	r1, r5
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 fab6 	bl	800168c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <HAL_InitTick+0x44>)
 8001122:	4620      	mov	r0, r4
 8001124:	601d      	str	r5, [r3, #0]
 8001126:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001128:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800112a:	bd38      	pop	{r3, r4, r5, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20000410 	.word	0x20000410
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_Init+0x20>)
{
 800113a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001146:	f000 fa8f 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff ffd0 	bl	80010f0 <HAL_InitTick>
  HAL_MspInit();
 8001150:	f007 f81c 	bl	800818c <HAL_MspInit>
}
 8001154:	2000      	movs	r0, #0
 8001156:	bd08      	pop	{r3, pc}
 8001158:	40022000 	.word	0x40022000

0800115c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <HAL_IncTick+0x10>)
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_IncTick+0x14>)
 8001160:	6811      	ldr	r1, [r2, #0]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	440b      	add	r3, r1
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2000074c 	.word	0x2000074c
 8001170:	20000000 	.word	0x20000000

08001174 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001174:	4b01      	ldr	r3, [pc, #4]	; (800117c <HAL_GetTick+0x8>)
 8001176:	6818      	ldr	r0, [r3, #0]
}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000074c 	.word	0x2000074c

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b538      	push	{r3, r4, r5, lr}
 8001182:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff fff6 	bl	8001174 <HAL_GetTick>
 8001188:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800118c:	bf1e      	ittt	ne
 800118e:	4b04      	ldrne	r3, [pc, #16]	; (80011a0 <HAL_Delay+0x20>)
 8001190:	781b      	ldrbne	r3, [r3, #0]
 8001192:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	1b40      	subs	r0, r0, r5
 800119a:	4284      	cmp	r4, r0
 800119c:	d8fa      	bhi.n	8001194 <HAL_Delay+0x14>
  {
  }
}
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	20000000 	.word	0x20000000

080011a4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80011a6:	2600      	movs	r6, #0
{
 80011a8:	4604      	mov	r4, r0
 80011aa:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80011ac:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80011ae:	f7ff ffe1 	bl	8001174 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011b2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80011b4:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	05d2      	lsls	r2, r2, #23
 80011ba:	d508      	bpl.n	80011ce <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80011c0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c4:	f043 0320 	orr.w	r3, r3, #32
 80011c8:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80011ca:	b003      	add	sp, #12
 80011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	05d6      	lsls	r6, r2, #23
 80011d2:	d403      	bmi.n	80011dc <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011d6:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80011da:	d03b      	beq.n	8001254 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80011dc:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <HAL_ADC_PollForConversion+0x124>)
 80011de:	2002      	movs	r0, #2
 80011e0:	681e      	ldr	r6, [r3, #0]
 80011e2:	f001 fe55 	bl	8002e90 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	4a38      	ldr	r2, [pc, #224]	; (80012cc <HAL_ADC_PollForConversion+0x128>)
 80011ea:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80011ec:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80011f0:	4211      	tst	r1, r2
 80011f2:	4a37      	ldr	r2, [pc, #220]	; (80012d0 <HAL_ADC_PollForConversion+0x12c>)
 80011f4:	d14f      	bne.n	8001296 <HAL_ADC_PollForConversion+0xf2>
 80011f6:	68de      	ldr	r6, [r3, #12]
 80011f8:	4936      	ldr	r1, [pc, #216]	; (80012d4 <HAL_ADC_PollForConversion+0x130>)
 80011fa:	420e      	tst	r6, r1
 80011fc:	d14b      	bne.n	8001296 <HAL_ADC_PollForConversion+0xf2>
 80011fe:	6919      	ldr	r1, [r3, #16]
 8001200:	4211      	tst	r1, r2
 8001202:	d159      	bne.n	80012b8 <HAL_ADC_PollForConversion+0x114>
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <HAL_ADC_PollForConversion+0x134>)
 8001208:	421a      	tst	r2, r3
 800120a:	bf14      	ite	ne
 800120c:	2329      	movne	r3, #41	; 0x29
 800120e:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001210:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001214:	9b01      	ldr	r3, [sp, #4]
 8001216:	429e      	cmp	r6, r3
 8001218:	d920      	bls.n	800125c <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 800121a:	1c6b      	adds	r3, r5, #1
 800121c:	d005      	beq.n	800122a <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800121e:	b15d      	cbz	r5, 8001238 <HAL_ADC_PollForConversion+0x94>
 8001220:	f7ff ffa8 	bl	8001174 <HAL_GetTick>
 8001224:	1bc0      	subs	r0, r0, r7
 8001226:	4285      	cmp	r5, r0
 8001228:	d306      	bcc.n	8001238 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 800122a:	9b01      	ldr	r3, [sp, #4]
 800122c:	3301      	adds	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	e7f0      	b.n	8001214 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8001232:	1c68      	adds	r0, r5, #1
 8001234:	d00f      	beq.n	8001256 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001236:	b945      	cbnz	r5, 800124a <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001238:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 800123a:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8001242:	2300      	movs	r3, #0
 8001244:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 8001248:	e7bf      	b.n	80011ca <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800124a:	f7ff ff93 	bl	8001174 <HAL_GetTick>
 800124e:	1bc0      	subs	r0, r0, r7
 8001250:	4285      	cmp	r5, r0
 8001252:	d3f1      	bcc.n	8001238 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001254:	6822      	ldr	r2, [r4, #0]
 8001256:	6813      	ldr	r3, [r2, #0]
 8001258:	0799      	lsls	r1, r3, #30
 800125a:	d5ea      	bpl.n	8001232 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800125c:	f06f 0312 	mvn.w	r3, #18
 8001260:	6822      	ldr	r2, [r4, #0]
 8001262:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001264:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126a:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800126c:	6893      	ldr	r3, [r2, #8]
 800126e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001272:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001276:	d125      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x120>
 8001278:	68e3      	ldr	r3, [r4, #12]
 800127a:	bb1b      	cbnz	r3, 80012c4 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800127c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800127e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001282:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001284:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001286:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800128a:	d11b      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	62a3      	str	r3, [r4, #40]	; 0x28
 8001294:	e799      	b.n	80011ca <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001296:	6919      	ldr	r1, [r3, #16]
 8001298:	4211      	tst	r1, r2
 800129a:	d103      	bne.n	80012a4 <HAL_ADC_PollForConversion+0x100>
 800129c:	68d9      	ldr	r1, [r3, #12]
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_ADC_PollForConversion+0x134>)
 80012a0:	4211      	tst	r1, r2
 80012a2:	d00b      	beq.n	80012bc <HAL_ADC_PollForConversion+0x118>
 80012a4:	6919      	ldr	r1, [r3, #16]
 80012a6:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_ADC_PollForConversion+0x138>)
 80012a8:	4211      	tst	r1, r2
 80012aa:	d109      	bne.n	80012c0 <HAL_ADC_PollForConversion+0x11c>
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	4213      	tst	r3, r2
 80012b0:	bf14      	ite	ne
 80012b2:	23fc      	movne	r3, #252	; 0xfc
 80012b4:	2354      	moveq	r3, #84	; 0x54
 80012b6:	e7ab      	b.n	8001210 <HAL_ADC_PollForConversion+0x6c>
 80012b8:	2329      	movs	r3, #41	; 0x29
 80012ba:	e7a9      	b.n	8001210 <HAL_ADC_PollForConversion+0x6c>
 80012bc:	2354      	movs	r3, #84	; 0x54
 80012be:	e7a7      	b.n	8001210 <HAL_ADC_PollForConversion+0x6c>
 80012c0:	23fc      	movs	r3, #252	; 0xfc
 80012c2:	e7a5      	b.n	8001210 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 80012c4:	2000      	movs	r0, #0
 80012c6:	e780      	b.n	80011ca <HAL_ADC_PollForConversion+0x26>
 80012c8:	20000410 	.word	0x20000410
 80012cc:	24924924 	.word	0x24924924
 80012d0:	12492492 	.word	0x12492492
 80012d4:	00924924 	.word	0x00924924
 80012d8:	00492492 	.word	0x00492492
 80012dc:	00249249 	.word	0x00249249

080012e0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012e0:	6803      	ldr	r3, [r0, #0]
 80012e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80012e8:	2300      	movs	r3, #0
{ 
 80012ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80012ec:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d074      	beq.n	80013e0 <HAL_ADC_ConfigChannel+0xf8>
 80012f6:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012f8:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80012fa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80012fe:	2d06      	cmp	r5, #6
 8001300:	6802      	ldr	r2, [r0, #0]
 8001302:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001306:	680c      	ldr	r4, [r1, #0]
 8001308:	d825      	bhi.n	8001356 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800130a:	442b      	add	r3, r5
 800130c:	251f      	movs	r5, #31
 800130e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001310:	3b05      	subs	r3, #5
 8001312:	409d      	lsls	r5, r3
 8001314:	ea26 0505 	bic.w	r5, r6, r5
 8001318:	fa04 f303 	lsl.w	r3, r4, r3
 800131c:	432b      	orrs	r3, r5
 800131e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001320:	2c09      	cmp	r4, #9
 8001322:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001326:	688d      	ldr	r5, [r1, #8]
 8001328:	d92f      	bls.n	800138a <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800132a:	2607      	movs	r6, #7
 800132c:	4423      	add	r3, r4
 800132e:	68d1      	ldr	r1, [r2, #12]
 8001330:	3b1e      	subs	r3, #30
 8001332:	409e      	lsls	r6, r3
 8001334:	ea21 0106 	bic.w	r1, r1, r6
 8001338:	fa05 f303 	lsl.w	r3, r5, r3
 800133c:	430b      	orrs	r3, r1
 800133e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001340:	f1a4 0310 	sub.w	r3, r4, #16
 8001344:	2b01      	cmp	r3, #1
 8001346:	d92b      	bls.n	80013a0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001348:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800134a:	2200      	movs	r2, #0
 800134c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001350:	4618      	mov	r0, r3
 8001352:	b002      	add	sp, #8
 8001354:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001356:	2d0c      	cmp	r5, #12
 8001358:	d80b      	bhi.n	8001372 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800135a:	442b      	add	r3, r5
 800135c:	251f      	movs	r5, #31
 800135e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001360:	3b23      	subs	r3, #35	; 0x23
 8001362:	409d      	lsls	r5, r3
 8001364:	ea26 0505 	bic.w	r5, r6, r5
 8001368:	fa04 f303 	lsl.w	r3, r4, r3
 800136c:	432b      	orrs	r3, r5
 800136e:	6313      	str	r3, [r2, #48]	; 0x30
 8001370:	e7d6      	b.n	8001320 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001372:	442b      	add	r3, r5
 8001374:	251f      	movs	r5, #31
 8001376:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001378:	3b41      	subs	r3, #65	; 0x41
 800137a:	409d      	lsls	r5, r3
 800137c:	ea26 0505 	bic.w	r5, r6, r5
 8001380:	fa04 f303 	lsl.w	r3, r4, r3
 8001384:	432b      	orrs	r3, r5
 8001386:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001388:	e7ca      	b.n	8001320 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800138a:	2607      	movs	r6, #7
 800138c:	6911      	ldr	r1, [r2, #16]
 800138e:	4423      	add	r3, r4
 8001390:	409e      	lsls	r6, r3
 8001392:	ea21 0106 	bic.w	r1, r1, r6
 8001396:	fa05 f303 	lsl.w	r3, r5, r3
 800139a:	430b      	orrs	r3, r1
 800139c:	6113      	str	r3, [r2, #16]
 800139e:	e7cf      	b.n	8001340 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_ADC_ConfigChannel+0xfc>)
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d116      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013a6:	6893      	ldr	r3, [r2, #8]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	d4cd      	bmi.n	8001348 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013ac:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013ae:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013b4:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013b6:	d1c7      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_ADC_ConfigChannel+0x100>)
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <HAL_ADC_ConfigChannel+0x104>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	fbb3 f2f2 	udiv	r2, r3, r2
 80013c2:	230a      	movs	r3, #10
 80013c4:	4353      	muls	r3, r2
            wait_loop_index--;
 80013c6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80013c8:	9b01      	ldr	r3, [sp, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0bc      	beq.n	8001348 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	e7f8      	b.n	80013c6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013d6:	f043 0320 	orr.w	r3, r3, #32
 80013da:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e7b4      	b.n	800134a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80013e0:	2302      	movs	r3, #2
 80013e2:	e7b5      	b.n	8001350 <HAL_ADC_ConfigChannel+0x68>
 80013e4:	40012400 	.word	0x40012400
 80013e8:	20000410 	.word	0x20000410
 80013ec:	000f4240 	.word	0x000f4240

080013f0 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80013f0:	2300      	movs	r3, #0
{
 80013f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80013f4:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013f6:	6803      	ldr	r3, [r0, #0]
{
 80013f8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	07d2      	lsls	r2, r2, #31
 80013fe:	d502      	bpl.n	8001406 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001400:	2000      	movs	r0, #0
}
 8001402:	b002      	add	sp, #8
 8001404:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	f042 0201 	orr.w	r2, r2, #1
 800140c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <ADC_Enable+0x68>)
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <ADC_Enable+0x6c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001418:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800141a:	9b01      	ldr	r3, [sp, #4]
 800141c:	b9c3      	cbnz	r3, 8001450 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800141e:	f7ff fea9 	bl	8001174 <HAL_GetTick>
 8001422:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	689d      	ldr	r5, [r3, #8]
 8001428:	f015 0501 	ands.w	r5, r5, #1
 800142c:	d1e8      	bne.n	8001400 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800142e:	f7ff fea1 	bl	8001174 <HAL_GetTick>
 8001432:	1b80      	subs	r0, r0, r6
 8001434:	2802      	cmp	r0, #2
 8001436:	d9f5      	bls.n	8001424 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001438:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800143a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001446:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800144e:	e7d8      	b.n	8001402 <ADC_Enable+0x12>
      wait_loop_index--;
 8001450:	9b01      	ldr	r3, [sp, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	e7e0      	b.n	8001418 <ADC_Enable+0x28>
 8001456:	bf00      	nop
 8001458:	20000410 	.word	0x20000410
 800145c:	000f4240 	.word	0x000f4240

08001460 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001460:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001464:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001466:	2b01      	cmp	r3, #1
{
 8001468:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800146a:	d054      	beq.n	8001516 <HAL_ADC_Start+0xb6>
 800146c:	2301      	movs	r3, #1
 800146e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001472:	f7ff ffbd 	bl	80013f0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001476:	2800      	cmp	r0, #0
 8001478:	d149      	bne.n	800150e <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800147a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800147c:	4a27      	ldr	r2, [pc, #156]	; (800151c <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800147e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	4293      	cmp	r3, r2
 8001490:	d104      	bne.n	800149c <HAL_ADC_Start+0x3c>
 8001492:	4923      	ldr	r1, [pc, #140]	; (8001520 <HAL_ADC_Start+0xc0>)
 8001494:	684a      	ldr	r2, [r1, #4]
 8001496:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800149a:	d12e      	bne.n	80014fa <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800149c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800149e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80014a2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014a6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014a8:	bf41      	itttt	mi
 80014aa:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80014ac:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80014b0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80014b4:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014bc:	bf1c      	itt	ne
 80014be:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80014c0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80014c4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014cc:	f06f 0202 	mvn.w	r2, #2
 80014d0:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80014d8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80014dc:	d113      	bne.n	8001506 <HAL_ADC_Start+0xa6>
 80014de:	4a0f      	ldr	r2, [pc, #60]	; (800151c <HAL_ADC_Start+0xbc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d105      	bne.n	80014f0 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014e4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80014e8:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014ea:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80014ee:	d10a      	bne.n	8001506 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001500:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001502:	684a      	ldr	r2, [r1, #4]
 8001504:	e7cf      	b.n	80014a6 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800150c:	e7f3      	b.n	80014f6 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800150e:	2300      	movs	r3, #0
 8001510:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001514:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001516:	2002      	movs	r0, #2
}
 8001518:	bd10      	pop	{r4, pc}
 800151a:	bf00      	nop
 800151c:	40012800 	.word	0x40012800
 8001520:	40012400 	.word	0x40012400

08001524 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001524:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001526:	6803      	ldr	r3, [r0, #0]
{
 8001528:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	07d2      	lsls	r2, r2, #31
 800152e:	d401      	bmi.n	8001534 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001530:	2000      	movs	r0, #0
 8001532:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800153c:	f7ff fe1a 	bl	8001174 <HAL_GetTick>
 8001540:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	07db      	lsls	r3, r3, #31
 8001548:	d5f2      	bpl.n	8001530 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800154a:	f7ff fe13 	bl	8001174 <HAL_GetTick>
 800154e:	1b40      	subs	r0, r0, r5
 8001550:	2802      	cmp	r0, #2
 8001552:	d9f6      	bls.n	8001542 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001554:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001556:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001566:	bd38      	pop	{r3, r4, r5, pc}

08001568 <HAL_ADC_Init>:
{
 8001568:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800156a:	4604      	mov	r4, r0
 800156c:	2800      	cmp	r0, #0
 800156e:	d071      	beq.n	8001654 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001570:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001572:	b923      	cbnz	r3, 800157e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001574:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001576:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800157a:	f006 fe29 	bl	80081d0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff ffd0 	bl	8001524 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001584:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001586:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800158a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800158c:	d164      	bne.n	8001658 <HAL_ADC_Init+0xf0>
 800158e:	2800      	cmp	r0, #0
 8001590:	d162      	bne.n	8001658 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001592:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001594:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001598:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800159a:	f023 0302 	bic.w	r3, r3, #2
 800159e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80015a2:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015a4:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80015a6:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80015a8:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015aa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80015ae:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015b2:	d038      	beq.n	8001626 <HAL_ADC_Init+0xbe>
 80015b4:	2901      	cmp	r1, #1
 80015b6:	bf14      	ite	ne
 80015b8:	4606      	movne	r6, r0
 80015ba:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015be:	6965      	ldr	r5, [r4, #20]
 80015c0:	2d01      	cmp	r5, #1
 80015c2:	d107      	bne.n	80015d4 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d130      	bne.n	800162a <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015c8:	69a3      	ldr	r3, [r4, #24]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80015d0:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80015d4:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80015da:	685d      	ldr	r5, [r3, #4]
 80015dc:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80015e0:	ea45 0506 	orr.w	r5, r5, r6
 80015e4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80015e6:	689e      	ldr	r6, [r3, #8]
 80015e8:	4d1d      	ldr	r5, [pc, #116]	; (8001660 <HAL_ADC_Init+0xf8>)
 80015ea:	ea05 0506 	and.w	r5, r5, r6
 80015ee:	ea45 0502 	orr.w	r5, r5, r2
 80015f2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015f4:	d001      	beq.n	80015fa <HAL_ADC_Init+0x92>
 80015f6:	2901      	cmp	r1, #1
 80015f8:	d120      	bne.n	800163c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015fa:	6921      	ldr	r1, [r4, #16]
 80015fc:	3901      	subs	r1, #1
 80015fe:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001600:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001602:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001606:	4329      	orrs	r1, r5
 8001608:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_ADC_Init+0xfc>)
 800160e:	400b      	ands	r3, r1
 8001610:	429a      	cmp	r2, r3
 8001612:	d115      	bne.n	8001640 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8001614:	2300      	movs	r3, #0
 8001616:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800161a:	f023 0303 	bic.w	r3, r3, #3
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	62a3      	str	r3, [r4, #40]	; 0x28
 8001624:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001626:	460e      	mov	r6, r1
 8001628:	e7c9      	b.n	80015be <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800162c:	f043 0320 	orr.w	r3, r3, #32
 8001630:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001632:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	62e3      	str	r3, [r4, #44]	; 0x2c
 800163a:	e7cb      	b.n	80015d4 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 800163c:	2100      	movs	r1, #0
 800163e:	e7df      	b.n	8001600 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8001640:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001642:	f023 0312 	bic.w	r3, r3, #18
 8001646:	f043 0310 	orr.w	r3, r3, #16
 800164a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001654:	2001      	movs	r0, #1
}
 8001656:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001658:	f043 0310 	orr.w	r3, r3, #16
 800165c:	62a3      	str	r3, [r4, #40]	; 0x28
 800165e:	e7f9      	b.n	8001654 <HAL_ADC_Init+0xec>
 8001660:	ffe1f7fd 	.word	0xffe1f7fd
 8001664:	ff1f0efe 	.word	0xff1f0efe

08001668 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800166a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800166e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001676:	041b      	lsls	r3, r3, #16
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800167e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001682:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001684:	60d3      	str	r3, [r2, #12]
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b530      	push	{r4, r5, lr}
 8001690:	68dc      	ldr	r4, [r3, #12]
 8001692:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001696:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	2b04      	cmp	r3, #4
 800169e:	bf28      	it	cs
 80016a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a8:	bf98      	it	ls
 80016aa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	fa05 f303 	lsl.w	r3, r5, r3
 80016b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b4:	bf88      	it	hi
 80016b6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4019      	ands	r1, r3
 80016ba:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	fa05 f404 	lsl.w	r4, r5, r4
 80016c0:	3c01      	subs	r4, #1
 80016c2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80016c4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c6:	ea42 0201 	orr.w	r2, r2, r1
 80016ca:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	bfaf      	iteee	ge
 80016d0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	4b06      	ldrlt	r3, [pc, #24]	; (80016f0 <HAL_NVIC_SetPriority+0x64>)
 80016d6:	f000 000f 	andlt.w	r0, r0, #15
 80016da:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	bfa5      	ittet	ge
 80016de:	b2d2      	uxtbge	r2, r2
 80016e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80016ea:	bd30      	pop	{r4, r5, pc}
 80016ec:	e000ed00 	.word	0xe000ed00
 80016f0:	e000ed14 	.word	0xe000ed14

080016f4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016f4:	2301      	movs	r3, #1
 80016f6:	0942      	lsrs	r2, r0, #5
 80016f8:	f000 001f 	and.w	r0, r0, #31
 80016fc:	fa03 f000 	lsl.w	r0, r3, r0
 8001700:	4b01      	ldr	r3, [pc, #4]	; (8001708 <HAL_NVIC_EnableIRQ+0x14>)
 8001702:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100

0800170c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	3801      	subs	r0, #1
 800170e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001712:	d20a      	bcs.n	800172a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800173a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	bf0c      	ite	eq
 8001740:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001744:	f022 0204 	bicne.w	r2, r2, #4
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	4770      	bx	lr
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001750:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001752:	f006 f89f 	bl	8007894 <HAL_SYSTICK_Callback>
 8001756:	bd08      	pop	{r3, pc}

08001758 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001758:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800175a:	b350      	cbz	r0, 80017b2 <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800175c:	2214      	movs	r2, #20
 800175e:	6801      	ldr	r1, [r0, #0]
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001762:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001764:	440b      	add	r3, r1
 8001766:	fbb3 f3f2 	udiv	r3, r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8001770:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001772:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001774:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001776:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800177a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800177e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001782:	4323      	orrs	r3, r4
 8001784:	6904      	ldr	r4, [r0, #16]
 8001786:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001788:	6944      	ldr	r4, [r0, #20]
 800178a:	4323      	orrs	r3, r4
 800178c:	6984      	ldr	r4, [r0, #24]
 800178e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001790:	69c4      	ldr	r4, [r0, #28]
 8001792:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001794:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001796:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001798:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 800179a:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800179c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 80017a0:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80017a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80017a4:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80017a6:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a8:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017aa:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
}
 80017b4:	bd10      	pop	{r4, pc}
 80017b6:	bf00      	nop
 80017b8:	bffdfff8 	.word	0xbffdfff8
 80017bc:	40020000 	.word	0x40020000

080017c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017c2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80017c6:	2c01      	cmp	r4, #1
 80017c8:	d035      	beq.n	8001836 <HAL_DMA_Start_IT+0x76>
 80017ca:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017cc:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80017d0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80017d4:	42a5      	cmp	r5, r4
 80017d6:	f04f 0600 	mov.w	r6, #0
 80017da:	f04f 0402 	mov.w	r4, #2
 80017de:	d128      	bne.n	8001832 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017e0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017e4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80017e8:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017ea:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80017ec:	f026 0601 	bic.w	r6, r6, #1
 80017f0:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017f2:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80017f4:	40bd      	lsls	r5, r7
 80017f6:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017f8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017fa:	6843      	ldr	r3, [r0, #4]
 80017fc:	6805      	ldr	r5, [r0, #0]
 80017fe:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001800:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001802:	bf0b      	itete	eq
 8001804:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001806:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001808:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800180a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800180c:	b14b      	cbz	r3, 8001822 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001814:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001816:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001818:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	602b      	str	r3, [r5, #0]
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	f043 030a 	orr.w	r3, r3, #10
 8001830:	e7f0      	b.n	8001814 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001832:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001836:	2002      	movs	r0, #2
}
 8001838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800183c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800183c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001840:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001842:	2b02      	cmp	r3, #2
 8001844:	d003      	beq.n	800184e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001846:	2304      	movs	r3, #4
 8001848:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800184a:	2001      	movs	r0, #1
 800184c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184e:	6803      	ldr	r3, [r0, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	f022 020e 	bic.w	r2, r2, #14
 8001856:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <HAL_DMA_Abort_IT+0x88>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d01f      	beq.n	80018a6 <HAL_DMA_Abort_IT+0x6a>
 8001866:	3214      	adds	r2, #20
 8001868:	4293      	cmp	r3, r2
 800186a:	d01e      	beq.n	80018aa <HAL_DMA_Abort_IT+0x6e>
 800186c:	3214      	adds	r2, #20
 800186e:	4293      	cmp	r3, r2
 8001870:	d01d      	beq.n	80018ae <HAL_DMA_Abort_IT+0x72>
 8001872:	3214      	adds	r2, #20
 8001874:	4293      	cmp	r3, r2
 8001876:	d01d      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x78>
 8001878:	3214      	adds	r2, #20
 800187a:	4293      	cmp	r3, r2
 800187c:	d01d      	beq.n	80018ba <HAL_DMA_Abort_IT+0x7e>
 800187e:	3214      	adds	r2, #20
 8001880:	4293      	cmp	r3, r2
 8001882:	bf0c      	ite	eq
 8001884:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001888:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800188e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001890:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001892:	2301      	movs	r3, #1
 8001894:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001898:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800189a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800189e:	b17b      	cbz	r3, 80018c0 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80018a0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80018a2:	4620      	mov	r0, r4
 80018a4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018a6:	2301      	movs	r3, #1
 80018a8:	e7f0      	b.n	800188c <HAL_DMA_Abort_IT+0x50>
 80018aa:	2310      	movs	r3, #16
 80018ac:	e7ee      	b.n	800188c <HAL_DMA_Abort_IT+0x50>
 80018ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b2:	e7eb      	b.n	800188c <HAL_DMA_Abort_IT+0x50>
 80018b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b8:	e7e8      	b.n	800188c <HAL_DMA_Abort_IT+0x50>
 80018ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018be:	e7e5      	b.n	800188c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80018c0:	4618      	mov	r0, r3
}
 80018c2:	bd10      	pop	{r4, pc}
 80018c4:	40020008 	.word	0x40020008
 80018c8:	40020000 	.word	0x40020000

080018cc <HAL_DMA_IRQHandler>:
{
 80018cc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018ce:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018d0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018d4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80018d6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018d8:	4095      	lsls	r5, r2
 80018da:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80018dc:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018de:	d032      	beq.n	8001946 <HAL_DMA_IRQHandler+0x7a>
 80018e0:	074d      	lsls	r5, r1, #29
 80018e2:	d530      	bpl.n	8001946 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018e8:	bf5e      	ittt	pl
 80018ea:	681a      	ldrpl	r2, [r3, #0]
 80018ec:	f022 0204 	bicpl.w	r2, r2, #4
 80018f0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018f2:	4a3e      	ldr	r2, [pc, #248]	; (80019ec <HAL_DMA_IRQHandler+0x120>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d019      	beq.n	800192c <HAL_DMA_IRQHandler+0x60>
 80018f8:	3214      	adds	r2, #20
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d018      	beq.n	8001930 <HAL_DMA_IRQHandler+0x64>
 80018fe:	3214      	adds	r2, #20
 8001900:	4293      	cmp	r3, r2
 8001902:	d017      	beq.n	8001934 <HAL_DMA_IRQHandler+0x68>
 8001904:	3214      	adds	r2, #20
 8001906:	4293      	cmp	r3, r2
 8001908:	d017      	beq.n	800193a <HAL_DMA_IRQHandler+0x6e>
 800190a:	3214      	adds	r2, #20
 800190c:	4293      	cmp	r3, r2
 800190e:	d017      	beq.n	8001940 <HAL_DMA_IRQHandler+0x74>
 8001910:	3214      	adds	r2, #20
 8001912:	4293      	cmp	r3, r2
 8001914:	bf0c      	ite	eq
 8001916:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800191a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800191e:	4a34      	ldr	r2, [pc, #208]	; (80019f0 <HAL_DMA_IRQHandler+0x124>)
 8001920:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001922:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001924:	2b00      	cmp	r3, #0
 8001926:	d05e      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x11a>
}
 8001928:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800192a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800192c:	2304      	movs	r3, #4
 800192e:	e7f6      	b.n	800191e <HAL_DMA_IRQHandler+0x52>
 8001930:	2340      	movs	r3, #64	; 0x40
 8001932:	e7f4      	b.n	800191e <HAL_DMA_IRQHandler+0x52>
 8001934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001938:	e7f1      	b.n	800191e <HAL_DMA_IRQHandler+0x52>
 800193a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800193e:	e7ee      	b.n	800191e <HAL_DMA_IRQHandler+0x52>
 8001940:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001944:	e7eb      	b.n	800191e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001946:	2502      	movs	r5, #2
 8001948:	4095      	lsls	r5, r2
 800194a:	4225      	tst	r5, r4
 800194c:	d035      	beq.n	80019ba <HAL_DMA_IRQHandler+0xee>
 800194e:	078d      	lsls	r5, r1, #30
 8001950:	d533      	bpl.n	80019ba <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	0694      	lsls	r4, r2, #26
 8001956:	d406      	bmi.n	8001966 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	f022 020a 	bic.w	r2, r2, #10
 800195e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001960:	2201      	movs	r2, #1
 8001962:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001966:	4a21      	ldr	r2, [pc, #132]	; (80019ec <HAL_DMA_IRQHandler+0x120>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d019      	beq.n	80019a0 <HAL_DMA_IRQHandler+0xd4>
 800196c:	3214      	adds	r2, #20
 800196e:	4293      	cmp	r3, r2
 8001970:	d018      	beq.n	80019a4 <HAL_DMA_IRQHandler+0xd8>
 8001972:	3214      	adds	r2, #20
 8001974:	4293      	cmp	r3, r2
 8001976:	d017      	beq.n	80019a8 <HAL_DMA_IRQHandler+0xdc>
 8001978:	3214      	adds	r2, #20
 800197a:	4293      	cmp	r3, r2
 800197c:	d017      	beq.n	80019ae <HAL_DMA_IRQHandler+0xe2>
 800197e:	3214      	adds	r2, #20
 8001980:	4293      	cmp	r3, r2
 8001982:	d017      	beq.n	80019b4 <HAL_DMA_IRQHandler+0xe8>
 8001984:	3214      	adds	r2, #20
 8001986:	4293      	cmp	r3, r2
 8001988:	bf0c      	ite	eq
 800198a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800198e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_DMA_IRQHandler+0x124>)
 8001994:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001996:	2300      	movs	r3, #0
 8001998:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800199c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800199e:	e7c1      	b.n	8001924 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019a0:	2302      	movs	r3, #2
 80019a2:	e7f6      	b.n	8001992 <HAL_DMA_IRQHandler+0xc6>
 80019a4:	2320      	movs	r3, #32
 80019a6:	e7f4      	b.n	8001992 <HAL_DMA_IRQHandler+0xc6>
 80019a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ac:	e7f1      	b.n	8001992 <HAL_DMA_IRQHandler+0xc6>
 80019ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b2:	e7ee      	b.n	8001992 <HAL_DMA_IRQHandler+0xc6>
 80019b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b8:	e7eb      	b.n	8001992 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019ba:	2508      	movs	r5, #8
 80019bc:	4095      	lsls	r5, r2
 80019be:	4225      	tst	r5, r4
 80019c0:	d011      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x11a>
 80019c2:	0709      	lsls	r1, r1, #28
 80019c4:	d50f      	bpl.n	80019e6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	f021 010e 	bic.w	r1, r1, #14
 80019cc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ce:	2301      	movs	r3, #1
 80019d0:	fa03 f202 	lsl.w	r2, r3, r2
 80019d4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019d6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80019d8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80019dc:	2300      	movs	r3, #0
 80019de:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80019e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80019e4:	e79e      	b.n	8001924 <HAL_DMA_IRQHandler+0x58>
}
 80019e6:	bc70      	pop	{r4, r5, r6}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40020008 	.word	0x40020008
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80019f8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80019fa:	4616      	mov	r6, r2
 80019fc:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019fe:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001ba4 <HAL_GPIO_Init+0x1b0>
 8001a02:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001ba8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001a06:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001a0c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a10:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001a14:	45a0      	cmp	r8, r4
 8001a16:	d17f      	bne.n	8001b18 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001a18:	684d      	ldr	r5, [r1, #4]
 8001a1a:	2d12      	cmp	r5, #18
 8001a1c:	f000 80af 	beq.w	8001b7e <HAL_GPIO_Init+0x18a>
 8001a20:	f200 8088 	bhi.w	8001b34 <HAL_GPIO_Init+0x140>
 8001a24:	2d02      	cmp	r5, #2
 8001a26:	f000 80a7 	beq.w	8001b78 <HAL_GPIO_Init+0x184>
 8001a2a:	d87c      	bhi.n	8001b26 <HAL_GPIO_Init+0x132>
 8001a2c:	2d00      	cmp	r5, #0
 8001a2e:	f000 808e 	beq.w	8001b4e <HAL_GPIO_Init+0x15a>
 8001a32:	2d01      	cmp	r5, #1
 8001a34:	f000 809e 	beq.w	8001b74 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a38:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3c:	2cff      	cmp	r4, #255	; 0xff
 8001a3e:	bf93      	iteet	ls
 8001a40:	4682      	movls	sl, r0
 8001a42:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001a46:	3d08      	subhi	r5, #8
 8001a48:	f8d0 b000 	ldrls.w	fp, [r0]
 8001a4c:	bf92      	itee	ls
 8001a4e:	00b5      	lslls	r5, r6, #2
 8001a50:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001a54:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a56:	fa09 f805 	lsl.w	r8, r9, r5
 8001a5a:	ea2b 0808 	bic.w	r8, fp, r8
 8001a5e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a62:	bf88      	it	hi
 8001a64:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a68:	ea48 0505 	orr.w	r5, r8, r5
 8001a6c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a70:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001a74:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001a78:	d04e      	beq.n	8001b18 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7a:	4d47      	ldr	r5, [pc, #284]	; (8001b98 <HAL_GPIO_Init+0x1a4>)
 8001a7c:	4f46      	ldr	r7, [pc, #280]	; (8001b98 <HAL_GPIO_Init+0x1a4>)
 8001a7e:	69ad      	ldr	r5, [r5, #24]
 8001a80:	f026 0803 	bic.w	r8, r6, #3
 8001a84:	f045 0501 	orr.w	r5, r5, #1
 8001a88:	61bd      	str	r5, [r7, #24]
 8001a8a:	69bd      	ldr	r5, [r7, #24]
 8001a8c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001a90:	f005 0501 	and.w	r5, r5, #1
 8001a94:	9501      	str	r5, [sp, #4]
 8001a96:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001a9a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001aa0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001aa4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001aa8:	fa09 f90b 	lsl.w	r9, r9, fp
 8001aac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab0:	4d3a      	ldr	r5, [pc, #232]	; (8001b9c <HAL_GPIO_Init+0x1a8>)
 8001ab2:	42a8      	cmp	r0, r5
 8001ab4:	d068      	beq.n	8001b88 <HAL_GPIO_Init+0x194>
 8001ab6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aba:	42a8      	cmp	r0, r5
 8001abc:	d066      	beq.n	8001b8c <HAL_GPIO_Init+0x198>
 8001abe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ac2:	42a8      	cmp	r0, r5
 8001ac4:	d064      	beq.n	8001b90 <HAL_GPIO_Init+0x19c>
 8001ac6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aca:	42a8      	cmp	r0, r5
 8001acc:	bf0c      	ite	eq
 8001ace:	2503      	moveq	r5, #3
 8001ad0:	2504      	movne	r5, #4
 8001ad2:	fa05 f50b 	lsl.w	r5, r5, fp
 8001ad6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001ada:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ade:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae4:	bf14      	ite	ne
 8001ae6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae8:	43a5      	biceq	r5, r4
 8001aea:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aec:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001af2:	bf14      	ite	ne
 8001af4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af6:	43a5      	biceq	r5, r4
 8001af8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001afa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001afc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b00:	bf14      	ite	ne
 8001b02:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b04:	43a5      	biceq	r5, r4
 8001b06:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b08:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b0e:	bf14      	ite	ne
 8001b10:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b12:	ea25 0404 	biceq.w	r4, r5, r4
 8001b16:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001b18:	3601      	adds	r6, #1
 8001b1a:	2e10      	cmp	r6, #16
 8001b1c:	f47f af73 	bne.w	8001a06 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001b20:	b003      	add	sp, #12
 8001b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001b26:	2d03      	cmp	r5, #3
 8001b28:	d022      	beq.n	8001b70 <HAL_GPIO_Init+0x17c>
 8001b2a:	2d11      	cmp	r5, #17
 8001b2c:	d184      	bne.n	8001a38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b2e:	68ca      	ldr	r2, [r1, #12]
 8001b30:	3204      	adds	r2, #4
          break;
 8001b32:	e781      	b.n	8001a38 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001b34:	4f1a      	ldr	r7, [pc, #104]	; (8001ba0 <HAL_GPIO_Init+0x1ac>)
 8001b36:	42bd      	cmp	r5, r7
 8001b38:	d009      	beq.n	8001b4e <HAL_GPIO_Init+0x15a>
 8001b3a:	d812      	bhi.n	8001b62 <HAL_GPIO_Init+0x16e>
 8001b3c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001bac <HAL_GPIO_Init+0x1b8>
 8001b40:	454d      	cmp	r5, r9
 8001b42:	d004      	beq.n	8001b4e <HAL_GPIO_Init+0x15a>
 8001b44:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001b48:	454d      	cmp	r5, r9
 8001b4a:	f47f af75 	bne.w	8001a38 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b4e:	688a      	ldr	r2, [r1, #8]
 8001b50:	b1c2      	cbz	r2, 8001b84 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b52:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001b54:	bf0c      	ite	eq
 8001b56:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001b5a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b5e:	2208      	movs	r2, #8
 8001b60:	e76a      	b.n	8001a38 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001b62:	4575      	cmp	r5, lr
 8001b64:	d0f3      	beq.n	8001b4e <HAL_GPIO_Init+0x15a>
 8001b66:	4565      	cmp	r5, ip
 8001b68:	d0f1      	beq.n	8001b4e <HAL_GPIO_Init+0x15a>
 8001b6a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001bb0 <HAL_GPIO_Init+0x1bc>
 8001b6e:	e7eb      	b.n	8001b48 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b70:	2200      	movs	r2, #0
 8001b72:	e761      	b.n	8001a38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b74:	68ca      	ldr	r2, [r1, #12]
          break;
 8001b76:	e75f      	b.n	8001a38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b78:	68ca      	ldr	r2, [r1, #12]
 8001b7a:	3208      	adds	r2, #8
          break;
 8001b7c:	e75c      	b.n	8001a38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b7e:	68ca      	ldr	r2, [r1, #12]
 8001b80:	320c      	adds	r2, #12
          break;
 8001b82:	e759      	b.n	8001a38 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b84:	2204      	movs	r2, #4
 8001b86:	e757      	b.n	8001a38 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b88:	2500      	movs	r5, #0
 8001b8a:	e7a2      	b.n	8001ad2 <HAL_GPIO_Init+0xde>
 8001b8c:	2501      	movs	r5, #1
 8001b8e:	e7a0      	b.n	8001ad2 <HAL_GPIO_Init+0xde>
 8001b90:	2502      	movs	r5, #2
 8001b92:	e79e      	b.n	8001ad2 <HAL_GPIO_Init+0xde>
 8001b94:	40010400 	.word	0x40010400
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010800 	.word	0x40010800
 8001ba0:	10210000 	.word	0x10210000
 8001ba4:	10310000 	.word	0x10310000
 8001ba8:	10320000 	.word	0x10320000
 8001bac:	10110000 	.word	0x10110000
 8001bb0:	10220000 	.word	0x10220000

08001bb4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb4:	b10a      	cbz	r2, 8001bba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb6:	6101      	str	r1, [r0, #16]
 8001bb8:	4770      	bx	lr
 8001bba:	0409      	lsls	r1, r1, #16
 8001bbc:	e7fb      	b.n	8001bb6 <HAL_GPIO_WritePin+0x2>

08001bbe <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001bbe:	68c3      	ldr	r3, [r0, #12]
 8001bc0:	4059      	eors	r1, r3
 8001bc2:	60c1      	str	r1, [r0, #12]
 8001bc4:	4770      	bx	lr

08001bc6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bc6:	6802      	ldr	r2, [r0, #0]
 8001bc8:	6953      	ldr	r3, [r2, #20]
 8001bca:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001bce:	d00d      	beq.n	8001bec <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001bd4:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001bd6:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001bd8:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001bda:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001be4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
 8001bea:	4770      	bx	lr
  }
  return HAL_OK;
 8001bec:	4618      	mov	r0, r3
}
 8001bee:	4770      	bx	lr

08001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	4617      	mov	r7, r2
 8001bf8:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bfa:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001bfe:	b28e      	uxth	r6, r1
 8001c00:	6825      	ldr	r5, [r4, #0]
 8001c02:	f1b8 0f01 	cmp.w	r8, #1
 8001c06:	bf0c      	ite	eq
 8001c08:	696b      	ldreq	r3, [r5, #20]
 8001c0a:	69ab      	ldrne	r3, [r5, #24]
 8001c0c:	ea36 0303 	bics.w	r3, r6, r3
 8001c10:	bf14      	ite	ne
 8001c12:	2001      	movne	r0, #1
 8001c14:	2000      	moveq	r0, #0
 8001c16:	b908      	cbnz	r0, 8001c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c1c:	696b      	ldr	r3, [r5, #20]
 8001c1e:	055a      	lsls	r2, r3, #21
 8001c20:	d512      	bpl.n	8001c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c22:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001c24:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c2c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001c30:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c32:	2304      	movs	r3, #4
 8001c34:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c36:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001c38:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c3a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001c3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001c40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001c48:	1c7b      	adds	r3, r7, #1
 8001c4a:	d0d9      	beq.n	8001c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c4c:	b94f      	cbnz	r7, 8001c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c4e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001c50:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c52:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001c54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001c58:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c62:	f7ff fa87 	bl	8001174 <HAL_GetTick>
 8001c66:	eba0 0009 	sub.w	r0, r0, r9
 8001c6a:	4287      	cmp	r7, r0
 8001c6c:	d2c8      	bcs.n	8001c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001c6e:	e7ee      	b.n	8001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001c70 <I2C_WaitOnFlagUntilTimeout>:
{
 8001c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c74:	4604      	mov	r4, r0
 8001c76:	4690      	mov	r8, r2
 8001c78:	461f      	mov	r7, r3
 8001c7a:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001c7c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001c80:	b28d      	uxth	r5, r1
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	f1b9 0f01 	cmp.w	r9, #1
 8001c88:	bf0c      	ite	eq
 8001c8a:	695b      	ldreq	r3, [r3, #20]
 8001c8c:	699b      	ldrne	r3, [r3, #24]
 8001c8e:	ea35 0303 	bics.w	r3, r5, r3
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	4543      	cmp	r3, r8
 8001c9a:	d002      	beq.n	8001ca2 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001c9c:	2000      	movs	r0, #0
}
 8001c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001ca2:	1c7b      	adds	r3, r7, #1
 8001ca4:	d0ed      	beq.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ca6:	b95f      	cbnz	r7, 8001cc0 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ca8:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001caa:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cac:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001cae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001cb2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001cb6:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001cc0:	f7ff fa58 	bl	8001174 <HAL_GetTick>
 8001cc4:	1b80      	subs	r0, r0, r6
 8001cc6:	4287      	cmp	r7, r0
 8001cc8:	d2db      	bcs.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001cca:	e7ed      	b.n	8001ca8 <I2C_WaitOnFlagUntilTimeout+0x38>

08001ccc <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	4604      	mov	r4, r0
 8001cd0:	460d      	mov	r5, r1
 8001cd2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	d501      	bpl.n	8001ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001cdc:	2000      	movs	r0, #0
 8001cde:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f7ff ff70 	bl	8001bc6 <I2C_IsAcknowledgeFailed>
 8001ce6:	b9a8      	cbnz	r0, 8001d14 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001ce8:	1c6a      	adds	r2, r5, #1
 8001cea:	d0f3      	beq.n	8001cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001cec:	b965      	cbnz	r5, 8001d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001cf0:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf2:	f043 0320 	orr.w	r3, r3, #32
 8001cf6:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cf8:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001cfa:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cfc:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001cfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001d02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d08:	f7ff fa34 	bl	8001174 <HAL_GetTick>
 8001d0c:	1b80      	subs	r0, r0, r6
 8001d0e:	4285      	cmp	r5, r0
 8001d10:	d2e0      	bcs.n	8001cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001d12:	e7ec      	b.n	8001cee <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001d14:	2001      	movs	r0, #1
}
 8001d16:	bd70      	pop	{r4, r5, r6, pc}

08001d18 <I2C_RequestMemoryWrite>:
{
 8001d18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001d1c:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d1e:	6802      	ldr	r2, [r0, #0]
{
 8001d20:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d22:	6813      	ldr	r3, [r2, #0]
{
 8001d24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2a:	6013      	str	r3, [r2, #0]
{
 8001d2c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d2e:	9600      	str	r6, [sp, #0]
 8001d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d32:	2200      	movs	r2, #0
 8001d34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001d38:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d3a:	f7ff ff99 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8001d3e:	b968      	cbnz	r0, 8001d5c <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001d46:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d4a:	4633      	mov	r3, r6
 8001d4c:	491a      	ldr	r1, [pc, #104]	; (8001db8 <I2C_RequestMemoryWrite+0xa0>)
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff ff4e 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d54:	b130      	cbz	r0, 8001d64 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d018      	beq.n	8001d8e <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001d5c:	2003      	movs	r0, #3
}
 8001d5e:	b004      	add	sp, #16
 8001d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	9003      	str	r0, [sp, #12]
 8001d68:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6c:	9203      	str	r2, [sp, #12]
 8001d6e:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d70:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d72:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d74:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d76:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d78:	f7ff ffa8 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d7c:	b148      	cbz	r0, 8001d92 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d1eb      	bne.n	8001d5c <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d84:	6822      	ldr	r2, [r4, #0]
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001d8e:	2001      	movs	r0, #1
 8001d90:	e7e5      	b.n	8001d5e <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d92:	f1b8 0f01 	cmp.w	r8, #1
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	d102      	bne.n	8001da0 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d9a:	b2ed      	uxtb	r5, r5
 8001d9c:	611d      	str	r5, [r3, #16]
 8001d9e:	e7de      	b.n	8001d5e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001da0:	0a2a      	lsrs	r2, r5, #8
 8001da2:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001da6:	4632      	mov	r2, r6
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff ff8f 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d1e5      	bne.n	8001d7e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	e7f1      	b.n	8001d9a <I2C_RequestMemoryWrite+0x82>
 8001db6:	bf00      	nop
 8001db8:	00010002 	.word	0x00010002

08001dbc <I2C_RequestMemoryRead>:
{
 8001dbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001dc0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001dc2:	6803      	ldr	r3, [r0, #0]
{
 8001dc4:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001dc6:	681a      	ldr	r2, [r3, #0]
{
 8001dc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001dd0:	681a      	ldr	r2, [r3, #0]
{
 8001dd2:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd8:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dde:	9500      	str	r5, [sp, #0]
 8001de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001de2:	2200      	movs	r2, #0
{
 8001de4:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001de6:	f7ff ff43 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8001dea:	b980      	cbnz	r0, 8001e0e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	b2ff      	uxtb	r7, r7
 8001df0:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8001df4:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001df6:	492d      	ldr	r1, [pc, #180]	; (8001eac <I2C_RequestMemoryRead+0xf0>)
 8001df8:	462b      	mov	r3, r5
 8001dfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff fef7 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e02:	b140      	cbz	r0, 8001e16 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d101      	bne.n	8001e0e <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	e000      	b.n	8001e10 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001e0e:	2003      	movs	r0, #3
}
 8001e10:	b004      	add	sp, #16
 8001e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	9003      	str	r0, [sp, #12]
 8001e1a:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e1c:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1e:	9203      	str	r2, [sp, #12]
 8001e20:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e22:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e24:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e26:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e28:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2a:	f7ff ff4f 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001e2e:	b140      	cbz	r0, 8001e42 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d1eb      	bne.n	8001e0e <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e36:	6822      	ldr	r2, [r4, #0]
 8001e38:	6813      	ldr	r3, [r2, #0]
 8001e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	e7e3      	b.n	8001e0a <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e42:	f1b8 0f01 	cmp.w	r8, #1
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	d124      	bne.n	8001e94 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e4a:	b2f6      	uxtb	r6, r6
 8001e4c:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e4e:	462a      	mov	r2, r5
 8001e50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7ff ff3a 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d1e8      	bne.n	8001e30 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e5e:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e60:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e62:	680b      	ldr	r3, [r1, #0]
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e6a:	9500      	str	r5, [sp, #0]
 8001e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e72:	f7ff fefd 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d1c9      	bne.n	8001e0e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	f047 0701 	orr.w	r7, r7, #1
 8001e80:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e84:	462b      	mov	r3, r5
 8001e86:	4909      	ldr	r1, [pc, #36]	; (8001eac <I2C_RequestMemoryRead+0xf0>)
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff feb1 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d1b8      	bne.n	8001e04 <I2C_RequestMemoryRead+0x48>
 8001e92:	e7bd      	b.n	8001e10 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e94:	0a32      	lsrs	r2, r6, #8
 8001e96:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e9a:	462a      	mov	r2, r5
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f7ff ff15 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d1c4      	bne.n	8001e30 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	e7cf      	b.n	8001e4a <I2C_RequestMemoryRead+0x8e>
 8001eaa:	bf00      	nop
 8001eac:	00010002 	.word	0x00010002

08001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	460d      	mov	r5, r1
 8001eb6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001eb8:	6820      	ldr	r0, [r4, #0]
 8001eba:	6943      	ldr	r3, [r0, #20]
 8001ebc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001ec0:	d001      	beq.n	8001ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001ec2:	2000      	movs	r0, #0
}
 8001ec4:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ec6:	6942      	ldr	r2, [r0, #20]
 8001ec8:	06d2      	lsls	r2, r2, #27
 8001eca:	d50b      	bpl.n	8001ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ecc:	f06f 0210 	mvn.w	r2, #16
 8001ed0:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001ed2:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed4:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001ed6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001eda:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001ede:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ee4:	b95d      	cbnz	r5, 8001efe <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001ee8:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eea:	f043 0320 	orr.w	r3, r3, #32
 8001eee:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001efc:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001efe:	f7ff f939 	bl	8001174 <HAL_GetTick>
 8001f02:	1b80      	subs	r0, r0, r6
 8001f04:	4285      	cmp	r5, r0
 8001f06:	d2d7      	bcs.n	8001eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001f08:	e7ed      	b.n	8001ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001f0a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001f0a:	b570      	push	{r4, r5, r6, lr}
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	460d      	mov	r5, r1
 8001f10:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	075b      	lsls	r3, r3, #29
 8001f18:	d501      	bpl.n	8001f1e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7ff fe51 	bl	8001bc6 <I2C_IsAcknowledgeFailed>
 8001f24:	b9a8      	cbnz	r0, 8001f52 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001f26:	1c6a      	adds	r2, r5, #1
 8001f28:	d0f3      	beq.n	8001f12 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f2a:	b965      	cbnz	r5, 8001f46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001f2e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f30:	f043 0320 	orr.w	r3, r3, #32
 8001f34:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f36:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001f38:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f3a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001f3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001f40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f46:	f7ff f915 	bl	8001174 <HAL_GetTick>
 8001f4a:	1b80      	subs	r0, r0, r6
 8001f4c:	4285      	cmp	r5, r0
 8001f4e:	d2e0      	bcs.n	8001f12 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001f50:	e7ec      	b.n	8001f2c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001f52:	2001      	movs	r0, #1
}
 8001f54:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f58 <HAL_I2C_Init>:
{
 8001f58:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	b908      	cbnz	r0, 8001f62 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001f5e:	2001      	movs	r0, #1
 8001f60:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001f62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f6a:	b91b      	cbnz	r3, 8001f74 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001f6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001f70:	f006 f95c 	bl	800822c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f74:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001f76:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f84:	f000 feec 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f88:	6863      	ldr	r3, [r4, #4]
 8001f8a:	4a2f      	ldr	r2, [pc, #188]	; (8002048 <HAL_I2C_Init+0xf0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d830      	bhi.n	8001ff2 <HAL_I2C_Init+0x9a>
 8001f90:	4a2e      	ldr	r2, [pc, #184]	; (800204c <HAL_I2C_Init+0xf4>)
 8001f92:	4290      	cmp	r0, r2
 8001f94:	d9e3      	bls.n	8001f5e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001f96:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001f98:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001f9a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001f9e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001fa0:	3201      	adds	r2, #1
 8001fa2:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001fa4:	4a28      	ldr	r2, [pc, #160]	; (8002048 <HAL_I2C_Init+0xf0>)
 8001fa6:	3801      	subs	r0, #1
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d832      	bhi.n	8002012 <HAL_I2C_Init+0xba>
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fb2:	1c43      	adds	r3, r0, #1
 8001fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	bf38      	it	cc
 8001fbc:	2304      	movcc	r3, #4
 8001fbe:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fc0:	6a22      	ldr	r2, [r4, #32]
 8001fc2:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc4:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001fca:	68e2      	ldr	r2, [r4, #12]
 8001fcc:	6923      	ldr	r3, [r4, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001fd2:	69a2      	ldr	r2, [r4, #24]
 8001fd4:	6963      	ldr	r3, [r4, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001fda:	680b      	ldr	r3, [r1, #0]
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fea:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001ff0:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_I2C_Init+0xfc>)
 8001ff4:	4290      	cmp	r0, r2
 8001ff6:	d9b2      	bls.n	8001f5e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001ff8:	4d15      	ldr	r5, [pc, #84]	; (8002050 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ffa:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001ffe:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8002002:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002004:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8002006:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002008:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800200c:	fbb2 f2f5 	udiv	r2, r2, r5
 8002010:	e7c6      	b.n	8001fa0 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002012:	68a2      	ldr	r2, [r4, #8]
 8002014:	b952      	cbnz	r2, 800202c <HAL_I2C_Init+0xd4>
 8002016:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800201a:	fbb0 f0f3 	udiv	r0, r0, r3
 800201e:	1c43      	adds	r3, r0, #1
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	b16b      	cbz	r3, 8002042 <HAL_I2C_Init+0xea>
 8002026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202a:	e7c8      	b.n	8001fbe <HAL_I2C_Init+0x66>
 800202c:	2219      	movs	r2, #25
 800202e:	4353      	muls	r3, r2
 8002030:	fbb0 f0f3 	udiv	r0, r0, r3
 8002034:	1c43      	adds	r3, r0, #1
 8002036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203a:	b113      	cbz	r3, 8002042 <HAL_I2C_Init+0xea>
 800203c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002040:	e7bd      	b.n	8001fbe <HAL_I2C_Init+0x66>
 8002042:	2301      	movs	r3, #1
 8002044:	e7bb      	b.n	8001fbe <HAL_I2C_Init+0x66>
 8002046:	bf00      	nop
 8002048:	000186a0 	.word	0x000186a0
 800204c:	001e847f 	.word	0x001e847f
 8002050:	000f4240 	.word	0x000f4240
 8002054:	003d08ff 	.word	0x003d08ff

08002058 <HAL_I2C_Master_Transmit>:
{
 8002058:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800205c:	4604      	mov	r4, r0
 800205e:	461f      	mov	r7, r3
 8002060:	460d      	mov	r5, r1
 8002062:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8002064:	f7ff f886 	bl	8001174 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002068:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800206c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800206e:	2b20      	cmp	r3, #32
 8002070:	d004      	beq.n	800207c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8002072:	2502      	movs	r5, #2
}
 8002074:	4628      	mov	r0, r5
 8002076:	b004      	add	sp, #16
 8002078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800207c:	9000      	str	r0, [sp, #0]
 800207e:	2319      	movs	r3, #25
 8002080:	2201      	movs	r2, #1
 8002082:	495d      	ldr	r1, [pc, #372]	; (80021f8 <HAL_I2C_Master_Transmit+0x1a0>)
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff fdf3 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 800208a:	2800      	cmp	r0, #0
 800208c:	d1f1      	bne.n	8002072 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800208e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002092:	2b01      	cmp	r3, #1
 8002094:	d0ed      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x1a>
 8002096:	2301      	movs	r3, #1
 8002098:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80020a2:	bf5e      	ittt	pl
 80020a4:	681a      	ldrpl	r2, [r3, #0]
 80020a6:	f042 0201 	orrpl.w	r2, r2, #1
 80020aa:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020b4:	2221      	movs	r2, #33	; 0x21
 80020b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020ba:	2210      	movs	r2, #16
 80020bc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c0:	2200      	movs	r2, #0
 80020c2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020c4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80020c8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ca:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80020cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80020ce:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80020d2:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020d6:	2a04      	cmp	r2, #4
 80020d8:	d004      	beq.n	80020e4 <HAL_I2C_Master_Transmit+0x8c>
 80020da:	2a01      	cmp	r2, #1
 80020dc:	d002      	beq.n	80020e4 <HAL_I2C_Master_Transmit+0x8c>
 80020de:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80020e2:	d104      	bne.n	80020ee <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e002      	b.n	80020f4 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020f0:	2a12      	cmp	r2, #18
 80020f2:	d0f7      	beq.n	80020e4 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020f4:	9600      	str	r6, [sp, #0]
 80020f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020f8:	2200      	movs	r2, #0
 80020fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020fe:	4620      	mov	r0, r4
 8002100:	f7ff fdb6 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8002104:	bb28      	cbnz	r0, 8002152 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002106:	6923      	ldr	r3, [r4, #16]
 8002108:	6822      	ldr	r2, [r4, #0]
 800210a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800210e:	d112      	bne.n	8002136 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002110:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002114:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002116:	4633      	mov	r3, r6
 8002118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800211a:	4938      	ldr	r1, [pc, #224]	; (80021fc <HAL_I2C_Master_Transmit+0x1a4>)
 800211c:	4620      	mov	r0, r4
 800211e:	f7ff fd67 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002122:	4605      	mov	r5, r0
 8002124:	b9a0      	cbnz	r0, 8002150 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	9003      	str	r0, [sp, #12]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	9203      	str	r2, [sp, #12]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	9303      	str	r3, [sp, #12]
 8002132:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8002134:	e050      	b.n	80021d8 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002136:	11eb      	asrs	r3, r5, #7
 8002138:	f003 0306 	and.w	r3, r3, #6
 800213c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002140:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002142:	492f      	ldr	r1, [pc, #188]	; (8002200 <HAL_I2C_Master_Transmit+0x1a8>)
 8002144:	4633      	mov	r3, r6
 8002146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002148:	4620      	mov	r0, r4
 800214a:	f7ff fd51 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800214e:	b148      	cbz	r0, 8002164 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002150:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002154:	2b04      	cmp	r3, #4
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 800215c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002160:	2501      	movs	r5, #1
 8002162:	e787      	b.n	8002074 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	b2ed      	uxtb	r5, r5
 8002168:	611d      	str	r5, [r3, #16]
 800216a:	e7d4      	b.n	8002116 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 800216c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8002170:	2503      	movs	r5, #3
 8002172:	e77f      	b.n	8002074 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002174:	4632      	mov	r2, r6
 8002176:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff fda7 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 800217e:	b140      	cbz	r0, 8002192 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002182:	2b04      	cmp	r3, #4
 8002184:	d1f4      	bne.n	8002170 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	6813      	ldr	r3, [r2, #0]
 800218a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e7e6      	b.n	8002160 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002192:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002194:	6820      	ldr	r0, [r4, #0]
 8002196:	1c4b      	adds	r3, r1, #1
 8002198:	6263      	str	r3, [r4, #36]	; 0x24
 800219a:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 800219c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800219e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80021a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80021aa:	1e53      	subs	r3, r2, #1
 80021ac:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ae:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80021b0:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021b2:	d50a      	bpl.n	80021ca <HAL_I2C_Master_Transmit+0x172>
 80021b4:	b14b      	cbz	r3, 80021ca <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80021b6:	1c8b      	adds	r3, r1, #2
 80021b8:	6263      	str	r3, [r4, #36]	; 0x24
 80021ba:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80021bc:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80021be:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80021c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80021c2:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ca:	4632      	mov	r2, r6
 80021cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff fe9b 	bl	8001f0a <I2C_WaitOnBTFFlagUntilTimeout>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d1d3      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80021d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1ca      	bne.n	8002174 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021de:	6821      	ldr	r1, [r4, #0]
 80021e0:	680a      	ldr	r2, [r1, #0]
 80021e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80021e8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80021ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80021f6:	e73d      	b.n	8002074 <HAL_I2C_Master_Transmit+0x1c>
 80021f8:	00100002 	.word	0x00100002
 80021fc:	00010002 	.word	0x00010002
 8002200:	00010008 	.word	0x00010008

08002204 <HAL_I2C_Master_Receive>:
{
 8002204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002208:	4604      	mov	r4, r0
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	4698      	mov	r8, r3
 800220e:	460d      	mov	r5, r1
 8002210:	4691      	mov	r9, r2
 8002212:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002214:	f7fe ffae 	bl	8001174 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002218:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800221c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800221e:	2b20      	cmp	r3, #32
 8002220:	d004      	beq.n	800222c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8002222:	2502      	movs	r5, #2
}
 8002224:	4628      	mov	r0, r5
 8002226:	b009      	add	sp, #36	; 0x24
 8002228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800222c:	9000      	str	r0, [sp, #0]
 800222e:	2319      	movs	r3, #25
 8002230:	2201      	movs	r2, #1
 8002232:	49a2      	ldr	r1, [pc, #648]	; (80024bc <HAL_I2C_Master_Receive+0x2b8>)
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff fd1b 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 800223a:	2800      	cmp	r0, #0
 800223c:	d1f1      	bne.n	8002222 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800223e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002242:	2b01      	cmp	r3, #1
 8002244:	d0ed      	beq.n	8002222 <HAL_I2C_Master_Receive+0x1e>
 8002246:	2301      	movs	r3, #1
 8002248:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002252:	bf5e      	ittt	pl
 8002254:	681a      	ldrpl	r2, [r3, #0]
 8002256:	f042 0201 	orrpl.w	r2, r2, #1
 800225a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002262:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002264:	2222      	movs	r2, #34	; 0x22
 8002266:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800226a:	2210      	movs	r2, #16
 800226c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002270:	2200      	movs	r2, #0
 8002272:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002274:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8002278:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800227c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800227e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002280:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002284:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002286:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002288:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800228a:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800228c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002290:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002292:	d004      	beq.n	800229e <HAL_I2C_Master_Receive+0x9a>
 8002294:	2a01      	cmp	r2, #1
 8002296:	d002      	beq.n	800229e <HAL_I2C_Master_Receive+0x9a>
 8002298:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800229c:	d104      	bne.n	80022a8 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e002      	b.n	80022ae <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80022a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022aa:	2a11      	cmp	r2, #17
 80022ac:	d0f7      	beq.n	800229e <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022ae:	9600      	str	r6, [sp, #0]
 80022b0:	463b      	mov	r3, r7
 80022b2:	2200      	movs	r2, #0
 80022b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fcd9 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 80022be:	2800      	cmp	r0, #0
 80022c0:	d14d      	bne.n	800235e <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c2:	6923      	ldr	r3, [r4, #16]
 80022c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	d139      	bne.n	8002340 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022cc:	f045 0501 	orr.w	r5, r5, #1
 80022d0:	b2ed      	uxtb	r5, r5
 80022d2:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022d4:	4633      	mov	r3, r6
 80022d6:	463a      	mov	r2, r7
 80022d8:	4979      	ldr	r1, [pc, #484]	; (80024c0 <HAL_I2C_Master_Receive+0x2bc>)
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff fc88 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e0:	4605      	mov	r5, r0
 80022e2:	2800      	cmp	r0, #0
 80022e4:	d13a      	bne.n	800235c <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 80022e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	2a00      	cmp	r2, #0
 80022ec:	d069      	beq.n	80023c2 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 80022ee:	2a01      	cmp	r2, #1
 80022f0:	d17a      	bne.n	80023e8 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022fa:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	9504      	str	r5, [sp, #16]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	9204      	str	r2, [sp, #16]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	9204      	str	r2, [sp, #16]
 8002308:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002310:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002312:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002314:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80024c8 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8002318:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	d05b      	beq.n	80023d6 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 800231e:	2b03      	cmp	r3, #3
 8002320:	f200 80d4 	bhi.w	80024cc <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8002324:	2b01      	cmp	r3, #1
 8002326:	d17b      	bne.n	8002420 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002328:	4632      	mov	r2, r6
 800232a:	4639      	mov	r1, r7
 800232c:	4620      	mov	r0, r4
 800232e:	f7ff fdbf 	bl	8001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002332:	2800      	cmp	r0, #0
 8002334:	f000 8093 	beq.w	800245e <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800233a:	2b20      	cmp	r3, #32
 800233c:	d116      	bne.n	800236c <HAL_I2C_Master_Receive+0x168>
 800233e:	e03e      	b.n	80023be <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002340:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8002344:	f008 0806 	and.w	r8, r8, #6
 8002348:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800234c:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800234e:	495d      	ldr	r1, [pc, #372]	; (80024c4 <HAL_I2C_Master_Receive+0x2c0>)
 8002350:	4633      	mov	r3, r6
 8002352:	463a      	mov	r2, r7
 8002354:	4620      	mov	r0, r4
 8002356:	f7ff fc4b 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800235a:	b148      	cbz	r0, 8002370 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002360:	2b04      	cmp	r3, #4
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	d128      	bne.n	80023ba <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8002368:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 800236c:	2501      	movs	r5, #1
 800236e:	e759      	b.n	8002224 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	b2ed      	uxtb	r5, r5
 8002374:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002376:	463a      	mov	r2, r7
 8002378:	4633      	mov	r3, r6
 800237a:	4951      	ldr	r1, [pc, #324]	; (80024c0 <HAL_I2C_Master_Receive+0x2bc>)
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff fc37 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002382:	4602      	mov	r2, r0
 8002384:	2800      	cmp	r0, #0
 8002386:	d1e9      	bne.n	800235c <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	9007      	str	r0, [sp, #28]
 800238c:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800238e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002390:	9107      	str	r1, [sp, #28]
 8002392:	6999      	ldr	r1, [r3, #24]
 8002394:	9107      	str	r1, [sp, #28]
 8002396:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002398:	6819      	ldr	r1, [r3, #0]
 800239a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800239e:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a0:	9600      	str	r6, [sp, #0]
 80023a2:	463b      	mov	r3, r7
 80023a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023a8:	f7ff fc62 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 80023ac:	2800      	cmp	r0, #0
 80023ae:	d1d6      	bne.n	800235e <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80023b0:	6822      	ldr	r2, [r4, #0]
 80023b2:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80023b6:	6113      	str	r3, [r2, #16]
 80023b8:	e78c      	b.n	80022d4 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 80023ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 80023be:	2503      	movs	r5, #3
 80023c0:	e730      	b.n	8002224 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c2:	9503      	str	r5, [sp, #12]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	9203      	str	r2, [sp, #12]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	9203      	str	r2, [sp, #12]
 80023cc:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	2320      	movs	r3, #32
 80023d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	2300      	movs	r3, #0
 80023de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80023e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80023e6:	e71d      	b.n	8002224 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80023e8:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80023ea:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80023ec:	d10e      	bne.n	800240c <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80023ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023f4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	9505      	str	r5, [sp, #20]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	9205      	str	r2, [sp, #20]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	9205      	str	r2, [sp, #20]
 8002402:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800240a:	e781      	b.n	8002310 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800240c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002410:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002412:	9506      	str	r5, [sp, #24]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	9206      	str	r2, [sp, #24]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	9306      	str	r3, [sp, #24]
 800241c:	9b06      	ldr	r3, [sp, #24]
 800241e:	e779      	b.n	8002314 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8002420:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002422:	9600      	str	r6, [sp, #0]
 8002424:	463b      	mov	r3, r7
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	4641      	mov	r1, r8
 800242c:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 800242e:	d124      	bne.n	800247a <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002430:	f7ff fc1e 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8002434:	2800      	cmp	r0, #0
 8002436:	d1c2      	bne.n	80023be <HAL_I2C_Master_Receive+0x1ba>
 8002438:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002442:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002444:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	1c51      	adds	r1, r2, #1
 800244a:	6261      	str	r1, [r4, #36]	; 0x24
 800244c:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800244e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002454:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002456:	3b01      	subs	r3, #1
 8002458:	b29b      	uxth	r3, r3
 800245a:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800245c:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800245e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	6262      	str	r2, [r4, #36]	; 0x24
 8002464:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002466:	6912      	ldr	r2, [r2, #16]
 8002468:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800246a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002470:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002472:	3b01      	subs	r3, #1
 8002474:	b29b      	uxth	r3, r3
 8002476:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002478:	e74e      	b.n	8002318 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800247a:	f7ff fbf9 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 800247e:	4602      	mov	r2, r0
 8002480:	2800      	cmp	r0, #0
 8002482:	d19c      	bne.n	80023be <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002484:	6821      	ldr	r1, [r4, #0]
 8002486:	680b      	ldr	r3, [r1, #0]
 8002488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800248c:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800248e:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002490:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002492:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002494:	1c59      	adds	r1, r3, #1
 8002496:	6261      	str	r1, [r4, #36]	; 0x24
 8002498:	6821      	ldr	r1, [r4, #0]
 800249a:	6909      	ldr	r1, [r1, #16]
 800249c:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 800249e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a0:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 80024a2:	3b01      	subs	r3, #1
 80024a4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80024a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a8:	4641      	mov	r1, r8
          hi2c->XferCount--;
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b0:	463b      	mov	r3, r7
 80024b2:	f7ff fbdd 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d0bf      	beq.n	800243a <HAL_I2C_Master_Receive+0x236>
 80024ba:	e780      	b.n	80023be <HAL_I2C_Master_Receive+0x1ba>
 80024bc:	00100002 	.word	0x00100002
 80024c0:	00010002 	.word	0x00010002
 80024c4:	00010008 	.word	0x00010008
 80024c8:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80024cc:	4632      	mov	r2, r6
 80024ce:	4639      	mov	r1, r7
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff fced 	bl	8001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	f47f af2e 	bne.w	8002338 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	6262      	str	r2, [r4, #36]	; 0x24
 80024e2:	6822      	ldr	r2, [r4, #0]
 80024e4:	6912      	ldr	r2, [r2, #16]
 80024e6:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80024e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024ea:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80024ec:	3b01      	subs	r3, #1
 80024ee:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80024f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024f8:	6953      	ldr	r3, [r2, #20]
 80024fa:	075b      	lsls	r3, r3, #29
 80024fc:	f57f af0c 	bpl.w	8002318 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002502:	1c59      	adds	r1, r3, #1
 8002504:	6261      	str	r1, [r4, #36]	; 0x24
 8002506:	e7ae      	b.n	8002466 <HAL_I2C_Master_Receive+0x262>

08002508 <HAL_I2C_Mem_Write>:
{
 8002508:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800250c:	4604      	mov	r4, r0
 800250e:	469a      	mov	sl, r3
 8002510:	4688      	mov	r8, r1
 8002512:	4691      	mov	r9, r2
 8002514:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8002516:	f7fe fe2d 	bl	8001174 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800251a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800251e:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002520:	2b20      	cmp	r3, #32
 8002522:	d003      	beq.n	800252c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8002524:	2002      	movs	r0, #2
}
 8002526:	b002      	add	sp, #8
 8002528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800252c:	9000      	str	r0, [sp, #0]
 800252e:	2319      	movs	r3, #25
 8002530:	2201      	movs	r2, #1
 8002532:	493e      	ldr	r1, [pc, #248]	; (800262c <HAL_I2C_Mem_Write+0x124>)
 8002534:	4620      	mov	r0, r4
 8002536:	f7ff fb9b 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 800253a:	2800      	cmp	r0, #0
 800253c:	d1f2      	bne.n	8002524 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800253e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d0ee      	beq.n	8002524 <HAL_I2C_Mem_Write+0x1c>
 8002546:	2301      	movs	r3, #1
 8002548:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800254c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254e:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002550:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002552:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002554:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002556:	bf58      	it	pl
 8002558:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800255a:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 800255c:	bf5c      	itt	pl
 800255e:	f042 0201 	orrpl.w	r2, r2, #1
 8002562:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800256c:	2321      	movs	r3, #33	; 0x21
 800256e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002572:	2340      	movs	r3, #64	; 0x40
 8002574:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8002578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257a:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800257c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800257e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002582:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8002584:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002588:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800258a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800258c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800258e:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8002590:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002592:	4653      	mov	r3, sl
 8002594:	f7ff fbc0 	bl	8001d18 <I2C_RequestMemoryWrite>
 8002598:	2800      	cmp	r0, #0
 800259a:	d02a      	beq.n	80025f2 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800259e:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d107      	bne.n	80025b6 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 80025a6:	2001      	movs	r0, #1
 80025a8:	e7bd      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025aa:	f7ff fb8f 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80025ae:	b120      	cbz	r0, 80025ba <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d034      	beq.n	8002620 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 80025b6:	2003      	movs	r0, #3
 80025b8:	e7b5      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80025ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80025bc:	6827      	ldr	r7, [r4, #0]
 80025be:	1c4b      	adds	r3, r1, #1
 80025c0:	6263      	str	r3, [r4, #36]	; 0x24
 80025c2:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80025c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80025c6:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 80025c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80025ca:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025d2:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 80025d4:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025d6:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80025d8:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025da:	d50a      	bpl.n	80025f2 <HAL_I2C_Mem_Write+0xea>
 80025dc:	b148      	cbz	r0, 80025f2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80025de:	1c8b      	adds	r3, r1, #2
 80025e0:	6263      	str	r3, [r4, #36]	; 0x24
 80025e2:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80025e4:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80025e6:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 80025e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80025ea:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80025f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f4:	462a      	mov	r2, r5
 80025f6:	4631      	mov	r1, r6
 80025f8:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1d5      	bne.n	80025aa <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fe:	f7ff fc84 	bl	8001f0a <I2C_WaitOnBTFFlagUntilTimeout>
 8002602:	2800      	cmp	r0, #0
 8002604:	d1d4      	bne.n	80025b0 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002606:	6822      	ldr	r2, [r4, #0]
 8002608:	6813      	ldr	r3, [r2, #0]
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002612:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002616:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800261a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800261e:	e782      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002620:	6822      	ldr	r2, [r4, #0]
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e7bc      	b.n	80025a6 <HAL_I2C_Mem_Write+0x9e>
 800262c:	00100002 	.word	0x00100002
 8002630:	ffff0000 	.word	0xffff0000

08002634 <HAL_I2C_Mem_Read>:
{
 8002634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002638:	4604      	mov	r4, r0
 800263a:	b086      	sub	sp, #24
 800263c:	469a      	mov	sl, r3
 800263e:	460d      	mov	r5, r1
 8002640:	4691      	mov	r9, r2
 8002642:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002644:	f7fe fd96 	bl	8001174 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002648:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800264c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800264e:	2b20      	cmp	r3, #32
 8002650:	d004      	beq.n	800265c <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8002652:	2502      	movs	r5, #2
}
 8002654:	4628      	mov	r0, r5
 8002656:	b006      	add	sp, #24
 8002658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265c:	9000      	str	r0, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	2201      	movs	r2, #1
 8002662:	4981      	ldr	r1, [pc, #516]	; (8002868 <HAL_I2C_Mem_Read+0x234>)
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff fb03 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 800266a:	2800      	cmp	r0, #0
 800266c:	d1f1      	bne.n	8002652 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800266e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d0ed      	beq.n	8002652 <HAL_I2C_Mem_Read+0x1e>
 8002676:	2301      	movs	r3, #1
 8002678:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800267c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267e:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002682:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002684:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002686:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002688:	bf58      	it	pl
 800268a:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268c:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 800268e:	bf5c      	itt	pl
 8002690:	f042 0201 	orrpl.w	r2, r2, #1
 8002694:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800269e:	2322      	movs	r3, #34	; 0x22
 80026a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a4:	2340      	movs	r3, #64	; 0x40
 80026a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80026aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ac:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80026b0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026b2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026b6:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 80026b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ba:	4b6c      	ldr	r3, [pc, #432]	; (800286c <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026bc:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026be:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80026c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c2:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 80026c4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c6:	4653      	mov	r3, sl
 80026c8:	f7ff fb78 	bl	8001dbc <I2C_RequestMemoryRead>
 80026cc:	4605      	mov	r5, r0
 80026ce:	b130      	cbz	r0, 80026de <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80026d2:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d13d      	bne.n	8002756 <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 80026da:	2501      	movs	r5, #1
 80026dc:	e7ba      	b.n	8002654 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 80026de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	b992      	cbnz	r2, 800270a <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e4:	9002      	str	r0, [sp, #8]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	9202      	str	r2, [sp, #8]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	9202      	str	r2, [sp, #8]
 80026ee:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	2320      	movs	r3, #32
 80026fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fe:	2300      	movs	r3, #0
 8002700:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002704:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002708:	e7a4      	b.n	8002654 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 800270a:	2a01      	cmp	r2, #1
 800270c:	d125      	bne.n	800275a <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	9003      	str	r0, [sp, #12]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	9203      	str	r2, [sp, #12]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	9203      	str	r2, [sp, #12]
 8002724:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800272c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800272e:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002730:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8002870 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8002734:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0de      	beq.n	80026f8 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 800273a:	2b03      	cmp	r3, #3
 800273c:	d877      	bhi.n	800282e <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 800273e:	2b01      	cmp	r3, #1
 8002740:	d127      	bne.n	8002792 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002742:	4632      	mov	r2, r6
 8002744:	4639      	mov	r1, r7
 8002746:	4620      	mov	r0, r4
 8002748:	f7ff fbb2 	bl	8001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800274c:	2800      	cmp	r0, #0
 800274e:	d03f      	beq.n	80027d0 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002752:	2b20      	cmp	r3, #32
 8002754:	d1c1      	bne.n	80026da <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8002756:	2503      	movs	r5, #3
 8002758:	e77c      	b.n	8002654 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 800275a:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800275c:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 800275e:	d10e      	bne.n	800277e <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002764:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002766:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	9004      	str	r0, [sp, #16]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	9204      	str	r2, [sp, #16]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	9204      	str	r2, [sp, #16]
 8002774:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277c:	e7d6      	b.n	800272c <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002782:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002784:	9005      	str	r0, [sp, #20]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	9205      	str	r2, [sp, #20]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	9305      	str	r3, [sp, #20]
 800278e:	9b05      	ldr	r3, [sp, #20]
 8002790:	e7ce      	b.n	8002730 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 8002792:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002794:	9600      	str	r6, [sp, #0]
 8002796:	463b      	mov	r3, r7
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	4641      	mov	r1, r8
 800279e:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80027a0:	d124      	bne.n	80027ec <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027a2:	f7ff fa65 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d1d5      	bne.n	8002756 <HAL_I2C_Mem_Read+0x122>
 80027aa:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b4:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	1c51      	adds	r1, r2, #1
 80027bc:	6261      	str	r1, [r4, #36]	; 0x24
 80027be:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 80027c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80027c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027ce:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	6262      	str	r2, [r4, #36]	; 0x24
 80027d6:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027d8:	6912      	ldr	r2, [r2, #16]
 80027da:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80027dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80027e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80027ea:	e7a3      	b.n	8002734 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ec:	f7ff fa40 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4602      	mov	r2, r0
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d1af      	bne.n	8002756 <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80027f6:	6821      	ldr	r1, [r4, #0]
 80027f8:	680b      	ldr	r3, [r1, #0]
 80027fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027fe:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002800:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002802:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002804:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002806:	1c59      	adds	r1, r3, #1
 8002808:	6261      	str	r1, [r4, #36]	; 0x24
 800280a:	6821      	ldr	r1, [r4, #0]
 800280c:	6909      	ldr	r1, [r1, #16]
 800280e:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8002810:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002812:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8002814:	3b01      	subs	r3, #1
 8002816:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002818:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800281a:	4641      	mov	r1, r8
          hi2c->XferCount--;
 800281c:	3b01      	subs	r3, #1
 800281e:	b29b      	uxth	r3, r3
 8002820:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002822:	463b      	mov	r3, r7
 8002824:	f7ff fa24 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8002828:	2800      	cmp	r0, #0
 800282a:	d0bf      	beq.n	80027ac <HAL_I2C_Mem_Read+0x178>
 800282c:	e793      	b.n	8002756 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282e:	4632      	mov	r2, r6
 8002830:	4639      	mov	r1, r7
 8002832:	4620      	mov	r0, r4
 8002834:	f7ff fb3c 	bl	8001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002838:	2800      	cmp	r0, #0
 800283a:	d189      	bne.n	8002750 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800283c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	6262      	str	r2, [r4, #36]	; 0x24
 8002842:	6822      	ldr	r2, [r4, #0]
 8002844:	6912      	ldr	r2, [r2, #16]
 8002846:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002848:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800284a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 800284c:	3b01      	subs	r3, #1
 800284e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002850:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002852:	3b01      	subs	r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002858:	6953      	ldr	r3, [r2, #20]
 800285a:	075b      	lsls	r3, r3, #29
 800285c:	f57f af6a 	bpl.w	8002734 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002862:	1c59      	adds	r1, r3, #1
 8002864:	6261      	str	r1, [r4, #36]	; 0x24
 8002866:	e7b7      	b.n	80027d8 <HAL_I2C_Mem_Read+0x1a4>
 8002868:	00100002 	.word	0x00100002
 800286c:	ffff0000 	.word	0xffff0000
 8002870:	00010004 	.word	0x00010004

08002874 <HAL_I2C_GetState>:
  return hi2c->State;
 8002874:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8002878:	4770      	bx	lr
	...

0800287c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287c:	6803      	ldr	r3, [r0, #0]
{
 800287e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002882:	07db      	lsls	r3, r3, #31
{
 8002884:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	d410      	bmi.n	80028aa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002888:	682b      	ldr	r3, [r5, #0]
 800288a:	079f      	lsls	r7, r3, #30
 800288c:	d45e      	bmi.n	800294c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	682b      	ldr	r3, [r5, #0]
 8002890:	0719      	lsls	r1, r3, #28
 8002892:	f100 8095 	bmi.w	80029c0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002896:	682b      	ldr	r3, [r5, #0]
 8002898:	075a      	lsls	r2, r3, #29
 800289a:	f100 80bf 	bmi.w	8002a1c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289e:	69ea      	ldr	r2, [r5, #28]
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	f040 812d 	bne.w	8002b00 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80028a6:	2000      	movs	r0, #0
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028aa:	4c90      	ldr	r4, [pc, #576]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 80028ac:	6863      	ldr	r3, [r4, #4]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d007      	beq.n	80028c6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028b6:	6863      	ldr	r3, [r4, #4]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x5e>
 80028c0:	6863      	ldr	r3, [r4, #4]
 80028c2:	03de      	lsls	r6, r3, #15
 80028c4:	d509      	bpl.n	80028da <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	039c      	lsls	r4, r3, #14
 80028ca:	d5dd      	bpl.n	8002888 <HAL_RCC_OscConfig+0xc>
 80028cc:	686b      	ldr	r3, [r5, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1da      	bne.n	8002888 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80028d2:	2001      	movs	r0, #1
}
 80028d4:	b002      	add	sp, #8
 80028d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028da:	686b      	ldr	r3, [r5, #4]
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e0:	d110      	bne.n	8002904 <HAL_RCC_OscConfig+0x88>
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028ea:	f7fe fc43 	bl	8001174 <HAL_GetTick>
 80028ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	0398      	lsls	r0, r3, #14
 80028f4:	d4c8      	bmi.n	8002888 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f6:	f7fe fc3d 	bl	8001174 <HAL_GetTick>
 80028fa:	1b80      	subs	r0, r0, r6
 80028fc:	2864      	cmp	r0, #100	; 0x64
 80028fe:	d9f7      	bls.n	80028f0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002900:	2003      	movs	r0, #3
 8002902:	e7e7      	b.n	80028d4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002904:	b99b      	cbnz	r3, 800292e <HAL_RCC_OscConfig+0xb2>
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290c:	6023      	str	r3, [r4, #0]
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002914:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002916:	f7fe fc2d 	bl	8001174 <HAL_GetTick>
 800291a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	0399      	lsls	r1, r3, #14
 8002920:	d5b2      	bpl.n	8002888 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002922:	f7fe fc27 	bl	8001174 <HAL_GetTick>
 8002926:	1b80      	subs	r0, r0, r6
 8002928:	2864      	cmp	r0, #100	; 0x64
 800292a:	d9f7      	bls.n	800291c <HAL_RCC_OscConfig+0xa0>
 800292c:	e7e8      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	d103      	bne.n	800293e <HAL_RCC_OscConfig+0xc2>
 8002936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293a:	6023      	str	r3, [r4, #0]
 800293c:	e7d1      	b.n	80028e2 <HAL_RCC_OscConfig+0x66>
 800293e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002942:	6023      	str	r3, [r4, #0]
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294a:	e7cd      	b.n	80028e8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800294c:	4c67      	ldr	r4, [pc, #412]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 800294e:	6863      	ldr	r3, [r4, #4]
 8002950:	f013 0f0c 	tst.w	r3, #12
 8002954:	d007      	beq.n	8002966 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002956:	6863      	ldr	r3, [r4, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d110      	bne.n	8002982 <HAL_RCC_OscConfig+0x106>
 8002960:	6863      	ldr	r3, [r4, #4]
 8002962:	03da      	lsls	r2, r3, #15
 8002964:	d40d      	bmi.n	8002982 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	079b      	lsls	r3, r3, #30
 800296a:	d502      	bpl.n	8002972 <HAL_RCC_OscConfig+0xf6>
 800296c:	692b      	ldr	r3, [r5, #16]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d1af      	bne.n	80028d2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	696a      	ldr	r2, [r5, #20]
 8002976:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800297a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800297e:	6023      	str	r3, [r4, #0]
 8002980:	e785      	b.n	800288e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002982:	692a      	ldr	r2, [r5, #16]
 8002984:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002986:	b16a      	cbz	r2, 80029a4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800298c:	f7fe fbf2 	bl	8001174 <HAL_GetTick>
 8002990:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	079f      	lsls	r7, r3, #30
 8002996:	d4ec      	bmi.n	8002972 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe fbec 	bl	8001174 <HAL_GetTick>
 800299c:	1b80      	subs	r0, r0, r6
 800299e:	2802      	cmp	r0, #2
 80029a0:	d9f7      	bls.n	8002992 <HAL_RCC_OscConfig+0x116>
 80029a2:	e7ad      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80029a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029a6:	f7fe fbe5 	bl	8001174 <HAL_GetTick>
 80029aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	0798      	lsls	r0, r3, #30
 80029b0:	f57f af6d 	bpl.w	800288e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b4:	f7fe fbde 	bl	8001174 <HAL_GetTick>
 80029b8:	1b80      	subs	r0, r0, r6
 80029ba:	2802      	cmp	r0, #2
 80029bc:	d9f6      	bls.n	80029ac <HAL_RCC_OscConfig+0x130>
 80029be:	e79f      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c0:	69aa      	ldr	r2, [r5, #24]
 80029c2:	4c4a      	ldr	r4, [pc, #296]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 80029c4:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <HAL_RCC_OscConfig+0x278>)
 80029c6:	b1da      	cbz	r2, 8002a00 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80029cc:	f7fe fbd2 	bl	8001174 <HAL_GetTick>
 80029d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029d4:	079b      	lsls	r3, r3, #30
 80029d6:	d50d      	bpl.n	80029f4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80029dc:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_RCC_OscConfig+0x27c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80029e4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80029e6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80029e8:	9b01      	ldr	r3, [sp, #4]
 80029ea:	1e5a      	subs	r2, r3, #1
 80029ec:	9201      	str	r2, [sp, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_RCC_OscConfig+0x16a>
 80029f2:	e750      	b.n	8002896 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f4:	f7fe fbbe 	bl	8001174 <HAL_GetTick>
 80029f8:	1b80      	subs	r0, r0, r6
 80029fa:	2802      	cmp	r0, #2
 80029fc:	d9e9      	bls.n	80029d2 <HAL_RCC_OscConfig+0x156>
 80029fe:	e77f      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002a00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a02:	f7fe fbb7 	bl	8001174 <HAL_GetTick>
 8002a06:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a0a:	079f      	lsls	r7, r3, #30
 8002a0c:	f57f af43 	bpl.w	8002896 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fe fbb0 	bl	8001174 <HAL_GetTick>
 8002a14:	1b80      	subs	r0, r0, r6
 8002a16:	2802      	cmp	r0, #2
 8002a18:	d9f6      	bls.n	8002a08 <HAL_RCC_OscConfig+0x18c>
 8002a1a:	e771      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1c:	4c33      	ldr	r4, [pc, #204]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a1e:	69e3      	ldr	r3, [r4, #28]
 8002a20:	00d8      	lsls	r0, r3, #3
 8002a22:	d424      	bmi.n	8002a6e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002a24:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	69e3      	ldr	r3, [r4, #28]
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	61e3      	str	r3, [r4, #28]
 8002a2e:	69e3      	ldr	r3, [r4, #28]
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4e30      	ldr	r6, [pc, #192]	; (8002afc <HAL_RCC_OscConfig+0x280>)
 8002a3a:	6833      	ldr	r3, [r6, #0]
 8002a3c:	05d9      	lsls	r1, r3, #23
 8002a3e:	d518      	bpl.n	8002a72 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a40:	68eb      	ldr	r3, [r5, #12]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d126      	bne.n	8002a94 <HAL_RCC_OscConfig+0x218>
 8002a46:	6a23      	ldr	r3, [r4, #32]
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fb91 	bl	8001174 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002a56:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	6a23      	ldr	r3, [r4, #32]
 8002a5a:	079b      	lsls	r3, r3, #30
 8002a5c:	d53f      	bpl.n	8002ade <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002a5e:	2f00      	cmp	r7, #0
 8002a60:	f43f af1d 	beq.w	800289e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	69e3      	ldr	r3, [r4, #28]
 8002a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	61e3      	str	r3, [r4, #28]
 8002a6c:	e717      	b.n	800289e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2700      	movs	r7, #0
 8002a70:	e7e2      	b.n	8002a38 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a72:	6833      	ldr	r3, [r6, #0]
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fb7b 	bl	8001174 <HAL_GetTick>
 8002a7e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	6833      	ldr	r3, [r6, #0]
 8002a82:	05da      	lsls	r2, r3, #23
 8002a84:	d4dc      	bmi.n	8002a40 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a86:	f7fe fb75 	bl	8001174 <HAL_GetTick>
 8002a8a:	eba0 0008 	sub.w	r0, r0, r8
 8002a8e:	2864      	cmp	r0, #100	; 0x64
 8002a90:	d9f6      	bls.n	8002a80 <HAL_RCC_OscConfig+0x204>
 8002a92:	e735      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	b9ab      	cbnz	r3, 8002ac2 <HAL_RCC_OscConfig+0x246>
 8002a96:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6223      	str	r3, [r4, #32]
 8002aa2:	6a23      	ldr	r3, [r4, #32]
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fb63 	bl	8001174 <HAL_GetTick>
 8002aae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab0:	6a23      	ldr	r3, [r4, #32]
 8002ab2:	0798      	lsls	r0, r3, #30
 8002ab4:	d5d3      	bpl.n	8002a5e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fe fb5d 	bl	8001174 <HAL_GetTick>
 8002aba:	1b80      	subs	r0, r0, r6
 8002abc:	4540      	cmp	r0, r8
 8002abe:	d9f7      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x234>
 8002ac0:	e71e      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	6a23      	ldr	r3, [r4, #32]
 8002ac6:	d103      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x254>
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6223      	str	r3, [r4, #32]
 8002ace:	e7ba      	b.n	8002a46 <HAL_RCC_OscConfig+0x1ca>
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6223      	str	r3, [r4, #32]
 8002ad6:	6a23      	ldr	r3, [r4, #32]
 8002ad8:	f023 0304 	bic.w	r3, r3, #4
 8002adc:	e7b6      	b.n	8002a4c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe fb49 	bl	8001174 <HAL_GetTick>
 8002ae2:	eba0 0008 	sub.w	r0, r0, r8
 8002ae6:	42b0      	cmp	r0, r6
 8002ae8:	d9b6      	bls.n	8002a58 <HAL_RCC_OscConfig+0x1dc>
 8002aea:	e709      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
 8002aec:	40021000 	.word	0x40021000
 8002af0:	42420000 	.word	0x42420000
 8002af4:	42420480 	.word	0x42420480
 8002af8:	20000410 	.word	0x20000410
 8002afc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b00:	4c22      	ldr	r4, [pc, #136]	; (8002b8c <HAL_RCC_OscConfig+0x310>)
 8002b02:	6863      	ldr	r3, [r4, #4]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	f43f aee2 	beq.w	80028d2 <HAL_RCC_OscConfig+0x56>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	4e1f      	ldr	r6, [pc, #124]	; (8002b90 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b12:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002b14:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b16:	d12b      	bne.n	8002b70 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002b18:	f7fe fb2c 	bl	8001174 <HAL_GetTick>
 8002b1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	0199      	lsls	r1, r3, #6
 8002b22:	d41f      	bmi.n	8002b64 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b24:	6a2b      	ldr	r3, [r5, #32]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b2c:	6862      	ldr	r2, [r4, #4]
 8002b2e:	68a9      	ldr	r1, [r5, #8]
 8002b30:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002b34:	430a      	orrs	r2, r1
 8002b36:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b38:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002b3a:	6862      	ldr	r2, [r4, #4]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002b42:	4313      	orrs	r3, r2
 8002b44:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002b46:	2301      	movs	r3, #1
 8002b48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fb13 	bl	8001174 <HAL_GetTick>
 8002b4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	019a      	lsls	r2, r3, #6
 8002b54:	f53f aea7 	bmi.w	80028a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe fb0c 	bl	8001174 <HAL_GetTick>
 8002b5c:	1b40      	subs	r0, r0, r5
 8002b5e:	2802      	cmp	r0, #2
 8002b60:	d9f6      	bls.n	8002b50 <HAL_RCC_OscConfig+0x2d4>
 8002b62:	e6cd      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fb06 	bl	8001174 <HAL_GetTick>
 8002b68:	1bc0      	subs	r0, r0, r7
 8002b6a:	2802      	cmp	r0, #2
 8002b6c:	d9d7      	bls.n	8002b1e <HAL_RCC_OscConfig+0x2a2>
 8002b6e:	e6c7      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002b70:	f7fe fb00 	bl	8001174 <HAL_GetTick>
 8002b74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	019b      	lsls	r3, r3, #6
 8002b7a:	f57f ae94 	bpl.w	80028a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe faf9 	bl	8001174 <HAL_GetTick>
 8002b82:	1b40      	subs	r0, r0, r5
 8002b84:	2802      	cmp	r0, #2
 8002b86:	d9f6      	bls.n	8002b76 <HAL_RCC_OscConfig+0x2fa>
 8002b88:	e6ba      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	42420060 	.word	0x42420060

08002b94 <HAL_RCC_GetSysClockFreq>:
{
 8002b94:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002b98:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b9a:	ac02      	add	r4, sp, #8
 8002b9c:	f103 0510 	add.w	r5, r3, #16
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	c203      	stmia	r2!, {r0, r1}
 8002baa:	42ab      	cmp	r3, r5
 8002bac:	4614      	mov	r4, r2
 8002bae:	d1f7      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f88d 3004 	strb.w	r3, [sp, #4]
 8002bb6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002bb8:	4911      	ldr	r1, [pc, #68]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bba:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002bbe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc0:	f003 020c 	and.w	r2, r3, #12
 8002bc4:	2a08      	cmp	r2, #8
 8002bc6:	d117      	bne.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bc8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002bcc:	a806      	add	r0, sp, #24
 8002bce:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bd0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bd2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bd6:	d50c      	bpl.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bd8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bda:	480a      	ldr	r0, [pc, #40]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bdc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002be0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002be2:	aa06      	add	r2, sp, #24
 8002be4:	4413      	add	r3, r2
 8002be6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bea:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002bee:	b007      	add	sp, #28
 8002bf0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x74>)
 8002bf4:	4350      	muls	r0, r2
 8002bf6:	e7fa      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002bfa:	e7f8      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x5a>
 8002bfc:	0800b288 	.word	0x0800b288
 8002c00:	40021000 	.word	0x40021000
 8002c04:	007a1200 	.word	0x007a1200
 8002c08:	003d0900 	.word	0x003d0900

08002c0c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c0c:	4a4d      	ldr	r2, [pc, #308]	; (8002d44 <HAL_RCC_ClockConfig+0x138>)
{
 8002c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c12:	6813      	ldr	r3, [r2, #0]
{
 8002c14:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	428b      	cmp	r3, r1
{
 8002c1c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c1e:	d328      	bcc.n	8002c72 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c20:	682a      	ldr	r2, [r5, #0]
 8002c22:	0791      	lsls	r1, r2, #30
 8002c24:	d432      	bmi.n	8002c8c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	07d2      	lsls	r2, r2, #31
 8002c28:	d438      	bmi.n	8002c9c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c2a:	4a46      	ldr	r2, [pc, #280]	; (8002d44 <HAL_RCC_ClockConfig+0x138>)
 8002c2c:	6813      	ldr	r3, [r2, #0]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	429e      	cmp	r6, r3
 8002c34:	d373      	bcc.n	8002d1e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c36:	682a      	ldr	r2, [r5, #0]
 8002c38:	4c43      	ldr	r4, [pc, #268]	; (8002d48 <HAL_RCC_ClockConfig+0x13c>)
 8002c3a:	f012 0f04 	tst.w	r2, #4
 8002c3e:	d179      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	0713      	lsls	r3, r2, #28
 8002c42:	d506      	bpl.n	8002c52 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c44:	6863      	ldr	r3, [r4, #4]
 8002c46:	692a      	ldr	r2, [r5, #16]
 8002c48:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002c4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002c50:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c52:	f7ff ff9f 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002c56:	6863      	ldr	r3, [r4, #4]
 8002c58:	4a3c      	ldr	r2, [pc, #240]	; (8002d4c <HAL_RCC_ClockConfig+0x140>)
 8002c5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	40d8      	lsrs	r0, r3
 8002c62:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <HAL_RCC_ClockConfig+0x144>)
 8002c64:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe fa42 	bl	80010f0 <HAL_InitTick>
  return HAL_OK;
 8002c6c:	2000      	movs	r0, #0
}
 8002c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	f023 0307 	bic.w	r3, r3, #7
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c7c:	6813      	ldr	r3, [r2, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	4299      	cmp	r1, r3
 8002c84:	d0cc      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002c86:	2001      	movs	r0, #1
 8002c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8c:	492e      	ldr	r1, [pc, #184]	; (8002d48 <HAL_RCC_ClockConfig+0x13c>)
 8002c8e:	68a8      	ldr	r0, [r5, #8]
 8002c90:	684b      	ldr	r3, [r1, #4]
 8002c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c96:	4303      	orrs	r3, r0
 8002c98:	604b      	str	r3, [r1, #4]
 8002c9a:	e7c4      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9c:	686a      	ldr	r2, [r5, #4]
 8002c9e:	4c2a      	ldr	r4, [pc, #168]	; (8002d48 <HAL_RCC_ClockConfig+0x13c>)
 8002ca0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002caa:	d0ec      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cac:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cae:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002cba:	f7fe fa5b 	bl	8001174 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbe:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002cc0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d114      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc6:	6863      	ldr	r3, [r4, #4]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d0ac      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7fe fa50 	bl	8001174 <HAL_GetTick>
 8002cd4:	1bc0      	subs	r0, r0, r7
 8002cd6:	4540      	cmp	r0, r8
 8002cd8:	d9f5      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8002cda:	2003      	movs	r0, #3
 8002cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce0:	2a02      	cmp	r2, #2
 8002ce2:	d102      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ce8:	e7df      	b.n	8002caa <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cea:	f013 0f02 	tst.w	r3, #2
 8002cee:	e7dc      	b.n	8002caa <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d10f      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf4:	6863      	ldr	r3, [r4, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d095      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfe:	f7fe fa39 	bl	8001174 <HAL_GetTick>
 8002d02:	1bc0      	subs	r0, r0, r7
 8002d04:	4540      	cmp	r0, r8
 8002d06:	d9f5      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0xe8>
 8002d08:	e7e7      	b.n	8002cda <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0a:	f7fe fa33 	bl	8001174 <HAL_GetTick>
 8002d0e:	1bc0      	subs	r0, r0, r7
 8002d10:	4540      	cmp	r0, r8
 8002d12:	d8e2      	bhi.n	8002cda <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d14:	6863      	ldr	r3, [r4, #4]
 8002d16:	f013 0f0c 	tst.w	r3, #12
 8002d1a:	d1f6      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xfe>
 8002d1c:	e785      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	6813      	ldr	r3, [r2, #0]
 8002d20:	f023 0307 	bic.w	r3, r3, #7
 8002d24:	4333      	orrs	r3, r6
 8002d26:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d28:	6813      	ldr	r3, [r2, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	429e      	cmp	r6, r3
 8002d30:	d1a9      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x7a>
 8002d32:	e780      	b.n	8002c36 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	68e9      	ldr	r1, [r5, #12]
 8002d38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6063      	str	r3, [r4, #4]
 8002d40:	e77e      	b.n	8002c40 <HAL_RCC_ClockConfig+0x34>
 8002d42:	bf00      	nop
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	0800ba83 	.word	0x0800ba83
 8002d50:	20000410 	.word	0x20000410

08002d54 <HAL_RCC_GetHCLKFreq>:
}
 8002d54:	4b01      	ldr	r3, [pc, #4]	; (8002d5c <HAL_RCC_GetHCLKFreq+0x8>)
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000410 	.word	0x20000410

08002d60 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002d6e:	6810      	ldr	r0, [r2, #0]
}    
 8002d70:	40d8      	lsrs	r0, r3
 8002d72:	4770      	bx	lr
 8002d74:	40021000 	.word	0x40021000
 8002d78:	0800ba93 	.word	0x0800ba93
 8002d7c:	20000410 	.word	0x20000410

08002d80 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	4a03      	ldr	r2, [pc, #12]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002d8e:	6810      	ldr	r0, [r2, #0]
} 
 8002d90:	40d8      	lsrs	r0, r3
 8002d92:	4770      	bx	lr
 8002d94:	40021000 	.word	0x40021000
 8002d98:	0800ba93 	.word	0x0800ba93
 8002d9c:	20000410 	.word	0x20000410

08002da0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002da0:	6803      	ldr	r3, [r0, #0]
{
 8002da2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002da6:	07d9      	lsls	r1, r3, #31
{
 8002da8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002daa:	d520      	bpl.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dac:	4c35      	ldr	r4, [pc, #212]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002dae:	69e3      	ldr	r3, [r4, #28]
 8002db0:	00da      	lsls	r2, r3, #3
 8002db2:	d432      	bmi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002db4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8002db6:	69e3      	ldr	r3, [r4, #28]
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	61e3      	str	r3, [r4, #28]
 8002dbe:	69e3      	ldr	r3, [r4, #28]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc8:	4e2f      	ldr	r6, [pc, #188]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002dca:	6833      	ldr	r3, [r6, #0]
 8002dcc:	05db      	lsls	r3, r3, #23
 8002dce:	d526      	bpl.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dd0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dd2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002dd6:	d136      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dd8:	6a23      	ldr	r3, [r4, #32]
 8002dda:	686a      	ldr	r2, [r5, #4]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de0:	4313      	orrs	r3, r2
 8002de2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002de4:	b11f      	cbz	r7, 8002dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	69e3      	ldr	r3, [r4, #28]
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dee:	6828      	ldr	r0, [r5, #0]
 8002df0:	0783      	lsls	r3, r0, #30
 8002df2:	d506      	bpl.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df4:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002df6:	68a9      	ldr	r1, [r5, #8]
 8002df8:	6853      	ldr	r3, [r2, #4]
 8002dfa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e02:	f010 0010 	ands.w	r0, r0, #16
 8002e06:	d01b      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e08:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002e0a:	68e9      	ldr	r1, [r5, #12]
 8002e0c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e0e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e10:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6053      	str	r3, [r2, #4]
 8002e18:	e012      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2700      	movs	r7, #0
 8002e1c:	e7d4      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1e:	6833      	ldr	r3, [r6, #0]
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002e26:	f7fe f9a5 	bl	8001174 <HAL_GetTick>
 8002e2a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	6833      	ldr	r3, [r6, #0]
 8002e2e:	05d8      	lsls	r0, r3, #23
 8002e30:	d4ce      	bmi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fe f99f 	bl	8001174 <HAL_GetTick>
 8002e36:	eba0 0008 	sub.w	r0, r0, r8
 8002e3a:	2864      	cmp	r0, #100	; 0x64
 8002e3c:	d9f6      	bls.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002e3e:	2003      	movs	r0, #3
}
 8002e40:	b002      	add	sp, #8
 8002e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e46:	686a      	ldr	r2, [r5, #4]
 8002e48:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d0c3      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e50:	2001      	movs	r0, #1
 8002e52:	4a0e      	ldr	r2, [pc, #56]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e54:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e56:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e58:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002e60:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e62:	07d9      	lsls	r1, r3, #31
 8002e64:	d5b8      	bpl.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002e66:	f7fe f985 	bl	8001174 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002e6e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	6a23      	ldr	r3, [r4, #32]
 8002e72:	079a      	lsls	r2, r3, #30
 8002e74:	d4b0      	bmi.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe f97d 	bl	8001174 <HAL_GetTick>
 8002e7a:	1b80      	subs	r0, r0, r6
 8002e7c:	4540      	cmp	r0, r8
 8002e7e:	d9f7      	bls.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002e80:	e7dd      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42420440 	.word	0x42420440

08002e90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e94:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8002e96:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e98:	ad02      	add	r5, sp, #8
 8002e9a:	f103 0610 	add.w	r6, r3, #16
 8002e9e:	462a      	mov	r2, r5
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	c203      	stmia	r2!, {r0, r1}
 8002ea8:	42b3      	cmp	r3, r6
 8002eaa:	4615      	mov	r5, r2
 8002eac:	d1f7      	bne.n	8002e9e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f88d 3004 	strb.w	r3, [sp, #4]
 8002eb4:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8002eb6:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002eb8:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8002ebc:	d047      	beq.n	8002f4e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8002ebe:	2c10      	cmp	r4, #16
 8002ec0:	d017      	beq.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8002ec2:	2c01      	cmp	r4, #1
 8002ec4:	d14f      	bne.n	8002f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ec6:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8002eca:	4a29      	ldr	r2, [pc, #164]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002ecc:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ece:	4019      	ands	r1, r3
 8002ed0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8002ed4:	d044      	beq.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ede:	d12d      	bne.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8002ee0:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ee4:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8002ee6:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8002eea:	bf08      	it	eq
 8002eec:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8002eee:	b006      	add	sp, #24
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8002ef2:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002ef4:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002efc:	d0f7      	beq.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002efe:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8002f02:	a806      	add	r0, sp, #24
 8002f04:	4402      	add	r2, r0
 8002f06:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f0a:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f0c:	bf41      	itttt	mi
 8002f0e:	685a      	ldrmi	r2, [r3, #4]
 8002f10:	a906      	addmi	r1, sp, #24
 8002f12:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8002f16:	1852      	addmi	r2, r2, r1
 8002f18:	bf44      	itt	mi
 8002f1a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f1e:	4a15      	ldrmi	r2, [pc, #84]	; (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f20:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f22:	bf4c      	ite	mi
 8002f24:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f28:	4a13      	ldrpl	r2, [pc, #76]	; (8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f2a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f2c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f30:	d4dd      	bmi.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8002f32:	2303      	movs	r3, #3
 8002f34:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f36:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002f3a:	e7d8      	b.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f40:	d111      	bne.n	8002f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002f42:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8002f44:	f24f 4024 	movw	r0, #62500	; 0xf424
 8002f48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f4c:	e7cd      	b.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f4e:	f7ff ff17 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	e7ea      	b.n	8002f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8002f60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f64:	e7c3      	b.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8002f66:	2000      	movs	r0, #0
 8002f68:	e7c1      	b.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8002f6a:	bf00      	nop
 8002f6c:	0800b298 	.word	0x0800b298
 8002f70:	40021000 	.word	0x40021000
 8002f74:	007a1200 	.word	0x007a1200
 8002f78:	003d0900 	.word	0x003d0900

08002f7c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7c:	6a03      	ldr	r3, [r0, #32]
{
 8002f7e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f8e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002f92:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f94:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002f96:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002f9a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f9c:	4d0a      	ldr	r5, [pc, #40]	; (8002fc8 <TIM_OC1_SetConfig+0x4c>)
 8002f9e:	42a8      	cmp	r0, r5
 8002fa0:	d10b      	bne.n	8002fba <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fa2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fa4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002fa8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002faa:	698e      	ldr	r6, [r1, #24]
 8002fac:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fae:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fb4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fbc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fbe:	684a      	ldr	r2, [r1, #4]
 8002fc0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc2:	6203      	str	r3, [r0, #32]
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40012c00 	.word	0x40012c00

08002fcc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fcc:	6a03      	ldr	r3, [r0, #32]
{
 8002fce:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fda:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fdc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fde:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002fe2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fe4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002fe6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fee:	4d0b      	ldr	r5, [pc, #44]	; (800301c <TIM_OC3_SetConfig+0x50>)
 8002ff0:	42a8      	cmp	r0, r5
 8002ff2:	d10d      	bne.n	8003010 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ff4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ffa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ffe:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003000:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003002:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003006:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800300c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003010:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003012:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003014:	684a      	ldr	r2, [r1, #4]
 8003016:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003018:	6203      	str	r3, [r0, #32]
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	40012c00 	.word	0x40012c00

08003020 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003020:	6a03      	ldr	r3, [r0, #32]
{
 8003022:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003028:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800302c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800302e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003030:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003032:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003036:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800303a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800303c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003040:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003044:	4d06      	ldr	r5, [pc, #24]	; (8003060 <TIM_OC4_SetConfig+0x40>)
 8003046:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003048:	bf02      	ittt	eq
 800304a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800304c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003050:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003054:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003056:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003058:	684a      	ldr	r2, [r1, #4]
 800305a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305c:	6203      	str	r3, [r0, #32]
 800305e:	bd30      	pop	{r4, r5, pc}
 8003060:	40012c00 	.word	0x40012c00

08003064 <HAL_TIM_PWM_MspInit>:
 8003064:	4770      	bx	lr

08003066 <HAL_TIM_IC_MspInit>:
 8003066:	4770      	bx	lr

08003068 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003068:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800306c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800306e:	2b01      	cmp	r3, #1
 8003070:	f04f 0302 	mov.w	r3, #2
 8003074:	d01c      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0x48>
 8003076:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800307c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800307e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003082:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003084:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003088:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800308c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800308e:	680a      	ldr	r2, [r1, #0]
 8003090:	2a40      	cmp	r2, #64	; 0x40
 8003092:	d079      	beq.n	8003188 <HAL_TIM_ConfigClockSource+0x120>
 8003094:	d819      	bhi.n	80030ca <HAL_TIM_ConfigClockSource+0x62>
 8003096:	2a10      	cmp	r2, #16
 8003098:	f000 8093 	beq.w	80031c2 <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	d80a      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x4c>
 800309e:	2a00      	cmp	r2, #0
 80030a0:	f000 8089 	beq.w	80031b6 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80030aa:	2300      	movs	r3, #0
 80030ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80030b0:	4618      	mov	r0, r3
}
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80030b4:	2a20      	cmp	r2, #32
 80030b6:	f000 808a 	beq.w	80031ce <HAL_TIM_ConfigClockSource+0x166>
 80030ba:	2a30      	cmp	r2, #48	; 0x30
 80030bc:	d1f2      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80030be:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80030c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80030c4:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80030c8:	e036      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80030ca:	2a70      	cmp	r2, #112	; 0x70
 80030cc:	d036      	beq.n	800313c <HAL_TIM_ConfigClockSource+0xd4>
 80030ce:	d81b      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0xa0>
 80030d0:	2a50      	cmp	r2, #80	; 0x50
 80030d2:	d042      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xf2>
 80030d4:	2a60      	cmp	r2, #96	; 0x60
 80030d6:	d1e5      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d8:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030da:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030dc:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e2:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80030e6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030e8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030f4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80030f8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80030fa:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80030fc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80030fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003102:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8003106:	e017      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8003108:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800310c:	d011      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0xca>
 800310e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003112:	d1c7      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003114:	688a      	ldr	r2, [r1, #8]
 8003116:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003118:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800311a:	68c9      	ldr	r1, [r1, #12]
 800311c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800311e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003122:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003126:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003128:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003130:	e002      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	e7b3      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800313c:	688a      	ldr	r2, [r1, #8]
 800313e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003140:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003142:	68c9      	ldr	r1, [r1, #12]
 8003144:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003146:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800314a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800314e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8003150:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003152:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003154:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8003158:	e7ee      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315a:	684c      	ldr	r4, [r1, #4]
 800315c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800315e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003160:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003162:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003166:	f025 0501 	bic.w	r5, r5, #1
 800316a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800316c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800316e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003170:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003174:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003178:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800317c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800317e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003182:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8003186:	e7d7      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003188:	684c      	ldr	r4, [r1, #4]
 800318a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800318c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800318e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003190:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003194:	f025 0501 	bic.w	r5, r5, #1
 8003198:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800319a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800319c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800319e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031a2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80031a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80031aa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80031b0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80031b4:	e7c0      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031b6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80031bc:	f042 0207 	orr.w	r2, r2, #7
 80031c0:	e7ba      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031c2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80031c8:	f042 0217 	orr.w	r2, r2, #23
 80031cc:	e7b4      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031ce:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80031d4:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80031d8:	e7ae      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>

080031da <HAL_TIM_OC_DelayElapsedCallback>:
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_PWM_PulseFinishedCallback>:
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_TriggerCallback>:
 80031de:	4770      	bx	lr

080031e0 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e0:	6803      	ldr	r3, [r0, #0]
{
 80031e2:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e4:	691a      	ldr	r2, [r3, #16]
{
 80031e6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e8:	0791      	lsls	r1, r2, #30
 80031ea:	d50e      	bpl.n	800320a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	0792      	lsls	r2, r2, #30
 80031f0:	d50b      	bpl.n	800320a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031f2:	f06f 0202 	mvn.w	r2, #2
 80031f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f8:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031fa:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031fc:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031fe:	079b      	lsls	r3, r3, #30
 8003200:	d077      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003202:	f002 fabd 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	2300      	movs	r3, #0
 8003208:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	0750      	lsls	r0, r2, #29
 8003210:	d510      	bpl.n	8003234 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	0751      	lsls	r1, r2, #29
 8003216:	d50d      	bpl.n	8003234 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003218:	f06f 0204 	mvn.w	r2, #4
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003220:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003222:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003224:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003228:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800322a:	d068      	beq.n	80032fe <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800322c:	f002 faa8 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003230:	2300      	movs	r3, #0
 8003232:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	0712      	lsls	r2, r2, #28
 800323a:	d50f      	bpl.n	800325c <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	0710      	lsls	r0, r2, #28
 8003240:	d50c      	bpl.n	800325c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003242:	f06f 0208 	mvn.w	r2, #8
 8003246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003248:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800324a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800324c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800324e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003250:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003252:	d05a      	beq.n	800330a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003254:	f002 fa94 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003258:	2300      	movs	r3, #0
 800325a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	06d2      	lsls	r2, r2, #27
 8003262:	d510      	bpl.n	8003286 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	06d0      	lsls	r0, r2, #27
 8003268:	d50d      	bpl.n	8003286 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800326a:	f06f 0210 	mvn.w	r2, #16
 800326e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003270:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003272:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003274:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003276:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800327c:	d04b      	beq.n	8003316 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800327e:	f002 fa7f 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	2300      	movs	r3, #0
 8003284:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	07d1      	lsls	r1, r2, #31
 800328c:	d508      	bpl.n	80032a0 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	07d2      	lsls	r2, r2, #31
 8003292:	d505      	bpl.n	80032a0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003294:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003298:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800329a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800329c:	f004 ff74 	bl	8008188 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	0610      	lsls	r0, r2, #24
 80032a6:	d508      	bpl.n	80032ba <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	0611      	lsls	r1, r2, #24
 80032ac:	d505      	bpl.n	80032ba <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80032b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80032b6:	f000 fa6c 	bl	8003792 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	0652      	lsls	r2, r2, #25
 80032c0:	d508      	bpl.n	80032d4 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	0650      	lsls	r0, r2, #25
 80032c6:	d505      	bpl.n	80032d4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80032cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80032d0:	f7ff ff85 	bl	80031de <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	0691      	lsls	r1, r2, #26
 80032da:	d522      	bpl.n	8003322 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	0692      	lsls	r2, r2, #26
 80032e0:	d51f      	bpl.n	8003322 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032e2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80032e6:	4620      	mov	r0, r4
}
 80032e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80032ee:	f000 ba4f 	b.w	8003790 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	f7ff ff72 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f6:	4620      	mov	r0, r4
 80032f8:	f7ff ff70 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 80032fc:	e783      	b.n	8003206 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	f7ff ff6c 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003302:	4620      	mov	r0, r4
 8003304:	f7ff ff6a 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003308:	e792      	b.n	8003230 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330a:	f7ff ff66 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330e:	4620      	mov	r0, r4
 8003310:	f7ff ff64 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003314:	e7a0      	b.n	8003258 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	f7ff ff60 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331a:	4620      	mov	r0, r4
 800331c:	f7ff ff5e 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003320:	e7af      	b.n	8003282 <HAL_TIM_IRQHandler+0xa2>
 8003322:	bd10      	pop	{r4, pc}

08003324 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003324:	4a1a      	ldr	r2, [pc, #104]	; (8003390 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003326:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003328:	4290      	cmp	r0, r2
 800332a:	d00a      	beq.n	8003342 <TIM_Base_SetConfig+0x1e>
 800332c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0x1e>
 8003332:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003336:	4290      	cmp	r0, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0x1e>
 800333a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800333e:	4290      	cmp	r0, r2
 8003340:	d115      	bne.n	800336e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003342:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003348:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800334a:	4a11      	ldr	r2, [pc, #68]	; (8003390 <TIM_Base_SetConfig+0x6c>)
 800334c:	4290      	cmp	r0, r2
 800334e:	d00a      	beq.n	8003366 <TIM_Base_SetConfig+0x42>
 8003350:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003354:	d007      	beq.n	8003366 <TIM_Base_SetConfig+0x42>
 8003356:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800335a:	4290      	cmp	r0, r2
 800335c:	d003      	beq.n	8003366 <TIM_Base_SetConfig+0x42>
 800335e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003362:	4290      	cmp	r0, r2
 8003364:	d103      	bne.n	800336e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800336e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003374:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003376:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003378:	688b      	ldr	r3, [r1, #8]
 800337a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800337c:	680b      	ldr	r3, [r1, #0]
 800337e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <TIM_Base_SetConfig+0x6c>)
 8003382:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003384:	bf04      	itt	eq
 8003386:	690b      	ldreq	r3, [r1, #16]
 8003388:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800338a:	2301      	movs	r3, #1
 800338c:	6143      	str	r3, [r0, #20]
 800338e:	4770      	bx	lr
 8003390:	40012c00 	.word	0x40012c00

08003394 <HAL_TIM_Base_Init>:
{
 8003394:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003396:	4604      	mov	r4, r0
 8003398:	b1a0      	cbz	r0, 80033c4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800339a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800339e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033a2:	b91b      	cbnz	r3, 80033ac <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80033a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80033a8:	f004 ff72 	bl	8008290 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80033ac:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ae:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80033b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b4:	1d21      	adds	r1, r4, #4
 80033b6:	f7ff ffb5 	bl	8003324 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80033ba:	2301      	movs	r3, #1
  return HAL_OK;
 80033bc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80033be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80033c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80033c4:	2001      	movs	r0, #1
}
 80033c6:	bd10      	pop	{r4, pc}

080033c8 <HAL_TIM_PWM_Init>:
{
 80033c8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80033ca:	4604      	mov	r4, r0
 80033cc:	b1a0      	cbz	r0, 80033f8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80033ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033d6:	b91b      	cbnz	r3, 80033e0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80033d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80033dc:	f7ff fe42 	bl	8003064 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80033e0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80033e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e8:	1d21      	adds	r1, r4, #4
 80033ea:	f7ff ff9b 	bl	8003324 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80033ee:	2301      	movs	r3, #1
  return HAL_OK;
 80033f0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80033f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80033f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80033f8:	2001      	movs	r0, #1
}
 80033fa:	bd10      	pop	{r4, pc}

080033fc <HAL_TIM_IC_Init>:
{
 80033fc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80033fe:	4604      	mov	r4, r0
 8003400:	b1a0      	cbz	r0, 800342c <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003402:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003406:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800340a:	b91b      	cbnz	r3, 8003414 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800340c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003410:	f7ff fe29 	bl	8003066 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003414:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003416:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003418:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341c:	1d21      	adds	r1, r4, #4
 800341e:	f7ff ff81 	bl	8003324 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003422:	2301      	movs	r3, #1
  return HAL_OK;
 8003424:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003426:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800342a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800342c:	2001      	movs	r0, #1
}
 800342e:	bd10      	pop	{r4, pc}

08003430 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003430:	6a03      	ldr	r3, [r0, #32]
{
 8003432:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003434:	f023 0310 	bic.w	r3, r3, #16
 8003438:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800343a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800343c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800343e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003440:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003442:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003446:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800344a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800344c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003450:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003454:	4d0b      	ldr	r5, [pc, #44]	; (8003484 <TIM_OC2_SetConfig+0x54>)
 8003456:	42a8      	cmp	r0, r5
 8003458:	d10d      	bne.n	8003476 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800345a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800345c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003460:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003464:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003466:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003468:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800346c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800346e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003472:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003476:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003478:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800347a:	684a      	ldr	r2, [r1, #4]
 800347c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800347e:	6203      	str	r3, [r0, #32]
 8003480:	bd70      	pop	{r4, r5, r6, pc}
 8003482:	bf00      	nop
 8003484:	40012c00 	.word	0x40012c00

08003488 <HAL_TIM_PWM_ConfigChannel>:
{
 8003488:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800348a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800348e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003490:	2b01      	cmp	r3, #1
 8003492:	f04f 0002 	mov.w	r0, #2
 8003496:	d025      	beq.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8003498:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800349a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800349e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80034a2:	2a0c      	cmp	r2, #12
 80034a4:	d818      	bhi.n	80034d8 <HAL_TIM_PWM_ConfigChannel+0x50>
 80034a6:	e8df f002 	tbb	[pc, r2]
 80034aa:	1707      	.short	0x1707
 80034ac:	171e1717 	.word	0x171e1717
 80034b0:	172f1717 	.word	0x172f1717
 80034b4:	1717      	.short	0x1717
 80034b6:	40          	.byte	0x40
 80034b7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034b8:	6820      	ldr	r0, [r4, #0]
 80034ba:	f7ff fd5f 	bl	8002f7c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034be:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034c0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	f042 0208 	orr.w	r2, r2, #8
 80034c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034ca:	699a      	ldr	r2, [r3, #24]
 80034cc:	f022 0204 	bic.w	r2, r2, #4
 80034d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80034d6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80034da:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80034dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80034e0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80034e4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e6:	6820      	ldr	r0, [r4, #0]
 80034e8:	f7ff ffa2 	bl	8003430 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034ec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80034ee:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003506:	e7e6      	b.n	80034d6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003508:	6820      	ldr	r0, [r4, #0]
 800350a:	f7ff fd5f 	bl	8002fcc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800350e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003510:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	f042 0208 	orr.w	r2, r2, #8
 8003518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	f022 0204 	bic.w	r2, r2, #4
 8003520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003526:	61da      	str	r2, [r3, #28]
    break;
 8003528:	e7d6      	b.n	80034d8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	f7ff fd78 	bl	8003020 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003530:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003532:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800353a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003542:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800354a:	e7ec      	b.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800354c <TIM_TI1_SetConfig>:
{
 800354c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354e:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003550:	4e12      	ldr	r6, [pc, #72]	; (800359c <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003552:	f024 0401 	bic.w	r4, r4, #1
 8003556:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003558:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800355a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800355c:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800355e:	d00a      	beq.n	8003576 <TIM_TI1_SetConfig+0x2a>
 8003560:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003564:	d007      	beq.n	8003576 <TIM_TI1_SetConfig+0x2a>
 8003566:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800356a:	42b0      	cmp	r0, r6
 800356c:	d003      	beq.n	8003576 <TIM_TI1_SetConfig+0x2a>
 800356e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003572:	42b0      	cmp	r0, r6
 8003574:	d10f      	bne.n	8003596 <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003576:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800357a:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800357c:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800357e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003582:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003584:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003588:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800358c:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800358e:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8003590:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003592:	6201      	str	r1, [r0, #32]
}
 8003594:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003596:	f044 0201 	orr.w	r2, r4, #1
 800359a:	e7ef      	b.n	800357c <TIM_TI1_SetConfig+0x30>
 800359c:	40012c00 	.word	0x40012c00

080035a0 <HAL_TIM_IC_ConfigChannel>:
{
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80035a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80035a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80035a8:	2b01      	cmp	r3, #1
{
 80035aa:	460d      	mov	r5, r1
 80035ac:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80035b0:	d019      	beq.n	80035e6 <HAL_TIM_IC_ConfigChannel+0x46>
 80035b2:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80035b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80035bc:	b9a2      	cbnz	r2, 80035e8 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 80035be:	68cb      	ldr	r3, [r1, #12]
 80035c0:	6820      	ldr	r0, [r4, #0]
 80035c2:	c906      	ldmia	r1, {r1, r2}
 80035c4:	f7ff ffc2 	bl	800354c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035c8:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035ca:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	f022 020c 	bic.w	r2, r2, #12
 80035d2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80035da:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80035dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80035de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80035e2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80035e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80035e8:	2a04      	cmp	r2, #4
 80035ea:	688e      	ldr	r6, [r1, #8]
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	c982      	ldmia	r1, {r1, r7}
 80035f0:	68e8      	ldr	r0, [r5, #12]
 80035f2:	d11f      	bne.n	8003634 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80035f6:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f8:	f022 0210 	bic.w	r2, r2, #16
 80035fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fe:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8003600:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003602:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003606:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800360a:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800360c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003610:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003612:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003614:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003618:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800361c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003628:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8003630:	619e      	str	r6, [r3, #24]
 8003632:	e7d2      	b.n	80035da <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8003634:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003636:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8003638:	d11c      	bne.n	8003674 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800363a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800363e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003640:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003642:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003644:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 8003648:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 800364a:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800364c:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800364e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003652:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003654:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003656:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800365a:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800365e:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8003660:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003662:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	f022 020c 	bic.w	r2, r2, #12
 800366a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003670:	61de      	str	r6, [r3, #28]
 8003672:	e7b2      	b.n	80035da <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003674:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003678:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800367a:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800367c:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800367e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 8003682:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003684:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003688:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800368c:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800368e:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003690:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003692:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 8003696:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800369a:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 800369c:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 800369e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036a6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80036ae:	e7df      	b.n	8003670 <HAL_TIM_IC_ConfigChannel+0xd0>

080036b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036b0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80036b2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036b4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80036b6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80036b8:	ea23 0304 	bic.w	r3, r3, r4
 80036bc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80036be:	6a03      	ldr	r3, [r0, #32]
 80036c0:	408a      	lsls	r2, r1
 80036c2:	431a      	orrs	r2, r3
 80036c4:	6202      	str	r2, [r0, #32]
 80036c6:	bd10      	pop	{r4, pc}

080036c8 <HAL_TIM_PWM_Start>:
{
 80036c8:	b510      	push	{r4, lr}
 80036ca:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036cc:	2201      	movs	r2, #1
 80036ce:	6800      	ldr	r0, [r0, #0]
 80036d0:	f7ff ffee 	bl	80036b0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	4a06      	ldr	r2, [pc, #24]	; (80036f0 <HAL_TIM_PWM_Start+0x28>)
}
 80036d8:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036da:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80036dc:	bf02      	ittt	eq
 80036de:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80036e0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80036e4:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
}
 80036ee:	bd10      	pop	{r4, pc}
 80036f0:	40012c00 	.word	0x40012c00

080036f4 <HAL_TIM_IC_Start_IT>:
{
 80036f4:	b510      	push	{r4, lr}
 80036f6:	4604      	mov	r4, r0
  switch (Channel)
 80036f8:	290c      	cmp	r1, #12
 80036fa:	d80d      	bhi.n	8003718 <HAL_TIM_IC_Start_IT+0x24>
 80036fc:	e8df f001 	tbb	[pc, r1]
 8003700:	0c0c0c07 	.word	0x0c0c0c07
 8003704:	0c0c0c17 	.word	0x0c0c0c17
 8003708:	0c0c0c1c 	.word	0x0c0c0c1c
 800370c:	21          	.byte	0x21
 800370d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800370e:	6802      	ldr	r2, [r0, #0]
 8003710:	68d3      	ldr	r3, [r2, #12]
 8003712:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003716:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003718:	6820      	ldr	r0, [r4, #0]
 800371a:	2201      	movs	r2, #1
 800371c:	f7ff ffc8 	bl	80036b0 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8003720:	6822      	ldr	r2, [r4, #0]
}
 8003722:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003724:	6813      	ldr	r3, [r2, #0]
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800372e:	6802      	ldr	r2, [r0, #0]
 8003730:	68d3      	ldr	r3, [r2, #12]
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	e7ee      	b.n	8003716 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003738:	6802      	ldr	r2, [r0, #0]
 800373a:	68d3      	ldr	r3, [r2, #12]
 800373c:	f043 0308 	orr.w	r3, r3, #8
 8003740:	e7e9      	b.n	8003716 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003742:	6802      	ldr	r2, [r0, #0]
 8003744:	68d3      	ldr	r3, [r2, #12]
 8003746:	f043 0310 	orr.w	r3, r3, #16
 800374a:	e7e4      	b.n	8003716 <HAL_TIM_IC_Start_IT+0x22>

0800374c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800374c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003750:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003752:	2b01      	cmp	r3, #1
 8003754:	f04f 0302 	mov.w	r3, #2
 8003758:	d018      	beq.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800375a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800375e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003760:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003762:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003764:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003766:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800376a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	4322      	orrs	r2, r4
 8003770:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003778:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003780:	2301      	movs	r3, #1
 8003782:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003786:	2300      	movs	r3, #0
 8003788:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800378c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800378e:	bd10      	pop	{r4, pc}

08003790 <HAL_TIMEx_CommutationCallback>:
 8003790:	4770      	bx	lr

08003792 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003792:	4770      	bx	lr

08003794 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003794:	6803      	ldr	r3, [r0, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800379c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037a6:	2320      	movs	r3, #32
 80037a8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80037ac:	4770      	bx	lr
	...

080037b0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b4:	6805      	ldr	r5, [r0, #0]
 80037b6:	68c2      	ldr	r2, [r0, #12]
 80037b8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037ba:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037c0:	4313      	orrs	r3, r2
 80037c2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037c4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80037c6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80037cc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80037d0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037d4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037da:	696b      	ldr	r3, [r5, #20]
 80037dc:	6982      	ldr	r2, [r0, #24]
 80037de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e2:	4313      	orrs	r3, r2
 80037e4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80037e6:	4b40      	ldr	r3, [pc, #256]	; (80038e8 <UART_SetConfig+0x138>)
{
 80037e8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80037ea:	429d      	cmp	r5, r3
 80037ec:	f04f 0419 	mov.w	r4, #25
 80037f0:	d146      	bne.n	8003880 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80037f2:	f7ff fac5 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 80037f6:	fb04 f300 	mul.w	r3, r4, r0
 80037fa:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80037fe:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003802:	00b6      	lsls	r6, r6, #2
 8003804:	fbb3 f3f6 	udiv	r3, r3, r6
 8003808:	fbb3 f3f8 	udiv	r3, r3, r8
 800380c:	011e      	lsls	r6, r3, #4
 800380e:	f7ff fab7 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8003812:	4360      	muls	r0, r4
 8003814:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	fbb0 f7f3 	udiv	r7, r0, r3
 800381e:	f7ff faaf 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8003822:	4360      	muls	r0, r4
 8003824:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	fbb0 f3f3 	udiv	r3, r0, r3
 800382e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003832:	fb08 7313 	mls	r3, r8, r3, r7
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	3332      	adds	r3, #50	; 0x32
 800383a:	fbb3 f3f8 	udiv	r3, r3, r8
 800383e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003842:	f7ff fa9d 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8003846:	4360      	muls	r0, r4
 8003848:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800384c:	0092      	lsls	r2, r2, #2
 800384e:	fbb0 faf2 	udiv	sl, r0, r2
 8003852:	f7ff fa95 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003856:	4360      	muls	r0, r4
 8003858:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003862:	fbb3 f3f8 	udiv	r3, r3, r8
 8003866:	fb08 a313 	mls	r3, r8, r3, sl
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	3332      	adds	r3, #50	; 0x32
 800386e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	433b      	orrs	r3, r7
 8003878:	4433      	add	r3, r6
 800387a:	60ab      	str	r3, [r5, #8]
 800387c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003880:	f7ff fa6e 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8003884:	fb04 f300 	mul.w	r3, r4, r0
 8003888:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800388c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003890:	00b6      	lsls	r6, r6, #2
 8003892:	fbb3 f3f6 	udiv	r3, r3, r6
 8003896:	fbb3 f3f8 	udiv	r3, r3, r8
 800389a:	011e      	lsls	r6, r3, #4
 800389c:	f7ff fa60 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80038a0:	4360      	muls	r0, r4
 80038a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	fbb0 f7f3 	udiv	r7, r0, r3
 80038ac:	f7ff fa58 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80038b0:	4360      	muls	r0, r4
 80038b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038bc:	fbb3 f3f8 	udiv	r3, r3, r8
 80038c0:	fb08 7313 	mls	r3, r8, r3, r7
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	3332      	adds	r3, #50	; 0x32
 80038c8:	fbb3 f3f8 	udiv	r3, r3, r8
 80038cc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80038d0:	f7ff fa46 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80038d4:	4360      	muls	r0, r4
 80038d6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	fbb0 faf2 	udiv	sl, r0, r2
 80038e0:	f7ff fa3e 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80038e4:	e7b7      	b.n	8003856 <UART_SetConfig+0xa6>
 80038e6:	bf00      	nop
 80038e8:	40013800 	.word	0x40013800

080038ec <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	4604      	mov	r4, r0
 80038f0:	460e      	mov	r6, r1
 80038f2:	4617      	mov	r7, r2
 80038f4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80038f6:	6821      	ldr	r1, [r4, #0]
 80038f8:	680b      	ldr	r3, [r1, #0]
 80038fa:	ea36 0303 	bics.w	r3, r6, r3
 80038fe:	d101      	bne.n	8003904 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003900:	2000      	movs	r0, #0
}
 8003902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003904:	1c6b      	adds	r3, r5, #1
 8003906:	d0f7      	beq.n	80038f8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003908:	b995      	cbnz	r5, 8003930 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800390c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003914:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800391e:	2320      	movs	r3, #32
 8003920:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003924:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003928:	2300      	movs	r3, #0
 800392a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800392e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003930:	f7fd fc20 	bl	8001174 <HAL_GetTick>
 8003934:	1bc0      	subs	r0, r0, r7
 8003936:	4285      	cmp	r5, r0
 8003938:	d2dd      	bcs.n	80038f6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800393a:	e7e6      	b.n	800390a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800393c <HAL_UART_Init>:
{
 800393c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800393e:	4604      	mov	r4, r0
 8003940:	b340      	cbz	r0, 8003994 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003942:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003946:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800394a:	b91b      	cbnz	r3, 8003954 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800394c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003950:	f004 fd44 	bl	80083dc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003954:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003956:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003958:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800395c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800395e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003964:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003966:	f7ff ff23 	bl	80037b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800397c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003984:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8003986:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800398a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800398e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003992:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003994:	2001      	movs	r0, #1
}
 8003996:	bd10      	pop	{r4, pc}

08003998 <HAL_UART_Transmit>:
{
 8003998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800399c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800399e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80039a2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80039a4:	2b20      	cmp	r3, #32
{
 80039a6:	460d      	mov	r5, r1
 80039a8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80039aa:	d14e      	bne.n	8003a4a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80039ac:	2900      	cmp	r1, #0
 80039ae:	d049      	beq.n	8003a44 <HAL_UART_Transmit+0xac>
 80039b0:	2a00      	cmp	r2, #0
 80039b2:	d047      	beq.n	8003a44 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80039b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d046      	beq.n	8003a4a <HAL_UART_Transmit+0xb2>
 80039bc:	2301      	movs	r3, #1
 80039be:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c6:	2321      	movs	r3, #33	; 0x21
 80039c8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80039cc:	f7fd fbd2 	bl	8001174 <HAL_GetTick>
 80039d0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80039d2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80039d6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80039da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80039dc:	b29b      	uxth	r3, r3
 80039de:	b96b      	cbnz	r3, 80039fc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e0:	463b      	mov	r3, r7
 80039e2:	4632      	mov	r2, r6
 80039e4:	2140      	movs	r1, #64	; 0x40
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7ff ff80 	bl	80038ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 80039ec:	b9a8      	cbnz	r0, 8003a1a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80039ee:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80039f0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80039f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80039f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80039fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039fe:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a06:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a08:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0e:	4620      	mov	r0, r4
 8003a10:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a12:	d10e      	bne.n	8003a32 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a14:	f7ff ff6a 	bl	80038ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003a18:	b110      	cbz	r0, 8003a20 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8003a1a:	2003      	movs	r0, #3
 8003a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a20:	882b      	ldrh	r3, [r5, #0]
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a28:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	b943      	cbnz	r3, 8003a40 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8003a2e:	3502      	adds	r5, #2
 8003a30:	e7d3      	b.n	80039da <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a32:	f7ff ff5b 	bl	80038ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d1ef      	bne.n	8003a1a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	782a      	ldrb	r2, [r5, #0]
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	3501      	adds	r5, #1
 8003a42:	e7ca      	b.n	80039da <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003a44:	2001      	movs	r0, #1
 8003a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003a4a:	2002      	movs	r0, #2
}
 8003a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a50 <HAL_UART_Transmit_DMA>:
{
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	4604      	mov	r4, r0
 8003a54:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003a56:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003a5a:	2a20      	cmp	r2, #32
 8003a5c:	d12a      	bne.n	8003ab4 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 8003a5e:	b339      	cbz	r1, 8003ab0 <HAL_UART_Transmit_DMA+0x60>
 8003a60:	b333      	cbz	r3, 8003ab0 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8003a62:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8003a66:	2a01      	cmp	r2, #1
 8003a68:	d024      	beq.n	8003ab4 <HAL_UART_Transmit_DMA+0x64>
 8003a6a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003a6e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a72:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8003a74:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a76:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a7a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a7e:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8003a80:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8003a82:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a84:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a86:	4a0d      	ldr	r2, [pc, #52]	; (8003abc <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8003a88:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a8a:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ac0 <HAL_UART_Transmit_DMA+0x70>)
 8003a8e:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	3204      	adds	r2, #4
 8003a94:	f7fd fe94 	bl	80017c0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a9c:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8003a9e:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003aa0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003aa2:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8003aa4:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003aa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aac:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8003aae:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8003ab4:	2002      	movs	r0, #2
}
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	08003b57 	.word	0x08003b57
 8003abc:	08003b85 	.word	0x08003b85
 8003ac0:	08003c51 	.word	0x08003c51

08003ac4 <HAL_UART_Receive_DMA>:
{
 8003ac4:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003ac6:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8003aca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003acc:	2a20      	cmp	r2, #32
{
 8003ace:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003ad0:	d138      	bne.n	8003b44 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL) || (Size == 0U))
 8003ad2:	2900      	cmp	r1, #0
 8003ad4:	d034      	beq.n	8003b40 <HAL_UART_Receive_DMA+0x7c>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d032      	beq.n	8003b40 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8003ada:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8003ade:	2a01      	cmp	r2, #1
 8003ae0:	d030      	beq.n	8003b44 <HAL_UART_Receive_DMA+0x80>
 8003ae2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8003ae6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aea:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8003aec:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8003aee:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af0:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003af2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003af6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003af8:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003afa:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003afc:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003afe:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 8003b00:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b02:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b04:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <HAL_UART_Receive_DMA+0x8c>)
 8003b06:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003b08:	460a      	mov	r2, r1
 8003b0a:	1d31      	adds	r1, r6, #4
 8003b0c:	f7fd fe58 	bl	80017c0 <HAL_DMA_Start_IT>
    return HAL_OK;
 8003b10:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003b12:	682b      	ldr	r3, [r5, #0]
 8003b14:	9401      	str	r4, [sp, #4]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	9201      	str	r2, [sp, #4]
 8003b1a:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8003b1c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003b20:	9201      	str	r2, [sp, #4]
 8003b22:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2a:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b3a:	615a      	str	r2, [r3, #20]
}
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003b40:	2001      	movs	r0, #1
 8003b42:	e7fb      	b.n	8003b3c <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8003b44:	2002      	movs	r0, #2
 8003b46:	e7f9      	b.n	8003b3c <HAL_UART_Receive_DMA+0x78>
 8003b48:	08003b8f 	.word	0x08003b8f
 8003b4c:	08003c45 	.word	0x08003c45
 8003b50:	08003c51 	.word	0x08003c51

08003b54 <HAL_UART_TxCpltCallback>:
 8003b54:	4770      	bx	lr

08003b56 <UART_DMATransmitCplt>:
{
 8003b56:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b58:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b5a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f013 0320 	ands.w	r3, r3, #32
 8003b62:	d10a      	bne.n	8003b7a <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 8003b64:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b6e:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7ff ffea 	bl	8003b54 <HAL_UART_TxCpltCallback>
 8003b80:	bd08      	pop	{r3, pc}

08003b82 <HAL_UART_TxHalfCpltCallback>:
 8003b82:	4770      	bx	lr

08003b84 <UART_DMATxHalfCplt>:
{
 8003b84:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003b86:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003b88:	f7ff fffb 	bl	8003b82 <HAL_UART_TxHalfCpltCallback>
 8003b8c:	bd08      	pop	{r3, pc}

08003b8e <UART_DMAReceiveCplt>:
{
 8003b8e:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b90:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b92:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f013 0320 	ands.w	r3, r3, #32
 8003b9a:	d110      	bne.n	8003bbe <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8003b9c:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	68d9      	ldr	r1, [r3, #12]
 8003ba2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003ba6:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba8:	6959      	ldr	r1, [r3, #20]
 8003baa:	f021 0101 	bic.w	r1, r1, #1
 8003bae:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb0:	6959      	ldr	r1, [r3, #20]
 8003bb2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003bb6:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f003 fbac 	bl	800731c <HAL_UART_RxCpltCallback>
 8003bc4:	bd08      	pop	{r3, pc}

08003bc6 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003bc6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8003bca:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003bcc:	2b22      	cmp	r3, #34	; 0x22
 8003bce:	d136      	bne.n	8003c3e <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bd0:	6883      	ldr	r3, [r0, #8]
 8003bd2:	6901      	ldr	r1, [r0, #16]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	6802      	ldr	r2, [r0, #0]
 8003bda:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003bdc:	d123      	bne.n	8003c26 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bde:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003be0:	b9e9      	cbnz	r1, 8003c1e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003be2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be6:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003bea:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8003bec:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003bee:	3c01      	subs	r4, #1
 8003bf0:	b2a4      	uxth	r4, r4
 8003bf2:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003bf4:	b98c      	cbnz	r4, 8003c1a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bf6:	6803      	ldr	r3, [r0, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	f022 0220 	bic.w	r2, r2, #32
 8003bfe:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c06:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003c10:	2320      	movs	r3, #32
 8003c12:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003c16:	f003 fb81 	bl	800731c <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8003c1a:	2000      	movs	r0, #0
}
 8003c1c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	f823 2b01 	strh.w	r2, [r3], #1
 8003c24:	e7e1      	b.n	8003bea <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003c26:	b921      	cbnz	r1, 8003c32 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c28:	1c59      	adds	r1, r3, #1
 8003c2a:	6852      	ldr	r2, [r2, #4]
 8003c2c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e7dc      	b.n	8003bec <UART_Receive_IT+0x26>
 8003c32:	6852      	ldr	r2, [r2, #4]
 8003c34:	1c59      	adds	r1, r3, #1
 8003c36:	6281      	str	r1, [r0, #40]	; 0x28
 8003c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c3c:	e7f7      	b.n	8003c2e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8003c3e:	2002      	movs	r0, #2
 8003c40:	bd10      	pop	{r4, pc}

08003c42 <HAL_UART_RxHalfCpltCallback>:
 8003c42:	4770      	bx	lr

08003c44 <UART_DMARxHalfCplt>:
{
 8003c44:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8003c46:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003c48:	f7ff fffb 	bl	8003c42 <HAL_UART_RxHalfCpltCallback>
 8003c4c:	bd08      	pop	{r3, pc}

08003c4e <HAL_UART_ErrorCallback>:
 8003c4e:	4770      	bx	lr

08003c50 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c50:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8003c52:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003c54:	680b      	ldr	r3, [r1, #0]
 8003c56:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003c58:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8003c5c:	2821      	cmp	r0, #33	; 0x21
 8003c5e:	d10a      	bne.n	8003c76 <UART_DMAError+0x26>
 8003c60:	0612      	lsls	r2, r2, #24
 8003c62:	d508      	bpl.n	8003c76 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8003c64:	2200      	movs	r2, #0
 8003c66:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003c6e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003c70:	2220      	movs	r2, #32
 8003c72:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8003c76:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c78:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8003c7c:	2a22      	cmp	r2, #34	; 0x22
 8003c7e:	d106      	bne.n	8003c8e <UART_DMAError+0x3e>
 8003c80:	065b      	lsls	r3, r3, #25
 8003c82:	d504      	bpl.n	8003c8e <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8003c84:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8003c86:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8003c88:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003c8a:	f7ff fd83 	bl	8003794 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c8e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003c90:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c92:	f043 0310 	orr.w	r3, r3, #16
 8003c96:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003c98:	f7ff ffd9 	bl	8003c4e <HAL_UART_ErrorCallback>
 8003c9c:	bd08      	pop	{r3, pc}
	...

08003ca0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ca0:	6803      	ldr	r3, [r0, #0]
{
 8003ca2:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ca4:	681a      	ldr	r2, [r3, #0]
{
 8003ca6:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8003ca8:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003caa:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cac:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8003cae:	d107      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cb0:	0696      	lsls	r6, r2, #26
 8003cb2:	d55a      	bpl.n	8003d6a <HAL_UART_IRQHandler+0xca>
 8003cb4:	068d      	lsls	r5, r1, #26
 8003cb6:	d558      	bpl.n	8003d6a <HAL_UART_IRQHandler+0xca>
}
 8003cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003cbc:	f7ff bf83 	b.w	8003bc6 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cc0:	f015 0501 	ands.w	r5, r5, #1
 8003cc4:	d102      	bne.n	8003ccc <HAL_UART_IRQHandler+0x2c>
 8003cc6:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003cca:	d04e      	beq.n	8003d6a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ccc:	07d3      	lsls	r3, r2, #31
 8003cce:	d505      	bpl.n	8003cdc <HAL_UART_IRQHandler+0x3c>
 8003cd0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cd2:	bf42      	ittt	mi
 8003cd4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003cd6:	f043 0301 	orrmi.w	r3, r3, #1
 8003cda:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cdc:	0750      	lsls	r0, r2, #29
 8003cde:	d504      	bpl.n	8003cea <HAL_UART_IRQHandler+0x4a>
 8003ce0:	b11d      	cbz	r5, 8003cea <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ce2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cea:	0793      	lsls	r3, r2, #30
 8003cec:	d504      	bpl.n	8003cf8 <HAL_UART_IRQHandler+0x58>
 8003cee:	b11d      	cbz	r5, 8003cf8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf8:	0716      	lsls	r6, r2, #28
 8003cfa:	d504      	bpl.n	8003d06 <HAL_UART_IRQHandler+0x66>
 8003cfc:	b11d      	cbz	r5, 8003d06 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d00:	f043 0308 	orr.w	r3, r3, #8
 8003d04:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d066      	beq.n	8003dda <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d0c:	0695      	lsls	r5, r2, #26
 8003d0e:	d504      	bpl.n	8003d1a <HAL_UART_IRQHandler+0x7a>
 8003d10:	0688      	lsls	r0, r1, #26
 8003d12:	d502      	bpl.n	8003d1a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8003d14:	4620      	mov	r0, r4
 8003d16:	f7ff ff56 	bl	8003bc6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003d1c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d20:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003d22:	0711      	lsls	r1, r2, #28
 8003d24:	d402      	bmi.n	8003d2c <HAL_UART_IRQHandler+0x8c>
 8003d26:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003d2a:	d01a      	beq.n	8003d62 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003d2c:	f7ff fd32 	bl	8003794 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	0652      	lsls	r2, r2, #25
 8003d36:	d510      	bpl.n	8003d5a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d38:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8003d3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d40:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8003d42:	b150      	cbz	r0, 8003d5a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <HAL_UART_IRQHandler+0x13c>)
 8003d46:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d48:	f7fd fd78 	bl	800183c <HAL_DMA_Abort_IT>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d044      	beq.n	8003dda <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d50:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d58:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7ff ff77 	bl	8003c4e <HAL_UART_ErrorCallback>
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003d62:	f7ff ff74 	bl	8003c4e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003d68:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d6a:	0616      	lsls	r6, r2, #24
 8003d6c:	d527      	bpl.n	8003dbe <HAL_UART_IRQHandler+0x11e>
 8003d6e:	060d      	lsls	r5, r1, #24
 8003d70:	d525      	bpl.n	8003dbe <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d72:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003d76:	2a21      	cmp	r2, #33	; 0x21
 8003d78:	d12f      	bne.n	8003dda <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d7a:	68a2      	ldr	r2, [r4, #8]
 8003d7c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003d80:	6a22      	ldr	r2, [r4, #32]
 8003d82:	d117      	bne.n	8003db4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d84:	8811      	ldrh	r1, [r2, #0]
 8003d86:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003d8a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003d8c:	6921      	ldr	r1, [r4, #16]
 8003d8e:	b979      	cbnz	r1, 8003db0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8003d90:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8003d92:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8003d94:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003d96:	3a01      	subs	r2, #1
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003d9c:	b9ea      	cbnz	r2, 8003dda <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003da4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8003db0:	3201      	adds	r2, #1
 8003db2:	e7ee      	b.n	8003d92 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003db4:	1c51      	adds	r1, r2, #1
 8003db6:	6221      	str	r1, [r4, #32]
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	e7ea      	b.n	8003d94 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dbe:	0650      	lsls	r0, r2, #25
 8003dc0:	d50b      	bpl.n	8003dda <HAL_UART_IRQHandler+0x13a>
 8003dc2:	064a      	lsls	r2, r1, #25
 8003dc4:	d509      	bpl.n	8003dda <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dc6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003dc8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dce:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003dd6:	f7ff febd 	bl	8003b54 <HAL_UART_TxCpltCallback>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	08003de1 	.word	0x08003de1

08003de0 <UART_DMAAbortOnError>:
{
 8003de0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003de2:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003de4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003de6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003de8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003dea:	f7ff ff30 	bl	8003c4e <HAL_UART_ErrorCallback>
 8003dee:	bd08      	pop	{r3, pc}

08003df0 <write_2>:
}

/**
 * Write sequence of n bytes from offset
 */
void write_2(unsigned int address, uint8_t *data, int offset, int n) {
 8003df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t *adr = data+offset;
    HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n, 1000);
 8003df2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    uint8_t *adr = data+offset;
 8003df6:	440a      	add	r2, r1
    HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n, 1000);
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	9200      	str	r2, [sp, #0]
 8003dfe:	9402      	str	r4, [sp, #8]
 8003e00:	b282      	uxth	r2, r0
 8003e02:	2302      	movs	r3, #2
 8003e04:	21a0      	movs	r1, #160	; 0xa0
 8003e06:	4804      	ldr	r0, [pc, #16]	; (8003e18 <write_2+0x28>)
 8003e08:	f7fe fb7e 	bl	8002508 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8003e0c:	200a      	movs	r0, #10
}
 8003e0e:	b004      	add	sp, #16
 8003e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(10);
 8003e14:	f7fd b9b4 	b.w	8001180 <HAL_Delay>
 8003e18:	20000ed0 	.word	0x20000ed0

08003e1c <write_1>:
void write_1(unsigned int address, uint8_t *data, int n) {
 8003e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e20:	4606      	mov	r6, r0
 8003e22:	4688      	mov	r8, r1
 8003e24:	4615      	mov	r5, r2
  int offD = 0;         // current offset in data pointer
 8003e26:	2700      	movs	r7, #0
  while (c > 0) {
 8003e28:	2d00      	cmp	r5, #0
 8003e2a:	dc01      	bgt.n	8003e30 <write_1+0x14>
}
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nc = min(min(c, 30), PAGE_SIZE - offP);
 8003e30:	2d1e      	cmp	r5, #30
 8003e32:	462b      	mov	r3, r5
 8003e34:	bfa8      	it	ge
 8003e36:	231e      	movge	r3, #30
    offP = address % PAGE_SIZE;
 8003e38:	f006 043f 	and.w	r4, r6, #63	; 0x3f
    nc = min(min(c, 30), PAGE_SIZE - offP);
 8003e3c:	f1c4 0440 	rsb	r4, r4, #64	; 0x40
 8003e40:	429c      	cmp	r4, r3
 8003e42:	bfa8      	it	ge
 8003e44:	461c      	movge	r4, r3
    write_2(address, data, offD, nc);
 8003e46:	463a      	mov	r2, r7
 8003e48:	4630      	mov	r0, r6
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	f7ff ffcf 	bl	8003df0 <write_2>
    c-=nc;
 8003e52:	1b2d      	subs	r5, r5, r4
    offD+=nc;
 8003e54:	4427      	add	r7, r4
    address+=nc;
 8003e56:	4426      	add	r6, r4
 8003e58:	e7e6      	b.n	8003e28 <write_1+0xc>

08003e5a <writeFloat>:
void writeFloat(unsigned int address, float data) {
 8003e5a:	b507      	push	{r0, r1, r2, lr}
 8003e5c:	ab02      	add	r3, sp, #8
 8003e5e:	f843 1d04 	str.w	r1, [r3, #-4]!
  write_1(address, (uint8_t*)&data, 4);
 8003e62:	2204      	movs	r2, #4
 8003e64:	4619      	mov	r1, r3
 8003e66:	f7ff ffd9 	bl	8003e1c <write_1>
}
 8003e6a:	b003      	add	sp, #12
 8003e6c:	f85d fb04 	ldr.w	pc, [sp], #4

08003e70 <read_2>:


/**
 * Read sequence of n bytes to offset
 */
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8003e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e74:	b098      	sub	sp, #96	; 0x60
  int r = 0;
  uint8_t pData[80];
  memset(&pData[0], n, sizeof(pData));
 8003e76:	ad04      	add	r5, sp, #16
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8003e78:	4680      	mov	r8, r0
 8003e7a:	460e      	mov	r6, r1
 8003e7c:	4617      	mov	r7, r2
  memset(&pData[0], n, sizeof(pData));
 8003e7e:	4619      	mov	r1, r3
 8003e80:	2250      	movs	r2, #80	; 0x50
 8003e82:	4628      	mov	r0, r5
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8003e84:	461c      	mov	r4, r3
  memset(&pData[0], n, sizeof(pData));
 8003e86:	f004 fc3c 	bl	8008702 <memset>
  HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, pData, n, 1000);
 8003e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e8e:	9302      	str	r3, [sp, #8]
 8003e90:	b2a3      	uxth	r3, r4
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	9500      	str	r5, [sp, #0]
 8003e96:	2302      	movs	r3, #2
 8003e98:	fa1f f288 	uxth.w	r2, r8
 8003e9c:	21a0      	movs	r1, #160	; 0xa0
 8003e9e:	4807      	ldr	r0, [pc, #28]	; (8003ebc <read_2+0x4c>)
 8003ea0:	f7fe fbc8 	bl	8002634 <HAL_I2C_Mem_Read>
  int r = 0;
 8003ea4:	2300      	movs	r3, #0
  while (r<n) {
    data[offset+r] = pData[r];
 8003ea6:	443e      	add	r6, r7
  while (r<n) {
 8003ea8:	42a3      	cmp	r3, r4
 8003eaa:	db02      	blt.n	8003eb2 <read_2+0x42>
    r++;
  }
}
 8003eac:	b018      	add	sp, #96	; 0x60
 8003eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    data[offset+r] = pData[r];
 8003eb2:	5cea      	ldrb	r2, [r5, r3]
 8003eb4:	54f2      	strb	r2, [r6, r3]
    r++;
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	e7f6      	b.n	8003ea8 <read_2+0x38>
 8003eba:	bf00      	nop
 8003ebc:	20000ed0 	.word	0x20000ed0

08003ec0 <read_1>:
void read_1(unsigned int address, uint8_t *data, int n) {
 8003ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec4:	4607      	mov	r7, r0
 8003ec6:	4688      	mov	r8, r1
 8003ec8:	4614      	mov	r4, r2
  int offD = 0;
 8003eca:	2600      	movs	r6, #0
  while (c > 0) {
 8003ecc:	2c00      	cmp	r4, #0
 8003ece:	dc01      	bgt.n	8003ed4 <read_1+0x14>
}
 8003ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed4:	2c20      	cmp	r4, #32
 8003ed6:	4625      	mov	r5, r4
 8003ed8:	bfa8      	it	ge
 8003eda:	2520      	movge	r5, #32
    read_2(address, data, offD, nc);
 8003edc:	4632      	mov	r2, r6
 8003ede:	4638      	mov	r0, r7
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	f7ff ffc4 	bl	8003e70 <read_2>
    address+=nc;
 8003ee8:	442f      	add	r7, r5
    offD+=nc;
 8003eea:	442e      	add	r6, r5
    c-=nc;
 8003eec:	1b64      	subs	r4, r4, r5
 8003eee:	e7ed      	b.n	8003ecc <read_1+0xc>

08003ef0 <readFloat>:
float readFloat(unsigned int address) {
 8003ef0:	b510      	push	{r4, lr}
  read_1(address, _b, 4);
 8003ef2:	4c03      	ldr	r4, [pc, #12]	; (8003f00 <readFloat+0x10>)
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	f7ff ffe2 	bl	8003ec0 <read_1>
  return *(float*)&_b[0];
 8003efc:	6820      	ldr	r0, [r4, #0]
}
 8003efe:	bd10      	pop	{r4, pc}
 8003f00:	20000760 	.word	0x20000760

08003f04 <EEPROM_Init>:
{
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	2400      	movs	r4, #0
 8003f08:	4d09      	ldr	r5, [pc, #36]	; (8003f30 <EEPROM_Init+0x2c>)
     pid.kp[i] = readFloat( 0 + (4*i));
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f7ff fff0 	bl	8003ef0 <readFloat>
 8003f10:	f845 0f04 	str.w	r0, [r5, #4]!
     pid.ki[i] = readFloat(12 + (4*i));
 8003f14:	f104 000c 	add.w	r0, r4, #12
 8003f18:	f7ff ffea 	bl	8003ef0 <readFloat>
 8003f1c:	6268      	str	r0, [r5, #36]	; 0x24
     pid.kd[i] = readFloat(24 + (4*i));
 8003f1e:	f104 0018 	add.w	r0, r4, #24
 8003f22:	f7ff ffe5 	bl	8003ef0 <readFloat>
 8003f26:	3404      	adds	r4, #4
   for(int i = 0; i < 3; i++){
 8003f28:	2c0c      	cmp	r4, #12
     pid.kd[i] = readFloat(24 + (4*i));
 8003f2a:	64a8      	str	r0, [r5, #72]	; 0x48
   for(int i = 0; i < 3; i++){
 8003f2c:	d1ed      	bne.n	8003f0a <EEPROM_Init+0x6>
}
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	20000874 	.word	0x20000874

08003f34 <drawCircle>:
#include "GFX.h"

#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8003f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f38:	4617      	mov	r7, r2
	int16_t f = 1 - r;
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	f1c2 0501 	rsb	r5, r2, #1
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8003f40:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
	int16_t x = 0;
	int16_t y = r;

	drawPixel(x0  , y0+r, color);
 8003f44:	fa5f f981 	uxtb.w	r9, r1
 8003f48:	b2fe      	uxtb	r6, r7
	int16_t ddF_y = -2 * r;
 8003f4a:	0052      	lsls	r2, r2, #1
	drawPixel(x0  , y0+r, color);
 8003f4c:	b2dc      	uxtb	r4, r3
void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8003f4e:	b085      	sub	sp, #20
	drawPixel(x0  , y0+r, color);
 8003f50:	fa5f f880 	uxtb.w	r8, r0
	int16_t ddF_y = -2 * r;
 8003f54:	b212      	sxth	r2, r2
	drawPixel(x0  , y0+r, color);
 8003f56:	eb09 0106 	add.w	r1, r9, r6
	int16_t ddF_y = -2 * r;
 8003f5a:	9202      	str	r2, [sp, #8]
	drawPixel(x0  , y0+r, color);
 8003f5c:	b2c9      	uxtb	r1, r1
 8003f5e:	4622      	mov	r2, r4
 8003f60:	4640      	mov	r0, r8
 8003f62:	f003 fd75 	bl	8007a50 <drawPixel>
	drawPixel(x0  , y0-r, color);
 8003f66:	eba9 0106 	sub.w	r1, r9, r6
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	b2c9      	uxtb	r1, r1
 8003f6e:	4640      	mov	r0, r8
 8003f70:	f003 fd6e 	bl	8007a50 <drawPixel>
	drawPixel(x0+r, y0  , color);
 8003f74:	eb08 0006 	add.w	r0, r8, r6
 8003f78:	4622      	mov	r2, r4
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	b2c0      	uxtb	r0, r0
 8003f7e:	f003 fd67 	bl	8007a50 <drawPixel>
	drawPixel(x0-r, y0  , color);
 8003f82:	eba8 0006 	sub.w	r0, r8, r6
 8003f86:	4622      	mov	r2, r4
 8003f88:	4649      	mov	r1, r9
 8003f8a:	b2c0      	uxtb	r0, r0
 8003f8c:	f003 fd60 	bl	8007a50 <drawPixel>
	int16_t x = 0;
 8003f90:	2300      	movs	r3, #0
	int16_t f = 1 - r;
 8003f92:	b22d      	sxth	r5, r5

	while (x<y) {
 8003f94:	42bb      	cmp	r3, r7
 8003f96:	db02      	blt.n	8003f9e <drawCircle+0x6a>
		drawPixel(x0 + y, y0 + x, color);
		drawPixel(x0 - y, y0 + x, color);
		drawPixel(x0 + y, y0 - x, color);
		drawPixel(x0 - y, y0 - x, color);
	}
}
 8003f98:	b005      	add	sp, #20
 8003f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (f >= 0) {
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	db08      	blt.n	8003fb4 <drawCircle+0x80>
			ddF_y += 2;
 8003fa2:	9a02      	ldr	r2, [sp, #8]
			y--;
 8003fa4:	3f01      	subs	r7, #1
			ddF_y += 2;
 8003fa6:	3202      	adds	r2, #2
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	b211      	sxth	r1, r2
			f += ddF_y;
 8003fac:	4415      	add	r5, r2
			y--;
 8003fae:	b23f      	sxth	r7, r7
			ddF_y += 2;
 8003fb0:	9102      	str	r1, [sp, #8]
			f += ddF_y;
 8003fb2:	b22d      	sxth	r5, r5
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	9301      	str	r3, [sp, #4]
		f += ddF_x;
 8003fba:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8003fbe:	f89d 3004 	ldrb.w	r3, [sp, #4]
		drawPixel(x0 + x, y0 + y, color);
 8003fc2:	b2fe      	uxtb	r6, r7
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	eb09 0b06 	add.w	fp, r9, r6
 8003fca:	4443      	add	r3, r8
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	fa5f fb8b 	uxtb.w	fp, fp
 8003fd2:	4659      	mov	r1, fp
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	9303      	str	r3, [sp, #12]
 8003fda:	f003 fd39 	bl	8007a50 <drawPixel>
 8003fde:	9b00      	ldr	r3, [sp, #0]
		drawPixel(x0 - x, y0 + y, color);
 8003fe0:	4659      	mov	r1, fp
 8003fe2:	eba8 0a03 	sub.w	sl, r8, r3
 8003fe6:	fa5f fa8a 	uxtb.w	sl, sl
 8003fea:	4650      	mov	r0, sl
 8003fec:	4622      	mov	r2, r4
 8003fee:	f003 fd2f 	bl	8007a50 <drawPixel>
		drawPixel(x0 + x, y0 - y, color);
 8003ff2:	eba9 0b06 	sub.w	fp, r9, r6
 8003ff6:	9b03      	ldr	r3, [sp, #12]
 8003ff8:	fa5f fb8b 	uxtb.w	fp, fp
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	4659      	mov	r1, fp
 8004000:	4622      	mov	r2, r4
 8004002:	f003 fd25 	bl	8007a50 <drawPixel>
		drawPixel(x0 - x, y0 - y, color);
 8004006:	4659      	mov	r1, fp
 8004008:	4650      	mov	r0, sl
 800400a:	4622      	mov	r2, r4
 800400c:	f003 fd20 	bl	8007a50 <drawPixel>
 8004010:	9b00      	ldr	r3, [sp, #0]
		drawPixel(x0 + y, y0 + x, color);
 8004012:	eb08 0a06 	add.w	sl, r8, r6
 8004016:	eb09 0b03 	add.w	fp, r9, r3
 800401a:	fa5f fb8b 	uxtb.w	fp, fp
 800401e:	fa5f fa8a 	uxtb.w	sl, sl
		drawPixel(x0 - y, y0 + x, color);
 8004022:	eba8 0606 	sub.w	r6, r8, r6
		drawPixel(x0 + y, y0 + x, color);
 8004026:	4659      	mov	r1, fp
 8004028:	4622      	mov	r2, r4
 800402a:	4650      	mov	r0, sl
		drawPixel(x0 - y, y0 + x, color);
 800402c:	b2f6      	uxtb	r6, r6
		drawPixel(x0 + y, y0 + x, color);
 800402e:	f003 fd0f 	bl	8007a50 <drawPixel>
		drawPixel(x0 - y, y0 + x, color);
 8004032:	4659      	mov	r1, fp
 8004034:	4622      	mov	r2, r4
 8004036:	4630      	mov	r0, r6
 8004038:	f003 fd0a 	bl	8007a50 <drawPixel>
 800403c:	9b00      	ldr	r3, [sp, #0]
		drawPixel(x0 + y, y0 - x, color);
 800403e:	4622      	mov	r2, r4
 8004040:	eba9 0b03 	sub.w	fp, r9, r3
 8004044:	fa5f fb8b 	uxtb.w	fp, fp
 8004048:	4659      	mov	r1, fp
 800404a:	4650      	mov	r0, sl
 800404c:	f003 fd00 	bl	8007a50 <drawPixel>
		f += ddF_x;
 8004050:	3501      	adds	r5, #1
		drawPixel(x0 - y, y0 - x, color);
 8004052:	4622      	mov	r2, r4
 8004054:	4659      	mov	r1, fp
 8004056:	4630      	mov	r0, r6
 8004058:	f003 fcfa 	bl	8007a50 <drawPixel>
		f += ddF_x;
 800405c:	b22d      	sxth	r5, r5
		x++;
 800405e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8004062:	e797      	b.n	8003f94 <drawCircle+0x60>

08004064 <drawLine>:
			drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
		}
	}
}

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8004064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004068:	4616      	mov	r6, r2
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800406a:	1a5f      	subs	r7, r3, r1
 800406c:	eba6 0800 	sub.w	r8, r6, r0
 8004070:	2f00      	cmp	r7, #0
 8004072:	bfb8      	it	lt
 8004074:	427f      	neglt	r7, r7
 8004076:	f1b8 0f00 	cmp.w	r8, #0
 800407a:	bfb8      	it	lt
 800407c:	f1c8 0800 	rsblt	r8, r8, #0
	if (steep) {
 8004080:	4547      	cmp	r7, r8
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8004082:	4604      	mov	r4, r0
 8004084:	460d      	mov	r5, r1
 8004086:	461a      	mov	r2, r3
	if (steep) {
 8004088:	dd04      	ble.n	8004094 <drawLine+0x30>
 800408a:	4633      	mov	r3, r6
		_swap_int16_t(x0, y0);
 800408c:	460c      	mov	r4, r1
		_swap_int16_t(x1, y1);
 800408e:	4616      	mov	r6, r2
		_swap_int16_t(x0, y0);
 8004090:	4605      	mov	r5, r0
		_swap_int16_t(x1, y1);
 8004092:	461a      	mov	r2, r3
	}

	if (x0 > x1) {
 8004094:	42b4      	cmp	r4, r6
 8004096:	dd05      	ble.n	80040a4 <drawLine+0x40>
 8004098:	462b      	mov	r3, r5
		_swap_int16_t(x0, x1);
		_swap_int16_t(y0, y1);
 800409a:	4615      	mov	r5, r2
 800409c:	461a      	mov	r2, r3
	if (x0 > x1) {
 800409e:	4623      	mov	r3, r4
 80040a0:	4634      	mov	r4, r6
 80040a2:	461e      	mov	r6, r3
	}

	int16_t dx, dy;
	dx = x1 - x0;
	dy = abs(y1 - y0);
 80040a4:	eba2 0a05 	sub.w	sl, r2, r5
 80040a8:	4653      	mov	r3, sl
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bfb8      	it	lt
 80040ae:	425b      	neglt	r3, r3
 80040b0:	9301      	str	r3, [sp, #4]

	int16_t err = dx / 2;
 80040b2:	2302      	movs	r3, #2
	dx = x1 - x0;
 80040b4:	eba6 0904 	sub.w	r9, r6, r4
 80040b8:	fa1f f989 	uxth.w	r9, r9
	int16_t err = dx / 2;
 80040bc:	fa0f f189 	sxth.w	r1, r9
 80040c0:	fb91 faf3 	sdiv	sl, r1, r3
	int16_t ystep;

	if (y0 < y1) ystep = 1;
	else         ystep = -1;
 80040c4:	4295      	cmp	r5, r2
 80040c6:	bfb4      	ite	lt
 80040c8:	2301      	movlt	r3, #1
 80040ca:	f04f 33ff 	movge.w	r3, #4294967295
 80040ce:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
 80040d2:	9300      	str	r3, [sp, #0]

	for (; x0<=x1; x0++) {
 80040d4:	42b4      	cmp	r4, r6
 80040d6:	dd02      	ble.n	80040de <drawLine+0x7a>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
 80040d8:	b003      	add	sp, #12
 80040da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (steep) drawPixel(y0, x0, color);
 80040de:	4547      	cmp	r7, r8
 80040e0:	b2e0      	uxtb	r0, r4
 80040e2:	fa5f fe85 	uxtb.w	lr, r5
 80040e6:	bfc8      	it	gt
 80040e8:	4601      	movgt	r1, r0
 80040ea:	465a      	mov	r2, fp
 80040ec:	bfcc      	ite	gt
 80040ee:	4670      	movgt	r0, lr
		else       drawPixel(x0, y0, color);
 80040f0:	4671      	movle	r1, lr
 80040f2:	f003 fcad 	bl	8007a50 <drawPixel>
		err -= dy;
 80040f6:	9b01      	ldr	r3, [sp, #4]
 80040f8:	ebaa 0303 	sub.w	r3, sl, r3
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	fa0f fa82 	sxth.w	sl, r2
		if (err < 0) {
 8004102:	f1ba 0f00 	cmp.w	sl, #0
 8004106:	da06      	bge.n	8004116 <drawLine+0xb2>
			y0 += ystep;
 8004108:	9b00      	ldr	r3, [sp, #0]
 800410a:	441d      	add	r5, r3
			err += dx;
 800410c:	eb09 0302 	add.w	r3, r9, r2
			y0 += ystep;
 8004110:	b22d      	sxth	r5, r5
			err += dx;
 8004112:	fa0f fa83 	sxth.w	sl, r3
 8004116:	3401      	adds	r4, #1
 8004118:	b224      	sxth	r4, r4
 800411a:	e7db      	b.n	80040d4 <drawLine+0x70>

0800411c <drawFastVLine>:

void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 800411c:	b507      	push	{r0, r1, r2, lr}
	// Update in subclasses if desired!
	drawLine(x, y, x, y+h-1, color);
 800411e:	3a01      	subs	r2, #1
 8004120:	440a      	add	r2, r1
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	b213      	sxth	r3, r2
 8004126:	4602      	mov	r2, r0
 8004128:	f7ff ff9c 	bl	8004064 <drawLine>
}
 800412c:	b003      	add	sp, #12
 800412e:	f85d fb04 	ldr.w	pc, [sp], #4

08004132 <fillCircleHelper>:
void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {
 8004132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004136:	b089      	sub	sp, #36	; 0x24
 8004138:	9305      	str	r3, [sp, #20]
 800413a:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 800413e:	4614      	mov	r4, r2
 8004140:	9306      	str	r3, [sp, #24]
	int16_t f     = 1 - r;
 8004142:	b293      	uxth	r3, r2
 8004144:	f1c3 0701 	rsb	r7, r3, #1
	int16_t ddF_y = -2 * r;
 8004148:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	b21b      	sxth	r3, r3
 8004150:	9303      	str	r3, [sp, #12]
	while (x<y) {
 8004152:	2300      	movs	r3, #0
 8004154:	9301      	str	r3, [sp, #4]
		if (cornername & 0x1) {
 8004156:	9b05      	ldr	r3, [sp, #20]
void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {
 8004158:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
		if (cornername & 0x1) {
 800415c:	f003 0301 	and.w	r3, r3, #1
void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {
 8004160:	9104      	str	r1, [sp, #16]
	int16_t f     = 1 - r;
 8004162:	b23f      	sxth	r7, r7
		if (cornername & 0x1) {
 8004164:	9307      	str	r3, [sp, #28]
			drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8004166:	fa1f fa80 	uxth.w	sl, r0
	while (x<y) {
 800416a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800416e:	42a3      	cmp	r3, r4
 8004170:	db02      	blt.n	8004178 <fillCircleHelper+0x46>
}
 8004172:	b009      	add	sp, #36	; 0x24
 8004174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (f >= 0) {
 8004178:	2f00      	cmp	r7, #0
 800417a:	db08      	blt.n	800418e <fillCircleHelper+0x5c>
			ddF_y += 2;
 800417c:	9b03      	ldr	r3, [sp, #12]
			y--;
 800417e:	3c01      	subs	r4, #1
			ddF_y += 2;
 8004180:	3302      	adds	r3, #2
 8004182:	b29b      	uxth	r3, r3
 8004184:	b21a      	sxth	r2, r3
			f     += ddF_y;
 8004186:	441f      	add	r7, r3
			y--;
 8004188:	b224      	sxth	r4, r4
			ddF_y += 2;
 800418a:	9203      	str	r2, [sp, #12]
			f     += ddF_y;
 800418c:	b23f      	sxth	r7, r7
 800418e:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004192:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8004196:	b293      	uxth	r3, r2
 8004198:	9302      	str	r3, [sp, #8]
		f     += ddF_x;
 800419a:	3303      	adds	r3, #3
 800419c:	441f      	add	r7, r3
		if (cornername & 0x1) {
 800419e:	9b07      	ldr	r3, [sp, #28]
		f     += ddF_x;
 80041a0:	b23f      	sxth	r7, r7
		if (cornername & 0x1) {
 80041a2:	b30b      	cbz	r3, 80041e8 <fillCircleHelper+0xb6>
			drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80041a4:	f8bd b018 	ldrh.w	fp, [sp, #24]
 80041a8:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 80041ac:	b2a5      	uxth	r5, r4
 80041ae:	f10b 0201 	add.w	r2, fp, #1
 80041b2:	f10a 0001 	add.w	r0, sl, #1
 80041b6:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 80041ba:	1b71      	subs	r1, r6, r5
 80041bc:	4440      	add	r0, r8
 80041be:	464b      	mov	r3, r9
 80041c0:	b212      	sxth	r2, r2
 80041c2:	b209      	sxth	r1, r1
 80041c4:	b200      	sxth	r0, r0
 80041c6:	f7ff ffa9 	bl	800411c <drawFastVLine>
			drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80041ca:	9b02      	ldr	r3, [sp, #8]
 80041cc:	f10b 0203 	add.w	r2, fp, #3
 80041d0:	1e71      	subs	r1, r6, #1
 80041d2:	441a      	add	r2, r3
 80041d4:	eba1 0108 	sub.w	r1, r1, r8
 80041d8:	eb0a 0005 	add.w	r0, sl, r5
 80041dc:	464b      	mov	r3, r9
 80041de:	b212      	sxth	r2, r2
 80041e0:	b209      	sxth	r1, r1
 80041e2:	b200      	sxth	r0, r0
 80041e4:	f7ff ff9a 	bl	800411c <drawFastVLine>
		if (cornername & 0x2) {
 80041e8:	9b05      	ldr	r3, [sp, #20]
 80041ea:	079b      	lsls	r3, r3, #30
 80041ec:	d523      	bpl.n	8004236 <fillCircleHelper+0x104>
			drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80041ee:	f8bd b018 	ldrh.w	fp, [sp, #24]
 80041f2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80041f6:	b2a6      	uxth	r6, r4
 80041f8:	f10b 0201 	add.w	r2, fp, #1
 80041fc:	f10a 30ff 	add.w	r0, sl, #4294967295
 8004200:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 8004204:	1ba9      	subs	r1, r5, r6
 8004206:	eba0 0008 	sub.w	r0, r0, r8
 800420a:	464b      	mov	r3, r9
 800420c:	b212      	sxth	r2, r2
 800420e:	b209      	sxth	r1, r1
 8004210:	b200      	sxth	r0, r0
 8004212:	f7ff ff83 	bl	800411c <drawFastVLine>
			drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8004216:	9b02      	ldr	r3, [sp, #8]
 8004218:	f10b 0203 	add.w	r2, fp, #3
 800421c:	4413      	add	r3, r2
 800421e:	461a      	mov	r2, r3
 8004220:	1e69      	subs	r1, r5, #1
 8004222:	eba1 0108 	sub.w	r1, r1, r8
 8004226:	ebaa 0006 	sub.w	r0, sl, r6
 800422a:	464b      	mov	r3, r9
 800422c:	b212      	sxth	r2, r2
 800422e:	b209      	sxth	r1, r1
 8004230:	b200      	sxth	r0, r0
 8004232:	f7ff ff73 	bl	800411c <drawFastVLine>
 8004236:	9b01      	ldr	r3, [sp, #4]
 8004238:	3301      	adds	r3, #1
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	e795      	b.n	800416a <fillCircleHelper+0x38>

0800423e <fillCircle>:
void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 800423e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004240:	460c      	mov	r4, r1
	drawFastVLine(x0, y0-r, 2*r+1, color);
 8004242:	b291      	uxth	r1, r2
void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8004244:	4615      	mov	r5, r2
	drawFastVLine(x0, y0-r, 2*r+1, color);
 8004246:	004a      	lsls	r2, r1, #1
 8004248:	3201      	adds	r2, #1
 800424a:	1a61      	subs	r1, r4, r1
 800424c:	b212      	sxth	r2, r2
 800424e:	b209      	sxth	r1, r1
void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8004250:	461f      	mov	r7, r3
 8004252:	4606      	mov	r6, r0
	drawFastVLine(x0, y0-r, 2*r+1, color);
 8004254:	f7ff ff62 	bl	800411c <drawFastVLine>
	fillCircleHelper(x0, y0, r, 3, 0, color);
 8004258:	2300      	movs	r3, #0
 800425a:	9701      	str	r7, [sp, #4]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	462a      	mov	r2, r5
 8004260:	2303      	movs	r3, #3
 8004262:	4621      	mov	r1, r4
 8004264:	4630      	mov	r0, r6
 8004266:	f7ff ff64 	bl	8004132 <fillCircleHelper>
}
 800426a:	b003      	add	sp, #12
 800426c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800426e <fillRect>:
	drawFastHLine(x, y+h-1, w, color);
	drawFastVLine(x, y, h, color);
	drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 800426e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004272:	460e      	mov	r6, r1
 8004274:	461f      	mov	r7, r3
	// Update in subclasses if desired!
	for (int16_t i=x; i<x+w; i++) drawFastVLine(i, y, h, color);
 8004276:	4604      	mov	r4, r0
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8004278:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	for (int16_t i=x; i<x+w; i++) drawFastVLine(i, y, h, color);
 800427c:	1885      	adds	r5, r0, r2
 800427e:	42ac      	cmp	r4, r5
 8004280:	db01      	blt.n	8004286 <fillRect+0x18>
}
 8004282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (int16_t i=x; i<x+w; i++) drawFastVLine(i, y, h, color);
 8004286:	4620      	mov	r0, r4
 8004288:	4643      	mov	r3, r8
 800428a:	463a      	mov	r2, r7
 800428c:	4631      	mov	r1, r6
 800428e:	3401      	adds	r4, #1
 8004290:	f7ff ff44 	bl	800411c <drawFastVLine>
 8004294:	b224      	sxth	r4, r4
 8004296:	e7f2      	b.n	800427e <fillRect+0x10>

08004298 <fillRoundRect>:
	drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
	drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
	drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
}

void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 8004298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429c:	460c      	mov	r4, r1
 800429e:	b085      	sub	sp, #20
 80042a0:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
	// smarter version
	fillRect(x+r, y, w-2*r, h, color);
 80042a4:	b285      	uxth	r5, r0
 80042a6:	fa1f f78a 	uxth.w	r7, sl
 80042aa:	ea4f 0947 	mov.w	r9, r7, lsl #1
void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 80042ae:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
	fillRect(x+r, y, w-2*r, h, color);
 80042b2:	fa1f f882 	uxth.w	r8, r2
 80042b6:	19ee      	adds	r6, r5, r7
 80042b8:	fa1f f989 	uxth.w	r9, r9
 80042bc:	b236      	sxth	r6, r6
 80042be:	eba8 0209 	sub.w	r2, r8, r9
 80042c2:	4630      	mov	r0, r6
 80042c4:	f8cd b000 	str.w	fp, [sp]
 80042c8:	b212      	sxth	r2, r2
void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 80042ca:	9303      	str	r3, [sp, #12]
	fillRect(x+r, y, w-2*r, h, color);
 80042cc:	f7ff ffcf 	bl	800426e <fillRect>

	// draw four corners
	fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80042d0:	9b03      	ldr	r3, [sp, #12]
 80042d2:	f108 30ff 	add.w	r0, r8, #4294967295
 80042d6:	3b01      	subs	r3, #1
 80042d8:	443c      	add	r4, r7
 80042da:	eba3 0909 	sub.w	r9, r3, r9
 80042de:	4428      	add	r0, r5
 80042e0:	b224      	sxth	r4, r4
 80042e2:	fa0f f989 	sxth.w	r9, r9
 80042e6:	1bc0      	subs	r0, r0, r7
 80042e8:	4652      	mov	r2, sl
 80042ea:	4621      	mov	r1, r4
 80042ec:	e88d 0a00 	stmia.w	sp, {r9, fp}
 80042f0:	2301      	movs	r3, #1
 80042f2:	b200      	sxth	r0, r0
 80042f4:	f7ff ff1d 	bl	8004132 <fillCircleHelper>
	fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80042f8:	2302      	movs	r3, #2
 80042fa:	4652      	mov	r2, sl
 80042fc:	4621      	mov	r1, r4
 80042fe:	4630      	mov	r0, r6
 8004300:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8004304:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
}
 8004308:	b005      	add	sp, #20
 800430a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800430e:	f7ff bf10 	b.w	8004132 <fillCircleHelper>

08004312 <gps_Init>:

void USART2_TX(unsigned char data){while(!(USART2->SR&0x40)); USART2->DR=data;}
void USART2_TX_str(char *str){while(*str){USART2_TX(*str++);}}

void gps_Init(void)
{
 8004312:	4770      	bx	lr

08004314 <I2C_ByteWrite>:
#include <Board.h>


void I2C_ByteWrite(uint8_t DevAddress, uint8_t MemAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 8004314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t tmp;
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
 8004318:	2601      	movs	r6, #1
{
 800431a:	4692      	mov	sl, r2
 800431c:	461c      	mov	r4, r3
 800431e:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
 8004320:	4f16      	ldr	r7, [pc, #88]	; (800437c <I2C_ByteWrite+0x68>)
 8004322:	f10d 0517 	add.w	r5, sp, #23
 8004326:	4680      	mov	r8, r0
 8004328:	4689      	mov	r9, r1
 800432a:	4633      	mov	r3, r6
 800432c:	460a      	mov	r2, r1
 800432e:	9602      	str	r6, [sp, #8]
 8004330:	4601      	mov	r1, r0
 8004332:	9601      	str	r6, [sp, #4]
 8004334:	9500      	str	r5, [sp, #0]
 8004336:	4638      	mov	r0, r7
 8004338:	f7fe f97c 	bl	8002634 <HAL_I2C_Mem_Read>
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800433c:	ebaa 0304 	sub.w	r3, sl, r4
 8004340:	199a      	adds	r2, r3, r6
 8004342:	fa06 f404 	lsl.w	r4, r6, r4
	data <<= (bitStart - length + 1); // shift data into correct position
 8004346:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800434a:	3c01      	subs	r4, #1
 800434c:	4094      	lsls	r4, r2
	data <<= (bitStart - length + 1); // shift data into correct position
 800434e:	4093      	lsls	r3, r2
	data &= mask; // zero all non-important bits in data
	tmp &= ~(mask); // zero all important bits in existing byte
 8004350:	f89d 2017 	ldrb.w	r2, [sp, #23]
	data <<= (bitStart - length + 1); // shift data into correct position
 8004354:	b2db      	uxtb	r3, r3
	tmp &= ~(mask); // zero all important bits in existing byte
 8004356:	ea22 0204 	bic.w	r2, r2, r4
	data &= mask; // zero all non-important bits in data
 800435a:	401c      	ands	r4, r3
	tmp |= data; // combine data with existing byte
	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 800435c:	230a      	movs	r3, #10
	tmp |= data; // combine data with existing byte
 800435e:	4314      	orrs	r4, r2
	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 8004360:	9302      	str	r3, [sp, #8]
 8004362:	e88d 0060 	stmia.w	sp, {r5, r6}
 8004366:	4633      	mov	r3, r6
 8004368:	464a      	mov	r2, r9
 800436a:	4641      	mov	r1, r8
 800436c:	4638      	mov	r0, r7
	tmp |= data; // combine data with existing byte
 800436e:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 8004372:	f7fe f8c9 	bl	8002508 <HAL_I2C_Mem_Write>
}
 8004376:	b006      	add	sp, #24
 8004378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437c:	20000ed0 	.word	0x20000ed0

08004380 <I2C_ByteRead>:
//	tmp >>= (bitStart - length + 1);
//	*data = tmp;
//}

void I2C_ByteRead(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 8004382:	2401      	movs	r4, #1
 8004384:	9402      	str	r4, [sp, #8]
 8004386:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800438a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800438e:	4613      	mov	r3, r2
 8004390:	460a      	mov	r2, r1
 8004392:	4601      	mov	r1, r0
 8004394:	4802      	ldr	r0, [pc, #8]	; (80043a0 <I2C_ByteRead+0x20>)
 8004396:	f7fe f94d 	bl	8002634 <HAL_I2C_Mem_Read>
}
 800439a:	b004      	add	sp, #16
 800439c:	bd10      	pop	{r4, pc}
 800439e:	bf00      	nop
 80043a0:	20000ed0 	.word	0x20000ed0

080043a4 <I2C_Write>:
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
	*data = tmp & (1 << bitNum);
}

void I2C_Write(uint16_t DevAddress, uint8_t data, uint16_t Size)
{
 80043a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 80043a8:	4c1e      	ldr	r4, [pc, #120]	; (8004424 <I2C_Write+0x80>)
{
 80043aa:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 80043ac:	4620      	mov	r0, r4
{
 80043ae:	4616      	mov	r6, r2
 80043b0:	f88d 100f 	strb.w	r1, [sp, #15]
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 80043b4:	f7fe fa5e 	bl	8002874 <HAL_I2C_GetState>
 80043b8:	2820      	cmp	r0, #32
 80043ba:	d111      	bne.n	80043e0 <I2C_Write+0x3c>

  state = HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1000);
 80043bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043c0:	4629      	mov	r1, r5
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	4620      	mov	r0, r4
 80043c6:	4633      	mov	r3, r6
 80043c8:	f10d 020f 	add.w	r2, sp, #15
 80043cc:	f7fd fe44 	bl	8002058 <HAL_I2C_Master_Transmit>
 80043d0:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 80043d2:	6c27      	ldr	r7, [r4, #64]	; 0x40
   while(state)
   {
     sprintf(Buf, "MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 80043d4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004430 <I2C_Write+0x8c>
 80043d8:	4c13      	ldr	r4, [pc, #76]	; (8004428 <I2C_Write+0x84>)
     HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80043da:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004434 <I2C_Write+0x90>
   while(state)
 80043de:	b915      	cbnz	r5, 80043e6 <I2C_Write+0x42>
       HAL_Delay(4);
     }
   }
  }
  //while(HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1) != HAL_OK);
}
 80043e0:	b004      	add	sp, #16
 80043e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     sprintf(Buf, "MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 80043e6:	463b      	mov	r3, r7
 80043e8:	462a      	mov	r2, r5
 80043ea:	4641      	mov	r1, r8
 80043ec:	4620      	mov	r0, r4
 80043ee:	f004 f991 	bl	8008714 <siprintf>
     HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80043f2:	4620      	mov	r0, r4
 80043f4:	f7fb feac 	bl	8000150 <strlen>
 80043f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043fc:	b282      	uxth	r2, r0
 80043fe:	4621      	mov	r1, r4
 8004400:	4648      	mov	r0, r9
 8004402:	f7ff fac9 	bl	8003998 <HAL_UART_Transmit>
       Error.error = 2;
 8004406:	f04f 0a02 	mov.w	sl, #2
     while (Error.error !=0)
 800440a:	4e08      	ldr	r6, [pc, #32]	; (800442c <I2C_Write+0x88>)
 800440c:	7833      	ldrb	r3, [r6, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0e5      	beq.n	80043de <I2C_Write+0x3a>
       Error.error = 2;
 8004412:	f886 a000 	strb.w	sl, [r6]
       error_signal();
 8004416:	f000 fcc5 	bl	8004da4 <error_signal>
       HAL_Delay(4);
 800441a:	2004      	movs	r0, #4
 800441c:	f7fc feb0 	bl	8001180 <HAL_Delay>
 8004420:	e7f4      	b.n	800440c <I2C_Write+0x68>
 8004422:	bf00      	nop
 8004424:	20000ed0 	.word	0x20000ed0
 8004428:	20000da4 	.word	0x20000da4
 800442c:	200010a0 	.word	0x200010a0
 8004430:	0800b2c4 	.word	0x0800b2c4
 8004434:	200010e8 	.word	0x200010e8

08004438 <I2C_Read>:

void I2C_Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004438:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 800443c:	4c1d      	ldr	r4, [pc, #116]	; (80044b4 <I2C_Read+0x7c>)
{
 800443e:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004440:	4620      	mov	r0, r4
{
 8004442:	460e      	mov	r6, r1
 8004444:	4617      	mov	r7, r2
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004446:	f7fe fa15 	bl	8002874 <HAL_I2C_GetState>
 800444a:	2820      	cmp	r0, #32
 800444c:	d110      	bne.n	8004470 <I2C_Read+0x38>

  state = HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1000);
 800444e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004452:	4629      	mov	r1, r5
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	4620      	mov	r0, r4
 8004458:	463b      	mov	r3, r7
 800445a:	4632      	mov	r2, r6
 800445c:	f7fd fed2 	bl	8002204 <HAL_I2C_Master_Receive>
 8004460:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 8004462:	6c27      	ldr	r7, [r4, #64]	; 0x40
    while(state)
    {
      sprintf(Buf, "MS5611_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 8004464:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80044c0 <I2C_Read+0x88>
 8004468:	4c13      	ldr	r4, [pc, #76]	; (80044b8 <I2C_Read+0x80>)
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800446a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80044c4 <I2C_Read+0x8c>
    while(state)
 800446e:	b915      	cbnz	r5, 8004476 <I2C_Read+0x3e>
        HAL_Delay(4);
      }
    }
  }
  //while(HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1) != HAL_OK);
}
 8004470:	b002      	add	sp, #8
 8004472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sprintf(Buf, "MS5611_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 8004476:	463b      	mov	r3, r7
 8004478:	462a      	mov	r2, r5
 800447a:	4641      	mov	r1, r8
 800447c:	4620      	mov	r0, r4
 800447e:	f004 f949 	bl	8008714 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8004482:	4620      	mov	r0, r4
 8004484:	f7fb fe64 	bl	8000150 <strlen>
 8004488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800448c:	b282      	uxth	r2, r0
 800448e:	4621      	mov	r1, r4
 8004490:	4648      	mov	r0, r9
 8004492:	f7ff fa81 	bl	8003998 <HAL_UART_Transmit>
        Error.error = 3;
 8004496:	f04f 0a03 	mov.w	sl, #3
      while (Error.error !=0)
 800449a:	4e08      	ldr	r6, [pc, #32]	; (80044bc <I2C_Read+0x84>)
 800449c:	7833      	ldrb	r3, [r6, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0e5      	beq.n	800446e <I2C_Read+0x36>
        Error.error = 3;
 80044a2:	f886 a000 	strb.w	sl, [r6]
        error_signal();
 80044a6:	f000 fc7d 	bl	8004da4 <error_signal>
        HAL_Delay(4);
 80044aa:	2004      	movs	r0, #4
 80044ac:	f7fc fe68 	bl	8001180 <HAL_Delay>
 80044b0:	e7f4      	b.n	800449c <I2C_Read+0x64>
 80044b2:	bf00      	nop
 80044b4:	20000ed0 	.word	0x20000ed0
 80044b8:	20000da4 	.word	0x20000da4
 80044bc:	200010a0 	.word	0x200010a0
 80044c0:	0800b2a8 	.word	0x0800b2a8
 80044c4:	200010e8 	.word	0x200010e8

080044c8 <invSqrt>:
/* Calculate 1/sqrt(x) with magic number support */
//static float oneOverSqrt(float x) {
//    return 1.0f / (float) sqrt(x);
//}

float invSqrt(float x) {
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	4606      	mov	r6, r0
	float halfx = 0.5f * x;
 80044cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80044d0:	f7fc fc0c 	bl	8000cec <__aeabi_fmul>
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
 80044d4:	4c11      	ldr	r4, [pc, #68]	; (800451c <invSqrt+0x54>)
	float halfx = 0.5f * x;
 80044d6:	4605      	mov	r5, r0
	y = *(float*)&i;
 80044d8:	eba4 0466 	sub.w	r4, r4, r6, asr #1
	y = y * (1.5f - (halfx * y * y));
 80044dc:	4621      	mov	r1, r4
 80044de:	f7fc fc05 	bl	8000cec <__aeabi_fmul>
 80044e2:	4621      	mov	r1, r4
 80044e4:	f7fc fc02 	bl	8000cec <__aeabi_fmul>
 80044e8:	4601      	mov	r1, r0
 80044ea:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80044ee:	f7fc faf3 	bl	8000ad8 <__aeabi_fsub>
 80044f2:	4621      	mov	r1, r4
 80044f4:	f7fc fbfa 	bl	8000cec <__aeabi_fmul>
 80044f8:	4604      	mov	r4, r0
	y = y * (1.5f - (halfx * y * y));
 80044fa:	4601      	mov	r1, r0
 80044fc:	4628      	mov	r0, r5
 80044fe:	f7fc fbf5 	bl	8000cec <__aeabi_fmul>
 8004502:	4621      	mov	r1, r4
 8004504:	f7fc fbf2 	bl	8000cec <__aeabi_fmul>
 8004508:	4601      	mov	r1, r0
 800450a:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800450e:	f7fc fae3 	bl	8000ad8 <__aeabi_fsub>
 8004512:	4621      	mov	r1, r4
 8004514:	f7fc fbea 	bl	8000cec <__aeabi_fmul>
	return y;
}
 8004518:	bd70      	pop	{r4, r5, r6, pc}
 800451a:	bf00      	nop
 800451c:	5f3759df 	.word	0x5f3759df

08004520 <calculateAngles>:
//   float tmp = *(float*)&i;
//   return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
//}


void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 8004520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AHRSIMU->Roll = (float) atan2f(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 8004524:	6986      	ldr	r6, [r0, #24]
void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 8004526:	4604      	mov	r4, r0
    AHRSIMU->Roll = (float) atan2f(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 8004528:	69c5      	ldr	r5, [r0, #28]
 800452a:	4631      	mov	r1, r6
 800452c:	4630      	mov	r0, r6
 800452e:	f7fc fbdd 	bl	8000cec <__aeabi_fmul>
 8004532:	4601      	mov	r1, r0
 8004534:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004538:	f7fc face 	bl	8000ad8 <__aeabi_fsub>
 800453c:	4629      	mov	r1, r5
 800453e:	4607      	mov	r7, r0
 8004540:	4628      	mov	r0, r5
 8004542:	f7fc fbd3 	bl	8000cec <__aeabi_fmul>
 8004546:	4601      	mov	r1, r0
 8004548:	4638      	mov	r0, r7
 800454a:	f7fc fac5 	bl	8000ad8 <__aeabi_fsub>
 800454e:	6961      	ldr	r1, [r4, #20]
 8004550:	4607      	mov	r7, r0
 8004552:	4630      	mov	r0, r6
 8004554:	f7fc fbca 	bl	8000cec <__aeabi_fmul>
 8004558:	6a21      	ldr	r1, [r4, #32]
 800455a:	4606      	mov	r6, r0
 800455c:	4628      	mov	r0, r5
 800455e:	f7fc fbc5 	bl	8000cec <__aeabi_fmul>
 8004562:	4601      	mov	r1, r0
 8004564:	4630      	mov	r0, r6
 8004566:	f7fc fab9 	bl	8000adc <__addsf3>
 800456a:	4639      	mov	r1, r7
 800456c:	f004 ff6e 	bl	800944c <atan2f>
    AHRSIMU->Pitch = (float) asinf(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 8004570:	6a21      	ldr	r1, [r4, #32]
    AHRSIMU->Roll = (float) atan2f(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 8004572:	6020      	str	r0, [r4, #0]
    AHRSIMU->Pitch = (float) asinf(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 8004574:	69a0      	ldr	r0, [r4, #24]
 8004576:	f7fc fbb9 	bl	8000cec <__aeabi_fmul>
 800457a:	69e1      	ldr	r1, [r4, #28]
 800457c:	4605      	mov	r5, r0
 800457e:	6960      	ldr	r0, [r4, #20]
 8004580:	f7fc fbb4 	bl	8000cec <__aeabi_fmul>
 8004584:	4601      	mov	r1, r0
 8004586:	4628      	mov	r0, r5
 8004588:	f7fc faa6 	bl	8000ad8 <__aeabi_fsub>
 800458c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004590:	f7fc fbac 	bl	8000cec <__aeabi_fmul>
 8004594:	f004 ff0c 	bl	80093b0 <asinf>
    AHRSIMU->Yaw = (float) atan2f(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 8004598:	69e6      	ldr	r6, [r4, #28]
    AHRSIMU->Pitch = (float) asinf(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 800459a:	6060      	str	r0, [r4, #4]
    AHRSIMU->Yaw = (float) atan2f(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 800459c:	4631      	mov	r1, r6
 800459e:	4630      	mov	r0, r6
 80045a0:	f7fc fba4 	bl	8000cec <__aeabi_fmul>
 80045a4:	4601      	mov	r1, r0
 80045a6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80045aa:	f7fc fa95 	bl	8000ad8 <__aeabi_fsub>
 80045ae:	6a25      	ldr	r5, [r4, #32]
 80045b0:	4607      	mov	r7, r0
 80045b2:	4629      	mov	r1, r5
 80045b4:	4628      	mov	r0, r5
 80045b6:	f7fc fb99 	bl	8000cec <__aeabi_fmul>
 80045ba:	4601      	mov	r1, r0
 80045bc:	4638      	mov	r0, r7
 80045be:	f7fc fa8b 	bl	8000ad8 <__aeabi_fsub>
 80045c2:	69a1      	ldr	r1, [r4, #24]
 80045c4:	4607      	mov	r7, r0
 80045c6:	4630      	mov	r0, r6
 80045c8:	f7fc fb90 	bl	8000cec <__aeabi_fmul>
 80045cc:	6961      	ldr	r1, [r4, #20]
 80045ce:	4606      	mov	r6, r0
 80045d0:	4628      	mov	r0, r5
 80045d2:	f7fc fb8b 	bl	8000cec <__aeabi_fmul>
 80045d6:	4601      	mov	r1, r0
 80045d8:	4630      	mov	r0, r6
 80045da:	f7fc fa7f 	bl	8000adc <__addsf3>
 80045de:	4639      	mov	r1, r7
 80045e0:	f004 ff34 	bl	800944c <atan2f>

    /* Calculate degrees and remove inclination */
    AHRSIMU->Roll *= R2D;
 80045e4:	4980      	ldr	r1, [pc, #512]	; (80047e8 <calculateAngles+0x2c8>)
    AHRSIMU->Yaw = (float) atan2f(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 80045e6:	4605      	mov	r5, r0
    AHRSIMU->Roll *= R2D;
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	f7fc fb7f 	bl	8000cec <__aeabi_fmul>
    AHRSIMU->Pitch *= R2D;
 80045ee:	497e      	ldr	r1, [pc, #504]	; (80047e8 <calculateAngles+0x2c8>)
    AHRSIMU->Roll *= R2D;
 80045f0:	6020      	str	r0, [r4, #0]
 80045f2:	4682      	mov	sl, r0
    AHRSIMU->Pitch *= R2D;
 80045f4:	6860      	ldr	r0, [r4, #4]
 80045f6:	f7fc fb79 	bl	8000cec <__aeabi_fmul>
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 80045fa:	497b      	ldr	r1, [pc, #492]	; (80047e8 <calculateAngles+0x2c8>)
    AHRSIMU->Pitch *= R2D;
 80045fc:	6060      	str	r0, [r4, #4]
 80045fe:	4607      	mov	r7, r0
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 8004600:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 8004604:	f7fc fb72 	bl	8000cec <__aeabi_fmul>
 8004608:	68e1      	ldr	r1, [r4, #12]
 800460a:	f7fc fa65 	bl	8000ad8 <__aeabi_fsub>

    /* Check values because of inclination */
    if (AHRSIMU->Yaw < -180) {
 800460e:	4977      	ldr	r1, [pc, #476]	; (80047ec <calculateAngles+0x2cc>)
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 8004610:	4605      	mov	r5, r0
    if (AHRSIMU->Yaw < -180) {
 8004612:	f7fc fd09 	bl	8001028 <__aeabi_fcmplt>
 8004616:	b148      	cbz	r0, 800462c <calculateAngles+0x10c>
        AHRSIMU->Yaw = 180.0f - (-180.0f - AHRSIMU->Yaw);
 8004618:	4629      	mov	r1, r5
 800461a:	4874      	ldr	r0, [pc, #464]	; (80047ec <calculateAngles+0x2cc>)
 800461c:	f7fc fa5c 	bl	8000ad8 <__aeabi_fsub>
 8004620:	4601      	mov	r1, r0
 8004622:	4873      	ldr	r0, [pc, #460]	; (80047f0 <calculateAngles+0x2d0>)
    } else if (AHRSIMU->Yaw > 180) {
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 8004624:	f7fc fa58 	bl	8000ad8 <__aeabi_fsub>
 8004628:	60a0      	str	r0, [r4, #8]
 800462a:	e007      	b.n	800463c <calculateAngles+0x11c>
    } else if (AHRSIMU->Yaw > 180) {
 800462c:	4970      	ldr	r1, [pc, #448]	; (80047f0 <calculateAngles+0x2d0>)
 800462e:	4628      	mov	r0, r5
 8004630:	f7fc fd18 	bl	8001064 <__aeabi_fcmpgt>
 8004634:	2800      	cmp	r0, #0
 8004636:	f040 80c4 	bne.w	80047c2 <calculateAngles+0x2a2>
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 800463a:	60a5      	str	r5, [r4, #8]
//  AHRSIMU->Roll  = (0.96 * Pre_IMU[ROLL]  ) + ((0.04) * AHRSIMU->Roll);
//	AHRSIMU->Pitch = (0.96 * Pre_IMU[PITCH] ) + ((0.04) * AHRSIMU->Pitch);
//	AHRSIMU->Yaw   = (0.96 * Pre_IMU[YAW]   ) + ((0.04) * AHRSIMU->Yaw);
		

  AHRSIMU->Roll  = (0.95 * (Pre_IMU[ROLL]  + (imu.gyroRaw[ROLL] * 0.004)))  + (0.05 * AHRSIMU->Roll);
 800463c:	4d6d      	ldr	r5, [pc, #436]	; (80047f4 <calculateAngles+0x2d4>)
 800463e:	4e6e      	ldr	r6, [pc, #440]	; (80047f8 <calculateAngles+0x2d8>)
 8004640:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004642:	f7fb fef1 	bl	8000428 <__aeabi_f2d>
 8004646:	a362      	add	r3, pc, #392	; (adr r3, 80047d0 <calculateAngles+0x2b0>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fb ff40 	bl	80004d0 <__aeabi_dmul>
 8004650:	4680      	mov	r8, r0
 8004652:	6830      	ldr	r0, [r6, #0]
 8004654:	4689      	mov	r9, r1
 8004656:	f7fb fee7 	bl	8000428 <__aeabi_f2d>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4640      	mov	r0, r8
 8004660:	4649      	mov	r1, r9
 8004662:	f7fb fd83 	bl	800016c <__adddf3>
 8004666:	a35c      	add	r3, pc, #368	; (adr r3, 80047d8 <calculateAngles+0x2b8>)
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f7fb ff30 	bl	80004d0 <__aeabi_dmul>
 8004670:	4680      	mov	r8, r0
 8004672:	4650      	mov	r0, sl
 8004674:	4689      	mov	r9, r1
 8004676:	f7fb fed7 	bl	8000428 <__aeabi_f2d>
 800467a:	a359      	add	r3, pc, #356	; (adr r3, 80047e0 <calculateAngles+0x2c0>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f7fb ff26 	bl	80004d0 <__aeabi_dmul>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4640      	mov	r0, r8
 800468a:	4649      	mov	r1, r9
 800468c:	f7fb fd6e 	bl	800016c <__adddf3>
 8004690:	f7fc f9ce 	bl	8000a30 <__aeabi_d2f>
 8004694:	4682      	mov	sl, r0
 8004696:	6020      	str	r0, [r4, #0]
  AHRSIMU->Pitch = (0.95 * (Pre_IMU[PITCH] + (imu.gyroRaw[PITCH] * 0.004))) + (0.05 * AHRSIMU->Pitch);
 8004698:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800469a:	f7fb fec5 	bl	8000428 <__aeabi_f2d>
 800469e:	a34c      	add	r3, pc, #304	; (adr r3, 80047d0 <calculateAngles+0x2b0>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f7fb ff14 	bl	80004d0 <__aeabi_dmul>
 80046a8:	4680      	mov	r8, r0
 80046aa:	6870      	ldr	r0, [r6, #4]
 80046ac:	4689      	mov	r9, r1
 80046ae:	f7fb febb 	bl	8000428 <__aeabi_f2d>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4640      	mov	r0, r8
 80046b8:	4649      	mov	r1, r9
 80046ba:	f7fb fd57 	bl	800016c <__adddf3>
 80046be:	a346      	add	r3, pc, #280	; (adr r3, 80047d8 <calculateAngles+0x2b8>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fb ff04 	bl	80004d0 <__aeabi_dmul>
 80046c8:	4680      	mov	r8, r0
 80046ca:	4638      	mov	r0, r7
 80046cc:	4689      	mov	r9, r1
 80046ce:	f7fb feab 	bl	8000428 <__aeabi_f2d>
 80046d2:	a343      	add	r3, pc, #268	; (adr r3, 80047e0 <calculateAngles+0x2c0>)
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f7fb fefa 	bl	80004d0 <__aeabi_dmul>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4640      	mov	r0, r8
 80046e2:	4649      	mov	r1, r9
 80046e4:	f7fb fd42 	bl	800016c <__adddf3>
 80046e8:	f7fc f9a2 	bl	8000a30 <__aeabi_d2f>
 80046ec:	4683      	mov	fp, r0
 80046ee:	6060      	str	r0, [r4, #4]
  AHRSIMU->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRSIMU->Yaw);
 80046f0:	68b0      	ldr	r0, [r6, #8]
 80046f2:	f7fb fe99 	bl	8000428 <__aeabi_f2d>
 80046f6:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 80046f8:	4680      	mov	r8, r0
 80046fa:	4638      	mov	r0, r7
 80046fc:	4689      	mov	r9, r1
 80046fe:	f7fb fe93 	bl	8000428 <__aeabi_f2d>
 8004702:	a333      	add	r3, pc, #204	; (adr r3, 80047d0 <calculateAngles+0x2b0>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f7fb fee2 	bl	80004d0 <__aeabi_dmul>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4640      	mov	r0, r8
 8004712:	4649      	mov	r1, r9
 8004714:	f7fb fd2a 	bl	800016c <__adddf3>
 8004718:	a32f      	add	r3, pc, #188	; (adr r3, 80047d8 <calculateAngles+0x2b8>)
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f7fb fed7 	bl	80004d0 <__aeabi_dmul>
 8004722:	4680      	mov	r8, r0
 8004724:	68a0      	ldr	r0, [r4, #8]
 8004726:	4689      	mov	r9, r1
 8004728:	f7fb fe7e 	bl	8000428 <__aeabi_f2d>
 800472c:	a32c      	add	r3, pc, #176	; (adr r3, 80047e0 <calculateAngles+0x2c0>)
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f7fb fecd 	bl	80004d0 <__aeabi_dmul>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4640      	mov	r0, r8
 800473c:	4649      	mov	r1, r9
 800473e:	f7fb fd15 	bl	800016c <__adddf3>
 8004742:	f7fc f975 	bl	8000a30 <__aeabi_d2f>
 8004746:	60a0      	str	r0, [r4, #8]

  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 8004748:	4c2c      	ldr	r4, [pc, #176]	; (80047fc <calculateAngles+0x2dc>)
  AHRSIMU->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRSIMU->Yaw);
 800474a:	4680      	mov	r8, r0
  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	f7fb fe6b 	bl	8000428 <__aeabi_f2d>
 8004752:	a321      	add	r3, pc, #132	; (adr r3, 80047d8 <calculateAngles+0x2b8>)
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	f7fb feba 	bl	80004d0 <__aeabi_dmul>
 800475c:	e9cd 0100 	strd	r0, r1, [sp]
 8004760:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 8004764:	f7fb fe60 	bl	8000428 <__aeabi_f2d>
 8004768:	a31d      	add	r3, pc, #116	; (adr r3, 80047e0 <calculateAngles+0x2c0>)
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f7fb feaf 	bl	80004d0 <__aeabi_dmul>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	e9dd 0100 	ldrd	r0, r1, [sp]
 800477a:	f7fb fcf7 	bl	800016c <__adddf3>
 800477e:	f7fc f957 	bl	8000a30 <__aeabi_d2f>
		
		imu.Roll = AHRSIMU->Roll + 0.0f;
 8004782:	2100      	movs	r1, #0
  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 8004784:	4607      	mov	r7, r0
 8004786:	f8c5 0084 	str.w	r0, [r5, #132]	; 0x84
		imu.Roll = AHRSIMU->Roll + 0.0f;
 800478a:	4650      	mov	r0, sl
 800478c:	f7fc f9a6 	bl	8000adc <__addsf3>
		imu.Pitch = AHRSIMU->Pitch + 0.0f;
 8004790:	2100      	movs	r1, #0
		imu.Roll = AHRSIMU->Roll + 0.0f;
 8004792:	4681      	mov	r9, r0
 8004794:	67a8      	str	r0, [r5, #120]	; 0x78
		imu.Pitch = AHRSIMU->Pitch + 0.0f;
 8004796:	4658      	mov	r0, fp
 8004798:	f7fc f9a0 	bl	8000adc <__addsf3>
		imu.Yaw = AHRSIMU->Yaw;
 800479c:	f8c5 8080 	str.w	r8, [r5, #128]	; 0x80
		imu.Pitch = AHRSIMU->Pitch + 0.0f;
 80047a0:	67e8      	str	r0, [r5, #124]	; 0x7c
		
		imu.AHRS[ROLL] = AHRSIMU->Roll + 0.0f;
 80047a2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
		imu.AHRS[PITCH] = AHRSIMU->Pitch + 0.0f;
 80047a6:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
		imu.AHRS[YAW] = AHRSIMU->Yaw;
 80047aa:	f8c5 8090 	str.w	r8, [r5, #144]	; 0x90
		
	Pre_IMU[ROLL]  = AHRSIMU->Roll;
 80047ae:	f8c6 a000 	str.w	sl, [r6]
	Pre_IMU[PITCH] = AHRSIMU->Pitch;
 80047b2:	f8c6 b004 	str.w	fp, [r6, #4]
	Pre_IMU[YAW]   = AHRSIMU->Yaw;
 80047b6:	f8c6 8008 	str.w	r8, [r6, #8]
	Pre_gyro = imu.gyroYaw;
 80047ba:	6027      	str	r7, [r4, #0]
	}
 80047bc:	b003      	add	sp, #12
 80047be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 80047c2:	4629      	mov	r1, r5
 80047c4:	480a      	ldr	r0, [pc, #40]	; (80047f0 <calculateAngles+0x2d0>)
 80047c6:	f7fc f987 	bl	8000ad8 <__aeabi_fsub>
 80047ca:	4601      	mov	r1, r0
 80047cc:	4807      	ldr	r0, [pc, #28]	; (80047ec <calculateAngles+0x2cc>)
 80047ce:	e729      	b.n	8004624 <calculateAngles+0x104>
 80047d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80047d4:	3f70624d 	.word	0x3f70624d
 80047d8:	66666666 	.word	0x66666666
 80047dc:	3fee6666 	.word	0x3fee6666
 80047e0:	9999999a 	.word	0x9999999a
 80047e4:	3fa99999 	.word	0x3fa99999
 80047e8:	42652ee0 	.word	0x42652ee0
 80047ec:	c3340000 	.word	0xc3340000
 80047f0:	43340000 	.word	0x43340000
 80047f4:	20000cf8 	.word	0x20000cf8
 80047f8:	2000049c 	.word	0x2000049c
 80047fc:	200004a8 	.word	0x200004a8

08004800 <TM_AHRSIMU_Init>:

void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRSIMU, float sampleRate, float beta, float inclination) {
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4604      	mov	r4, r0
    AHRSIMU->_beta = beta;
 8004804:	6102      	str	r2, [r0, #16]
    AHRSIMU->_sampleRate = 1 / sampleRate;
 8004806:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRSIMU, float sampleRate, float beta, float inclination) {
 800480a:	461d      	mov	r5, r3
    AHRSIMU->_sampleRate = 1 / sampleRate;
 800480c:	f7fc fb22 	bl	8000e54 <__aeabi_fdiv>
    AHRSIMU->Inclination = inclination;

    AHRSIMU->_q0 = 1.0f;
 8004810:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004814:	6163      	str	r3, [r4, #20]
    AHRSIMU->_q1 = 0.0f;
 8004816:	2300      	movs	r3, #0
    AHRSIMU->_sampleRate = 1 / sampleRate;
 8004818:	6260      	str	r0, [r4, #36]	; 0x24
    AHRSIMU->Inclination = inclination;
 800481a:	60e5      	str	r5, [r4, #12]
    AHRSIMU->_q1 = 0.0f;
 800481c:	61a3      	str	r3, [r4, #24]
    AHRSIMU->_q2 = 0.0f;
 800481e:	61e3      	str	r3, [r4, #28]
    AHRSIMU->_q3 = 0.0f;
 8004820:	6223      	str	r3, [r4, #32]
 8004822:	bd38      	pop	{r3, r4, r5, pc}

08004824 <TM_AHRSIMU_UpdateIMU>:

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8004824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004828:	4683      	mov	fp, r0
 800482a:	b093      	sub	sp, #76	; 0x4c
 800482c:	4608      	mov	r0, r1
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	
		// Convert gyroscope degrees/sec to radians/sec
	  gx = AHRSIMU_DEG2RAD(gx);
 800482e:	4952      	ldr	r1, [pc, #328]	; (8004978 <TM_AHRSIMU_UpdateIMU+0x154>)
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8004830:	4615      	mov	r5, r2
 8004832:	461c      	mov	r4, r3
	  gx = AHRSIMU_DEG2RAD(gx);
 8004834:	f7fc fa5a 	bl	8000cec <__aeabi_fmul>
	  gy = AHRSIMU_DEG2RAD(gy);
 8004838:	494f      	ldr	r1, [pc, #316]	; (8004978 <TM_AHRSIMU_UpdateIMU+0x154>)
	  gx = AHRSIMU_DEG2RAD(gx);
 800483a:	4681      	mov	r9, r0
	  gy = AHRSIMU_DEG2RAD(gy);
 800483c:	4628      	mov	r0, r5
 800483e:	f7fc fa55 	bl	8000cec <__aeabi_fmul>
	  gz = AHRSIMU_DEG2RAD(gz);
 8004842:	494d      	ldr	r1, [pc, #308]	; (8004978 <TM_AHRSIMU_UpdateIMU+0x154>)
	  gy = AHRSIMU_DEG2RAD(gy);
 8004844:	4682      	mov	sl, r0
	  gz = AHRSIMU_DEG2RAD(gz);
 8004846:	4620      	mov	r0, r4
 8004848:	f7fc fa50 	bl	8000cec <__aeabi_fmul>

    /* Rate of change of quaternion from gyroscope */
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 800484c:	f8db 5018 	ldr.w	r5, [fp, #24]
 8004850:	f8db 3020 	ldr.w	r3, [fp, #32]
	  gz = AHRSIMU_DEG2RAD(gz);
 8004854:	9002      	str	r0, [sp, #8]
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8004856:	4649      	mov	r1, r9
 8004858:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	f7fc fa45 	bl	8000cec <__aeabi_fmul>
 8004862:	f8db 401c 	ldr.w	r4, [fp, #28]
 8004866:	9001      	str	r0, [sp, #4]
 8004868:	4621      	mov	r1, r4
 800486a:	4650      	mov	r0, sl
 800486c:	f7fc fa3e 	bl	8000cec <__aeabi_fmul>
 8004870:	9b01      	ldr	r3, [sp, #4]
 8004872:	4601      	mov	r1, r0
 8004874:	4618      	mov	r0, r3
 8004876:	f7fc f92f 	bl	8000ad8 <__aeabi_fsub>
 800487a:	9900      	ldr	r1, [sp, #0]
 800487c:	9001      	str	r0, [sp, #4]
 800487e:	9802      	ldr	r0, [sp, #8]
 8004880:	f7fc fa34 	bl	8000cec <__aeabi_fmul>
 8004884:	9b01      	ldr	r3, [sp, #4]
 8004886:	4601      	mov	r1, r0
 8004888:	4618      	mov	r0, r3
 800488a:	f7fc f925 	bl	8000ad8 <__aeabi_fsub>
 800488e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004892:	f7fc fa2b 	bl	8000cec <__aeabi_fmul>
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8004896:	f8db 3014 	ldr.w	r3, [fp, #20]
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 800489a:	9004      	str	r0, [sp, #16]
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 800489c:	4619      	mov	r1, r3
 800489e:	4648      	mov	r0, r9
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	f7fc fa23 	bl	8000cec <__aeabi_fmul>
 80048a6:	4621      	mov	r1, r4
 80048a8:	9003      	str	r0, [sp, #12]
 80048aa:	9802      	ldr	r0, [sp, #8]
 80048ac:	f7fc fa1e 	bl	8000cec <__aeabi_fmul>
 80048b0:	9b03      	ldr	r3, [sp, #12]
 80048b2:	4601      	mov	r1, r0
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fc f911 	bl	8000adc <__addsf3>
 80048ba:	9900      	ldr	r1, [sp, #0]
 80048bc:	9003      	str	r0, [sp, #12]
 80048be:	4650      	mov	r0, sl
 80048c0:	f7fc fa14 	bl	8000cec <__aeabi_fmul>
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	4601      	mov	r1, r0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fc f905 	bl	8000ad8 <__aeabi_fsub>
 80048ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80048d2:	f7fc fa0b 	bl	8000cec <__aeabi_fmul>
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 80048d6:	9901      	ldr	r1, [sp, #4]
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 80048d8:	9005      	str	r0, [sp, #20]
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 80048da:	4650      	mov	r0, sl
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 80048dc:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80048e0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80048e2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 80048e4:	f7fc fa02 	bl	8000cec <__aeabi_fmul>
 80048e8:	4629      	mov	r1, r5
 80048ea:	9003      	str	r0, [sp, #12]
 80048ec:	9802      	ldr	r0, [sp, #8]
 80048ee:	f7fc f9fd 	bl	8000cec <__aeabi_fmul>
 80048f2:	9b03      	ldr	r3, [sp, #12]
 80048f4:	4601      	mov	r1, r0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fc f8ee 	bl	8000ad8 <__aeabi_fsub>
 80048fc:	9900      	ldr	r1, [sp, #0]
 80048fe:	9003      	str	r0, [sp, #12]
 8004900:	4648      	mov	r0, r9
 8004902:	f7fc f9f3 	bl	8000cec <__aeabi_fmul>
 8004906:	9b03      	ldr	r3, [sp, #12]
 8004908:	4601      	mov	r1, r0
 800490a:	4618      	mov	r0, r3
 800490c:	f7fc f8e6 	bl	8000adc <__addsf3>
 8004910:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004914:	f7fc f9ea 	bl	8000cec <__aeabi_fmul>
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8004918:	9901      	ldr	r1, [sp, #4]
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 800491a:	9006      	str	r0, [sp, #24]
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 800491c:	9802      	ldr	r0, [sp, #8]
 800491e:	f7fc f9e5 	bl	8000cec <__aeabi_fmul>
 8004922:	4629      	mov	r1, r5
 8004924:	9002      	str	r0, [sp, #8]
 8004926:	4650      	mov	r0, sl
 8004928:	f7fc f9e0 	bl	8000cec <__aeabi_fmul>
 800492c:	9b02      	ldr	r3, [sp, #8]
 800492e:	4601      	mov	r1, r0
 8004930:	4618      	mov	r0, r3
 8004932:	f7fc f8d3 	bl	8000adc <__addsf3>
 8004936:	4621      	mov	r1, r4
 8004938:	4682      	mov	sl, r0
 800493a:	4648      	mov	r0, r9
 800493c:	f7fc f9d6 	bl	8000cec <__aeabi_fmul>
 8004940:	4601      	mov	r1, r0
 8004942:	4650      	mov	r0, sl
 8004944:	f7fc f8c8 	bl	8000ad8 <__aeabi_fsub>
 8004948:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800494c:	f7fc f9ce 	bl	8000cec <__aeabi_fmul>

    /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8004950:	2100      	movs	r1, #0
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8004952:	9007      	str	r0, [sp, #28]
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8004954:	4640      	mov	r0, r8
 8004956:	f7fc fb5d 	bl	8001014 <__aeabi_fcmpeq>
 800495a:	b178      	cbz	r0, 800497c <TM_AHRSIMU_UpdateIMU+0x158>
 800495c:	2100      	movs	r1, #0
 800495e:	4638      	mov	r0, r7
 8004960:	f7fc fb58 	bl	8001014 <__aeabi_fcmpeq>
 8004964:	b150      	cbz	r0, 800497c <TM_AHRSIMU_UpdateIMU+0x158>
 8004966:	2100      	movs	r1, #0
 8004968:	4630      	mov	r0, r6
 800496a:	f7fc fb53 	bl	8001014 <__aeabi_fcmpeq>
 800496e:	2800      	cmp	r0, #0
 8004970:	f040 8198 	bne.w	8004ca4 <TM_AHRSIMU_UpdateIMU+0x480>
 8004974:	e002      	b.n	800497c <TM_AHRSIMU_UpdateIMU+0x158>
 8004976:	bf00      	nop
 8004978:	3c8efa35 	.word	0x3c8efa35

        /* Normalise accelerometer measurement */
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800497c:	4641      	mov	r1, r8
 800497e:	4640      	mov	r0, r8
 8004980:	f7fc f9b4 	bl	8000cec <__aeabi_fmul>
 8004984:	4639      	mov	r1, r7
 8004986:	4681      	mov	r9, r0
 8004988:	4638      	mov	r0, r7
 800498a:	f7fc f9af 	bl	8000cec <__aeabi_fmul>
 800498e:	4601      	mov	r1, r0
 8004990:	4648      	mov	r0, r9
 8004992:	f7fc f8a3 	bl	8000adc <__addsf3>
 8004996:	4631      	mov	r1, r6
 8004998:	4681      	mov	r9, r0
 800499a:	4630      	mov	r0, r6
 800499c:	f7fc f9a6 	bl	8000cec <__aeabi_fmul>
 80049a0:	4601      	mov	r1, r0
 80049a2:	4648      	mov	r0, r9
 80049a4:	f7fc f89a 	bl	8000adc <__addsf3>
 80049a8:	f7ff fd8e 	bl	80044c8 <invSqrt>
 80049ac:	4681      	mov	r9, r0
        ax *= recipNorm;
 80049ae:	4601      	mov	r1, r0
 80049b0:	4640      	mov	r0, r8
 80049b2:	f7fc f99b 	bl	8000cec <__aeabi_fmul>
        ay *= recipNorm;
 80049b6:	4649      	mov	r1, r9
        ax *= recipNorm;
 80049b8:	9002      	str	r0, [sp, #8]
        ay *= recipNorm;
 80049ba:	4638      	mov	r0, r7
 80049bc:	f7fc f996 	bl	8000cec <__aeabi_fmul>
        az *= recipNorm;
 80049c0:	4649      	mov	r1, r9
        ay *= recipNorm;
 80049c2:	9003      	str	r0, [sp, #12]
        az *= recipNorm;
 80049c4:	4630      	mov	r0, r6
 80049c6:	f7fc f991 	bl	8000cec <__aeabi_fmul>

        /* Auxiliary variables to avoid repeated arithmetic */
        _2q0 = 2.0f * AHRSIMU->_q0;
 80049ca:	9901      	ldr	r1, [sp, #4]
        az *= recipNorm;
 80049cc:	9009      	str	r0, [sp, #36]	; 0x24
        _2q0 = 2.0f * AHRSIMU->_q0;
 80049ce:	4608      	mov	r0, r1
 80049d0:	f7fc f884 	bl	8000adc <__addsf3>
        _2q1 = 2.0f * AHRSIMU->_q1;
 80049d4:	4629      	mov	r1, r5
        _2q0 = 2.0f * AHRSIMU->_q0;
 80049d6:	900a      	str	r0, [sp, #40]	; 0x28
        _2q1 = 2.0f * AHRSIMU->_q1;
 80049d8:	4628      	mov	r0, r5
 80049da:	f7fc f87f 	bl	8000adc <__addsf3>
        _2q2 = 2.0f * AHRSIMU->_q2;
 80049de:	4621      	mov	r1, r4
        _2q1 = 2.0f * AHRSIMU->_q1;
 80049e0:	900b      	str	r0, [sp, #44]	; 0x2c
        _2q2 = 2.0f * AHRSIMU->_q2;
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7fc f87a 	bl	8000adc <__addsf3>
        _2q3 = 2.0f * AHRSIMU->_q3;
 80049e8:	9900      	ldr	r1, [sp, #0]
        _2q2 = 2.0f * AHRSIMU->_q2;
 80049ea:	900c      	str	r0, [sp, #48]	; 0x30
        _2q3 = 2.0f * AHRSIMU->_q3;
 80049ec:	4608      	mov	r0, r1
 80049ee:	f7fc f875 	bl	8000adc <__addsf3>
        _4q0 = 4.0f * AHRSIMU->_q0;
 80049f2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _2q3 = 2.0f * AHRSIMU->_q3;
 80049f6:	900d      	str	r0, [sp, #52]	; 0x34
        _4q0 = 4.0f * AHRSIMU->_q0;
 80049f8:	9801      	ldr	r0, [sp, #4]
 80049fa:	f7fc f977 	bl	8000cec <__aeabi_fmul>
        _4q1 = 4.0f * AHRSIMU->_q1;
 80049fe:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _4q0 = 4.0f * AHRSIMU->_q0;
 8004a02:	4680      	mov	r8, r0
        _4q1 = 4.0f * AHRSIMU->_q1;
 8004a04:	4628      	mov	r0, r5
 8004a06:	f7fc f971 	bl	8000cec <__aeabi_fmul>
        _4q2 = 4.0f * AHRSIMU->_q2;
 8004a0a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _4q1 = 4.0f * AHRSIMU->_q1;
 8004a0e:	4607      	mov	r7, r0
        _4q2 = 4.0f * AHRSIMU->_q2;
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7fc f96b 	bl	8000cec <__aeabi_fmul>
        _8q1 = 8.0f * AHRSIMU->_q1;
 8004a16:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
        _4q2 = 4.0f * AHRSIMU->_q2;
 8004a1a:	9008      	str	r0, [sp, #32]
        _8q1 = 8.0f * AHRSIMU->_q1;
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f7fc f965 	bl	8000cec <__aeabi_fmul>
        _8q2 = 8.0f * AHRSIMU->_q2;
 8004a22:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
        _8q1 = 8.0f * AHRSIMU->_q1;
 8004a26:	4681      	mov	r9, r0
        _8q2 = 8.0f * AHRSIMU->_q2;
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7fc f95f 	bl	8000cec <__aeabi_fmul>
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 8004a2e:	4629      	mov	r1, r5
        _8q2 = 8.0f * AHRSIMU->_q2;
 8004a30:	900e      	str	r0, [sp, #56]	; 0x38
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 8004a32:	4628      	mov	r0, r5
 8004a34:	f7fc f95a 	bl	8000cec <__aeabi_fmul>
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 8004a38:	4621      	mov	r1, r4
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 8004a3a:	4606      	mov	r6, r0
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f7fc f955 	bl	8000cec <__aeabi_fmul>
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 8004a42:	9900      	ldr	r1, [sp, #0]
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 8004a44:	4682      	mov	sl, r0
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 8004a46:	4608      	mov	r0, r1
 8004a48:	f7fc f950 	bl	8000cec <__aeabi_fmul>

        /* Gradient decent algorithm corrective step */
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004a4c:	4651      	mov	r1, sl
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 8004a4e:	900f      	str	r0, [sp, #60]	; 0x3c
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004a50:	4640      	mov	r0, r8
 8004a52:	f7fc f94b 	bl	8000cec <__aeabi_fmul>
 8004a56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a58:	9010      	str	r0, [sp, #64]	; 0x40
 8004a5a:	9802      	ldr	r0, [sp, #8]
 8004a5c:	f7fc f946 	bl	8000cec <__aeabi_fmul>
 8004a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a62:	4601      	mov	r1, r0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fc f839 	bl	8000adc <__addsf3>
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	9010      	str	r0, [sp, #64]	; 0x40
 8004a6e:	4640      	mov	r0, r8
 8004a70:	f7fc f93c 	bl	8000cec <__aeabi_fmul>
 8004a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a76:	4601      	mov	r1, r0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fc f82f 	bl	8000adc <__addsf3>
 8004a7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a80:	4680      	mov	r8, r0
 8004a82:	9803      	ldr	r0, [sp, #12]
 8004a84:	f7fc f932 	bl	8000cec <__aeabi_fmul>
 8004a88:	4601      	mov	r1, r0
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	f7fc f824 	bl	8000ad8 <__aeabi_fsub>
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
 8004a90:	9901      	ldr	r1, [sp, #4]
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004a92:	9011      	str	r0, [sp, #68]	; 0x44
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
 8004a94:	4608      	mov	r0, r1
 8004a96:	f7fc f929 	bl	8000cec <__aeabi_fmul>
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004a9a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004a9e:	f7fc f925 	bl	8000cec <__aeabi_fmul>
 8004aa2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004aa4:	4680      	mov	r8, r0
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	f7fc f920 	bl	8000cec <__aeabi_fmul>
 8004aac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004aae:	9010      	str	r0, [sp, #64]	; 0x40
 8004ab0:	9802      	ldr	r0, [sp, #8]
 8004ab2:	f7fc f91b 	bl	8000cec <__aeabi_fmul>
 8004ab6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ab8:	4601      	mov	r1, r0
 8004aba:	4610      	mov	r0, r2
 8004abc:	f7fc f80c 	bl	8000ad8 <__aeabi_fsub>
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	9010      	str	r0, [sp, #64]	; 0x40
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f7fc f911 	bl	8000cec <__aeabi_fmul>
 8004aca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004acc:	4601      	mov	r1, r0
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f7fc f804 	bl	8000adc <__addsf3>
 8004ad4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ad6:	9010      	str	r0, [sp, #64]	; 0x40
 8004ad8:	9803      	ldr	r0, [sp, #12]
 8004ada:	f7fc f907 	bl	8000cec <__aeabi_fmul>
 8004ade:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ae0:	4601      	mov	r1, r0
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f7fb fff8 	bl	8000ad8 <__aeabi_fsub>
 8004ae8:	4639      	mov	r1, r7
 8004aea:	f7fb fff5 	bl	8000ad8 <__aeabi_fsub>
 8004aee:	4631      	mov	r1, r6
 8004af0:	9010      	str	r0, [sp, #64]	; 0x40
 8004af2:	4648      	mov	r0, r9
 8004af4:	f7fc f8fa 	bl	8000cec <__aeabi_fmul>
 8004af8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004afa:	4601      	mov	r1, r0
 8004afc:	4610      	mov	r0, r2
 8004afe:	f7fb ffed 	bl	8000adc <__addsf3>
 8004b02:	4651      	mov	r1, sl
 8004b04:	9010      	str	r0, [sp, #64]	; 0x40
 8004b06:	4648      	mov	r0, r9
 8004b08:	f7fc f8f0 	bl	8000cec <__aeabi_fmul>
 8004b0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b0e:	4601      	mov	r1, r0
 8004b10:	4610      	mov	r0, r2
 8004b12:	f7fb ffe3 	bl	8000adc <__addsf3>
 8004b16:	4639      	mov	r1, r7
 8004b18:	4681      	mov	r9, r0
 8004b1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b1c:	f7fc f8e6 	bl	8000cec <__aeabi_fmul>
 8004b20:	4601      	mov	r1, r0
 8004b22:	4648      	mov	r0, r9
 8004b24:	f7fb ffda 	bl	8000adc <__addsf3>
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004b28:	4641      	mov	r1, r8
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004b2a:	4681      	mov	r9, r0
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f7fc f8dd 	bl	8000cec <__aeabi_fmul>
 8004b32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b34:	4607      	mov	r7, r0
 8004b36:	9802      	ldr	r0, [sp, #8]
 8004b38:	f7fc f8d8 	bl	8000cec <__aeabi_fmul>
 8004b3c:	4601      	mov	r1, r0
 8004b3e:	4638      	mov	r0, r7
 8004b40:	f7fb ffcc 	bl	8000adc <__addsf3>
 8004b44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b46:	4607      	mov	r7, r0
 8004b48:	9808      	ldr	r0, [sp, #32]
 8004b4a:	f7fc f8cf 	bl	8000cec <__aeabi_fmul>
 8004b4e:	4601      	mov	r1, r0
 8004b50:	4638      	mov	r0, r7
 8004b52:	f7fb ffc3 	bl	8000adc <__addsf3>
 8004b56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b58:	4607      	mov	r7, r0
 8004b5a:	9803      	ldr	r0, [sp, #12]
 8004b5c:	f7fc f8c6 	bl	8000cec <__aeabi_fmul>
 8004b60:	4601      	mov	r1, r0
 8004b62:	4638      	mov	r0, r7
 8004b64:	f7fb ffb8 	bl	8000ad8 <__aeabi_fsub>
 8004b68:	9908      	ldr	r1, [sp, #32]
 8004b6a:	f7fb ffb5 	bl	8000ad8 <__aeabi_fsub>
 8004b6e:	4631      	mov	r1, r6
 8004b70:	4607      	mov	r7, r0
 8004b72:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004b74:	f7fc f8ba 	bl	8000cec <__aeabi_fmul>
 8004b78:	4601      	mov	r1, r0
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	f7fb ffae 	bl	8000adc <__addsf3>
 8004b80:	4651      	mov	r1, sl
 8004b82:	4607      	mov	r7, r0
 8004b84:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004b86:	f7fc f8b1 	bl	8000cec <__aeabi_fmul>
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f7fb ffa5 	bl	8000adc <__addsf3>
 8004b92:	9908      	ldr	r1, [sp, #32]
 8004b94:	4607      	mov	r7, r0
 8004b96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b98:	f7fc f8a8 	bl	8000cec <__aeabi_fmul>
 8004b9c:	4601      	mov	r1, r0
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f7fb ff9c 	bl	8000adc <__addsf3>
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8004ba4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004ba8:	4680      	mov	r8, r0
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8004baa:	4630      	mov	r0, r6
 8004bac:	f7fc f89e 	bl	8000cec <__aeabi_fmul>
 8004bb0:	9900      	ldr	r1, [sp, #0]
 8004bb2:	f7fc f89b 	bl	8000cec <__aeabi_fmul>
 8004bb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bb8:	4606      	mov	r6, r0
 8004bba:	9802      	ldr	r0, [sp, #8]
 8004bbc:	f7fc f896 	bl	8000cec <__aeabi_fmul>
 8004bc0:	4601      	mov	r1, r0
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f7fb ff88 	bl	8000ad8 <__aeabi_fsub>
 8004bc8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004bcc:	4606      	mov	r6, r0
 8004bce:	4650      	mov	r0, sl
 8004bd0:	f7fc f88c 	bl	8000cec <__aeabi_fmul>
 8004bd4:	9900      	ldr	r1, [sp, #0]
 8004bd6:	f7fc f889 	bl	8000cec <__aeabi_fmul>
 8004bda:	4601      	mov	r1, r0
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f7fb ff7d 	bl	8000adc <__addsf3>
 8004be2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004be4:	4606      	mov	r6, r0
 8004be6:	9803      	ldr	r0, [sp, #12]
 8004be8:	f7fc f880 	bl	8000cec <__aeabi_fmul>
 8004bec:	4601      	mov	r1, r0
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f7fb ff72 	bl	8000ad8 <__aeabi_fsub>

        /* Normalise step magnitude */
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004bf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8004bf6:	4682      	mov	sl, r0
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	9302      	str	r3, [sp, #8]
 8004bfe:	f7fc f875 	bl	8000cec <__aeabi_fmul>
 8004c02:	4649      	mov	r1, r9
 8004c04:	4606      	mov	r6, r0
 8004c06:	4648      	mov	r0, r9
 8004c08:	f7fc f870 	bl	8000cec <__aeabi_fmul>
 8004c0c:	4601      	mov	r1, r0
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f7fb ff64 	bl	8000adc <__addsf3>
 8004c14:	4641      	mov	r1, r8
 8004c16:	4606      	mov	r6, r0
 8004c18:	4640      	mov	r0, r8
 8004c1a:	f7fc f867 	bl	8000cec <__aeabi_fmul>
 8004c1e:	4601      	mov	r1, r0
 8004c20:	4630      	mov	r0, r6
 8004c22:	f7fb ff5b 	bl	8000adc <__addsf3>
 8004c26:	4651      	mov	r1, sl
 8004c28:	4606      	mov	r6, r0
 8004c2a:	4650      	mov	r0, sl
 8004c2c:	f7fc f85e 	bl	8000cec <__aeabi_fmul>
 8004c30:	4601      	mov	r1, r0
 8004c32:	4630      	mov	r0, r6
 8004c34:	f7fb ff52 	bl	8000adc <__addsf3>
 8004c38:	f7ff fc46 	bl	80044c8 <invSqrt>
        s0 *= recipNorm;
 8004c3c:	9b02      	ldr	r3, [sp, #8]
        s1 *= recipNorm;
        s2 *= recipNorm;
        s3 *= recipNorm;

        /* Apply feedback step */
        qDot1 -= AHRSIMU->_beta * s0;
 8004c3e:	f8db 6010 	ldr.w	r6, [fp, #16]
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004c42:	4607      	mov	r7, r0
        s0 *= recipNorm;
 8004c44:	4601      	mov	r1, r0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fc f850 	bl	8000cec <__aeabi_fmul>
        qDot1 -= AHRSIMU->_beta * s0;
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	f7fc f84d 	bl	8000cec <__aeabi_fmul>
 8004c52:	4601      	mov	r1, r0
 8004c54:	9804      	ldr	r0, [sp, #16]
 8004c56:	f7fb ff3f 	bl	8000ad8 <__aeabi_fsub>
        s1 *= recipNorm;
 8004c5a:	4639      	mov	r1, r7
        qDot1 -= AHRSIMU->_beta * s0;
 8004c5c:	9004      	str	r0, [sp, #16]
        s1 *= recipNorm;
 8004c5e:	4648      	mov	r0, r9
 8004c60:	f7fc f844 	bl	8000cec <__aeabi_fmul>
        qDot2 -= AHRSIMU->_beta * s1;
 8004c64:	4631      	mov	r1, r6
 8004c66:	f7fc f841 	bl	8000cec <__aeabi_fmul>
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	9805      	ldr	r0, [sp, #20]
 8004c6e:	f7fb ff33 	bl	8000ad8 <__aeabi_fsub>
        s2 *= recipNorm;
 8004c72:	4639      	mov	r1, r7
        qDot2 -= AHRSIMU->_beta * s1;
 8004c74:	9005      	str	r0, [sp, #20]
        s2 *= recipNorm;
 8004c76:	4640      	mov	r0, r8
 8004c78:	f7fc f838 	bl	8000cec <__aeabi_fmul>
        qDot3 -= AHRSIMU->_beta * s2;
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	f7fc f835 	bl	8000cec <__aeabi_fmul>
 8004c82:	4601      	mov	r1, r0
 8004c84:	9806      	ldr	r0, [sp, #24]
 8004c86:	f7fb ff27 	bl	8000ad8 <__aeabi_fsub>
        s3 *= recipNorm;
 8004c8a:	4639      	mov	r1, r7
        qDot3 -= AHRSIMU->_beta * s2;
 8004c8c:	9006      	str	r0, [sp, #24]
        s3 *= recipNorm;
 8004c8e:	4650      	mov	r0, sl
 8004c90:	f7fc f82c 	bl	8000cec <__aeabi_fmul>
        qDot4 -= AHRSIMU->_beta * s3;
 8004c94:	4631      	mov	r1, r6
 8004c96:	f7fc f829 	bl	8000cec <__aeabi_fmul>
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	9807      	ldr	r0, [sp, #28]
 8004c9e:	f7fb ff1b 	bl	8000ad8 <__aeabi_fsub>
 8004ca2:	9007      	str	r0, [sp, #28]
    }

    /* Integrate rate of change of quaternion to yield quaternion */
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8004ca4:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8004ca8:	9804      	ldr	r0, [sp, #16]
 8004caa:	4631      	mov	r1, r6
 8004cac:	f7fc f81e 	bl	8000cec <__aeabi_fmul>
 8004cb0:	9901      	ldr	r1, [sp, #4]
 8004cb2:	f7fb ff13 	bl	8000adc <__addsf3>
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8004cb6:	4631      	mov	r1, r6
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8004cb8:	4607      	mov	r7, r0
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8004cba:	9805      	ldr	r0, [sp, #20]
 8004cbc:	f7fc f816 	bl	8000cec <__aeabi_fmul>
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	f7fb ff0b 	bl	8000adc <__addsf3>
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8004cc6:	4631      	mov	r1, r6
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8004cc8:	4680      	mov	r8, r0
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8004cca:	9806      	ldr	r0, [sp, #24]
 8004ccc:	f7fc f80e 	bl	8000cec <__aeabi_fmul>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	f7fb ff03 	bl	8000adc <__addsf3>
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8004cd6:	4631      	mov	r1, r6
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8004cd8:	4681      	mov	r9, r0
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8004cda:	9807      	ldr	r0, [sp, #28]
 8004cdc:	f7fc f806 	bl	8000cec <__aeabi_fmul>
 8004ce0:	9900      	ldr	r1, [sp, #0]
 8004ce2:	f7fb fefb 	bl	8000adc <__addsf3>

    /* Normalise quaternion */
    recipNorm = invSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8004ce6:	4639      	mov	r1, r7
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8004ce8:	4605      	mov	r5, r0
    recipNorm = invSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8004cea:	4638      	mov	r0, r7
 8004cec:	f7fb fffe 	bl	8000cec <__aeabi_fmul>
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	4640      	mov	r0, r8
 8004cf6:	f7fb fff9 	bl	8000cec <__aeabi_fmul>
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f7fb feed 	bl	8000adc <__addsf3>
 8004d02:	4649      	mov	r1, r9
 8004d04:	4604      	mov	r4, r0
 8004d06:	4648      	mov	r0, r9
 8004d08:	f7fb fff0 	bl	8000cec <__aeabi_fmul>
 8004d0c:	4601      	mov	r1, r0
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f7fb fee4 	bl	8000adc <__addsf3>
 8004d14:	4629      	mov	r1, r5
 8004d16:	4604      	mov	r4, r0
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f7fb ffe7 	bl	8000cec <__aeabi_fmul>
 8004d1e:	4601      	mov	r1, r0
 8004d20:	4620      	mov	r0, r4
 8004d22:	f7fb fedb 	bl	8000adc <__addsf3>
 8004d26:	f7ff fbcf 	bl	80044c8 <invSqrt>
 8004d2a:	4604      	mov	r4, r0
    AHRSIMU->_q0 *= recipNorm;
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	4638      	mov	r0, r7
 8004d30:	f7fb ffdc 	bl	8000cec <__aeabi_fmul>
    AHRSIMU->_q1 *= recipNorm;
 8004d34:	4621      	mov	r1, r4
    AHRSIMU->_q0 *= recipNorm;
 8004d36:	f8cb 0014 	str.w	r0, [fp, #20]
    AHRSIMU->_q1 *= recipNorm;
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f7fb ffd6 	bl	8000cec <__aeabi_fmul>
    AHRSIMU->_q2 *= recipNorm;
 8004d40:	4621      	mov	r1, r4
    AHRSIMU->_q1 *= recipNorm;
 8004d42:	f8cb 0018 	str.w	r0, [fp, #24]
    AHRSIMU->_q2 *= recipNorm;
 8004d46:	4648      	mov	r0, r9
 8004d48:	f7fb ffd0 	bl	8000cec <__aeabi_fmul>
    AHRSIMU->_q3 *= recipNorm;
 8004d4c:	4621      	mov	r1, r4
    AHRSIMU->_q2 *= recipNorm;
 8004d4e:	f8cb 001c 	str.w	r0, [fp, #28]
    AHRSIMU->_q3 *= recipNorm;
 8004d52:	4628      	mov	r0, r5
 8004d54:	f7fb ffca 	bl	8000cec <__aeabi_fmul>
 8004d58:	f8cb 0020 	str.w	r0, [fp, #32]

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
 8004d5c:	4658      	mov	r0, fp
}
 8004d5e:	b013      	add	sp, #76	; 0x4c
 8004d60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    calculateAngles(AHRSIMU);
 8004d64:	f7ff bbdc 	b.w	8004520 <calculateAngles>

08004d68 <computeIMU>:
            imu.AHRS[ROLL]  *= 180.0f / AHRSIMU_PI;

        }

void computeIMU(void)
{
 8004d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
//  uint8_t DATA[0];
//  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_STATUS, 1, DATA, 1);
//  if(DATA[0] & 0x01){
	Gyro_getADC();
 8004d6a:	f000 fe53 	bl	8005a14 <Gyro_getADC>
  ACC_getADC();
 8004d6e:	f000 fedd 	bl	8005b2c <ACC_getADC>
  Mag_getADC();                                               //Read the raw acc and gyro data from the MPU-6050
 8004d72:	f000 ff2b 	bl	8005bcc <Mag_getADC>
	Temp_getADC();
 8004d76:	f000 ffbf 	bl	8005cf8 <Temp_getADC>
		#endif
	
#ifdef IMU_AHRS
    /* Call update function */
    /* This function must be called periodically in inteervals set by sample rate on initialization process */
	TM_AHRSIMU_UpdateIMU(&AHRSIMU, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW]);
 8004d7a:	4908      	ldr	r1, [pc, #32]	; (8004d9c <computeIMU+0x34>)
 8004d7c:	4808      	ldr	r0, [pc, #32]	; (8004da0 <computeIMU+0x38>)
 8004d7e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004d80:	9302      	str	r3, [sp, #8]
 8004d82:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8004d8c:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8004d8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004d90:	f7ff fd48 	bl	8004824 <TM_AHRSIMU_UpdateIMU>
	 // MadgwickQuaternionUpdate(imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.gyroRaw[ROLL]*AHRSIMU_PI/180.0f, imu.gyroRaw[PITCH]*AHRSIMU_PI/180.0f, imu.gyroRaw[YAW]*AHRSIMU_PI/180.0f,  imu.magRaw[PITCH], imu.magRaw[ROLL], imu.magRaw[YAW]);
	//TM_AHRSIMU_UpdateAHRS(&AHRSIMU, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.magRaw[PITCH], imu.magRaw[ROLL], imu.magRaw[YAW]);
	
  //TM_AHRSIMU_UpdateAHRS(&AHRSIMU, AHRSIMU_DEG2RAD(imu.gyroRaw[ROLL]), AHRSIMU_DEG2RAD(imu.gyroRaw[PITCH]), AHRSIMU_DEG2RAD(imu.gyroRaw[YAW]), imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.magRaw[PITCH], imu.magRaw[ROLL], imu.magRaw[YAW]);
	#endif
}
 8004d94:	b005      	add	sp, #20
 8004d96:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d9a:	bf00      	nop
 8004d9c:	20000cf8 	.word	0x20000cf8
 8004da0:	20000838 	.word	0x20000838

08004da4 <error_signal>:
uint32_t flight_mode_timer;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the error LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void error_signal(void) {
 8004da4:	b538      	push	{r3, r4, r5, lr}
  if (Error.error >= 100) {RGB_R_ON;}                                                         //When the error is 100 the LED is always on.
 8004da6:	4c1b      	ldr	r4, [pc, #108]	; (8004e14 <error_signal+0x70>)
 8004da8:	7823      	ldrb	r3, [r4, #0]
 8004daa:	2b63      	cmp	r3, #99	; 0x63
 8004dac:	d907      	bls.n	8004dbe <error_signal+0x1a>
      RGB_R_OFF;                                                                        //Turn the LED off.
      Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
    }
  }
}
 8004dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (Error.error >= 100) {RGB_R_ON;}                                                         //When the error is 100 the LED is always on.
 8004db2:	2200      	movs	r2, #0
 8004db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004db8:	4817      	ldr	r0, [pc, #92]	; (8004e18 <error_signal+0x74>)
 8004dba:	f7fc befb 	b.w	8001bb4 <HAL_GPIO_WritePin>
  else if (Error.error_timer < millis()) {                                                       //If the error_timer value is smaller that the millis() function.
 8004dbe:	6865      	ldr	r5, [r4, #4]
 8004dc0:	f002 fd88 	bl	80078d4 <millis>
 8004dc4:	4285      	cmp	r5, r0
 8004dc6:	d218      	bcs.n	8004dfa <error_signal+0x56>
    Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 8004dc8:	f002 fd84 	bl	80078d4 <millis>
    if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 8004dcc:	7823      	ldrb	r3, [r4, #0]
    Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 8004dce:	30fa      	adds	r0, #250	; 0xfa
 8004dd0:	6060      	str	r0, [r4, #4]
    if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 8004dd2:	b12b      	cbz	r3, 8004de0 <error_signal+0x3c>
 8004dd4:	7861      	ldrb	r1, [r4, #1]
 8004dd6:	1cda      	adds	r2, r3, #3
 8004dd8:	4291      	cmp	r1, r2
 8004dda:	bfc4      	itt	gt
 8004ddc:	2200      	movgt	r2, #0
 8004dde:	7062      	strbgt	r2, [r4, #1]
    if (Error.error_counter < Error.error && Error.error_led == 0 && Error.error > 0) {                            //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8004de0:	7862      	ldrb	r2, [r4, #1]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d20a      	bcs.n	8004dfc <error_signal+0x58>
 8004de6:	78a2      	ldrb	r2, [r4, #2]
 8004de8:	b942      	cbnz	r2, 8004dfc <error_signal+0x58>
 8004dea:	b13b      	cbz	r3, 8004dfc <error_signal+0x58>
      RGB_R_ON;                                                                       //Turn the LED on.
 8004dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004df0:	4809      	ldr	r0, [pc, #36]	; (8004e18 <error_signal+0x74>)
 8004df2:	f7fc fedf 	bl	8001bb4 <HAL_GPIO_WritePin>
      Error.error_led = 1;                                                                       //Set the LED flag to indicate that the LED is on.
 8004df6:	2301      	movs	r3, #1
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 8004df8:	70a3      	strb	r3, [r4, #2]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
      RGB_R_OFF;                                                                        //Turn the LED off.
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e02:	4805      	ldr	r0, [pc, #20]	; (8004e18 <error_signal+0x74>)
 8004e04:	f7fc fed6 	bl	8001bb4 <HAL_GPIO_WritePin>
      Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
 8004e08:	7863      	ldrb	r3, [r4, #1]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	7063      	strb	r3, [r4, #1]
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e7f2      	b.n	8004df8 <error_signal+0x54>
 8004e12:	bf00      	nop
 8004e14:	200010a0 	.word	0x200010a0
 8004e18:	40010c00 	.word	0x40010c00

08004e1c <flight_mode_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the flight mode LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void flight_mode_signal(void) {
 8004e1c:	b538      	push	{r3, r4, r5, lr}
  if (flight_mode_timer < millis()) {                                                      //If the error_timer value is smaller that the millis() function.
 8004e1e:	f002 fd59 	bl	80078d4 <millis>
 8004e22:	4c17      	ldr	r4, [pc, #92]	; (8004e80 <flight_mode_signal+0x64>)
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	4298      	cmp	r0, r3
 8004e28:	d91d      	bls.n	8004e66 <flight_mode_signal+0x4a>
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004e2a:	f002 fd53 	bl	80078d4 <millis>
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004e2e:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <flight_mode_signal+0x68>)
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004e30:	30fa      	adds	r0, #250	; 0xfa
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004e32:	785b      	ldrb	r3, [r3, #1]
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004e34:	6020      	str	r0, [r4, #0]
 8004e36:	4c14      	ldr	r4, [pc, #80]	; (8004e88 <flight_mode_signal+0x6c>)
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004e38:	b13b      	cbz	r3, 8004e4a <flight_mode_signal+0x2e>
 8004e3a:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <flight_mode_signal+0x70>)
 8004e3c:	7821      	ldrb	r1, [r4, #0]
 8004e3e:	7812      	ldrb	r2, [r2, #0]
 8004e40:	3203      	adds	r2, #3
 8004e42:	4291      	cmp	r1, r2
 8004e44:	bfc4      	itt	gt
 8004e46:	2200      	movgt	r2, #0
 8004e48:	7022      	strbgt	r2, [r4, #0]
    if (flight_mode_counter < f.ARMED && flight_mode_led == 0 && f.ARMED > 0) {    //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8004e4a:	7822      	ldrb	r2, [r4, #0]
 8004e4c:	4d10      	ldr	r5, [pc, #64]	; (8004e90 <flight_mode_signal+0x74>)
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d20a      	bcs.n	8004e68 <flight_mode_signal+0x4c>
 8004e52:	782a      	ldrb	r2, [r5, #0]
 8004e54:	b942      	cbnz	r2, 8004e68 <flight_mode_signal+0x4c>
 8004e56:	b13b      	cbz	r3, 8004e68 <flight_mode_signal+0x4c>
      RGB_R_ON;                                                                     //Turn the LED on.
 8004e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e5c:	480d      	ldr	r0, [pc, #52]	; (8004e94 <flight_mode_signal+0x78>)
 8004e5e:	f7fc fea9 	bl	8001bb4 <HAL_GPIO_WritePin>
      flight_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8004e62:	2301      	movs	r3, #1
    }
    else {                                                                                 //If the error flash sequence isn't finisched (error_counter < error) and the LED is on.
      RGB_R_OFF;                                                                      //Turn the LED off.
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8004e64:	702b      	strb	r3, [r5, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
      RGB_R_OFF;                                                                      //Turn the LED off.
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e6e:	4809      	ldr	r0, [pc, #36]	; (8004e94 <flight_mode_signal+0x78>)
 8004e70:	f7fc fea0 	bl	8001bb4 <HAL_GPIO_WritePin>
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8004e74:	7823      	ldrb	r3, [r4, #0]
 8004e76:	3301      	adds	r3, #1
 8004e78:	7023      	strb	r3, [r4, #0]
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e7f2      	b.n	8004e64 <flight_mode_signal+0x48>
 8004e7e:	bf00      	nop
 8004e80:	20000864 	.word	0x20000864
 8004e84:	20000a7c 	.word	0x20000a7c
 8004e88:	20000861 	.word	0x20000861
 8004e8c:	20000868 	.word	0x20000868
 8004e90:	20000860 	.word	0x20000860
 8004e94:	40010c00 	.word	0x40010c00

08004e98 <mixerInit>:
    { 4, 0, mixerQuadP },          // MULTITYPE_QUADP
    { 4, 0, mixerQuadX },          // MULTITYPE_QUADX
};

void mixerInit(void)
{
 8004e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9a:	2400      	movs	r4, #0
	int i;
    for (i = 0; i < 4; i++)
	  {
			#ifdef QUAD_X
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 8004e9c:	4f05      	ldr	r7, [pc, #20]	; (8004eb4 <mixerInit+0x1c>)
 8004e9e:	4e06      	ldr	r6, [pc, #24]	; (8004eb8 <mixerInit+0x20>)
 8004ea0:	193d      	adds	r5, r7, r4
 8004ea2:	1933      	adds	r3, r6, r4
 8004ea4:	3410      	adds	r4, #16
    for (i = 0; i < 4; i++)
 8004ea6:	2c40      	cmp	r4, #64	; 0x40
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 8004ea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eaa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for (i = 0; i < 4; i++)
 8004eae:	d1f7      	bne.n	8004ea0 <mixerInit+0x8>
			#endif
			#ifdef QUAD_P
      currentMixer[i] = mixers[QuadP].motor[i];   //0 = QuadP, 1 = QuadX
			#endif
		}
}
 8004eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	200004ac 	.word	0x200004ac
 8004eb8:	0800b2e0 	.word	0x0800b2e0

08004ebc <mixTable>:

void mixTable(void)
{
	uint8_t i = 0;
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 8004ebc:	4b35      	ldr	r3, [pc, #212]	; (8004f94 <mixTable+0xd8>)
{
 8004ebe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 8004ec2:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
{
 8004ec6:	b085      	sub	sp, #20
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 8004ec8:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
 8004ecc:	bfc4      	itt	gt
 8004ece:	f44f 62e1 	movgt.w	r2, #1800	; 0x708
 8004ed2:	f8a3 2056 	strhgt.w	r2, [r3, #86]	; 0x56
			for (i = 0; i < 4; i++){
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004ed6:	f9b3 9056 	ldrsh.w	r9, [r3, #86]	; 0x56
				
				if(motor[i]<0) motor[i] = 0;
 8004eda:	f04f 0a00 	mov.w	sl, #0
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004ede:	4648      	mov	r0, r9
 8004ee0:	f7fb feb0 	bl	8000c44 <__aeabi_i2f>
				if(motor[i] > 2000) motor[i] = 2000;
	
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004ee4:	4b2c      	ldr	r3, [pc, #176]	; (8004f98 <mixTable+0xdc>)
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004ee6:	4683      	mov	fp, r0
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004ee8:	785b      	ldrb	r3, [r3, #1]
				{
					motor[i] = 0;
					pid.output1[i] = 0;
 8004eea:	2700      	movs	r7, #0
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004eec:	9301      	str	r3, [sp, #4]
				if(motor[i] > 2000) motor[i] = 2000;
 8004eee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004ef2:	4d2a      	ldr	r5, [pc, #168]	; (8004f9c <mixTable+0xe0>)
 8004ef4:	4c2a      	ldr	r4, [pc, #168]	; (8004fa0 <mixTable+0xe4>)
 8004ef6:	4e2b      	ldr	r6, [pc, #172]	; (8004fa4 <mixTable+0xe8>)
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004ef8:	f1a5 087c 	sub.w	r8, r5, #124	; 0x7c
 8004efc:	6861      	ldr	r1, [r4, #4]
 8004efe:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
 8004f02:	9303      	str	r3, [sp, #12]
 8004f04:	f7fb fef2 	bl	8000cec <__aeabi_fmul>
 8004f08:	6821      	ldr	r1, [r4, #0]
 8004f0a:	9002      	str	r0, [sp, #8]
 8004f0c:	4658      	mov	r0, fp
 8004f0e:	f7fb feed 	bl	8000cec <__aeabi_fmul>
 8004f12:	9a02      	ldr	r2, [sp, #8]
 8004f14:	4601      	mov	r1, r0
 8004f16:	4610      	mov	r0, r2
 8004f18:	f7fb fde0 	bl	8000adc <__addsf3>
 8004f1c:	68a1      	ldr	r1, [r4, #8]
 8004f1e:	9002      	str	r0, [sp, #8]
 8004f20:	f8d8 00ec 	ldr.w	r0, [r8, #236]	; 0xec
 8004f24:	f7fb fee2 	bl	8000cec <__aeabi_fmul>
 8004f28:	9a02      	ldr	r2, [sp, #8]
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f7fb fdd5 	bl	8000adc <__addsf3>
 8004f32:	68e1      	ldr	r1, [r4, #12]
 8004f34:	9002      	str	r0, [sp, #8]
 8004f36:	f8d8 00f0 	ldr.w	r0, [r8, #240]	; 0xf0
 8004f3a:	f7fb fed7 	bl	8000cec <__aeabi_fmul>
 8004f3e:	9a02      	ldr	r2, [sp, #8]
 8004f40:	4601      	mov	r1, r0
 8004f42:	4610      	mov	r0, r2
 8004f44:	f7fb fdca 	bl	8000adc <__addsf3>
 8004f48:	f7fc f8ac 	bl	80010a4 <__aeabi_f2iz>
 8004f4c:	b200      	sxth	r0, r0
				if(motor[i]<0) motor[i] = 0;
 8004f4e:	2800      	cmp	r0, #0
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004f50:	bfac      	ite	ge
 8004f52:	8030      	strhge	r0, [r6, #0]
				if(motor[i]<0) motor[i] = 0;
 8004f54:	f8a6 a000 	strhlt.w	sl, [r6]
				if(motor[i] > 2000) motor[i] = 2000;
 8004f58:	f9b6 2000 	ldrsh.w	r2, [r6]
				if(motor[i]<0) motor[i] = 0;
 8004f5c:	9b03      	ldr	r3, [sp, #12]
				if(motor[i] > 2000) motor[i] = 2000;
 8004f5e:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8004f62:	bfc8      	it	gt
 8004f64:	8033      	strhgt	r3, [r6, #0]
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004f66:	f1b9 0fc7 	cmp.w	r9, #199	; 0xc7
 8004f6a:	dd01      	ble.n	8004f70 <mixTable+0xb4>
 8004f6c:	9a01      	ldr	r2, [sp, #4]
 8004f6e:	b932      	cbnz	r2, 8004f7e <mixTable+0xc2>
					motor[i] = 0;
 8004f70:	f8a6 a000 	strh.w	sl, [r6]
					pid.output1[i] = 0;
 8004f74:	662f      	str	r7, [r5, #96]	; 0x60
					pid.output2[i] = 0;
 8004f76:	66ef      	str	r7, [r5, #108]	; 0x6c
					pid.Iterm[i] = 0;
 8004f78:	602f      	str	r7, [r5, #0]
					pid.Iterm1[i] = 0;
 8004f7a:	60ef      	str	r7, [r5, #12]
					pid.Iterm2[i] = 0;
 8004f7c:	61af      	str	r7, [r5, #24]
			for (i = 0; i < 4; i++){
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <mixTable+0xec>)
 8004f80:	3410      	adds	r4, #16
 8004f82:	42a2      	cmp	r2, r4
 8004f84:	f106 0602 	add.w	r6, r6, #2
 8004f88:	f105 0504 	add.w	r5, r5, #4
 8004f8c:	d1b6      	bne.n	8004efc <mixTable+0x40>
				}
			}
}
 8004f8e:	b005      	add	sp, #20
 8004f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f94:	20000af4 	.word	0x20000af4
 8004f98:	20000a7c 	.word	0x20000a7c
 8004f9c:	200008f0 	.word	0x200008f0
 8004fa0:	200004ac 	.word	0x200004ac
 8004fa4:	2000086a 	.word	0x2000086a
 8004fa8:	200004ec 	.word	0x200004ec

08004fac <PIDControlInit>:

	pid->ki[ROLL]  = 5.0f;
	pid->ki[PITCH] = pid->ki[ROLL];
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5

	pid->kd[ROLL]  = 4.0f;
 8004fac:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004fb0:	64c2      	str	r2, [r0, #76]	; 0x4c
	pid->kd[PITCH] = pid->kd[ROLL];
 8004fb2:	6502      	str	r2, [r0, #80]	; 0x50
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
///////////////////////////////////	
	pid->kp1[ROLL] = 1.0f;
 8004fb4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	pid->ts = 0.004f;
 8004fb8:	4b31      	ldr	r3, [pc, #196]	; (8005080 <PIDControlInit+0xd4>)
	pid->kp1[ROLL] = 1.0f;
 8004fba:	6102      	str	r2, [r0, #16]
	pid->ts = 0.004f;
 8004fbc:	6003      	str	r3, [r0, #0]
	pid->kp[ROLL]  = 15.0f;
 8004fbe:	4b31      	ldr	r3, [pc, #196]	; (8005084 <PIDControlInit+0xd8>)
	pid->kp1[PITCH] = 1.0f;
 8004fc0:	6142      	str	r2, [r0, #20]
	pid->kp[ROLL]  = 15.0f;
 8004fc2:	6043      	str	r3, [r0, #4]
	pid->kp[PITCH] = pid->kp[ROLL];
 8004fc4:	6083      	str	r3, [r0, #8]
	pid->ki[ROLL]  = 5.0f;
 8004fc6:	4b30      	ldr	r3, [pc, #192]	; (8005088 <PIDControlInit+0xdc>)
	pid->kp1[YAW] = 1.0f;
 8004fc8:	6182      	str	r2, [r0, #24]
	pid->ki[ROLL]  = 5.0f;
 8004fca:	6283      	str	r3, [r0, #40]	; 0x28
	pid->ki[PITCH] = pid->ki[ROLL];
 8004fcc:	62c3      	str	r3, [r0, #44]	; 0x2c
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5
 8004fce:	6303      	str	r3, [r0, #48]	; 0x30

	pid->ki1[ROLL] = 2.0f;
	pid->ki1[PITCH] = 2.0f;
	pid->ki1[YAW] = 2.0f;
/////////////////////////////////
	pid->kp2[ROLL] = 5.0f;
 8004fd0:	61c3      	str	r3, [r0, #28]
	pid->kp2[PITCH] = 5.0f;
 8004fd2:	6203      	str	r3, [r0, #32]
	pid->kp2[YAW] = 5.0f;
 8004fd4:	6243      	str	r3, [r0, #36]	; 0x24

	pid->kd2[ROLL] = 3.0f;
	pid->kd2[PITCH] = 3.0f;
	pid->kd2[YAW] = 3.0f;
////////////////////////////////////////
  pid->i1_limit[ROLL] = 5.0f;
 8004fd6:	6643      	str	r3, [r0, #100]	; 0x64
	pid->i1_limit[PITCH] = 5.0f;
 8004fd8:	6683      	str	r3, [r0, #104]	; 0x68
	pid->i1_limit[YAW] = 10.0f;

  pid->i2_limit[ROLL] = 500.0f;
 8004fda:	4b2c      	ldr	r3, [pc, #176]	; (800508c <PIDControlInit+0xe0>)
	pid->ki1[ROLL] = 2.0f;
 8004fdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  pid->i2_limit[ROLL] = 500.0f;
 8004fe0:	6703      	str	r3, [r0, #112]	; 0x70
	pid->i2_limit[PITCH] = 500.0f;
 8004fe2:	6743      	str	r3, [r0, #116]	; 0x74
	pid->i2_limit[YAW] = 500.0f;
 8004fe4:	6783      	str	r3, [r0, #120]	; 0x78

	pid->Iterm[ROLL] = 0.0f ;
 8004fe6:	2300      	movs	r3, #0
{
 8004fe8:	b510      	push	{r4, lr}
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 8004fea:	4929      	ldr	r1, [pc, #164]	; (8005090 <PIDControlInit+0xe4>)
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 8004fec:	4c29      	ldr	r4, [pc, #164]	; (8005094 <PIDControlInit+0xe8>)
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 8004fee:	6541      	str	r1, [r0, #84]	; 0x54
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 8004ff0:	60c4      	str	r4, [r0, #12]
	pid->ki1[ROLL] = 2.0f;
 8004ff2:	6342      	str	r2, [r0, #52]	; 0x34
	pid->ki1[PITCH] = 2.0f;
 8004ff4:	6382      	str	r2, [r0, #56]	; 0x38
	pid->ki1[YAW] = 2.0f;
 8004ff6:	63c2      	str	r2, [r0, #60]	; 0x3c
  pid->ki2[ROLL] = 2.0f;
 8004ff8:	6402      	str	r2, [r0, #64]	; 0x40
	pid->ki2[PITCH] = 2.0f;
 8004ffa:	6442      	str	r2, [r0, #68]	; 0x44
	pid->ki2[YAW] = 2.0f;
 8004ffc:	6482      	str	r2, [r0, #72]	; 0x48
	pid->kd2[ROLL] = 3.0f;
 8004ffe:	6581      	str	r1, [r0, #88]	; 0x58
	pid->kd2[PITCH] = 3.0f;
 8005000:	65c1      	str	r1, [r0, #92]	; 0x5c
	pid->kd2[YAW] = 3.0f;
 8005002:	6601      	str	r1, [r0, #96]	; 0x60
	pid->i1_limit[YAW] = 10.0f;
 8005004:	66c4      	str	r4, [r0, #108]	; 0x6c
	pid->Iterm[ROLL] = 0.0f ;
 8005006:	67c3      	str	r3, [r0, #124]	; 0x7c
	pid->Iterm[PITCH] = 0.0f;
 8005008:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	pid->Iterm[YAW] = 0.0f;
 800500c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

	pid->Iterm1[ROLL] = 0.0f ;
 8005010:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	pid->Iterm1[PITCH] = 0.0f;
 8005014:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
	pid->Iterm1[YAW] = 0.0f;
 8005018:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90

	pid->Iterm2[ROLL] = 0.0f ;
 800501c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	pid->Iterm2[PITCH] = 0.0f;
 8005020:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	pid->Iterm2[YAW] = 0.0f;
 8005024:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c

	pid->dInput[ROLL] = 0.0f ;
 8005028:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	pid->dInput[PITCH] = 0.0f;
 800502c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	pid->dInput[YAW] = 0.0f;
 8005030:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8

	pid->error[ROLL] = 0.0f ;
 8005034:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
	pid->error[PITCH] = 0.0f;
 8005038:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	pid->error[YAW] = 0.0f;
 800503c:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	pid->pre_error[ROLL] = 0.0f ;
 8005040:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	pid->pre_error[PITCH] = 0.0f;
 8005044:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	pid->pre_error[YAW] = 0.0f;
 8005048:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0

	pid->pre_deriv[ROLL] = 0.0f ;
 800504c:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	pid->pre_deriv[PITCH] = 0.0f;
 8005050:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	pid->pre_deriv[YAW] = 0.0f;
 8005054:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc

	pid->lastInput[ROLL] = 0.0f ;
 8005058:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	pid->lastInput[PITCH] = 0.0f;
 800505c:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	pid->lastInput[YAW] = 0.0f;
 8005060:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	pid->output1[ROLL] = 0.0f ;
 8005064:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	pid->output1[PITCH] = 0.0f;
 8005068:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
	pid->output1[YAW] = 0.0f;
 800506c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

	pid->output2[ROLL] = 0.0f ;
 8005070:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
	pid->output2[PITCH] = 0.0f;
 8005074:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
	pid->output2[YAW] = 0.0f;
 8005078:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 800507c:	bd10      	pop	{r4, pc}
 800507e:	bf00      	nop
 8005080:	3b83126f 	.word	0x3b83126f
 8005084:	41700000 	.word	0x41700000
 8005088:	40a00000 	.word	0x40a00000
 800508c:	43fa0000 	.word	0x43fa0000
 8005090:	40400000 	.word	0x40400000
 8005094:	41200000 	.word	0x41200000

08005098 <Control>:
}

void Control(void)
{
 8005098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int axis;
	float error, deriv;
	dt_recip = 1/pid.ts;
 800509c:	4cba      	ldr	r4, [pc, #744]	; (8005388 <Control+0x2f0>)
 800509e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80050a2:	6826      	ldr	r6, [r4, #0]
		if(pid.output2[axis] < -OUT_MAX) pid.output2[axis] = -OUT_MAX;
		}
		#endif
		
#ifdef PID_NORMAL
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 80050a4:	f8df b304 	ldr.w	fp, [pc, #772]	; 80053ac <Control+0x314>
	dt_recip = 1/pid.ts;
 80050a8:	4631      	mov	r1, r6
 80050aa:	f7fb fed3 	bl	8000e54 <__aeabi_fdiv>
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 80050ae:	4db7      	ldr	r5, [pc, #732]	; (800538c <Control+0x2f4>)
	dt_recip = 1/pid.ts;
 80050b0:	4bb7      	ldr	r3, [pc, #732]	; (8005390 <Control+0x2f8>)
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 80050b2:	f8db 9078 	ldr.w	r9, [fp, #120]	; 0x78
	dt_recip = 1/pid.ts;
 80050b6:	6018      	str	r0, [r3, #0]
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 80050b8:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
 80050bc:	f7fb fdc2 	bl	8000c44 <__aeabi_i2f>
 80050c0:	4649      	mov	r1, r9
 80050c2:	f7fb fd09 	bl	8000ad8 <__aeabi_fsub>
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 80050c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 80050c8:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
 80050cc:	4607      	mov	r7, r0
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 80050ce:	f7fb fe0d 	bl	8000cec <__aeabi_fmul>
 80050d2:	4631      	mov	r1, r6
 80050d4:	f7fb fe0a 	bl	8000cec <__aeabi_fmul>
 80050d8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80050da:	f7fb fcff 	bl	8000adc <__addsf3>
	  if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 80050de:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8005398 <Control+0x300>
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 80050e2:	4682      	mov	sl, r0
	  if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 80050e4:	4641      	mov	r1, r8
 80050e6:	f7fb ffbd 	bl	8001064 <__aeabi_fcmpgt>
 80050ea:	f8cd b000 	str.w	fp, [sp]
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f000 808d 	beq.w	800520e <Control+0x176>
 80050f4:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
	  pid.dInput[ROLL] = (imu.Roll - pid.lastInput[ROLL])  / pid.ts;
 80050f8:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 80050fc:	4648      	mov	r0, r9
 80050fe:	f7fb fceb 	bl	8000ad8 <__aeabi_fsub>
 8005102:	4631      	mov	r1, r6
 8005104:	f7fb fea6 	bl	8000e54 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8005108:	6861      	ldr	r1, [r4, #4]
	  pid.dInput[ROLL] = (imu.Roll - pid.lastInput[ROLL])  / pid.ts;
 800510a:	4682      	mov	sl, r0
 800510c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8005110:	4638      	mov	r0, r7
 8005112:	f7fb fdeb 	bl	8000cec <__aeabi_fmul>
 8005116:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005118:	f7fb fce0 	bl	8000adc <__addsf3>
 800511c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800511e:	4607      	mov	r7, r0
 8005120:	4650      	mov	r0, sl
 8005122:	f7fb fde3 	bl	8000cec <__aeabi_fmul>
 8005126:	4601      	mov	r1, r0
 8005128:	4638      	mov	r0, r7
 800512a:	f7fb fcd5 	bl	8000ad8 <__aeabi_fsub>

	  if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 800512e:	4f99      	ldr	r7, [pc, #612]	; (8005394 <Control+0x2fc>)
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8005130:	4682      	mov	sl, r0
	  if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 8005132:	4639      	mov	r1, r7
 8005134:	f7fb ff96 	bl	8001064 <__aeabi_fcmpgt>
 8005138:	2800      	cmp	r0, #0
 800513a:	d075      	beq.n	8005228 <Control+0x190>
 800513c:	f8c4 70e8 	str.w	r7, [r4, #232]	; 0xe8
	  pid.lastInput[ROLL] = imu.Roll;

/////////////////////////////////////////////////////////////////////////////////////////////////

	  /*Compute all the working error variables*/
	  pid.error[PITCH] = RC.rcCommand[PITCH] - imu.Pitch;
 8005140:	9b00      	ldr	r3, [sp, #0]
	  pid.lastInput[ROLL] = imu.Roll;
 8005142:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	  pid.error[PITCH] = RC.rcCommand[PITCH] - imu.Pitch;
 8005146:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800514a:	f9b5 0052 	ldrsh.w	r0, [r5, #82]	; 0x52
 800514e:	f7fb fd79 	bl	8000c44 <__aeabi_i2f>
 8005152:	4649      	mov	r1, r9
 8005154:	f7fb fcc0 	bl	8000ad8 <__aeabi_fsub>
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 8005158:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	  pid.error[PITCH] = RC.rcCommand[PITCH] - imu.Pitch;
 800515a:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
 800515e:	4682      	mov	sl, r0
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 8005160:	f7fb fdc4 	bl	8000cec <__aeabi_fmul>
 8005164:	4631      	mov	r1, r6
 8005166:	f7fb fdc1 	bl	8000cec <__aeabi_fmul>
 800516a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800516e:	f7fb fcb5 	bl	8000adc <__addsf3>
	  if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 8005172:	4989      	ldr	r1, [pc, #548]	; (8005398 <Control+0x300>)
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 8005174:	4683      	mov	fp, r0
	  if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 8005176:	f7fb ff75 	bl	8001064 <__aeabi_fcmpgt>
 800517a:	2800      	cmp	r0, #0
 800517c:	d061      	beq.n	8005242 <Control+0x1aa>
 800517e:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
	  pid.dInput[PITCH] = (imu.Pitch - pid.lastInput[PITCH]) / pid.ts;
 8005182:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
 8005186:	4648      	mov	r0, r9
 8005188:	f7fb fca6 	bl	8000ad8 <__aeabi_fsub>
 800518c:	4631      	mov	r1, r6
 800518e:	f7fb fe61 	bl	8000e54 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 8005192:	68a1      	ldr	r1, [r4, #8]
	  pid.dInput[PITCH] = (imu.Pitch - pid.lastInput[PITCH]) / pid.ts;
 8005194:	4683      	mov	fp, r0
 8005196:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 800519a:	4650      	mov	r0, sl
 800519c:	f7fb fda6 	bl	8000cec <__aeabi_fmul>
 80051a0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80051a4:	f7fb fc9a 	bl	8000adc <__addsf3>
 80051a8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80051aa:	4682      	mov	sl, r0
 80051ac:	4658      	mov	r0, fp
 80051ae:	f7fb fd9d 	bl	8000cec <__aeabi_fmul>
 80051b2:	4601      	mov	r1, r0
 80051b4:	4650      	mov	r0, sl
 80051b6:	f7fb fc8f 	bl	8000ad8 <__aeabi_fsub>

	  if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 80051ba:	4976      	ldr	r1, [pc, #472]	; (8005394 <Control+0x2fc>)
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 80051bc:	4682      	mov	sl, r0
	  if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 80051be:	f7fb ff51 	bl	8001064 <__aeabi_fcmpgt>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d04b      	beq.n	800525e <Control+0x1c6>
 80051c6:	f8c4 70ec 	str.w	r7, [r4, #236]	; 0xec
	  pid.lastInput[PITCH] = imu.Pitch;

//////////////////////////////////////////////////////////////////////////////////////////////////

	  /*Compute all the working error variables*/
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 80051ca:	9b00      	ldr	r3, [sp, #0]
	  pid.lastInput[PITCH] = imu.Pitch;
 80051cc:	f8c4 90d4 	str.w	r9, [r4, #212]	; 0xd4
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 80051d0:	f8d3 9084 	ldr.w	r9, [r3, #132]	; 0x84
 80051d4:	f9b5 0054 	ldrsh.w	r0, [r5, #84]	; 0x54
 80051d8:	f7fb fd34 	bl	8000c44 <__aeabi_i2f>
 80051dc:	4649      	mov	r1, r9
 80051de:	f7fb fc7b 	bl	8000ad8 <__aeabi_fsub>
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 80051e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 80051e4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 80051e8:	4682      	mov	sl, r0
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 80051ea:	f7fb fd7f 	bl	8000cec <__aeabi_fmul>
 80051ee:	4631      	mov	r1, r6
 80051f0:	f7fb fd7c 	bl	8000cec <__aeabi_fmul>
 80051f4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80051f8:	f7fb fc70 	bl	8000adc <__addsf3>
	  if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 80051fc:	4966      	ldr	r1, [pc, #408]	; (8005398 <Control+0x300>)
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 80051fe:	4683      	mov	fp, r0
	  if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 8005200:	f7fb ff30 	bl	8001064 <__aeabi_fcmpgt>
 8005204:	2800      	cmp	r0, #0
 8005206:	d037      	beq.n	8005278 <Control+0x1e0>
	  else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 8005208:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
 800520c:	e03e      	b.n	800528c <Control+0x1f4>
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 800520e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800539c <Control+0x304>
 8005212:	4650      	mov	r0, sl
 8005214:	4659      	mov	r1, fp
 8005216:	f7fb ff07 	bl	8001028 <__aeabi_fcmplt>
 800521a:	b910      	cbnz	r0, 8005222 <Control+0x18a>
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 800521c:	f8c4 a07c 	str.w	sl, [r4, #124]	; 0x7c
 8005220:	e76a      	b.n	80050f8 <Control+0x60>
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 8005222:	f8c4 b07c 	str.w	fp, [r4, #124]	; 0x7c
 8005226:	e767      	b.n	80050f8 <Control+0x60>
	  else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 8005228:	f8df b17c 	ldr.w	fp, [pc, #380]	; 80053a8 <Control+0x310>
 800522c:	4650      	mov	r0, sl
 800522e:	4659      	mov	r1, fp
 8005230:	f7fb fefa 	bl	8001028 <__aeabi_fcmplt>
 8005234:	b910      	cbnz	r0, 800523c <Control+0x1a4>
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8005236:	f8c4 a0e8 	str.w	sl, [r4, #232]	; 0xe8
 800523a:	e781      	b.n	8005140 <Control+0xa8>
	  else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 800523c:	f8c4 b0e8 	str.w	fp, [r4, #232]	; 0xe8
 8005240:	e77e      	b.n	8005140 <Control+0xa8>
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 8005242:	4b56      	ldr	r3, [pc, #344]	; (800539c <Control+0x304>)
 8005244:	4658      	mov	r0, fp
 8005246:	4619      	mov	r1, r3
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	f7fb feed 	bl	8001028 <__aeabi_fcmplt>
 800524e:	9b01      	ldr	r3, [sp, #4]
 8005250:	b910      	cbnz	r0, 8005258 <Control+0x1c0>
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 8005252:	f8c4 b080 	str.w	fp, [r4, #128]	; 0x80
 8005256:	e794      	b.n	8005182 <Control+0xea>
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 8005258:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800525c:	e791      	b.n	8005182 <Control+0xea>
	  else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 800525e:	f8df b148 	ldr.w	fp, [pc, #328]	; 80053a8 <Control+0x310>
 8005262:	4650      	mov	r0, sl
 8005264:	4659      	mov	r1, fp
 8005266:	f7fb fedf 	bl	8001028 <__aeabi_fcmplt>
 800526a:	b910      	cbnz	r0, 8005272 <Control+0x1da>
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 800526c:	f8c4 a0ec 	str.w	sl, [r4, #236]	; 0xec
 8005270:	e7ab      	b.n	80051ca <Control+0x132>
	  else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 8005272:	f8c4 b0ec 	str.w	fp, [r4, #236]	; 0xec
 8005276:	e7a8      	b.n	80051ca <Control+0x132>
	  else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 8005278:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800539c <Control+0x304>
 800527c:	4658      	mov	r0, fp
 800527e:	4641      	mov	r1, r8
 8005280:	f7fb fed2 	bl	8001028 <__aeabi_fcmplt>
 8005284:	2800      	cmp	r0, #0
 8005286:	d1bf      	bne.n	8005208 <Control+0x170>
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 8005288:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
	  pid.dInput[YAW] = (imu.gyroYaw - pid.lastInput[YAW]) / pid.ts; //imu.Yaw
 800528c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 8005290:	4648      	mov	r0, r9
 8005292:	f7fb fc21 	bl	8000ad8 <__aeabi_fsub>
 8005296:	4631      	mov	r1, r6
 8005298:	f7fb fddc 	bl	8000e54 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 800529c:	68e1      	ldr	r1, [r4, #12]
	  pid.dInput[YAW] = (imu.gyroYaw - pid.lastInput[YAW]) / pid.ts; //imu.Yaw
 800529e:	4606      	mov	r6, r0
 80052a0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 80052a4:	4650      	mov	r0, sl
 80052a6:	f7fb fd21 	bl	8000cec <__aeabi_fmul>
 80052aa:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80052ae:	f7fb fc15 	bl	8000adc <__addsf3>
 80052b2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80052b4:	4680      	mov	r8, r0
 80052b6:	4630      	mov	r0, r6
 80052b8:	f7fb fd18 	bl	8000cec <__aeabi_fmul>
 80052bc:	4601      	mov	r1, r0
 80052be:	4640      	mov	r0, r8
 80052c0:	f7fb fc0a 	bl	8000ad8 <__aeabi_fsub>

	  if(pid.output2[YAW] > OUT_MAX) pid.output2[YAW] = OUT_MAX;
 80052c4:	4933      	ldr	r1, [pc, #204]	; (8005394 <Control+0x2fc>)
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 80052c6:	4680      	mov	r8, r0
	  if(pid.output2[YAW] > OUT_MAX) pid.output2[YAW] = OUT_MAX;
 80052c8:	f7fb fecc 	bl	8001064 <__aeabi_fcmpgt>
 80052cc:	b350      	cbz	r0, 8005324 <Control+0x28c>
 80052ce:	f8c4 70f0 	str.w	r7, [r4, #240]	; 0xf0
	  else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;

	  /*Remember some variables for next time*/
	  pid.lastInput[YAW] = imu.gyroYaw;//imu.Yaw
		#endif
	  if(f.Tuning_MODE == 1){
 80052d2:	4e33      	ldr	r6, [pc, #204]	; (80053a0 <Control+0x308>)
	  pid.lastInput[YAW] = imu.gyroYaw;//imu.Yaw
 80052d4:	f8c4 90d8 	str.w	r9, [r4, #216]	; 0xd8
	  if(f.Tuning_MODE == 1){
 80052d8:	78b7      	ldrb	r7, [r6, #2]
 80052da:	2f01      	cmp	r7, #1
 80052dc:	f040 8185 	bne.w	80055ea <Control+0x552>
	    RGB_G_TOGGLE;
 80052e0:	4830      	ldr	r0, [pc, #192]	; (80053a4 <Control+0x30c>)
 80052e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052e6:	f7fc fc6a 	bl	8001bbe <HAL_GPIO_TogglePin>
	    f.Write_MODE = 1;
	    if(RC.rcCommand[ROLL]  >  10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 80052ea:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
	    f.Write_MODE = 1;
 80052ee:	70f7      	strb	r7, [r6, #3]
	    if(RC.rcCommand[ROLL]  >  10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 80052f0:	280a      	cmp	r0, #10
 80052f2:	dd23      	ble.n	800533c <Control+0x2a4>
	    if(RC.rcCommand[ROLL]  < -10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 80052f4:	f7fb fca6 	bl	8000c44 <__aeabi_i2f>
 80052f8:	f7fb f896 	bl	8000428 <__aeabi_f2d>
 80052fc:	a320      	add	r3, pc, #128	; (adr r3, 8005380 <Control+0x2e8>)
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f7fb f8e5 	bl	80004d0 <__aeabi_dmul>
 8005306:	4680      	mov	r8, r0
 8005308:	6860      	ldr	r0, [r4, #4]
 800530a:	4689      	mov	r9, r1
 800530c:	f7fb f88c 	bl	8000428 <__aeabi_f2d>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4640      	mov	r0, r8
 8005316:	4649      	mov	r1, r9
 8005318:	f7fa ff28 	bl	800016c <__adddf3>
 800531c:	f7fb fb88 	bl	8000a30 <__aeabi_d2f>
 8005320:	6060      	str	r0, [r4, #4]
 8005322:	e00e      	b.n	8005342 <Control+0x2aa>
	  else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;
 8005324:	4e20      	ldr	r6, [pc, #128]	; (80053a8 <Control+0x310>)
 8005326:	4640      	mov	r0, r8
 8005328:	4631      	mov	r1, r6
 800532a:	f7fb fe7d 	bl	8001028 <__aeabi_fcmplt>
 800532e:	b910      	cbnz	r0, 8005336 <Control+0x29e>
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 8005330:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
 8005334:	e7cd      	b.n	80052d2 <Control+0x23a>
	  else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;
 8005336:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
 800533a:	e7ca      	b.n	80052d2 <Control+0x23a>
	    if(RC.rcCommand[ROLL]  < -10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 800533c:	f110 0f0a 	cmn.w	r0, #10
 8005340:	dbd8      	blt.n	80052f4 <Control+0x25c>
	    if(RC.rcCommand[PITCH] >  10) pid.ki[ROLL] += (float)RC.rcCommand[PITCH] * 0.0005;
 8005342:	f9b5 0052 	ldrsh.w	r0, [r5, #82]	; 0x52
 8005346:	280a      	cmp	r0, #10
 8005348:	dd32      	ble.n	80053b0 <Control+0x318>
	    if(RC.rcCommand[PITCH] < -10) pid.ki[ROLL] += (float)RC.rcCommand[PITCH] * 0.0005;
 800534a:	f7fb fc7b 	bl	8000c44 <__aeabi_i2f>
 800534e:	f7fb f86b 	bl	8000428 <__aeabi_f2d>
 8005352:	a30b      	add	r3, pc, #44	; (adr r3, 8005380 <Control+0x2e8>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f7fb f8ba 	bl	80004d0 <__aeabi_dmul>
 800535c:	4680      	mov	r8, r0
 800535e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005360:	4689      	mov	r9, r1
 8005362:	f7fb f861 	bl	8000428 <__aeabi_f2d>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4640      	mov	r0, r8
 800536c:	4649      	mov	r1, r9
 800536e:	f7fa fefd 	bl	800016c <__adddf3>
 8005372:	f7fb fb5d 	bl	8000a30 <__aeabi_d2f>
 8005376:	62a0      	str	r0, [r4, #40]	; 0x28
 8005378:	e01d      	b.n	80053b6 <Control+0x31e>
 800537a:	bf00      	nop
 800537c:	f3af 8000 	nop.w
 8005380:	d2f1a9fc 	.word	0xd2f1a9fc
 8005384:	3f40624d 	.word	0x3f40624d
 8005388:	20000874 	.word	0x20000874
 800538c:	20000af4 	.word	0x20000af4
 8005390:	20000968 	.word	0x20000968
 8005394:	44480000 	.word	0x44480000
 8005398:	43480000 	.word	0x43480000
 800539c:	c3480000 	.word	0xc3480000
 80053a0:	20000a7c 	.word	0x20000a7c
 80053a4:	40010c00 	.word	0x40010c00
 80053a8:	c4480000 	.word	0xc4480000
 80053ac:	20000cf8 	.word	0x20000cf8
 80053b0:	f110 0f0a 	cmn.w	r0, #10
 80053b4:	dbc9      	blt.n	800534a <Control+0x2b2>
	    if(RC.rcCommand[YAW]   >  10) pid.kd[ROLL] += (float)RC.rcCommand[YAW]   * 0.00005;
 80053b6:	f9b5 0054 	ldrsh.w	r0, [r5, #84]	; 0x54
 80053ba:	280a      	cmp	r0, #10
 80053bc:	dd17      	ble.n	80053ee <Control+0x356>
	    if(RC.rcCommand[YAW]   < -10) pid.kd[ROLL] += (float)RC.rcCommand[YAW]   * 0.00005;
 80053be:	f7fb fc41 	bl	8000c44 <__aeabi_i2f>
 80053c2:	f7fb f831 	bl	8000428 <__aeabi_f2d>
 80053c6:	a3c0      	add	r3, pc, #768	; (adr r3, 80056c8 <Control+0x630>)
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f7fb f880 	bl	80004d0 <__aeabi_dmul>
 80053d0:	4680      	mov	r8, r0
 80053d2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80053d4:	4689      	mov	r9, r1
 80053d6:	f7fb f827 	bl	8000428 <__aeabi_f2d>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4640      	mov	r0, r8
 80053e0:	4649      	mov	r1, r9
 80053e2:	f7fa fec3 	bl	800016c <__adddf3>
 80053e6:	f7fb fb23 	bl	8000a30 <__aeabi_d2f>
 80053ea:	64e0      	str	r0, [r4, #76]	; 0x4c
 80053ec:	e002      	b.n	80053f4 <Control+0x35c>
 80053ee:	f110 0f0a 	cmn.w	r0, #10
 80053f2:	dbe4      	blt.n	80053be <Control+0x326>

	    pid.kp[PITCH] = pid.kp[ROLL];
 80053f4:	6863      	ldr	r3, [r4, #4]
 80053f6:	60a3      	str	r3, [r4, #8]
	    pid.ki[PITCH] = pid.ki[ROLL];
 80053f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80053fa:	62e3      	str	r3, [r4, #44]	; 0x2c
	    pid.kd[PITCH] = pid.kd[ROLL];
 80053fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80053fe:	6523      	str	r3, [r4, #80]	; 0x50
      if(RC.rcCommand[PITCH] >  10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
      if(RC.rcCommand[PITCH] < -10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
      if(RC.rcCommand[YAW]   >  10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
      if(RC.rcCommand[YAW]   < -10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
    }
	  if(f.Tuning_MODE == 0 && f.Write_MODE == 1){
 8005400:	78b5      	ldrb	r5, [r6, #2]
 8005402:	2d00      	cmp	r5, #0
 8005404:	f040 80ee 	bne.w	80055e4 <Control+0x54c>
 8005408:	78f7      	ldrb	r7, [r6, #3]
 800540a:	2f01      	cmp	r7, #1
 800540c:	f040 80ea 	bne.w	80055e4 <Control+0x54c>
	    f.Write_MODE = 0;
      RGB_G_OFF;
 8005410:	463a      	mov	r2, r7
 8005412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005416:	48b0      	ldr	r0, [pc, #704]	; (80056d8 <Control+0x640>)
	    f.Write_MODE = 0;
 8005418:	70f5      	strb	r5, [r6, #3]
      RGB_G_OFF;
 800541a:	f7fc fbcb 	bl	8001bb4 <HAL_GPIO_WritePin>
	    RGB_R_OFF;
 800541e:	463a      	mov	r2, r7
 8005420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005424:	48ac      	ldr	r0, [pc, #688]	; (80056d8 <Control+0x640>)
 8005426:	f7fc fbc5 	bl	8001bb4 <HAL_GPIO_WritePin>
	    pid.kp[ROLL] = ROUND(pid.kp[ROLL], 1);
 800542a:	6860      	ldr	r0, [r4, #4]
 800542c:	f7fa fffc 	bl	8000428 <__aeabi_f2d>
 8005430:	2200      	movs	r2, #0
 8005432:	4baa      	ldr	r3, [pc, #680]	; (80056dc <Control+0x644>)
 8005434:	f7fb f84c 	bl	80004d0 <__aeabi_dmul>
 8005438:	2200      	movs	r2, #0
 800543a:	4ba9      	ldr	r3, [pc, #676]	; (80056e0 <Control+0x648>)
 800543c:	f7fa fe96 	bl	800016c <__adddf3>
 8005440:	f003 fd96 	bl	8008f70 <floor>
 8005444:	2200      	movs	r2, #0
 8005446:	4ba5      	ldr	r3, [pc, #660]	; (80056dc <Control+0x644>)
 8005448:	f7fb f96c 	bl	8000724 <__aeabi_ddiv>
 800544c:	f7fb faf0 	bl	8000a30 <__aeabi_d2f>
 8005450:	6060      	str	r0, [r4, #4]
	    pid.ki[ROLL] = ROUND(pid.ki[ROLL], 1);
 8005452:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005454:	f7fa ffe8 	bl	8000428 <__aeabi_f2d>
 8005458:	2200      	movs	r2, #0
 800545a:	4ba0      	ldr	r3, [pc, #640]	; (80056dc <Control+0x644>)
 800545c:	f7fb f838 	bl	80004d0 <__aeabi_dmul>
 8005460:	2200      	movs	r2, #0
 8005462:	4b9f      	ldr	r3, [pc, #636]	; (80056e0 <Control+0x648>)
 8005464:	f7fa fe82 	bl	800016c <__adddf3>
 8005468:	f003 fd82 	bl	8008f70 <floor>
 800546c:	2200      	movs	r2, #0
 800546e:	4b9b      	ldr	r3, [pc, #620]	; (80056dc <Control+0x644>)
 8005470:	f7fb f958 	bl	8000724 <__aeabi_ddiv>
 8005474:	f7fb fadc 	bl	8000a30 <__aeabi_d2f>
 8005478:	62a0      	str	r0, [r4, #40]	; 0x28
	    pid.kd[ROLL] = ROUND(pid.kd[ROLL], 1);
 800547a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800547c:	f7fa ffd4 	bl	8000428 <__aeabi_f2d>
 8005480:	2200      	movs	r2, #0
 8005482:	4b96      	ldr	r3, [pc, #600]	; (80056dc <Control+0x644>)
 8005484:	f7fb f824 	bl	80004d0 <__aeabi_dmul>
 8005488:	2200      	movs	r2, #0
 800548a:	4b95      	ldr	r3, [pc, #596]	; (80056e0 <Control+0x648>)
 800548c:	f7fa fe6e 	bl	800016c <__adddf3>
 8005490:	f003 fd6e 	bl	8008f70 <floor>
 8005494:	2200      	movs	r2, #0
 8005496:	4b91      	ldr	r3, [pc, #580]	; (80056dc <Control+0x644>)
 8005498:	f7fb f944 	bl	8000724 <__aeabi_ddiv>
 800549c:	f7fb fac8 	bl	8000a30 <__aeabi_d2f>
 80054a0:	64e0      	str	r0, [r4, #76]	; 0x4c
      pid.kp[PITCH] = ROUND(pid.kp[PITCH], 1);
 80054a2:	68a0      	ldr	r0, [r4, #8]
 80054a4:	f7fa ffc0 	bl	8000428 <__aeabi_f2d>
 80054a8:	2200      	movs	r2, #0
 80054aa:	4b8c      	ldr	r3, [pc, #560]	; (80056dc <Control+0x644>)
 80054ac:	f7fb f810 	bl	80004d0 <__aeabi_dmul>
 80054b0:	2200      	movs	r2, #0
 80054b2:	4b8b      	ldr	r3, [pc, #556]	; (80056e0 <Control+0x648>)
 80054b4:	f7fa fe5a 	bl	800016c <__adddf3>
 80054b8:	f003 fd5a 	bl	8008f70 <floor>
 80054bc:	2200      	movs	r2, #0
 80054be:	4b87      	ldr	r3, [pc, #540]	; (80056dc <Control+0x644>)
 80054c0:	f7fb f930 	bl	8000724 <__aeabi_ddiv>
 80054c4:	f7fb fab4 	bl	8000a30 <__aeabi_d2f>
 80054c8:	60a0      	str	r0, [r4, #8]
      pid.ki[PITCH] = ROUND(pid.ki[PITCH], 1);
 80054ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80054cc:	f7fa ffac 	bl	8000428 <__aeabi_f2d>
 80054d0:	2200      	movs	r2, #0
 80054d2:	4b82      	ldr	r3, [pc, #520]	; (80056dc <Control+0x644>)
 80054d4:	f7fa fffc 	bl	80004d0 <__aeabi_dmul>
 80054d8:	2200      	movs	r2, #0
 80054da:	4b81      	ldr	r3, [pc, #516]	; (80056e0 <Control+0x648>)
 80054dc:	f7fa fe46 	bl	800016c <__adddf3>
 80054e0:	f003 fd46 	bl	8008f70 <floor>
 80054e4:	2200      	movs	r2, #0
 80054e6:	4b7d      	ldr	r3, [pc, #500]	; (80056dc <Control+0x644>)
 80054e8:	f7fb f91c 	bl	8000724 <__aeabi_ddiv>
 80054ec:	f7fb faa0 	bl	8000a30 <__aeabi_d2f>
 80054f0:	62e0      	str	r0, [r4, #44]	; 0x2c
      pid.kd[PITCH] = ROUND(pid.kd[PITCH], 1);
 80054f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80054f4:	f7fa ff98 	bl	8000428 <__aeabi_f2d>
 80054f8:	2200      	movs	r2, #0
 80054fa:	4b78      	ldr	r3, [pc, #480]	; (80056dc <Control+0x644>)
 80054fc:	f7fa ffe8 	bl	80004d0 <__aeabi_dmul>
 8005500:	2200      	movs	r2, #0
 8005502:	4b77      	ldr	r3, [pc, #476]	; (80056e0 <Control+0x648>)
 8005504:	f7fa fe32 	bl	800016c <__adddf3>
 8005508:	f003 fd32 	bl	8008f70 <floor>
 800550c:	2200      	movs	r2, #0
 800550e:	4b73      	ldr	r3, [pc, #460]	; (80056dc <Control+0x644>)
 8005510:	f7fb f908 	bl	8000724 <__aeabi_ddiv>
 8005514:	f7fb fa8c 	bl	8000a30 <__aeabi_d2f>
 8005518:	6520      	str	r0, [r4, #80]	; 0x50
	    pid.kp[YAW] = ROUND(pid.kp[YAW], 1);
 800551a:	68e0      	ldr	r0, [r4, #12]
 800551c:	f7fa ff84 	bl	8000428 <__aeabi_f2d>
 8005520:	2200      	movs	r2, #0
 8005522:	4b6e      	ldr	r3, [pc, #440]	; (80056dc <Control+0x644>)
 8005524:	f7fa ffd4 	bl	80004d0 <__aeabi_dmul>
 8005528:	2200      	movs	r2, #0
 800552a:	4b6d      	ldr	r3, [pc, #436]	; (80056e0 <Control+0x648>)
 800552c:	f7fa fe1e 	bl	800016c <__adddf3>
 8005530:	f003 fd1e 	bl	8008f70 <floor>
 8005534:	2200      	movs	r2, #0
 8005536:	4b69      	ldr	r3, [pc, #420]	; (80056dc <Control+0x644>)
 8005538:	f7fb f8f4 	bl	8000724 <__aeabi_ddiv>
 800553c:	f7fb fa78 	bl	8000a30 <__aeabi_d2f>
 8005540:	60e0      	str	r0, [r4, #12]
	    pid.ki[YAW] = ROUND(pid.ki[YAW], 1);
 8005542:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005544:	f7fa ff70 	bl	8000428 <__aeabi_f2d>
 8005548:	2200      	movs	r2, #0
 800554a:	4b64      	ldr	r3, [pc, #400]	; (80056dc <Control+0x644>)
 800554c:	f7fa ffc0 	bl	80004d0 <__aeabi_dmul>
 8005550:	2200      	movs	r2, #0
 8005552:	4b63      	ldr	r3, [pc, #396]	; (80056e0 <Control+0x648>)
 8005554:	f7fa fe0a 	bl	800016c <__adddf3>
 8005558:	f003 fd0a 	bl	8008f70 <floor>
 800555c:	2200      	movs	r2, #0
 800555e:	4b5f      	ldr	r3, [pc, #380]	; (80056dc <Control+0x644>)
 8005560:	f7fb f8e0 	bl	8000724 <__aeabi_ddiv>
 8005564:	f7fb fa64 	bl	8000a30 <__aeabi_d2f>
 8005568:	6320      	str	r0, [r4, #48]	; 0x30
	    pid.kd[YAW] = ROUND(pid.kd[YAW], 1);
 800556a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800556c:	f7fa ff5c 	bl	8000428 <__aeabi_f2d>
 8005570:	2200      	movs	r2, #0
 8005572:	4b5a      	ldr	r3, [pc, #360]	; (80056dc <Control+0x644>)
 8005574:	f7fa ffac 	bl	80004d0 <__aeabi_dmul>
 8005578:	2200      	movs	r2, #0
 800557a:	4b59      	ldr	r3, [pc, #356]	; (80056e0 <Control+0x648>)
 800557c:	f7fa fdf6 	bl	800016c <__adddf3>
 8005580:	f003 fcf6 	bl	8008f70 <floor>
 8005584:	2200      	movs	r2, #0
 8005586:	4b55      	ldr	r3, [pc, #340]	; (80056dc <Control+0x644>)
 8005588:	f7fb f8cc 	bl	8000724 <__aeabi_ddiv>
 800558c:	f7fb fa50 	bl	8000a30 <__aeabi_d2f>
 8005590:	4e54      	ldr	r6, [pc, #336]	; (80056e4 <Control+0x64c>)
 8005592:	6560      	str	r0, [r4, #84]	; 0x54

      for(int i = 0; i < 3; i++){
        writeFloat( 0+(4*i), pid.kp[i]);
 8005594:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8005598:	4628      	mov	r0, r5
 800559a:	f7fe fc5e 	bl	8003e5a <writeFloat>
        writeFloat(12+(4*i), pid.ki[i]);
 800559e:	f105 000c 	add.w	r0, r5, #12
 80055a2:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80055a4:	f7fe fc59 	bl	8003e5a <writeFloat>
        writeFloat(24+(4*i), pid.kd[i]);
 80055a8:	f105 0018 	add.w	r0, r5, #24
 80055ac:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80055ae:	3504      	adds	r5, #4
 80055b0:	f7fe fc53 	bl	8003e5a <writeFloat>
      for(int i = 0; i < 3; i++){
 80055b4:	2d0c      	cmp	r5, #12
 80055b6:	d1ed      	bne.n	8005594 <Control+0x4fc>
 80055b8:	240a      	movs	r4, #10
      }

	    for(int i = 0; i < 10; i++) {
	      HAL_Delay(25);
	      //BEEP_ON;
	      RGB_B_ON;
 80055ba:	4d47      	ldr	r5, [pc, #284]	; (80056d8 <Control+0x640>)
	      HAL_Delay(25);
 80055bc:	2019      	movs	r0, #25
 80055be:	f7fb fddf 	bl	8001180 <HAL_Delay>
	      RGB_B_ON;
 80055c2:	2200      	movs	r2, #0
 80055c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055c8:	4628      	mov	r0, r5
 80055ca:	f7fc faf3 	bl	8001bb4 <HAL_GPIO_WritePin>
	      HAL_Delay(25);
 80055ce:	2019      	movs	r0, #25
 80055d0:	f7fb fdd6 	bl	8001180 <HAL_Delay>
	      //BEEP_OFF;
	      RGB_B_OFF;
 80055d4:	2201      	movs	r2, #1
 80055d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055da:	4628      	mov	r0, r5
 80055dc:	f7fc faea 	bl	8001bb4 <HAL_GPIO_WritePin>
	    for(int i = 0; i < 10; i++) {
 80055e0:	3c01      	subs	r4, #1
 80055e2:	d1eb      	bne.n	80055bc <Control+0x524>
	    }
	  }
}
 80055e4:	b003      	add	sp, #12
 80055e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  }else if(f.Tuning_MODE == 2){
 80055ea:	2f02      	cmp	r7, #2
 80055ec:	f47f af08 	bne.w	8005400 <Control+0x368>
	    RGB_G_OFF;
 80055f0:	2201      	movs	r2, #1
 80055f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055f6:	4838      	ldr	r0, [pc, #224]	; (80056d8 <Control+0x640>)
 80055f8:	f7fc fadc 	bl	8001bb4 <HAL_GPIO_WritePin>
	    RGB_R_TOGGLE;
 80055fc:	4836      	ldr	r0, [pc, #216]	; (80056d8 <Control+0x640>)
 80055fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005602:	f7fc fadc 	bl	8001bbe <HAL_GPIO_TogglePin>
      if(RC.rcCommand[ROLL]  >  10) pid.kp[YAW] += (float)RC.rcCommand[ROLL]  * 0.0005;
 8005606:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
 800560a:	280a      	cmp	r0, #10
 800560c:	dd17      	ble.n	800563e <Control+0x5a6>
      if(RC.rcCommand[ROLL]  < -10) pid.kp[YAW] += (float)RC.rcCommand[ROLL]  * 0.0005;
 800560e:	f7fb fb19 	bl	8000c44 <__aeabi_i2f>
 8005612:	f7fa ff09 	bl	8000428 <__aeabi_f2d>
 8005616:	a32e      	add	r3, pc, #184	; (adr r3, 80056d0 <Control+0x638>)
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	f7fa ff58 	bl	80004d0 <__aeabi_dmul>
 8005620:	4680      	mov	r8, r0
 8005622:	68e0      	ldr	r0, [r4, #12]
 8005624:	4689      	mov	r9, r1
 8005626:	f7fa feff 	bl	8000428 <__aeabi_f2d>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4640      	mov	r0, r8
 8005630:	4649      	mov	r1, r9
 8005632:	f7fa fd9b 	bl	800016c <__adddf3>
 8005636:	f7fb f9fb 	bl	8000a30 <__aeabi_d2f>
 800563a:	60e0      	str	r0, [r4, #12]
 800563c:	e002      	b.n	8005644 <Control+0x5ac>
 800563e:	f110 0f0a 	cmn.w	r0, #10
 8005642:	dbe4      	blt.n	800560e <Control+0x576>
      if(RC.rcCommand[PITCH] >  10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
 8005644:	f9b5 0052 	ldrsh.w	r0, [r5, #82]	; 0x52
 8005648:	280a      	cmp	r0, #10
 800564a:	dd17      	ble.n	800567c <Control+0x5e4>
      if(RC.rcCommand[PITCH] < -10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
 800564c:	f7fb fafa 	bl	8000c44 <__aeabi_i2f>
 8005650:	f7fa feea 	bl	8000428 <__aeabi_f2d>
 8005654:	a31e      	add	r3, pc, #120	; (adr r3, 80056d0 <Control+0x638>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa ff39 	bl	80004d0 <__aeabi_dmul>
 800565e:	4680      	mov	r8, r0
 8005660:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005662:	4689      	mov	r9, r1
 8005664:	f7fa fee0 	bl	8000428 <__aeabi_f2d>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4640      	mov	r0, r8
 800566e:	4649      	mov	r1, r9
 8005670:	f7fa fd7c 	bl	800016c <__adddf3>
 8005674:	f7fb f9dc 	bl	8000a30 <__aeabi_d2f>
 8005678:	6320      	str	r0, [r4, #48]	; 0x30
 800567a:	e002      	b.n	8005682 <Control+0x5ea>
 800567c:	f110 0f0a 	cmn.w	r0, #10
 8005680:	dbe4      	blt.n	800564c <Control+0x5b4>
      if(RC.rcCommand[YAW]   >  10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
 8005682:	f9b5 0054 	ldrsh.w	r0, [r5, #84]	; 0x54
 8005686:	280a      	cmp	r0, #10
 8005688:	dd17      	ble.n	80056ba <Control+0x622>
      if(RC.rcCommand[YAW]   < -10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
 800568a:	f7fb fadb 	bl	8000c44 <__aeabi_i2f>
 800568e:	f7fa fecb 	bl	8000428 <__aeabi_f2d>
 8005692:	a30d      	add	r3, pc, #52	; (adr r3, 80056c8 <Control+0x630>)
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	f7fa ff1a 	bl	80004d0 <__aeabi_dmul>
 800569c:	4680      	mov	r8, r0
 800569e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056a0:	4689      	mov	r9, r1
 80056a2:	f7fa fec1 	bl	8000428 <__aeabi_f2d>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4640      	mov	r0, r8
 80056ac:	4649      	mov	r1, r9
 80056ae:	f7fa fd5d 	bl	800016c <__adddf3>
 80056b2:	f7fb f9bd 	bl	8000a30 <__aeabi_d2f>
 80056b6:	6560      	str	r0, [r4, #84]	; 0x54
 80056b8:	e6a2      	b.n	8005400 <Control+0x368>
 80056ba:	f110 0f0a 	cmn.w	r0, #10
 80056be:	dbe4      	blt.n	800568a <Control+0x5f2>
 80056c0:	e69e      	b.n	8005400 <Control+0x368>
 80056c2:	bf00      	nop
 80056c4:	f3af 8000 	nop.w
 80056c8:	eb1c432d 	.word	0xeb1c432d
 80056cc:	3f0a36e2 	.word	0x3f0a36e2
 80056d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80056d4:	3f40624d 	.word	0x3f40624d
 80056d8:	40010c00 	.word	0x40010c00
 80056dc:	40240000 	.word	0x40240000
 80056e0:	3fe00000 	.word	0x3fe00000
 80056e4:	20000874 	.word	0x20000874

080056e8 <PwmWriteMotor>:



void PwmWriteMotor(void)
{
  TIM4->CCR1 = motor[0];  // Actual : REAR_L
 80056e8:	4a07      	ldr	r2, [pc, #28]	; (8005708 <PwmWriteMotor+0x20>)
 80056ea:	4b08      	ldr	r3, [pc, #32]	; (800570c <PwmWriteMotor+0x24>)
 80056ec:	f9b2 1000 	ldrsh.w	r1, [r2]
 80056f0:	6359      	str	r1, [r3, #52]	; 0x34
  TIM4->CCR2 = motor[1];  // Actual : FRONT_R
 80056f2:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80056f6:	6399      	str	r1, [r3, #56]	; 0x38
	TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 80056f8:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
	TIM4->CCR4 = motor[3];  // Actual : REAR_R
 80056fc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8005700:	63d9      	str	r1, [r3, #60]	; 0x3c
	TIM4->CCR4 = motor[3];  // Actual : REAR_R
 8005702:	641a      	str	r2, [r3, #64]	; 0x40
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	2000086a 	.word	0x2000086a
 800570c:	40000800 	.word	0x40000800

08005710 <Init_Buffer>:
	Queue_t *p_uart;
	p_uart = &Q_buffer[channel];
	Init_Buffer(p_uart);
}

bool Init_Buffer(Queue_t *Q){
 8005710:	2300      	movs	r3, #0
	bool result = true;
		uint8_t count;
	for(count = 0; count<MAX; count++){
		Q->Ring_Buffer[count]= 0;
 8005712:	461a      	mov	r2, r3
 8005714:	54c2      	strb	r2, [r0, r3]
 8005716:	3301      	adds	r3, #1
	for(count = 0; count<MAX; count++){
 8005718:	2b80      	cmp	r3, #128	; 0x80
 800571a:	d1fb      	bne.n	8005714 <Init_Buffer+0x4>
	}
	Q->head = 0;
 800571c:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
	Q->tail = 0;
 8005720:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
	Q->size = MAX;
 8005724:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
	Q->temp = 0;
 8005728:	f880 2083 	strb.w	r2, [r0, #131]	; 0x83
	
	return result;
}
 800572c:	2001      	movs	r0, #1
 800572e:	4770      	bx	lr

08005730 <QueueCreate>:
	Init_Buffer(p_uart);
 8005730:	2288      	movs	r2, #136	; 0x88
 8005732:	4b02      	ldr	r3, [pc, #8]	; (800573c <QueueCreate+0xc>)
 8005734:	fb02 3000 	mla	r0, r2, r0, r3
 8005738:	f7ff bfea 	b.w	8005710 <Init_Buffer>
 800573c:	2000096c 	.word	0x2000096c

08005740 <Q_full>:

uint8_t Q_full(Queue_t *Q){
	if((Q->head+1)%MAX == Q->tail){
 8005740:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005744:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
 8005748:	3301      	adds	r3, #1
 800574a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	   return TRUE;
	} return FALSE;
}
 800574e:	1a1b      	subs	r3, r3, r0
 8005750:	4258      	negs	r0, r3
 8005752:	4158      	adcs	r0, r3
 8005754:	4770      	bx	lr

08005756 <write_Q>:
	if(Q->head == Q->tail){
		return TRUE;
	} return FALSE;
}

uint8_t write_Q(Queue_t *Q, char data){
 8005756:	b508      	push	{r3, lr}
 8005758:	4602      	mov	r2, r0
	if(Q_full(Q)){
 800575a:	f7ff fff1 	bl	8005740 <Q_full>
 800575e:	b960      	cbnz	r0, 800577a <write_Q+0x24>
		return FALSE;
	}
  Q->Ring_Buffer[Q->head] = data;
 8005760:	f892 3080 	ldrb.w	r3, [r2, #128]	; 0x80
  Q->head = (Q->head+1) % MAX;
	return TRUE;
 8005764:	2001      	movs	r0, #1
  Q->Ring_Buffer[Q->head] = data;
 8005766:	b2db      	uxtb	r3, r3
 8005768:	54d1      	strb	r1, [r2, r3]
  Q->head = (Q->head+1) % MAX;
 800576a:	f892 3080 	ldrb.w	r3, [r2, #128]	; 0x80
 800576e:	3301      	adds	r3, #1
 8005770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005774:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
	return TRUE;
 8005778:	bd08      	pop	{r3, pc}
		return FALSE;
 800577a:	2000      	movs	r0, #0
}
 800577c:	bd08      	pop	{r3, pc}
	...

08005780 <HAL_TIM_IC_CaptureCallback>:
rc RC;
rc RC_Raw;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM2){
 8005780:	7f03      	ldrb	r3, [r0, #28]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d11d      	bne.n	80057c2 <HAL_TIM_IC_CaptureCallback+0x42>
 8005786:	6803      	ldr	r3, [r0, #0]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	f040 8095 	bne.w	80058ba <HAL_TIM_IC_CaptureCallback+0x13a>
	        if(Ch1_PIN){  // Timer2 Ch1 pin(PA0) is High
 8005790:	4a52      	ldr	r2, [pc, #328]	; (80058dc <HAL_TIM_IC_CaptureCallback+0x15c>)
 8005792:	6892      	ldr	r2, [r2, #8]
 8005794:	f012 0f01 	tst.w	r2, #1
 8005798:	4a51      	ldr	r2, [pc, #324]	; (80058e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 800579a:	d008      	beq.n	80057ae <HAL_TIM_IC_CaptureCallback+0x2e>
	            TIM2->CCR1 = 0;
 800579c:	2100      	movs	r1, #0
 800579e:	6359      	str	r1, [r3, #52]	; 0x34
	            RC.capture_rise[0] = TIM2->CCR1; // read capture data
 80057a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057a2:	6011      	str	r1, [r2, #0]

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3){
	        if(Ch3_PIN){  // Timer3 Ch1 pin(PA6) is High
	            TIM3->CCR1 = 0;
	        	RC.capture_rise[2] = TIM3->CCR1; // read capture data
	            Ch3_POL_FALLING;  // to falling edge
 80057a4:	6a1a      	ldr	r2, [r3, #32]
 80057a6:	f042 0202 	orr.w	r2, r2, #2
	            Ch6_POL_FALLING;  // to falling edge
	        }
	        else{   // Timer3 Ch4 pin(PB1) is Low
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
	            Ch6_POL_RISING;   // to rising edge
 80057aa:	621a      	str	r2, [r3, #32]
//	        	RC.capture_fall[7] = TIM3->CCR4; // read capture data
//	            RC.rcADC[7] = RC.capture_fall[7] - RC.capture_rise[7];
//	            Ch8_POL_RISING;   // to rising edge
//	        }
//	    }
}
 80057ac:	4770      	bx	lr
	            RC.capture_fall[0] = TIM2->CCR1; // read capture data
 80057ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
	            RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 80057b0:	6810      	ldr	r0, [r2, #0]
	            RC.capture_fall[0] = TIM2->CCR1; // read capture data
 80057b2:	6211      	str	r1, [r2, #32]
	            RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 80057b4:	1a09      	subs	r1, r1, r0
 80057b6:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
	            Ch3_POL_RISING;   // to rising edge
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	f022 0202 	bic.w	r2, r2, #2
 80057c0:	e7f3      	b.n	80057aa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM2){
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d13d      	bne.n	8005842 <HAL_TIM_IC_CaptureCallback+0xc2>
 80057c6:	6803      	ldr	r3, [r0, #0]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057cc:	d10d      	bne.n	80057ea <HAL_TIM_IC_CaptureCallback+0x6a>
	        if(Ch2_PIN){  // Timer2 Ch2 pin(PA1) is High
 80057ce:	4a43      	ldr	r2, [pc, #268]	; (80058dc <HAL_TIM_IC_CaptureCallback+0x15c>)
 80057d0:	6892      	ldr	r2, [r2, #8]
 80057d2:	f012 0f02 	tst.w	r2, #2
 80057d6:	4a42      	ldr	r2, [pc, #264]	; (80058e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 80057d8:	d018      	beq.n	800580c <HAL_TIM_IC_CaptureCallback+0x8c>
	            TIM2->CCR2 = 0;
 80057da:	2100      	movs	r1, #0
 80057dc:	6399      	str	r1, [r3, #56]	; 0x38
	        	RC.capture_rise[1] = TIM2->CCR2; // read capture data
 80057de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80057e0:	6051      	str	r1, [r2, #4]
	            Ch2_POL_FALLING;  // to falling edge
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	f042 0220 	orr.w	r2, r2, #32
	            Ch2_POL_RISING;   // to rising edge
 80057e8:	621a      	str	r2, [r3, #32]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM3){
 80057ea:	4a3e      	ldr	r2, [pc, #248]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d174      	bne.n	80058da <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch4_PIN){  // Timer3 Ch2 pin(PA7) is High
 80057f0:	4a3a      	ldr	r2, [pc, #232]	; (80058dc <HAL_TIM_IC_CaptureCallback+0x15c>)
 80057f2:	6892      	ldr	r2, [r2, #8]
 80057f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80057f8:	4a39      	ldr	r2, [pc, #228]	; (80058e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 80057fa:	d018      	beq.n	800582e <HAL_TIM_IC_CaptureCallback+0xae>
	            TIM3->CCR2 = 0;
 80057fc:	2100      	movs	r1, #0
 80057fe:	6399      	str	r1, [r3, #56]	; 0x38
	        	RC.capture_rise[3] = TIM3->CCR2; // read capture data
 8005800:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005802:	60d1      	str	r1, [r2, #12]
	            Ch4_POL_FALLING;  // to falling edge
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	f042 0220 	orr.w	r2, r2, #32
 800580a:	e7ce      	b.n	80057aa <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[1] = TIM2->CCR2; // read capture data
 800580c:	6b99      	ldr	r1, [r3, #56]	; 0x38
	        	RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 800580e:	6850      	ldr	r0, [r2, #4]
	        	RC.capture_fall[1] = TIM2->CCR2; // read capture data
 8005810:	6251      	str	r1, [r2, #36]	; 0x24
	        	RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 8005812:	1a09      	subs	r1, r1, r0
 8005814:	f8a2 1042 	strh.w	r1, [r2, #66]	; 0x42
	            Ch2_POL_RISING;   // to rising edge
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	f022 0220 	bic.w	r2, r2, #32
 800581e:	e7e3      	b.n	80057e8 <HAL_TIM_IC_CaptureCallback+0x68>
	        	RC.capture_fall[2] = TIM3->CCR1; // read capture data
 8005820:	6b59      	ldr	r1, [r3, #52]	; 0x34
	        	RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 8005822:	6890      	ldr	r0, [r2, #8]
	        	RC.capture_fall[2] = TIM3->CCR1; // read capture data
 8005824:	6291      	str	r1, [r2, #40]	; 0x28
	        	RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 8005826:	1a09      	subs	r1, r1, r0
 8005828:	f8a2 1044 	strh.w	r1, [r2, #68]	; 0x44
 800582c:	e7c5      	b.n	80057ba <HAL_TIM_IC_CaptureCallback+0x3a>
	        	RC.capture_fall[3] = TIM3->CCR2; // read capture data
 800582e:	6b99      	ldr	r1, [r3, #56]	; 0x38
	            RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 8005830:	68d0      	ldr	r0, [r2, #12]
	        	RC.capture_fall[3] = TIM3->CCR2; // read capture data
 8005832:	62d1      	str	r1, [r2, #44]	; 0x2c
	            RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 8005834:	1a09      	subs	r1, r1, r0
 8005836:	f8a2 1046 	strh.w	r1, [r2, #70]	; 0x46
	            Ch4_POL_RISING;   // to rising edge
 800583a:	6a1a      	ldr	r2, [r3, #32]
 800583c:	f022 0220 	bic.w	r2, r2, #32
 8005840:	e7b3      	b.n	80057aa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 && htim->Instance == TIM3){
 8005842:	2b04      	cmp	r3, #4
 8005844:	d147      	bne.n	80058d6 <HAL_TIM_IC_CaptureCallback+0x156>
 8005846:	6803      	ldr	r3, [r0, #0]
 8005848:	4a26      	ldr	r2, [pc, #152]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d145      	bne.n	80058da <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch5_PIN){  // Timer3 Ch3 pin(PB0) is High
 800584e:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8005852:	6892      	ldr	r2, [r2, #8]
 8005854:	f012 0f01 	tst.w	r2, #1
 8005858:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 800585a:	d007      	beq.n	800586c <HAL_TIM_IC_CaptureCallback+0xec>
	            TIM3->CCR3 = 0;
 800585c:	2100      	movs	r1, #0
 800585e:	63d9      	str	r1, [r3, #60]	; 0x3c
	        	RC.capture_rise[4] = TIM3->CCR3; // read capture data
 8005860:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005862:	6111      	str	r1, [r2, #16]
	            Ch5_POL_FALLING;  // to falling edge
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586a:	e79e      	b.n	80057aa <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[4] = TIM3->CCR3; // read capture data
 800586c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	            RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 800586e:	6910      	ldr	r0, [r2, #16]
	        	RC.capture_fall[4] = TIM3->CCR3; // read capture data
 8005870:	6311      	str	r1, [r2, #48]	; 0x30
	            RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 8005872:	1a09      	subs	r1, r1, r0
 8005874:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
	            Ch5_POL_RISING;   // to rising edge
 8005878:	6a1a      	ldr	r2, [r3, #32]
 800587a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800587e:	e794      	b.n	80057aa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3){
 8005880:	6803      	ldr	r3, [r0, #0]
 8005882:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d128      	bne.n	80058da <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch6_PIN){  // Timer3 Ch4 pin(PB1) is High
 8005888:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 800588c:	6892      	ldr	r2, [r2, #8]
 800588e:	f012 0f02 	tst.w	r2, #2
 8005892:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005894:	d007      	beq.n	80058a6 <HAL_TIM_IC_CaptureCallback+0x126>
	            TIM3->CCR4 = 0;
 8005896:	2100      	movs	r1, #0
 8005898:	6419      	str	r1, [r3, #64]	; 0x40
	        	RC.capture_rise[5] = TIM3->CCR4; // read capture data
 800589a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800589c:	6151      	str	r1, [r2, #20]
	            Ch6_POL_FALLING;  // to falling edge
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058a4:	e781      	b.n	80057aa <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
 80058a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 80058a8:	6950      	ldr	r0, [r2, #20]
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
 80058aa:	6351      	str	r1, [r2, #52]	; 0x34
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 80058ac:	1a09      	subs	r1, r1, r0
 80058ae:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
	            Ch6_POL_RISING;   // to rising edge
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b8:	e777      	b.n	80057aa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3){
 80058ba:	4a0a      	ldr	r2, [pc, #40]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10c      	bne.n	80058da <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch3_PIN){  // Timer3 Ch1 pin(PA6) is High
 80058c0:	4a06      	ldr	r2, [pc, #24]	; (80058dc <HAL_TIM_IC_CaptureCallback+0x15c>)
 80058c2:	6892      	ldr	r2, [r2, #8]
 80058c4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80058c8:	4a05      	ldr	r2, [pc, #20]	; (80058e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 80058ca:	d0a9      	beq.n	8005820 <HAL_TIM_IC_CaptureCallback+0xa0>
	            TIM3->CCR1 = 0;
 80058cc:	2100      	movs	r1, #0
 80058ce:	6359      	str	r1, [r3, #52]	; 0x34
	        	RC.capture_rise[2] = TIM3->CCR1; // read capture data
 80058d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80058d2:	6091      	str	r1, [r2, #8]
 80058d4:	e766      	b.n	80057a4 <HAL_TIM_IC_CaptureCallback+0x24>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3){
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d0d2      	beq.n	8005880 <HAL_TIM_IC_CaptureCallback+0x100>
 80058da:	4770      	bx	lr
 80058dc:	40010800 	.word	0x40010800
 80058e0:	20000af4 	.word	0x20000af4
 80058e4:	40000400 	.word	0x40000400

080058e8 <getMres>:
// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
uint8_t Mmode = M_100HZ;

void getMres()
{
  switch (Mscale)
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <getMres+0x18>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	b113      	cbz	r3, 80058f4 <getMres+0xc>
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d004      	beq.n	80058fc <getMres+0x14>
 80058f2:	4770      	bx	lr
  {
    // Possible magnetometer scales (and their register bit settings) are:
    // 14 bit resolution (0) and 16 bit resolution (1)
    case MFS_14BITS:
      mRes = 10.0f * 4912.0f / 8190.0f; // Proper scale to return milliGauss
 80058f4:	4a03      	ldr	r2, [pc, #12]	; (8005904 <getMres+0x1c>)
      break;
    case MFS_16BITS:
      mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
 80058f6:	4b04      	ldr	r3, [pc, #16]	; (8005908 <getMres+0x20>)
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	4770      	bx	lr
 80058fc:	4a03      	ldr	r2, [pc, #12]	; (800590c <getMres+0x24>)
 80058fe:	e7fa      	b.n	80058f6 <getMres+0xe>
 8005900:	20000009 	.word	0x20000009
 8005904:	40bfebff 	.word	0x40bfebff
 8005908:	20000774 	.word	0x20000774
 800590c:	3fbfebff 	.word	0x3fbfebff

08005910 <getGres>:
  }
}

void getGres()
{
  switch (Gscale)
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <getGres+0x24>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b03      	cmp	r3, #3
 8005916:	d806      	bhi.n	8005926 <getGres+0x16>
 8005918:	e8df f003 	tbb	[pc, r3]
 800591c:	0a080602 	.word	0x0a080602
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case GFS_250DPS:
      gRes = 250.0f / 32768.0f;
 8005920:	4a05      	ldr	r2, [pc, #20]	; (8005938 <getGres+0x28>)
      break;
    case GFS_1000DPS:
      gRes = 1000.0f / 32768.0f;
      break;
    case GFS_2000DPS:
      gRes = 2000.0f / 32768.0f;
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <getGres+0x2c>)
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	4770      	bx	lr
      gRes = 500.0f / 32768.0f;
 8005928:	4a05      	ldr	r2, [pc, #20]	; (8005940 <getGres+0x30>)
 800592a:	e7fa      	b.n	8005922 <getGres+0x12>
      gRes = 1000.0f / 32768.0f;
 800592c:	4a05      	ldr	r2, [pc, #20]	; (8005944 <getGres+0x34>)
 800592e:	e7f8      	b.n	8005922 <getGres+0x12>
      gRes = 2000.0f / 32768.0f;
 8005930:	4a05      	ldr	r2, [pc, #20]	; (8005948 <getGres+0x38>)
 8005932:	e7f6      	b.n	8005922 <getGres+0x12>
 8005934:	200004ed 	.word	0x200004ed
 8005938:	3bfa0000 	.word	0x3bfa0000
 800593c:	2000076c 	.word	0x2000076c
 8005940:	3c7a0000 	.word	0x3c7a0000
 8005944:	3cfa0000 	.word	0x3cfa0000
 8005948:	3d7a0000 	.word	0x3d7a0000

0800594c <getAres>:
  }
}

void getAres()
{
  switch (Ascale)
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <getAres+0x2c>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d807      	bhi.n	8005964 <getAres+0x18>
 8005954:	e8df f003 	tbb	[pc, r3]
 8005958:	0d0a0702 	.word	0x0d0a0702
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case AFS_2G:
      aRes = 2.0f / 32768.0f;
 800595c:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
      break;
    case AFS_8G:
      aRes = 8.0f / 32768.0f;
      break;
    case AFS_16G:
      aRes = 16.0f / 32768.0f;
 8005960:	4b06      	ldr	r3, [pc, #24]	; (800597c <getAres+0x30>)
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	4770      	bx	lr
      aRes = 4.0f / 32768.0f;
 8005966:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800596a:	e7f9      	b.n	8005960 <getAres+0x14>
      aRes = 8.0f / 32768.0f;
 800596c:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8005970:	e7f6      	b.n	8005960 <getAres+0x14>
      aRes = 16.0f / 32768.0f;
 8005972:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8005976:	e7f3      	b.n	8005960 <getAres+0x14>
 8005978:	200004ec 	.word	0x200004ec
 800597c:	2000075c 	.word	0x2000075c

08005980 <GYRO_Common>:
	
	if(1) GYRO_Common(); //Flight_Status >= 1
}

void GYRO_Common(void)
{
 8005980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t axis =0;
  for(axis=0; axis<3; axis++)
  {
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005984:	f04f 0900 	mov.w	r9, #0

    if(abs(imu.gyroRaw[axis]) <= 5)
 8005988:	2600      	movs	r6, #0
 800598a:	f04f 0701 	mov.w	r7, #1
 800598e:	46c8      	mov	r8, r9
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005990:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <GYRO_Common+0x80>)
 8005992:	4c1c      	ldr	r4, [pc, #112]	; (8005a04 <GYRO_Common+0x84>)
 8005994:	681b      	ldr	r3, [r3, #0]
    if(abs(imu.gyroRaw[axis]) <= 5)
 8005996:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005a0c <GYRO_Common+0x8c>
 800599a:	f8df b074 	ldr.w	fp, [pc, #116]	; 8005a10 <GYRO_Common+0x90>
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <GYRO_Common+0x88>)
 80059a2:	444b      	add	r3, r9
 80059a4:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80059a8:	f7fb f94c 	bl	8000c44 <__aeabi_i2f>
 80059ac:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80059b0:	f7fb f892 	bl	8000ad8 <__aeabi_fsub>
 80059b4:	9900      	ldr	r1, [sp, #0]
 80059b6:	f7fb f999 	bl	8000cec <__aeabi_fmul>
    if(abs(imu.gyroRaw[axis]) <= 5)
 80059ba:	4631      	mov	r1, r6
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 80059bc:	4605      	mov	r5, r0
    if(abs(imu.gyroRaw[axis]) <= 5)
 80059be:	f7fb fb51 	bl	8001064 <__aeabi_fcmpgt>
 80059c2:	463b      	mov	r3, r7
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	b190      	cbz	r0, 80059ee <GYRO_Common+0x6e>
 80059c8:	4659      	mov	r1, fp
 80059ca:	4628      	mov	r0, r5
 80059cc:	f7fb fb36 	bl	800103c <__aeabi_fcmple>
 80059d0:	9b01      	ldr	r3, [sp, #4]
 80059d2:	b900      	cbnz	r0, 80059d6 <GYRO_Common+0x56>
 80059d4:	4643      	mov	r3, r8
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	b973      	cbnz	r3, 80059f8 <GYRO_Common+0x78>
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 80059da:	f844 5c2c 	str.w	r5, [r4, #-44]
 80059de:	f109 0902 	add.w	r9, r9, #2
  for(axis=0; axis<3; axis++)
 80059e2:	f1b9 0f06 	cmp.w	r9, #6
 80059e6:	d1db      	bne.n	80059a0 <GYRO_Common+0x20>
      {
        imu.gyroRaw[axis] = 0;
      }
  }
}
 80059e8:	b003      	add	sp, #12
 80059ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(abs(imu.gyroRaw[axis]) <= 5)
 80059ee:	4651      	mov	r1, sl
 80059f0:	4628      	mov	r0, r5
 80059f2:	f7fb fb2d 	bl	8001050 <__aeabi_fcmpge>
 80059f6:	e7eb      	b.n	80059d0 <GYRO_Common+0x50>
        imu.gyroRaw[axis] = 0;
 80059f8:	f844 6c2c 	str.w	r6, [r4, #-44]
 80059fc:	e7ef      	b.n	80059de <GYRO_Common+0x5e>
 80059fe:	bf00      	nop
 8005a00:	2000076c 	.word	0x2000076c
 8005a04:	20000d54 	.word	0x20000d54
 8005a08:	20000cf8 	.word	0x20000cf8
 8005a0c:	c0a00000 	.word	0xc0a00000
 8005a10:	40a00000 	.word	0x40a00000

08005a14 <Gyro_getADC>:
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 8005a14:	2306      	movs	r3, #6
{
 8005a16:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 8005a18:	4c0e      	ldr	r4, [pc, #56]	; (8005a54 <Gyro_getADC+0x40>)
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	4623      	mov	r3, r4
 8005a20:	2143      	movs	r1, #67	; 0x43
 8005a22:	20d2      	movs	r0, #210	; 0xd2
 8005a24:	f7fe fcac 	bl	8004380 <I2C_ByteRead>
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005a28:	78a3      	ldrb	r3, [r4, #2]
 8005a2a:	78e1      	ldrb	r1, [r4, #3]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005a2c:	7962      	ldrb	r2, [r4, #5]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005a2e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005a32:	7923      	ldrb	r3, [r4, #4]
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005a34:	7825      	ldrb	r5, [r4, #0]
 8005a36:	7860      	ldrb	r0, [r4, #1]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005a38:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	GYRO_ORIENTATION(x, y, z);
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <Gyro_getADC+0x44>)
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005a3e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	GYRO_ORIENTATION(x, y, z);
 8005a42:	8298      	strh	r0, [r3, #20]
 8005a44:	82d9      	strh	r1, [r3, #22]
 8005a46:	831a      	strh	r2, [r3, #24]
}
 8005a48:	b003      	add	sp, #12
 8005a4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(1) GYRO_Common(); //Flight_Status >= 1
 8005a4e:	f7ff bf97 	b.w	8005980 <GYRO_Common>
 8005a52:	bf00      	nop
 8005a54:	20000d98 	.word	0x20000d98
 8005a58:	20000cf8 	.word	0x20000cf8

08005a5c <ACC_Common>:
	
	if(1) ACC_Common(); //Flight_Status >= 1
}

void ACC_Common(void)
{
 8005a5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t axis = 0;
  static int32_t a[3];

  if(calibratingA>0){
 8005a60:	4e2a      	ldr	r6, [pc, #168]	; (8005b0c <ACC_Common+0xb0>)
 8005a62:	4c2b      	ldr	r4, [pc, #172]	; (8005b10 <ACC_Common+0xb4>)
 8005a64:	8830      	ldrh	r0, [r6, #0]
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d03c      	beq.n	8005ae4 <ACC_Common+0x88>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <ACC_Common+0xb8>)
    for(axis=0; axis <3; axis++){
    // Reset a[axis] at start of calibration
      if (calibratingA == 512) a[axis]=0;
 8005a6e:	461d      	mov	r5, r3
 8005a70:	4611      	mov	r1, r2
 8005a72:	f104 0e18 	add.w	lr, r4, #24
 8005a76:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005a7a:	bf08      	it	eq
 8005a7c:	6015      	streq	r5, [r2, #0]
      // Sum up 512 readings
      a[axis] +=imu.accADC[axis];
 8005a7e:	f9be c002 	ldrsh.w	ip, [lr, #2]
 8005a82:	6817      	ldr	r7, [r2, #0]
      // Clear global variables for next reading
      imu.accADC[axis]=0;
 8005a84:	f82e 5f02 	strh.w	r5, [lr, #2]!
      a[axis] +=imu.accADC[axis];
 8005a88:	4467      	add	r7, ip
 8005a8a:	f842 7b04 	str.w	r7, [r2], #4
      imu.acc_cal[axis]=0;
 8005a8e:	18e7      	adds	r7, r4, r3
 8005a90:	3304      	adds	r3, #4
    for(axis=0; axis <3; axis++){
 8005a92:	2b0c      	cmp	r3, #12
      imu.acc_cal[axis]=0;
 8005a94:	657d      	str	r5, [r7, #84]	; 0x54
    for(axis=0; axis <3; axis++){
 8005a96:	d1ee      	bne.n	8005a76 <ACC_Common+0x1a>
  }
     // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
  if (calibratingA == 1) {
 8005a98:	2801      	cmp	r0, #1
 8005a9a:	d120      	bne.n	8005ade <ACC_Common+0x82>
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 8005a9c:	684b      	ldr	r3, [r1, #4]
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 8005a9e:	680f      	ldr	r7, [r1, #0]
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 8005aa0:	ea4f 2863 	mov.w	r8, r3, asr #9
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005aa4:	4b1c      	ldr	r3, [pc, #112]	; (8005b18 <ACC_Common+0xbc>)
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 8005aa6:	127f      	asrs	r7, r7, #9
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005aa8:	6818      	ldr	r0, [r3, #0]
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 8005aaa:	6567      	str	r7, [r4, #84]	; 0x54
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 8005aac:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005ab0:	688d      	ldr	r5, [r1, #8]
 8005ab2:	f7fb faf7 	bl	80010a4 <__aeabi_f2iz>
 8005ab6:	126d      	asrs	r5, r5, #9
 8005ab8:	1a28      	subs	r0, r5, r0
    sprintf(Buf, "ACC_CALI_DONE : %ld, %ld, %ld\r\n ", imu.acc_cal[ROLL], imu.acc_cal[PITCH], imu.acc_cal[YAW]);
 8005aba:	4643      	mov	r3, r8
 8005abc:	463a      	mov	r2, r7
 8005abe:	4917      	ldr	r1, [pc, #92]	; (8005b1c <ACC_Common+0xc0>)
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005ac0:	65e0      	str	r0, [r4, #92]	; 0x5c
    sprintf(Buf, "ACC_CALI_DONE : %ld, %ld, %ld\r\n ", imu.acc_cal[ROLL], imu.acc_cal[PITCH], imu.acc_cal[YAW]);
 8005ac2:	9000      	str	r0, [sp, #0]
 8005ac4:	4816      	ldr	r0, [pc, #88]	; (8005b20 <ACC_Common+0xc4>)
 8005ac6:	f002 fe25 	bl	8008714 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf),1000);
 8005aca:	4815      	ldr	r0, [pc, #84]	; (8005b20 <ACC_Common+0xc4>)
 8005acc:	f7fa fb40 	bl	8000150 <strlen>
 8005ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ad4:	b282      	uxth	r2, r0
 8005ad6:	4912      	ldr	r1, [pc, #72]	; (8005b20 <ACC_Common+0xc4>)
 8005ad8:	4812      	ldr	r0, [pc, #72]	; (8005b24 <ACC_Common+0xc8>)
 8005ada:	f7fd ff5d 	bl	8003998 <HAL_UART_Transmit>
  }
  calibratingA--;
 8005ade:	8833      	ldrh	r3, [r6, #0]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	8033      	strh	r3, [r6, #0]
}

  for(axis=0;axis<3;axis++)
  {
    imu.accRaw[axis] = (float)imu.accADC[axis] * aRes;// - accBias[axis];
 8005ae4:	2500      	movs	r5, #0
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <ACC_Common+0xbc>)
 8005ae8:	4e0f      	ldr	r6, [pc, #60]	; (8005b28 <ACC_Common+0xcc>)
 8005aea:	f8d3 8000 	ldr.w	r8, [r3]
 8005aee:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
 8005af2:	f7fb f8a7 	bl	8000c44 <__aeabi_i2f>
 8005af6:	4641      	mov	r1, r8
 8005af8:	f7fb f8f8 	bl	8000cec <__aeabi_fmul>
 8005afc:	1967      	adds	r7, r4, r5
 8005afe:	3504      	adds	r5, #4
  for(axis=0;axis<3;axis++)
 8005b00:	2d0c      	cmp	r5, #12
    imu.accRaw[axis] = (float)imu.accADC[axis] * aRes;// - accBias[axis];
 8005b02:	62b8      	str	r0, [r7, #40]	; 0x28
  for(axis=0;axis<3;axis++)
 8005b04:	d1f3      	bne.n	8005aee <ACC_Common+0x92>
    //imu.accRaw[axis] = ((float)imu.accADC[axis]-(float)imu.acc_cal[axis]) * AMult;// - accelBias[axis];
  }
}
 8005b06:	b002      	add	sp, #8
 8005b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b0c:	200005f4 	.word	0x200005f4
 8005b10:	20000cf8 	.word	0x20000cf8
 8005b14:	20000508 	.word	0x20000508
 8005b18:	2000075c 	.word	0x2000075c
 8005b1c:	0800b320 	.word	0x0800b320
 8005b20:	20000da4 	.word	0x20000da4
 8005b24:	200010e8 	.word	0x200010e8
 8005b28:	20000d10 	.word	0x20000d10

08005b2c <ACC_getADC>:
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 8005b2c:	2306      	movs	r3, #6
{
 8005b2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 8005b30:	4c0e      	ldr	r4, [pc, #56]	; (8005b6c <ACC_getADC+0x40>)
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	2201      	movs	r2, #1
 8005b36:	4623      	mov	r3, r4
 8005b38:	213b      	movs	r1, #59	; 0x3b
 8005b3a:	20d2      	movs	r0, #210	; 0xd2
 8005b3c:	f7fe fc20 	bl	8004380 <I2C_ByteRead>
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005b40:	78a3      	ldrb	r3, [r4, #2]
 8005b42:	78e1      	ldrb	r1, [r4, #3]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005b44:	7962      	ldrb	r2, [r4, #5]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005b46:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005b4a:	7923      	ldrb	r3, [r4, #4]
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005b4c:	7825      	ldrb	r5, [r4, #0]
 8005b4e:	7860      	ldrb	r0, [r4, #1]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005b50:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	ACC_ORIENTATION( x, y, z);
 8005b54:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <ACC_getADC+0x44>)
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005b56:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	ACC_ORIENTATION( x, y, z);
 8005b5a:	8358      	strh	r0, [r3, #26]
 8005b5c:	8399      	strh	r1, [r3, #28]
 8005b5e:	83da      	strh	r2, [r3, #30]
}
 8005b60:	b003      	add	sp, #12
 8005b62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(1) ACC_Common(); //Flight_Status >= 1
 8005b66:	f7ff bf79 	b.w	8005a5c <ACC_Common>
 8005b6a:	bf00      	nop
 8005b6c:	20000d98 	.word	0x20000d98
 8005b70:	20000cf8 	.word	0x20000cf8

08005b74 <MAG_Common>:
		}
	}
}

void MAG_Common(void)
{
 8005b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t axis = 0;
  for(axis=0;axis<3;axis++)
  {
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 8005b78:	2400      	movs	r4, #0
 8005b7a:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <MAG_Common+0x48>)
 8005b7c:	4d10      	ldr	r5, [pc, #64]	; (8005bc0 <MAG_Common+0x4c>)
 8005b7e:	f8d3 8000 	ldr.w	r8, [r3]
 8005b82:	4f10      	ldr	r7, [pc, #64]	; (8005bc4 <MAG_Common+0x50>)
 8005b84:	4e10      	ldr	r6, [pc, #64]	; (8005bc8 <MAG_Common+0x54>)
 8005b86:	f1a5 093c 	sub.w	r9, r5, #60	; 0x3c
 8005b8a:	eb04 0309 	add.w	r3, r4, r9
 8005b8e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8005b92:	f7fb f857 	bl	8000c44 <__aeabi_i2f>
 8005b96:	4641      	mov	r1, r8
 8005b98:	f7fb f8a8 	bl	8000cec <__aeabi_fmul>
 8005b9c:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
 8005ba0:	f7fb f8a4 	bl	8000cec <__aeabi_fmul>
 8005ba4:	f856 1014 	ldr.w	r1, [r6, r4, lsl #1]
 8005ba8:	f7fa ff96 	bl	8000ad8 <__aeabi_fsub>
 8005bac:	3402      	adds	r4, #2
  for(axis=0;axis<3;axis++)
 8005bae:	2c06      	cmp	r4, #6
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 8005bb0:	f845 0f04 	str.w	r0, [r5, #4]!
  for(axis=0;axis<3;axis++)
 8005bb4:	d1e9      	bne.n	8005b8a <MAG_Common+0x16>
  }
}
 8005bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000774 	.word	0x20000774
 8005bc0:	20000d34 	.word	0x20000d34
 8005bc4:	20000610 	.word	0x20000610
 8005bc8:	20000604 	.word	0x20000604

08005bcc <Mag_getADC>:
{
 8005bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x02, 1, rawADC, 1);
 8005bce:	2501      	movs	r5, #1
 8005bd0:	4c16      	ldr	r4, [pc, #88]	; (8005c2c <Mag_getADC+0x60>)
 8005bd2:	462a      	mov	r2, r5
 8005bd4:	4623      	mov	r3, r4
 8005bd6:	9500      	str	r5, [sp, #0]
 8005bd8:	2102      	movs	r1, #2
 8005bda:	2018      	movs	r0, #24
 8005bdc:	f7fe fbd0 	bl	8004380 <I2C_ByteRead>
	if( rawADC[0] & 0x01)
 8005be0:	7823      	ldrb	r3, [r4, #0]
 8005be2:	07da      	lsls	r2, r3, #31
 8005be4:	d51f      	bpl.n	8005c26 <Mag_getADC+0x5a>
	I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x03, 1, rawADC, 7);
 8005be6:	2307      	movs	r3, #7
 8005be8:	462a      	mov	r2, r5
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	2103      	movs	r1, #3
 8005bee:	4623      	mov	r3, r4
 8005bf0:	2018      	movs	r0, #24
 8005bf2:	f7fe fbc5 	bl	8004380 <I2C_ByteRead>
	if(!(c & 0x08)){
 8005bf6:	79a3      	ldrb	r3, [r4, #6]
 8005bf8:	071b      	lsls	r3, r3, #28
 8005bfa:	d414      	bmi.n	8005c26 <Mag_getADC+0x5a>
	y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 8005bfc:	78e3      	ldrb	r3, [r4, #3]
 8005bfe:	78a1      	ldrb	r1, [r4, #2]
	z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8005c00:	7922      	ldrb	r2, [r4, #4]
	y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 8005c02:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8005c06:	7963      	ldrb	r3, [r4, #5]
	x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 8005c08:	7865      	ldrb	r5, [r4, #1]
 8005c0a:	7820      	ldrb	r0, [r4, #0]
	z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8005c0c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	MAG_ORIENTATION( x, y, z);
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <Mag_getADC+0x64>)
	x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 8005c12:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	MAG_ORIENTATION( x, y, z);
 8005c16:	8198      	strh	r0, [r3, #12]
 8005c18:	81d9      	strh	r1, [r3, #14]
 8005c1a:	821a      	strh	r2, [r3, #16]
}
 8005c1c:	b003      	add	sp, #12
 8005c1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(1) MAG_Common();//Flight_Status >= 1
 8005c22:	f7ff bfa7 	b.w	8005b74 <MAG_Common>
}
 8005c26:	b003      	add	sp, #12
 8005c28:	bd30      	pop	{r4, r5, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000d98 	.word	0x20000d98
 8005c30:	20000cf8 	.word	0x20000cf8

08005c34 <Calibrate_gyro>:
{
 8005c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (cal_int = 0; cal_int < 2000; cal_int ++){
 8005c38:	2500      	movs	r5, #0
      RGB_G_TOGGLE;                                         //Change the led status to indicate calibration.
 8005c3a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005cec <Calibrate_gyro+0xb8>
      sprintf(Buf, ".");
 8005c3e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8005cf0 <Calibrate_gyro+0xbc>
 8005c42:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8005cf4 <Calibrate_gyro+0xc0>
    if (cal_int % 125 == 0) {
 8005c46:	227d      	movs	r2, #125	; 0x7d
 8005c48:	fb95 f3f2 	sdiv	r3, r5, r2
 8005c4c:	fb02 5313 	mls	r3, r2, r3, r5
 8005c50:	b993      	cbnz	r3, 8005c78 <Calibrate_gyro+0x44>
      RGB_G_TOGGLE;                                         //Change the led status to indicate calibration.
 8005c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c56:	4648      	mov	r0, r9
 8005c58:	f7fb ffb1 	bl	8001bbe <HAL_GPIO_TogglePin>
      sprintf(Buf, ".");
 8005c5c:	4651      	mov	r1, sl
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f002 fd7c 	bl	800875c <strcpy>
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8005c64:	4640      	mov	r0, r8
 8005c66:	f7fa fa73 	bl	8000150 <strlen>
 8005c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c6e:	b282      	uxth	r2, r0
 8005c70:	4641      	mov	r1, r8
 8005c72:	481b      	ldr	r0, [pc, #108]	; (8005ce0 <Calibrate_gyro+0xac>)
 8005c74:	f7fd fe90 	bl	8003998 <HAL_UART_Transmit>
		Gyro_getADC();
 8005c78:	f7ff fecc 	bl	8005a14 <Gyro_getADC>
		Mag_getADC();
 8005c7c:	2600      	movs	r6, #0
 8005c7e:	f7ff ffa5 	bl	8005bcc <Mag_getADC>
 8005c82:	4f18      	ldr	r7, [pc, #96]	; (8005ce4 <Calibrate_gyro+0xb0>)
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 8005c84:	f1a7 045c 	sub.w	r4, r7, #92	; 0x5c
 8005c88:	1933      	adds	r3, r6, r4
 8005c8a:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8005c8e:	f7fa ffd9 	bl	8000c44 <__aeabi_i2f>
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	f7fa ff22 	bl	8000adc <__addsf3>
 8005c98:	3602      	adds	r6, #2
		for(axis=0; axis<3; axis++)
 8005c9a:	2e06      	cmp	r6, #6
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 8005c9c:	f847 0f04 	str.w	r0, [r7, #4]!
		for(axis=0; axis<3; axis++)
 8005ca0:	d1f2      	bne.n	8005c88 <Calibrate_gyro+0x54>
	for (cal_int = 0; cal_int < 2000; cal_int ++){
 8005ca2:	3501      	adds	r5, #1
 8005ca4:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8005ca8:	d1cd      	bne.n	8005c46 <Calibrate_gyro+0x12>
	PrintData(2);
 8005caa:	2002      	movs	r0, #2
 8005cac:	f001 fb9a 	bl	80073e4 <PrintData>
		imu.gyro_cal[axis] /= 2000.0f;
 8005cb0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005cb2:	490d      	ldr	r1, [pc, #52]	; (8005ce8 <Calibrate_gyro+0xb4>)
 8005cb4:	f7fb f8ce 	bl	8000e54 <__aeabi_fdiv>
 8005cb8:	490b      	ldr	r1, [pc, #44]	; (8005ce8 <Calibrate_gyro+0xb4>)
 8005cba:	6620      	str	r0, [r4, #96]	; 0x60
 8005cbc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005cbe:	f7fb f8c9 	bl	8000e54 <__aeabi_fdiv>
 8005cc2:	4909      	ldr	r1, [pc, #36]	; (8005ce8 <Calibrate_gyro+0xb4>)
 8005cc4:	6660      	str	r0, [r4, #100]	; 0x64
 8005cc6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005cc8:	f7fb f8c4 	bl	8000e54 <__aeabi_fdiv>
 8005ccc:	66a0      	str	r0, [r4, #104]	; 0x68
	HAL_Delay(100);
 8005cce:	2064      	movs	r0, #100	; 0x64
 8005cd0:	f7fb fa56 	bl	8001180 <HAL_Delay>
}
 8005cd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PrintData(2);
 8005cd8:	2002      	movs	r0, #2
 8005cda:	f001 bb83 	b.w	80073e4 <PrintData>
 8005cde:	bf00      	nop
 8005ce0:	200010e8 	.word	0x200010e8
 8005ce4:	20000d54 	.word	0x20000d54
 8005ce8:	44fa0000 	.word	0x44fa0000
 8005cec:	40010c00 	.word	0x40010c00
 8005cf0:	0800b341 	.word	0x0800b341
 8005cf4:	20000da4 	.word	0x20000da4

08005cf8 <Temp_getADC>:

void Temp_getADC(void)
{
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 8005cf8:	2302      	movs	r3, #2
{
 8005cfa:	b513      	push	{r0, r1, r4, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 8005cfc:	4c0c      	ldr	r4, [pc, #48]	; (8005d30 <Temp_getADC+0x38>)
 8005cfe:	2201      	movs	r2, #1
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	2141      	movs	r1, #65	; 0x41
 8005d04:	4623      	mov	r3, r4
 8005d06:	20d2      	movs	r0, #210	; 0xd2
 8005d08:	f7fe fb3a 	bl	8004380 <I2C_ByteRead>
	/* Get acceleration */
	imu.rawTemp = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005d0c:	7823      	ldrb	r3, [r4, #0]
 8005d0e:	7860      	ldrb	r0, [r4, #1]
 8005d10:	4c08      	ldr	r4, [pc, #32]	; (8005d34 <Temp_getADC+0x3c>)
 8005d12:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005d16:	b200      	sxth	r0, r0
 8005d18:	8260      	strh	r0, [r4, #18]
	imu.Temp = ((float)imu.rawTemp / 337.87f) + 21.0f;
 8005d1a:	f7fa ff93 	bl	8000c44 <__aeabi_i2f>
 8005d1e:	4906      	ldr	r1, [pc, #24]	; (8005d38 <Temp_getADC+0x40>)
 8005d20:	f7fb f898 	bl	8000e54 <__aeabi_fdiv>
 8005d24:	4905      	ldr	r1, [pc, #20]	; (8005d3c <Temp_getADC+0x44>)
 8005d26:	f7fa fed9 	bl	8000adc <__addsf3>
 8005d2a:	6520      	str	r0, [r4, #80]	; 0x50
}
 8005d2c:	b002      	add	sp, #8
 8005d2e:	bd10      	pop	{r4, pc}
 8005d30:	20000d98 	.word	0x20000d98
 8005d34:	20000cf8 	.word	0x20000cf8
 8005d38:	43a8ef5c 	.word	0x43a8ef5c
 8005d3c:	41a80000 	.word	0x41a80000

08005d40 <calibrateMPU9250>:
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

// reset device, reset all registers, clear gyro and accelerometer bias registers
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8005d40:	2380      	movs	r3, #128	; 0x80
{
 8005d42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_Delay(100); // for stability
// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 8005d46:	2601      	movs	r6, #1
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 8005d48:	2400      	movs	r4, #0
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 8005d4a:	f04f 0b0c 	mov.w	fp, #12
{
 8005d4e:	b087      	sub	sp, #28
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8005d50:	2207      	movs	r2, #7
 8005d52:	9300      	str	r3, [sp, #0]
{
 8005d54:	4682      	mov	sl, r0
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8005d56:	2308      	movs	r3, #8
 8005d58:	20d2      	movs	r0, #210	; 0xd2
{
 8005d5a:	4689      	mov	r9, r1
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8005d5c:	216b      	movs	r1, #107	; 0x6b
 8005d5e:	f7fe fad9 	bl	8004314 <I2C_ByteWrite>
  HAL_Delay(100); // for stability
 8005d62:	2064      	movs	r0, #100	; 0x64
 8005d64:	f7fb fa0c 	bl	8001180 <HAL_Delay>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 8005d68:	9600      	str	r6, [sp, #0]
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	2207      	movs	r2, #7
 8005d6e:	216b      	movs	r1, #107	; 0x6b
 8005d70:	20d2      	movs	r0, #210	; 0xd2
 8005d72:	f7fe facf 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 8005d76:	2308      	movs	r3, #8
 8005d78:	2207      	movs	r2, #7
 8005d7a:	216c      	movs	r1, #108	; 0x6c
 8005d7c:	20d2      	movs	r0, #210	; 0xd2
 8005d7e:	9400      	str	r4, [sp, #0]
 8005d80:	f7fe fac8 	bl	8004314 <I2C_ByteWrite>
  HAL_Delay(200); // for stability
 8005d84:	20c8      	movs	r0, #200	; 0xc8
 8005d86:	f7fb f9fb 	bl	8001180 <HAL_Delay>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	2207      	movs	r2, #7
 8005d8e:	2138      	movs	r1, #56	; 0x38
 8005d90:	20d2      	movs	r0, #210	; 0xd2
 8005d92:	9400      	str	r4, [sp, #0]
 8005d94:	f7fe fabe 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
 8005d98:	2308      	movs	r3, #8
 8005d9a:	2207      	movs	r2, #7
 8005d9c:	2123      	movs	r1, #35	; 0x23
 8005d9e:	20d2      	movs	r0, #210	; 0xd2
 8005da0:	9400      	str	r4, [sp, #0]
 8005da2:	f7fe fab7 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
 8005da6:	2308      	movs	r3, #8
 8005da8:	2207      	movs	r2, #7
 8005daa:	216b      	movs	r1, #107	; 0x6b
 8005dac:	20d2      	movs	r0, #210	; 0xd2
 8005dae:	9400      	str	r4, [sp, #0]
 8005db0:	f7fe fab0 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
 8005db4:	2308      	movs	r3, #8
 8005db6:	2207      	movs	r2, #7
 8005db8:	2124      	movs	r1, #36	; 0x24
 8005dba:	20d2      	movs	r0, #210	; 0xd2
 8005dbc:	9400      	str	r4, [sp, #0]
 8005dbe:	f7fe faa9 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	2207      	movs	r2, #7
 8005dc6:	216a      	movs	r1, #106	; 0x6a
 8005dc8:	20d2      	movs	r0, #210	; 0xd2
 8005dca:	9400      	str	r4, [sp, #0]
 8005dcc:	f7fe faa2 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	2207      	movs	r2, #7
 8005dd4:	216a      	movs	r1, #106	; 0x6a
 8005dd6:	20d2      	movs	r0, #210	; 0xd2
 8005dd8:	f8cd b000 	str.w	fp, [sp]
 8005ddc:	f7fe fa9a 	bl	8004314 <I2C_ByteWrite>
  HAL_Delay(15); // for stability
 8005de0:	200f      	movs	r0, #15
 8005de2:	f7fb f9cd 	bl	8001180 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation.

  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x01); // Set low-pass filter to 188 Hz
 8005de6:	9600      	str	r6, [sp, #0]
 8005de8:	2308      	movs	r3, #8
 8005dea:	2207      	movs	r2, #7
 8005dec:	211a      	movs	r1, #26
 8005dee:	20d2      	movs	r0, #210	; 0xd2
 8005df0:	f7fe fa90 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set sample rate to 1 kHz
 8005df4:	2308      	movs	r3, #8
 8005df6:	2207      	movs	r2, #7
 8005df8:	2119      	movs	r1, #25
 8005dfa:	20d2      	movs	r0, #210	; 0xd2
 8005dfc:	9400      	str	r4, [sp, #0]
 8005dfe:	f7fe fa89 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8005e02:	2308      	movs	r3, #8
 8005e04:	2207      	movs	r2, #7
 8005e06:	211b      	movs	r1, #27
 8005e08:	20d2      	movs	r0, #210	; 0xd2
 8005e0a:	9400      	str	r4, [sp, #0]
 8005e0c:	f7fe fa82 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8005e10:	2308      	movs	r3, #8
 8005e12:	2207      	movs	r2, #7
 8005e14:	211c      	movs	r1, #28
 8005e16:	20d2      	movs	r0, #210	; 0xd2
 8005e18:	9400      	str	r4, [sp, #0]
 8005e1a:	f7fe fa7b 	bl	8004314 <I2C_ByteWrite>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x40); // Enable FIFO
 8005e1e:	2340      	movs	r3, #64	; 0x40
 8005e20:	2207      	movs	r2, #7
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	216a      	movs	r1, #106	; 0x6a
 8005e26:	2308      	movs	r3, #8
 8005e28:	20d2      	movs	r0, #210	; 0xd2
 8005e2a:	f7fe fa73 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8005e2e:	2378      	movs	r3, #120	; 0x78
 8005e30:	2207      	movs	r2, #7
 8005e32:	2123      	movs	r1, #35	; 0x23
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	20d2      	movs	r0, #210	; 0xd2
 8005e38:	2308      	movs	r3, #8
 8005e3a:	f7fe fa6b 	bl	8004314 <I2C_ByteWrite>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8005e3e:	2028      	movs	r0, #40	; 0x28
 8005e40:	f7fb f99e 	bl	8001180 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable gyro and accelerometer sensors for FIFO
 8005e44:	2308      	movs	r3, #8
 8005e46:	2207      	movs	r2, #7
 8005e48:	2123      	movs	r1, #35	; 0x23
 8005e4a:	20d2      	movs	r0, #210	; 0xd2
 8005e4c:	9400      	str	r4, [sp, #0]
 8005e4e:	f7fe fa61 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_COUNTH, 1, rawADC, 2);// read FIFO sample count
 8005e52:	2302      	movs	r3, #2
 8005e54:	4d56      	ldr	r5, [pc, #344]	; (8005fb0 <calibrateMPU9250+0x270>)
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	4632      	mov	r2, r6
 8005e5a:	462b      	mov	r3, r5
 8005e5c:	2172      	movs	r1, #114	; 0x72
 8005e5e:	20d2      	movs	r0, #210	; 0xd2
 8005e60:	f7fe fa8e 	bl	8004380 <I2C_ByteRead>
  fifo_count = ((uint16_t)rawADC[0] << 8) | rawADC[1];
 8005e64:	782b      	ldrb	r3, [r5, #0]
 8005e66:	786e      	ldrb	r6, [r5, #1]
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8005e68:	4627      	mov	r7, r4
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8005e6a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8005e6e:	fbb6 f6fb 	udiv	r6, r6, fp
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8005e72:	46a0      	mov	r8, r4
 8005e74:	9402      	str	r4, [sp, #8]
 8005e76:	9405      	str	r4, [sp, #20]
 8005e78:	9404      	str	r4, [sp, #16]
 8005e7a:	9403      	str	r4, [sp, #12]

  for (ii = 0; ii < packet_count; ii++) {
 8005e7c:	b2a3      	uxth	r3, r4
 8005e7e:	429e      	cmp	r6, r3
 8005e80:	d860      	bhi.n	8005f44 <calibrateMPU9250+0x204>
    gyro_bias[2]  += (int32_t) gyro_temp[2];

}
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
    accel_bias[1] /= (int32_t) packet_count;
    accel_bias[2] /= (int32_t) packet_count;
 8005e82:	9b02      	ldr	r3, [sp, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 8005e84:	9a03      	ldr	r2, [sp, #12]
    accel_bias[2] /= (int32_t) packet_count;
 8005e86:	fb93 f3f6 	sdiv	r3, r3, r6
    gyro_bias[0]  /= (int32_t) packet_count;
 8005e8a:	fb92 f0f6 	sdiv	r0, r2, r6
    gyro_bias[1]  /= (int32_t) packet_count;
 8005e8e:	9a04      	ldr	r2, [sp, #16]
    gyro_bias[2]  /= (int32_t) packet_count;

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8005e90:	2b00      	cmp	r3, #0
    gyro_bias[1]  /= (int32_t) packet_count;
 8005e92:	fb92 f5f6 	sdiv	r5, r2, r6
    gyro_bias[2]  /= (int32_t) packet_count;
 8005e96:	9a05      	ldr	r2, [sp, #20]
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8005e98:	bfcc      	ite	gt
 8005e9a:	f5a3 4480 	subgt.w	r4, r3, #16384	; 0x4000
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8005e9e:	f503 4480 	addle.w	r4, r3, #16384	; 0x4000
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8005ea2:	fb98 f8f6 	sdiv	r8, r8, r6
    accel_bias[1] /= (int32_t) packet_count;
 8005ea6:	fb97 f7f6 	sdiv	r7, r7, r6
    gyro_bias[2]  /= (int32_t) packet_count;
 8005eaa:	fb92 f6f6 	sdiv	r6, r2, r6
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YG_OFFS_USRL, 7, 8, data[3]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRH, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRL, 7, 8, data[5]);
*/
	
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8005eae:	f7fa fec9 	bl	8000c44 <__aeabi_i2f>
 8005eb2:	4940      	ldr	r1, [pc, #256]	; (8005fb4 <calibrateMPU9250+0x274>)
 8005eb4:	f7fa ffce 	bl	8000e54 <__aeabi_fdiv>
 8005eb8:	f8ca 0000 	str.w	r0, [sl]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f7fa fec1 	bl	8000c44 <__aeabi_i2f>
 8005ec2:	493c      	ldr	r1, [pc, #240]	; (8005fb4 <calibrateMPU9250+0x274>)
 8005ec4:	f7fa ffc6 	bl	8000e54 <__aeabi_fdiv>
 8005ec8:	f8ca 0004 	str.w	r0, [sl, #4]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f7fa feb9 	bl	8000c44 <__aeabi_i2f>
 8005ed2:	4938      	ldr	r1, [pc, #224]	; (8005fb4 <calibrateMPU9250+0x274>)
 8005ed4:	f7fa ffbe 	bl	8000e54 <__aeabi_fdiv>
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 8005ed8:	2502      	movs	r5, #2
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8005eda:	f8ca 0008 	str.w	r0, [sl, #8]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 8005ede:	9500      	str	r5, [sp, #0]
 8005ee0:	4b33      	ldr	r3, [pc, #204]	; (8005fb0 <calibrateMPU9250+0x270>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	2177      	movs	r1, #119	; 0x77
 8005ee6:	20d2      	movs	r0, #210	; 0xd2
 8005ee8:	f7fe fa4a 	bl	8004380 <I2C_ByteRead>
  accel_bias_reg[0] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YA_OFFSET_H, 1, rawADC, 2);
 8005eec:	9500      	str	r5, [sp, #0]
 8005eee:	4b30      	ldr	r3, [pc, #192]	; (8005fb0 <calibrateMPU9250+0x270>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	217a      	movs	r1, #122	; 0x7a
 8005ef4:	20d2      	movs	r0, #210	; 0xd2
 8005ef6:	f7fe fa43 	bl	8004380 <I2C_ByteRead>
  accel_bias_reg[1] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 1, rawADC, 2);
 8005efa:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <calibrateMPU9250+0x270>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	217d      	movs	r1, #125	; 0x7d
 8005f00:	9500      	str	r5, [sp, #0]
 8005f02:	20d2      	movs	r0, #210	; 0xd2
 8005f04:	f7fe fa3c 	bl	8004380 <I2C_ByteRead>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_L, 7, 8, data[5]);*/


// Output scaled accelerometer biases for manual subtraction in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8005f08:	4640      	mov	r0, r8
 8005f0a:	f7fa fe9b 	bl	8000c44 <__aeabi_i2f>
 8005f0e:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8005f12:	f7fa feeb 	bl	8000cec <__aeabi_fmul>
 8005f16:	f8c9 0000 	str.w	r0, [r9]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	f7fa fe92 	bl	8000c44 <__aeabi_i2f>
 8005f20:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8005f24:	f7fa fee2 	bl	8000cec <__aeabi_fmul>
 8005f28:	f8c9 0004 	str.w	r0, [r9, #4]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f7fa fe89 	bl	8000c44 <__aeabi_i2f>
 8005f32:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8005f36:	f7fa fed9 	bl	8000cec <__aeabi_fmul>
 8005f3a:	f8c9 0008 	str.w	r0, [r9, #8]
}
 8005f3e:	b007      	add	sp, #28
 8005f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_FIFO_R_W, 1, rawADC, 12);// read data for averaging
 8005f44:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <calibrateMPU9250+0x270>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	f8cd b000 	str.w	fp, [sp]
 8005f4c:	2174      	movs	r1, #116	; 0x74
 8005f4e:	20d2      	movs	r0, #210	; 0xd2
 8005f50:	f7fe fa16 	bl	8004380 <I2C_ByteRead>
    accel_temp[0] = (int16_t) (((int16_t)rawADC[0] << 8) | rawADC[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8005f54:	782a      	ldrb	r2, [r5, #0]
 8005f56:	786b      	ldrb	r3, [r5, #1]
 8005f58:	3401      	adds	r4, #1
 8005f5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8005f5e:	b21b      	sxth	r3, r3
    accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 8005f60:	78aa      	ldrb	r2, [r5, #2]
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8005f62:	4498      	add	r8, r3
    accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 8005f64:	78eb      	ldrb	r3, [r5, #3]
 8005f66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[1] += (int32_t) accel_temp[1];
 8005f6a:	b21b      	sxth	r3, r3
    accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 8005f6c:	792a      	ldrb	r2, [r5, #4]
    accel_bias[1] += (int32_t) accel_temp[1];
 8005f6e:	441f      	add	r7, r3
    accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 8005f70:	796b      	ldrb	r3, [r5, #5]
 8005f72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[2] += (int32_t) accel_temp[2];
 8005f76:	9a02      	ldr	r2, [sp, #8]
 8005f78:	b21b      	sxth	r3, r3
 8005f7a:	441a      	add	r2, r3
 8005f7c:	9202      	str	r2, [sp, #8]
    gyro_temp[0]  = (int16_t) (((int16_t)rawADC[6] << 8) | rawADC[7]  ) ;
 8005f7e:	79eb      	ldrb	r3, [r5, #7]
 8005f80:	79aa      	ldrb	r2, [r5, #6]
 8005f82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8005f86:	9a03      	ldr	r2, [sp, #12]
 8005f88:	b21b      	sxth	r3, r3
 8005f8a:	441a      	add	r2, r3
 8005f8c:	9203      	str	r2, [sp, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)rawADC[8] << 8) | rawADC[9]  ) ;
 8005f8e:	7a6b      	ldrb	r3, [r5, #9]
 8005f90:	7a2a      	ldrb	r2, [r5, #8]
 8005f92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8005f96:	9a04      	ldr	r2, [sp, #16]
 8005f98:	b21b      	sxth	r3, r3
 8005f9a:	441a      	add	r2, r3
 8005f9c:	9204      	str	r2, [sp, #16]
    gyro_temp[2]  = (int16_t) (((int16_t)rawADC[10] << 8) | rawADC[11]) ;
 8005f9e:	7aeb      	ldrb	r3, [r5, #11]
 8005fa0:	7aaa      	ldrb	r2, [r5, #10]
 8005fa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8005fa6:	9a05      	ldr	r2, [sp, #20]
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	441a      	add	r2, r3
 8005fac:	9205      	str	r2, [sp, #20]
 8005fae:	e765      	b.n	8005e7c <calibrateMPU9250+0x13c>
 8005fb0:	20000d98 	.word	0x20000d98
 8005fb4:	43030000 	.word	0x43030000

08005fb8 <initAK8963>:
void initAK8963(float * destination)
{
 8005fb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// First extract the factory calibration for each magnetometer axis
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8005fba:	2600      	movs	r6, #0
{
 8005fbc:	4605      	mov	r5, r0
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	2207      	movs	r2, #7
 8005fc2:	210a      	movs	r1, #10
 8005fc4:	9600      	str	r6, [sp, #0]
 8005fc6:	2018      	movs	r0, #24
 8005fc8:	f7fe f9a4 	bl	8004314 <I2C_ByteWrite>
	  HAL_Delay(10);
 8005fcc:	200a      	movs	r0, #10
 8005fce:	f7fb f8d7 	bl	8001180 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x0F);// Enter Fuse ROM access mode
 8005fd2:	230f      	movs	r3, #15
 8005fd4:	2207      	movs	r2, #7
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	210a      	movs	r1, #10
 8005fda:	2308      	movs	r3, #8
 8005fdc:	2018      	movs	r0, #24
 8005fde:	f7fe f999 	bl	8004314 <I2C_ByteWrite>
	  HAL_Delay(10);
 8005fe2:	200a      	movs	r0, #10
 8005fe4:	f7fb f8cc 	bl	8001180 <HAL_Delay>
	  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, AK8963_ASAX, 1, rawADC, 3);// Read the x-, y-, and z-axis calibration values
 8005fe8:	2303      	movs	r3, #3
 8005fea:	4c26      	ldr	r4, [pc, #152]	; (8006084 <initAK8963+0xcc>)
 8005fec:	2201      	movs	r2, #1
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	2110      	movs	r1, #16
 8005ff2:	4623      	mov	r3, r4
 8005ff4:	2018      	movs	r0, #24
 8005ff6:	f7fe f9c3 	bl	8004380 <I2C_ByteRead>
	  destination[0] =  (float)(rawADC[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8005ffa:	7820      	ldrb	r0, [r4, #0]
 8005ffc:	3880      	subs	r0, #128	; 0x80
 8005ffe:	f7fa fe21 	bl	8000c44 <__aeabi_i2f>
 8006002:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006006:	f7fa fe71 	bl	8000cec <__aeabi_fmul>
 800600a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800600e:	f7fa fd65 	bl	8000adc <__addsf3>
 8006012:	6028      	str	r0, [r5, #0]
	  destination[1] =  (float)(rawADC[1] - 128)/256.0f + 1.0f;
 8006014:	7860      	ldrb	r0, [r4, #1]
 8006016:	3880      	subs	r0, #128	; 0x80
 8006018:	f7fa fe14 	bl	8000c44 <__aeabi_i2f>
 800601c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006020:	f7fa fe64 	bl	8000cec <__aeabi_fmul>
 8006024:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006028:	f7fa fd58 	bl	8000adc <__addsf3>
 800602c:	6068      	str	r0, [r5, #4]
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 800602e:	78a0      	ldrb	r0, [r4, #2]
 8006030:	3880      	subs	r0, #128	; 0x80
 8006032:	f7fa fe07 	bl	8000c44 <__aeabi_i2f>
 8006036:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800603a:	f7fa fe57 	bl	8000cec <__aeabi_fmul>
 800603e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006042:	f7fa fd4b 	bl	8000adc <__addsf3>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8006046:	2308      	movs	r3, #8
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 8006048:	60a8      	str	r0, [r5, #8]
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 800604a:	2207      	movs	r2, #7
 800604c:	210a      	movs	r1, #10
 800604e:	9600      	str	r6, [sp, #0]
 8006050:	2018      	movs	r0, #24
 8006052:	f7fe f95f 	bl	8004314 <I2C_ByteWrite>
	  HAL_Delay(10);
 8006056:	200a      	movs	r0, #10
 8006058:	f7fb f892 	bl	8001180 <HAL_Delay>
	  // Configure the magnetometer for continuous read and highest resolution
	  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <initAK8963+0xd0>)
 800605e:	210a      	movs	r1, #10
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <initAK8963+0xd4>)
 8006064:	2018      	movs	r0, #24
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800606c:	b2db      	uxtb	r3, r3
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2207      	movs	r2, #7
 8006072:	2308      	movs	r3, #8
 8006074:	f7fe f94e 	bl	8004314 <I2C_ByteWrite>
	  HAL_Delay(10);
 8006078:	200a      	movs	r0, #10
}
 800607a:	b002      	add	sp, #8
 800607c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  HAL_Delay(10);
 8006080:	f7fb b87e 	b.w	8001180 <HAL_Delay>
 8006084:	20000d98 	.word	0x20000d98
 8006088:	20000009 	.word	0x20000009
 800608c:	20000008 	.word	0x20000008

08006090 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t selfTest[6] = {0, 0, 0, 0, 0, 0};
   uint16_t i, ii;
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8006094:	2400      	movs	r4, #0
   float factoryTrim[6];
   uint8_t FS = GFS_250DPS;

   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8006096:	2502      	movs	r5, #2
{
 8006098:	b097      	sub	sp, #92	; 0x5c
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 800609a:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 800609e:	ae0c      	add	r6, sp, #48	; 0x30
 80060a0:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 80060a4:	f8aa 4004 	strh.w	r4, [sl, #4]
 80060a8:	80b4      	strh	r4, [r6, #4]
 80060aa:	f8ab 4004 	strh.w	r4, [fp, #4]
{
 80060ae:	9007      	str	r0, [sp, #28]
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 80060b0:	9400      	str	r4, [sp, #0]
 80060b2:	2308      	movs	r3, #8
 80060b4:	2207      	movs	r2, #7
 80060b6:	2119      	movs	r1, #25
 80060b8:	20d2      	movs	r0, #210	; 0xd2
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80060ba:	9408      	str	r4, [sp, #32]
 80060bc:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 80060c0:	940a      	str	r4, [sp, #40]	; 0x28
 80060c2:	940c      	str	r4, [sp, #48]	; 0x30
 80060c4:	940e      	str	r4, [sp, #56]	; 0x38
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 80060c6:	f7fe f925 	bl	8004314 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80060ca:	9500      	str	r5, [sp, #0]
 80060cc:	2308      	movs	r3, #8
 80060ce:	2207      	movs	r2, #7
 80060d0:	211a      	movs	r1, #26
 80060d2:	20d2      	movs	r0, #210	; 0xd2
 80060d4:	f7fe f91e 	bl	8004314 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, FS<<3);// Set full scale range for the gyro to 250 dps
 80060d8:	9400      	str	r4, [sp, #0]
 80060da:	2308      	movs	r3, #8
 80060dc:	2207      	movs	r2, #7
 80060de:	211b      	movs	r1, #27
 80060e0:	20d2      	movs	r0, #210	; 0xd2
 80060e2:	f7fe f917 	bl	8004314 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, 0x1D, 7, 8, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80060e6:	9500      	str	r5, [sp, #0]
 80060e8:	2308      	movs	r3, #8
 80060ea:	2207      	movs	r2, #7
 80060ec:	211d      	movs	r1, #29
 80060ee:	20d2      	movs	r0, #210	; 0xd2
 80060f0:	f7fe f910 	bl	8004314 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, FS<<3);// Set full scale range for the accelerometer to 2 g
 80060f4:	9400      	str	r4, [sp, #0]
 80060f6:	2308      	movs	r3, #8
 80060f8:	2207      	movs	r2, #7
 80060fa:	211c      	movs	r1, #28
 80060fc:	20d2      	movs	r0, #210	; 0xd2
 80060fe:	f7fe f909 	bl	8004314 <I2C_ByteWrite>
 8006102:	25c8      	movs	r5, #200	; 0xc8

  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);  // Read the six raw data registers into data array
 8006104:	4ccc      	ldr	r4, [pc, #816]	; (8006438 <MPU9250SelfTest+0x3a8>)
 8006106:	2706      	movs	r7, #6
 8006108:	4bcb      	ldr	r3, [pc, #812]	; (8006438 <MPU9250SelfTest+0x3a8>)
 800610a:	2201      	movs	r2, #1
 800610c:	213b      	movs	r1, #59	; 0x3b
 800610e:	20d2      	movs	r0, #210	; 0xd2
 8006110:	9700      	str	r7, [sp, #0]
 8006112:	f7fe f935 	bl	8004380 <I2C_ByteRead>
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006116:	7822      	ldrb	r2, [r4, #0]
 8006118:	7863      	ldrb	r3, [r4, #1]
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 800611a:	2143      	movs	r1, #67	; 0x43
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800611c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006120:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006124:	20d2      	movs	r0, #210	; 0xd2
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006126:	4413      	add	r3, r2
 8006128:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 800612c:	78a2      	ldrb	r2, [r4, #2]
 800612e:	78e3      	ldrb	r3, [r4, #3]
 8006130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006134:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8006138:	4413      	add	r3, r2
 800613a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 800613e:	7922      	ldrb	r2, [r4, #4]
 8006140:	7963      	ldrb	r3, [r4, #5]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006142:	9700      	str	r7, [sp, #0]
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006144:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006148:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800614c:	4413      	add	r3, r2
 800614e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006152:	2201      	movs	r2, #1
 8006154:	4bb8      	ldr	r3, [pc, #736]	; (8006438 <MPU9250SelfTest+0x3a8>)
 8006156:	f7fe f913 	bl	8004380 <I2C_ByteRead>
  gAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800615a:	7822      	ldrb	r2, [r4, #0]
 800615c:	7863      	ldrb	r3, [r4, #1]
 800615e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006162:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006166:	4413      	add	r3, r2
 8006168:	f8ad 3020 	strh.w	r3, [sp, #32]
  gAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 800616c:	78a2      	ldrb	r2, [r4, #2]
 800616e:	78e3      	ldrb	r3, [r4, #3]
 8006170:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006174:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8006178:	4413      	add	r3, r2
 800617a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  gAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 800617e:	7922      	ldrb	r2, [r4, #4]
 8006180:	7963      	ldrb	r3, [r4, #5]
 8006182:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006186:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800618a:	4413      	add	r3, r2
 800618c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8006190:	1e6b      	subs	r3, r5, #1
 8006192:	b29d      	uxth	r5, r3
  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8006194:	2d00      	cmp	r5, #0
 8006196:	d1b6      	bne.n	8006106 <MPU9250SelfTest+0x76>
 8006198:	462b      	mov	r3, r5
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
  aAvg[ii] /= 200;
 800619a:	21c8      	movs	r1, #200	; 0xc8
 800619c:	f93a 2013 	ldrsh.w	r2, [sl, r3, lsl #1]
  gAvg[ii] /= 200;
 80061a0:	a808      	add	r0, sp, #32
  aAvg[ii] /= 200;
 80061a2:	fb92 f2f1 	sdiv	r2, r2, r1
 80061a6:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
  gAvg[ii] /= 200;
 80061aa:	aa08      	add	r2, sp, #32
 80061ac:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80061b0:	fb92 f2f1 	sdiv	r2, r2, r1
 80061b4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 80061b8:	3301      	adds	r3, #1
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d1ee      	bne.n	800619c <MPU9250SelfTest+0x10c>
  }

// Configure the accelerometer for self-test
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80061be:	25e0      	movs	r5, #224	; 0xe0
 80061c0:	2308      	movs	r3, #8
 80061c2:	9500      	str	r5, [sp, #0]
 80061c4:	2207      	movs	r2, #7
 80061c6:	211c      	movs	r1, #28
 80061c8:	20d2      	movs	r0, #210	; 0xd2
 80061ca:	f7fe f8a3 	bl	8004314 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80061ce:	9500      	str	r5, [sp, #0]
 80061d0:	2308      	movs	r3, #8
 80061d2:	2207      	movs	r2, #7
 80061d4:	211b      	movs	r1, #27
 80061d6:	20d2      	movs	r0, #210	; 0xd2
 80061d8:	f7fe f89c 	bl	8004314 <I2C_ByteWrite>
   HAL_Delay(25); // Delay a while to let the device stabilize
 80061dc:	2019      	movs	r0, #25
 80061de:	f7fa ffcf 	bl	8001180 <HAL_Delay>
 80061e2:	25c8      	movs	r5, #200	; 0xc8

  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6); // Read the six raw data registers into data array
 80061e4:	4f94      	ldr	r7, [pc, #592]	; (8006438 <MPU9250SelfTest+0x3a8>)
 80061e6:	f04f 0806 	mov.w	r8, #6
 80061ea:	463b      	mov	r3, r7
 80061ec:	2201      	movs	r2, #1
 80061ee:	213b      	movs	r1, #59	; 0x3b
 80061f0:	20d2      	movs	r0, #210	; 0xd2
 80061f2:	f8cd 8000 	str.w	r8, [sp]
 80061f6:	f7fe f8c3 	bl	8004380 <I2C_ByteRead>
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80061fa:	7822      	ldrb	r2, [r4, #0]
 80061fc:	7863      	ldrb	r3, [r4, #1]
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 80061fe:	2143      	movs	r1, #67	; 0x43
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006200:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006204:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006208:	20d2      	movs	r0, #210	; 0xd2
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800620a:	4413      	add	r3, r2
 800620c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8006210:	78a2      	ldrb	r2, [r4, #2]
 8006212:	78e3      	ldrb	r3, [r4, #3]
 8006214:	3d01      	subs	r5, #1
 8006216:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800621a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800621e:	b2ad      	uxth	r5, r5
 8006220:	4413      	add	r3, r2
 8006222:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006226:	7922      	ldrb	r2, [r4, #4]
 8006228:	7963      	ldrb	r3, [r4, #5]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 800622a:	f8cd 8000 	str.w	r8, [sp]
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 800622e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006232:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8006236:	4413      	add	r3, r2
 8006238:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 800623c:	2201      	movs	r2, #1
 800623e:	463b      	mov	r3, r7
 8006240:	f7fe f89e 	bl	8004380 <I2C_ByteRead>
  gSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006244:	7822      	ldrb	r2, [r4, #0]
 8006246:	7863      	ldrb	r3, [r4, #1]
 8006248:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800624c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8006250:	4413      	add	r3, r2
 8006252:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  gSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8006256:	78a2      	ldrb	r2, [r4, #2]
 8006258:	78e3      	ldrb	r3, [r4, #3]
 800625a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800625e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8006262:	4413      	add	r3, r2
 8006264:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
  gSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006268:	7922      	ldrb	r2, [r4, #4]
 800626a:	7963      	ldrb	r3, [r4, #5]
 800626c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006270:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8006274:	4413      	add	r3, r2
 8006276:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 800627a:	2d00      	cmp	r5, #0
 800627c:	d1b3      	bne.n	80061e6 <MPU9250SelfTest+0x156>
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
  aSTAvg[ii] /= 200;
 800627e:	22c8      	movs	r2, #200	; 0xc8
 8006280:	f936 3015 	ldrsh.w	r3, [r6, r5, lsl #1]
 8006284:	fb93 f3f2 	sdiv	r3, r3, r2
 8006288:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
  gSTAvg[ii] /= 200;
 800628c:	f93b 3015 	ldrsh.w	r3, [fp, r5, lsl #1]
 8006290:	fb93 f3f2 	sdiv	r3, r3, r2
 8006294:	f82b 3015 	strh.w	r3, [fp, r5, lsl #1]
 8006298:	3501      	adds	r5, #1
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 800629a:	2d03      	cmp	r5, #3
 800629c:	d1f0      	bne.n	8006280 <MPU9250SelfTest+0x1f0>
  }

 // Configure the gyro and accelerometer for normal operation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 800629e:	2400      	movs	r4, #0
 80062a0:	2308      	movs	r3, #8
 80062a2:	2207      	movs	r2, #7
 80062a4:	211c      	movs	r1, #28
 80062a6:	20d2      	movs	r0, #210	; 0xd2
 80062a8:	9400      	str	r4, [sp, #0]
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
  HAL_Delay(25); // Delay a while to let the device stabilize

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 80062aa:	4f63      	ldr	r7, [pc, #396]	; (8006438 <MPU9250SelfTest+0x3a8>)
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 80062ac:	f7fe f832 	bl	8004314 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
 80062b0:	2308      	movs	r3, #8
 80062b2:	2207      	movs	r2, #7
 80062b4:	211b      	movs	r1, #27
 80062b6:	20d2      	movs	r0, #210	; 0xd2
 80062b8:	9400      	str	r4, [sp, #0]
 80062ba:	f7fe f82b 	bl	8004314 <I2C_ByteWrite>
  HAL_Delay(25); // Delay a while to let the device stabilize
 80062be:	2019      	movs	r0, #25
 80062c0:	f7fa ff5e 	bl	8001180 <HAL_Delay>
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 80062c4:	463b      	mov	r3, r7
 80062c6:	9500      	str	r5, [sp, #0]
 80062c8:	2201      	movs	r2, #1
 80062ca:	210d      	movs	r1, #13
 80062cc:	20d2      	movs	r0, #210	; 0xd2
 80062ce:	f7fe f857 	bl	8004380 <I2C_ByteRead>
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 80062d2:	78bb      	ldrb	r3, [r7, #2]
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
 80062d4:	f897 9000 	ldrb.w	r9, [r7]
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
 80062d8:	f897 8001 	ldrb.w	r8, [r7, #1]
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 80062dc:	2201      	movs	r2, #1
 80062de:	4621      	mov	r1, r4
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 80062e0:	9302      	str	r3, [sp, #8]
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 80062e2:	9500      	str	r5, [sp, #0]
 80062e4:	463b      	mov	r3, r7
 80062e6:	20d2      	movs	r0, #210	; 0xd2
 80062e8:	f7fe f84a 	bl	8004380 <I2C_ByteRead>
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 80062ec:	783b      	ldrb	r3, [r7, #0]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 80062ee:	4648      	mov	r0, r9
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 80062f0:	9305      	str	r3, [sp, #20]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 80062f2:	787b      	ldrb	r3, [r7, #1]
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results
 80062f4:	78bd      	ldrb	r5, [r7, #2]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 80062f6:	9306      	str	r3, [sp, #24]
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 80062f8:	f7fa fca0 	bl	8000c3c <__aeabi_ui2f>
 80062fc:	f7fa f894 	bl	8000428 <__aeabi_f2d>
 8006300:	2200      	movs	r2, #0
 8006302:	4b4e      	ldr	r3, [pc, #312]	; (800643c <MPU9250SelfTest+0x3ac>)
 8006304:	f7f9 ff30 	bl	8000168 <__aeabi_dsub>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	a146      	add	r1, pc, #280	; (adr r1, 8006428 <MPU9250SelfTest+0x398>)
 800630e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006312:	f002 fee9 	bl	80090e8 <pow>
 8006316:	a346      	add	r3, pc, #280	; (adr r3, 8006430 <MPU9250SelfTest+0x3a0>)
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f7fa f8d8 	bl	80004d0 <__aeabi_dmul>
 8006320:	f7fa fb86 	bl	8000a30 <__aeabi_d2f>
 8006324:	9010      	str	r0, [sp, #64]	; 0x40
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8006326:	4640      	mov	r0, r8
 8006328:	f7fa fc88 	bl	8000c3c <__aeabi_ui2f>
 800632c:	f7fa f87c 	bl	8000428 <__aeabi_f2d>
 8006330:	2200      	movs	r2, #0
 8006332:	4b42      	ldr	r3, [pc, #264]	; (800643c <MPU9250SelfTest+0x3ac>)
 8006334:	f7f9 ff18 	bl	8000168 <__aeabi_dsub>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	a13a      	add	r1, pc, #232	; (adr r1, 8006428 <MPU9250SelfTest+0x398>)
 800633e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006342:	f002 fed1 	bl	80090e8 <pow>
 8006346:	a33a      	add	r3, pc, #232	; (adr r3, 8006430 <MPU9250SelfTest+0x3a0>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7fa f8c0 	bl	80004d0 <__aeabi_dmul>
 8006350:	f7fa fb6e 	bl	8000a30 <__aeabi_d2f>
 8006354:	9011      	str	r0, [sp, #68]	; 0x44
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8006356:	9802      	ldr	r0, [sp, #8]
 8006358:	f7fa fc70 	bl	8000c3c <__aeabi_ui2f>
 800635c:	f7fa f864 	bl	8000428 <__aeabi_f2d>
 8006360:	2200      	movs	r2, #0
 8006362:	4b36      	ldr	r3, [pc, #216]	; (800643c <MPU9250SelfTest+0x3ac>)
 8006364:	f7f9 ff00 	bl	8000168 <__aeabi_dsub>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	a12e      	add	r1, pc, #184	; (adr r1, 8006428 <MPU9250SelfTest+0x398>)
 800636e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006372:	f002 feb9 	bl	80090e8 <pow>
 8006376:	a32e      	add	r3, pc, #184	; (adr r3, 8006430 <MPU9250SelfTest+0x3a0>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7fa f8a8 	bl	80004d0 <__aeabi_dmul>
 8006380:	f7fa fb56 	bl	8000a30 <__aeabi_d2f>
 8006384:	9012      	str	r0, [sp, #72]	; 0x48
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8006386:	9805      	ldr	r0, [sp, #20]
 8006388:	f7fa fc58 	bl	8000c3c <__aeabi_ui2f>
 800638c:	f7fa f84c 	bl	8000428 <__aeabi_f2d>
 8006390:	2200      	movs	r2, #0
 8006392:	4b2a      	ldr	r3, [pc, #168]	; (800643c <MPU9250SelfTest+0x3ac>)
 8006394:	f7f9 fee8 	bl	8000168 <__aeabi_dsub>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	a122      	add	r1, pc, #136	; (adr r1, 8006428 <MPU9250SelfTest+0x398>)
 800639e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a2:	f002 fea1 	bl	80090e8 <pow>
 80063a6:	a322      	add	r3, pc, #136	; (adr r3, 8006430 <MPU9250SelfTest+0x3a0>)
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f7fa f890 	bl	80004d0 <__aeabi_dmul>
 80063b0:	f7fa fb3e 	bl	8000a30 <__aeabi_d2f>
 80063b4:	9013      	str	r0, [sp, #76]	; 0x4c
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 80063b6:	9806      	ldr	r0, [sp, #24]
 80063b8:	f7fa fc40 	bl	8000c3c <__aeabi_ui2f>
 80063bc:	f7fa f834 	bl	8000428 <__aeabi_f2d>
 80063c0:	2200      	movs	r2, #0
 80063c2:	4b1e      	ldr	r3, [pc, #120]	; (800643c <MPU9250SelfTest+0x3ac>)
 80063c4:	f7f9 fed0 	bl	8000168 <__aeabi_dsub>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	a116      	add	r1, pc, #88	; (adr r1, 8006428 <MPU9250SelfTest+0x398>)
 80063ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063d2:	f002 fe89 	bl	80090e8 <pow>
 80063d6:	a316      	add	r3, pc, #88	; (adr r3, 8006430 <MPU9250SelfTest+0x3a0>)
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f7fa f878 	bl	80004d0 <__aeabi_dmul>
 80063e0:	f7fa fb26 	bl	8000a30 <__aeabi_d2f>
 80063e4:	9014      	str	r0, [sp, #80]	; 0x50
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 80063e6:	4628      	mov	r0, r5
 80063e8:	f7fa fc28 	bl	8000c3c <__aeabi_ui2f>
 80063ec:	f7fa f81c 	bl	8000428 <__aeabi_f2d>
 80063f0:	2200      	movs	r2, #0
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <MPU9250SelfTest+0x3ac>)
 80063f4:	f7f9 feb8 	bl	8000168 <__aeabi_dsub>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	a10a      	add	r1, pc, #40	; (adr r1, 8006428 <MPU9250SelfTest+0x398>)
 80063fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006402:	f002 fe71 	bl	80090e8 <pow>
 8006406:	a30a      	add	r3, pc, #40	; (adr r3, 8006430 <MPU9250SelfTest+0x3a0>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7fa f860 	bl	80004d0 <__aeabi_dmul>
 8006410:	f7fa fb0e 	bl	8000a30 <__aeabi_d2f>

 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (i = 0; i < 3; i++) {
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.0; // Report percent differences
 8006414:	f04f 0800 	mov.w	r8, #0
 8006418:	9b07      	ldr	r3, [sp, #28]
 800641a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8006440 <MPU9250SelfTest+0x3b0>
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 800641e:	9015      	str	r0, [sp, #84]	; 0x54
 8006420:	af0f      	add	r7, sp, #60	; 0x3c
 8006422:	1f1d      	subs	r5, r3, #4
 8006424:	e00e      	b.n	8006444 <MPU9250SelfTest+0x3b4>
 8006426:	bf00      	nop
 8006428:	c28f5c29 	.word	0xc28f5c29
 800642c:	3ff028f5 	.word	0x3ff028f5
 8006430:	00000000 	.word	0x00000000
 8006434:	40a47800 	.word	0x40a47800
 8006438:	20000d98 	.word	0x20000d98
 800643c:	3ff00000 	.word	0x3ff00000
 8006440:	40590000 	.word	0x40590000
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.0; // Report percent differences
 8006444:	f93a 3014 	ldrsh.w	r3, [sl, r4, lsl #1]
 8006448:	f936 0014 	ldrsh.w	r0, [r6, r4, lsl #1]
 800644c:	1ac0      	subs	r0, r0, r3
 800644e:	f7fa fbf9 	bl	8000c44 <__aeabi_i2f>
 8006452:	f7f9 ffe9 	bl	8000428 <__aeabi_f2d>
 8006456:	4642      	mov	r2, r8
 8006458:	464b      	mov	r3, r9
 800645a:	f7fa f839 	bl	80004d0 <__aeabi_dmul>
 800645e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006462:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8006466:	f7f9 ffdf 	bl	8000428 <__aeabi_f2d>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006472:	f7fa f957 	bl	8000724 <__aeabi_ddiv>
 8006476:	4642      	mov	r2, r8
 8006478:	464b      	mov	r3, r9
 800647a:	f7f9 fe75 	bl	8000168 <__aeabi_dsub>
 800647e:	f7fa fad7 	bl	8000a30 <__aeabi_d2f>
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.0; // Report percent differences
 8006482:	ab08      	add	r3, sp, #32
 8006484:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.0; // Report percent differences
 8006488:	f845 0f04 	str.w	r0, [r5, #4]!
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.0; // Report percent differences
 800648c:	f93b 0014 	ldrsh.w	r0, [fp, r4, lsl #1]
 8006490:	3401      	adds	r4, #1
 8006492:	1ac0      	subs	r0, r0, r3
 8006494:	f7fa fbd6 	bl	8000c44 <__aeabi_i2f>
 8006498:	f7f9 ffc6 	bl	8000428 <__aeabi_f2d>
 800649c:	4642      	mov	r2, r8
 800649e:	464b      	mov	r3, r9
 80064a0:	f7fa f816 	bl	80004d0 <__aeabi_dmul>
 80064a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f7f9 ffbd 	bl	8000428 <__aeabi_f2d>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b6:	f7fa f935 	bl	8000724 <__aeabi_ddiv>
 80064ba:	4642      	mov	r2, r8
 80064bc:	464b      	mov	r3, r9
 80064be:	f7f9 fe53 	bl	8000168 <__aeabi_dsub>
 80064c2:	f7fa fab5 	bl	8000a30 <__aeabi_d2f>
   for (i = 0; i < 3; i++) {
 80064c6:	2c03      	cmp	r4, #3
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.0; // Report percent differences
 80064c8:	60e8      	str	r0, [r5, #12]
   for (i = 0; i < 3; i++) {
 80064ca:	d1bb      	bne.n	8006444 <MPU9250SelfTest+0x3b4>
   }
}
 80064cc:	b017      	add	sp, #92	; 0x5c
 80064ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d2:	bf00      	nop

080064d4 <MPU9250_Init>:
{
 80064d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 80064d8:	2401      	movs	r4, #1
 80064da:	4dc0      	ldr	r5, [pc, #768]	; (80067dc <MPU9250_Init+0x308>)
{
 80064dc:	b085      	sub	sp, #20
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 80064de:	462b      	mov	r3, r5
 80064e0:	4622      	mov	r2, r4
 80064e2:	2175      	movs	r1, #117	; 0x75
 80064e4:	20d2      	movs	r0, #210	; 0xd2
 80064e6:	9400      	str	r4, [sp, #0]
 80064e8:	f7fd ff4a 	bl	8004380 <I2C_ByteRead>
    whoami = rawADC[0];
 80064ec:	782e      	ldrb	r6, [r5, #0]
    sprintf(Buf, "I AM 0x%x\r\n", whoami);
 80064ee:	49bc      	ldr	r1, [pc, #752]	; (80067e0 <MPU9250_Init+0x30c>)
 80064f0:	4632      	mov	r2, r6
 80064f2:	48bc      	ldr	r0, [pc, #752]	; (80067e4 <MPU9250_Init+0x310>)
 80064f4:	f002 f90e 	bl	8008714 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80064f8:	48ba      	ldr	r0, [pc, #744]	; (80067e4 <MPU9250_Init+0x310>)
 80064fa:	f7f9 fe29 	bl	8000150 <strlen>
 80064fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006502:	b282      	uxth	r2, r0
 8006504:	49b7      	ldr	r1, [pc, #732]	; (80067e4 <MPU9250_Init+0x310>)
 8006506:	48b8      	ldr	r0, [pc, #736]	; (80067e8 <MPU9250_Init+0x314>)
 8006508:	f7fd fa46 	bl	8003998 <HAL_UART_Transmit>
    sprintf(Buf, "I SHOULD BE 0x71\r\n");
 800650c:	49b7      	ldr	r1, [pc, #732]	; (80067ec <MPU9250_Init+0x318>)
 800650e:	48b5      	ldr	r0, [pc, #724]	; (80067e4 <MPU9250_Init+0x310>)
 8006510:	f002 f924 	bl	800875c <strcpy>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006514:	48b3      	ldr	r0, [pc, #716]	; (80067e4 <MPU9250_Init+0x310>)
 8006516:	f7f9 fe1b 	bl	8000150 <strlen>
 800651a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800651e:	b282      	uxth	r2, r0
 8006520:	49b0      	ldr	r1, [pc, #704]	; (80067e4 <MPU9250_Init+0x310>)
 8006522:	48b1      	ldr	r0, [pc, #708]	; (80067e8 <MPU9250_Init+0x314>)
 8006524:	f7fd fa38 	bl	8003998 <HAL_UART_Transmit>
  if(whoami == 0x71)
 8006528:	2e71      	cmp	r6, #113	; 0x71
 800652a:	f040 82a8 	bne.w	8006a7e <MPU9250_Init+0x5aa>
		sprintf(Buf, "MPU-9250 Init Start (9-DOF 16-bit mortion sensor)\r\nMPU-9250 SelfTest Start\r\n");
 800652e:	49b0      	ldr	r1, [pc, #704]	; (80067f0 <MPU9250_Init+0x31c>)
 8006530:	48ac      	ldr	r0, [pc, #688]	; (80067e4 <MPU9250_Init+0x310>)
 8006532:	f002 f913 	bl	800875c <strcpy>
	  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006536:	48ab      	ldr	r0, [pc, #684]	; (80067e4 <MPU9250_Init+0x310>)
 8006538:	f7f9 fe0a 	bl	8000150 <strlen>
 800653c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006540:	b282      	uxth	r2, r0
 8006542:	49a8      	ldr	r1, [pc, #672]	; (80067e4 <MPU9250_Init+0x310>)
 8006544:	48a8      	ldr	r0, [pc, #672]	; (80067e8 <MPU9250_Init+0x314>)
 8006546:	f7fd fa27 	bl	8003998 <HAL_UART_Transmit>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 800654a:	2380      	movs	r3, #128	; 0x80
	  MPU9250SelfTest(SelfTest);
 800654c:	4ea9      	ldr	r6, [pc, #676]	; (80067f4 <MPU9250_Init+0x320>)
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 800654e:	2207      	movs	r2, #7
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	216b      	movs	r1, #107	; 0x6b
 8006554:	2308      	movs	r3, #8
 8006556:	20d2      	movs	r0, #210	; 0xd2
 8006558:	f7fd fedc 	bl	8004314 <I2C_ByteWrite>
	  MPU9250SelfTest(SelfTest);
 800655c:	4630      	mov	r0, r6
 800655e:	f7ff fd97 	bl	8006090 <MPU9250SelfTest>
		sprintf(Buf, "Self Test Finish\r\n");
 8006562:	49a5      	ldr	r1, [pc, #660]	; (80067f8 <MPU9250_Init+0x324>)
 8006564:	489f      	ldr	r0, [pc, #636]	; (80067e4 <MPU9250_Init+0x310>)
 8006566:	f002 f8f9 	bl	800875c <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800656a:	489e      	ldr	r0, [pc, #632]	; (80067e4 <MPU9250_Init+0x310>)
 800656c:	f7f9 fdf0 	bl	8000150 <strlen>
 8006570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006574:	b282      	uxth	r2, r0
 8006576:	499b      	ldr	r1, [pc, #620]	; (80067e4 <MPU9250_Init+0x310>)
 8006578:	489b      	ldr	r0, [pc, #620]	; (80067e8 <MPU9250_Init+0x314>)
 800657a:	f7fd fa0d 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800657e:	2064      	movs	r0, #100	; 0x64
 8006580:	f7fa fdfe 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " x-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[0]);
 8006584:	6830      	ldr	r0, [r6, #0]
 8006586:	f7f9 ff4f 	bl	8000428 <__aeabi_f2d>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4895      	ldr	r0, [pc, #596]	; (80067e4 <MPU9250_Init+0x310>)
 8006590:	499a      	ldr	r1, [pc, #616]	; (80067fc <MPU9250_Init+0x328>)
 8006592:	f002 f8bf 	bl	8008714 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006596:	4893      	ldr	r0, [pc, #588]	; (80067e4 <MPU9250_Init+0x310>)
 8006598:	f7f9 fdda 	bl	8000150 <strlen>
 800659c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065a0:	b282      	uxth	r2, r0
 80065a2:	4990      	ldr	r1, [pc, #576]	; (80067e4 <MPU9250_Init+0x310>)
 80065a4:	4890      	ldr	r0, [pc, #576]	; (80067e8 <MPU9250_Init+0x314>)
 80065a6:	f7fd f9f7 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80065aa:	2064      	movs	r0, #100	; 0x64
 80065ac:	f7fa fde8 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " y-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[1]);
 80065b0:	6870      	ldr	r0, [r6, #4]
 80065b2:	f7f9 ff39 	bl	8000428 <__aeabi_f2d>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	488a      	ldr	r0, [pc, #552]	; (80067e4 <MPU9250_Init+0x310>)
 80065bc:	4990      	ldr	r1, [pc, #576]	; (8006800 <MPU9250_Init+0x32c>)
 80065be:	f002 f8a9 	bl	8008714 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80065c2:	4888      	ldr	r0, [pc, #544]	; (80067e4 <MPU9250_Init+0x310>)
 80065c4:	f7f9 fdc4 	bl	8000150 <strlen>
 80065c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065cc:	b282      	uxth	r2, r0
 80065ce:	4985      	ldr	r1, [pc, #532]	; (80067e4 <MPU9250_Init+0x310>)
 80065d0:	4885      	ldr	r0, [pc, #532]	; (80067e8 <MPU9250_Init+0x314>)
 80065d2:	f7fd f9e1 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80065d6:	2064      	movs	r0, #100	; 0x64
 80065d8:	f7fa fdd2 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " z-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[2]);
 80065dc:	68b0      	ldr	r0, [r6, #8]
 80065de:	f7f9 ff23 	bl	8000428 <__aeabi_f2d>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	487f      	ldr	r0, [pc, #508]	; (80067e4 <MPU9250_Init+0x310>)
 80065e8:	4986      	ldr	r1, [pc, #536]	; (8006804 <MPU9250_Init+0x330>)
 80065ea:	f002 f893 	bl	8008714 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80065ee:	487d      	ldr	r0, [pc, #500]	; (80067e4 <MPU9250_Init+0x310>)
 80065f0:	f7f9 fdae 	bl	8000150 <strlen>
 80065f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065f8:	b282      	uxth	r2, r0
 80065fa:	497a      	ldr	r1, [pc, #488]	; (80067e4 <MPU9250_Init+0x310>)
 80065fc:	487a      	ldr	r0, [pc, #488]	; (80067e8 <MPU9250_Init+0x314>)
 80065fe:	f7fd f9cb 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006602:	2064      	movs	r0, #100	; 0x64
 8006604:	f7fa fdbc 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " x-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[3]);
 8006608:	68f0      	ldr	r0, [r6, #12]
 800660a:	f7f9 ff0d 	bl	8000428 <__aeabi_f2d>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4874      	ldr	r0, [pc, #464]	; (80067e4 <MPU9250_Init+0x310>)
 8006614:	497c      	ldr	r1, [pc, #496]	; (8006808 <MPU9250_Init+0x334>)
 8006616:	f002 f87d 	bl	8008714 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800661a:	4872      	ldr	r0, [pc, #456]	; (80067e4 <MPU9250_Init+0x310>)
 800661c:	f7f9 fd98 	bl	8000150 <strlen>
 8006620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006624:	b282      	uxth	r2, r0
 8006626:	496f      	ldr	r1, [pc, #444]	; (80067e4 <MPU9250_Init+0x310>)
 8006628:	486f      	ldr	r0, [pc, #444]	; (80067e8 <MPU9250_Init+0x314>)
 800662a:	f7fd f9b5 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800662e:	2064      	movs	r0, #100	; 0x64
 8006630:	f7fa fda6 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " y-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[4]);
 8006634:	6930      	ldr	r0, [r6, #16]
 8006636:	f7f9 fef7 	bl	8000428 <__aeabi_f2d>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4869      	ldr	r0, [pc, #420]	; (80067e4 <MPU9250_Init+0x310>)
 8006640:	4972      	ldr	r1, [pc, #456]	; (800680c <MPU9250_Init+0x338>)
 8006642:	f002 f867 	bl	8008714 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006646:	4867      	ldr	r0, [pc, #412]	; (80067e4 <MPU9250_Init+0x310>)
 8006648:	f7f9 fd82 	bl	8000150 <strlen>
 800664c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006650:	b282      	uxth	r2, r0
 8006652:	4964      	ldr	r1, [pc, #400]	; (80067e4 <MPU9250_Init+0x310>)
 8006654:	4864      	ldr	r0, [pc, #400]	; (80067e8 <MPU9250_Init+0x314>)
 8006656:	f7fd f99f 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800665a:	2064      	movs	r0, #100	; 0x64
 800665c:	f7fa fd90 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " z-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[5]);
 8006660:	6970      	ldr	r0, [r6, #20]
 8006662:	f7f9 fee1 	bl	8000428 <__aeabi_f2d>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	485e      	ldr	r0, [pc, #376]	; (80067e4 <MPU9250_Init+0x310>)
 800666c:	4968      	ldr	r1, [pc, #416]	; (8006810 <MPU9250_Init+0x33c>)
 800666e:	f002 f851 	bl	8008714 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006672:	485c      	ldr	r0, [pc, #368]	; (80067e4 <MPU9250_Init+0x310>)
 8006674:	f7f9 fd6c 	bl	8000150 <strlen>
 8006678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800667c:	b282      	uxth	r2, r0
 800667e:	4959      	ldr	r1, [pc, #356]	; (80067e4 <MPU9250_Init+0x310>)
 8006680:	4859      	ldr	r0, [pc, #356]	; (80067e8 <MPU9250_Init+0x314>)
 8006682:	f7fd f989 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006686:	2064      	movs	r0, #100	; 0x64
 8006688:	f7fa fd7a 	bl	8001180 <HAL_Delay>
		sprintf(Buf, "MPU-9250 Calibration Start\r\n");
 800668c:	4961      	ldr	r1, [pc, #388]	; (8006814 <MPU9250_Init+0x340>)
 800668e:	4855      	ldr	r0, [pc, #340]	; (80067e4 <MPU9250_Init+0x310>)
 8006690:	f002 f864 	bl	800875c <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006694:	4853      	ldr	r0, [pc, #332]	; (80067e4 <MPU9250_Init+0x310>)
 8006696:	f7f9 fd5b 	bl	8000150 <strlen>
	  calibrateMPU9250(gyroBias, accBias);
 800669a:	4f5f      	ldr	r7, [pc, #380]	; (8006818 <MPU9250_Init+0x344>)
 800669c:	4e5f      	ldr	r6, [pc, #380]	; (800681c <MPU9250_Init+0x348>)
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800669e:	b282      	uxth	r2, r0
 80066a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066a4:	494f      	ldr	r1, [pc, #316]	; (80067e4 <MPU9250_Init+0x310>)
 80066a6:	4850      	ldr	r0, [pc, #320]	; (80067e8 <MPU9250_Init+0x314>)
 80066a8:	f7fd f976 	bl	8003998 <HAL_UART_Transmit>
	  calibrateMPU9250(gyroBias, accBias);
 80066ac:	4639      	mov	r1, r7
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7ff fb46 	bl	8005d40 <calibrateMPU9250>
		sprintf(Buf, "Calibration Finish\r\n");
 80066b4:	495a      	ldr	r1, [pc, #360]	; (8006820 <MPU9250_Init+0x34c>)
 80066b6:	484b      	ldr	r0, [pc, #300]	; (80067e4 <MPU9250_Init+0x310>)
 80066b8:	f002 f850 	bl	800875c <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80066bc:	4849      	ldr	r0, [pc, #292]	; (80067e4 <MPU9250_Init+0x310>)
 80066be:	f7f9 fd47 	bl	8000150 <strlen>
 80066c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066c6:	b282      	uxth	r2, r0
 80066c8:	4946      	ldr	r1, [pc, #280]	; (80067e4 <MPU9250_Init+0x310>)
 80066ca:	4847      	ldr	r0, [pc, #284]	; (80067e8 <MPU9250_Init+0x314>)
 80066cc:	f7fd f964 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80066d0:	2064      	movs	r0, #100	; 0x64
 80066d2:	f7fa fd55 	bl	8001180 <HAL_Delay>
		sprintf(Buf, "   x       y      z\r\n");
 80066d6:	4953      	ldr	r1, [pc, #332]	; (8006824 <MPU9250_Init+0x350>)
 80066d8:	4842      	ldr	r0, [pc, #264]	; (80067e4 <MPU9250_Init+0x310>)
 80066da:	f002 f83f 	bl	800875c <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80066de:	4841      	ldr	r0, [pc, #260]	; (80067e4 <MPU9250_Init+0x310>)
 80066e0:	f7f9 fd36 	bl	8000150 <strlen>
 80066e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066e8:	b282      	uxth	r2, r0
 80066ea:	493e      	ldr	r1, [pc, #248]	; (80067e4 <MPU9250_Init+0x310>)
 80066ec:	483e      	ldr	r0, [pc, #248]	; (80067e8 <MPU9250_Init+0x314>)
 80066ee:	f7fd f953 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80066f2:	2064      	movs	r0, #100	; 0x64
 80066f4:	f7fa fd44 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " %.2f   %.2f   %.2f mg\r\n", 1000*accBias[0], 1000*accBias[1], 1000*accBias[2]);
 80066f8:	6838      	ldr	r0, [r7, #0]
 80066fa:	494b      	ldr	r1, [pc, #300]	; (8006828 <MPU9250_Init+0x354>)
 80066fc:	f7fa faf6 	bl	8000cec <__aeabi_fmul>
 8006700:	f7f9 fe92 	bl	8000428 <__aeabi_f2d>
 8006704:	4680      	mov	r8, r0
 8006706:	4689      	mov	r9, r1
 8006708:	68b8      	ldr	r0, [r7, #8]
 800670a:	4947      	ldr	r1, [pc, #284]	; (8006828 <MPU9250_Init+0x354>)
 800670c:	f7fa faee 	bl	8000cec <__aeabi_fmul>
 8006710:	f7f9 fe8a 	bl	8000428 <__aeabi_f2d>
 8006714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4943      	ldr	r1, [pc, #268]	; (8006828 <MPU9250_Init+0x354>)
 800671c:	f7fa fae6 	bl	8000cec <__aeabi_fmul>
 8006720:	f7f9 fe82 	bl	8000428 <__aeabi_f2d>
 8006724:	4642      	mov	r2, r8
 8006726:	e9cd 0100 	strd	r0, r1, [sp]
 800672a:	464b      	mov	r3, r9
 800672c:	493f      	ldr	r1, [pc, #252]	; (800682c <MPU9250_Init+0x358>)
 800672e:	482d      	ldr	r0, [pc, #180]	; (80067e4 <MPU9250_Init+0x310>)
 8006730:	f001 fff0 	bl	8008714 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006734:	482b      	ldr	r0, [pc, #172]	; (80067e4 <MPU9250_Init+0x310>)
 8006736:	f7f9 fd0b 	bl	8000150 <strlen>
 800673a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800673e:	b282      	uxth	r2, r0
 8006740:	4928      	ldr	r1, [pc, #160]	; (80067e4 <MPU9250_Init+0x310>)
 8006742:	4829      	ldr	r0, [pc, #164]	; (80067e8 <MPU9250_Init+0x314>)
 8006744:	f7fd f928 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006748:	2064      	movs	r0, #100	; 0x64
 800674a:	f7fa fd19 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " %.2f   %.2f   %.2f o/s\r\n", gyroBias[0], gyroBias[1], gyroBias[2]);
 800674e:	6830      	ldr	r0, [r6, #0]
 8006750:	f7f9 fe6a 	bl	8000428 <__aeabi_f2d>
 8006754:	4680      	mov	r8, r0
 8006756:	68b0      	ldr	r0, [r6, #8]
 8006758:	4689      	mov	r9, r1
 800675a:	f7f9 fe65 	bl	8000428 <__aeabi_f2d>
 800675e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006762:	6870      	ldr	r0, [r6, #4]
 8006764:	f7f9 fe60 	bl	8000428 <__aeabi_f2d>
 8006768:	4642      	mov	r2, r8
 800676a:	e9cd 0100 	strd	r0, r1, [sp]
 800676e:	464b      	mov	r3, r9
 8006770:	492f      	ldr	r1, [pc, #188]	; (8006830 <MPU9250_Init+0x35c>)
 8006772:	481c      	ldr	r0, [pc, #112]	; (80067e4 <MPU9250_Init+0x310>)
 8006774:	f001 ffce 	bl	8008714 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006778:	481a      	ldr	r0, [pc, #104]	; (80067e4 <MPU9250_Init+0x310>)
 800677a:	f7f9 fce9 	bl	8000150 <strlen>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 800677e:	2700      	movs	r7, #0
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006780:	b282      	uxth	r2, r0
 8006782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006786:	4917      	ldr	r1, [pc, #92]	; (80067e4 <MPU9250_Init+0x310>)
 8006788:	4817      	ldr	r0, [pc, #92]	; (80067e8 <MPU9250_Init+0x314>)
 800678a:	f7fd f905 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800678e:	2064      	movs	r0, #100	; 0x64
 8006790:	f7fa fcf6 	bl	8001180 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 8006794:	2308      	movs	r3, #8
 8006796:	2207      	movs	r2, #7
 8006798:	216b      	movs	r1, #107	; 0x6b
 800679a:	9700      	str	r7, [sp, #0]
 800679c:	20d2      	movs	r0, #210	; 0xd2
 800679e:	f7fd fdb9 	bl	8004314 <I2C_ByteWrite>
    HAL_Delay(100); // for stability
 80067a2:	2064      	movs	r0, #100	; 0x64
 80067a4:	f7fa fcec 	bl	8001180 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001;
 80067a8:	9400      	str	r4, [sp, #0]
 80067aa:	2308      	movs	r3, #8
 80067ac:	2207      	movs	r2, #7
 80067ae:	216b      	movs	r1, #107	; 0x6b
 80067b0:	20d2      	movs	r0, #210	; 0xd2
 80067b2:	f7fd fdaf 	bl	8004314 <I2C_ByteWrite>
    HAL_Delay(200); // for stability
 80067b6:	20c8      	movs	r0, #200	; 0xc8
 80067b8:	f7fa fce2 	bl	8001180 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, MPU9250_DLPF_BW_42); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 80067bc:	2303      	movs	r3, #3
 80067be:	2207      	movs	r2, #7
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	211a      	movs	r1, #26
 80067c4:	2308      	movs	r3, #8
 80067c6:	20d2      	movs	r0, #210	; 0xd2
 80067c8:	f7fd fda4 	bl	8004314 <I2C_ByteWrite>
	  HAL_Delay(100);
 80067cc:	2064      	movs	r0, #100	; 0x64
 80067ce:	f7fa fcd7 	bl	8001180 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x04);  //0x00 SMPLRT_DIV    -- SMPLRT_DIV = 0  Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
 80067d2:	2304      	movs	r3, #4
 80067d4:	2207      	movs	r2, #7
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	e02c      	b.n	8006834 <MPU9250_Init+0x360>
 80067da:	bf00      	nop
 80067dc:	20000d98 	.word	0x20000d98
 80067e0:	0800b343 	.word	0x0800b343
 80067e4:	20000da4 	.word	0x20000da4
 80067e8:	200010e8 	.word	0x200010e8
 80067ec:	0800b34f 	.word	0x0800b34f
 80067f0:	0800b362 	.word	0x0800b362
 80067f4:	200004f0 	.word	0x200004f0
 80067f8:	0800b3af 	.word	0x0800b3af
 80067fc:	0800b3c2 	.word	0x0800b3c2
 8006800:	0800b40e 	.word	0x0800b40e
 8006804:	0800b45a 	.word	0x0800b45a
 8006808:	0800b4a6 	.word	0x0800b4a6
 800680c:	0800b4ee 	.word	0x0800b4ee
 8006810:	0800b536 	.word	0x0800b536
 8006814:	0800b57e 	.word	0x0800b57e
 8006818:	20000514 	.word	0x20000514
 800681c:	200005f8 	.word	0x200005f8
 8006820:	0800b59b 	.word	0x0800b59b
 8006824:	0800b5b0 	.word	0x0800b5b0
 8006828:	447a0000 	.word	0x447a0000
 800682c:	0800b5c6 	.word	0x0800b5c6
 8006830:	0800b5df 	.word	0x0800b5df
 8006834:	2119      	movs	r1, #25
 8006836:	2308      	movs	r3, #8
 8006838:	20d2      	movs	r0, #210	; 0xd2
 800683a:	f7fd fd6b 	bl	8004314 <I2C_ByteWrite>
	  HAL_Delay(100);
 800683e:	2064      	movs	r0, #100	; 0x64
 8006840:	f7fa fc9e 	bl	8001180 <HAL_Delay>
	  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 1, rawADC, 1);
 8006844:	9400      	str	r4, [sp, #0]
 8006846:	462b      	mov	r3, r5
 8006848:	4622      	mov	r2, r4
 800684a:	211b      	movs	r1, #27
 800684c:	20d2      	movs	r0, #210	; 0xd2
 800684e:	f7fd fd97 	bl	8004380 <I2C_ByteRead>
	  c = c | Gscale << 3; // Set full scale range for the gyro
 8006852:	4ba0      	ldr	r3, [pc, #640]	; (8006ad4 <MPU9250_Init+0x600>)
	  uint8_t c = rawADC[0];
 8006854:	782e      	ldrb	r6, [r5, #0]
	  c = c | Gscale << 3; // Set full scale range for the gyro
 8006856:	781b      	ldrb	r3, [r3, #0]
	  c = c & ~0x18; // Clear AFS bits [4:3]
 8006858:	f026 061a 	bic.w	r6, r6, #26
	  c = c | Gscale << 3; // Set full scale range for the gyro
 800685c:	ea46 06c3 	orr.w	r6, r6, r3, lsl #3
 8006860:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
    sprintf(Buf, " GYRO : %d \r\n", c);
 8006864:	4632      	mov	r2, r6
 8006866:	499c      	ldr	r1, [pc, #624]	; (8006ad8 <MPU9250_Init+0x604>)
 8006868:	489c      	ldr	r0, [pc, #624]	; (8006adc <MPU9250_Init+0x608>)
 800686a:	f001 ff53 	bl	8008714 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800686e:	489b      	ldr	r0, [pc, #620]	; (8006adc <MPU9250_Init+0x608>)
 8006870:	f7f9 fc6e 	bl	8000150 <strlen>
 8006874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006878:	b282      	uxth	r2, r0
 800687a:	4998      	ldr	r1, [pc, #608]	; (8006adc <MPU9250_Init+0x608>)
 800687c:	4898      	ldr	r0, [pc, #608]	; (8006ae0 <MPU9250_Init+0x60c>)
 800687e:	f7fd f88b 	bl	8003998 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, c);
 8006882:	9600      	str	r6, [sp, #0]
 8006884:	2308      	movs	r3, #8
 8006886:	2207      	movs	r2, #7
 8006888:	211b      	movs	r1, #27
 800688a:	20d2      	movs	r0, #210	; 0xd2
 800688c:	f7fd fd42 	bl	8004314 <I2C_ByteWrite>
	  HAL_Delay(100);
 8006890:	2064      	movs	r0, #100	; 0x64
 8006892:	f7fa fc75 	bl	8001180 <HAL_Delay>
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 1, rawADC, 1);
 8006896:	9400      	str	r4, [sp, #0]
 8006898:	462b      	mov	r3, r5
 800689a:	4622      	mov	r2, r4
 800689c:	211c      	movs	r1, #28
 800689e:	20d2      	movs	r0, #210	; 0xd2
 80068a0:	f7fd fd6e 	bl	8004380 <I2C_ByteRead>
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 80068a4:	4b8f      	ldr	r3, [pc, #572]	; (8006ae4 <MPU9250_Init+0x610>)
    c = rawADC[0];
 80068a6:	782e      	ldrb	r6, [r5, #0]
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 80068a8:	781b      	ldrb	r3, [r3, #0]
    c = c & ~0x18;  // Clear AFS bits [4:3]
 80068aa:	f026 0618 	bic.w	r6, r6, #24
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 80068ae:	ea46 06c3 	orr.w	r6, r6, r3, lsl #3
 80068b2:	b2f6      	uxtb	r6, r6
    sprintf(Buf, " ACEL : %d \r\n", c);
 80068b4:	4632      	mov	r2, r6
 80068b6:	498c      	ldr	r1, [pc, #560]	; (8006ae8 <MPU9250_Init+0x614>)
 80068b8:	4888      	ldr	r0, [pc, #544]	; (8006adc <MPU9250_Init+0x608>)
 80068ba:	f001 ff2b 	bl	8008714 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80068be:	4887      	ldr	r0, [pc, #540]	; (8006adc <MPU9250_Init+0x608>)
 80068c0:	f7f9 fc46 	bl	8000150 <strlen>
 80068c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068c8:	b282      	uxth	r2, r0
 80068ca:	4984      	ldr	r1, [pc, #528]	; (8006adc <MPU9250_Init+0x608>)
 80068cc:	4884      	ldr	r0, [pc, #528]	; (8006ae0 <MPU9250_Init+0x60c>)
 80068ce:	f7fd f863 	bl	8003998 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, c);
 80068d2:	9600      	str	r6, [sp, #0]
 80068d4:	2308      	movs	r3, #8
 80068d6:	2207      	movs	r2, #7
 80068d8:	211c      	movs	r1, #28
 80068da:	20d2      	movs	r0, #210	; 0xd2
 80068dc:	f7fd fd1a 	bl	8004314 <I2C_ByteWrite>
	  HAL_Delay(100);
 80068e0:	2064      	movs	r0, #100	; 0x64
 80068e2:	f7fa fc4d 	bl	8001180 <HAL_Delay>
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 1, rawADC, 1);
 80068e6:	462b      	mov	r3, r5
 80068e8:	9400      	str	r4, [sp, #0]
 80068ea:	4622      	mov	r2, r4
 80068ec:	211d      	movs	r1, #29
 80068ee:	20d2      	movs	r0, #210	; 0xd2
 80068f0:	f7fd fd46 	bl	8004380 <I2C_ByteRead>
    c = rawADC[0];
 80068f4:	782e      	ldrb	r6, [r5, #0]
    sprintf(Buf, " ACEL2 : %d \r\n", c);
 80068f6:	497d      	ldr	r1, [pc, #500]	; (8006aec <MPU9250_Init+0x618>)
    c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80068f8:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80068fc:	f046 0603 	orr.w	r6, r6, #3
    sprintf(Buf, " ACEL2 : %d \r\n", c);
 8006900:	4632      	mov	r2, r6
 8006902:	4876      	ldr	r0, [pc, #472]	; (8006adc <MPU9250_Init+0x608>)
 8006904:	f001 ff06 	bl	8008714 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006908:	4874      	ldr	r0, [pc, #464]	; (8006adc <MPU9250_Init+0x608>)
 800690a:	f7f9 fc21 	bl	8000150 <strlen>
 800690e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006912:	b282      	uxth	r2, r0
 8006914:	4971      	ldr	r1, [pc, #452]	; (8006adc <MPU9250_Init+0x608>)
 8006916:	4872      	ldr	r0, [pc, #456]	; (8006ae0 <MPU9250_Init+0x60c>)
 8006918:	f7fd f83e 	bl	8003998 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, c);
 800691c:	2308      	movs	r3, #8
 800691e:	2207      	movs	r2, #7
 8006920:	211d      	movs	r1, #29
 8006922:	9600      	str	r6, [sp, #0]
 8006924:	20d2      	movs	r0, #210	; 0xd2
 8006926:	f7fd fcf5 	bl	8004314 <I2C_ByteWrite>
		HAL_Delay(100);
 800692a:	2064      	movs	r0, #100	; 0x64
 800692c:	f7fa fc28 	bl	8001180 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_PIN_CFG, 7, 8, 0x22);
 8006930:	2322      	movs	r3, #34	; 0x22
 8006932:	2207      	movs	r2, #7
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	2137      	movs	r1, #55	; 0x37
 8006938:	2308      	movs	r3, #8
 800693a:	20d2      	movs	r0, #210	; 0xd2
 800693c:	f7fd fcea 	bl	8004314 <I2C_ByteWrite>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x01);
 8006940:	2308      	movs	r3, #8
 8006942:	2207      	movs	r2, #7
 8006944:	9400      	str	r4, [sp, #0]
 8006946:	2138      	movs	r1, #56	; 0x38
 8006948:	20d2      	movs	r0, #210	; 0xd2
 800694a:	f7fd fce3 	bl	8004314 <I2C_ByteWrite>
	HAL_Delay(100); // for stability
 800694e:	2064      	movs	r0, #100	; 0x64
 8006950:	f7fa fc16 	bl	8001180 <HAL_Delay>
  sprintf(Buf, "AK8963 Init Start!\r\n");
 8006954:	4966      	ldr	r1, [pc, #408]	; (8006af0 <MPU9250_Init+0x61c>)
 8006956:	4861      	ldr	r0, [pc, #388]	; (8006adc <MPU9250_Init+0x608>)
 8006958:	f001 ff00 	bl	800875c <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800695c:	485f      	ldr	r0, [pc, #380]	; (8006adc <MPU9250_Init+0x608>)
 800695e:	f7f9 fbf7 	bl	8000150 <strlen>
 8006962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006966:	b282      	uxth	r2, r0
 8006968:	495c      	ldr	r1, [pc, #368]	; (8006adc <MPU9250_Init+0x608>)
 800696a:	485d      	ldr	r0, [pc, #372]	; (8006ae0 <MPU9250_Init+0x60c>)
 800696c:	f7fd f814 	bl	8003998 <HAL_UART_Transmit>
  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, WHO_AM_I_AK8963, 1, rawADC, 1);
 8006970:	462b      	mov	r3, r5
 8006972:	9400      	str	r4, [sp, #0]
 8006974:	4622      	mov	r2, r4
 8006976:	4639      	mov	r1, r7
 8006978:	2018      	movs	r0, #24
 800697a:	f7fd fd01 	bl	8004380 <I2C_ByteRead>
  sprintf(Buf, "I AM 0x%x\r\n", whoami);
 800697e:	782a      	ldrb	r2, [r5, #0]
 8006980:	495c      	ldr	r1, [pc, #368]	; (8006af4 <MPU9250_Init+0x620>)
 8006982:	4856      	ldr	r0, [pc, #344]	; (8006adc <MPU9250_Init+0x608>)
 8006984:	f001 fec6 	bl	8008714 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006988:	4854      	ldr	r0, [pc, #336]	; (8006adc <MPU9250_Init+0x608>)
 800698a:	f7f9 fbe1 	bl	8000150 <strlen>
 800698e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006992:	b282      	uxth	r2, r0
 8006994:	4951      	ldr	r1, [pc, #324]	; (8006adc <MPU9250_Init+0x608>)
 8006996:	4852      	ldr	r0, [pc, #328]	; (8006ae0 <MPU9250_Init+0x60c>)
 8006998:	f7fc fffe 	bl	8003998 <HAL_UART_Transmit>
  sprintf(Buf, "I SHOULD BE 0x48\r\n");
 800699c:	4956      	ldr	r1, [pc, #344]	; (8006af8 <MPU9250_Init+0x624>)
 800699e:	484f      	ldr	r0, [pc, #316]	; (8006adc <MPU9250_Init+0x608>)
 80069a0:	f001 fedc 	bl	800875c <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80069a4:	484d      	ldr	r0, [pc, #308]	; (8006adc <MPU9250_Init+0x608>)
 80069a6:	f7f9 fbd3 	bl	8000150 <strlen>
 80069aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069ae:	b282      	uxth	r2, r0
 80069b0:	494a      	ldr	r1, [pc, #296]	; (8006adc <MPU9250_Init+0x608>)
 80069b2:	484b      	ldr	r0, [pc, #300]	; (8006ae0 <MPU9250_Init+0x60c>)
 80069b4:	f7fc fff0 	bl	8003998 <HAL_UART_Transmit>
	sprintf(Buf, "AK8963 Init (Compass sensor)\r\n");
 80069b8:	4950      	ldr	r1, [pc, #320]	; (8006afc <MPU9250_Init+0x628>)
 80069ba:	4848      	ldr	r0, [pc, #288]	; (8006adc <MPU9250_Init+0x608>)
 80069bc:	f001 fece 	bl	800875c <strcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80069c0:	4846      	ldr	r0, [pc, #280]	; (8006adc <MPU9250_Init+0x608>)
 80069c2:	f7f9 fbc5 	bl	8000150 <strlen>
	initAK8963(magCalibration);
 80069c6:	4c4e      	ldr	r4, [pc, #312]	; (8006b00 <MPU9250_Init+0x62c>)
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80069c8:	b282      	uxth	r2, r0
 80069ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069ce:	4943      	ldr	r1, [pc, #268]	; (8006adc <MPU9250_Init+0x608>)
 80069d0:	4843      	ldr	r0, [pc, #268]	; (8006ae0 <MPU9250_Init+0x60c>)
 80069d2:	f7fc ffe1 	bl	8003998 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 80069d6:	2064      	movs	r0, #100	; 0x64
 80069d8:	f7fa fbd2 	bl	8001180 <HAL_Delay>
	initAK8963(magCalibration);
 80069dc:	4620      	mov	r0, r4
 80069de:	f7ff faeb 	bl	8005fb8 <initAK8963>
	HAL_Delay(100); // for stability
 80069e2:	2064      	movs	r0, #100	; 0x64
 80069e4:	f7fa fbcc 	bl	8001180 <HAL_Delay>
  getAres();
 80069e8:	f7fe ffb0 	bl	800594c <getAres>
  getGres();
 80069ec:	f7fe ff90 	bl	8005910 <getGres>
  getMres();
 80069f0:	f7fe ff7a 	bl	80058e8 <getMres>
	sprintf(Buf, "ASAX : %.2f\r\n", magCalibration[0]);
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	f7f9 fd17 	bl	8000428 <__aeabi_f2d>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4837      	ldr	r0, [pc, #220]	; (8006adc <MPU9250_Init+0x608>)
 8006a00:	4940      	ldr	r1, [pc, #256]	; (8006b04 <MPU9250_Init+0x630>)
 8006a02:	f001 fe87 	bl	8008714 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006a06:	4835      	ldr	r0, [pc, #212]	; (8006adc <MPU9250_Init+0x608>)
 8006a08:	f7f9 fba2 	bl	8000150 <strlen>
 8006a0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a10:	b282      	uxth	r2, r0
 8006a12:	4932      	ldr	r1, [pc, #200]	; (8006adc <MPU9250_Init+0x608>)
 8006a14:	4832      	ldr	r0, [pc, #200]	; (8006ae0 <MPU9250_Init+0x60c>)
 8006a16:	f7fc ffbf 	bl	8003998 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 8006a1a:	2064      	movs	r0, #100	; 0x64
 8006a1c:	f7fa fbb0 	bl	8001180 <HAL_Delay>
	sprintf(Buf, "ASAY : %.2f\r\n", magCalibration[1]);
 8006a20:	6860      	ldr	r0, [r4, #4]
 8006a22:	f7f9 fd01 	bl	8000428 <__aeabi_f2d>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	482c      	ldr	r0, [pc, #176]	; (8006adc <MPU9250_Init+0x608>)
 8006a2c:	4936      	ldr	r1, [pc, #216]	; (8006b08 <MPU9250_Init+0x634>)
 8006a2e:	f001 fe71 	bl	8008714 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006a32:	482a      	ldr	r0, [pc, #168]	; (8006adc <MPU9250_Init+0x608>)
 8006a34:	f7f9 fb8c 	bl	8000150 <strlen>
 8006a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a3c:	b282      	uxth	r2, r0
 8006a3e:	4927      	ldr	r1, [pc, #156]	; (8006adc <MPU9250_Init+0x608>)
 8006a40:	4827      	ldr	r0, [pc, #156]	; (8006ae0 <MPU9250_Init+0x60c>)
 8006a42:	f7fc ffa9 	bl	8003998 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 8006a46:	2064      	movs	r0, #100	; 0x64
 8006a48:	f7fa fb9a 	bl	8001180 <HAL_Delay>
	sprintf(Buf, "ASAZ : %.2f\r\n", magCalibration[2]);
 8006a4c:	68a0      	ldr	r0, [r4, #8]
 8006a4e:	f7f9 fceb 	bl	8000428 <__aeabi_f2d>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4821      	ldr	r0, [pc, #132]	; (8006adc <MPU9250_Init+0x608>)
 8006a58:	492c      	ldr	r1, [pc, #176]	; (8006b0c <MPU9250_Init+0x638>)
 8006a5a:	f001 fe5b 	bl	8008714 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006a5e:	481f      	ldr	r0, [pc, #124]	; (8006adc <MPU9250_Init+0x608>)
 8006a60:	f7f9 fb76 	bl	8000150 <strlen>
 8006a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a68:	b282      	uxth	r2, r0
 8006a6a:	491c      	ldr	r1, [pc, #112]	; (8006adc <MPU9250_Init+0x608>)
 8006a6c:	481c      	ldr	r0, [pc, #112]	; (8006ae0 <MPU9250_Init+0x60c>)
 8006a6e:	f7fc ff93 	bl	8003998 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 8006a72:	2064      	movs	r0, #100	; 0x64
}
 8006a74:	b005      	add	sp, #20
 8006a76:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(100); // for stability
 8006a7a:	f7fa bb81 	b.w	8001180 <HAL_Delay>
    sprintf(Buf, "Could not connect to MPU9250: %#x\r\n", whoami);
 8006a7e:	4632      	mov	r2, r6
 8006a80:	4923      	ldr	r1, [pc, #140]	; (8006b10 <MPU9250_Init+0x63c>)
 8006a82:	4816      	ldr	r0, [pc, #88]	; (8006adc <MPU9250_Init+0x608>)
 8006a84:	f001 fe46 	bl	8008714 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006a88:	4814      	ldr	r0, [pc, #80]	; (8006adc <MPU9250_Init+0x608>)
 8006a8a:	f7f9 fb61 	bl	8000150 <strlen>
 8006a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a92:	b282      	uxth	r2, r0
 8006a94:	4911      	ldr	r1, [pc, #68]	; (8006adc <MPU9250_Init+0x608>)
 8006a96:	4812      	ldr	r0, [pc, #72]	; (8006ae0 <MPU9250_Init+0x60c>)
 8006a98:	f7fc ff7e 	bl	8003998 <HAL_UART_Transmit>
    sprintf(Buf, "Communication failed, abort!\r\n");
 8006a9c:	491d      	ldr	r1, [pc, #116]	; (8006b14 <MPU9250_Init+0x640>)
 8006a9e:	480f      	ldr	r0, [pc, #60]	; (8006adc <MPU9250_Init+0x608>)
 8006aa0:	f001 fe5c 	bl	800875c <strcpy>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006aa4:	480d      	ldr	r0, [pc, #52]	; (8006adc <MPU9250_Init+0x608>)
 8006aa6:	f7f9 fb53 	bl	8000150 <strlen>
 8006aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aae:	b282      	uxth	r2, r0
 8006ab0:	490a      	ldr	r1, [pc, #40]	; (8006adc <MPU9250_Init+0x608>)
 8006ab2:	480b      	ldr	r0, [pc, #44]	; (8006ae0 <MPU9250_Init+0x60c>)
 8006ab4:	f7fc ff70 	bl	8003998 <HAL_UART_Transmit>
    while (Error.error !=0)
 8006ab8:	4d17      	ldr	r5, [pc, #92]	; (8006b18 <MPU9250_Init+0x644>)
 8006aba:	782b      	ldrb	r3, [r5, #0]
 8006abc:	b913      	cbnz	r3, 8006ac4 <MPU9250_Init+0x5f0>
}
 8006abe:	b005      	add	sp, #20
 8006ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error.error = 1;
 8006ac4:	702c      	strb	r4, [r5, #0]
      error_signal();
 8006ac6:	f7fe f96d 	bl	8004da4 <error_signal>
      HAL_Delay(4);
 8006aca:	2004      	movs	r0, #4
 8006acc:	f7fa fb58 	bl	8001180 <HAL_Delay>
 8006ad0:	e7f3      	b.n	8006aba <MPU9250_Init+0x5e6>
 8006ad2:	bf00      	nop
 8006ad4:	200004ed 	.word	0x200004ed
 8006ad8:	0800b5f9 	.word	0x0800b5f9
 8006adc:	20000da4 	.word	0x20000da4
 8006ae0:	200010e8 	.word	0x200010e8
 8006ae4:	200004ec 	.word	0x200004ec
 8006ae8:	0800b607 	.word	0x0800b607
 8006aec:	0800b615 	.word	0x0800b615
 8006af0:	0800b624 	.word	0x0800b624
 8006af4:	0800b343 	.word	0x0800b343
 8006af8:	0800b639 	.word	0x0800b639
 8006afc:	0800b64c 	.word	0x0800b64c
 8006b00:	20000610 	.word	0x20000610
 8006b04:	0800b66b 	.word	0x0800b66b
 8006b08:	0800b679 	.word	0x0800b679
 8006b0c:	0800b687 	.word	0x0800b687
 8006b10:	0800b695 	.word	0x0800b695
 8006b14:	0800b6b9 	.word	0x0800b6b9
 8006b18:	200010a0 	.word	0x200010a0

08006b1c <Baro_Common>:
void Baro_Common(void)
{
  static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
  static int baroHistIdx = 0;
  int indexplus1;
   indexplus1 = (baroHistIdx + 1);
 8006b1c:	490a      	ldr	r1, [pc, #40]	; (8006b48 <Baro_Common+0x2c>)
  if (indexplus1 == 21)
      indexplus1 = 0;
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8006b1e:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <Baro_Common+0x30>)
   indexplus1 = (baroHistIdx + 1);
 8006b20:	6808      	ldr	r0, [r1, #0]
{
 8006b22:	b530      	push	{r4, r5, lr}
   indexplus1 = (baroHistIdx + 1);
 8006b24:	1c42      	adds	r2, r0, #1
  if (indexplus1 == 21)
 8006b26:	2a15      	cmp	r2, #21
      indexplus1 = 0;
 8006b28:	bf08      	it	eq
 8006b2a:	2200      	moveq	r2, #0
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8006b2c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8006b30:	4c07      	ldr	r4, [pc, #28]	; (8006b50 <Baro_Common+0x34>)
  baroPressureSum += baroHistTab[baroHistIdx];
  baroPressureSum -= baroHistTab[indexplus1];
  baroHistIdx = indexplus1;
 8006b32:	600a      	str	r2, [r1, #0]
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8006b34:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
  baroPressureSum -= baroHistTab[indexplus1];
 8006b38:	4806      	ldr	r0, [pc, #24]	; (8006b54 <Baro_Common+0x38>)
 8006b3a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
  baroPressureSum += baroHistTab[baroHistIdx];
 8006b3e:	6805      	ldr	r5, [r0, #0]
 8006b40:	442b      	add	r3, r5
  baroPressureSum -= baroHistTab[indexplus1];
 8006b42:	1b1b      	subs	r3, r3, r4
 8006b44:	6003      	str	r3, [r0, #0]
  baroHistIdx = indexplus1;
 8006b46:	bd30      	pop	{r4, r5, pc}
 8006b48:	2000052c 	.word	0x2000052c
 8006b4c:	20000b58 	.word	0x20000b58
 8006b50:	20000530 	.word	0x20000530
 8006b54:	200005f0 	.word	0x200005f0

08006b58 <getEstimatedAltitude>:
    }
    return 1;
}

int getEstimatedAltitude(void)
{
 8006b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int32_t BaroAlt_tmp;
  static int32_t baroGroundAltitude = 0;
  static int32_t baroGroundPressure = 0;

  if (calibratingB > 0) {
 8006b5c:	4d40      	ldr	r5, [pc, #256]	; (8006c60 <getEstimatedAltitude+0x108>)
 8006b5e:	4c41      	ldr	r4, [pc, #260]	; (8006c64 <getEstimatedAltitude+0x10c>)
 8006b60:	882b      	ldrh	r3, [r5, #0]
 8006b62:	4e41      	ldr	r6, [pc, #260]	; (8006c68 <getEstimatedAltitude+0x110>)
 8006b64:	b31b      	cbz	r3, 8006bae <getEstimatedAltitude+0x56>
      baroGroundPressure -= baroGroundPressure / 8;
      baroGroundPressure += baroPressureSum / (21 - 1);
 8006b66:	2314      	movs	r3, #20
 8006b68:	6820      	ldr	r0, [r4, #0]
      baroGroundPressure -= baroGroundPressure / 8;
 8006b6a:	4940      	ldr	r1, [pc, #256]	; (8006c6c <getEstimatedAltitude+0x114>)
      baroGroundPressure += baroPressureSum / (21 - 1);
 8006b6c:	fbb0 f3f3 	udiv	r3, r0, r3
      baroGroundPressure -= baroGroundPressure / 8;
 8006b70:	2008      	movs	r0, #8
 8006b72:	680a      	ldr	r2, [r1, #0]
 8006b74:	fb92 f7f0 	sdiv	r7, r2, r0
 8006b78:	1bd2      	subs	r2, r2, r7
      baroGroundPressure += baroPressureSum / (21 - 1);
 8006b7a:	4413      	add	r3, r2
 8006b7c:	600b      	str	r3, [r1, #0]
      baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 8006b7e:	fb93 f0f0 	sdiv	r0, r3, r0
 8006b82:	f7fa f85f 	bl	8000c44 <__aeabi_i2f>
 8006b86:	493a      	ldr	r1, [pc, #232]	; (8006c70 <getEstimatedAltitude+0x118>)
 8006b88:	f7fa f964 	bl	8000e54 <__aeabi_fdiv>
 8006b8c:	4939      	ldr	r1, [pc, #228]	; (8006c74 <getEstimatedAltitude+0x11c>)
 8006b8e:	f002 fc5f 	bl	8009450 <powf>
 8006b92:	4601      	mov	r1, r0
 8006b94:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006b98:	f7f9 ff9e 	bl	8000ad8 <__aeabi_fsub>
 8006b9c:	4936      	ldr	r1, [pc, #216]	; (8006c78 <getEstimatedAltitude+0x120>)
 8006b9e:	f7fa f8a5 	bl	8000cec <__aeabi_fmul>
 8006ba2:	f7fa fa7f 	bl	80010a4 <__aeabi_f2iz>

      calibratingB--;
 8006ba6:	882b      	ldrh	r3, [r5, #0]
      baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 8006ba8:	6030      	str	r0, [r6, #0]
      calibratingB--;
 8006baa:	3b01      	subs	r3, #1
 8006bac:	802b      	strh	r3, [r5, #0]
  }

  BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (21 - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 8006bae:	2514      	movs	r5, #20
 8006bb0:	6820      	ldr	r0, [r4, #0]
 8006bb2:	fbb0 f0f5 	udiv	r0, r0, r5
 8006bb6:	f7fa f841 	bl	8000c3c <__aeabi_ui2f>
 8006bba:	492d      	ldr	r1, [pc, #180]	; (8006c70 <getEstimatedAltitude+0x118>)
 8006bbc:	f7fa f94a 	bl	8000e54 <__aeabi_fdiv>
 8006bc0:	492c      	ldr	r1, [pc, #176]	; (8006c74 <getEstimatedAltitude+0x11c>)
 8006bc2:	f002 fc45 	bl	8009450 <powf>
 8006bc6:	4601      	mov	r1, r0
 8006bc8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006bcc:	f7f9 ff84 	bl	8000ad8 <__aeabi_fsub>
 8006bd0:	4929      	ldr	r1, [pc, #164]	; (8006c78 <getEstimatedAltitude+0x120>)
 8006bd2:	f7fa f88b 	bl	8000cec <__aeabi_fmul>
 8006bd6:	f002 fa4f 	bl	8009078 <lrintf>
  BaroAlt_tmp -= baroGroundAltitude;
 8006bda:	6833      	ldr	r3, [r6, #0]
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.8 + (float)BaroAlt_tmp * (1.0f - 0.8)); // additional LPF to reduce baro noise
 8006bdc:	4e27      	ldr	r6, [pc, #156]	; (8006c7c <getEstimatedAltitude+0x124>)
 8006bde:	1ac0      	subs	r0, r0, r3
 8006be0:	f7fa f830 	bl	8000c44 <__aeabi_i2f>
 8006be4:	f7f9 fc20 	bl	8000428 <__aeabi_f2d>
 8006be8:	a319      	add	r3, pc, #100	; (adr r3, 8006c50 <getEstimatedAltitude+0xf8>)
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	f7f9 fc6f 	bl	80004d0 <__aeabi_dmul>
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 8006bf8:	4689      	mov	r9, r1
 8006bfa:	f7fa f823 	bl	8000c44 <__aeabi_i2f>
 8006bfe:	f7f9 fc13 	bl	8000428 <__aeabi_f2d>
 8006c02:	a315      	add	r3, pc, #84	; (adr r3, 8006c58 <getEstimatedAltitude+0x100>)
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	f7f9 fc62 	bl	80004d0 <__aeabi_dmul>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4640      	mov	r0, r8
 8006c12:	4649      	mov	r1, r9
 8006c14:	f7f9 faaa 	bl	800016c <__adddf3>
 8006c18:	f7f9 ff0a 	bl	8000a30 <__aeabi_d2f>
 8006c1c:	f002 fa2c 	bl	8009078 <lrintf>
  sprintf(Buf, "%ld pa, %ld cm \n ", baroPressureSum / (21 - 1), ms5611.BaroAlt);
 8006c20:	6822      	ldr	r2, [r4, #0]
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.8 + (float)BaroAlt_tmp * (1.0f - 0.8)); // additional LPF to reduce baro noise
 8006c22:	4603      	mov	r3, r0
  sprintf(Buf, "%ld pa, %ld cm \n ", baroPressureSum / (21 - 1), ms5611.BaroAlt);
 8006c24:	fbb2 f2f5 	udiv	r2, r2, r5
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.8 + (float)BaroAlt_tmp * (1.0f - 0.8)); // additional LPF to reduce baro noise
 8006c28:	f8c6 018c 	str.w	r0, [r6, #396]	; 0x18c
  sprintf(Buf, "%ld pa, %ld cm \n ", baroPressureSum / (21 - 1), ms5611.BaroAlt);
 8006c2c:	4914      	ldr	r1, [pc, #80]	; (8006c80 <getEstimatedAltitude+0x128>)
 8006c2e:	4815      	ldr	r0, [pc, #84]	; (8006c84 <getEstimatedAltitude+0x12c>)
 8006c30:	f001 fd70 	bl	8008714 <siprintf>
  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
 8006c34:	4813      	ldr	r0, [pc, #76]	; (8006c84 <getEstimatedAltitude+0x12c>)
 8006c36:	f7f9 fa8b 	bl	8000150 <strlen>
 8006c3a:	4912      	ldr	r1, [pc, #72]	; (8006c84 <getEstimatedAltitude+0x12c>)
 8006c3c:	b282      	uxth	r2, r0
 8006c3e:	4812      	ldr	r0, [pc, #72]	; (8006c88 <getEstimatedAltitude+0x130>)
 8006c40:	f7fc ff06 	bl	8003a50 <HAL_UART_Transmit_DMA>

  return 1;
}
 8006c44:	2001      	movs	r0, #1
 8006c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4a:	bf00      	nop
 8006c4c:	f3af 8000 	nop.w
 8006c50:	99999998 	.word	0x99999998
 8006c54:	3fc99999 	.word	0x3fc99999
 8006c58:	9999999a 	.word	0x9999999a
 8006c5c:	3fe99999 	.word	0x3fe99999
 8006c60:	2000000a 	.word	0x2000000a
 8006c64:	200005f0 	.word	0x200005f0
 8006c68:	20000524 	.word	0x20000524
 8006c6c:	20000528 	.word	0x20000528
 8006c70:	47c5e680 	.word	0x47c5e680
 8006c74:	3e42dcb1 	.word	0x3e42dcb1
 8006c78:	4a8748d0 	.word	0x4a8748d0
 8006c7c:	20000b58 	.word	0x20000b58
 8006c80:	0800b707 	.word	0x0800b707
 8006c84:	20000da4 	.word	0x20000da4
 8006c88:	200010e8 	.word	0x200010e8

08006c8c <readPressure>:
    return readRegister24(MS5611_CMD_ADC_READ);
}

int32_t readPressure(bool compensation)
{
    uint32_t D1 = ms5611.rawPressure;
 8006c8c:	4b55      	ldr	r3, [pc, #340]	; (8006de4 <readPressure+0x158>)
{
 8006c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    uint32_t D2 = ms5611.rawTemp;
    int32_t dT = D2 - (uint32_t)ms5611.fc[4] * 256;
 8006c92:	8919      	ldrh	r1, [r3, #8]
 8006c94:	6e5c      	ldr	r4, [r3, #100]	; 0x64
    uint32_t D1 = ms5611.rawPressure;
 8006c96:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    int32_t dT = D2 - (uint32_t)ms5611.fc[4] * 256;
 8006c9a:	eba4 2101 	sub.w	r1, r4, r1, lsl #8

    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006c9e:	88dc      	ldrh	r4, [r3, #6]
 8006ca0:	fb84 4501 	smull	r4, r5, r4, r1
 8006ca4:	2c00      	cmp	r4, #0
 8006ca6:	f175 0600 	sbcs.w	r6, r5, #0
 8006caa:	da02      	bge.n	8006cb2 <readPressure+0x26>
 8006cac:	347f      	adds	r4, #127	; 0x7f
 8006cae:	f145 0500 	adc.w	r5, r5, #0
 8006cb2:	09e6      	lsrs	r6, r4, #7
 8006cb4:	ea46 6645 	orr.w	r6, r6, r5, lsl #25
 8006cb8:	11ef      	asrs	r7, r5, #7
 8006cba:	2500      	movs	r5, #0
 8006cbc:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006cc0:	f8b3 e000 	ldrh.w	lr, [r3]
    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006cc4:	ea4f 4408 	mov.w	r4, r8, lsl #16
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006cc8:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006ccc:	1936      	adds	r6, r6, r4
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006cce:	fb88 8901 	smull	r8, r9, r8, r1
    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006cd2:	416f      	adcs	r7, r5
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006cd4:	f1b8 0f00 	cmp.w	r8, #0
 8006cd8:	f179 0400 	sbcs.w	r4, r9, #0
 8006cdc:	da03      	bge.n	8006ce6 <readPressure+0x5a>
 8006cde:	f118 08ff 	adds.w	r8, r8, #255	; 0xff
 8006ce2:	f149 0900 	adc.w	r9, r9, #0
 8006ce6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 8006cea:	ea4f 2418 	mov.w	r4, r8, lsr #8
 8006cee:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
 8006cf2:	ea4f 2529 	mov.w	r5, r9, asr #8
 8006cf6:	fbee 450c 	umlal	r4, r5, lr, ip

    if (compensation)
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d051      	beq.n	8006da2 <readPressure+0x116>
    {
  int32_t TEMP = 2000 + ((int64_t) dT * ms5611.fc[5]) / 8388608;
 8006cfe:	8958      	ldrh	r0, [r3, #10]
 8006d00:	fb80 0101 	smull	r0, r1, r0, r1
 8006d04:	2800      	cmp	r0, #0
 8006d06:	f171 0e00 	sbcs.w	lr, r1, #0
 8006d0a:	da07      	bge.n	8006d1c <readPressure+0x90>
 8006d0c:	f04f 0900 	mov.w	r9, #0
 8006d10:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8006dec <readPressure+0x160>
 8006d14:	eb10 0008 	adds.w	r0, r0, r8
 8006d18:	eb41 0109 	adc.w	r1, r1, r9
 8006d1c:	ea4f 5ed0 	mov.w	lr, r0, lsr #23
 8006d20:	ea4e 2e41 	orr.w	lr, lr, r1, lsl #9

  ms5611.OFF2 = 0;
 8006d24:	2000      	movs	r0, #0
 8006d26:	2100      	movs	r1, #0
  int32_t TEMP = 2000 + ((int64_t) dT * ms5611.fc[5]) / 8388608;
 8006d28:	f50e 6cfa 	add.w	ip, lr, #2000	; 0x7d0
  ms5611.SENS2 = 0;

  if (TEMP < 2000)
 8006d2c:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
  ms5611.OFF2 = 0;
 8006d30:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
  ms5611.SENS2 = 0;
 8006d34:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  if (TEMP < 2000)
 8006d38:	da29      	bge.n	8006d8e <readPressure+0x102>
  {
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006d3a:	fb0e f00e 	mul.w	r0, lr, lr
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
  }

  if (TEMP < -1500)
 8006d3e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8006df0 <readPressure+0x164>
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006d42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006d46:	ea4f 0860 	mov.w	r8, r0, asr #1
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006d4a:	1080      	asrs	r0, r0, #2
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006d4c:	ea4f 79e8 	mov.w	r9, r8, asr #31
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006d50:	17c1      	asrs	r1, r0, #31
  if (TEMP < -1500)
 8006d52:	45d4      	cmp	ip, sl
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006d54:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006d58:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  if (TEMP < -1500)
 8006d5c:	da17      	bge.n	8006d8e <readPressure+0x102>
  {
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8006d5e:	f60e 5eac 	addw	lr, lr, #3500	; 0xdac
 8006d62:	fb0e fe0e 	mul.w	lr, lr, lr
 8006d66:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 8006d6a:	eb18 080c 	adds.w	r8, r8, ip
 8006d6e:	eb49 79ec 	adc.w	r9, r9, ip, asr #31
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8006d72:	f04f 0c0b 	mov.w	ip, #11
 8006d76:	fb0c fe0e 	mul.w	lr, ip, lr
 8006d7a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8006d7e:	eb10 000e 	adds.w	r0, r0, lr
 8006d82:	eb41 71ee 	adc.w	r1, r1, lr, asr #31
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8006d86:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8006d8a:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  }

  OFF = OFF - ms5611.OFF2;
 8006d8e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006d92:	1a36      	subs	r6, r6, r0
 8006d94:	eb67 0701 	sbc.w	r7, r7, r1
  SENS = SENS - ms5611.SENS2;
 8006d98:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006d9c:	1a24      	subs	r4, r4, r0
 8006d9e:	eb65 0501 	sbc.w	r5, r5, r1
  }

    uint32_t P = (D1 * SENS / 2097152 - OFF) / 32768;
 8006da2:	fba2 0104 	umull	r0, r1, r2, r4
 8006da6:	fb02 1105 	mla	r1, r2, r5, r1
 8006daa:	2800      	cmp	r0, #0
 8006dac:	f171 0300 	sbcs.w	r3, r1, #0
 8006db0:	da03      	bge.n	8006dba <readPressure+0x12e>
 8006db2:	2300      	movs	r3, #0
 8006db4:	4a0c      	ldr	r2, [pc, #48]	; (8006de8 <readPressure+0x15c>)
 8006db6:	1880      	adds	r0, r0, r2
 8006db8:	4159      	adcs	r1, r3
 8006dba:	0d42      	lsrs	r2, r0, #21
 8006dbc:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8006dc0:	154b      	asrs	r3, r1, #21
 8006dc2:	1b96      	subs	r6, r2, r6
 8006dc4:	eb63 0707 	sbc.w	r7, r3, r7
 8006dc8:	2e00      	cmp	r6, #0
 8006dca:	f177 0300 	sbcs.w	r3, r7, #0
 8006dce:	da04      	bge.n	8006dda <readPressure+0x14e>
 8006dd0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	18b6      	adds	r6, r6, r2
 8006dd8:	415f      	adcs	r7, r3
 8006dda:	0bf0      	lsrs	r0, r6, #15

    return P;
}
 8006ddc:	ea40 4047 	orr.w	r0, r0, r7, lsl #17
 8006de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de4:	20000b58 	.word	0x20000b58
 8006de8:	001fffff 	.word	0x001fffff
 8006dec:	007fffff 	.word	0x007fffff
 8006df0:	fffffa24 	.word	0xfffffa24

08006df4 <readRegister16>:
    return ((double)pressure / pow(1.0f - ((double)altitude / 44330.0f), 5.255f));
}

// Read 16-bit from register (oops MSB, LSB)
uint16_t readRegister16(uint8_t reg)
{
 8006df4:	b510      	push	{r4, lr}
    uint16_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);

    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 8006df6:	4c08      	ldr	r4, [pc, #32]	; (8006e18 <readRegister16+0x24>)
    I2C_Write(MS5611_ADDRESS, reg, 1);
 8006df8:	4601      	mov	r1, r0
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	20ee      	movs	r0, #238	; 0xee
 8006dfe:	f7fd fad1 	bl	80043a4 <I2C_Write>
    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 8006e02:	2202      	movs	r2, #2
 8006e04:	4621      	mov	r1, r4
 8006e06:	20ee      	movs	r0, #238	; 0xee
 8006e08:	f7fd fb16 	bl	8004438 <I2C_Read>

    uint8_t vha = rawADC[0];
    uint8_t vla = rawADC[1];

    value = vha << 8 | vla;
 8006e0c:	7820      	ldrb	r0, [r4, #0]
 8006e0e:	7863      	ldrb	r3, [r4, #1]

    return value;
}
 8006e10:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8006e14:	bd10      	pop	{r4, pc}
 8006e16:	bf00      	nop
 8006e18:	20000d98 	.word	0x20000d98

08006e1c <readRegister24>:

// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg)
{
 8006e1c:	b510      	push	{r4, lr}
    uint32_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);

    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 8006e1e:	4c09      	ldr	r4, [pc, #36]	; (8006e44 <readRegister24+0x28>)
    I2C_Write(MS5611_ADDRESS, reg, 1);
 8006e20:	4601      	mov	r1, r0
 8006e22:	2201      	movs	r2, #1
 8006e24:	20ee      	movs	r0, #238	; 0xee
 8006e26:	f7fd fabd 	bl	80043a4 <I2C_Write>
    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 8006e2a:	2203      	movs	r2, #3
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	20ee      	movs	r0, #238	; 0xee
 8006e30:	f7fd fb02 	bl	8004438 <I2C_Read>

    uint8_t vxa = rawADC[0];
    uint8_t vha = rawADC[1];
    uint8_t vla = rawADC[2];

    value = ((int32_t)vxa << 16) | ((int32_t)vha << 8) | vla;
 8006e34:	7863      	ldrb	r3, [r4, #1]
 8006e36:	7820      	ldrb	r0, [r4, #0]
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e3e:	78a0      	ldrb	r0, [r4, #2]

    return value;
}
 8006e40:	4318      	orrs	r0, r3
 8006e42:	bd10      	pop	{r4, pc}
 8006e44:	20000d98 	.word	0x20000d98

08006e48 <read_barometer>:
{
 8006e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ms5611.barometer_counter ++;
 8006e4c:	4cc1      	ldr	r4, [pc, #772]	; (8007154 <read_barometer+0x30c>)
 8006e4e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8006e52:	3301      	adds	r3, #1
 8006e54:	b2db      	uxtb	r3, r3
  if (ms5611.barometer_counter == 1) {                                                 //When the barometer_counter variable is 1.
 8006e56:	2b01      	cmp	r3, #1
  ms5611.barometer_counter ++;
 8006e58:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  if (ms5611.barometer_counter == 1) {                                                 //When the barometer_counter variable is 1.
 8006e5c:	d13c      	bne.n	8006ed8 <read_barometer+0x90>
    if (ms5611.temperature_counter == 0) {                                             //And the temperature counter is 0.
 8006e5e:	f894 5061 	ldrb.w	r5, [r4, #97]	; 0x61
 8006e62:	2d00      	cmp	r5, #0
 8006e64:	f040 816d 	bne.w	8007142 <read_barometer+0x2fa>
      ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f7ff ffd7 	bl	8006e1c <readRegister24>
      ms5611.raw_average_temperature_total -= ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006e6e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8006e72:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006e76:	f103 021a 	add.w	r2, r3, #26
      ms5611.average_temperature_mem_location++;
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	b2db      	uxtb	r3, r3
      if (ms5611.average_temperature_mem_location == 5)ms5611.average_temperature_mem_location = 0;
 8006e7e:	2b05      	cmp	r3, #5
      ms5611.average_temperature_mem_location++;
 8006e80:	bf18      	it	ne
 8006e82:	f884 3068 	strbne.w	r3, [r4, #104]	; 0x68
      ms5611.T = ms5611.raw_average_temperature_total / 5;                      //Calculate the avarage temperature of the last 5 measurements.
 8006e86:	f04f 0305 	mov.w	r3, #5
      ms5611.raw_average_temperature_total -= ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006e8a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006e8e:	6856      	ldr	r6, [r2, #4]
      ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8006e90:	6660      	str	r0, [r4, #100]	; 0x64
      ms5611.raw_average_temperature_total -= ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006e92:	eba1 0106 	sub.w	r1, r1, r6
      ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location] = ms5611.rawTemp;
 8006e96:	6050      	str	r0, [r2, #4]
      ms5611.raw_average_temperature_total += ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006e98:	4408      	add	r0, r1
 8006e9a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      ms5611.T = ms5611.raw_average_temperature_total / 5;                      //Calculate the avarage temperature of the last 5 measurements.
 8006e9e:	fbb0 f0f3 	udiv	r0, r0, r3
      if (ms5611.average_temperature_mem_location == 5)ms5611.average_temperature_mem_location = 0;
 8006ea2:	bf08      	it	eq
 8006ea4:	f884 5068 	strbeq.w	r5, [r4, #104]	; 0x68
      ms5611.T = ms5611.raw_average_temperature_total / 5;                      //Calculate the avarage temperature of the last 5 measurements.
 8006ea8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ms5611.temperature_counter ++;                                                     //Increase the temperature_counter variable.
 8006eac:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8006eb0:	7b61      	ldrb	r1, [r4, #13]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	b2db      	uxtb	r3, r3
    if (ms5611.temperature_counter == 20) {                                            //When the temperature counter equals 20.
 8006eb6:	2b14      	cmp	r3, #20
    ms5611.temperature_counter ++;                                                     //Increase the temperature_counter variable.
 8006eb8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      ms5611.temperature_counter = 0;                                                  //Reset the temperature_counter variable.
 8006ebc:	bf06      	itte	eq
 8006ebe:	2300      	moveq	r3, #0
      I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8006ec0:	3150      	addeq	r1, #80	; 0x50
      I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8006ec2:	3140      	addne	r1, #64	; 0x40
 8006ec4:	f04f 0201 	mov.w	r2, #1
 8006ec8:	b2c9      	uxtb	r1, r1
 8006eca:	f04f 00ee 	mov.w	r0, #238	; 0xee
      ms5611.temperature_counter = 0;                                                  //Reset the temperature_counter variable.
 8006ece:	bf08      	it	eq
 8006ed0:	f884 3061 	strbeq.w	r3, [r4, #97]	; 0x61
      I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8006ed4:	f7fd fa66 	bl	80043a4 <I2C_Write>
  if (ms5611.barometer_counter == 2) {                                                 //If the barometer_counter variable equals 2.
 8006ed8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	f040 8127 	bne.w	8007130 <read_barometer+0x2e8>
    ms5611.dT = ms5611.fc[4];
 8006ee2:	8923      	ldrh	r3, [r4, #8]
    ms5611.dT += ms5611.T;
 8006ee4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006ee8:	88e0      	ldrh	r0, [r4, #6]
    ms5611.dT += ms5611.T;
 8006eea:	eba2 2503 	sub.w	r5, r2, r3, lsl #8
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006eee:	fb80 0105 	smull	r0, r1, r0, r5
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	f171 0300 	sbcs.w	r3, r1, #0
    ms5611.dT += ms5611.T;
 8006ef8:	6165      	str	r5, [r4, #20]
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006efa:	da02      	bge.n	8006f02 <read_barometer+0xba>
 8006efc:	307f      	adds	r0, #127	; 0x7f
 8006efe:	f141 0100 	adc.w	r1, r1, #0
 8006f02:	2300      	movs	r3, #0
 8006f04:	09c6      	lsrs	r6, r0, #7
 8006f06:	8860      	ldrh	r0, [r4, #2]
 8006f08:	ea46 6641 	orr.w	r6, r6, r1, lsl #25
 8006f0c:	0402      	lsls	r2, r0, #16
 8006f0e:	18b6      	adds	r6, r6, r2
    ms5611.SENS = (int64_t)ms5611.fc[0] * 32768 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[2]) / 256;
 8006f10:	88a2      	ldrh	r2, [r4, #4]
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006f12:	ea4f 17e1 	mov.w	r7, r1, asr #7
 8006f16:	415f      	adcs	r7, r3
    ms5611.SENS = (int64_t)ms5611.fc[0] * 32768 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[2]) / 256;
 8006f18:	fb82 2305 	smull	r2, r3, r2, r5
 8006f1c:	2a00      	cmp	r2, #0
 8006f1e:	f173 0100 	sbcs.w	r1, r3, #0
 8006f22:	f8b4 e000 	ldrh.w	lr, [r4]
 8006f26:	da02      	bge.n	8006f2e <read_barometer+0xe6>
 8006f28:	32ff      	adds	r2, #255	; 0xff
 8006f2a:	f143 0300 	adc.w	r3, r3, #0
 8006f2e:	0a10      	lsrs	r0, r2, #8
 8006f30:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8006f34:	1219      	asrs	r1, r3, #8
 8006f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    int32_t TEMP = 2000 + ((int64_t) ms5611.dT * ms5611.fc[5]) / 8388608;
 8006f3a:	8962      	ldrh	r2, [r4, #10]
    ms5611.SENS = (int64_t)ms5611.fc[0] * 32768 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[2]) / 256;
 8006f3c:	fbee 0103 	umlal	r0, r1, lr, r3
    int32_t TEMP = 2000 + ((int64_t) ms5611.dT * ms5611.fc[5]) / 8388608;
 8006f40:	fb82 2305 	smull	r2, r3, r2, r5
 8006f44:	2a00      	cmp	r2, #0
 8006f46:	f173 0500 	sbcs.w	r5, r3, #0
 8006f4a:	da07      	bge.n	8006f5c <read_barometer+0x114>
 8006f4c:	f04f 0900 	mov.w	r9, #0
 8006f50:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8007180 <read_barometer+0x338>
 8006f54:	eb12 0208 	adds.w	r2, r2, r8
 8006f58:	eb43 0309 	adc.w	r3, r3, r9
 8006f5c:	0dd5      	lsrs	r5, r2, #23
 8006f5e:	ea45 2543 	orr.w	r5, r5, r3, lsl #9
    ms5611.OFF2 = 0;
 8006f62:	2200      	movs	r2, #0
 8006f64:	2300      	movs	r3, #0
    int32_t TEMP = 2000 + ((int64_t) ms5611.dT * ms5611.fc[5]) / 8388608;
 8006f66:	f505 6efa 	add.w	lr, r5, #2000	; 0x7d0
    if(TEMP < 2000){
 8006f6a:	f5be 6ffa 	cmp.w	lr, #2000	; 0x7d0
    ms5611.OFF2 = 0;
 8006f6e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    ms5611.SENS2 = 0;
 8006f72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if(TEMP < 2000){
 8006f76:	da26      	bge.n	8006fc6 <read_barometer+0x17e>
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006f78:	fb05 f205 	mul.w	r2, r5, r5
    if (TEMP < -1500){
 8006f7c:	f8df c204 	ldr.w	ip, [pc, #516]	; 8007184 <read_barometer+0x33c>
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006f80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006f84:	ea4f 0862 	mov.w	r8, r2, asr #1
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006f88:	1092      	asrs	r2, r2, #2
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006f8a:	ea4f 79e8 	mov.w	r9, r8, asr #31
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006f8e:	17d3      	asrs	r3, r2, #31
    if (TEMP < -1500){
 8006f90:	45e6      	cmp	lr, ip
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006f92:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006f96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if (TEMP < -1500){
 8006f9a:	da14      	bge.n	8006fc6 <read_barometer+0x17e>
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8006f9c:	f605 55ac 	addw	r5, r5, #3500	; 0xdac
 8006fa0:	436d      	muls	r5, r5
 8006fa2:	ebc5 0ec5 	rsb	lr, r5, r5, lsl #3
 8006fa6:	eb18 080e 	adds.w	r8, r8, lr
 8006faa:	eb49 79ee 	adc.w	r9, r9, lr, asr #31
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8006fae:	f04f 0e0b 	mov.w	lr, #11
 8006fb2:	fb0e f505 	mul.w	r5, lr, r5
 8006fb6:	106d      	asrs	r5, r5, #1
 8006fb8:	1952      	adds	r2, r2, r5
 8006fba:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8006fbe:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8006fc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    ms5611.OFF = ms5611.OFF - ms5611.OFF2;
 8006fc6:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    ms5611.SENS = ms5611.SENS - ms5611.SENS2;
 8006fca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
    ms5611.OFF = ms5611.OFF - ms5611.OFF2;
 8006fce:	1ab6      	subs	r6, r6, r2
 8006fd0:	eb67 0703 	sbc.w	r7, r7, r3
    ms5611.P = ((ms5611.rawPressure * ms5611.SENS) / 2097152 - ms5611.OFF) / 32768;
 8006fd4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    ms5611.SENS = ms5611.SENS - ms5611.SENS2;
 8006fd8:	ebb0 0808 	subs.w	r8, r0, r8
 8006fdc:	eb61 0909 	sbc.w	r9, r1, r9
    ms5611.P = ((ms5611.rawPressure * ms5611.SENS) / 2097152 - ms5611.OFF) / 32768;
 8006fe0:	fba3 0108 	umull	r0, r1, r3, r8
 8006fe4:	fb03 1109 	mla	r1, r3, r9, r1
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f171 0300 	sbcs.w	r3, r1, #0
    ms5611.OFF = ms5611.OFF - ms5611.OFF2;
 8006fee:	e9c4 6708 	strd	r6, r7, [r4, #32]
    ms5611.SENS = ms5611.SENS - ms5611.SENS2;
 8006ff2:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
    ms5611.P = ((ms5611.rawPressure * ms5611.SENS) / 2097152 - ms5611.OFF) / 32768;
 8006ff6:	da03      	bge.n	8007000 <read_barometer+0x1b8>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4a57      	ldr	r2, [pc, #348]	; (8007158 <read_barometer+0x310>)
 8006ffc:	1880      	adds	r0, r0, r2
 8006ffe:	4159      	adcs	r1, r3
 8007000:	0d42      	lsrs	r2, r0, #21
 8007002:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8007006:	154b      	asrs	r3, r1, #21
 8007008:	1b92      	subs	r2, r2, r6
 800700a:	eb63 0307 	sbc.w	r3, r3, r7
 800700e:	2a00      	cmp	r2, #0
 8007010:	f173 0100 	sbcs.w	r1, r3, #0
 8007014:	da04      	bge.n	8007020 <read_barometer+0x1d8>
 8007016:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800701a:	2100      	movs	r1, #0
 800701c:	1812      	adds	r2, r2, r0
 800701e:	414b      	adcs	r3, r1
 8007020:	0bd1      	lsrs	r1, r2, #15
 8007022:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8007026:	13da      	asrs	r2, r3, #15
 8007028:	4b4c      	ldr	r3, [pc, #304]	; (800715c <read_barometer+0x314>)
 800702a:	f8c4 1160 	str.w	r1, [r4, #352]	; 0x160
 800702e:	605a      	str	r2, [r3, #4]
    ms5611.pressure_total_avarage -= ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 8007030:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8007034:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8007038:	f103 0526 	add.w	r5, r3, #38	; 0x26
    ms5611.pressure_rotating_mem_location++;                                                                         //Increase the rotating memory location.
 800703c:	3301      	adds	r3, #1
 800703e:	b2db      	uxtb	r3, r3
    if (ms5611.pressure_rotating_mem_location == 20)ms5611.pressure_rotating_mem_location = 0;                              //Start at 0 when the memory location 20 is reached.
 8007040:	2b14      	cmp	r3, #20
 8007042:	bf08      	it	eq
 8007044:	2300      	moveq	r3, #0
    ms5611.pressure_total_avarage -= ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 8007046:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    if (ms5611.pressure_rotating_mem_location == 20)ms5611.pressure_rotating_mem_location = 0;                              //Start at 0 when the memory location 20 is reached.
 800704a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    ms5611.pressure_total_avarage -= ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 800704e:	1a10      	subs	r0, r2, r0
    ms5611.pressure_total_avarage += ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Add the new value to the long term avarage value.
 8007050:	4408      	add	r0, r1
    ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location] = ms5611.P;                                                //Calculate the new change between the actual pressure and the previous measurement.
 8007052:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    ms5611.pressure_total_avarage += ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Add the new value to the long term avarage value.
 8007056:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    ms5611.actual_pressure_fast = (float)ms5611.pressure_total_avarage / 20.0;                                              //Calculate the average pressure of the last 20 pressure readings.
 800705a:	f7f9 fdf3 	bl	8000c44 <__aeabi_i2f>
 800705e:	4940      	ldr	r1, [pc, #256]	; (8007160 <read_barometer+0x318>)
 8007060:	f7f9 fef8 	bl	8000e54 <__aeabi_fdiv>
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 8007064:	493f      	ldr	r1, [pc, #252]	; (8007164 <read_barometer+0x31c>)
    ms5611.actual_pressure_fast = (float)ms5611.pressure_total_avarage / 20.0;                                              //Calculate the average pressure of the last 20 pressure readings.
 8007066:	4605      	mov	r5, r0
 8007068:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 800706c:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
 8007070:	f7f9 fe3c 	bl	8000cec <__aeabi_fmul>
 8007074:	493c      	ldr	r1, [pc, #240]	; (8007168 <read_barometer+0x320>)
 8007076:	4606      	mov	r6, r0
 8007078:	4628      	mov	r0, r5
 800707a:	f7f9 fe37 	bl	8000cec <__aeabi_fmul>
 800707e:	4601      	mov	r1, r0
 8007080:	4630      	mov	r0, r6
 8007082:	f7f9 fd2b 	bl	8000adc <__addsf3>
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 8007086:	4629      	mov	r1, r5
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 8007088:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 800708c:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 8007090:	4606      	mov	r6, r0
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 8007092:	f7f9 fd21 	bl	8000ad8 <__aeabi_fsub>
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 8007096:	4629      	mov	r1, r5
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 8007098:	4607      	mov	r7, r0
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 800709a:	f7f9 ffe3 	bl	8001064 <__aeabi_fcmpgt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d155      	bne.n	800714e <read_barometer+0x306>
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 80070a2:	f8c4 7174 	str.w	r7, [r4, #372]	; 0x174
    if (ms5611.actual_pressure_diff < -8)ms5611.actual_pressure_diff = -8;                                                  //If the difference is smaller then -8 limit the difference to -8.
 80070a6:	f04f 4541 	mov.w	r5, #3238002688	; 0xc1000000
 80070aa:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
 80070ae:	4629      	mov	r1, r5
 80070b0:	f7f9 ffba 	bl	8001028 <__aeabi_fcmplt>
 80070b4:	b108      	cbz	r0, 80070ba <read_barometer+0x272>
 80070b6:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
    if (ms5611.actual_pressure_diff > 1 || ms5611.actual_pressure_diff < -1)ms5611.actual_pressure_slow -= ms5611.actual_pressure_diff / 6.0;
 80070ba:	f8d4 5174 	ldr.w	r5, [r4, #372]	; 0x174
 80070be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80070c2:	4628      	mov	r0, r5
 80070c4:	f7f9 ffce 	bl	8001064 <__aeabi_fcmpgt>
 80070c8:	b920      	cbnz	r0, 80070d4 <read_barometer+0x28c>
 80070ca:	4928      	ldr	r1, [pc, #160]	; (800716c <read_barometer+0x324>)
 80070cc:	4628      	mov	r0, r5
 80070ce:	f7f9 ffab 	bl	8001028 <__aeabi_fcmplt>
 80070d2:	b1a8      	cbz	r0, 8007100 <read_barometer+0x2b8>
 80070d4:	4630      	mov	r0, r6
 80070d6:	f7f9 f9a7 	bl	8000428 <__aeabi_f2d>
 80070da:	4606      	mov	r6, r0
 80070dc:	4628      	mov	r0, r5
 80070de:	460f      	mov	r7, r1
 80070e0:	f7f9 f9a2 	bl	8000428 <__aeabi_f2d>
 80070e4:	2200      	movs	r2, #0
 80070e6:	4b22      	ldr	r3, [pc, #136]	; (8007170 <read_barometer+0x328>)
 80070e8:	f7f9 fb1c 	bl	8000724 <__aeabi_ddiv>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4630      	mov	r0, r6
 80070f2:	4639      	mov	r1, r7
 80070f4:	f7f9 f838 	bl	8000168 <__aeabi_dsub>
 80070f8:	f7f9 fc9a 	bl	8000a30 <__aeabi_d2f>
 80070fc:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    ms5611.actual_pressure = ms5611.actual_pressure_slow;                                                                   //The actual_pressure is used in the program for altitude calculations.
 8007100:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    ms5611.GroundAltitude = lrintf((1.0f - powf((ms5611.actual_pressure) / 101325.0f, 0.190295f)) * 4433000.0f);
 8007104:	491b      	ldr	r1, [pc, #108]	; (8007174 <read_barometer+0x32c>)
    ms5611.actual_pressure = ms5611.actual_pressure_slow;                                                                   //The actual_pressure is used in the program for altitude calculations.
 8007106:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    ms5611.GroundAltitude = lrintf((1.0f - powf((ms5611.actual_pressure) / 101325.0f, 0.190295f)) * 4433000.0f);
 800710a:	f7f9 fea3 	bl	8000e54 <__aeabi_fdiv>
 800710e:	491a      	ldr	r1, [pc, #104]	; (8007178 <read_barometer+0x330>)
 8007110:	f002 f99e 	bl	8009450 <powf>
 8007114:	4601      	mov	r1, r0
 8007116:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800711a:	f7f9 fcdd 	bl	8000ad8 <__aeabi_fsub>
 800711e:	4917      	ldr	r1, [pc, #92]	; (800717c <read_barometer+0x334>)
 8007120:	f7f9 fde4 	bl	8000cec <__aeabi_fmul>
 8007124:	f001 ffa8 	bl	8009078 <lrintf>
 8007128:	f7f9 fd8c 	bl	8000c44 <__aeabi_i2f>
 800712c:	f8c4 0194 	str.w	r0, [r4, #404]	; 0x194
  if (ms5611.barometer_counter == 3) {                                                                               //When the barometer counter is 3
 8007130:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8007134:	2b03      	cmp	r3, #3
    ms5611.barometer_counter = 0;                                                                                    //Set the barometer counter to 0 for the next measurements.
 8007136:	bf04      	itt	eq
 8007138:	2300      	moveq	r3, #0
 800713a:	f884 3060 	strbeq.w	r3, [r4, #96]	; 0x60
 800713e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8007142:	2000      	movs	r0, #0
 8007144:	f7ff fe6a 	bl	8006e1c <readRegister24>
 8007148:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800714c:	e6ae      	b.n	8006eac <read_barometer+0x64>
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 800714e:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
 8007152:	e7a8      	b.n	80070a6 <read_barometer+0x25e>
 8007154:	20000b58 	.word	0x20000b58
 8007158:	001fffff 	.word	0x001fffff
 800715c:	20000cb8 	.word	0x20000cb8
 8007160:	41a00000 	.word	0x41a00000
 8007164:	3f7c28f6 	.word	0x3f7c28f6
 8007168:	3c75c28f 	.word	0x3c75c28f
 800716c:	bf800000 	.word	0xbf800000
 8007170:	40180000 	.word	0x40180000
 8007174:	47c5e680 	.word	0x47c5e680
 8007178:	3e42dcb1 	.word	0x3e42dcb1
 800717c:	4a8748d0 	.word	0x4a8748d0
 8007180:	007fffff 	.word	0x007fffff
 8007184:	fffffa24 	.word	0xfffffa24

08007188 <MS5611_Init>:
{
 8007188:	b538      	push	{r3, r4, r5, lr}
	sprintf(Buf, "Initialize MS-5611 Sensor\r\n");
 800718a:	492f      	ldr	r1, [pc, #188]	; (8007248 <MS5611_Init+0xc0>)
{
 800718c:	4605      	mov	r5, r0
	sprintf(Buf, "Initialize MS-5611 Sensor\r\n");
 800718e:	482f      	ldr	r0, [pc, #188]	; (800724c <MS5611_Init+0xc4>)
 8007190:	f001 fae4 	bl	800875c <strcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8007194:	482d      	ldr	r0, [pc, #180]	; (800724c <MS5611_Init+0xc4>)
 8007196:	f7f8 ffdb 	bl	8000150 <strlen>
 800719a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800719e:	b282      	uxth	r2, r0
 80071a0:	492a      	ldr	r1, [pc, #168]	; (800724c <MS5611_Init+0xc4>)
 80071a2:	482b      	ldr	r0, [pc, #172]	; (8007250 <MS5611_Init+0xc8>)
 80071a4:	f7fc fbf8 	bl	8003998 <HAL_UART_Transmit>
  I2C_Write(MS5611_ADDRESS, MS5611_CMD_RESET, 1);
 80071a8:	2201      	movs	r2, #1
 80071aa:	211e      	movs	r1, #30
 80071ac:	20ee      	movs	r0, #238	; 0xee
 80071ae:	f7fd f8f9 	bl	80043a4 <I2C_Write>
  ms5611.seaLevelPressure = 101325;
 80071b2:	a123      	add	r1, pc, #140	; (adr r1, 8007240 <MS5611_Init+0xb8>)
 80071b4:	e9d1 0100 	ldrd	r0, r1, [r1]
  ms5611.compensation = 1;
 80071b8:	2301      	movs	r3, #1
 80071ba:	4c26      	ldr	r4, [pc, #152]	; (8007254 <MS5611_Init+0xcc>)
  ms5611.seaLevelPressure = 101325;
 80071bc:	f504 72bc 	add.w	r2, r4, #376	; 0x178
  ms5611.compensation = 1;
 80071c0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  ms5611.seaLevelPressure = 101325;
 80071c4:	e9c2 0100 	strd	r0, r1, [r2]
  switch (osr)
 80071c8:	2d08      	cmp	r5, #8
 80071ca:	d808      	bhi.n	80071de <MS5611_Init+0x56>
 80071cc:	e8df f005 	tbb	[pc, r5]
 80071d0:	07050706 	.word	0x07050706
 80071d4:	07340732 	.word	0x07340732
 80071d8:	36          	.byte	0x36
 80071d9:	00          	.byte	0x00
      ms5611.ct = 2;
 80071da:	2302      	movs	r3, #2
      ms5611.ct = 10;
 80071dc:	7323      	strb	r3, [r4, #12]
  HAL_Delay(100);
 80071de:	2064      	movs	r0, #100	; 0x64
  ms5611.uosr = osr;
 80071e0:	7365      	strb	r5, [r4, #13]
  HAL_Delay(100);
 80071e2:	f7f9 ffcd 	bl	8001180 <HAL_Delay>
 80071e6:	2500      	movs	r5, #0
    ms5611.fc[offset] = readRegister16(MS5611_CMD_READ_PROM + (offset * 2));
 80071e8:	f1a5 005e 	sub.w	r0, r5, #94	; 0x5e
 80071ec:	b2c0      	uxtb	r0, r0
 80071ee:	f7ff fe01 	bl	8006df4 <readRegister16>
 80071f2:	5360      	strh	r0, [r4, r5]
 80071f4:	3502      	adds	r5, #2
  for (uint8_t offset = 0; offset < 6; offset++)
 80071f6:	2d0c      	cmp	r5, #12
 80071f8:	d1f6      	bne.n	80071e8 <MS5611_Init+0x60>
  sprintf(Buf, "Oversampling: %d\r\n", ms5611.uosr);
 80071fa:	7b62      	ldrb	r2, [r4, #13]
 80071fc:	4916      	ldr	r1, [pc, #88]	; (8007258 <MS5611_Init+0xd0>)
 80071fe:	4813      	ldr	r0, [pc, #76]	; (800724c <MS5611_Init+0xc4>)
 8007200:	f001 fa88 	bl	8008714 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8007204:	4811      	ldr	r0, [pc, #68]	; (800724c <MS5611_Init+0xc4>)
 8007206:	f7f8 ffa3 	bl	8000150 <strlen>
 800720a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800720e:	b282      	uxth	r2, r0
 8007210:	490e      	ldr	r1, [pc, #56]	; (800724c <MS5611_Init+0xc4>)
 8007212:	480f      	ldr	r0, [pc, #60]	; (8007250 <MS5611_Init+0xc8>)
 8007214:	f7fc fbc0 	bl	8003998 <HAL_UART_Transmit>
 8007218:	25ff      	movs	r5, #255	; 0xff
    read_barometer();                                           //Read and calculate the barometer data.
 800721a:	f7ff fe15 	bl	8006e48 <read_barometer>
 800721e:	3d01      	subs	r5, #1
    HAL_Delay(4);                                               //The main program loop also runs 250Hz (4ms per loop).
 8007220:	2004      	movs	r0, #4
 8007222:	f7f9 ffad 	bl	8001180 <HAL_Delay>
  for (uint8_t start = 0; start < 255; start++) {                       //This loop runs 100 times.
 8007226:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800722a:	d1f6      	bne.n	800721a <MS5611_Init+0x92>
  ms5611.actual_pressure = 0;                                          //Reset the pressure calculations.
 800722c:	2300      	movs	r3, #0
 800722e:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
 8007232:	bd38      	pop	{r3, r4, r5, pc}
      ms5611.ct = 3;
 8007234:	2303      	movs	r3, #3
 8007236:	e7d1      	b.n	80071dc <MS5611_Init+0x54>
      ms5611.ct = 5;
 8007238:	2305      	movs	r3, #5
 800723a:	e7cf      	b.n	80071dc <MS5611_Init+0x54>
      ms5611.ct = 10;
 800723c:	230a      	movs	r3, #10
 800723e:	e7cd      	b.n	80071dc <MS5611_Init+0x54>
 8007240:	00000000 	.word	0x00000000
 8007244:	40f8bcd0 	.word	0x40f8bcd0
 8007248:	0800b6d8 	.word	0x0800b6d8
 800724c:	20000da4 	.word	0x20000da4
 8007250:	200010e8 	.word	0x200010e8
 8007254:	20000b58 	.word	0x20000b58
 8007258:	0800b6f4 	.word	0x0800b6f4

0800725c <Baro_update>:
    switch (taskOrder){
 800725c:	4b2a      	ldr	r3, [pc, #168]	; (8007308 <Baro_update+0xac>)
{
 800725e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (taskOrder){
 8007262:	681c      	ldr	r4, [r3, #0]
 8007264:	2c01      	cmp	r4, #1
 8007266:	d046      	beq.n	80072f6 <Baro_update+0x9a>
 8007268:	2c02      	cmp	r4, #2
 800726a:	f04f 0501 	mov.w	r5, #1
 800726e:	d047      	beq.n	8007300 <Baro_update+0xa4>
 8007270:	2c00      	cmp	r4, #0
 8007272:	d13e      	bne.n	80072f2 <Baro_update+0x96>
       if ((int32_t)(loop_timer - baroDeadline) < 0)
 8007274:	4a25      	ldr	r2, [pc, #148]	; (800730c <Baro_update+0xb0>)
 8007276:	4e26      	ldr	r6, [pc, #152]	; (8007310 <Baro_update+0xb4>)
       taskOrder++;
 8007278:	601d      	str	r5, [r3, #0]
       if ((int32_t)(loop_timer - baroDeadline) < 0)
 800727a:	6831      	ldr	r1, [r6, #0]
 800727c:	6813      	ldr	r3, [r2, #0]
 800727e:	1a5b      	subs	r3, r3, r1
 8007280:	2b00      	cmp	r3, #0
 8007282:	db20      	blt.n	80072c6 <Baro_update+0x6a>
       baroDeadline = loop_timer;
 8007284:	6813      	ldr	r3, [r2, #0]
       if (state) {
 8007286:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8007318 <Baro_update+0xbc>
       baroDeadline = loop_timer;
 800728a:	6033      	str	r3, [r6, #0]
       if (state) {
 800728c:	f8d8 3000 	ldr.w	r3, [r8]
 8007290:	4f20      	ldr	r7, [pc, #128]	; (8007314 <Baro_update+0xb8>)
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8007292:	4620      	mov	r0, r4
       if (state) {
 8007294:	b1d3      	cbz	r3, 80072cc <Baro_update+0x70>
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8007296:	f7ff fdc1 	bl	8006e1c <readRegister24>
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 800729a:	7b79      	ldrb	r1, [r7, #13]
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 800729c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 80072a0:	3150      	adds	r1, #80	; 0x50
 80072a2:	462a      	mov	r2, r5
 80072a4:	b2c9      	uxtb	r1, r1
 80072a6:	20ee      	movs	r0, #238	; 0xee
 80072a8:	f7fd f87c 	bl	80043a4 <I2C_Write>
        baroDeadline += 10000;
 80072ac:	6833      	ldr	r3, [r6, #0]
        ms5611.realPressure = readPressure(1);
 80072ae:	4628      	mov	r0, r5
        baroDeadline += 10000;
 80072b0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80072b4:	3310      	adds	r3, #16
 80072b6:	6033      	str	r3, [r6, #0]
        ms5611.realPressure = readPressure(1);
 80072b8:	f7ff fce8 	bl	8006c8c <readPressure>
        state = 0;
 80072bc:	f8c8 4000 	str.w	r4, [r8]
        return 2;
 80072c0:	2402      	movs	r4, #2
        ms5611.realPressure = readPressure(1);
 80072c2:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
}
 80072c6:	4620      	mov	r0, r4
 80072c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 80072cc:	f7ff fda6 	bl	8006e1c <readRegister24>
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 80072d0:	7b79      	ldrb	r1, [r7, #13]
        ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 80072d2:	6678      	str	r0, [r7, #100]	; 0x64
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 80072d4:	3140      	adds	r1, #64	; 0x40
 80072d6:	462a      	mov	r2, r5
 80072d8:	b2c9      	uxtb	r1, r1
 80072da:	20ee      	movs	r0, #238	; 0xee
 80072dc:	f7fd f862 	bl	80043a4 <I2C_Write>
        Baro_Common();
 80072e0:	f7ff fc1c 	bl	8006b1c <Baro_Common>
        baroDeadline += 10000;
 80072e4:	6833      	ldr	r3, [r6, #0]
        state = 1;
 80072e6:	f8c8 5000 	str.w	r5, [r8]
        baroDeadline += 10000;
 80072ea:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80072ee:	3310      	adds	r3, #16
 80072f0:	6033      	str	r3, [r6, #0]
    return 1;
 80072f2:	462c      	mov	r4, r5
 80072f4:	e7e7      	b.n	80072c6 <Baro_update+0x6a>
      taskOrder++;
 80072f6:	2202      	movs	r2, #2
 80072f8:	601a      	str	r2, [r3, #0]
       getEstimatedAltitude();
 80072fa:	f7ff fc2d 	bl	8006b58 <getEstimatedAltitude>
       break;
 80072fe:	e7e2      	b.n	80072c6 <Baro_update+0x6a>
      taskOrder = 0;
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	e7f5      	b.n	80072f2 <Baro_update+0x96>
 8007306:	bf00      	nop
 8007308:	20000620 	.word	0x20000620
 800730c:	2000073c 	.word	0x2000073c
 8007310:	20000520 	.word	0x20000520
 8007314:	20000b58 	.word	0x20000b58
 8007318:	2000061c 	.word	0x2000061c

0800731c <HAL_UART_RxCpltCallback>:
   return(ch);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART1) //current USART
 800731c:	6802      	ldr	r2, [r0, #0]
 800731e:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_UART_RxCpltCallback+0x30>)
{
 8007320:	b510      	push	{r4, lr}
	if(huart->Instance == USART1) //current USART
 8007322:	429a      	cmp	r2, r3
{
 8007324:	4604      	mov	r4, r0
	if(huart->Instance == USART1) //current USART
 8007326:	d104      	bne.n	8007332 <HAL_UART_RxCpltCallback+0x16>
		{
			write_Q(&Q_buffer[UART1], rx1_buffer[0]);
 8007328:	4b09      	ldr	r3, [pc, #36]	; (8007350 <HAL_UART_RxCpltCallback+0x34>)
 800732a:	480a      	ldr	r0, [pc, #40]	; (8007354 <HAL_UART_RxCpltCallback+0x38>)
 800732c:	7819      	ldrb	r1, [r3, #0]
 800732e:	f7fe fa12 	bl	8005756 <write_Q>
			//TX_CHR(rx1_buffer[0]);
		}
		
	if(huart->Instance == USART2) //current USART
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	4b08      	ldr	r3, [pc, #32]	; (8007358 <HAL_UART_RxCpltCallback+0x3c>)
 8007336:	429a      	cmp	r2, r3
 8007338:	d106      	bne.n	8007348 <HAL_UART_RxCpltCallback+0x2c>
		{
			write_Q(&Q_buffer[UART2], rx2_buffer[0]);
		}
}
 800733a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			write_Q(&Q_buffer[UART2], rx2_buffer[0]);
 800733e:	4b07      	ldr	r3, [pc, #28]	; (800735c <HAL_UART_RxCpltCallback+0x40>)
 8007340:	4807      	ldr	r0, [pc, #28]	; (8007360 <HAL_UART_RxCpltCallback+0x44>)
 8007342:	7819      	ldrb	r1, [r3, #0]
 8007344:	f7fe ba07 	b.w	8005756 <write_Q>
 8007348:	bd10      	pop	{r4, pc}
 800734a:	bf00      	nop
 800734c:	40013800 	.word	0x40013800
 8007350:	20000e24 	.word	0x20000e24
 8007354:	2000096c 	.word	0x2000096c
 8007358:	40004400 	.word	0x40004400
 800735c:	20000e34 	.word	0x20000e34
 8007360:	200009f4 	.word	0x200009f4

08007364 <TX_CHR>:

void TX_CHR(char ch){
	while(!(USART1->SR & 0x80));
 8007364:	4b02      	ldr	r3, [pc, #8]	; (8007370 <TX_CHR+0xc>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	0612      	lsls	r2, r2, #24
 800736a:	d5fc      	bpl.n	8007366 <TX_CHR+0x2>
	USART1->DR = ch;
 800736c:	6058      	str	r0, [r3, #4]
 800736e:	4770      	bx	lr
 8007370:	40013800 	.word	0x40013800

08007374 <serialize8>:
}

///////////////////////////////////////////////////
void serialize8(uint8_t a)
{
 8007374:	b508      	push	{r3, lr}
 8007376:	4601      	mov	r1, r0
    TX_CHR(a);
 8007378:	f7ff fff4 	bl	8007364 <TX_CHR>
    currentPortState->checksum ^= a;
 800737c:	4b02      	ldr	r3, [pc, #8]	; (8007388 <serialize8+0x14>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	781a      	ldrb	r2, [r3, #0]
 8007382:	4051      	eors	r1, r2
 8007384:	7019      	strb	r1, [r3, #0]
 8007386:	bd08      	pop	{r3, pc}
 8007388:	2000000c 	.word	0x2000000c

0800738c <headSerial>:
    t += (uint32_t)read16() << 16;
    return t;
}

void headSerial(uint8_t err, uint8_t s, uint8_t cmdMSP)
{
 800738c:	b570      	push	{r4, r5, r6, lr}
 800738e:	4606      	mov	r6, r0
    serialize8('$');
 8007390:	2024      	movs	r0, #36	; 0x24
{
 8007392:	460d      	mov	r5, r1
 8007394:	4614      	mov	r4, r2
    serialize8('$');
 8007396:	f7ff ffed 	bl	8007374 <serialize8>
    serialize8('M');
 800739a:	204d      	movs	r0, #77	; 0x4d
 800739c:	f7ff ffea 	bl	8007374 <serialize8>
    serialize8(err ? '!' : '>');
 80073a0:	2e00      	cmp	r6, #0
 80073a2:	bf14      	ite	ne
 80073a4:	2021      	movne	r0, #33	; 0x21
 80073a6:	203e      	moveq	r0, #62	; 0x3e
 80073a8:	f7ff ffe4 	bl	8007374 <serialize8>
    currentPortState->checksum = 0;               // start calculating a new checksum
 80073ac:	2200      	movs	r2, #0
 80073ae:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <headSerial+0x38>)
    serialize8(s);
 80073b0:	4628      	mov	r0, r5
    currentPortState->checksum = 0;               // start calculating a new checksum
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	701a      	strb	r2, [r3, #0]
    serialize8(s);
 80073b6:	f7ff ffdd 	bl	8007374 <serialize8>
    serialize8(cmdMSP);
 80073ba:	4620      	mov	r0, r4
}
 80073bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serialize8(cmdMSP);
 80073c0:	f7ff bfd8 	b.w	8007374 <serialize8>
 80073c4:	2000000c 	.word	0x2000000c

080073c8 <headSerialSend>:

void headSerialSend(uint8_t s, uint8_t cmdMSP)
{
    headSerial(0, s, cmdMSP);
 80073c8:	460a      	mov	r2, r1
 80073ca:	4601      	mov	r1, r0
 80073cc:	2000      	movs	r0, #0
 80073ce:	f7ff bfdd 	b.w	800738c <headSerial>
	...

080073d4 <tailSerialReply>:
    headSerialResponse(1, s);
}

void tailSerialReply(void)
{
    serialize8(currentPortState->checksum);
 80073d4:	4b02      	ldr	r3, [pc, #8]	; (80073e0 <tailSerialReply+0xc>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	7818      	ldrb	r0, [r3, #0]
 80073da:	f7ff bfcb 	b.w	8007374 <serialize8>
 80073de:	bf00      	nop
 80073e0:	2000000c 	.word	0x2000000c

080073e4 <PrintData>:
}
///////////////////////////////////////////////////

void PrintData(uint8_t command)
{
 80073e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  Debug_TC++;
 80073e6:	4aa6      	ldr	r2, [pc, #664]	; (8007680 <PrintData+0x29c>)
{
 80073e8:	b099      	sub	sp, #100	; 0x64
  Debug_TC++;
 80073ea:	7813      	ldrb	r3, [r2, #0]
{
 80073ec:	4604      	mov	r4, r0
  Debug_TC++;
 80073ee:	3301      	adds	r3, #1
 80073f0:	b2db      	uxtb	r3, r3
  if(Debug_TC >= 12){
 80073f2:	2b0b      	cmp	r3, #11
 80073f4:	d802      	bhi.n	80073fc <PrintData+0x18>
  Debug_TC++;
 80073f6:	7013      	strb	r3, [r2, #0]
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw);
	     HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
		break;
	 }
  }
}
 80073f8:	b019      	add	sp, #100	; 0x64
 80073fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Debug_TC = 0;
 80073fc:	2300      	movs	r3, #0
    LED1_TOGGLE;  //GREEN
 80073fe:	2110      	movs	r1, #16
 8007400:	48a0      	ldr	r0, [pc, #640]	; (8007684 <PrintData+0x2a0>)
    Debug_TC = 0;
 8007402:	7013      	strb	r3, [r2, #0]
    LED1_TOGGLE;  //GREEN
 8007404:	f7fa fbdb 	bl	8001bbe <HAL_GPIO_TogglePin>
	switch(command)
 8007408:	2c0e      	cmp	r4, #14
 800740a:	d8f5      	bhi.n	80073f8 <PrintData+0x14>
 800740c:	e8df f014 	tbh	[pc, r4, lsl #1]
 8007410:	001e000f 	.word	0x001e000f
 8007414:	0076005f 	.word	0x0076005f
 8007418:	00b000a0 	.word	0x00b000a0
 800741c:	015e00fe 	.word	0x015e00fe
 8007420:	01820168 	.word	0x01820168
 8007424:	01b0019d 	.word	0x01b0019d
 8007428:	01d801c4 	.word	0x01d801c4
 800742c:	01ec      	.short	0x01ec
		sprintf(Buf, "[1]9250 [3]Radio [4]Motor [5]Angle [6]PID [9]IMU [p]Kp [i]Ki [d]Kd [q,w,e] [z,x,c] \r\n ");
 800742e:	4996      	ldr	r1, [pc, #600]	; (8007688 <PrintData+0x2a4>)
 8007430:	4896      	ldr	r0, [pc, #600]	; (800768c <PrintData+0x2a8>)
 8007432:	f001 f993 	bl	800875c <strcpy>
	     HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
 8007436:	4895      	ldr	r0, [pc, #596]	; (800768c <PrintData+0x2a8>)
 8007438:	f7f8 fe8a 	bl	8000150 <strlen>
 800743c:	4993      	ldr	r1, [pc, #588]	; (800768c <PrintData+0x2a8>)
 800743e:	b282      	uxth	r2, r0
 8007440:	4893      	ldr	r0, [pc, #588]	; (8007690 <PrintData+0x2ac>)
}
 8007442:	b019      	add	sp, #100	; 0x64
 8007444:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	     HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
 8007448:	f7fc bb02 	b.w	8003a50 <HAL_UART_Transmit_DMA>
	                    imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW]);
 800744c:	4c91      	ldr	r4, [pc, #580]	; (8007694 <PrintData+0x2b0>)
	     sprintf(Buf, " acc (%6.2f), (%6.2f), (%6.2f) / gyro (%6.2f), (%6.2f), (%6.2f) / mag (%6.f), (%6.f), (%6.f)\r\n",
 800744e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007450:	f7f8 ffea 	bl	8000428 <__aeabi_f2d>
 8007454:	4606      	mov	r6, r0
 8007456:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007458:	460f      	mov	r7, r1
 800745a:	f7f8 ffe5 	bl	8000428 <__aeabi_f2d>
 800745e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007462:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007464:	f7f8 ffe0 	bl	8000428 <__aeabi_f2d>
 8007468:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800746c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800746e:	f7f8 ffdb 	bl	8000428 <__aeabi_f2d>
 8007472:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007476:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007478:	f7f8 ffd6 	bl	8000428 <__aeabi_f2d>
 800747c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007480:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007482:	f7f8 ffd1 	bl	8000428 <__aeabi_f2d>
 8007486:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800748a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800748c:	f7f8 ffcc 	bl	8000428 <__aeabi_f2d>
 8007490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007494:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007496:	f7f8 ffc7 	bl	8000428 <__aeabi_f2d>
 800749a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800749e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80074a0:	f7f8 ffc2 	bl	8000428 <__aeabi_f2d>
 80074a4:	4632      	mov	r2, r6
 80074a6:	e9cd 0100 	strd	r0, r1, [sp]
 80074aa:	463b      	mov	r3, r7
 80074ac:	497a      	ldr	r1, [pc, #488]	; (8007698 <PrintData+0x2b4>)
 80074ae:	4877      	ldr	r0, [pc, #476]	; (800768c <PrintData+0x2a8>)
 80074b0:	f001 f930 	bl	8008714 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80074b4:	4875      	ldr	r0, [pc, #468]	; (800768c <PrintData+0x2a8>)
 80074b6:	f7f8 fe4b 	bl	8000150 <strlen>
 80074ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074be:	b282      	uxth	r2, r0
 80074c0:	4972      	ldr	r1, [pc, #456]	; (800768c <PrintData+0x2a8>)
 80074c2:	4873      	ldr	r0, [pc, #460]	; (8007690 <PrintData+0x2ac>)
}
 80074c4:	b019      	add	sp, #100	; 0x64
 80074c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80074ca:	f7fc ba65 	b.w	8003998 <HAL_UART_Transmit>
                 	imu.gyro_cal[ROLL], imu.gyro_cal[PITCH], imu.gyro_cal[YAW]);
 80074ce:	4c71      	ldr	r4, [pc, #452]	; (8007694 <PrintData+0x2b0>)
		sprintf(Buf, " gyroBias_x: (%3.2f), gyroBias_y: (%3.2f), gyroBias_z: (%3.2f)\r\n",
 80074d0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80074d2:	f7f8 ffa9 	bl	8000428 <__aeabi_f2d>
 80074d6:	4606      	mov	r6, r0
 80074d8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80074da:	460f      	mov	r7, r1
 80074dc:	f7f8 ffa4 	bl	8000428 <__aeabi_f2d>
 80074e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074e4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80074e6:	f7f8 ff9f 	bl	8000428 <__aeabi_f2d>
 80074ea:	4632      	mov	r2, r6
 80074ec:	e9cd 0100 	strd	r0, r1, [sp]
 80074f0:	463b      	mov	r3, r7
 80074f2:	496a      	ldr	r1, [pc, #424]	; (800769c <PrintData+0x2b8>)
 80074f4:	4865      	ldr	r0, [pc, #404]	; (800768c <PrintData+0x2a8>)
 80074f6:	f001 f90d 	bl	8008714 <siprintf>
 80074fa:	e7db      	b.n	80074b4 <PrintData+0xd0>
	          GPS.year, GPS.month, GPS.day, GPS.hour, GPS.minute, GPS.seconds, GPS.milliseconds, GPS.speed, GPS.angle, GPS.error);
 80074fc:	4c68      	ldr	r4, [pc, #416]	; (80076a0 <PrintData+0x2bc>)
	  sprintf(Buf, "Y : %2d, M : %2d, D : %2d, H: %2d, min : %2d, sec : %2d, mil : %3d, speed : %.2f, angle : %.2f, Error : %d\n",
 80074fe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8007502:	f894 607c 	ldrb.w	r6, [r4, #124]	; 0x7c
 8007506:	f894 507b 	ldrb.w	r5, [r4, #123]	; 0x7b
 800750a:	930a      	str	r3, [sp, #40]	; 0x28
 800750c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8007510:	f7f8 ff8a 	bl	8000428 <__aeabi_f2d>
 8007514:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007518:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800751c:	f7f8 ff84 	bl	8000428 <__aeabi_f2d>
 8007520:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007524:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 8007528:	462a      	mov	r2, r5
 800752a:	9304      	str	r3, [sp, #16]
 800752c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 8007530:	495c      	ldr	r1, [pc, #368]	; (80076a4 <PrintData+0x2c0>)
 8007532:	9303      	str	r3, [sp, #12]
 8007534:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8007538:	4854      	ldr	r0, [pc, #336]	; (800768c <PrintData+0x2a8>)
 800753a:	9302      	str	r3, [sp, #8]
 800753c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	4633      	mov	r3, r6
 800754a:	f001 f8e3 	bl	8008714 <siprintf>
 800754e:	e772      	b.n	8007436 <PrintData+0x52>
		sprintf(Buf, " %d %d %d %d\r\n", motor[0], motor[1], motor[2], motor[3]);
 8007550:	4955      	ldr	r1, [pc, #340]	; (80076a8 <PrintData+0x2c4>)
 8007552:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 8007556:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800755a:	f9b1 2000 	ldrsh.w	r2, [r1]
 800755e:	9001      	str	r0, [sp, #4]
 8007560:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8007564:	4849      	ldr	r0, [pc, #292]	; (800768c <PrintData+0x2a8>)
 8007566:	9100      	str	r1, [sp, #0]
 8007568:	4950      	ldr	r1, [pc, #320]	; (80076ac <PrintData+0x2c8>)
 800756a:	f001 f8d3 	bl	8008714 <siprintf>
 800756e:	e7a1      	b.n	80074b4 <PrintData+0xd0>
            imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW], imu.AHRS[ROLL], imu.AHRS[PITCH], imu.AHRS[YAW], RC.rcCommand[ROLL], RC.rcCommand[PITCH], RC.rcCommand[YAW], RC.rcCommand[THROTTLE], BAT.VBAT_Sense, BAT.VBAT, f.ARMED, ms5611.actual_pressure, ms5611.GroundAltitude);
 8007570:	4c48      	ldr	r4, [pc, #288]	; (8007694 <PrintData+0x2b0>)
 8007572:	4d4f      	ldr	r5, [pc, #316]	; (80076b0 <PrintData+0x2cc>)
    sprintf(Buf, "Mag:(%5.f)(%5.f)(%5.f), AHRS:(%4.f)(%4.f)(%4.f), RC:(%4.d)(%4.d)(%4.d)(%4.d), (%4.d) (%4.2f), ARMED: (%2.1d), MS5611 : %.2f Pa , %.2f cm\r\n",
 8007574:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007576:	f7f8 ff57 	bl	8000428 <__aeabi_f2d>
 800757a:	4606      	mov	r6, r0
 800757c:	f8d5 0194 	ldr.w	r0, [r5, #404]	; 0x194
 8007580:	460f      	mov	r7, r1
 8007582:	f7f8 ff51 	bl	8000428 <__aeabi_f2d>
 8007586:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800758a:	f8d5 0168 	ldr.w	r0, [r5, #360]	; 0x168
 800758e:	f7f8 ff4b 	bl	8000428 <__aeabi_f2d>
 8007592:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
            imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW], imu.AHRS[ROLL], imu.AHRS[PITCH], imu.AHRS[YAW], RC.rcCommand[ROLL], RC.rcCommand[PITCH], RC.rcCommand[YAW], RC.rcCommand[THROTTLE], BAT.VBAT_Sense, BAT.VBAT, f.ARMED, ms5611.actual_pressure, ms5611.GroundAltitude);
 8007596:	4b47      	ldr	r3, [pc, #284]	; (80076b4 <PrintData+0x2d0>)
 8007598:	4d47      	ldr	r5, [pc, #284]	; (80076b8 <PrintData+0x2d4>)
    sprintf(Buf, "Mag:(%5.f)(%5.f)(%5.f), AHRS:(%4.f)(%4.f)(%4.f), RC:(%4.d)(%4.d)(%4.d)(%4.d), (%4.d) (%4.2f), ARMED: (%2.1d), MS5611 : %.2f Pa , %.2f cm\r\n",
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	9312      	str	r3, [sp, #72]	; 0x48
 800759e:	6868      	ldr	r0, [r5, #4]
 80075a0:	f7f8 ff42 	bl	8000428 <__aeabi_f2d>
 80075a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	930e      	str	r3, [sp, #56]	; 0x38
            imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW], imu.AHRS[ROLL], imu.AHRS[PITCH], imu.AHRS[YAW], RC.rcCommand[ROLL], RC.rcCommand[PITCH], RC.rcCommand[YAW], RC.rcCommand[THROTTLE], BAT.VBAT_Sense, BAT.VBAT, f.ARMED, ms5611.actual_pressure, ms5611.GroundAltitude);
 80075ac:	4b43      	ldr	r3, [pc, #268]	; (80076bc <PrintData+0x2d8>)
    sprintf(Buf, "Mag:(%5.f)(%5.f)(%5.f), AHRS:(%4.f)(%4.f)(%4.f), RC:(%4.d)(%4.d)(%4.d)(%4.d), (%4.d) (%4.2f), ARMED: (%2.1d), MS5611 : %.2f Pa , %.2f cm\r\n",
 80075ae:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 80075b2:	920d      	str	r2, [sp, #52]	; 0x34
 80075b4:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 80075b8:	920c      	str	r2, [sp, #48]	; 0x30
 80075ba:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 80075be:	920b      	str	r2, [sp, #44]	; 0x2c
 80075c0:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80075c4:	930a      	str	r3, [sp, #40]	; 0x28
 80075c6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80075ca:	f7f8 ff2d 	bl	8000428 <__aeabi_f2d>
 80075ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075d2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80075d6:	f7f8 ff27 	bl	8000428 <__aeabi_f2d>
 80075da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075de:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80075e2:	f7f8 ff21 	bl	8000428 <__aeabi_f2d>
 80075e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80075ec:	f7f8 ff1c 	bl	8000428 <__aeabi_f2d>
 80075f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80075f6:	f7f8 ff17 	bl	8000428 <__aeabi_f2d>
 80075fa:	4632      	mov	r2, r6
 80075fc:	e9cd 0100 	strd	r0, r1, [sp]
 8007600:	463b      	mov	r3, r7
 8007602:	492f      	ldr	r1, [pc, #188]	; (80076c0 <PrintData+0x2dc>)
 8007604:	4821      	ldr	r0, [pc, #132]	; (800768c <PrintData+0x2a8>)
 8007606:	f001 f885 	bl	8008714 <siprintf>
 800760a:	e714      	b.n	8007436 <PrintData+0x52>
            pid.kp[ROLL], pid.kp[PITCH], pid.ki[ROLL], pid.ki[PITCH], pid.kd[ROLL], pid.kd[PITCH], pid.kp[YAW], pid.ki[YAW], pid.kd[YAW], f.ARMED, f.Tuning_MODE);
 800760c:	4c2d      	ldr	r4, [pc, #180]	; (80076c4 <PrintData+0x2e0>)
    sprintf(Buf,"R[P]: %2.2f, P[P]: %2.2f, R[I]: %2.2f, P[I]: %2.2f, R[D]: %2.2f, P[D]: %2.2f, Y[P]: %2.2f, Y[I]: %2.2f, Y[D]: %2.2f, ARMED: (%d), Tuning : (%d)\r\n",
 800760e:	6860      	ldr	r0, [r4, #4]
 8007610:	f7f8 ff0a 	bl	8000428 <__aeabi_f2d>
            pid.kp[ROLL], pid.kp[PITCH], pid.ki[ROLL], pid.ki[PITCH], pid.kd[ROLL], pid.kd[PITCH], pid.kp[YAW], pid.ki[YAW], pid.kd[YAW], f.ARMED, f.Tuning_MODE);
 8007614:	4b27      	ldr	r3, [pc, #156]	; (80076b4 <PrintData+0x2d0>)
    sprintf(Buf,"R[P]: %2.2f, P[P]: %2.2f, R[I]: %2.2f, P[I]: %2.2f, R[D]: %2.2f, P[D]: %2.2f, Y[P]: %2.2f, Y[I]: %2.2f, Y[D]: %2.2f, ARMED: (%d), Tuning : (%d)\r\n",
 8007616:	4606      	mov	r6, r0
 8007618:	789a      	ldrb	r2, [r3, #2]
 800761a:	460f      	mov	r7, r1
 800761c:	9211      	str	r2, [sp, #68]	; 0x44
 800761e:	785b      	ldrb	r3, [r3, #1]
 8007620:	9310      	str	r3, [sp, #64]	; 0x40
 8007622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007624:	f7f8 ff00 	bl	8000428 <__aeabi_f2d>
 8007628:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800762c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800762e:	f7f8 fefb 	bl	8000428 <__aeabi_f2d>
 8007632:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007636:	68e0      	ldr	r0, [r4, #12]
 8007638:	f7f8 fef6 	bl	8000428 <__aeabi_f2d>
 800763c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007640:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007642:	f7f8 fef1 	bl	8000428 <__aeabi_f2d>
 8007646:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800764a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800764c:	f7f8 feec 	bl	8000428 <__aeabi_f2d>
 8007650:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007654:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007656:	f7f8 fee7 	bl	8000428 <__aeabi_f2d>
 800765a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800765e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007660:	f7f8 fee2 	bl	8000428 <__aeabi_f2d>
 8007664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007668:	68a0      	ldr	r0, [r4, #8]
 800766a:	f7f8 fedd 	bl	8000428 <__aeabi_f2d>
 800766e:	4632      	mov	r2, r6
 8007670:	e9cd 0100 	strd	r0, r1, [sp]
 8007674:	463b      	mov	r3, r7
 8007676:	4914      	ldr	r1, [pc, #80]	; (80076c8 <PrintData+0x2e4>)
 8007678:	4804      	ldr	r0, [pc, #16]	; (800768c <PrintData+0x2a8>)
 800767a:	f001 f84b 	bl	8008714 <siprintf>
 800767e:	e6da      	b.n	8007436 <PrintData+0x52>
 8007680:	20000624 	.word	0x20000624
 8007684:	40010c00 	.word	0x40010c00
 8007688:	0800b719 	.word	0x0800b719
 800768c:	20000da4 	.word	0x20000da4
 8007690:	200010e8 	.word	0x200010e8
 8007694:	20000cf8 	.word	0x20000cf8
 8007698:	0800b770 	.word	0x0800b770
 800769c:	0800b7cf 	.word	0x0800b7cf
 80076a0:	2000077c 	.word	0x2000077c
 80076a4:	0800b810 	.word	0x0800b810
 80076a8:	2000086a 	.word	0x2000086a
 80076ac:	0800b87c 	.word	0x0800b87c
 80076b0:	20000b58 	.word	0x20000b58
 80076b4:	20000a7c 	.word	0x20000a7c
 80076b8:	20000e44 	.word	0x20000e44
 80076bc:	20000af4 	.word	0x20000af4
 80076c0:	0800b88b 	.word	0x0800b88b
 80076c4:	20000874 	.word	0x20000874
 80076c8:	0800b916 	.word	0x0800b916
		  sprintf(Buf, " state: %d, data: %d \n ", hdma_usart1_rx.State, rx1_buffer[0]);
 80076cc:	4b50      	ldr	r3, [pc, #320]	; (8007810 <PrintData+0x42c>)
 80076ce:	4a51      	ldr	r2, [pc, #324]	; (8007814 <PrintData+0x430>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80076d6:	4950      	ldr	r1, [pc, #320]	; (8007818 <PrintData+0x434>)
 80076d8:	4850      	ldr	r0, [pc, #320]	; (800781c <PrintData+0x438>)
 80076da:	f001 f81b 	bl	8008714 <siprintf>
 80076de:	e6aa      	b.n	8007436 <PrintData+0x52>
		sprintf(Buf, "%f %f %f\r\n",pid.output2[ROLL], pid.output2[PITCH], pid.output2[YAW]);
 80076e0:	4c4f      	ldr	r4, [pc, #316]	; (8007820 <PrintData+0x43c>)
 80076e2:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 80076e6:	f7f8 fe9f 	bl	8000428 <__aeabi_f2d>
 80076ea:	4606      	mov	r6, r0
 80076ec:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 80076f0:	460f      	mov	r7, r1
 80076f2:	f7f8 fe99 	bl	8000428 <__aeabi_f2d>
 80076f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076fa:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 80076fe:	f7f8 fe93 	bl	8000428 <__aeabi_f2d>
 8007702:	4632      	mov	r2, r6
 8007704:	463b      	mov	r3, r7
 8007706:	e9cd 0100 	strd	r0, r1, [sp]
 800770a:	4946      	ldr	r1, [pc, #280]	; (8007824 <PrintData+0x440>)
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw);
 800770c:	4843      	ldr	r0, [pc, #268]	; (800781c <PrintData+0x438>)
 800770e:	f001 f801 	bl	8008714 <siprintf>
 8007712:	e690      	b.n	8007436 <PrintData+0x52>
		sprintf(Buf, "Roll:(%.2f), Pitch:(%.2f), Yaw:(%.2f), rx_buffer:(%d)\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw, rx1_buffer[0]);
 8007714:	4c44      	ldr	r4, [pc, #272]	; (8007828 <PrintData+0x444>)
 8007716:	4b3e      	ldr	r3, [pc, #248]	; (8007810 <PrintData+0x42c>)
 8007718:	6820      	ldr	r0, [r4, #0]
 800771a:	781d      	ldrb	r5, [r3, #0]
 800771c:	f7f8 fe84 	bl	8000428 <__aeabi_f2d>
 8007720:	b2ed      	uxtb	r5, r5
 8007722:	9504      	str	r5, [sp, #16]
 8007724:	4606      	mov	r6, r0
 8007726:	68a0      	ldr	r0, [r4, #8]
 8007728:	460f      	mov	r7, r1
 800772a:	f7f8 fe7d 	bl	8000428 <__aeabi_f2d>
 800772e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007732:	6860      	ldr	r0, [r4, #4]
 8007734:	f7f8 fe78 	bl	8000428 <__aeabi_f2d>
 8007738:	4632      	mov	r2, r6
 800773a:	e9cd 0100 	strd	r0, r1, [sp]
 800773e:	463b      	mov	r3, r7
 8007740:	493a      	ldr	r1, [pc, #232]	; (800782c <PrintData+0x448>)
 8007742:	4836      	ldr	r0, [pc, #216]	; (800781c <PrintData+0x438>)
 8007744:	f000 ffe6 	bl	8008714 <siprintf>
 8007748:	e675      	b.n	8007436 <PrintData+0x52>
    sprintf(Buf, "MS5611 : %.2f C, %d Pa, %.2f m\r\n\r\n",
 800774a:	4c39      	ldr	r4, [pc, #228]	; (8007830 <PrintData+0x44c>)
 800774c:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
 8007750:	f7f8 fe6a 	bl	8000428 <__aeabi_f2d>
 8007754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007758:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800775c:	f504 75c0 	add.w	r5, r4, #384	; 0x180
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007766:	4933      	ldr	r1, [pc, #204]	; (8007834 <PrintData+0x450>)
 8007768:	482c      	ldr	r0, [pc, #176]	; (800781c <PrintData+0x438>)
 800776a:	f000 ffd3 	bl	8008714 <siprintf>
 800776e:	e662      	b.n	8007436 <PrintData+0x52>
			sprintf(Buf, "\r\n [KP]: %.2f, %.2f, %.2f \r\n ", pid.kp[0], pid.kp[1], pid.kp[2]);
 8007770:	4c2b      	ldr	r4, [pc, #172]	; (8007820 <PrintData+0x43c>)
 8007772:	6860      	ldr	r0, [r4, #4]
 8007774:	f7f8 fe58 	bl	8000428 <__aeabi_f2d>
 8007778:	4606      	mov	r6, r0
 800777a:	68e0      	ldr	r0, [r4, #12]
 800777c:	460f      	mov	r7, r1
 800777e:	f7f8 fe53 	bl	8000428 <__aeabi_f2d>
 8007782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007786:	68a0      	ldr	r0, [r4, #8]
 8007788:	f7f8 fe4e 	bl	8000428 <__aeabi_f2d>
 800778c:	4632      	mov	r2, r6
 800778e:	e9cd 0100 	strd	r0, r1, [sp]
 8007792:	463b      	mov	r3, r7
 8007794:	4928      	ldr	r1, [pc, #160]	; (8007838 <PrintData+0x454>)
 8007796:	e7b9      	b.n	800770c <PrintData+0x328>
			sprintf(Buf, "\r\n [KI]: %.2f, %.2f, %.2f\r\n", pid.ki[0], pid.ki[1], pid.ki[2]);
 8007798:	4c21      	ldr	r4, [pc, #132]	; (8007820 <PrintData+0x43c>)
 800779a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800779c:	f7f8 fe44 	bl	8000428 <__aeabi_f2d>
 80077a0:	4606      	mov	r6, r0
 80077a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80077a4:	460f      	mov	r7, r1
 80077a6:	f7f8 fe3f 	bl	8000428 <__aeabi_f2d>
 80077aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80077b0:	f7f8 fe3a 	bl	8000428 <__aeabi_f2d>
 80077b4:	4632      	mov	r2, r6
 80077b6:	e9cd 0100 	strd	r0, r1, [sp]
 80077ba:	463b      	mov	r3, r7
 80077bc:	491f      	ldr	r1, [pc, #124]	; (800783c <PrintData+0x458>)
 80077be:	e7a5      	b.n	800770c <PrintData+0x328>
			sprintf(Buf, "\r\n [KD]: %.2f, %.2f, %.2f\r\n", pid.kd[0], pid.kd[1], pid.kd[2]);
 80077c0:	4c17      	ldr	r4, [pc, #92]	; (8007820 <PrintData+0x43c>)
 80077c2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80077c4:	f7f8 fe30 	bl	8000428 <__aeabi_f2d>
 80077c8:	4606      	mov	r6, r0
 80077ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077cc:	460f      	mov	r7, r1
 80077ce:	f7f8 fe2b 	bl	8000428 <__aeabi_f2d>
 80077d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077d6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80077d8:	f7f8 fe26 	bl	8000428 <__aeabi_f2d>
 80077dc:	4632      	mov	r2, r6
 80077de:	e9cd 0100 	strd	r0, r1, [sp]
 80077e2:	463b      	mov	r3, r7
 80077e4:	4916      	ldr	r1, [pc, #88]	; (8007840 <PrintData+0x45c>)
 80077e6:	e791      	b.n	800770c <PrintData+0x328>
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw);
 80077e8:	4c0f      	ldr	r4, [pc, #60]	; (8007828 <PrintData+0x444>)
 80077ea:	6820      	ldr	r0, [r4, #0]
 80077ec:	f7f8 fe1c 	bl	8000428 <__aeabi_f2d>
 80077f0:	4606      	mov	r6, r0
 80077f2:	68a0      	ldr	r0, [r4, #8]
 80077f4:	460f      	mov	r7, r1
 80077f6:	f7f8 fe17 	bl	8000428 <__aeabi_f2d>
 80077fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077fe:	6860      	ldr	r0, [r4, #4]
 8007800:	f7f8 fe12 	bl	8000428 <__aeabi_f2d>
 8007804:	4632      	mov	r2, r6
 8007806:	e9cd 0100 	strd	r0, r1, [sp]
 800780a:	463b      	mov	r3, r7
 800780c:	490d      	ldr	r1, [pc, #52]	; (8007844 <PrintData+0x460>)
 800780e:	e77d      	b.n	800770c <PrintData+0x328>
 8007810:	20000e24 	.word	0x20000e24
 8007814:	20000fd8 	.word	0x20000fd8
 8007818:	0800b9a8 	.word	0x0800b9a8
 800781c:	20000da4 	.word	0x20000da4
 8007820:	20000874 	.word	0x20000874
 8007824:	0800ba78 	.word	0x0800ba78
 8007828:	20000838 	.word	0x20000838
 800782c:	0800b9c0 	.word	0x0800b9c0
 8007830:	20000b58 	.word	0x20000b58
 8007834:	0800b9f8 	.word	0x0800b9f8
 8007838:	0800ba1b 	.word	0x0800ba1b
 800783c:	0800ba39 	.word	0x0800ba39
 8007840:	0800ba55 	.word	0x0800ba55
 8007844:	0800ba71 	.word	0x0800ba71

08007848 <SendTelemetry>:

 }

void SendTelemetry(void){
  static int x = 0;
  x++;
 8007848:	4a10      	ldr	r2, [pc, #64]	; (800788c <SendTelemetry+0x44>)
void SendTelemetry(void){
 800784a:	b508      	push	{r3, lr}
  x++;
 800784c:	6813      	ldr	r3, [r2, #0]
 800784e:	3301      	adds	r3, #1
  if (x >= 1000){
 8007850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007854:	da01      	bge.n	800785a <SendTelemetry+0x12>
  x++;
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	bd08      	pop	{r3, pc}
    x = 0;
 800785a:	2300      	movs	r3, #0
    RGB_B_TOGGLE;
 800785c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007860:	480b      	ldr	r0, [pc, #44]	; (8007890 <SendTelemetry+0x48>)
    x = 0;
 8007862:	6013      	str	r3, [r2, #0]
    RGB_B_TOGGLE;
 8007864:	f7fa f9ab 	bl	8001bbe <HAL_GPIO_TogglePin>
    headSerialSend(3, MSP_PID);
 8007868:	2170      	movs	r1, #112	; 0x70
 800786a:	2003      	movs	r0, #3
 800786c:	f7ff fdac 	bl	80073c8 <headSerialSend>
    serialize8(10);
 8007870:	200a      	movs	r0, #10
 8007872:	f7ff fd7f 	bl	8007374 <serialize8>
    serialize8(20);
 8007876:	2014      	movs	r0, #20
 8007878:	f7ff fd7c 	bl	8007374 <serialize8>
    serialize8(110);
 800787c:	206e      	movs	r0, #110	; 0x6e
 800787e:	f7ff fd79 	bl	8007374 <serialize8>
    tailSerialReply();
  }
}
 8007882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tailSerialReply();
 8007886:	f7ff bda5 	b.w	80073d4 <tailSerialReply>
 800788a:	bf00      	nop
 800788c:	20000734 	.word	0x20000734
 8007890:	40010c00 	.word	0x40010c00

08007894 <HAL_SYSTICK_Callback>:
static volatile uint32_t msTicks = 0;


void HAL_SYSTICK_Callback(void)
{
	msTicks++;
 8007894:	4a02      	ldr	r2, [pc, #8]	; (80078a0 <HAL_SYSTICK_Callback+0xc>)
 8007896:	6813      	ldr	r3, [r2, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	20000738 	.word	0x20000738

080078a4 <micros>:
}

uint32_t micros(void)
{
 80078a4:	b510      	push	{r4, lr}
	 register uint32_t ms, cycle_cnt;
	    do {
	        ms = msTicks;
 80078a6:	4909      	ldr	r1, [pc, #36]	; (80078cc <micros+0x28>)
	        cycle_cnt = SysTick->VAL;
 80078a8:	4c09      	ldr	r4, [pc, #36]	; (80078d0 <micros+0x2c>)
	        ms = msTicks;
 80078aa:	680a      	ldr	r2, [r1, #0]
	        cycle_cnt = SysTick->VAL;
 80078ac:	68a3      	ldr	r3, [r4, #8]
	    } while (ms != msTicks);
 80078ae:	6808      	ldr	r0, [r1, #0]
 80078b0:	4282      	cmp	r2, r0
 80078b2:	d1fa      	bne.n	80078aa <micros+0x6>
	    return (ms * 1000) + (72 * 1000 - cycle_cnt) / 72; //168
 80078b4:	2048      	movs	r0, #72	; 0x48
 80078b6:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
 80078ba:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80078be:	fbb3 f3f0 	udiv	r3, r3, r0
}
 80078c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078c6:	fb00 3002 	mla	r0, r0, r2, r3
 80078ca:	bd10      	pop	{r4, pc}
 80078cc:	20000738 	.word	0x20000738
 80078d0:	e000e010 	.word	0xe000e010

080078d4 <millis>:

uint32_t millis(void)
{
  return HAL_GetTick();
 80078d4:	f7f9 bc4e 	b.w	8001174 <HAL_GetTick>

080078d8 <ssd1306_command>:



#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }

void ssd1306_command(uint8_t command) {
 80078d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr, 0x00, 1, &command, 1, 10);
 80078da:	4b09      	ldr	r3, [pc, #36]	; (8007900 <ssd1306_command+0x28>)
void ssd1306_command(uint8_t command) {
 80078dc:	aa06      	add	r2, sp, #24
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr, 0x00, 1, &command, 1, 10);
 80078de:	f993 1000 	ldrsb.w	r1, [r3]
 80078e2:	230a      	movs	r3, #10
void ssd1306_command(uint8_t command) {
 80078e4:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr, 0x00, 1, &command, 1, 10);
 80078e8:	9302      	str	r3, [sp, #8]
 80078ea:	2301      	movs	r3, #1
 80078ec:	b289      	uxth	r1, r1
 80078ee:	e88d 000c 	stmia.w	sp, {r2, r3}
 80078f2:	4804      	ldr	r0, [pc, #16]	; (8007904 <ssd1306_command+0x2c>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	f7fa fe07 	bl	8002508 <HAL_I2C_Mem_Write>
}
 80078fa:	b007      	add	sp, #28
 80078fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007900:	20000758 	.word	0x20000758
 8007904:	20000ed0 	.word	0x20000ed0

08007908 <ssd1306_begin>:

void ssd1306_begin(uint8_t vccstate, uint8_t i2caddr) {
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4604      	mov	r4, r0
 800790c:	460d      	mov	r5, r1
	HAL_Delay(100);
 800790e:	2064      	movs	r0, #100	; 0x64
 8007910:	f7f9 fc36 	bl	8001180 <HAL_Delay>
	_vccstate = vccstate;
 8007914:	4b2d      	ldr	r3, [pc, #180]	; (80079cc <ssd1306_begin+0xc4>)
	_i2caddr = i2caddr<<1;
	_width   = SSD1306_LCDWIDTH;
 8007916:	2280      	movs	r2, #128	; 0x80
	_vccstate = vccstate;
 8007918:	701c      	strb	r4, [r3, #0]
	_i2caddr = i2caddr<<1;
 800791a:	4b2d      	ldr	r3, [pc, #180]	; (80079d0 <ssd1306_begin+0xc8>)
 800791c:	006d      	lsls	r5, r5, #1
 800791e:	701d      	strb	r5, [r3, #0]
	_height  = SSD1306_LCDHEIGHT;
 8007920:	2540      	movs	r5, #64	; 0x40
	_width   = SSD1306_LCDWIDTH;
 8007922:	4b2c      	ldr	r3, [pc, #176]	; (80079d4 <ssd1306_begin+0xcc>)

	// Init sequence
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8007924:	20ae      	movs	r0, #174	; 0xae
	_width   = SSD1306_LCDWIDTH;
 8007926:	701a      	strb	r2, [r3, #0]
	_height  = SSD1306_LCDHEIGHT;
 8007928:	4b2b      	ldr	r3, [pc, #172]	; (80079d8 <ssd1306_begin+0xd0>)
 800792a:	701d      	strb	r5, [r3, #0]
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 800792c:	f7ff ffd4 	bl	80078d8 <ssd1306_command>
	//ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
	//ssd1306_command(0x80);                                  // the suggested ratio 0x80
	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8007930:	20a8      	movs	r0, #168	; 0xa8
 8007932:	f7ff ffd1 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_LCDHEIGHT - 1);
 8007936:	203f      	movs	r0, #63	; 0x3f
 8007938:	f7ff ffce 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 800793c:	20d3      	movs	r0, #211	; 0xd3
 800793e:	f7ff ffcb 	bl	80078d8 <ssd1306_command>
	ssd1306_command(0x0);                                   // no offset
 8007942:	2000      	movs	r0, #0
 8007944:	f7ff ffc8 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8007948:	4628      	mov	r0, r5
 800794a:	f7ff ffc5 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 800794e:	208d      	movs	r0, #141	; 0x8d
 8007950:	f7ff ffc2 	bl	80078d8 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC) { ssd1306_command(0x10); }
 8007954:	2c01      	cmp	r4, #1
 8007956:	bf0c      	ite	eq
 8007958:	2010      	moveq	r0, #16
	else { ssd1306_command(0x14); }
 800795a:	2014      	movne	r0, #20
 800795c:	f7ff ffbc 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8007960:	2020      	movs	r0, #32
 8007962:	f7ff ffb9 	bl	80078d8 <ssd1306_command>
	ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8007966:	2000      	movs	r0, #0
 8007968:	f7ff ffb6 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_SEGREMAP | 0x1);
 800796c:	20a1      	movs	r0, #161	; 0xa1
 800796e:	f7ff ffb3 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_COMSCANDEC);
 8007972:	20c8      	movs	r0, #200	; 0xc8
 8007974:	f7ff ffb0 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 8007978:	20da      	movs	r0, #218	; 0xda
 800797a:	f7ff ffad 	bl	80078d8 <ssd1306_command>
	ssd1306_command(0x12);
 800797e:	2012      	movs	r0, #18
 8007980:	f7ff ffaa 	bl	80078d8 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC) { ssd1306_command(0x9F); }
 8007984:	2c01      	cmp	r4, #1
 8007986:	bf0c      	ite	eq
 8007988:	209f      	moveq	r0, #159	; 0x9f
	else { ssd1306_command(0xCF); }
 800798a:	20cf      	movne	r0, #207	; 0xcf
 800798c:	f7ff ffa4 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8007990:	20d9      	movs	r0, #217	; 0xd9
 8007992:	f7ff ffa1 	bl	80078d8 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC) { ssd1306_command(0x22); }
 8007996:	2c01      	cmp	r4, #1
 8007998:	bf0c      	ite	eq
 800799a:	2022      	moveq	r0, #34	; 0x22
	else { ssd1306_command(0xF1); }
 800799c:	20f1      	movne	r0, #241	; 0xf1
 800799e:	f7ff ff9b 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 80079a2:	20db      	movs	r0, #219	; 0xdb
 80079a4:	f7ff ff98 	bl	80078d8 <ssd1306_command>
	ssd1306_command(0x40);
 80079a8:	2040      	movs	r0, #64	; 0x40
 80079aa:	f7ff ff95 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 80079ae:	20a4      	movs	r0, #164	; 0xa4
 80079b0:	f7ff ff92 	bl	80078d8 <ssd1306_command>
	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 80079b4:	20a6      	movs	r0, #166	; 0xa6
 80079b6:	f7ff ff8f 	bl	80078d8 <ssd1306_command>

	ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 80079ba:	202e      	movs	r0, #46	; 0x2e
 80079bc:	f7ff ff8c 	bl	80078d8 <ssd1306_command>

	ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
}
 80079c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 80079c4:	20af      	movs	r0, #175	; 0xaf
 80079c6:	f7ff bf87 	b.w	80078d8 <ssd1306_command>
 80079ca:	bf00      	nop
 80079cc:	20000778 	.word	0x20000778
 80079d0:	20000758 	.word	0x20000758
 80079d4:	20000768 	.word	0x20000768
 80079d8:	20000770 	.word	0x20000770

080079dc <display>:

void display(void) {
 80079dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079de:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < 8; i++) {
		ssd1306_command(0xB0 + i); // Set Page Start Address for Page Addressing Mode (B0h~B7h)
		ssd1306_command(SSD1306_SETLOWCOLUMN);
		ssd1306_command(SSD1306_SETHIGHCOLUMN);

		HAL_I2C_Mem_Write(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, &buffer[SSD1306_LCDWIDTH * i], SSD1306_LCDWIDTH, 100);
 80079e0:	4f11      	ldr	r7, [pc, #68]	; (8007a28 <display+0x4c>)
 80079e2:	4e12      	ldr	r6, [pc, #72]	; (8007a2c <display+0x50>)
 80079e4:	4d12      	ldr	r5, [pc, #72]	; (8007a30 <display+0x54>)
void display(void) {
 80079e6:	b085      	sub	sp, #20
		ssd1306_command(0xB0 + i); // Set Page Start Address for Page Addressing Mode (B0h~B7h)
 80079e8:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 80079ec:	b2c0      	uxtb	r0, r0
 80079ee:	f7ff ff73 	bl	80078d8 <ssd1306_command>
		ssd1306_command(SSD1306_SETLOWCOLUMN);
 80079f2:	2000      	movs	r0, #0
 80079f4:	f7ff ff70 	bl	80078d8 <ssd1306_command>
		ssd1306_command(SSD1306_SETHIGHCOLUMN);
 80079f8:	2010      	movs	r0, #16
 80079fa:	f7ff ff6d 	bl	80078d8 <ssd1306_command>
		HAL_I2C_Mem_Write(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, &buffer[SSD1306_LCDWIDTH * i], SSD1306_LCDWIDTH, 100);
 80079fe:	2364      	movs	r3, #100	; 0x64
 8007a00:	f997 1000 	ldrsb.w	r1, [r7]
 8007a04:	9302      	str	r3, [sp, #8]
 8007a06:	2380      	movs	r3, #128	; 0x80
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	eb06 13c4 	add.w	r3, r6, r4, lsl #7
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	2240      	movs	r2, #64	; 0x40
 8007a12:	2301      	movs	r3, #1
 8007a14:	b289      	uxth	r1, r1
 8007a16:	4628      	mov	r0, r5
 8007a18:	3401      	adds	r4, #1
 8007a1a:	f7fa fd75 	bl	8002508 <HAL_I2C_Mem_Write>
	for (uint8_t i = 0; i < 8; i++) {
 8007a1e:	2c08      	cmp	r4, #8
 8007a20:	d1e2      	bne.n	80079e8 <display+0xc>
		//HAL_I2C_Mem_Write(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, buffer, 1024, 100);
		//HAL_I2C_Mem_Write_DMA(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, &buffer[SSD1306_LCDWIDTH * i], SSD1306_LCDWIDTH);
	}
}
 8007a22:	b005      	add	sp, #20
 8007a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000758 	.word	0x20000758
 8007a2c:	20000010 	.word	0x20000010
 8007a30:	20000ed0 	.word	0x20000ed0

08007a34 <clearDisplay>:
	ssd1306_command(SSD1306_SETHIGHCOLUMN);

	HAL_I2C_Mem_Write_DMA(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, buffer, 1024);
}
*/
void clearDisplay(void) {
 8007a34:	b508      	push	{r3, lr}
	memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
 8007a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4803      	ldr	r0, [pc, #12]	; (8007a4c <clearDisplay+0x18>)
 8007a3e:	f000 fe60 	bl	8008702 <memset>
	display();
}
 8007a42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	display();
 8007a46:	f7ff bfc9 	b.w	80079dc <display>
 8007a4a:	bf00      	nop
 8007a4c:	20000010 	.word	0x20000010

08007a50 <drawPixel>:

void drawPixel(uint8_t x, uint8_t y, uint8_t color) {
	if (x >= SSD1306_LCDWIDTH || y >= SSD1306_LCDHEIGHT) return;
 8007a50:	0603      	lsls	r3, r0, #24
void drawPixel(uint8_t x, uint8_t y, uint8_t color) {
 8007a52:	b510      	push	{r4, lr}
	if (x >= SSD1306_LCDWIDTH || y >= SSD1306_LCDHEIGHT) return;
 8007a54:	d415      	bmi.n	8007a82 <drawPixel+0x32>
 8007a56:	293f      	cmp	r1, #63	; 0x3f
 8007a58:	d813      	bhi.n	8007a82 <drawPixel+0x32>

	//if (SSD1306.Inverted) color = (SSD1306_COLOR)!color;

	if (color == WHITE) buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= 1 << (y % 8);
 8007a5a:	2a01      	cmp	r2, #1
	else                buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y % 8));
 8007a5c:	bf18      	it	ne
 8007a5e:	2201      	movne	r2, #1
 8007a60:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <drawPixel+0x34>)
 8007a62:	ea4f 04d1 	mov.w	r4, r1, lsr #3
	if (color == WHITE) buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= 1 << (y % 8);
 8007a66:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 8007a6a:	f001 0107 	and.w	r1, r1, #7
 8007a6e:	bf0b      	itete	eq
 8007a70:	fa02 f101 	lsleq.w	r1, r2, r1
	else                buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y % 8));
 8007a74:	408a      	lslne	r2, r1
	if (color == WHITE) buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= 1 << (y % 8);
 8007a76:	5c1a      	ldrbeq	r2, [r3, r0]
	else                buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y % 8));
 8007a78:	5c19      	ldrbne	r1, [r3, r0]
	if (color == WHITE) buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= 1 << (y % 8);
 8007a7a:	bf0c      	ite	eq
 8007a7c:	4311      	orreq	r1, r2
	else                buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y % 8));
 8007a7e:	4391      	bicne	r1, r2
 8007a80:	5419      	strb	r1, [r3, r0]
 8007a82:	bd10      	pop	{r4, pc}
 8007a84:	20000010 	.word	0x20000010

08007a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    RGB_R_TOGGLE;
 8007a8a:	4c03      	ldr	r4, [pc, #12]	; (8007a98 <Error_Handler+0x10>)
 8007a8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a90:	4620      	mov	r0, r4
 8007a92:	f7fa f894 	bl	8001bbe <HAL_GPIO_TogglePin>
 8007a96:	e7f9      	b.n	8007a8c <Error_Handler+0x4>
 8007a98:	40010c00 	.word	0x40010c00

08007a9c <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a9c:	2228      	movs	r2, #40	; 0x28
{
 8007a9e:	b510      	push	{r4, lr}
 8007aa0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	eb0d 0002 	add.w	r0, sp, r2
 8007aa8:	f000 fe2b 	bl	8008702 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007aac:	2214      	movs	r2, #20
 8007aae:	2100      	movs	r1, #0
 8007ab0:	eb0d 0002 	add.w	r0, sp, r2
 8007ab4:	f000 fe25 	bl	8008702 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ab8:	2210      	movs	r2, #16
 8007aba:	2100      	movs	r1, #0
 8007abc:	a801      	add	r0, sp, #4
 8007abe:	f000 fe20 	bl	8008702 <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007ac6:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007ac8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007aca:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007acc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007ace:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ad2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007ad4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007ad6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ad8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007ada:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007adc:	f7fa fece 	bl	800287c <HAL_RCC_OscConfig>
 8007ae0:	b108      	cbz	r0, 8007ae6 <SystemClock_Config+0x4a>
    Error_Handler();
 8007ae2:	f7ff ffd1 	bl	8007a88 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007ae6:	230f      	movs	r3, #15
 8007ae8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007aee:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007af0:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007af2:	4621      	mov	r1, r4
 8007af4:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007af6:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007af8:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007afa:	f7fb f887 	bl	8002c0c <HAL_RCC_ClockConfig>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d1ef      	bne.n	8007ae2 <SystemClock_Config+0x46>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8007b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b06:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007b08:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8007b0a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b0c:	f7fb f948 	bl	8002da0 <HAL_RCCEx_PeriphCLKConfig>
 8007b10:	4604      	mov	r4, r0
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d1e5      	bne.n	8007ae2 <SystemClock_Config+0x46>
HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007b16:	f7fb f91d 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8007b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b22:	f7f9 fdf3 	bl	800170c <HAL_SYSTICK_Config>
HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007b26:	2004      	movs	r0, #4
 8007b28:	f7f9 fe06 	bl	8001738 <HAL_SYSTICK_CLKSourceConfig>
HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4621      	mov	r1, r4
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295
 8007b34:	f7f9 fdaa 	bl	800168c <HAL_NVIC_SetPriority>
}
 8007b38:	b014      	add	sp, #80	; 0x50
 8007b3a:	bd10      	pop	{r4, pc}
 8007b3c:	0000      	movs	r0, r0
	...

08007b40 <main>:
{
 8007b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b44:	4d3d      	ldr	r5, [pc, #244]	; (8007c3c <main+0xfc>)
{
 8007b46:	b0aa      	sub	sp, #168	; 0xa8
  HAL_Init();
 8007b48:	f7f9 faf6 	bl	8001138 <HAL_Init>
  SystemClock_Config();
 8007b4c:	f7ff ffa6 	bl	8007a9c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b50:	2210      	movs	r2, #16
 8007b52:	2100      	movs	r1, #0
 8007b54:	a823      	add	r0, sp, #140	; 0x8c
 8007b56:	f000 fdd4 	bl	8008702 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b5a:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8007b5c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b5e:	f043 0320 	orr.w	r3, r3, #32
 8007b62:	61ab      	str	r3, [r5, #24]
 8007b64:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8007b66:	2118      	movs	r1, #24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	9303      	str	r3, [sp, #12]
 8007b6e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b70:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8007b72:	4833      	ldr	r0, [pc, #204]	; (8007c40 <main+0x100>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b74:	f043 0304 	orr.w	r3, r3, #4
 8007b78:	61ab      	str	r3, [r5, #24]
 8007b7a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b7e:	f003 0304 	and.w	r3, r3, #4
 8007b82:	9304      	str	r3, [sp, #16]
 8007b84:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b86:	69ab      	ldr	r3, [r5, #24]
 8007b88:	f043 0308 	orr.w	r3, r3, #8
 8007b8c:	61ab      	str	r3, [r5, #24]
 8007b8e:	69ab      	ldr	r3, [r5, #24]
 8007b90:	f003 0308 	and.w	r3, r3, #8
 8007b94:	9305      	str	r3, [sp, #20]
 8007b96:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8007b98:	f7fa f80c 	bl	8001bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8007ba2:	4827      	ldr	r0, [pc, #156]	; (8007c40 <main+0x100>)
 8007ba4:	f7fa f806 	bl	8001bb4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007ba8:	f24e 0318 	movw	r3, #57368	; 0xe018
 8007bac:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	9324      	str	r3, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007bb2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bb4:	a923      	add	r1, sp, #140	; 0x8c
 8007bb6:	4822      	ldr	r0, [pc, #136]	; (8007c40 <main+0x100>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007bb8:	9326      	str	r3, [sp, #152]	; 0x98
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bba:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bbc:	f7f9 ff1a 	bl	80019f4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007bc0:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007bc2:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007bc4:	f043 0301 	orr.w	r3, r3, #1
 8007bc8:	616b      	str	r3, [r5, #20]
 8007bca:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007bcc:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007bd4:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007bd6:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007bd8:	f7f9 fd58 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007bdc:	200e      	movs	r0, #14
 8007bde:	f7f9 fd89 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8007be2:	4622      	mov	r2, r4
 8007be4:	4621      	mov	r1, r4
 8007be6:	200f      	movs	r0, #15
 8007be8:	f7f9 fd50 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8007bec:	200f      	movs	r0, #15
 8007bee:	f7f9 fd81 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	2010      	movs	r0, #16
 8007bf8:	f7f9 fd48 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8007bfc:	2010      	movs	r0, #16
 8007bfe:	f7f9 fd79 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8007c02:	4622      	mov	r2, r4
 8007c04:	4621      	mov	r1, r4
 8007c06:	2011      	movs	r0, #17
 8007c08:	f7f9 fd40 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8007c0c:	2011      	movs	r0, #17
 8007c0e:	f7f9 fd71 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  hi2c2.Init.ClockSpeed = 400000;
 8007c12:	4d0c      	ldr	r5, [pc, #48]	; (8007c44 <main+0x104>)
  hi2c2.Instance = I2C2;
 8007c14:	480c      	ldr	r0, [pc, #48]	; (8007c48 <main+0x108>)
  hi2c2.Init.ClockSpeed = 400000;
 8007c16:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <main+0x10c>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007c18:	6084      	str	r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 400000;
 8007c1a:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 8007c22:	60c4      	str	r4, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c24:	6103      	str	r3, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007c26:	6144      	str	r4, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007c28:	6184      	str	r4, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007c2a:	61c4      	str	r4, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007c2c:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007c2e:	f7fa f993 	bl	8001f58 <HAL_I2C_Init>
 8007c32:	4605      	mov	r5, r0
 8007c34:	b160      	cbz	r0, 8007c50 <main+0x110>
    Error_Handler();
 8007c36:	f7ff ff27 	bl	8007a88 <Error_Handler>
 8007c3a:	bf00      	nop
 8007c3c:	40021000 	.word	0x40021000
 8007c40:	40010c00 	.word	0x40010c00
 8007c44:	00061a80 	.word	0x00061a80
 8007c48:	20000ed0 	.word	0x20000ed0
 8007c4c:	40005800 	.word	0x40005800
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c50:	4601      	mov	r1, r0
 8007c52:	2210      	movs	r2, #16
 8007c54:	a81f      	add	r0, sp, #124	; 0x7c
 8007c56:	f000 fd54 	bl	8008702 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c5a:	221c      	movs	r2, #28
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	a823      	add	r0, sp, #140	; 0x8c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c60:	950a      	str	r5, [sp, #40]	; 0x28
 8007c62:	950b      	str	r5, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c64:	f000 fd4d 	bl	8008702 <memset>
  htim4.Init.Prescaler = 72-1;
 8007c68:	2347      	movs	r3, #71	; 0x47
  htim4.Instance = TIM4;
 8007c6a:	4cb5      	ldr	r4, [pc, #724]	; (8007f40 <main+0x400>)
  htim4.Init.Prescaler = 72-1;
 8007c6c:	48b5      	ldr	r0, [pc, #724]	; (8007f44 <main+0x404>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c6e:	60a5      	str	r5, [r4, #8]
  htim4.Init.Prescaler = 72-1;
 8007c70:	e884 0009 	stmia.w	r4, {r0, r3}
  htim4.Init.Period = 2000-1;
 8007c74:	f240 73cf 	movw	r3, #1999	; 0x7cf
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007c78:	4620      	mov	r0, r4
  htim4.Init.Period = 2000-1;
 8007c7a:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c7c:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c7e:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007c80:	f7fb fb88 	bl	8003394 <HAL_TIM_Base_Init>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d1d6      	bne.n	8007c36 <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007c8c:	a91f      	add	r1, sp, #124	; 0x7c
 8007c8e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c90:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007c92:	f7fb f9e9 	bl	8003068 <HAL_TIM_ConfigClockSource>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d1cd      	bne.n	8007c36 <main+0xf6>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f7fb fb94 	bl	80033c8 <HAL_TIM_PWM_Init>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d1c8      	bne.n	8007c36 <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ca4:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ca6:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007ca8:	a90a      	add	r1, sp, #40	; 0x28
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7fb fd4e 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d1bf      	bne.n	8007c36 <main+0xf6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007cb6:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8007cb8:	9024      	str	r0, [sp, #144]	; 0x90
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007cba:	9025      	str	r0, [sp, #148]	; 0x94
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007cbc:	9027      	str	r0, [sp, #156]	; 0x9c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007cbe:	a923      	add	r1, sp, #140	; 0x8c
 8007cc0:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007cc2:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007cc4:	f7fb fbe0 	bl	8003488 <HAL_TIM_PWM_ConfigChannel>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d1b4      	bne.n	8007c36 <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007ccc:	2204      	movs	r2, #4
 8007cce:	a923      	add	r1, sp, #140	; 0x8c
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f7fb fbd9 	bl	8003488 <HAL_TIM_PWM_ConfigChannel>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d1ad      	bne.n	8007c36 <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007cda:	2208      	movs	r2, #8
 8007cdc:	a923      	add	r1, sp, #140	; 0x8c
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7fb fbd2 	bl	8003488 <HAL_TIM_PWM_ConfigChannel>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d1a6      	bne.n	8007c36 <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007ce8:	220c      	movs	r2, #12
 8007cea:	a923      	add	r1, sp, #140	; 0x8c
 8007cec:	4620      	mov	r0, r4
 8007cee:	f7fb fbcb 	bl	8003488 <HAL_TIM_PWM_ConfigChannel>
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d19e      	bne.n	8007c36 <main+0xf6>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8007cf8:	4601      	mov	r1, r0
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f7fb fce4 	bl	80036c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8007d00:	2104      	movs	r1, #4
 8007d02:	4620      	mov	r0, r4
 8007d04:	f7fb fce0 	bl	80036c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8007d08:	2108      	movs	r1, #8
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f7fb fcdc 	bl	80036c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8007d10:	210c      	movs	r1, #12
 8007d12:	4620      	mov	r0, r4
 8007d14:	f7fb fcd8 	bl	80036c8 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim4);
 8007d18:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 57600;//57600
 8007d1a:	f44f 4461 	mov.w	r4, #57600	; 0xe100
  HAL_TIM_MspPostInit(&htim4);
 8007d1e:	f000 fb35 	bl	800838c <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8007d22:	4889      	ldr	r0, [pc, #548]	; (8007f48 <main+0x408>)
  huart1.Init.BaudRate = 57600;//57600
 8007d24:	4b89      	ldr	r3, [pc, #548]	; (8007f4c <main+0x40c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d26:	6085      	str	r5, [r0, #8]
  huart1.Init.BaudRate = 57600;//57600
 8007d28:	e880 0018 	stmia.w	r0, {r3, r4}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d2c:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d2e:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d30:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d32:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d34:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d36:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007d38:	f7fb fe00 	bl	800393c <HAL_UART_Init>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f47f af7a 	bne.w	8007c36 <main+0xf6>
  huart2.Instance = USART2;
 8007d42:	4883      	ldr	r0, [pc, #524]	; (8007f50 <main+0x410>)
 8007d44:	4b83      	ldr	r3, [pc, #524]	; (8007f54 <main+0x414>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007d46:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 57600;
 8007d48:	e880 0018 	stmia.w	r0, {r3, r4}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007d4c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007d4e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007d50:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007d52:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007d54:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d56:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d58:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007d5a:	f7fb fdef 	bl	800393c <HAL_UART_Init>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	f47f af69 	bne.w	8007c36 <main+0xf6>
  hadc1.Instance = ADC1;
 8007d64:	4c7c      	ldr	r4, [pc, #496]	; (8007f58 <main+0x418>)
 8007d66:	4b7d      	ldr	r3, [pc, #500]	; (8007f5c <main+0x41c>)
  hadc1.Init.NbrOfConversion = 1;
 8007d68:	2601      	movs	r6, #1
  hadc1.Instance = ADC1;
 8007d6a:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d6c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8007d70:	900c      	str	r0, [sp, #48]	; 0x30
 8007d72:	900d      	str	r0, [sp, #52]	; 0x34
 8007d74:	900e      	str	r0, [sp, #56]	; 0x38
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007d76:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007d78:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007d7a:	6160      	str	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007d7c:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007d7e:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d80:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 8007d82:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007d84:	f7f9 fbf0 	bl	8001568 <HAL_ADC_Init>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	f47f af54 	bne.w	8007c36 <main+0xf6>
  sConfig.Channel = ADC_CHANNEL_4;
 8007d8e:	2704      	movs	r7, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007d90:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d92:	a90c      	add	r1, sp, #48	; 0x30
 8007d94:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8007d96:	970c      	str	r7, [sp, #48]	; 0x30
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007d98:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d9a:	f7f9 faa5 	bl	80012e8 <HAL_ADC_ConfigChannel>
 8007d9e:	4605      	mov	r5, r0
 8007da0:	2800      	cmp	r0, #0
 8007da2:	f47f af48 	bne.w	8007c36 <main+0xf6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007da6:	4601      	mov	r1, r0
 8007da8:	2210      	movs	r2, #16
 8007daa:	a817      	add	r0, sp, #92	; 0x5c
 8007dac:	f000 fca9 	bl	8008702 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007db0:	4629      	mov	r1, r5
 8007db2:	2210      	movs	r2, #16
 8007db4:	a81b      	add	r0, sp, #108	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007db6:	9508      	str	r5, [sp, #32]
 8007db8:	9509      	str	r5, [sp, #36]	; 0x24
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007dba:	f000 fca2 	bl	8008702 <memset>
  htim3.Init.Prescaler = 72-1;
 8007dbe:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 8007dc0:	4c67      	ldr	r4, [pc, #412]	; (8007f60 <main+0x420>)
  htim3.Init.Prescaler = 72-1;
 8007dc2:	4968      	ldr	r1, [pc, #416]	; (8007f64 <main+0x424>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007dc4:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 72-1;
 8007dc6:	e884 000a 	stmia.w	r4, {r1, r3}
  htim3.Init.Period = 0xFFFF;
 8007dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dce:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0xFFFF;
 8007dd0:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007dd2:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007dd4:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007dd6:	f7fb fadd 	bl	8003394 <HAL_TIM_Base_Init>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	f47f af2b 	bne.w	8007c36 <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007de4:	a917      	add	r1, sp, #92	; 0x5c
 8007de6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007de8:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007dea:	f7fb f93d 	bl	8003068 <HAL_TIM_ConfigClockSource>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f47f af21 	bne.w	8007c36 <main+0xf6>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8007df4:	4620      	mov	r0, r4
 8007df6:	f7fb fb01 	bl	80033fc <HAL_TIM_IC_Init>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	f47f af1b 	bne.w	8007c36 <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e00:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e02:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007e04:	a908      	add	r1, sp, #32
 8007e06:	4620      	mov	r0, r4
 8007e08:	f7fb fca0 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f47f af11 	bne.w	8007c36 <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007e14:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007e16:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigIC.ICFilter = 0;
 8007e18:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007e1a:	a91b      	add	r1, sp, #108	; 0x6c
 8007e1c:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007e1e:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007e20:	f7fb fbbe 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	f47f af06 	bne.w	8007c36 <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8007e2a:	463a      	mov	r2, r7
 8007e2c:	a91b      	add	r1, sp, #108	; 0x6c
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f7fb fbb6 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	f47f aefe 	bne.w	8007c36 <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8007e3a:	2208      	movs	r2, #8
 8007e3c:	a91b      	add	r1, sp, #108	; 0x6c
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f7fb fbae 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	f47f aef6 	bne.w	8007c36 <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8007e4a:	220c      	movs	r2, #12
 8007e4c:	a91b      	add	r1, sp, #108	; 0x6c
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f7fb fba6 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 8007e54:	4605      	mov	r5, r0
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f47f aeed 	bne.w	8007c36 <main+0xf6>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f7fb fc48 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8007e64:	4639      	mov	r1, r7
 8007e66:	4620      	mov	r0, r4
 8007e68:	f7fb fc44 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8007e6c:	2108      	movs	r1, #8
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f7fb fc40 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8007e74:	210c      	movs	r1, #12
 8007e76:	4620      	mov	r0, r4
 8007e78:	f7fb fc3c 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e7c:	2210      	movs	r2, #16
 8007e7e:	4629      	mov	r1, r5
 8007e80:	a80f      	add	r0, sp, #60	; 0x3c
 8007e82:	f000 fc3e 	bl	8008702 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007e86:	2210      	movs	r2, #16
 8007e88:	4629      	mov	r1, r5
 8007e8a:	a813      	add	r0, sp, #76	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e8c:	9506      	str	r5, [sp, #24]
 8007e8e:	9507      	str	r5, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007e90:	f000 fc37 	bl	8008702 <memset>
  htim2.Init.Prescaler = 72-1;
 8007e94:	2347      	movs	r3, #71	; 0x47
 8007e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8007e9a:	4c33      	ldr	r4, [pc, #204]	; (8007f68 <main+0x428>)
  htim2.Init.Prescaler = 72-1;
 8007e9c:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.Period = 0xFFFF;
 8007ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007ea4:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ea6:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 0xFFFF;
 8007ea8:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007eaa:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007eac:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007eae:	f7fb fa71 	bl	8003394 <HAL_TIM_Base_Init>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	f47f aebf 	bne.w	8007c36 <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007ebc:	a90f      	add	r1, sp, #60	; 0x3c
 8007ebe:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ec0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007ec2:	f7fb f8d1 	bl	8003068 <HAL_TIM_ConfigClockSource>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f47f aeb5 	bne.w	8007c36 <main+0xf6>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f7fb fa95 	bl	80033fc <HAL_TIM_IC_Init>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	f47f aeaf 	bne.w	8007c36 <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ed8:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007eda:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007edc:	a906      	add	r1, sp, #24
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f7fb fc34 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	f47f aea5 	bne.w	8007c36 <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007eec:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007eee:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 8007ef0:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007ef2:	a913      	add	r1, sp, #76	; 0x4c
 8007ef4:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007ef6:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007ef8:	f7fb fb52 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	f47f ae9a 	bne.w	8007c36 <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8007f02:	463a      	mov	r2, r7
 8007f04:	a913      	add	r1, sp, #76	; 0x4c
 8007f06:	4620      	mov	r0, r4
 8007f08:	f7fb fb4a 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	f47f ae91 	bne.w	8007c36 <main+0xf6>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8007f14:	4601      	mov	r1, r0
 8007f16:	4620      	mov	r0, r4
 8007f18:	f7fb fbec 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f7fb fbe8 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  LED1_ON;
 8007f24:	4632      	mov	r2, r6
 8007f26:	2110      	movs	r1, #16
 8007f28:	4810      	ldr	r0, [pc, #64]	; (8007f6c <main+0x42c>)
 8007f2a:	f7f9 fe43 	bl	8001bb4 <HAL_GPIO_WritePin>
   LED0_OFF;
 8007f2e:	462a      	mov	r2, r5
 8007f30:	2108      	movs	r1, #8
 8007f32:	480e      	ldr	r0, [pc, #56]	; (8007f6c <main+0x42c>)
 8007f34:	f7f9 fe3e 	bl	8001bb4 <HAL_GPIO_WritePin>
 8007f38:	240a      	movs	r4, #10
       LED1_TOGGLE;
 8007f3a:	4d0c      	ldr	r5, [pc, #48]	; (8007f6c <main+0x42c>)
 8007f3c:	e018      	b.n	8007f70 <main+0x430>
 8007f3e:	bf00      	nop
 8007f40:	20000e90 	.word	0x20000e90
 8007f44:	40000800 	.word	0x40000800
 8007f48:	20001060 	.word	0x20001060
 8007f4c:	40013800 	.word	0x40013800
 8007f50:	200010e8 	.word	0x200010e8
 8007f54:	40004400 	.word	0x40004400
 8007f58:	20000fa8 	.word	0x20000fa8
 8007f5c:	40012400 	.word	0x40012400
 8007f60:	20000f24 	.word	0x20000f24
 8007f64:	40000400 	.word	0x40000400
 8007f68:	200010a8 	.word	0x200010a8
 8007f6c:	40010c00 	.word	0x40010c00
 8007f70:	2110      	movs	r1, #16
 8007f72:	4628      	mov	r0, r5
 8007f74:	f7f9 fe23 	bl	8001bbe <HAL_GPIO_TogglePin>
       LED0_TOGGLE;
 8007f78:	2108      	movs	r1, #8
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f7f9 fe1f 	bl	8001bbe <HAL_GPIO_TogglePin>
       HAL_Delay(25);
 8007f80:	2019      	movs	r0, #25
 8007f82:	f7f9 f8fd 	bl	8001180 <HAL_Delay>
       HAL_Delay(25);
 8007f86:	2019      	movs	r0, #25
 8007f88:	f7f9 f8fa 	bl	8001180 <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 8007f8c:	3c01      	subs	r4, #1
 8007f8e:	d1ef      	bne.n	8007f70 <main+0x430>
   LED0_OFF;
 8007f90:	4622      	mov	r2, r4
         BAT.VBAT = (((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW;
 8007f92:	a769      	add	r7, pc, #420	; (adr r7, 8008138 <main+0x5f8>)
 8007f94:	e9d7 6700 	ldrd	r6, r7, [r7]
 8007f98:	f20f 19a4 	addw	r9, pc, #420	; 0x1a4
 8007f9c:	e9d9 8900 	ldrd	r8, r9, [r9]
   LED0_OFF;
 8007fa0:	2108      	movs	r1, #8
 8007fa2:	4869      	ldr	r0, [pc, #420]	; (8008148 <main+0x608>)
 8007fa4:	f7f9 fe06 	bl	8001bb4 <HAL_GPIO_WritePin>
   LED1_OFF;
 8007fa8:	4622      	mov	r2, r4
 8007faa:	2110      	movs	r1, #16
 8007fac:	4866      	ldr	r0, [pc, #408]	; (8008148 <main+0x608>)
 8007fae:	f7f9 fe01 	bl	8001bb4 <HAL_GPIO_WritePin>
   MPU9250_Init();
 8007fb2:	f7fe fa8f 	bl	80064d4 <MPU9250_Init>
   MS5611_Init(MS5611_ULTRA_HIGH_RES);
 8007fb6:	2008      	movs	r0, #8
 8007fb8:	f7ff f8e6 	bl	8007188 <MS5611_Init>
   gps_Init();
 8007fbc:	f7fc f9a9 	bl	8004312 <gps_Init>
  TM_AHRSIMU_Init(&AHRSIMU, 250, 0.1f, 0.0f);
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4a62      	ldr	r2, [pc, #392]	; (800814c <main+0x60c>)
 8007fc4:	4962      	ldr	r1, [pc, #392]	; (8008150 <main+0x610>)
 8007fc6:	4863      	ldr	r0, [pc, #396]	; (8008154 <main+0x614>)
 8007fc8:	f7fc fc1a 	bl	8004800 <TM_AHRSIMU_Init>
  Calibrate_gyro();
 8007fcc:	f7fd fe32 	bl	8005c34 <Calibrate_gyro>
  mixerInit();
 8007fd0:	f7fc ff62 	bl	8004e98 <mixerInit>
   QueueCreate(UART1);
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f7fd fbab 	bl	8005730 <QueueCreate>
   QueueCreate(UART2);
 8007fda:	2001      	movs	r0, #1
 8007fdc:	f7fd fba8 	bl	8005730 <QueueCreate>
   PIDControlInit(&pid);
 8007fe0:	485d      	ldr	r0, [pc, #372]	; (8008158 <main+0x618>)
 8007fe2:	f7fc ffe3 	bl	8004fac <PIDControlInit>
   EEPROM_Init();
 8007fe6:	f7fb ff8d 	bl	8003f04 <EEPROM_Init>
   ssd1306_begin(SSD1306_SWITCHCAPVCC, 0x3C);
 8007fea:	213c      	movs	r1, #60	; 0x3c
 8007fec:	2002      	movs	r0, #2
 8007fee:	f7ff fc8b 	bl	8007908 <ssd1306_begin>
   HAL_Delay(1000);
 8007ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ff6:	f7f9 f8c3 	bl	8001180 <HAL_Delay>
   display();
 8007ffa:	f7ff fcef 	bl	80079dc <display>
   HAL_Delay(1000);
 8007ffe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008002:	f7f9 f8bd 	bl	8001180 <HAL_Delay>
   clearDisplay();
 8008006:	f7ff fd15 	bl	8007a34 <clearDisplay>
   drawPixel(64, 32, WHITE);
 800800a:	2201      	movs	r2, #1
 800800c:	2120      	movs	r1, #32
 800800e:	2040      	movs	r0, #64	; 0x40
 8008010:	f7ff fd1e 	bl	8007a50 <drawPixel>
   display();
 8008014:	f7ff fce2 	bl	80079dc <display>
   HAL_Delay(1000);
 8008018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800801c:	f7f9 f8b0 	bl	8001180 <HAL_Delay>
   drawCircle(64, 32, 10, WHITE);
 8008020:	2301      	movs	r3, #1
 8008022:	220a      	movs	r2, #10
 8008024:	2120      	movs	r1, #32
 8008026:	2040      	movs	r0, #64	; 0x40
 8008028:	f7fb ff84 	bl	8003f34 <drawCircle>
   drawCircle(64, 32, 15, WHITE);
 800802c:	2301      	movs	r3, #1
 800802e:	220f      	movs	r2, #15
 8008030:	2120      	movs	r1, #32
 8008032:	2040      	movs	r0, #64	; 0x40
 8008034:	f7fb ff7e 	bl	8003f34 <drawCircle>
   drawCircle(64, 32, 20, WHITE);
 8008038:	2301      	movs	r3, #1
 800803a:	2214      	movs	r2, #20
 800803c:	2120      	movs	r1, #32
 800803e:	2040      	movs	r0, #64	; 0x40
 8008040:	f7fb ff78 	bl	8003f34 <drawCircle>
   display();
 8008044:	f7ff fcca 	bl	80079dc <display>
   HAL_Delay(1000);
 8008048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800804c:	f7f9 f898 	bl	8001180 <HAL_Delay>
   fillCircle(64, 32, 10, WHITE);
 8008050:	2301      	movs	r3, #1
 8008052:	220a      	movs	r2, #10
 8008054:	2120      	movs	r1, #32
 8008056:	2040      	movs	r0, #64	; 0x40
 8008058:	f7fc f8f1 	bl	800423e <fillCircle>
   display();
 800805c:	f7ff fcbe 	bl	80079dc <display>
   HAL_Delay(1000);
 8008060:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008064:	f7f9 f88c 	bl	8001180 <HAL_Delay>
   fillRoundRect(10, 10, 108, 48, 8,  WHITE);
 8008068:	2401      	movs	r4, #1
 800806a:	210a      	movs	r1, #10
 800806c:	2308      	movs	r3, #8
 800806e:	4608      	mov	r0, r1
 8008070:	226c      	movs	r2, #108	; 0x6c
 8008072:	e88d 0018 	stmia.w	sp, {r3, r4}
 8008076:	2330      	movs	r3, #48	; 0x30
 8008078:	f7fc f90e 	bl	8004298 <fillRoundRect>
   display();
 800807c:	f7ff fcae 	bl	80079dc <display>
   HAL_UART_Receive_DMA(&huart1, (uint8_t*)rx1_buffer, 1);
 8008080:	4622      	mov	r2, r4
 8008082:	4936      	ldr	r1, [pc, #216]	; (800815c <main+0x61c>)
 8008084:	4836      	ldr	r0, [pc, #216]	; (8008160 <main+0x620>)
 8008086:	f7fb fd1d 	bl	8003ac4 <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx2_buffer, 1);
 800808a:	4622      	mov	r2, r4
 800808c:	4935      	ldr	r1, [pc, #212]	; (8008164 <main+0x624>)
 800808e:	4836      	ldr	r0, [pc, #216]	; (8008168 <main+0x628>)
 8008090:	f7fb fd18 	bl	8003ac4 <HAL_UART_Receive_DMA>
      HAL_ADC_Start(&hadc1);
 8008094:	4d35      	ldr	r5, [pc, #212]	; (800816c <main+0x62c>)
    LED0_TOGGLE; //RED
 8008096:	2108      	movs	r1, #8
 8008098:	482b      	ldr	r0, [pc, #172]	; (8008148 <main+0x608>)
 800809a:	f7f9 fd90 	bl	8001bbe <HAL_GPIO_TogglePin>
        Baro_update();
 800809e:	f7ff f8dd 	bl	800725c <Baro_update>
        computeIMU();
 80080a2:	f7fc fe61 	bl	8004d68 <computeIMU>
        Control();
 80080a6:	f7fc fff7 	bl	8005098 <Control>
        mixTable();
 80080aa:	f7fc ff07 	bl	8004ebc <mixTable>
        PwmWriteMotor();
 80080ae:	f7fd fb1b 	bl	80056e8 <PwmWriteMotor>
        PrintData(5);   //All Data Out Put
 80080b2:	2005      	movs	r0, #5
 80080b4:	f7ff f996 	bl	80073e4 <PrintData>
      HAL_ADC_Start(&hadc1);
 80080b8:	4628      	mov	r0, r5
 80080ba:	f7f9 f9d1 	bl	8001460 <HAL_ADC_Start>
       if(HAL_ADC_PollForConversion(&hadc1,1000000) == HAL_OK)
 80080be:	492c      	ldr	r1, [pc, #176]	; (8008170 <main+0x630>)
 80080c0:	4628      	mov	r0, r5
 80080c2:	f7f9 f86f 	bl	80011a4 <HAL_ADC_PollForConversion>
 80080c6:	b9c8      	cbnz	r0, 80080fc <main+0x5bc>
         BAT.VBAT_Sense = HAL_ADC_GetValue(&hadc1);
 80080c8:	4628      	mov	r0, r5
 80080ca:	f7f9 f909 	bl	80012e0 <HAL_ADC_GetValue>
 80080ce:	4c29      	ldr	r4, [pc, #164]	; (8008174 <main+0x634>)
 80080d0:	6020      	str	r0, [r4, #0]
         BAT.VBAT = (((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW;
 80080d2:	f7f8 f987 	bl	80003e4 <__aeabi_ui2d>
 80080d6:	4632      	mov	r2, r6
 80080d8:	463b      	mov	r3, r7
 80080da:	f7f8 f9f9 	bl	80004d0 <__aeabi_dmul>
 80080de:	4642      	mov	r2, r8
 80080e0:	464b      	mov	r3, r9
 80080e2:	f7f8 fb1f 	bl	8000724 <__aeabi_ddiv>
 80080e6:	2200      	movs	r2, #0
 80080e8:	4b23      	ldr	r3, [pc, #140]	; (8008178 <main+0x638>)
 80080ea:	f7f8 f9f1 	bl	80004d0 <__aeabi_dmul>
 80080ee:	2200      	movs	r2, #0
 80080f0:	4b22      	ldr	r3, [pc, #136]	; (800817c <main+0x63c>)
 80080f2:	f7f8 fb17 	bl	8000724 <__aeabi_ddiv>
 80080f6:	f7f8 fc9b 	bl	8000a30 <__aeabi_d2f>
 80080fa:	6060      	str	r0, [r4, #4]
       flight_mode_signal();
 80080fc:	f7fc fe8e 	bl	8004e1c <flight_mode_signal>
      SendTelemetry();
 8008100:	f7ff fba2 	bl	8007848 <SendTelemetry>
      if (micros() - loop_timer > 4050)Error.error = 4;                                      //Output an error if the loop time exceeds 4050us.
 8008104:	f7ff fbce 	bl	80078a4 <micros>
 8008108:	4c1d      	ldr	r4, [pc, #116]	; (8008180 <main+0x640>)
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	46a2      	mov	sl, r4
 800810e:	1ac0      	subs	r0, r0, r3
 8008110:	f640 73d2 	movw	r3, #4050	; 0xfd2
 8008114:	4298      	cmp	r0, r3
 8008116:	bf82      	ittt	hi
 8008118:	2204      	movhi	r2, #4
 800811a:	4b1a      	ldrhi	r3, [pc, #104]	; (8008184 <main+0x644>)
 800811c:	701a      	strbhi	r2, [r3, #0]
      while (micros() - loop_timer < 4000);                                            //We wait until 4000us are passed.
 800811e:	f7ff fbc1 	bl	80078a4 <micros>
 8008122:	f8da 3000 	ldr.w	r3, [sl]
 8008126:	1ac0      	subs	r0, r0, r3
 8008128:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 800812c:	d3f7      	bcc.n	800811e <main+0x5de>
      loop_timer = micros();
 800812e:	f7ff fbb9 	bl	80078a4 <micros>
 8008132:	6020      	str	r0, [r4, #0]
    LED0_TOGGLE; //RED
 8008134:	e7af      	b.n	8008096 <main+0x556>
 8008136:	bf00      	nop
 8008138:	66666666 	.word	0x66666666
 800813c:	400a6666 	.word	0x400a6666
 8008140:	00000000 	.word	0x00000000
 8008144:	40affe00 	.word	0x40affe00
 8008148:	40010c00 	.word	0x40010c00
 800814c:	3dcccccd 	.word	0x3dcccccd
 8008150:	437a0000 	.word	0x437a0000
 8008154:	20000838 	.word	0x20000838
 8008158:	20000874 	.word	0x20000874
 800815c:	20000e24 	.word	0x20000e24
 8008160:	20001060 	.word	0x20001060
 8008164:	20000e34 	.word	0x20000e34
 8008168:	200010e8 	.word	0x200010e8
 800816c:	20000fa8 	.word	0x20000fa8
 8008170:	000f4240 	.word	0x000f4240
 8008174:	20000e44 	.word	0x20000e44
 8008178:	403e0000 	.word	0x403e0000
 800817c:	40340000 	.word	0x40340000
 8008180:	2000073c 	.word	0x2000073c
 8008184:	200010a0 	.word	0x200010a0

08008188 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008188:	4770      	bx	lr
	...

0800818c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800818c:	4b0e      	ldr	r3, [pc, #56]	; (80081c8 <HAL_MspInit+0x3c>)
{
 800818e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8008190:	699a      	ldr	r2, [r3, #24]
 8008192:	f042 0201 	orr.w	r2, r2, #1
 8008196:	619a      	str	r2, [r3, #24]
 8008198:	699a      	ldr	r2, [r3, #24]
 800819a:	f002 0201 	and.w	r2, r2, #1
 800819e:	9200      	str	r2, [sp, #0]
 80081a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80081a2:	69da      	ldr	r2, [r3, #28]
 80081a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80081a8:	61da      	str	r2, [r3, #28]
 80081aa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80081ac:	4a07      	ldr	r2, [pc, #28]	; (80081cc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80081ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081b2:	9301      	str	r3, [sp, #4]
 80081b4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80081b6:	6853      	ldr	r3, [r2, #4]
 80081b8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80081bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80081c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081c2:	b002      	add	sp, #8
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40021000 	.word	0x40021000
 80081cc:	40010000 	.word	0x40010000

080081d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80081d0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081d2:	2410      	movs	r4, #16
{
 80081d4:	4605      	mov	r5, r0
 80081d6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081d8:	4622      	mov	r2, r4
 80081da:	2100      	movs	r1, #0
 80081dc:	a802      	add	r0, sp, #8
 80081de:	f000 fa90 	bl	8008702 <memset>
  if(hadc->Instance==ADC1)
 80081e2:	682a      	ldr	r2, [r5, #0]
 80081e4:	4b0f      	ldr	r3, [pc, #60]	; (8008224 <HAL_ADC_MspInit+0x54>)
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d11a      	bne.n	8008220 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80081ea:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80081ee:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081f0:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80081f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f6:	619a      	str	r2, [r3, #24]
 80081f8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081fa:	480b      	ldr	r0, [pc, #44]	; (8008228 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80081fc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8008200:	9200      	str	r2, [sp, #0]
 8008202:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	f042 0204 	orr.w	r2, r2, #4
 800820a:	619a      	str	r2, [r3, #24]
 800820c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800820e:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008210:	f003 0304 	and.w	r3, r3, #4
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008218:	2303      	movs	r3, #3
 800821a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800821c:	f7f9 fbea 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008220:	b007      	add	sp, #28
 8008222:	bd30      	pop	{r4, r5, pc}
 8008224:	40012400 	.word	0x40012400
 8008228:	40010800 	.word	0x40010800

0800822c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800822c:	b510      	push	{r4, lr}
 800822e:	4604      	mov	r4, r0
 8008230:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008232:	2210      	movs	r2, #16
 8008234:	2100      	movs	r1, #0
 8008236:	a802      	add	r0, sp, #8
 8008238:	f000 fa63 	bl	8008702 <memset>
  if(hi2c->Instance==I2C2)
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	4b11      	ldr	r3, [pc, #68]	; (8008284 <HAL_I2C_MspInit+0x58>)
 8008240:	429a      	cmp	r2, r3
 8008242:	d11d      	bne.n	8008280 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008244:	4c10      	ldr	r4, [pc, #64]	; (8008288 <HAL_I2C_MspInit+0x5c>)
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008246:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008248:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800824a:	4810      	ldr	r0, [pc, #64]	; (800828c <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800824c:	f043 0308 	orr.w	r3, r3, #8
 8008250:	61a3      	str	r3, [r4, #24]
 8008252:	69a3      	ldr	r3, [r4, #24]
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800825c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008260:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008262:	2312      	movs	r3, #18
 8008264:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008266:	2303      	movs	r3, #3
 8008268:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800826a:	f7f9 fbc3 	bl	80019f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800826e:	69e3      	ldr	r3, [r4, #28]
 8008270:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008274:	61e3      	str	r3, [r4, #28]
 8008276:	69e3      	ldr	r3, [r4, #28]
 8008278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800827c:	9301      	str	r3, [sp, #4]
 800827e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8008280:	b006      	add	sp, #24
 8008282:	bd10      	pop	{r4, pc}
 8008284:	40005800 	.word	0x40005800
 8008288:	40021000 	.word	0x40021000
 800828c:	40010c00 	.word	0x40010c00

08008290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008290:	b510      	push	{r4, lr}
 8008292:	4604      	mov	r4, r0
 8008294:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008296:	2210      	movs	r2, #16
 8008298:	2100      	movs	r1, #0
 800829a:	a806      	add	r0, sp, #24
 800829c:	f000 fa31 	bl	8008702 <memset>
  if(htim_base->Instance==TIM2)
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a6:	d122      	bne.n	80082ee <HAL_TIM_Base_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80082a8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80082ac:	69da      	ldr	r2, [r3, #28]
    PA3     ------> TIM2_CH4  //UART2 reserved
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ae:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM2_CLK_ENABLE();
 80082b0:	f042 0201 	orr.w	r2, r2, #1
 80082b4:	61da      	str	r2, [r3, #28]
 80082b6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b8:	482f      	ldr	r0, [pc, #188]	; (8008378 <HAL_TIM_Base_MspInit+0xe8>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80082ba:	f002 0201 	and.w	r2, r2, #1
 80082be:	9200      	str	r2, [sp, #0]
 80082c0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082c2:	699a      	ldr	r2, [r3, #24]
 80082c4:	f042 0204 	orr.w	r2, r2, #4
 80082c8:	619a      	str	r2, [r3, #24]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80082d4:	2303      	movs	r3, #3
 80082d6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082d8:	f7f9 fb8c 	bl	80019f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80082dc:	2200      	movs	r2, #0
 80082de:	201c      	movs	r0, #28
 80082e0:	4611      	mov	r1, r2
 80082e2:	f7f9 f9d3 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80082e6:	201c      	movs	r0, #28
  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80082e8:	f7f9 fa04 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80082ec:	e02d      	b.n	800834a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80082ee:	4a23      	ldr	r2, [pc, #140]	; (800837c <HAL_TIM_Base_MspInit+0xec>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d12c      	bne.n	800834e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80082f4:	4b22      	ldr	r3, [pc, #136]	; (8008380 <HAL_TIM_Base_MspInit+0xf0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082f6:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM3_CLK_ENABLE();
 80082f8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082fa:	481f      	ldr	r0, [pc, #124]	; (8008378 <HAL_TIM_Base_MspInit+0xe8>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80082fc:	f042 0202 	orr.w	r2, r2, #2
 8008300:	61da      	str	r2, [r3, #28]
 8008302:	69da      	ldr	r2, [r3, #28]
 8008304:	f002 0202 	and.w	r2, r2, #2
 8008308:	9202      	str	r2, [sp, #8]
 800830a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800830c:	699a      	ldr	r2, [r3, #24]
 800830e:	f042 0204 	orr.w	r2, r2, #4
 8008312:	619a      	str	r2, [r3, #24]
 8008314:	699a      	ldr	r2, [r3, #24]
 8008316:	f002 0204 	and.w	r2, r2, #4
 800831a:	9203      	str	r2, [sp, #12]
 800831c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800831e:	699a      	ldr	r2, [r3, #24]
 8008320:	f042 0208 	orr.w	r2, r2, #8
 8008324:	619a      	str	r2, [r3, #24]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	f003 0308 	and.w	r3, r3, #8
 800832c:	9304      	str	r3, [sp, #16]
 800832e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008330:	23c0      	movs	r3, #192	; 0xc0
 8008332:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008334:	f7f9 fb5e 	bl	80019f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008338:	2303      	movs	r3, #3
 800833a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800833c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800833e:	a906      	add	r1, sp, #24
 8008340:	4810      	ldr	r0, [pc, #64]	; (8008384 <HAL_TIM_Base_MspInit+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008342:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008344:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008346:	f7f9 fb55 	bl	80019f4 <HAL_GPIO_Init>
}
 800834a:	b00a      	add	sp, #40	; 0x28
 800834c:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM4)
 800834e:	4a0e      	ldr	r2, [pc, #56]	; (8008388 <HAL_TIM_Base_MspInit+0xf8>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d1fa      	bne.n	800834a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008354:	4b0a      	ldr	r3, [pc, #40]	; (8008380 <HAL_TIM_Base_MspInit+0xf0>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008356:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008358:	69da      	ldr	r2, [r3, #28]
 800835a:	f042 0204 	orr.w	r2, r2, #4
 800835e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008360:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008362:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008364:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008366:	f003 0304 	and.w	r3, r3, #4
 800836a:	9305      	str	r3, [sp, #20]
 800836c:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800836e:	f7f9 f98d 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008372:	201e      	movs	r0, #30
 8008374:	e7b8      	b.n	80082e8 <HAL_TIM_Base_MspInit+0x58>
 8008376:	bf00      	nop
 8008378:	40010800 	.word	0x40010800
 800837c:	40000400 	.word	0x40000400
 8008380:	40021000 	.word	0x40021000
 8008384:	40010c00 	.word	0x40010c00
 8008388:	40000800 	.word	0x40000800

0800838c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800838c:	b510      	push	{r4, lr}
 800838e:	4604      	mov	r4, r0
 8008390:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008392:	2210      	movs	r2, #16
 8008394:	2100      	movs	r1, #0
 8008396:	a802      	add	r0, sp, #8
 8008398:	f000 f9b3 	bl	8008702 <memset>
  if(htim->Instance==TIM4)
 800839c:	6822      	ldr	r2, [r4, #0]
 800839e:	4b0d      	ldr	r3, [pc, #52]	; (80083d4 <HAL_TIM_MspPostInit+0x48>)
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d115      	bne.n	80083d0 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083a4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80083a8:	699a      	ldr	r2, [r3, #24]
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083aa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083ac:	f042 0208 	orr.w	r2, r2, #8
 80083b0:	619a      	str	r2, [r3, #24]
 80083b2:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083b4:	4808      	ldr	r0, [pc, #32]	; (80083d8 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083b6:	f003 0308 	and.w	r3, r3, #8
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80083be:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80083c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083c4:	2302      	movs	r3, #2
 80083c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083c8:	2303      	movs	r3, #3
 80083ca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083cc:	f7f9 fb12 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80083d0:	b006      	add	sp, #24
 80083d2:	bd10      	pop	{r4, pc}
 80083d4:	40000800 	.word	0x40000800
 80083d8:	40010c00 	.word	0x40010c00

080083dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80083dc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083de:	2710      	movs	r7, #16
{
 80083e0:	4605      	mov	r5, r0
 80083e2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e4:	463a      	mov	r2, r7
 80083e6:	2100      	movs	r1, #0
 80083e8:	eb0d 0007 	add.w	r0, sp, r7
 80083ec:	f000 f989 	bl	8008702 <memset>
  if(huart->Instance==USART1)
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	4a57      	ldr	r2, [pc, #348]	; (8008550 <HAL_UART_MspInit+0x174>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d15b      	bne.n	80084b0 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80083f8:	4b56      	ldr	r3, [pc, #344]	; (8008554 <HAL_UART_MspInit+0x178>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083fa:	eb0d 0107 	add.w	r1, sp, r7
    __HAL_RCC_USART1_CLK_ENABLE();
 80083fe:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008400:	4855      	ldr	r0, [pc, #340]	; (8008558 <HAL_UART_MspInit+0x17c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8008402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008406:	619a      	str	r2, [r3, #24]
 8008408:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800840a:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800840c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008410:	9201      	str	r2, [sp, #4]
 8008412:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008414:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8008416:	4c51      	ldr	r4, [pc, #324]	; (800855c <HAL_UART_MspInit+0x180>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008418:	f042 0204 	orr.w	r2, r2, #4
 800841c:	619a      	str	r2, [r3, #24]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	9302      	str	r3, [sp, #8]
 8008426:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800842c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800842e:	2302      	movs	r3, #2
 8008430:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008432:	2303      	movs	r3, #3
 8008434:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008436:	f7f9 fadd 	bl	80019f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800843a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800843e:	4846      	ldr	r0, [pc, #280]	; (8008558 <HAL_UART_MspInit+0x17c>)
 8008440:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008444:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008446:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008448:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800844a:	f7f9 fad3 	bl	80019f4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800844e:	4b44      	ldr	r3, [pc, #272]	; (8008560 <HAL_UART_MspInit+0x184>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008450:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008452:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008456:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008458:	60a6      	str	r6, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800845a:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800845c:	6126      	str	r6, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800845e:	6166      	str	r6, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008460:	61a6      	str	r6, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008462:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008464:	f7f9 f978 	bl	8001758 <HAL_DMA_Init>
 8008468:	b108      	cbz	r0, 800846e <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 800846a:	f7ff fb0d 	bl	8007a88 <Error_Handler>

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800846e:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008470:	4b3c      	ldr	r3, [pc, #240]	; (8008564 <HAL_UART_MspInit+0x188>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008472:	632c      	str	r4, [r5, #48]	; 0x30
 8008474:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008476:	4c3c      	ldr	r4, [pc, #240]	; (8008568 <HAL_UART_MspInit+0x18c>)
 8008478:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800847a:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800847c:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800847e:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008480:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008482:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008484:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008486:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008488:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800848a:	61a2      	str	r2, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800848c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800848e:	f7f9 f963 	bl	8001758 <HAL_DMA_Init>
 8008492:	b108      	cbz	r0, 8008498 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8008494:	f7ff faf8 	bl	8007a88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008498:	2200      	movs	r2, #0
 800849a:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800849c:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800849e:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80084a0:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80084a2:	f7f9 f8f3 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80084a6:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80084a8:	f7f9 f924 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80084ac:	b009      	add	sp, #36	; 0x24
 80084ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART2)
 80084b0:	4a2e      	ldr	r2, [pc, #184]	; (800856c <HAL_UART_MspInit+0x190>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d1fa      	bne.n	80084ac <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80084b6:	4b27      	ldr	r3, [pc, #156]	; (8008554 <HAL_UART_MspInit+0x178>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084b8:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 80084ba:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084bc:	4826      	ldr	r0, [pc, #152]	; (8008558 <HAL_UART_MspInit+0x17c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80084be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80084c2:	61da      	str	r2, [r3, #28]
 80084c4:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084c6:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80084c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084cc:	9303      	str	r3, [sp, #12]
 80084ce:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80084d0:	2304      	movs	r3, #4
 80084d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084d4:	2302      	movs	r3, #2
 80084d6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084d8:	2303      	movs	r3, #3
 80084da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084dc:	f7f9 fa8a 	bl	80019f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80084e0:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084e2:	481d      	ldr	r0, [pc, #116]	; (8008558 <HAL_UART_MspInit+0x17c>)
 80084e4:	a904      	add	r1, sp, #16
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80084e6:	4c22      	ldr	r4, [pc, #136]	; (8008570 <HAL_UART_MspInit+0x194>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80084e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084ea:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ec:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084ee:	f7f9 fa81 	bl	80019f4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80084f2:	4b20      	ldr	r3, [pc, #128]	; (8008574 <HAL_UART_MspInit+0x198>)
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80084f4:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80084f6:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80084fa:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80084fc:	60a6      	str	r6, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80084fe:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008500:	6126      	str	r6, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008502:	6166      	str	r6, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008504:	61a6      	str	r6, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008506:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008508:	f7f9 f926 	bl	8001758 <HAL_DMA_Init>
 800850c:	b108      	cbz	r0, 8008512 <HAL_UART_MspInit+0x136>
      Error_Handler();
 800850e:	f7ff fabb 	bl	8007a88 <Error_Handler>
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008512:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8008514:	4b18      	ldr	r3, [pc, #96]	; (8008578 <HAL_UART_MspInit+0x19c>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008516:	632c      	str	r4, [r5, #48]	; 0x30
 8008518:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800851a:	4c18      	ldr	r4, [pc, #96]	; (800857c <HAL_UART_MspInit+0x1a0>)
 800851c:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800851e:	60e2      	str	r2, [r4, #12]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008520:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008522:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008524:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008526:	6063      	str	r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008528:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800852a:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800852c:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800852e:	61a2      	str	r2, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008530:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008532:	f7f9 f911 	bl	8001758 <HAL_DMA_Init>
 8008536:	b108      	cbz	r0, 800853c <HAL_UART_MspInit+0x160>
      Error_Handler();
 8008538:	f7ff faa6 	bl	8007a88 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800853c:	2200      	movs	r2, #0
 800853e:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008540:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008542:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008544:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008546:	f7f9 f8a1 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800854a:	2026      	movs	r0, #38	; 0x26
 800854c:	e7ac      	b.n	80084a8 <HAL_UART_MspInit+0xcc>
 800854e:	bf00      	nop
 8008550:	40013800 	.word	0x40013800
 8008554:	40021000 	.word	0x40021000
 8008558:	40010800 	.word	0x40010800
 800855c:	20000f64 	.word	0x20000f64
 8008560:	40020044 	.word	0x40020044
 8008564:	40020058 	.word	0x40020058
 8008568:	20000fd8 	.word	0x20000fd8
 800856c:	40004400 	.word	0x40004400
 8008570:	2000101c 	.word	0x2000101c
 8008574:	40020080 	.word	0x40020080
 8008578:	4002006c 	.word	0x4002006c
 800857c:	20000e4c 	.word	0x20000e4c

08008580 <NMI_Handler>:
 8008580:	4770      	bx	lr

08008582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008582:	e7fe      	b.n	8008582 <HardFault_Handler>

08008584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008584:	e7fe      	b.n	8008584 <MemManage_Handler>

08008586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008586:	e7fe      	b.n	8008586 <BusFault_Handler>

08008588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008588:	e7fe      	b.n	8008588 <UsageFault_Handler>

0800858a <SVC_Handler>:
 800858a:	4770      	bx	lr

0800858c <DebugMon_Handler>:
 800858c:	4770      	bx	lr

0800858e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800858e:	4770      	bx	lr

08008590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008590:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008592:	f7f8 fde3 	bl	800115c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800859a:	f7f9 b8d9 	b.w	8001750 <HAL_SYSTICK_IRQHandler>
	...

080085a0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80085a0:	4801      	ldr	r0, [pc, #4]	; (80085a8 <DMA1_Channel4_IRQHandler+0x8>)
 80085a2:	f7f9 b993 	b.w	80018cc <HAL_DMA_IRQHandler>
 80085a6:	bf00      	nop
 80085a8:	20000f64 	.word	0x20000f64

080085ac <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80085ac:	4801      	ldr	r0, [pc, #4]	; (80085b4 <DMA1_Channel5_IRQHandler+0x8>)
 80085ae:	f7f9 b98d 	b.w	80018cc <HAL_DMA_IRQHandler>
 80085b2:	bf00      	nop
 80085b4:	20000fd8 	.word	0x20000fd8

080085b8 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80085b8:	4801      	ldr	r0, [pc, #4]	; (80085c0 <DMA1_Channel6_IRQHandler+0x8>)
 80085ba:	f7f9 b987 	b.w	80018cc <HAL_DMA_IRQHandler>
 80085be:	bf00      	nop
 80085c0:	20000e4c 	.word	0x20000e4c

080085c4 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80085c4:	4801      	ldr	r0, [pc, #4]	; (80085cc <DMA1_Channel7_IRQHandler+0x8>)
 80085c6:	f7f9 b981 	b.w	80018cc <HAL_DMA_IRQHandler>
 80085ca:	bf00      	nop
 80085cc:	2000101c 	.word	0x2000101c

080085d0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <TIM2_IRQHandler+0x8>)
 80085d2:	f7fa be05 	b.w	80031e0 <HAL_TIM_IRQHandler>
 80085d6:	bf00      	nop
 80085d8:	200010a8 	.word	0x200010a8

080085dc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80085dc:	4801      	ldr	r0, [pc, #4]	; (80085e4 <TIM3_IRQHandler+0x8>)
 80085de:	f7fa bdff 	b.w	80031e0 <HAL_TIM_IRQHandler>
 80085e2:	bf00      	nop
 80085e4:	20000f24 	.word	0x20000f24

080085e8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <TIM4_IRQHandler+0x8>)
 80085ea:	f7fa bdf9 	b.w	80031e0 <HAL_TIM_IRQHandler>
 80085ee:	bf00      	nop
 80085f0:	20000e90 	.word	0x20000e90

080085f4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80085f4:	4801      	ldr	r0, [pc, #4]	; (80085fc <USART1_IRQHandler+0x8>)
 80085f6:	f7fb bb53 	b.w	8003ca0 <HAL_UART_IRQHandler>
 80085fa:	bf00      	nop
 80085fc:	20001060 	.word	0x20001060

08008600 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008600:	4801      	ldr	r0, [pc, #4]	; (8008608 <USART2_IRQHandler+0x8>)
 8008602:	f7fb bb4d 	b.w	8003ca0 <HAL_UART_IRQHandler>
 8008606:	bf00      	nop
 8008608:	200010e8 	.word	0x200010e8

0800860c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800860c:	4b0f      	ldr	r3, [pc, #60]	; (800864c <SystemInit+0x40>)
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	f042 0201 	orr.w	r2, r2, #1
 8008614:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8008616:	6859      	ldr	r1, [r3, #4]
 8008618:	4a0d      	ldr	r2, [pc, #52]	; (8008650 <SystemInit+0x44>)
 800861a:	400a      	ands	r2, r1
 800861c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008624:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008628:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008630:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8008638:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800863a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800863e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008640:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008644:	4b03      	ldr	r3, [pc, #12]	; (8008654 <SystemInit+0x48>)
 8008646:	609a      	str	r2, [r3, #8]
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	40021000 	.word	0x40021000
 8008650:	f8ff0000 	.word	0xf8ff0000
 8008654:	e000ed00 	.word	0xe000ed00

08008658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008658:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800865a:	e003      	b.n	8008664 <LoopCopyDataInit>

0800865c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800865c:	4b0b      	ldr	r3, [pc, #44]	; (800868c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800865e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008660:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008662:	3104      	adds	r1, #4

08008664 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008664:	480a      	ldr	r0, [pc, #40]	; (8008690 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8008666:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008668:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800866a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800866c:	d3f6      	bcc.n	800865c <CopyDataInit>
  ldr r2, =_sbss
 800866e:	4a0a      	ldr	r2, [pc, #40]	; (8008698 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008670:	e002      	b.n	8008678 <LoopFillZerobss>

08008672 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008672:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008674:	f842 3b04 	str.w	r3, [r2], #4

08008678 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008678:	4b08      	ldr	r3, [pc, #32]	; (800869c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800867a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800867c:	d3f9      	bcc.n	8008672 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800867e:	f7ff ffc5 	bl	800860c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008682:	f000 f80f 	bl	80086a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008686:	f7ff fa5b 	bl	8007b40 <main>
  bx lr
 800868a:	4770      	bx	lr
  ldr r3, =_sidata
 800868c:	0800bbc8 	.word	0x0800bbc8
  ldr r0, =_sdata
 8008690:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008694:	2000047c 	.word	0x2000047c
  ldr r2, =_sbss
 8008698:	20000480 	.word	0x20000480
  ldr r3, = _ebss
 800869c:	2000112c 	.word	0x2000112c

080086a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80086a0:	e7fe      	b.n	80086a0 <ADC1_2_IRQHandler>
	...

080086a4 <__libc_init_array>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	2500      	movs	r5, #0
 80086a8:	4e0c      	ldr	r6, [pc, #48]	; (80086dc <__libc_init_array+0x38>)
 80086aa:	4c0d      	ldr	r4, [pc, #52]	; (80086e0 <__libc_init_array+0x3c>)
 80086ac:	1ba4      	subs	r4, r4, r6
 80086ae:	10a4      	asrs	r4, r4, #2
 80086b0:	42a5      	cmp	r5, r4
 80086b2:	d109      	bne.n	80086c8 <__libc_init_array+0x24>
 80086b4:	f002 fddc 	bl	800b270 <_init>
 80086b8:	2500      	movs	r5, #0
 80086ba:	4e0a      	ldr	r6, [pc, #40]	; (80086e4 <__libc_init_array+0x40>)
 80086bc:	4c0a      	ldr	r4, [pc, #40]	; (80086e8 <__libc_init_array+0x44>)
 80086be:	1ba4      	subs	r4, r4, r6
 80086c0:	10a4      	asrs	r4, r4, #2
 80086c2:	42a5      	cmp	r5, r4
 80086c4:	d105      	bne.n	80086d2 <__libc_init_array+0x2e>
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086cc:	4798      	blx	r3
 80086ce:	3501      	adds	r5, #1
 80086d0:	e7ee      	b.n	80086b0 <__libc_init_array+0xc>
 80086d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086d6:	4798      	blx	r3
 80086d8:	3501      	adds	r5, #1
 80086da:	e7f2      	b.n	80086c2 <__libc_init_array+0x1e>
 80086dc:	0800bbc0 	.word	0x0800bbc0
 80086e0:	0800bbc0 	.word	0x0800bbc0
 80086e4:	0800bbc0 	.word	0x0800bbc0
 80086e8:	0800bbc4 	.word	0x0800bbc4

080086ec <memcpy>:
 80086ec:	b510      	push	{r4, lr}
 80086ee:	1e43      	subs	r3, r0, #1
 80086f0:	440a      	add	r2, r1
 80086f2:	4291      	cmp	r1, r2
 80086f4:	d100      	bne.n	80086f8 <memcpy+0xc>
 80086f6:	bd10      	pop	{r4, pc}
 80086f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008700:	e7f7      	b.n	80086f2 <memcpy+0x6>

08008702 <memset>:
 8008702:	4603      	mov	r3, r0
 8008704:	4402      	add	r2, r0
 8008706:	4293      	cmp	r3, r2
 8008708:	d100      	bne.n	800870c <memset+0xa>
 800870a:	4770      	bx	lr
 800870c:	f803 1b01 	strb.w	r1, [r3], #1
 8008710:	e7f9      	b.n	8008706 <memset+0x4>
	...

08008714 <siprintf>:
 8008714:	b40e      	push	{r1, r2, r3}
 8008716:	f44f 7102 	mov.w	r1, #520	; 0x208
 800871a:	b500      	push	{lr}
 800871c:	b09c      	sub	sp, #112	; 0x70
 800871e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008722:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008726:	9104      	str	r1, [sp, #16]
 8008728:	9107      	str	r1, [sp, #28]
 800872a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800872e:	ab1d      	add	r3, sp, #116	; 0x74
 8008730:	9002      	str	r0, [sp, #8]
 8008732:	9006      	str	r0, [sp, #24]
 8008734:	4808      	ldr	r0, [pc, #32]	; (8008758 <siprintf+0x44>)
 8008736:	f853 2b04 	ldr.w	r2, [r3], #4
 800873a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800873e:	6800      	ldr	r0, [r0, #0]
 8008740:	a902      	add	r1, sp, #8
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	f000 f918 	bl	8008978 <_svfiprintf_r>
 8008748:	2200      	movs	r2, #0
 800874a:	9b02      	ldr	r3, [sp, #8]
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	b01c      	add	sp, #112	; 0x70
 8008750:	f85d eb04 	ldr.w	lr, [sp], #4
 8008754:	b003      	add	sp, #12
 8008756:	4770      	bx	lr
 8008758:	20000414 	.word	0x20000414

0800875c <strcpy>:
 800875c:	4603      	mov	r3, r0
 800875e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008762:	f803 2b01 	strb.w	r2, [r3], #1
 8008766:	2a00      	cmp	r2, #0
 8008768:	d1f9      	bne.n	800875e <strcpy+0x2>
 800876a:	4770      	bx	lr

0800876c <_free_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4605      	mov	r5, r0
 8008770:	2900      	cmp	r1, #0
 8008772:	d043      	beq.n	80087fc <_free_r+0x90>
 8008774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008778:	1f0c      	subs	r4, r1, #4
 800877a:	2b00      	cmp	r3, #0
 800877c:	bfb8      	it	lt
 800877e:	18e4      	addlt	r4, r4, r3
 8008780:	f000 fbc2 	bl	8008f08 <__malloc_lock>
 8008784:	4a1e      	ldr	r2, [pc, #120]	; (8008800 <_free_r+0x94>)
 8008786:	6813      	ldr	r3, [r2, #0]
 8008788:	4610      	mov	r0, r2
 800878a:	b933      	cbnz	r3, 800879a <_free_r+0x2e>
 800878c:	6063      	str	r3, [r4, #4]
 800878e:	6014      	str	r4, [r2, #0]
 8008790:	4628      	mov	r0, r5
 8008792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008796:	f000 bbb8 	b.w	8008f0a <__malloc_unlock>
 800879a:	42a3      	cmp	r3, r4
 800879c:	d90b      	bls.n	80087b6 <_free_r+0x4a>
 800879e:	6821      	ldr	r1, [r4, #0]
 80087a0:	1862      	adds	r2, r4, r1
 80087a2:	4293      	cmp	r3, r2
 80087a4:	bf01      	itttt	eq
 80087a6:	681a      	ldreq	r2, [r3, #0]
 80087a8:	685b      	ldreq	r3, [r3, #4]
 80087aa:	1852      	addeq	r2, r2, r1
 80087ac:	6022      	streq	r2, [r4, #0]
 80087ae:	6063      	str	r3, [r4, #4]
 80087b0:	6004      	str	r4, [r0, #0]
 80087b2:	e7ed      	b.n	8008790 <_free_r+0x24>
 80087b4:	4613      	mov	r3, r2
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	b10a      	cbz	r2, 80087be <_free_r+0x52>
 80087ba:	42a2      	cmp	r2, r4
 80087bc:	d9fa      	bls.n	80087b4 <_free_r+0x48>
 80087be:	6819      	ldr	r1, [r3, #0]
 80087c0:	1858      	adds	r0, r3, r1
 80087c2:	42a0      	cmp	r0, r4
 80087c4:	d10b      	bne.n	80087de <_free_r+0x72>
 80087c6:	6820      	ldr	r0, [r4, #0]
 80087c8:	4401      	add	r1, r0
 80087ca:	1858      	adds	r0, r3, r1
 80087cc:	4282      	cmp	r2, r0
 80087ce:	6019      	str	r1, [r3, #0]
 80087d0:	d1de      	bne.n	8008790 <_free_r+0x24>
 80087d2:	6810      	ldr	r0, [r2, #0]
 80087d4:	6852      	ldr	r2, [r2, #4]
 80087d6:	4401      	add	r1, r0
 80087d8:	6019      	str	r1, [r3, #0]
 80087da:	605a      	str	r2, [r3, #4]
 80087dc:	e7d8      	b.n	8008790 <_free_r+0x24>
 80087de:	d902      	bls.n	80087e6 <_free_r+0x7a>
 80087e0:	230c      	movs	r3, #12
 80087e2:	602b      	str	r3, [r5, #0]
 80087e4:	e7d4      	b.n	8008790 <_free_r+0x24>
 80087e6:	6820      	ldr	r0, [r4, #0]
 80087e8:	1821      	adds	r1, r4, r0
 80087ea:	428a      	cmp	r2, r1
 80087ec:	bf01      	itttt	eq
 80087ee:	6811      	ldreq	r1, [r2, #0]
 80087f0:	6852      	ldreq	r2, [r2, #4]
 80087f2:	1809      	addeq	r1, r1, r0
 80087f4:	6021      	streq	r1, [r4, #0]
 80087f6:	6062      	str	r2, [r4, #4]
 80087f8:	605c      	str	r4, [r3, #4]
 80087fa:	e7c9      	b.n	8008790 <_free_r+0x24>
 80087fc:	bd38      	pop	{r3, r4, r5, pc}
 80087fe:	bf00      	nop
 8008800:	20000740 	.word	0x20000740

08008804 <_malloc_r>:
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	1ccd      	adds	r5, r1, #3
 8008808:	f025 0503 	bic.w	r5, r5, #3
 800880c:	3508      	adds	r5, #8
 800880e:	2d0c      	cmp	r5, #12
 8008810:	bf38      	it	cc
 8008812:	250c      	movcc	r5, #12
 8008814:	2d00      	cmp	r5, #0
 8008816:	4606      	mov	r6, r0
 8008818:	db01      	blt.n	800881e <_malloc_r+0x1a>
 800881a:	42a9      	cmp	r1, r5
 800881c:	d903      	bls.n	8008826 <_malloc_r+0x22>
 800881e:	230c      	movs	r3, #12
 8008820:	6033      	str	r3, [r6, #0]
 8008822:	2000      	movs	r0, #0
 8008824:	bd70      	pop	{r4, r5, r6, pc}
 8008826:	f000 fb6f 	bl	8008f08 <__malloc_lock>
 800882a:	4a23      	ldr	r2, [pc, #140]	; (80088b8 <_malloc_r+0xb4>)
 800882c:	6814      	ldr	r4, [r2, #0]
 800882e:	4621      	mov	r1, r4
 8008830:	b991      	cbnz	r1, 8008858 <_malloc_r+0x54>
 8008832:	4c22      	ldr	r4, [pc, #136]	; (80088bc <_malloc_r+0xb8>)
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	b91b      	cbnz	r3, 8008840 <_malloc_r+0x3c>
 8008838:	4630      	mov	r0, r6
 800883a:	f000 fb29 	bl	8008e90 <_sbrk_r>
 800883e:	6020      	str	r0, [r4, #0]
 8008840:	4629      	mov	r1, r5
 8008842:	4630      	mov	r0, r6
 8008844:	f000 fb24 	bl	8008e90 <_sbrk_r>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d126      	bne.n	800889a <_malloc_r+0x96>
 800884c:	230c      	movs	r3, #12
 800884e:	4630      	mov	r0, r6
 8008850:	6033      	str	r3, [r6, #0]
 8008852:	f000 fb5a 	bl	8008f0a <__malloc_unlock>
 8008856:	e7e4      	b.n	8008822 <_malloc_r+0x1e>
 8008858:	680b      	ldr	r3, [r1, #0]
 800885a:	1b5b      	subs	r3, r3, r5
 800885c:	d41a      	bmi.n	8008894 <_malloc_r+0x90>
 800885e:	2b0b      	cmp	r3, #11
 8008860:	d90f      	bls.n	8008882 <_malloc_r+0x7e>
 8008862:	600b      	str	r3, [r1, #0]
 8008864:	18cc      	adds	r4, r1, r3
 8008866:	50cd      	str	r5, [r1, r3]
 8008868:	4630      	mov	r0, r6
 800886a:	f000 fb4e 	bl	8008f0a <__malloc_unlock>
 800886e:	f104 000b 	add.w	r0, r4, #11
 8008872:	1d23      	adds	r3, r4, #4
 8008874:	f020 0007 	bic.w	r0, r0, #7
 8008878:	1ac3      	subs	r3, r0, r3
 800887a:	d01b      	beq.n	80088b4 <_malloc_r+0xb0>
 800887c:	425a      	negs	r2, r3
 800887e:	50e2      	str	r2, [r4, r3]
 8008880:	bd70      	pop	{r4, r5, r6, pc}
 8008882:	428c      	cmp	r4, r1
 8008884:	bf0b      	itete	eq
 8008886:	6863      	ldreq	r3, [r4, #4]
 8008888:	684b      	ldrne	r3, [r1, #4]
 800888a:	6013      	streq	r3, [r2, #0]
 800888c:	6063      	strne	r3, [r4, #4]
 800888e:	bf18      	it	ne
 8008890:	460c      	movne	r4, r1
 8008892:	e7e9      	b.n	8008868 <_malloc_r+0x64>
 8008894:	460c      	mov	r4, r1
 8008896:	6849      	ldr	r1, [r1, #4]
 8008898:	e7ca      	b.n	8008830 <_malloc_r+0x2c>
 800889a:	1cc4      	adds	r4, r0, #3
 800889c:	f024 0403 	bic.w	r4, r4, #3
 80088a0:	42a0      	cmp	r0, r4
 80088a2:	d005      	beq.n	80088b0 <_malloc_r+0xac>
 80088a4:	1a21      	subs	r1, r4, r0
 80088a6:	4630      	mov	r0, r6
 80088a8:	f000 faf2 	bl	8008e90 <_sbrk_r>
 80088ac:	3001      	adds	r0, #1
 80088ae:	d0cd      	beq.n	800884c <_malloc_r+0x48>
 80088b0:	6025      	str	r5, [r4, #0]
 80088b2:	e7d9      	b.n	8008868 <_malloc_r+0x64>
 80088b4:	bd70      	pop	{r4, r5, r6, pc}
 80088b6:	bf00      	nop
 80088b8:	20000740 	.word	0x20000740
 80088bc:	20000744 	.word	0x20000744

080088c0 <__ssputs_r>:
 80088c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c4:	688e      	ldr	r6, [r1, #8]
 80088c6:	4682      	mov	sl, r0
 80088c8:	429e      	cmp	r6, r3
 80088ca:	460c      	mov	r4, r1
 80088cc:	4691      	mov	r9, r2
 80088ce:	4698      	mov	r8, r3
 80088d0:	d835      	bhi.n	800893e <__ssputs_r+0x7e>
 80088d2:	898a      	ldrh	r2, [r1, #12]
 80088d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088d8:	d031      	beq.n	800893e <__ssputs_r+0x7e>
 80088da:	2302      	movs	r3, #2
 80088dc:	6825      	ldr	r5, [r4, #0]
 80088de:	6909      	ldr	r1, [r1, #16]
 80088e0:	1a6f      	subs	r7, r5, r1
 80088e2:	6965      	ldr	r5, [r4, #20]
 80088e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80088ec:	f108 0301 	add.w	r3, r8, #1
 80088f0:	443b      	add	r3, r7
 80088f2:	429d      	cmp	r5, r3
 80088f4:	bf38      	it	cc
 80088f6:	461d      	movcc	r5, r3
 80088f8:	0553      	lsls	r3, r2, #21
 80088fa:	d531      	bpl.n	8008960 <__ssputs_r+0xa0>
 80088fc:	4629      	mov	r1, r5
 80088fe:	f7ff ff81 	bl	8008804 <_malloc_r>
 8008902:	4606      	mov	r6, r0
 8008904:	b950      	cbnz	r0, 800891c <__ssputs_r+0x5c>
 8008906:	230c      	movs	r3, #12
 8008908:	f8ca 3000 	str.w	r3, [sl]
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	f04f 30ff 	mov.w	r0, #4294967295
 8008912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008916:	81a3      	strh	r3, [r4, #12]
 8008918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891c:	463a      	mov	r2, r7
 800891e:	6921      	ldr	r1, [r4, #16]
 8008920:	f7ff fee4 	bl	80086ec <memcpy>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800892a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	6126      	str	r6, [r4, #16]
 8008932:	443e      	add	r6, r7
 8008934:	6026      	str	r6, [r4, #0]
 8008936:	4646      	mov	r6, r8
 8008938:	6165      	str	r5, [r4, #20]
 800893a:	1bed      	subs	r5, r5, r7
 800893c:	60a5      	str	r5, [r4, #8]
 800893e:	4546      	cmp	r6, r8
 8008940:	bf28      	it	cs
 8008942:	4646      	movcs	r6, r8
 8008944:	4649      	mov	r1, r9
 8008946:	4632      	mov	r2, r6
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	f000 fac3 	bl	8008ed4 <memmove>
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	2000      	movs	r0, #0
 8008952:	1b9b      	subs	r3, r3, r6
 8008954:	60a3      	str	r3, [r4, #8]
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	441e      	add	r6, r3
 800895a:	6026      	str	r6, [r4, #0]
 800895c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008960:	462a      	mov	r2, r5
 8008962:	f000 fad3 	bl	8008f0c <_realloc_r>
 8008966:	4606      	mov	r6, r0
 8008968:	2800      	cmp	r0, #0
 800896a:	d1e1      	bne.n	8008930 <__ssputs_r+0x70>
 800896c:	6921      	ldr	r1, [r4, #16]
 800896e:	4650      	mov	r0, sl
 8008970:	f7ff fefc 	bl	800876c <_free_r>
 8008974:	e7c7      	b.n	8008906 <__ssputs_r+0x46>
	...

08008978 <_svfiprintf_r>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	b09d      	sub	sp, #116	; 0x74
 800897e:	9303      	str	r3, [sp, #12]
 8008980:	898b      	ldrh	r3, [r1, #12]
 8008982:	4680      	mov	r8, r0
 8008984:	061c      	lsls	r4, r3, #24
 8008986:	460d      	mov	r5, r1
 8008988:	4616      	mov	r6, r2
 800898a:	d50f      	bpl.n	80089ac <_svfiprintf_r+0x34>
 800898c:	690b      	ldr	r3, [r1, #16]
 800898e:	b96b      	cbnz	r3, 80089ac <_svfiprintf_r+0x34>
 8008990:	2140      	movs	r1, #64	; 0x40
 8008992:	f7ff ff37 	bl	8008804 <_malloc_r>
 8008996:	6028      	str	r0, [r5, #0]
 8008998:	6128      	str	r0, [r5, #16]
 800899a:	b928      	cbnz	r0, 80089a8 <_svfiprintf_r+0x30>
 800899c:	230c      	movs	r3, #12
 800899e:	f8c8 3000 	str.w	r3, [r8]
 80089a2:	f04f 30ff 	mov.w	r0, #4294967295
 80089a6:	e0c4      	b.n	8008b32 <_svfiprintf_r+0x1ba>
 80089a8:	2340      	movs	r3, #64	; 0x40
 80089aa:	616b      	str	r3, [r5, #20]
 80089ac:	2300      	movs	r3, #0
 80089ae:	9309      	str	r3, [sp, #36]	; 0x24
 80089b0:	2320      	movs	r3, #32
 80089b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089b6:	2330      	movs	r3, #48	; 0x30
 80089b8:	f04f 0b01 	mov.w	fp, #1
 80089bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089c0:	4637      	mov	r7, r6
 80089c2:	463c      	mov	r4, r7
 80089c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d13c      	bne.n	8008a46 <_svfiprintf_r+0xce>
 80089cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80089d0:	d00b      	beq.n	80089ea <_svfiprintf_r+0x72>
 80089d2:	4653      	mov	r3, sl
 80089d4:	4632      	mov	r2, r6
 80089d6:	4629      	mov	r1, r5
 80089d8:	4640      	mov	r0, r8
 80089da:	f7ff ff71 	bl	80088c0 <__ssputs_r>
 80089de:	3001      	adds	r0, #1
 80089e0:	f000 80a2 	beq.w	8008b28 <_svfiprintf_r+0x1b0>
 80089e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e6:	4453      	add	r3, sl
 80089e8:	9309      	str	r3, [sp, #36]	; 0x24
 80089ea:	783b      	ldrb	r3, [r7, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 809b 	beq.w	8008b28 <_svfiprintf_r+0x1b0>
 80089f2:	2300      	movs	r3, #0
 80089f4:	f04f 32ff 	mov.w	r2, #4294967295
 80089f8:	9304      	str	r3, [sp, #16]
 80089fa:	9307      	str	r3, [sp, #28]
 80089fc:	9205      	str	r2, [sp, #20]
 80089fe:	9306      	str	r3, [sp, #24]
 8008a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a04:	931a      	str	r3, [sp, #104]	; 0x68
 8008a06:	2205      	movs	r2, #5
 8008a08:	7821      	ldrb	r1, [r4, #0]
 8008a0a:	4850      	ldr	r0, [pc, #320]	; (8008b4c <_svfiprintf_r+0x1d4>)
 8008a0c:	f000 fa54 	bl	8008eb8 <memchr>
 8008a10:	1c67      	adds	r7, r4, #1
 8008a12:	9b04      	ldr	r3, [sp, #16]
 8008a14:	b9d8      	cbnz	r0, 8008a4e <_svfiprintf_r+0xd6>
 8008a16:	06d9      	lsls	r1, r3, #27
 8008a18:	bf44      	itt	mi
 8008a1a:	2220      	movmi	r2, #32
 8008a1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a20:	071a      	lsls	r2, r3, #28
 8008a22:	bf44      	itt	mi
 8008a24:	222b      	movmi	r2, #43	; 0x2b
 8008a26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a2a:	7822      	ldrb	r2, [r4, #0]
 8008a2c:	2a2a      	cmp	r2, #42	; 0x2a
 8008a2e:	d016      	beq.n	8008a5e <_svfiprintf_r+0xe6>
 8008a30:	2100      	movs	r1, #0
 8008a32:	200a      	movs	r0, #10
 8008a34:	9a07      	ldr	r2, [sp, #28]
 8008a36:	4627      	mov	r7, r4
 8008a38:	783b      	ldrb	r3, [r7, #0]
 8008a3a:	3401      	adds	r4, #1
 8008a3c:	3b30      	subs	r3, #48	; 0x30
 8008a3e:	2b09      	cmp	r3, #9
 8008a40:	d950      	bls.n	8008ae4 <_svfiprintf_r+0x16c>
 8008a42:	b1c9      	cbz	r1, 8008a78 <_svfiprintf_r+0x100>
 8008a44:	e011      	b.n	8008a6a <_svfiprintf_r+0xf2>
 8008a46:	2b25      	cmp	r3, #37	; 0x25
 8008a48:	d0c0      	beq.n	80089cc <_svfiprintf_r+0x54>
 8008a4a:	4627      	mov	r7, r4
 8008a4c:	e7b9      	b.n	80089c2 <_svfiprintf_r+0x4a>
 8008a4e:	4a3f      	ldr	r2, [pc, #252]	; (8008b4c <_svfiprintf_r+0x1d4>)
 8008a50:	463c      	mov	r4, r7
 8008a52:	1a80      	subs	r0, r0, r2
 8008a54:	fa0b f000 	lsl.w	r0, fp, r0
 8008a58:	4318      	orrs	r0, r3
 8008a5a:	9004      	str	r0, [sp, #16]
 8008a5c:	e7d3      	b.n	8008a06 <_svfiprintf_r+0x8e>
 8008a5e:	9a03      	ldr	r2, [sp, #12]
 8008a60:	1d11      	adds	r1, r2, #4
 8008a62:	6812      	ldr	r2, [r2, #0]
 8008a64:	9103      	str	r1, [sp, #12]
 8008a66:	2a00      	cmp	r2, #0
 8008a68:	db01      	blt.n	8008a6e <_svfiprintf_r+0xf6>
 8008a6a:	9207      	str	r2, [sp, #28]
 8008a6c:	e004      	b.n	8008a78 <_svfiprintf_r+0x100>
 8008a6e:	4252      	negs	r2, r2
 8008a70:	f043 0302 	orr.w	r3, r3, #2
 8008a74:	9207      	str	r2, [sp, #28]
 8008a76:	9304      	str	r3, [sp, #16]
 8008a78:	783b      	ldrb	r3, [r7, #0]
 8008a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a7c:	d10d      	bne.n	8008a9a <_svfiprintf_r+0x122>
 8008a7e:	787b      	ldrb	r3, [r7, #1]
 8008a80:	1c79      	adds	r1, r7, #1
 8008a82:	2b2a      	cmp	r3, #42	; 0x2a
 8008a84:	d132      	bne.n	8008aec <_svfiprintf_r+0x174>
 8008a86:	9b03      	ldr	r3, [sp, #12]
 8008a88:	3702      	adds	r7, #2
 8008a8a:	1d1a      	adds	r2, r3, #4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	9203      	str	r2, [sp, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bfb8      	it	lt
 8008a94:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a98:	9305      	str	r3, [sp, #20]
 8008a9a:	4c2d      	ldr	r4, [pc, #180]	; (8008b50 <_svfiprintf_r+0x1d8>)
 8008a9c:	2203      	movs	r2, #3
 8008a9e:	7839      	ldrb	r1, [r7, #0]
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fa09 	bl	8008eb8 <memchr>
 8008aa6:	b138      	cbz	r0, 8008ab8 <_svfiprintf_r+0x140>
 8008aa8:	2340      	movs	r3, #64	; 0x40
 8008aaa:	1b00      	subs	r0, r0, r4
 8008aac:	fa03 f000 	lsl.w	r0, r3, r0
 8008ab0:	9b04      	ldr	r3, [sp, #16]
 8008ab2:	3701      	adds	r7, #1
 8008ab4:	4303      	orrs	r3, r0
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	7839      	ldrb	r1, [r7, #0]
 8008aba:	2206      	movs	r2, #6
 8008abc:	4825      	ldr	r0, [pc, #148]	; (8008b54 <_svfiprintf_r+0x1dc>)
 8008abe:	1c7e      	adds	r6, r7, #1
 8008ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ac4:	f000 f9f8 	bl	8008eb8 <memchr>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d035      	beq.n	8008b38 <_svfiprintf_r+0x1c0>
 8008acc:	4b22      	ldr	r3, [pc, #136]	; (8008b58 <_svfiprintf_r+0x1e0>)
 8008ace:	b9fb      	cbnz	r3, 8008b10 <_svfiprintf_r+0x198>
 8008ad0:	9b03      	ldr	r3, [sp, #12]
 8008ad2:	3307      	adds	r3, #7
 8008ad4:	f023 0307 	bic.w	r3, r3, #7
 8008ad8:	3308      	adds	r3, #8
 8008ada:	9303      	str	r3, [sp, #12]
 8008adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ade:	444b      	add	r3, r9
 8008ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae2:	e76d      	b.n	80089c0 <_svfiprintf_r+0x48>
 8008ae4:	fb00 3202 	mla	r2, r0, r2, r3
 8008ae8:	2101      	movs	r1, #1
 8008aea:	e7a4      	b.n	8008a36 <_svfiprintf_r+0xbe>
 8008aec:	2300      	movs	r3, #0
 8008aee:	240a      	movs	r4, #10
 8008af0:	4618      	mov	r0, r3
 8008af2:	9305      	str	r3, [sp, #20]
 8008af4:	460f      	mov	r7, r1
 8008af6:	783a      	ldrb	r2, [r7, #0]
 8008af8:	3101      	adds	r1, #1
 8008afa:	3a30      	subs	r2, #48	; 0x30
 8008afc:	2a09      	cmp	r2, #9
 8008afe:	d903      	bls.n	8008b08 <_svfiprintf_r+0x190>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d0ca      	beq.n	8008a9a <_svfiprintf_r+0x122>
 8008b04:	9005      	str	r0, [sp, #20]
 8008b06:	e7c8      	b.n	8008a9a <_svfiprintf_r+0x122>
 8008b08:	fb04 2000 	mla	r0, r4, r0, r2
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e7f1      	b.n	8008af4 <_svfiprintf_r+0x17c>
 8008b10:	ab03      	add	r3, sp, #12
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	462a      	mov	r2, r5
 8008b16:	4b11      	ldr	r3, [pc, #68]	; (8008b5c <_svfiprintf_r+0x1e4>)
 8008b18:	a904      	add	r1, sp, #16
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	f3af 8000 	nop.w
 8008b20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b24:	4681      	mov	r9, r0
 8008b26:	d1d9      	bne.n	8008adc <_svfiprintf_r+0x164>
 8008b28:	89ab      	ldrh	r3, [r5, #12]
 8008b2a:	065b      	lsls	r3, r3, #25
 8008b2c:	f53f af39 	bmi.w	80089a2 <_svfiprintf_r+0x2a>
 8008b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b32:	b01d      	add	sp, #116	; 0x74
 8008b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b38:	ab03      	add	r3, sp, #12
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	462a      	mov	r2, r5
 8008b3e:	4b07      	ldr	r3, [pc, #28]	; (8008b5c <_svfiprintf_r+0x1e4>)
 8008b40:	a904      	add	r1, sp, #16
 8008b42:	4640      	mov	r0, r8
 8008b44:	f000 f884 	bl	8008c50 <_printf_i>
 8008b48:	e7ea      	b.n	8008b20 <_svfiprintf_r+0x1a8>
 8008b4a:	bf00      	nop
 8008b4c:	0800bafc 	.word	0x0800bafc
 8008b50:	0800bb02 	.word	0x0800bb02
 8008b54:	0800bb06 	.word	0x0800bb06
 8008b58:	00000000 	.word	0x00000000
 8008b5c:	080088c1 	.word	0x080088c1

08008b60 <_printf_common>:
 8008b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	4691      	mov	r9, r2
 8008b66:	461f      	mov	r7, r3
 8008b68:	688a      	ldr	r2, [r1, #8]
 8008b6a:	690b      	ldr	r3, [r1, #16]
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	bfb8      	it	lt
 8008b72:	4613      	movlt	r3, r2
 8008b74:	f8c9 3000 	str.w	r3, [r9]
 8008b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b82:	b112      	cbz	r2, 8008b8a <_printf_common+0x2a>
 8008b84:	3301      	adds	r3, #1
 8008b86:	f8c9 3000 	str.w	r3, [r9]
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	0699      	lsls	r1, r3, #26
 8008b8e:	bf42      	ittt	mi
 8008b90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b94:	3302      	addmi	r3, #2
 8008b96:	f8c9 3000 	strmi.w	r3, [r9]
 8008b9a:	6825      	ldr	r5, [r4, #0]
 8008b9c:	f015 0506 	ands.w	r5, r5, #6
 8008ba0:	d107      	bne.n	8008bb2 <_printf_common+0x52>
 8008ba2:	f104 0a19 	add.w	sl, r4, #25
 8008ba6:	68e3      	ldr	r3, [r4, #12]
 8008ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8008bac:	1a9b      	subs	r3, r3, r2
 8008bae:	429d      	cmp	r5, r3
 8008bb0:	db2a      	blt.n	8008c08 <_printf_common+0xa8>
 8008bb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008bb6:	6822      	ldr	r2, [r4, #0]
 8008bb8:	3300      	adds	r3, #0
 8008bba:	bf18      	it	ne
 8008bbc:	2301      	movne	r3, #1
 8008bbe:	0692      	lsls	r2, r2, #26
 8008bc0:	d42f      	bmi.n	8008c22 <_printf_common+0xc2>
 8008bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	4630      	mov	r0, r6
 8008bca:	47c0      	blx	r8
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d022      	beq.n	8008c16 <_printf_common+0xb6>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	68e5      	ldr	r5, [r4, #12]
 8008bd4:	f003 0306 	and.w	r3, r3, #6
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	bf18      	it	ne
 8008bdc:	2500      	movne	r5, #0
 8008bde:	f8d9 2000 	ldr.w	r2, [r9]
 8008be2:	f04f 0900 	mov.w	r9, #0
 8008be6:	bf08      	it	eq
 8008be8:	1aad      	subeq	r5, r5, r2
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	6922      	ldr	r2, [r4, #16]
 8008bee:	bf08      	it	eq
 8008bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	bfc4      	itt	gt
 8008bf8:	1a9b      	subgt	r3, r3, r2
 8008bfa:	18ed      	addgt	r5, r5, r3
 8008bfc:	341a      	adds	r4, #26
 8008bfe:	454d      	cmp	r5, r9
 8008c00:	d11b      	bne.n	8008c3a <_printf_common+0xda>
 8008c02:	2000      	movs	r0, #0
 8008c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c08:	2301      	movs	r3, #1
 8008c0a:	4652      	mov	r2, sl
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	4630      	mov	r0, r6
 8008c10:	47c0      	blx	r8
 8008c12:	3001      	adds	r0, #1
 8008c14:	d103      	bne.n	8008c1e <_printf_common+0xbe>
 8008c16:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1e:	3501      	adds	r5, #1
 8008c20:	e7c1      	b.n	8008ba6 <_printf_common+0x46>
 8008c22:	2030      	movs	r0, #48	; 0x30
 8008c24:	18e1      	adds	r1, r4, r3
 8008c26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c30:	4422      	add	r2, r4
 8008c32:	3302      	adds	r3, #2
 8008c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c38:	e7c3      	b.n	8008bc2 <_printf_common+0x62>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4622      	mov	r2, r4
 8008c3e:	4639      	mov	r1, r7
 8008c40:	4630      	mov	r0, r6
 8008c42:	47c0      	blx	r8
 8008c44:	3001      	adds	r0, #1
 8008c46:	d0e6      	beq.n	8008c16 <_printf_common+0xb6>
 8008c48:	f109 0901 	add.w	r9, r9, #1
 8008c4c:	e7d7      	b.n	8008bfe <_printf_common+0x9e>
	...

08008c50 <_printf_i>:
 8008c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c54:	4617      	mov	r7, r2
 8008c56:	7e0a      	ldrb	r2, [r1, #24]
 8008c58:	b085      	sub	sp, #20
 8008c5a:	2a6e      	cmp	r2, #110	; 0x6e
 8008c5c:	4698      	mov	r8, r3
 8008c5e:	4606      	mov	r6, r0
 8008c60:	460c      	mov	r4, r1
 8008c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c64:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008c68:	f000 80bc 	beq.w	8008de4 <_printf_i+0x194>
 8008c6c:	d81a      	bhi.n	8008ca4 <_printf_i+0x54>
 8008c6e:	2a63      	cmp	r2, #99	; 0x63
 8008c70:	d02e      	beq.n	8008cd0 <_printf_i+0x80>
 8008c72:	d80a      	bhi.n	8008c8a <_printf_i+0x3a>
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	f000 80c8 	beq.w	8008e0a <_printf_i+0x1ba>
 8008c7a:	2a58      	cmp	r2, #88	; 0x58
 8008c7c:	f000 808a 	beq.w	8008d94 <_printf_i+0x144>
 8008c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c84:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008c88:	e02a      	b.n	8008ce0 <_printf_i+0x90>
 8008c8a:	2a64      	cmp	r2, #100	; 0x64
 8008c8c:	d001      	beq.n	8008c92 <_printf_i+0x42>
 8008c8e:	2a69      	cmp	r2, #105	; 0x69
 8008c90:	d1f6      	bne.n	8008c80 <_printf_i+0x30>
 8008c92:	6821      	ldr	r1, [r4, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008c9a:	d023      	beq.n	8008ce4 <_printf_i+0x94>
 8008c9c:	1d11      	adds	r1, r2, #4
 8008c9e:	6019      	str	r1, [r3, #0]
 8008ca0:	6813      	ldr	r3, [r2, #0]
 8008ca2:	e027      	b.n	8008cf4 <_printf_i+0xa4>
 8008ca4:	2a73      	cmp	r2, #115	; 0x73
 8008ca6:	f000 80b4 	beq.w	8008e12 <_printf_i+0x1c2>
 8008caa:	d808      	bhi.n	8008cbe <_printf_i+0x6e>
 8008cac:	2a6f      	cmp	r2, #111	; 0x6f
 8008cae:	d02a      	beq.n	8008d06 <_printf_i+0xb6>
 8008cb0:	2a70      	cmp	r2, #112	; 0x70
 8008cb2:	d1e5      	bne.n	8008c80 <_printf_i+0x30>
 8008cb4:	680a      	ldr	r2, [r1, #0]
 8008cb6:	f042 0220 	orr.w	r2, r2, #32
 8008cba:	600a      	str	r2, [r1, #0]
 8008cbc:	e003      	b.n	8008cc6 <_printf_i+0x76>
 8008cbe:	2a75      	cmp	r2, #117	; 0x75
 8008cc0:	d021      	beq.n	8008d06 <_printf_i+0xb6>
 8008cc2:	2a78      	cmp	r2, #120	; 0x78
 8008cc4:	d1dc      	bne.n	8008c80 <_printf_i+0x30>
 8008cc6:	2278      	movs	r2, #120	; 0x78
 8008cc8:	496f      	ldr	r1, [pc, #444]	; (8008e88 <_printf_i+0x238>)
 8008cca:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008cce:	e064      	b.n	8008d9a <_printf_i+0x14a>
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8008cd6:	1d11      	adds	r1, r2, #4
 8008cd8:	6019      	str	r1, [r3, #0]
 8008cda:	6813      	ldr	r3, [r2, #0]
 8008cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e0a3      	b.n	8008e2c <_printf_i+0x1dc>
 8008ce4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008ce8:	f102 0104 	add.w	r1, r2, #4
 8008cec:	6019      	str	r1, [r3, #0]
 8008cee:	d0d7      	beq.n	8008ca0 <_printf_i+0x50>
 8008cf0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	da03      	bge.n	8008d00 <_printf_i+0xb0>
 8008cf8:	222d      	movs	r2, #45	; 0x2d
 8008cfa:	425b      	negs	r3, r3
 8008cfc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008d00:	4962      	ldr	r1, [pc, #392]	; (8008e8c <_printf_i+0x23c>)
 8008d02:	220a      	movs	r2, #10
 8008d04:	e017      	b.n	8008d36 <_printf_i+0xe6>
 8008d06:	6820      	ldr	r0, [r4, #0]
 8008d08:	6819      	ldr	r1, [r3, #0]
 8008d0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008d0e:	d003      	beq.n	8008d18 <_printf_i+0xc8>
 8008d10:	1d08      	adds	r0, r1, #4
 8008d12:	6018      	str	r0, [r3, #0]
 8008d14:	680b      	ldr	r3, [r1, #0]
 8008d16:	e006      	b.n	8008d26 <_printf_i+0xd6>
 8008d18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d1c:	f101 0004 	add.w	r0, r1, #4
 8008d20:	6018      	str	r0, [r3, #0]
 8008d22:	d0f7      	beq.n	8008d14 <_printf_i+0xc4>
 8008d24:	880b      	ldrh	r3, [r1, #0]
 8008d26:	2a6f      	cmp	r2, #111	; 0x6f
 8008d28:	bf14      	ite	ne
 8008d2a:	220a      	movne	r2, #10
 8008d2c:	2208      	moveq	r2, #8
 8008d2e:	4957      	ldr	r1, [pc, #348]	; (8008e8c <_printf_i+0x23c>)
 8008d30:	2000      	movs	r0, #0
 8008d32:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008d36:	6865      	ldr	r5, [r4, #4]
 8008d38:	2d00      	cmp	r5, #0
 8008d3a:	60a5      	str	r5, [r4, #8]
 8008d3c:	f2c0 809c 	blt.w	8008e78 <_printf_i+0x228>
 8008d40:	6820      	ldr	r0, [r4, #0]
 8008d42:	f020 0004 	bic.w	r0, r0, #4
 8008d46:	6020      	str	r0, [r4, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d13f      	bne.n	8008dcc <_printf_i+0x17c>
 8008d4c:	2d00      	cmp	r5, #0
 8008d4e:	f040 8095 	bne.w	8008e7c <_printf_i+0x22c>
 8008d52:	4675      	mov	r5, lr
 8008d54:	2a08      	cmp	r2, #8
 8008d56:	d10b      	bne.n	8008d70 <_printf_i+0x120>
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	07da      	lsls	r2, r3, #31
 8008d5c:	d508      	bpl.n	8008d70 <_printf_i+0x120>
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	6862      	ldr	r2, [r4, #4]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	bfde      	ittt	le
 8008d66:	2330      	movle	r3, #48	; 0x30
 8008d68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d70:	ebae 0305 	sub.w	r3, lr, r5
 8008d74:	6123      	str	r3, [r4, #16]
 8008d76:	f8cd 8000 	str.w	r8, [sp]
 8008d7a:	463b      	mov	r3, r7
 8008d7c:	aa03      	add	r2, sp, #12
 8008d7e:	4621      	mov	r1, r4
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7ff feed 	bl	8008b60 <_printf_common>
 8008d86:	3001      	adds	r0, #1
 8008d88:	d155      	bne.n	8008e36 <_printf_i+0x1e6>
 8008d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8e:	b005      	add	sp, #20
 8008d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d94:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008d98:	493c      	ldr	r1, [pc, #240]	; (8008e8c <_printf_i+0x23c>)
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008da2:	f100 0504 	add.w	r5, r0, #4
 8008da6:	601d      	str	r5, [r3, #0]
 8008da8:	d001      	beq.n	8008dae <_printf_i+0x15e>
 8008daa:	6803      	ldr	r3, [r0, #0]
 8008dac:	e002      	b.n	8008db4 <_printf_i+0x164>
 8008dae:	0655      	lsls	r5, r2, #25
 8008db0:	d5fb      	bpl.n	8008daa <_printf_i+0x15a>
 8008db2:	8803      	ldrh	r3, [r0, #0]
 8008db4:	07d0      	lsls	r0, r2, #31
 8008db6:	bf44      	itt	mi
 8008db8:	f042 0220 	orrmi.w	r2, r2, #32
 8008dbc:	6022      	strmi	r2, [r4, #0]
 8008dbe:	b91b      	cbnz	r3, 8008dc8 <_printf_i+0x178>
 8008dc0:	6822      	ldr	r2, [r4, #0]
 8008dc2:	f022 0220 	bic.w	r2, r2, #32
 8008dc6:	6022      	str	r2, [r4, #0]
 8008dc8:	2210      	movs	r2, #16
 8008dca:	e7b1      	b.n	8008d30 <_printf_i+0xe0>
 8008dcc:	4675      	mov	r5, lr
 8008dce:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dd2:	fb02 3310 	mls	r3, r2, r0, r3
 8008dd6:	5ccb      	ldrb	r3, [r1, r3]
 8008dd8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d1f5      	bne.n	8008dce <_printf_i+0x17e>
 8008de2:	e7b7      	b.n	8008d54 <_printf_i+0x104>
 8008de4:	6808      	ldr	r0, [r1, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008dec:	6949      	ldr	r1, [r1, #20]
 8008dee:	d004      	beq.n	8008dfa <_printf_i+0x1aa>
 8008df0:	1d10      	adds	r0, r2, #4
 8008df2:	6018      	str	r0, [r3, #0]
 8008df4:	6813      	ldr	r3, [r2, #0]
 8008df6:	6019      	str	r1, [r3, #0]
 8008df8:	e007      	b.n	8008e0a <_printf_i+0x1ba>
 8008dfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dfe:	f102 0004 	add.w	r0, r2, #4
 8008e02:	6018      	str	r0, [r3, #0]
 8008e04:	6813      	ldr	r3, [r2, #0]
 8008e06:	d0f6      	beq.n	8008df6 <_printf_i+0x1a6>
 8008e08:	8019      	strh	r1, [r3, #0]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	4675      	mov	r5, lr
 8008e0e:	6123      	str	r3, [r4, #16]
 8008e10:	e7b1      	b.n	8008d76 <_printf_i+0x126>
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	1d11      	adds	r1, r2, #4
 8008e16:	6019      	str	r1, [r3, #0]
 8008e18:	6815      	ldr	r5, [r2, #0]
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	6862      	ldr	r2, [r4, #4]
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f000 f84a 	bl	8008eb8 <memchr>
 8008e24:	b108      	cbz	r0, 8008e2a <_printf_i+0x1da>
 8008e26:	1b40      	subs	r0, r0, r5
 8008e28:	6060      	str	r0, [r4, #4]
 8008e2a:	6863      	ldr	r3, [r4, #4]
 8008e2c:	6123      	str	r3, [r4, #16]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e34:	e79f      	b.n	8008d76 <_printf_i+0x126>
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	462a      	mov	r2, r5
 8008e3a:	4639      	mov	r1, r7
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	47c0      	blx	r8
 8008e40:	3001      	adds	r0, #1
 8008e42:	d0a2      	beq.n	8008d8a <_printf_i+0x13a>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	079b      	lsls	r3, r3, #30
 8008e48:	d507      	bpl.n	8008e5a <_printf_i+0x20a>
 8008e4a:	2500      	movs	r5, #0
 8008e4c:	f104 0919 	add.w	r9, r4, #25
 8008e50:	68e3      	ldr	r3, [r4, #12]
 8008e52:	9a03      	ldr	r2, [sp, #12]
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	429d      	cmp	r5, r3
 8008e58:	db05      	blt.n	8008e66 <_printf_i+0x216>
 8008e5a:	68e0      	ldr	r0, [r4, #12]
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	4298      	cmp	r0, r3
 8008e60:	bfb8      	it	lt
 8008e62:	4618      	movlt	r0, r3
 8008e64:	e793      	b.n	8008d8e <_printf_i+0x13e>
 8008e66:	2301      	movs	r3, #1
 8008e68:	464a      	mov	r2, r9
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	47c0      	blx	r8
 8008e70:	3001      	adds	r0, #1
 8008e72:	d08a      	beq.n	8008d8a <_printf_i+0x13a>
 8008e74:	3501      	adds	r5, #1
 8008e76:	e7eb      	b.n	8008e50 <_printf_i+0x200>
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1a7      	bne.n	8008dcc <_printf_i+0x17c>
 8008e7c:	780b      	ldrb	r3, [r1, #0]
 8008e7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e86:	e765      	b.n	8008d54 <_printf_i+0x104>
 8008e88:	0800bb1e 	.word	0x0800bb1e
 8008e8c:	0800bb0d 	.word	0x0800bb0d

08008e90 <_sbrk_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	2300      	movs	r3, #0
 8008e94:	4c05      	ldr	r4, [pc, #20]	; (8008eac <_sbrk_r+0x1c>)
 8008e96:	4605      	mov	r5, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	6023      	str	r3, [r4, #0]
 8008e9c:	f002 f9da 	bl	800b254 <_sbrk>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d102      	bne.n	8008eaa <_sbrk_r+0x1a>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	b103      	cbz	r3, 8008eaa <_sbrk_r+0x1a>
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	20001128 	.word	0x20001128

08008eb0 <nanf>:
 8008eb0:	4800      	ldr	r0, [pc, #0]	; (8008eb4 <nanf+0x4>)
 8008eb2:	4770      	bx	lr
 8008eb4:	7fc00000 	.word	0x7fc00000

08008eb8 <memchr>:
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	b2c9      	uxtb	r1, r1
 8008ebc:	4402      	add	r2, r0
 8008ebe:	4290      	cmp	r0, r2
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	d101      	bne.n	8008ec8 <memchr+0x10>
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	bd10      	pop	{r4, pc}
 8008ec8:	781c      	ldrb	r4, [r3, #0]
 8008eca:	3001      	adds	r0, #1
 8008ecc:	428c      	cmp	r4, r1
 8008ece:	d1f6      	bne.n	8008ebe <memchr+0x6>
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	bd10      	pop	{r4, pc}

08008ed4 <memmove>:
 8008ed4:	4288      	cmp	r0, r1
 8008ed6:	b510      	push	{r4, lr}
 8008ed8:	eb01 0302 	add.w	r3, r1, r2
 8008edc:	d803      	bhi.n	8008ee6 <memmove+0x12>
 8008ede:	1e42      	subs	r2, r0, #1
 8008ee0:	4299      	cmp	r1, r3
 8008ee2:	d10c      	bne.n	8008efe <memmove+0x2a>
 8008ee4:	bd10      	pop	{r4, pc}
 8008ee6:	4298      	cmp	r0, r3
 8008ee8:	d2f9      	bcs.n	8008ede <memmove+0xa>
 8008eea:	1881      	adds	r1, r0, r2
 8008eec:	1ad2      	subs	r2, r2, r3
 8008eee:	42d3      	cmn	r3, r2
 8008ef0:	d100      	bne.n	8008ef4 <memmove+0x20>
 8008ef2:	bd10      	pop	{r4, pc}
 8008ef4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ef8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008efc:	e7f7      	b.n	8008eee <memmove+0x1a>
 8008efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f02:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008f06:	e7eb      	b.n	8008ee0 <memmove+0xc>

08008f08 <__malloc_lock>:
 8008f08:	4770      	bx	lr

08008f0a <__malloc_unlock>:
 8008f0a:	4770      	bx	lr

08008f0c <_realloc_r>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	4607      	mov	r7, r0
 8008f10:	4614      	mov	r4, r2
 8008f12:	460e      	mov	r6, r1
 8008f14:	b921      	cbnz	r1, 8008f20 <_realloc_r+0x14>
 8008f16:	4611      	mov	r1, r2
 8008f18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f1c:	f7ff bc72 	b.w	8008804 <_malloc_r>
 8008f20:	b922      	cbnz	r2, 8008f2c <_realloc_r+0x20>
 8008f22:	f7ff fc23 	bl	800876c <_free_r>
 8008f26:	4625      	mov	r5, r4
 8008f28:	4628      	mov	r0, r5
 8008f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f2c:	f000 f814 	bl	8008f58 <_malloc_usable_size_r>
 8008f30:	4284      	cmp	r4, r0
 8008f32:	d90f      	bls.n	8008f54 <_realloc_r+0x48>
 8008f34:	4621      	mov	r1, r4
 8008f36:	4638      	mov	r0, r7
 8008f38:	f7ff fc64 	bl	8008804 <_malloc_r>
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d0f2      	beq.n	8008f28 <_realloc_r+0x1c>
 8008f42:	4631      	mov	r1, r6
 8008f44:	4622      	mov	r2, r4
 8008f46:	f7ff fbd1 	bl	80086ec <memcpy>
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f7ff fc0d 	bl	800876c <_free_r>
 8008f52:	e7e9      	b.n	8008f28 <_realloc_r+0x1c>
 8008f54:	4635      	mov	r5, r6
 8008f56:	e7e7      	b.n	8008f28 <_realloc_r+0x1c>

08008f58 <_malloc_usable_size_r>:
 8008f58:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	f1a0 0004 	sub.w	r0, r0, #4
 8008f62:	bfbc      	itt	lt
 8008f64:	580b      	ldrlt	r3, [r1, r0]
 8008f66:	18c0      	addlt	r0, r0, r3
 8008f68:	4770      	bx	lr
 8008f6a:	0000      	movs	r0, r0
 8008f6c:	0000      	movs	r0, r0
	...

08008f70 <floor>:
 8008f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f74:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008f78:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008f7c:	2e13      	cmp	r6, #19
 8008f7e:	4607      	mov	r7, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	460c      	mov	r4, r1
 8008f84:	4605      	mov	r5, r0
 8008f86:	dc35      	bgt.n	8008ff4 <floor+0x84>
 8008f88:	2e00      	cmp	r6, #0
 8008f8a:	da16      	bge.n	8008fba <floor+0x4a>
 8008f8c:	a336      	add	r3, pc, #216	; (adr r3, 8009068 <floor+0xf8>)
 8008f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f92:	f7f7 f8eb 	bl	800016c <__adddf3>
 8008f96:	2200      	movs	r2, #0
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f7f7 fd29 	bl	80009f0 <__aeabi_dcmpgt>
 8008f9e:	b148      	cbz	r0, 8008fb4 <floor+0x44>
 8008fa0:	2c00      	cmp	r4, #0
 8008fa2:	da5c      	bge.n	800905e <floor+0xee>
 8008fa4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008fa8:	433b      	orrs	r3, r7
 8008faa:	4b31      	ldr	r3, [pc, #196]	; (8009070 <floor+0x100>)
 8008fac:	f04f 0500 	mov.w	r5, #0
 8008fb0:	bf18      	it	ne
 8008fb2:	461c      	movne	r4, r3
 8008fb4:	4623      	mov	r3, r4
 8008fb6:	462f      	mov	r7, r5
 8008fb8:	e027      	b.n	800900a <floor+0x9a>
 8008fba:	4a2e      	ldr	r2, [pc, #184]	; (8009074 <floor+0x104>)
 8008fbc:	fa42 f806 	asr.w	r8, r2, r6
 8008fc0:	ea01 0208 	and.w	r2, r1, r8
 8008fc4:	4302      	orrs	r2, r0
 8008fc6:	d020      	beq.n	800900a <floor+0x9a>
 8008fc8:	a327      	add	r3, pc, #156	; (adr r3, 8009068 <floor+0xf8>)
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f7f7 f8cd 	bl	800016c <__adddf3>
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f7f7 fd0b 	bl	80009f0 <__aeabi_dcmpgt>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d0ea      	beq.n	8008fb4 <floor+0x44>
 8008fde:	2c00      	cmp	r4, #0
 8008fe0:	bfbe      	ittt	lt
 8008fe2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008fe6:	fa43 f606 	asrlt.w	r6, r3, r6
 8008fea:	19a4      	addlt	r4, r4, r6
 8008fec:	ea24 0408 	bic.w	r4, r4, r8
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	e7df      	b.n	8008fb4 <floor+0x44>
 8008ff4:	2e33      	cmp	r6, #51	; 0x33
 8008ff6:	dd0c      	ble.n	8009012 <floor+0xa2>
 8008ff8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008ffc:	d105      	bne.n	800900a <floor+0x9a>
 8008ffe:	460b      	mov	r3, r1
 8009000:	4602      	mov	r2, r0
 8009002:	f7f7 f8b3 	bl	800016c <__adddf3>
 8009006:	4607      	mov	r7, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4638      	mov	r0, r7
 800900c:	4619      	mov	r1, r3
 800900e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009012:	f04f 32ff 	mov.w	r2, #4294967295
 8009016:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800901a:	fa22 f808 	lsr.w	r8, r2, r8
 800901e:	ea10 0f08 	tst.w	r0, r8
 8009022:	d0f2      	beq.n	800900a <floor+0x9a>
 8009024:	a310      	add	r3, pc, #64	; (adr r3, 8009068 <floor+0xf8>)
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f7f7 f89f 	bl	800016c <__adddf3>
 800902e:	2200      	movs	r2, #0
 8009030:	2300      	movs	r3, #0
 8009032:	f7f7 fcdd 	bl	80009f0 <__aeabi_dcmpgt>
 8009036:	2800      	cmp	r0, #0
 8009038:	d0bc      	beq.n	8008fb4 <floor+0x44>
 800903a:	2c00      	cmp	r4, #0
 800903c:	da02      	bge.n	8009044 <floor+0xd4>
 800903e:	2e14      	cmp	r6, #20
 8009040:	d103      	bne.n	800904a <floor+0xda>
 8009042:	3401      	adds	r4, #1
 8009044:	ea25 0508 	bic.w	r5, r5, r8
 8009048:	e7b4      	b.n	8008fb4 <floor+0x44>
 800904a:	2301      	movs	r3, #1
 800904c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009050:	fa03 f606 	lsl.w	r6, r3, r6
 8009054:	4435      	add	r5, r6
 8009056:	42af      	cmp	r7, r5
 8009058:	bf88      	it	hi
 800905a:	18e4      	addhi	r4, r4, r3
 800905c:	e7f2      	b.n	8009044 <floor+0xd4>
 800905e:	2500      	movs	r5, #0
 8009060:	462c      	mov	r4, r5
 8009062:	e7a7      	b.n	8008fb4 <floor+0x44>
 8009064:	f3af 8000 	nop.w
 8009068:	8800759c 	.word	0x8800759c
 800906c:	7e37e43c 	.word	0x7e37e43c
 8009070:	bff00000 	.word	0xbff00000
 8009074:	000fffff 	.word	0x000fffff

08009078 <lrintf>:
 8009078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800907a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800907e:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 8009082:	291e      	cmp	r1, #30
 8009084:	dc2b      	bgt.n	80090de <lrintf+0x66>
 8009086:	1c4c      	adds	r4, r1, #1
 8009088:	da02      	bge.n	8009090 <lrintf+0x18>
 800908a:	2000      	movs	r0, #0
 800908c:	b003      	add	sp, #12
 800908e:	bd30      	pop	{r4, r5, pc}
 8009090:	2916      	cmp	r1, #22
 8009092:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 8009096:	dd09      	ble.n	80090ac <lrintf+0x34>
 8009098:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800909c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80090a0:	3a96      	subs	r2, #150	; 0x96
 80090a2:	4090      	lsls	r0, r2
 80090a4:	2c00      	cmp	r4, #0
 80090a6:	d0f1      	beq.n	800908c <lrintf+0x14>
 80090a8:	4240      	negs	r0, r0
 80090aa:	e7ef      	b.n	800908c <lrintf+0x14>
 80090ac:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <lrintf+0x6c>)
 80090ae:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80090b2:	4629      	mov	r1, r5
 80090b4:	f7f7 fd12 	bl	8000adc <__addsf3>
 80090b8:	9001      	str	r0, [sp, #4]
 80090ba:	9801      	ldr	r0, [sp, #4]
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 fd0b 	bl	8000ad8 <__aeabi_fsub>
 80090c2:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 80090c6:	d0e0      	beq.n	800908a <lrintf+0x12>
 80090c8:	f3c0 0316 	ubfx	r3, r0, #0, #23
 80090cc:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 80090d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090d4:	f1c0 0096 	rsb	r0, r0, #150	; 0x96
 80090d8:	fa23 f000 	lsr.w	r0, r3, r0
 80090dc:	e7e2      	b.n	80090a4 <lrintf+0x2c>
 80090de:	f7f7 ffe1 	bl	80010a4 <__aeabi_f2iz>
 80090e2:	e7d3      	b.n	800908c <lrintf+0x14>
 80090e4:	0800bb30 	.word	0x0800bb30

080090e8 <pow>:
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	b08f      	sub	sp, #60	; 0x3c
 80090ee:	461d      	mov	r5, r3
 80090f0:	4680      	mov	r8, r0
 80090f2:	4689      	mov	r9, r1
 80090f4:	4614      	mov	r4, r2
 80090f6:	f000 fb17 	bl	8009728 <__ieee754_pow>
 80090fa:	4fa5      	ldr	r7, [pc, #660]	; (8009390 <pow+0x2a8>)
 80090fc:	e9cd 0100 	strd	r0, r1, [sp]
 8009100:	f997 3000 	ldrsb.w	r3, [r7]
 8009104:	463e      	mov	r6, r7
 8009106:	9302      	str	r3, [sp, #8]
 8009108:	3301      	adds	r3, #1
 800910a:	d05f      	beq.n	80091cc <pow+0xe4>
 800910c:	4622      	mov	r2, r4
 800910e:	462b      	mov	r3, r5
 8009110:	4620      	mov	r0, r4
 8009112:	4629      	mov	r1, r5
 8009114:	f7f7 fc76 	bl	8000a04 <__aeabi_dcmpun>
 8009118:	4682      	mov	sl, r0
 800911a:	2800      	cmp	r0, #0
 800911c:	d156      	bne.n	80091cc <pow+0xe4>
 800911e:	4642      	mov	r2, r8
 8009120:	464b      	mov	r3, r9
 8009122:	4640      	mov	r0, r8
 8009124:	4649      	mov	r1, r9
 8009126:	f7f7 fc6d 	bl	8000a04 <__aeabi_dcmpun>
 800912a:	9003      	str	r0, [sp, #12]
 800912c:	b1e8      	cbz	r0, 800916a <pow+0x82>
 800912e:	2200      	movs	r2, #0
 8009130:	2300      	movs	r3, #0
 8009132:	4620      	mov	r0, r4
 8009134:	4629      	mov	r1, r5
 8009136:	f7f7 fc33 	bl	80009a0 <__aeabi_dcmpeq>
 800913a:	2800      	cmp	r0, #0
 800913c:	d046      	beq.n	80091cc <pow+0xe4>
 800913e:	2301      	movs	r3, #1
 8009140:	2200      	movs	r2, #0
 8009142:	9304      	str	r3, [sp, #16]
 8009144:	4b93      	ldr	r3, [pc, #588]	; (8009394 <pow+0x2ac>)
 8009146:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800914a:	9305      	str	r3, [sp, #20]
 800914c:	4b92      	ldr	r3, [pc, #584]	; (8009398 <pow+0x2b0>)
 800914e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009152:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009156:	9b02      	ldr	r3, [sp, #8]
 8009158:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800915c:	2b02      	cmp	r3, #2
 800915e:	d031      	beq.n	80091c4 <pow+0xdc>
 8009160:	a804      	add	r0, sp, #16
 8009162:	f001 fdfa 	bl	800ad5a <matherr>
 8009166:	bb38      	cbnz	r0, 80091b8 <pow+0xd0>
 8009168:	e058      	b.n	800921c <pow+0x134>
 800916a:	f04f 0a00 	mov.w	sl, #0
 800916e:	f04f 0b00 	mov.w	fp, #0
 8009172:	4652      	mov	r2, sl
 8009174:	465b      	mov	r3, fp
 8009176:	4640      	mov	r0, r8
 8009178:	4649      	mov	r1, r9
 800917a:	f7f7 fc11 	bl	80009a0 <__aeabi_dcmpeq>
 800917e:	2800      	cmp	r0, #0
 8009180:	d051      	beq.n	8009226 <pow+0x13e>
 8009182:	4652      	mov	r2, sl
 8009184:	465b      	mov	r3, fp
 8009186:	4620      	mov	r0, r4
 8009188:	4629      	mov	r1, r5
 800918a:	f7f7 fc09 	bl	80009a0 <__aeabi_dcmpeq>
 800918e:	4606      	mov	r6, r0
 8009190:	b308      	cbz	r0, 80091d6 <pow+0xee>
 8009192:	2301      	movs	r3, #1
 8009194:	9304      	str	r3, [sp, #16]
 8009196:	4b7f      	ldr	r3, [pc, #508]	; (8009394 <pow+0x2ac>)
 8009198:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800919c:	9305      	str	r3, [sp, #20]
 800919e:	9b03      	ldr	r3, [sp, #12]
 80091a0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80091a4:	930c      	str	r3, [sp, #48]	; 0x30
 80091a6:	9b02      	ldr	r3, [sp, #8]
 80091a8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d0d7      	beq.n	8009160 <pow+0x78>
 80091b0:	2200      	movs	r2, #0
 80091b2:	4b79      	ldr	r3, [pc, #484]	; (8009398 <pow+0x2b0>)
 80091b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80091b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ba:	b11b      	cbz	r3, 80091c4 <pow+0xdc>
 80091bc:	f002 f844 	bl	800b248 <__errno>
 80091c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091c2:	6003      	str	r3, [r0, #0]
 80091c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80091c8:	e88d 0018 	stmia.w	sp, {r3, r4}
 80091cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091d0:	b00f      	add	sp, #60	; 0x3c
 80091d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d6:	4620      	mov	r0, r4
 80091d8:	4629      	mov	r1, r5
 80091da:	f001 fdb8 	bl	800ad4e <finite>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d0f4      	beq.n	80091cc <pow+0xe4>
 80091e2:	4652      	mov	r2, sl
 80091e4:	465b      	mov	r3, fp
 80091e6:	4620      	mov	r0, r4
 80091e8:	4629      	mov	r1, r5
 80091ea:	f7f7 fbe3 	bl	80009b4 <__aeabi_dcmplt>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d0ec      	beq.n	80091cc <pow+0xe4>
 80091f2:	2301      	movs	r3, #1
 80091f4:	9304      	str	r3, [sp, #16]
 80091f6:	4b67      	ldr	r3, [pc, #412]	; (8009394 <pow+0x2ac>)
 80091f8:	960c      	str	r6, [sp, #48]	; 0x30
 80091fa:	9305      	str	r3, [sp, #20]
 80091fc:	f997 3000 	ldrsb.w	r3, [r7]
 8009200:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009204:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009208:	b913      	cbnz	r3, 8009210 <pow+0x128>
 800920a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800920e:	e7a7      	b.n	8009160 <pow+0x78>
 8009210:	2000      	movs	r0, #0
 8009212:	4962      	ldr	r1, [pc, #392]	; (800939c <pow+0x2b4>)
 8009214:	2b02      	cmp	r3, #2
 8009216:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800921a:	d1a1      	bne.n	8009160 <pow+0x78>
 800921c:	f002 f814 	bl	800b248 <__errno>
 8009220:	2321      	movs	r3, #33	; 0x21
 8009222:	6003      	str	r3, [r0, #0]
 8009224:	e7c8      	b.n	80091b8 <pow+0xd0>
 8009226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800922a:	f001 fd90 	bl	800ad4e <finite>
 800922e:	9002      	str	r0, [sp, #8]
 8009230:	2800      	cmp	r0, #0
 8009232:	d17f      	bne.n	8009334 <pow+0x24c>
 8009234:	4640      	mov	r0, r8
 8009236:	4649      	mov	r1, r9
 8009238:	f001 fd89 	bl	800ad4e <finite>
 800923c:	2800      	cmp	r0, #0
 800923e:	d079      	beq.n	8009334 <pow+0x24c>
 8009240:	4620      	mov	r0, r4
 8009242:	4629      	mov	r1, r5
 8009244:	f001 fd83 	bl	800ad4e <finite>
 8009248:	2800      	cmp	r0, #0
 800924a:	d073      	beq.n	8009334 <pow+0x24c>
 800924c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009250:	4619      	mov	r1, r3
 8009252:	4610      	mov	r0, r2
 8009254:	f7f7 fbd6 	bl	8000a04 <__aeabi_dcmpun>
 8009258:	f997 7000 	ldrsb.w	r7, [r7]
 800925c:	4b4d      	ldr	r3, [pc, #308]	; (8009394 <pow+0x2ac>)
 800925e:	b1a0      	cbz	r0, 800928a <pow+0x1a2>
 8009260:	2201      	movs	r2, #1
 8009262:	9305      	str	r3, [sp, #20]
 8009264:	9b02      	ldr	r3, [sp, #8]
 8009266:	9204      	str	r2, [sp, #16]
 8009268:	930c      	str	r3, [sp, #48]	; 0x30
 800926a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800926e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009272:	2f00      	cmp	r7, #0
 8009274:	d0c9      	beq.n	800920a <pow+0x122>
 8009276:	4652      	mov	r2, sl
 8009278:	465b      	mov	r3, fp
 800927a:	4650      	mov	r0, sl
 800927c:	4659      	mov	r1, fp
 800927e:	f7f7 fa51 	bl	8000724 <__aeabi_ddiv>
 8009282:	2f02      	cmp	r7, #2
 8009284:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009288:	e7c7      	b.n	800921a <pow+0x132>
 800928a:	2203      	movs	r2, #3
 800928c:	9305      	str	r3, [sp, #20]
 800928e:	9204      	str	r2, [sp, #16]
 8009290:	900c      	str	r0, [sp, #48]	; 0x30
 8009292:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009296:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800929a:	bb57      	cbnz	r7, 80092f2 <pow+0x20a>
 800929c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80092a0:	4b3f      	ldr	r3, [pc, #252]	; (80093a0 <pow+0x2b8>)
 80092a2:	4640      	mov	r0, r8
 80092a4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80092a8:	4649      	mov	r1, r9
 80092aa:	4652      	mov	r2, sl
 80092ac:	465b      	mov	r3, fp
 80092ae:	f7f7 fb81 	bl	80009b4 <__aeabi_dcmplt>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d064      	beq.n	8009380 <pow+0x298>
 80092b6:	2200      	movs	r2, #0
 80092b8:	4b3a      	ldr	r3, [pc, #232]	; (80093a4 <pow+0x2bc>)
 80092ba:	4620      	mov	r0, r4
 80092bc:	4629      	mov	r1, r5
 80092be:	f7f7 f907 	bl	80004d0 <__aeabi_dmul>
 80092c2:	4604      	mov	r4, r0
 80092c4:	460d      	mov	r5, r1
 80092c6:	f001 fd51 	bl	800ad6c <rint>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4620      	mov	r0, r4
 80092d0:	4629      	mov	r1, r5
 80092d2:	f7f7 fb65 	bl	80009a0 <__aeabi_dcmpeq>
 80092d6:	b920      	cbnz	r0, 80092e2 <pow+0x1fa>
 80092d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80092dc:	4b32      	ldr	r3, [pc, #200]	; (80093a8 <pow+0x2c0>)
 80092de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80092e2:	f996 3000 	ldrsb.w	r3, [r6]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d14a      	bne.n	8009380 <pow+0x298>
 80092ea:	f001 ffad 	bl	800b248 <__errno>
 80092ee:	2322      	movs	r3, #34	; 0x22
 80092f0:	e797      	b.n	8009222 <pow+0x13a>
 80092f2:	2200      	movs	r2, #0
 80092f4:	4b2d      	ldr	r3, [pc, #180]	; (80093ac <pow+0x2c4>)
 80092f6:	4640      	mov	r0, r8
 80092f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80092fc:	4649      	mov	r1, r9
 80092fe:	4652      	mov	r2, sl
 8009300:	465b      	mov	r3, fp
 8009302:	f7f7 fb57 	bl	80009b4 <__aeabi_dcmplt>
 8009306:	2800      	cmp	r0, #0
 8009308:	d0eb      	beq.n	80092e2 <pow+0x1fa>
 800930a:	2200      	movs	r2, #0
 800930c:	4b25      	ldr	r3, [pc, #148]	; (80093a4 <pow+0x2bc>)
 800930e:	4620      	mov	r0, r4
 8009310:	4629      	mov	r1, r5
 8009312:	f7f7 f8dd 	bl	80004d0 <__aeabi_dmul>
 8009316:	4604      	mov	r4, r0
 8009318:	460d      	mov	r5, r1
 800931a:	f001 fd27 	bl	800ad6c <rint>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4620      	mov	r0, r4
 8009324:	4629      	mov	r1, r5
 8009326:	f7f7 fb3b 	bl	80009a0 <__aeabi_dcmpeq>
 800932a:	2800      	cmp	r0, #0
 800932c:	d1d9      	bne.n	80092e2 <pow+0x1fa>
 800932e:	2200      	movs	r2, #0
 8009330:	4b1a      	ldr	r3, [pc, #104]	; (800939c <pow+0x2b4>)
 8009332:	e7d4      	b.n	80092de <pow+0x1f6>
 8009334:	2200      	movs	r2, #0
 8009336:	e9dd 0100 	ldrd	r0, r1, [sp]
 800933a:	2300      	movs	r3, #0
 800933c:	f7f7 fb30 	bl	80009a0 <__aeabi_dcmpeq>
 8009340:	2800      	cmp	r0, #0
 8009342:	f43f af43 	beq.w	80091cc <pow+0xe4>
 8009346:	4640      	mov	r0, r8
 8009348:	4649      	mov	r1, r9
 800934a:	f001 fd00 	bl	800ad4e <finite>
 800934e:	2800      	cmp	r0, #0
 8009350:	f43f af3c 	beq.w	80091cc <pow+0xe4>
 8009354:	4620      	mov	r0, r4
 8009356:	4629      	mov	r1, r5
 8009358:	f001 fcf9 	bl	800ad4e <finite>
 800935c:	2800      	cmp	r0, #0
 800935e:	f43f af35 	beq.w	80091cc <pow+0xe4>
 8009362:	2304      	movs	r3, #4
 8009364:	9304      	str	r3, [sp, #16]
 8009366:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <pow+0x2ac>)
 8009368:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800936c:	9305      	str	r3, [sp, #20]
 800936e:	2300      	movs	r3, #0
 8009370:	2400      	movs	r4, #0
 8009372:	930c      	str	r3, [sp, #48]	; 0x30
 8009374:	2300      	movs	r3, #0
 8009376:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800937a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800937e:	e7b0      	b.n	80092e2 <pow+0x1fa>
 8009380:	a804      	add	r0, sp, #16
 8009382:	f001 fcea 	bl	800ad5a <matherr>
 8009386:	2800      	cmp	r0, #0
 8009388:	f47f af16 	bne.w	80091b8 <pow+0xd0>
 800938c:	e7ad      	b.n	80092ea <pow+0x202>
 800938e:	bf00      	nop
 8009390:	20000478 	.word	0x20000478
 8009394:	0800bb38 	.word	0x0800bb38
 8009398:	3ff00000 	.word	0x3ff00000
 800939c:	fff00000 	.word	0xfff00000
 80093a0:	47efffff 	.word	0x47efffff
 80093a4:	3fe00000 	.word	0x3fe00000
 80093a8:	c7efffff 	.word	0xc7efffff
 80093ac:	7ff00000 	.word	0x7ff00000

080093b0 <asinf>:
 80093b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b2:	b08b      	sub	sp, #44	; 0x2c
 80093b4:	4604      	mov	r4, r0
 80093b6:	f000 ff55 	bl	800a264 <__ieee754_asinf>
 80093ba:	4e21      	ldr	r6, [pc, #132]	; (8009440 <asinf+0x90>)
 80093bc:	4605      	mov	r5, r0
 80093be:	f996 3000 	ldrsb.w	r3, [r6]
 80093c2:	3301      	adds	r3, #1
 80093c4:	d038      	beq.n	8009438 <asinf+0x88>
 80093c6:	4621      	mov	r1, r4
 80093c8:	4620      	mov	r0, r4
 80093ca:	f7f7 fe55 	bl	8001078 <__aeabi_fcmpun>
 80093ce:	4607      	mov	r7, r0
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d131      	bne.n	8009438 <asinf+0x88>
 80093d4:	4620      	mov	r0, r4
 80093d6:	f001 fed1 	bl	800b17c <fabsf>
 80093da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80093de:	f7f7 fe41 	bl	8001064 <__aeabi_fcmpgt>
 80093e2:	b348      	cbz	r0, 8009438 <asinf+0x88>
 80093e4:	2301      	movs	r3, #1
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	4b16      	ldr	r3, [pc, #88]	; (8009444 <asinf+0x94>)
 80093ea:	4620      	mov	r0, r4
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	9708      	str	r7, [sp, #32]
 80093f0:	f7f7 f81a 	bl	8000428 <__aeabi_f2d>
 80093f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093fc:	4812      	ldr	r0, [pc, #72]	; (8009448 <asinf+0x98>)
 80093fe:	f001 fcaf 	bl	800ad60 <nan>
 8009402:	f996 3000 	ldrsb.w	r3, [r6]
 8009406:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d104      	bne.n	8009418 <asinf+0x68>
 800940e:	f001 ff1b 	bl	800b248 <__errno>
 8009412:	2321      	movs	r3, #33	; 0x21
 8009414:	6003      	str	r3, [r0, #0]
 8009416:	e004      	b.n	8009422 <asinf+0x72>
 8009418:	4668      	mov	r0, sp
 800941a:	f001 fc9e 	bl	800ad5a <matherr>
 800941e:	2800      	cmp	r0, #0
 8009420:	d0f5      	beq.n	800940e <asinf+0x5e>
 8009422:	9b08      	ldr	r3, [sp, #32]
 8009424:	b11b      	cbz	r3, 800942e <asinf+0x7e>
 8009426:	f001 ff0f 	bl	800b248 <__errno>
 800942a:	9b08      	ldr	r3, [sp, #32]
 800942c:	6003      	str	r3, [r0, #0]
 800942e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009432:	f7f7 fafd 	bl	8000a30 <__aeabi_d2f>
 8009436:	4605      	mov	r5, r0
 8009438:	4628      	mov	r0, r5
 800943a:	b00b      	add	sp, #44	; 0x2c
 800943c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800943e:	bf00      	nop
 8009440:	20000478 	.word	0x20000478
 8009444:	0800bb3c 	.word	0x0800bb3c
 8009448:	0800ba1a 	.word	0x0800ba1a

0800944c <atan2f>:
 800944c:	f001 b84e 	b.w	800a4ec <__ieee754_atan2f>

08009450 <powf>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	b08b      	sub	sp, #44	; 0x2c
 8009456:	4605      	mov	r5, r0
 8009458:	460c      	mov	r4, r1
 800945a:	f001 f8d7 	bl	800a60c <__ieee754_powf>
 800945e:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8009724 <powf+0x2d4>
 8009462:	4606      	mov	r6, r0
 8009464:	f998 9000 	ldrsb.w	r9, [r8]
 8009468:	4647      	mov	r7, r8
 800946a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800946e:	d060      	beq.n	8009532 <powf+0xe2>
 8009470:	4621      	mov	r1, r4
 8009472:	4620      	mov	r0, r4
 8009474:	f7f7 fe00 	bl	8001078 <__aeabi_fcmpun>
 8009478:	4683      	mov	fp, r0
 800947a:	2800      	cmp	r0, #0
 800947c:	d159      	bne.n	8009532 <powf+0xe2>
 800947e:	4629      	mov	r1, r5
 8009480:	4628      	mov	r0, r5
 8009482:	f7f7 fdf9 	bl	8001078 <__aeabi_fcmpun>
 8009486:	2100      	movs	r1, #0
 8009488:	4682      	mov	sl, r0
 800948a:	b300      	cbz	r0, 80094ce <powf+0x7e>
 800948c:	4620      	mov	r0, r4
 800948e:	f7f7 fdc1 	bl	8001014 <__aeabi_fcmpeq>
 8009492:	2800      	cmp	r0, #0
 8009494:	d04d      	beq.n	8009532 <powf+0xe2>
 8009496:	2301      	movs	r3, #1
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	4b9c      	ldr	r3, [pc, #624]	; (800970c <powf+0x2bc>)
 800949c:	4628      	mov	r0, r5
 800949e:	9301      	str	r3, [sp, #4]
 80094a0:	f8cd b020 	str.w	fp, [sp, #32]
 80094a4:	f7f6 ffc0 	bl	8000428 <__aeabi_f2d>
 80094a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ac:	4620      	mov	r0, r4
 80094ae:	f7f6 ffbb 	bl	8000428 <__aeabi_f2d>
 80094b2:	2200      	movs	r2, #0
 80094b4:	4b96      	ldr	r3, [pc, #600]	; (8009710 <powf+0x2c0>)
 80094b6:	f1b9 0f02 	cmp.w	r9, #2
 80094ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094c2:	d031      	beq.n	8009528 <powf+0xd8>
 80094c4:	4668      	mov	r0, sp
 80094c6:	f001 fc48 	bl	800ad5a <matherr>
 80094ca:	bb38      	cbnz	r0, 800951c <powf+0xcc>
 80094cc:	e05d      	b.n	800958a <powf+0x13a>
 80094ce:	4628      	mov	r0, r5
 80094d0:	f7f7 fda0 	bl	8001014 <__aeabi_fcmpeq>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d05d      	beq.n	8009594 <powf+0x144>
 80094d8:	2100      	movs	r1, #0
 80094da:	4620      	mov	r0, r4
 80094dc:	f7f7 fd9a 	bl	8001014 <__aeabi_fcmpeq>
 80094e0:	4607      	mov	r7, r0
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d029      	beq.n	800953a <powf+0xea>
 80094e6:	2301      	movs	r3, #1
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	4b88      	ldr	r3, [pc, #544]	; (800970c <powf+0x2bc>)
 80094ec:	4628      	mov	r0, r5
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	f8cd a020 	str.w	sl, [sp, #32]
 80094f4:	f7f6 ff98 	bl	8000428 <__aeabi_f2d>
 80094f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094fc:	4620      	mov	r0, r4
 80094fe:	f7f6 ff93 	bl	8000428 <__aeabi_f2d>
 8009502:	2200      	movs	r2, #0
 8009504:	2300      	movs	r3, #0
 8009506:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800950a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800950e:	f1b9 0f00 	cmp.w	r9, #0
 8009512:	d0d7      	beq.n	80094c4 <powf+0x74>
 8009514:	2200      	movs	r2, #0
 8009516:	4b7e      	ldr	r3, [pc, #504]	; (8009710 <powf+0x2c0>)
 8009518:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800951c:	9b08      	ldr	r3, [sp, #32]
 800951e:	b11b      	cbz	r3, 8009528 <powf+0xd8>
 8009520:	f001 fe92 	bl	800b248 <__errno>
 8009524:	9b08      	ldr	r3, [sp, #32]
 8009526:	6003      	str	r3, [r0, #0]
 8009528:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800952c:	f7f7 fa80 	bl	8000a30 <__aeabi_d2f>
 8009530:	4606      	mov	r6, r0
 8009532:	4630      	mov	r0, r6
 8009534:	b00b      	add	sp, #44	; 0x2c
 8009536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953a:	4620      	mov	r0, r4
 800953c:	f001 fe21 	bl	800b182 <finitef>
 8009540:	2800      	cmp	r0, #0
 8009542:	d0f6      	beq.n	8009532 <powf+0xe2>
 8009544:	2100      	movs	r1, #0
 8009546:	4620      	mov	r0, r4
 8009548:	f7f7 fd6e 	bl	8001028 <__aeabi_fcmplt>
 800954c:	2800      	cmp	r0, #0
 800954e:	d0f0      	beq.n	8009532 <powf+0xe2>
 8009550:	2301      	movs	r3, #1
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4b6d      	ldr	r3, [pc, #436]	; (800970c <powf+0x2bc>)
 8009556:	4628      	mov	r0, r5
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	9708      	str	r7, [sp, #32]
 800955c:	f7f6 ff64 	bl	8000428 <__aeabi_f2d>
 8009560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009564:	4620      	mov	r0, r4
 8009566:	f7f6 ff5f 	bl	8000428 <__aeabi_f2d>
 800956a:	f998 3000 	ldrsb.w	r3, [r8]
 800956e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009572:	b923      	cbnz	r3, 800957e <powf+0x12e>
 8009574:	2200      	movs	r2, #0
 8009576:	2300      	movs	r3, #0
 8009578:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800957c:	e7a2      	b.n	80094c4 <powf+0x74>
 800957e:	2000      	movs	r0, #0
 8009580:	4964      	ldr	r1, [pc, #400]	; (8009714 <powf+0x2c4>)
 8009582:	2b02      	cmp	r3, #2
 8009584:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009588:	d19c      	bne.n	80094c4 <powf+0x74>
 800958a:	f001 fe5d 	bl	800b248 <__errno>
 800958e:	2321      	movs	r3, #33	; 0x21
 8009590:	6003      	str	r3, [r0, #0]
 8009592:	e7c3      	b.n	800951c <powf+0xcc>
 8009594:	4630      	mov	r0, r6
 8009596:	f001 fdf4 	bl	800b182 <finitef>
 800959a:	4680      	mov	r8, r0
 800959c:	2800      	cmp	r0, #0
 800959e:	f040 8087 	bne.w	80096b0 <powf+0x260>
 80095a2:	4628      	mov	r0, r5
 80095a4:	f001 fded 	bl	800b182 <finitef>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	f000 8081 	beq.w	80096b0 <powf+0x260>
 80095ae:	4620      	mov	r0, r4
 80095b0:	f001 fde7 	bl	800b182 <finitef>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d07b      	beq.n	80096b0 <powf+0x260>
 80095b8:	4631      	mov	r1, r6
 80095ba:	4630      	mov	r0, r6
 80095bc:	f7f7 fd5c 	bl	8001078 <__aeabi_fcmpun>
 80095c0:	f997 6000 	ldrsb.w	r6, [r7]
 80095c4:	4b51      	ldr	r3, [pc, #324]	; (800970c <powf+0x2bc>)
 80095c6:	b1d0      	cbz	r0, 80095fe <powf+0x1ae>
 80095c8:	2201      	movs	r2, #1
 80095ca:	4628      	mov	r0, r5
 80095cc:	e88d 000c 	stmia.w	sp, {r2, r3}
 80095d0:	f8cd 8020 	str.w	r8, [sp, #32]
 80095d4:	f7f6 ff28 	bl	8000428 <__aeabi_f2d>
 80095d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095dc:	4620      	mov	r0, r4
 80095de:	f7f6 ff23 	bl	8000428 <__aeabi_f2d>
 80095e2:	2200      	movs	r2, #0
 80095e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095e8:	2300      	movs	r3, #0
 80095ea:	2e00      	cmp	r6, #0
 80095ec:	d0c4      	beq.n	8009578 <powf+0x128>
 80095ee:	4610      	mov	r0, r2
 80095f0:	4619      	mov	r1, r3
 80095f2:	f7f7 f897 	bl	8000724 <__aeabi_ddiv>
 80095f6:	2e02      	cmp	r6, #2
 80095f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80095fc:	e7c4      	b.n	8009588 <powf+0x138>
 80095fe:	2203      	movs	r2, #3
 8009600:	9008      	str	r0, [sp, #32]
 8009602:	4628      	mov	r0, r5
 8009604:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009608:	f7f6 ff0e 	bl	8000428 <__aeabi_f2d>
 800960c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009610:	4620      	mov	r0, r4
 8009612:	f7f6 ff09 	bl	8000428 <__aeabi_f2d>
 8009616:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800961a:	bb4e      	cbnz	r6, 8009670 <powf+0x220>
 800961c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009620:	4b3d      	ldr	r3, [pc, #244]	; (8009718 <powf+0x2c8>)
 8009622:	2100      	movs	r1, #0
 8009624:	4628      	mov	r0, r5
 8009626:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800962a:	f7f7 fcfd 	bl	8001028 <__aeabi_fcmplt>
 800962e:	2800      	cmp	r0, #0
 8009630:	d064      	beq.n	80096fc <powf+0x2ac>
 8009632:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009636:	4620      	mov	r0, r4
 8009638:	f7f7 fb58 	bl	8000cec <__aeabi_fmul>
 800963c:	f7f6 fef4 	bl	8000428 <__aeabi_f2d>
 8009640:	4604      	mov	r4, r0
 8009642:	460d      	mov	r5, r1
 8009644:	f001 fb92 	bl	800ad6c <rint>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4620      	mov	r0, r4
 800964e:	4629      	mov	r1, r5
 8009650:	f7f7 f9a6 	bl	80009a0 <__aeabi_dcmpeq>
 8009654:	b920      	cbnz	r0, 8009660 <powf+0x210>
 8009656:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800965a:	4b30      	ldr	r3, [pc, #192]	; (800971c <powf+0x2cc>)
 800965c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009660:	f997 3000 	ldrsb.w	r3, [r7]
 8009664:	2b02      	cmp	r3, #2
 8009666:	d149      	bne.n	80096fc <powf+0x2ac>
 8009668:	f001 fdee 	bl	800b248 <__errno>
 800966c:	2322      	movs	r3, #34	; 0x22
 800966e:	e78f      	b.n	8009590 <powf+0x140>
 8009670:	2200      	movs	r2, #0
 8009672:	4b2b      	ldr	r3, [pc, #172]	; (8009720 <powf+0x2d0>)
 8009674:	2100      	movs	r1, #0
 8009676:	4628      	mov	r0, r5
 8009678:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800967c:	f7f7 fcd4 	bl	8001028 <__aeabi_fcmplt>
 8009680:	2800      	cmp	r0, #0
 8009682:	d0ed      	beq.n	8009660 <powf+0x210>
 8009684:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009688:	4620      	mov	r0, r4
 800968a:	f7f7 fb2f 	bl	8000cec <__aeabi_fmul>
 800968e:	f7f6 fecb 	bl	8000428 <__aeabi_f2d>
 8009692:	4604      	mov	r4, r0
 8009694:	460d      	mov	r5, r1
 8009696:	f001 fb69 	bl	800ad6c <rint>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4620      	mov	r0, r4
 80096a0:	4629      	mov	r1, r5
 80096a2:	f7f7 f97d 	bl	80009a0 <__aeabi_dcmpeq>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d1da      	bne.n	8009660 <powf+0x210>
 80096aa:	2200      	movs	r2, #0
 80096ac:	4b19      	ldr	r3, [pc, #100]	; (8009714 <powf+0x2c4>)
 80096ae:	e7d5      	b.n	800965c <powf+0x20c>
 80096b0:	2100      	movs	r1, #0
 80096b2:	4630      	mov	r0, r6
 80096b4:	f7f7 fcae 	bl	8001014 <__aeabi_fcmpeq>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	f43f af3a 	beq.w	8009532 <powf+0xe2>
 80096be:	4628      	mov	r0, r5
 80096c0:	f001 fd5f 	bl	800b182 <finitef>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	f43f af34 	beq.w	8009532 <powf+0xe2>
 80096ca:	4620      	mov	r0, r4
 80096cc:	f001 fd59 	bl	800b182 <finitef>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	f43f af2e 	beq.w	8009532 <powf+0xe2>
 80096d6:	2304      	movs	r3, #4
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	4b0c      	ldr	r3, [pc, #48]	; (800970c <powf+0x2bc>)
 80096dc:	4628      	mov	r0, r5
 80096de:	9301      	str	r3, [sp, #4]
 80096e0:	2300      	movs	r3, #0
 80096e2:	9308      	str	r3, [sp, #32]
 80096e4:	f7f6 fea0 	bl	8000428 <__aeabi_f2d>
 80096e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096ec:	4620      	mov	r0, r4
 80096ee:	f7f6 fe9b 	bl	8000428 <__aeabi_f2d>
 80096f2:	2200      	movs	r2, #0
 80096f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096f8:	2300      	movs	r3, #0
 80096fa:	e7af      	b.n	800965c <powf+0x20c>
 80096fc:	4668      	mov	r0, sp
 80096fe:	f001 fb2c 	bl	800ad5a <matherr>
 8009702:	2800      	cmp	r0, #0
 8009704:	f47f af0a 	bne.w	800951c <powf+0xcc>
 8009708:	e7ae      	b.n	8009668 <powf+0x218>
 800970a:	bf00      	nop
 800970c:	0800bb42 	.word	0x0800bb42
 8009710:	3ff00000 	.word	0x3ff00000
 8009714:	fff00000 	.word	0xfff00000
 8009718:	47efffff 	.word	0x47efffff
 800971c:	c7efffff 	.word	0xc7efffff
 8009720:	7ff00000 	.word	0x7ff00000
 8009724:	20000478 	.word	0x20000478

08009728 <__ieee754_pow>:
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	b093      	sub	sp, #76	; 0x4c
 800972e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009732:	9e03      	ldr	r6, [sp, #12]
 8009734:	9a02      	ldr	r2, [sp, #8]
 8009736:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800973a:	ea55 0302 	orrs.w	r3, r5, r2
 800973e:	4607      	mov	r7, r0
 8009740:	4688      	mov	r8, r1
 8009742:	4682      	mov	sl, r0
 8009744:	4689      	mov	r9, r1
 8009746:	f000 849e 	beq.w	800a086 <__ieee754_pow+0x95e>
 800974a:	4b77      	ldr	r3, [pc, #476]	; (8009928 <__ieee754_pow+0x200>)
 800974c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009750:	429c      	cmp	r4, r3
 8009752:	dc09      	bgt.n	8009768 <__ieee754_pow+0x40>
 8009754:	d103      	bne.n	800975e <__ieee754_pow+0x36>
 8009756:	b938      	cbnz	r0, 8009768 <__ieee754_pow+0x40>
 8009758:	42a5      	cmp	r5, r4
 800975a:	dc0d      	bgt.n	8009778 <__ieee754_pow+0x50>
 800975c:	e001      	b.n	8009762 <__ieee754_pow+0x3a>
 800975e:	429d      	cmp	r5, r3
 8009760:	dc02      	bgt.n	8009768 <__ieee754_pow+0x40>
 8009762:	429d      	cmp	r5, r3
 8009764:	d10e      	bne.n	8009784 <__ieee754_pow+0x5c>
 8009766:	b16a      	cbz	r2, 8009784 <__ieee754_pow+0x5c>
 8009768:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800976c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009770:	ea54 030a 	orrs.w	r3, r4, sl
 8009774:	f000 8487 	beq.w	800a086 <__ieee754_pow+0x95e>
 8009778:	486c      	ldr	r0, [pc, #432]	; (800992c <__ieee754_pow+0x204>)
 800977a:	b013      	add	sp, #76	; 0x4c
 800977c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009780:	f001 baee 	b.w	800ad60 <nan>
 8009784:	f1b9 0f00 	cmp.w	r9, #0
 8009788:	da4f      	bge.n	800982a <__ieee754_pow+0x102>
 800978a:	4b69      	ldr	r3, [pc, #420]	; (8009930 <__ieee754_pow+0x208>)
 800978c:	429d      	cmp	r5, r3
 800978e:	dc4a      	bgt.n	8009826 <__ieee754_pow+0xfe>
 8009790:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009794:	429d      	cmp	r5, r3
 8009796:	dd48      	ble.n	800982a <__ieee754_pow+0x102>
 8009798:	152b      	asrs	r3, r5, #20
 800979a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800979e:	2b14      	cmp	r3, #20
 80097a0:	dd24      	ble.n	80097ec <__ieee754_pow+0xc4>
 80097a2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80097a6:	fa22 f103 	lsr.w	r1, r2, r3
 80097aa:	fa01 f303 	lsl.w	r3, r1, r3
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d13b      	bne.n	800982a <__ieee754_pow+0x102>
 80097b2:	f001 0101 	and.w	r1, r1, #1
 80097b6:	f1c1 0302 	rsb	r3, r1, #2
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	2a00      	cmp	r2, #0
 80097be:	d156      	bne.n	800986e <__ieee754_pow+0x146>
 80097c0:	4b59      	ldr	r3, [pc, #356]	; (8009928 <__ieee754_pow+0x200>)
 80097c2:	429d      	cmp	r5, r3
 80097c4:	d122      	bne.n	800980c <__ieee754_pow+0xe4>
 80097c6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80097ca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80097ce:	ea53 030a 	orrs.w	r3, r3, sl
 80097d2:	f000 8458 	beq.w	800a086 <__ieee754_pow+0x95e>
 80097d6:	4b57      	ldr	r3, [pc, #348]	; (8009934 <__ieee754_pow+0x20c>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	dd28      	ble.n	800982e <__ieee754_pow+0x106>
 80097dc:	2e00      	cmp	r6, #0
 80097de:	f280 8456 	bge.w	800a08e <__ieee754_pow+0x966>
 80097e2:	2000      	movs	r0, #0
 80097e4:	2100      	movs	r1, #0
 80097e6:	b013      	add	sp, #76	; 0x4c
 80097e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ec:	2a00      	cmp	r2, #0
 80097ee:	d13c      	bne.n	800986a <__ieee754_pow+0x142>
 80097f0:	f1c3 0314 	rsb	r3, r3, #20
 80097f4:	fa45 f103 	asr.w	r1, r5, r3
 80097f8:	fa01 f303 	lsl.w	r3, r1, r3
 80097fc:	429d      	cmp	r5, r3
 80097fe:	f040 844e 	bne.w	800a09e <__ieee754_pow+0x976>
 8009802:	f001 0101 	and.w	r1, r1, #1
 8009806:	f1c1 0302 	rsb	r3, r1, #2
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	4b4a      	ldr	r3, [pc, #296]	; (8009938 <__ieee754_pow+0x210>)
 800980e:	429d      	cmp	r5, r3
 8009810:	d114      	bne.n	800983c <__ieee754_pow+0x114>
 8009812:	2e00      	cmp	r6, #0
 8009814:	f280 843f 	bge.w	800a096 <__ieee754_pow+0x96e>
 8009818:	463a      	mov	r2, r7
 800981a:	4643      	mov	r3, r8
 800981c:	2000      	movs	r0, #0
 800981e:	4946      	ldr	r1, [pc, #280]	; (8009938 <__ieee754_pow+0x210>)
 8009820:	f7f6 ff80 	bl	8000724 <__aeabi_ddiv>
 8009824:	e7df      	b.n	80097e6 <__ieee754_pow+0xbe>
 8009826:	2302      	movs	r3, #2
 8009828:	e7c7      	b.n	80097ba <__ieee754_pow+0x92>
 800982a:	2300      	movs	r3, #0
 800982c:	e7c5      	b.n	80097ba <__ieee754_pow+0x92>
 800982e:	2e00      	cmp	r6, #0
 8009830:	dad7      	bge.n	80097e2 <__ieee754_pow+0xba>
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	9802      	ldr	r0, [sp, #8]
 8009836:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800983a:	e7d4      	b.n	80097e6 <__ieee754_pow+0xbe>
 800983c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009840:	d106      	bne.n	8009850 <__ieee754_pow+0x128>
 8009842:	463a      	mov	r2, r7
 8009844:	4643      	mov	r3, r8
 8009846:	4638      	mov	r0, r7
 8009848:	4641      	mov	r1, r8
 800984a:	f7f6 fe41 	bl	80004d0 <__aeabi_dmul>
 800984e:	e7ca      	b.n	80097e6 <__ieee754_pow+0xbe>
 8009850:	4b3a      	ldr	r3, [pc, #232]	; (800993c <__ieee754_pow+0x214>)
 8009852:	429e      	cmp	r6, r3
 8009854:	d10b      	bne.n	800986e <__ieee754_pow+0x146>
 8009856:	f1b9 0f00 	cmp.w	r9, #0
 800985a:	db08      	blt.n	800986e <__ieee754_pow+0x146>
 800985c:	4638      	mov	r0, r7
 800985e:	4641      	mov	r1, r8
 8009860:	b013      	add	sp, #76	; 0x4c
 8009862:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009866:	f000 bc51 	b.w	800a10c <__ieee754_sqrt>
 800986a:	2300      	movs	r3, #0
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	4638      	mov	r0, r7
 8009870:	4641      	mov	r1, r8
 8009872:	f001 fa69 	bl	800ad48 <fabs>
 8009876:	f1ba 0f00 	cmp.w	sl, #0
 800987a:	d125      	bne.n	80098c8 <__ieee754_pow+0x1a0>
 800987c:	b124      	cbz	r4, 8009888 <__ieee754_pow+0x160>
 800987e:	4b2e      	ldr	r3, [pc, #184]	; (8009938 <__ieee754_pow+0x210>)
 8009880:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8009884:	429a      	cmp	r2, r3
 8009886:	d11f      	bne.n	80098c8 <__ieee754_pow+0x1a0>
 8009888:	2e00      	cmp	r6, #0
 800988a:	da05      	bge.n	8009898 <__ieee754_pow+0x170>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	2000      	movs	r0, #0
 8009892:	4929      	ldr	r1, [pc, #164]	; (8009938 <__ieee754_pow+0x210>)
 8009894:	f7f6 ff46 	bl	8000724 <__aeabi_ddiv>
 8009898:	f1b9 0f00 	cmp.w	r9, #0
 800989c:	daa3      	bge.n	80097e6 <__ieee754_pow+0xbe>
 800989e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80098a2:	9b00      	ldr	r3, [sp, #0]
 80098a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80098a8:	4323      	orrs	r3, r4
 80098aa:	d106      	bne.n	80098ba <__ieee754_pow+0x192>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	f7f6 fc5a 	bl	8000168 <__aeabi_dsub>
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	e7b2      	b.n	8009820 <__ieee754_pow+0xf8>
 80098ba:	9b00      	ldr	r3, [sp, #0]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d192      	bne.n	80097e6 <__ieee754_pow+0xbe>
 80098c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098c4:	4619      	mov	r1, r3
 80098c6:	e78e      	b.n	80097e6 <__ieee754_pow+0xbe>
 80098c8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80098cc:	f109 33ff 	add.w	r3, r9, #4294967295
 80098d0:	930c      	str	r3, [sp, #48]	; 0x30
 80098d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098d4:	9b00      	ldr	r3, [sp, #0]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	d104      	bne.n	80098e4 <__ieee754_pow+0x1bc>
 80098da:	463a      	mov	r2, r7
 80098dc:	4643      	mov	r3, r8
 80098de:	4638      	mov	r0, r7
 80098e0:	4641      	mov	r1, r8
 80098e2:	e7e5      	b.n	80098b0 <__ieee754_pow+0x188>
 80098e4:	4b16      	ldr	r3, [pc, #88]	; (8009940 <__ieee754_pow+0x218>)
 80098e6:	429d      	cmp	r5, r3
 80098e8:	f340 80fc 	ble.w	8009ae4 <__ieee754_pow+0x3bc>
 80098ec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80098f0:	429d      	cmp	r5, r3
 80098f2:	dd0b      	ble.n	800990c <__ieee754_pow+0x1e4>
 80098f4:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <__ieee754_pow+0x20c>)
 80098f6:	429c      	cmp	r4, r3
 80098f8:	dc0e      	bgt.n	8009918 <__ieee754_pow+0x1f0>
 80098fa:	2e00      	cmp	r6, #0
 80098fc:	f6bf af71 	bge.w	80097e2 <__ieee754_pow+0xba>
 8009900:	a307      	add	r3, pc, #28	; (adr r3, 8009920 <__ieee754_pow+0x1f8>)
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	4610      	mov	r0, r2
 8009908:	4619      	mov	r1, r3
 800990a:	e79e      	b.n	800984a <__ieee754_pow+0x122>
 800990c:	4b0d      	ldr	r3, [pc, #52]	; (8009944 <__ieee754_pow+0x21c>)
 800990e:	429c      	cmp	r4, r3
 8009910:	ddf3      	ble.n	80098fa <__ieee754_pow+0x1d2>
 8009912:	4b09      	ldr	r3, [pc, #36]	; (8009938 <__ieee754_pow+0x210>)
 8009914:	429c      	cmp	r4, r3
 8009916:	dd17      	ble.n	8009948 <__ieee754_pow+0x220>
 8009918:	2e00      	cmp	r6, #0
 800991a:	dcf1      	bgt.n	8009900 <__ieee754_pow+0x1d8>
 800991c:	e761      	b.n	80097e2 <__ieee754_pow+0xba>
 800991e:	bf00      	nop
 8009920:	8800759c 	.word	0x8800759c
 8009924:	7e37e43c 	.word	0x7e37e43c
 8009928:	7ff00000 	.word	0x7ff00000
 800992c:	0800ba1a 	.word	0x0800ba1a
 8009930:	433fffff 	.word	0x433fffff
 8009934:	3fefffff 	.word	0x3fefffff
 8009938:	3ff00000 	.word	0x3ff00000
 800993c:	3fe00000 	.word	0x3fe00000
 8009940:	41e00000 	.word	0x41e00000
 8009944:	3feffffe 	.word	0x3feffffe
 8009948:	2200      	movs	r2, #0
 800994a:	4b61      	ldr	r3, [pc, #388]	; (8009ad0 <__ieee754_pow+0x3a8>)
 800994c:	f7f6 fc0c 	bl	8000168 <__aeabi_dsub>
 8009950:	a355      	add	r3, pc, #340	; (adr r3, 8009aa8 <__ieee754_pow+0x380>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	4604      	mov	r4, r0
 8009958:	460d      	mov	r5, r1
 800995a:	f7f6 fdb9 	bl	80004d0 <__aeabi_dmul>
 800995e:	a354      	add	r3, pc, #336	; (adr r3, 8009ab0 <__ieee754_pow+0x388>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	4606      	mov	r6, r0
 8009966:	460f      	mov	r7, r1
 8009968:	4620      	mov	r0, r4
 800996a:	4629      	mov	r1, r5
 800996c:	f7f6 fdb0 	bl	80004d0 <__aeabi_dmul>
 8009970:	2200      	movs	r2, #0
 8009972:	4682      	mov	sl, r0
 8009974:	468b      	mov	fp, r1
 8009976:	4b57      	ldr	r3, [pc, #348]	; (8009ad4 <__ieee754_pow+0x3ac>)
 8009978:	4620      	mov	r0, r4
 800997a:	4629      	mov	r1, r5
 800997c:	f7f6 fda8 	bl	80004d0 <__aeabi_dmul>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	a14c      	add	r1, pc, #304	; (adr r1, 8009ab8 <__ieee754_pow+0x390>)
 8009986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800998a:	f7f6 fbed 	bl	8000168 <__aeabi_dsub>
 800998e:	4622      	mov	r2, r4
 8009990:	462b      	mov	r3, r5
 8009992:	f7f6 fd9d 	bl	80004d0 <__aeabi_dmul>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	2000      	movs	r0, #0
 800999c:	494e      	ldr	r1, [pc, #312]	; (8009ad8 <__ieee754_pow+0x3b0>)
 800999e:	f7f6 fbe3 	bl	8000168 <__aeabi_dsub>
 80099a2:	4622      	mov	r2, r4
 80099a4:	462b      	mov	r3, r5
 80099a6:	4680      	mov	r8, r0
 80099a8:	4689      	mov	r9, r1
 80099aa:	4620      	mov	r0, r4
 80099ac:	4629      	mov	r1, r5
 80099ae:	f7f6 fd8f 	bl	80004d0 <__aeabi_dmul>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	4640      	mov	r0, r8
 80099b8:	4649      	mov	r1, r9
 80099ba:	f7f6 fd89 	bl	80004d0 <__aeabi_dmul>
 80099be:	a340      	add	r3, pc, #256	; (adr r3, 8009ac0 <__ieee754_pow+0x398>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f7f6 fd84 	bl	80004d0 <__aeabi_dmul>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4650      	mov	r0, sl
 80099ce:	4659      	mov	r1, fp
 80099d0:	f7f6 fbca 	bl	8000168 <__aeabi_dsub>
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4604      	mov	r4, r0
 80099da:	460d      	mov	r5, r1
 80099dc:	4630      	mov	r0, r6
 80099de:	4639      	mov	r1, r7
 80099e0:	f7f6 fbc4 	bl	800016c <__adddf3>
 80099e4:	2000      	movs	r0, #0
 80099e6:	468b      	mov	fp, r1
 80099e8:	4682      	mov	sl, r0
 80099ea:	4632      	mov	r2, r6
 80099ec:	463b      	mov	r3, r7
 80099ee:	f7f6 fbbb 	bl	8000168 <__aeabi_dsub>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4620      	mov	r0, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7f6 fbb5 	bl	8000168 <__aeabi_dsub>
 80099fe:	9b00      	ldr	r3, [sp, #0]
 8009a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a02:	3b01      	subs	r3, #1
 8009a04:	4313      	orrs	r3, r2
 8009a06:	f04f 0300 	mov.w	r3, #0
 8009a0a:	bf0c      	ite	eq
 8009a0c:	4c33      	ldreq	r4, [pc, #204]	; (8009adc <__ieee754_pow+0x3b4>)
 8009a0e:	4c30      	ldrne	r4, [pc, #192]	; (8009ad0 <__ieee754_pow+0x3a8>)
 8009a10:	4606      	mov	r6, r0
 8009a12:	e88d 0018 	stmia.w	sp, {r3, r4}
 8009a16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a1a:	2400      	movs	r4, #0
 8009a1c:	460f      	mov	r7, r1
 8009a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a22:	4622      	mov	r2, r4
 8009a24:	462b      	mov	r3, r5
 8009a26:	f7f6 fb9f 	bl	8000168 <__aeabi_dsub>
 8009a2a:	4652      	mov	r2, sl
 8009a2c:	465b      	mov	r3, fp
 8009a2e:	f7f6 fd4f 	bl	80004d0 <__aeabi_dmul>
 8009a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a36:	4680      	mov	r8, r0
 8009a38:	4689      	mov	r9, r1
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	f7f6 fd47 	bl	80004d0 <__aeabi_dmul>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4640      	mov	r0, r8
 8009a48:	4649      	mov	r1, r9
 8009a4a:	f7f6 fb8f 	bl	800016c <__adddf3>
 8009a4e:	4622      	mov	r2, r4
 8009a50:	462b      	mov	r3, r5
 8009a52:	4680      	mov	r8, r0
 8009a54:	4689      	mov	r9, r1
 8009a56:	4650      	mov	r0, sl
 8009a58:	4659      	mov	r1, fp
 8009a5a:	f7f6 fd39 	bl	80004d0 <__aeabi_dmul>
 8009a5e:	4604      	mov	r4, r0
 8009a60:	460d      	mov	r5, r1
 8009a62:	460b      	mov	r3, r1
 8009a64:	4602      	mov	r2, r0
 8009a66:	4649      	mov	r1, r9
 8009a68:	4640      	mov	r0, r8
 8009a6a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009a6e:	f7f6 fb7d 	bl	800016c <__adddf3>
 8009a72:	4b1b      	ldr	r3, [pc, #108]	; (8009ae0 <__ieee754_pow+0x3b8>)
 8009a74:	4682      	mov	sl, r0
 8009a76:	4299      	cmp	r1, r3
 8009a78:	460f      	mov	r7, r1
 8009a7a:	460e      	mov	r6, r1
 8009a7c:	f340 82da 	ble.w	800a034 <__ieee754_pow+0x90c>
 8009a80:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009a84:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009a88:	4303      	orrs	r3, r0
 8009a8a:	f000 81d5 	beq.w	8009e38 <__ieee754_pow+0x710>
 8009a8e:	a30e      	add	r3, pc, #56	; (adr r3, 8009ac8 <__ieee754_pow+0x3a0>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a98:	f7f6 fd1a 	bl	80004d0 <__aeabi_dmul>
 8009a9c:	a30a      	add	r3, pc, #40	; (adr r3, 8009ac8 <__ieee754_pow+0x3a0>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	e6d2      	b.n	800984a <__ieee754_pow+0x122>
 8009aa4:	f3af 8000 	nop.w
 8009aa8:	60000000 	.word	0x60000000
 8009aac:	3ff71547 	.word	0x3ff71547
 8009ab0:	f85ddf44 	.word	0xf85ddf44
 8009ab4:	3e54ae0b 	.word	0x3e54ae0b
 8009ab8:	55555555 	.word	0x55555555
 8009abc:	3fd55555 	.word	0x3fd55555
 8009ac0:	652b82fe 	.word	0x652b82fe
 8009ac4:	3ff71547 	.word	0x3ff71547
 8009ac8:	8800759c 	.word	0x8800759c
 8009acc:	7e37e43c 	.word	0x7e37e43c
 8009ad0:	3ff00000 	.word	0x3ff00000
 8009ad4:	3fd00000 	.word	0x3fd00000
 8009ad8:	3fe00000 	.word	0x3fe00000
 8009adc:	bff00000 	.word	0xbff00000
 8009ae0:	408fffff 	.word	0x408fffff
 8009ae4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009ae8:	f04f 0200 	mov.w	r2, #0
 8009aec:	da05      	bge.n	8009afa <__ieee754_pow+0x3d2>
 8009aee:	4bca      	ldr	r3, [pc, #808]	; (8009e18 <__ieee754_pow+0x6f0>)
 8009af0:	f7f6 fcee 	bl	80004d0 <__aeabi_dmul>
 8009af4:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009af8:	460c      	mov	r4, r1
 8009afa:	1523      	asrs	r3, r4, #20
 8009afc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b00:	4413      	add	r3, r2
 8009b02:	9307      	str	r3, [sp, #28]
 8009b04:	4bc5      	ldr	r3, [pc, #788]	; (8009e1c <__ieee754_pow+0x6f4>)
 8009b06:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009b0a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009b0e:	429c      	cmp	r4, r3
 8009b10:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009b14:	dd08      	ble.n	8009b28 <__ieee754_pow+0x400>
 8009b16:	4bc2      	ldr	r3, [pc, #776]	; (8009e20 <__ieee754_pow+0x6f8>)
 8009b18:	429c      	cmp	r4, r3
 8009b1a:	f340 8154 	ble.w	8009dc6 <__ieee754_pow+0x69e>
 8009b1e:	9b07      	ldr	r3, [sp, #28]
 8009b20:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009b24:	3301      	adds	r3, #1
 8009b26:	9307      	str	r3, [sp, #28]
 8009b28:	2600      	movs	r6, #0
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	00f3      	lsls	r3, r6, #3
 8009b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b30:	4bbc      	ldr	r3, [pc, #752]	; (8009e24 <__ieee754_pow+0x6fc>)
 8009b32:	00f2      	lsls	r2, r6, #3
 8009b34:	4413      	add	r3, r2
 8009b36:	cb18      	ldmia	r3, {r3, r4}
 8009b38:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4623      	mov	r3, r4
 8009b40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b44:	f7f6 fb10 	bl	8000168 <__aeabi_dsub>
 8009b48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009b50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b54:	f7f6 fb0a 	bl	800016c <__adddf3>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	49b2      	ldr	r1, [pc, #712]	; (8009e28 <__ieee754_pow+0x700>)
 8009b60:	f7f6 fde0 	bl	8000724 <__aeabi_ddiv>
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009b70:	f7f6 fcae 	bl	80004d0 <__aeabi_dmul>
 8009b74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b78:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009b7c:	f04f 0a00 	mov.w	sl, #0
 8009b80:	2200      	movs	r2, #0
 8009b82:	106d      	asrs	r5, r5, #1
 8009b84:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009b88:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009b8c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009b90:	4659      	mov	r1, fp
 8009b92:	4650      	mov	r0, sl
 8009b94:	4614      	mov	r4, r2
 8009b96:	461d      	mov	r5, r3
 8009b98:	f7f6 fc9a 	bl	80004d0 <__aeabi_dmul>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009ba4:	f7f6 fae0 	bl	8000168 <__aeabi_dsub>
 8009ba8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009bac:	4606      	mov	r6, r0
 8009bae:	460f      	mov	r7, r1
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	f7f6 fad8 	bl	8000168 <__aeabi_dsub>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bc0:	f7f6 fad2 	bl	8000168 <__aeabi_dsub>
 8009bc4:	465b      	mov	r3, fp
 8009bc6:	4652      	mov	r2, sl
 8009bc8:	f7f6 fc82 	bl	80004d0 <__aeabi_dmul>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	f7f6 fac8 	bl	8000168 <__aeabi_dsub>
 8009bd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009bdc:	f7f6 fc78 	bl	80004d0 <__aeabi_dmul>
 8009be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009be4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009be8:	4610      	mov	r0, r2
 8009bea:	4619      	mov	r1, r3
 8009bec:	f7f6 fc70 	bl	80004d0 <__aeabi_dmul>
 8009bf0:	a377      	add	r3, pc, #476	; (adr r3, 8009dd0 <__ieee754_pow+0x6a8>)
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	460d      	mov	r5, r1
 8009bfa:	f7f6 fc69 	bl	80004d0 <__aeabi_dmul>
 8009bfe:	a376      	add	r3, pc, #472	; (adr r3, 8009dd8 <__ieee754_pow+0x6b0>)
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f7f6 fab2 	bl	800016c <__adddf3>
 8009c08:	4622      	mov	r2, r4
 8009c0a:	462b      	mov	r3, r5
 8009c0c:	f7f6 fc60 	bl	80004d0 <__aeabi_dmul>
 8009c10:	a373      	add	r3, pc, #460	; (adr r3, 8009de0 <__ieee754_pow+0x6b8>)
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	f7f6 faa9 	bl	800016c <__adddf3>
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	f7f6 fc57 	bl	80004d0 <__aeabi_dmul>
 8009c22:	a371      	add	r3, pc, #452	; (adr r3, 8009de8 <__ieee754_pow+0x6c0>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	f7f6 faa0 	bl	800016c <__adddf3>
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	462b      	mov	r3, r5
 8009c30:	f7f6 fc4e 	bl	80004d0 <__aeabi_dmul>
 8009c34:	a36e      	add	r3, pc, #440	; (adr r3, 8009df0 <__ieee754_pow+0x6c8>)
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	f7f6 fa97 	bl	800016c <__adddf3>
 8009c3e:	4622      	mov	r2, r4
 8009c40:	462b      	mov	r3, r5
 8009c42:	f7f6 fc45 	bl	80004d0 <__aeabi_dmul>
 8009c46:	a36c      	add	r3, pc, #432	; (adr r3, 8009df8 <__ieee754_pow+0x6d0>)
 8009c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4c:	f7f6 fa8e 	bl	800016c <__adddf3>
 8009c50:	4622      	mov	r2, r4
 8009c52:	4606      	mov	r6, r0
 8009c54:	460f      	mov	r7, r1
 8009c56:	462b      	mov	r3, r5
 8009c58:	4620      	mov	r0, r4
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	f7f6 fc38 	bl	80004d0 <__aeabi_dmul>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	4630      	mov	r0, r6
 8009c66:	4639      	mov	r1, r7
 8009c68:	f7f6 fc32 	bl	80004d0 <__aeabi_dmul>
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	460d      	mov	r5, r1
 8009c70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c74:	465b      	mov	r3, fp
 8009c76:	4652      	mov	r2, sl
 8009c78:	f7f6 fa78 	bl	800016c <__adddf3>
 8009c7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c80:	f7f6 fc26 	bl	80004d0 <__aeabi_dmul>
 8009c84:	4622      	mov	r2, r4
 8009c86:	462b      	mov	r3, r5
 8009c88:	f7f6 fa70 	bl	800016c <__adddf3>
 8009c8c:	465b      	mov	r3, fp
 8009c8e:	4606      	mov	r6, r0
 8009c90:	460f      	mov	r7, r1
 8009c92:	4652      	mov	r2, sl
 8009c94:	4659      	mov	r1, fp
 8009c96:	4650      	mov	r0, sl
 8009c98:	f7f6 fc1a 	bl	80004d0 <__aeabi_dmul>
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	4b63      	ldr	r3, [pc, #396]	; (8009e2c <__ieee754_pow+0x704>)
 8009ca0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ca4:	f7f6 fa62 	bl	800016c <__adddf3>
 8009ca8:	4632      	mov	r2, r6
 8009caa:	463b      	mov	r3, r7
 8009cac:	f7f6 fa5e 	bl	800016c <__adddf3>
 8009cb0:	4650      	mov	r0, sl
 8009cb2:	460d      	mov	r5, r1
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4650      	mov	r0, sl
 8009cba:	4659      	mov	r1, fp
 8009cbc:	f7f6 fc08 	bl	80004d0 <__aeabi_dmul>
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4680      	mov	r8, r0
 8009cc4:	4689      	mov	r9, r1
 8009cc6:	4b59      	ldr	r3, [pc, #356]	; (8009e2c <__ieee754_pow+0x704>)
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4650      	mov	r0, sl
 8009ccc:	f7f6 fa4c 	bl	8000168 <__aeabi_dsub>
 8009cd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cd4:	f7f6 fa48 	bl	8000168 <__aeabi_dsub>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4630      	mov	r0, r6
 8009cde:	4639      	mov	r1, r7
 8009ce0:	f7f6 fa42 	bl	8000168 <__aeabi_dsub>
 8009ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ce8:	f7f6 fbf2 	bl	80004d0 <__aeabi_dmul>
 8009cec:	462b      	mov	r3, r5
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460f      	mov	r7, r1
 8009cf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cf6:	4652      	mov	r2, sl
 8009cf8:	f7f6 fbea 	bl	80004d0 <__aeabi_dmul>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	f7f6 fa32 	bl	800016c <__adddf3>
 8009d08:	4606      	mov	r6, r0
 8009d0a:	460f      	mov	r7, r1
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4640      	mov	r0, r8
 8009d12:	4649      	mov	r1, r9
 8009d14:	f7f6 fa2a 	bl	800016c <__adddf3>
 8009d18:	a339      	add	r3, pc, #228	; (adr r3, 8009e00 <__ieee754_pow+0x6d8>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	4650      	mov	r0, sl
 8009d20:	460d      	mov	r5, r1
 8009d22:	f7f6 fbd5 	bl	80004d0 <__aeabi_dmul>
 8009d26:	4642      	mov	r2, r8
 8009d28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d2c:	464b      	mov	r3, r9
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4650      	mov	r0, sl
 8009d32:	f7f6 fa19 	bl	8000168 <__aeabi_dsub>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	4639      	mov	r1, r7
 8009d3e:	f7f6 fa13 	bl	8000168 <__aeabi_dsub>
 8009d42:	a331      	add	r3, pc, #196	; (adr r3, 8009e08 <__ieee754_pow+0x6e0>)
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	f7f6 fbc2 	bl	80004d0 <__aeabi_dmul>
 8009d4c:	a330      	add	r3, pc, #192	; (adr r3, 8009e10 <__ieee754_pow+0x6e8>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	4650      	mov	r0, sl
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fbb9 	bl	80004d0 <__aeabi_dmul>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	4630      	mov	r0, r6
 8009d64:	4639      	mov	r1, r7
 8009d66:	f7f6 fa01 	bl	800016c <__adddf3>
 8009d6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d6c:	4b30      	ldr	r3, [pc, #192]	; (8009e30 <__ieee754_pow+0x708>)
 8009d6e:	4413      	add	r3, r2
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 f9fa 	bl	800016c <__adddf3>
 8009d78:	4604      	mov	r4, r0
 8009d7a:	9807      	ldr	r0, [sp, #28]
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	f7f6 fb41 	bl	8000404 <__aeabi_i2d>
 8009d82:	4606      	mov	r6, r0
 8009d84:	460f      	mov	r7, r1
 8009d86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d88:	4b2a      	ldr	r3, [pc, #168]	; (8009e34 <__ieee754_pow+0x70c>)
 8009d8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d8e:	4413      	add	r3, r2
 8009d90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d94:	4622      	mov	r2, r4
 8009d96:	462b      	mov	r3, r5
 8009d98:	f7f6 f9e8 	bl	800016c <__adddf3>
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	464b      	mov	r3, r9
 8009da0:	f7f6 f9e4 	bl	800016c <__adddf3>
 8009da4:	4632      	mov	r2, r6
 8009da6:	463b      	mov	r3, r7
 8009da8:	f7f6 f9e0 	bl	800016c <__adddf3>
 8009dac:	4632      	mov	r2, r6
 8009dae:	463b      	mov	r3, r7
 8009db0:	4650      	mov	r0, sl
 8009db2:	468b      	mov	fp, r1
 8009db4:	f7f6 f9d8 	bl	8000168 <__aeabi_dsub>
 8009db8:	4642      	mov	r2, r8
 8009dba:	464b      	mov	r3, r9
 8009dbc:	f7f6 f9d4 	bl	8000168 <__aeabi_dsub>
 8009dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dc4:	e613      	b.n	80099ee <__ieee754_pow+0x2c6>
 8009dc6:	2601      	movs	r6, #1
 8009dc8:	e6af      	b.n	8009b2a <__ieee754_pow+0x402>
 8009dca:	bf00      	nop
 8009dcc:	f3af 8000 	nop.w
 8009dd0:	4a454eef 	.word	0x4a454eef
 8009dd4:	3fca7e28 	.word	0x3fca7e28
 8009dd8:	93c9db65 	.word	0x93c9db65
 8009ddc:	3fcd864a 	.word	0x3fcd864a
 8009de0:	a91d4101 	.word	0xa91d4101
 8009de4:	3fd17460 	.word	0x3fd17460
 8009de8:	518f264d 	.word	0x518f264d
 8009dec:	3fd55555 	.word	0x3fd55555
 8009df0:	db6fabff 	.word	0xdb6fabff
 8009df4:	3fdb6db6 	.word	0x3fdb6db6
 8009df8:	33333303 	.word	0x33333303
 8009dfc:	3fe33333 	.word	0x3fe33333
 8009e00:	e0000000 	.word	0xe0000000
 8009e04:	3feec709 	.word	0x3feec709
 8009e08:	dc3a03fd 	.word	0xdc3a03fd
 8009e0c:	3feec709 	.word	0x3feec709
 8009e10:	145b01f5 	.word	0x145b01f5
 8009e14:	be3e2fe0 	.word	0xbe3e2fe0
 8009e18:	43400000 	.word	0x43400000
 8009e1c:	0003988e 	.word	0x0003988e
 8009e20:	000bb679 	.word	0x000bb679
 8009e24:	0800bb48 	.word	0x0800bb48
 8009e28:	3ff00000 	.word	0x3ff00000
 8009e2c:	40080000 	.word	0x40080000
 8009e30:	0800bb68 	.word	0x0800bb68
 8009e34:	0800bb58 	.word	0x0800bb58
 8009e38:	a39b      	add	r3, pc, #620	; (adr r3, 800a0a8 <__ieee754_pow+0x980>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	4640      	mov	r0, r8
 8009e40:	4649      	mov	r1, r9
 8009e42:	f7f6 f993 	bl	800016c <__adddf3>
 8009e46:	4622      	mov	r2, r4
 8009e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e4c:	462b      	mov	r3, r5
 8009e4e:	4650      	mov	r0, sl
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7f6 f989 	bl	8000168 <__aeabi_dsub>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e5e:	f7f6 fdc7 	bl	80009f0 <__aeabi_dcmpgt>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f47f ae13 	bne.w	8009a8e <__ieee754_pow+0x366>
 8009e68:	4aa3      	ldr	r2, [pc, #652]	; (800a0f8 <__ieee754_pow+0x9d0>)
 8009e6a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	f340 8104 	ble.w	800a07c <__ieee754_pow+0x954>
 8009e74:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009e78:	2000      	movs	r0, #0
 8009e7a:	151b      	asrs	r3, r3, #20
 8009e7c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009e80:	fa4a f303 	asr.w	r3, sl, r3
 8009e84:	4433      	add	r3, r6
 8009e86:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009e8a:	4f9c      	ldr	r7, [pc, #624]	; (800a0fc <__ieee754_pow+0x9d4>)
 8009e8c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009e90:	4117      	asrs	r7, r2
 8009e92:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009e96:	ea23 0107 	bic.w	r1, r3, r7
 8009e9a:	f1c2 0214 	rsb	r2, r2, #20
 8009e9e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009ea2:	fa4a fa02 	asr.w	sl, sl, r2
 8009ea6:	2e00      	cmp	r6, #0
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	bfb8      	it	lt
 8009eb2:	f1ca 0a00 	rsblt	sl, sl, #0
 8009eb6:	f7f6 f957 	bl	8000168 <__aeabi_dsub>
 8009eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ec2:	4642      	mov	r2, r8
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	f7f6 f951 	bl	800016c <__adddf3>
 8009eca:	a379      	add	r3, pc, #484	; (adr r3, 800a0b0 <__ieee754_pow+0x988>)
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	460d      	mov	r5, r1
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	f7f6 fafb 	bl	80004d0 <__aeabi_dmul>
 8009eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ede:	4606      	mov	r6, r0
 8009ee0:	460f      	mov	r7, r1
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	f7f6 f93f 	bl	8000168 <__aeabi_dsub>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4640      	mov	r0, r8
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	f7f6 f939 	bl	8000168 <__aeabi_dsub>
 8009ef6:	a370      	add	r3, pc, #448	; (adr r3, 800a0b8 <__ieee754_pow+0x990>)
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	f7f6 fae8 	bl	80004d0 <__aeabi_dmul>
 8009f00:	a36f      	add	r3, pc, #444	; (adr r3, 800a0c0 <__ieee754_pow+0x998>)
 8009f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f06:	4680      	mov	r8, r0
 8009f08:	4689      	mov	r9, r1
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	f7f6 fadf 	bl	80004d0 <__aeabi_dmul>
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	4640      	mov	r0, r8
 8009f18:	4649      	mov	r1, r9
 8009f1a:	f7f6 f927 	bl	800016c <__adddf3>
 8009f1e:	4604      	mov	r4, r0
 8009f20:	460d      	mov	r5, r1
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4630      	mov	r0, r6
 8009f28:	4639      	mov	r1, r7
 8009f2a:	f7f6 f91f 	bl	800016c <__adddf3>
 8009f2e:	4632      	mov	r2, r6
 8009f30:	463b      	mov	r3, r7
 8009f32:	4680      	mov	r8, r0
 8009f34:	4689      	mov	r9, r1
 8009f36:	f7f6 f917 	bl	8000168 <__aeabi_dsub>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 f911 	bl	8000168 <__aeabi_dsub>
 8009f46:	4642      	mov	r2, r8
 8009f48:	4606      	mov	r6, r0
 8009f4a:	460f      	mov	r7, r1
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	4640      	mov	r0, r8
 8009f50:	4649      	mov	r1, r9
 8009f52:	f7f6 fabd 	bl	80004d0 <__aeabi_dmul>
 8009f56:	a35c      	add	r3, pc, #368	; (adr r3, 800a0c8 <__ieee754_pow+0x9a0>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	460d      	mov	r5, r1
 8009f60:	f7f6 fab6 	bl	80004d0 <__aeabi_dmul>
 8009f64:	a35a      	add	r3, pc, #360	; (adr r3, 800a0d0 <__ieee754_pow+0x9a8>)
 8009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6a:	f7f6 f8fd 	bl	8000168 <__aeabi_dsub>
 8009f6e:	4622      	mov	r2, r4
 8009f70:	462b      	mov	r3, r5
 8009f72:	f7f6 faad 	bl	80004d0 <__aeabi_dmul>
 8009f76:	a358      	add	r3, pc, #352	; (adr r3, 800a0d8 <__ieee754_pow+0x9b0>)
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	f7f6 f8f6 	bl	800016c <__adddf3>
 8009f80:	4622      	mov	r2, r4
 8009f82:	462b      	mov	r3, r5
 8009f84:	f7f6 faa4 	bl	80004d0 <__aeabi_dmul>
 8009f88:	a355      	add	r3, pc, #340	; (adr r3, 800a0e0 <__ieee754_pow+0x9b8>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 f8eb 	bl	8000168 <__aeabi_dsub>
 8009f92:	4622      	mov	r2, r4
 8009f94:	462b      	mov	r3, r5
 8009f96:	f7f6 fa9b 	bl	80004d0 <__aeabi_dmul>
 8009f9a:	a353      	add	r3, pc, #332	; (adr r3, 800a0e8 <__ieee754_pow+0x9c0>)
 8009f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa0:	f7f6 f8e4 	bl	800016c <__adddf3>
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	462b      	mov	r3, r5
 8009fa8:	f7f6 fa92 	bl	80004d0 <__aeabi_dmul>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	f7f6 f8d8 	bl	8000168 <__aeabi_dsub>
 8009fb8:	4604      	mov	r4, r0
 8009fba:	460d      	mov	r5, r1
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	f7f6 fa84 	bl	80004d0 <__aeabi_dmul>
 8009fc8:	2200      	movs	r2, #0
 8009fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	f7f6 f8c7 	bl	8000168 <__aeabi_dsub>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	460b      	mov	r3, r1
 8009fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe2:	f7f6 fb9f 	bl	8000724 <__aeabi_ddiv>
 8009fe6:	4632      	mov	r2, r6
 8009fe8:	4604      	mov	r4, r0
 8009fea:	460d      	mov	r5, r1
 8009fec:	463b      	mov	r3, r7
 8009fee:	4640      	mov	r0, r8
 8009ff0:	4649      	mov	r1, r9
 8009ff2:	f7f6 fa6d 	bl	80004d0 <__aeabi_dmul>
 8009ff6:	4632      	mov	r2, r6
 8009ff8:	463b      	mov	r3, r7
 8009ffa:	f7f6 f8b7 	bl	800016c <__adddf3>
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	4620      	mov	r0, r4
 800a004:	4629      	mov	r1, r5
 800a006:	f7f6 f8af 	bl	8000168 <__aeabi_dsub>
 800a00a:	4642      	mov	r2, r8
 800a00c:	464b      	mov	r3, r9
 800a00e:	f7f6 f8ab 	bl	8000168 <__aeabi_dsub>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	2000      	movs	r0, #0
 800a018:	4939      	ldr	r1, [pc, #228]	; (800a100 <__ieee754_pow+0x9d8>)
 800a01a:	f7f6 f8a5 	bl	8000168 <__aeabi_dsub>
 800a01e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a022:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a026:	da2c      	bge.n	800a082 <__ieee754_pow+0x95a>
 800a028:	4652      	mov	r2, sl
 800a02a:	f000 ff29 	bl	800ae80 <scalbn>
 800a02e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a032:	e40a      	b.n	800984a <__ieee754_pow+0x122>
 800a034:	4b33      	ldr	r3, [pc, #204]	; (800a104 <__ieee754_pow+0x9dc>)
 800a036:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a03a:	429f      	cmp	r7, r3
 800a03c:	f77f af14 	ble.w	8009e68 <__ieee754_pow+0x740>
 800a040:	4b31      	ldr	r3, [pc, #196]	; (800a108 <__ieee754_pow+0x9e0>)
 800a042:	440b      	add	r3, r1
 800a044:	4303      	orrs	r3, r0
 800a046:	d00b      	beq.n	800a060 <__ieee754_pow+0x938>
 800a048:	a329      	add	r3, pc, #164	; (adr r3, 800a0f0 <__ieee754_pow+0x9c8>)
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a052:	f7f6 fa3d 	bl	80004d0 <__aeabi_dmul>
 800a056:	a326      	add	r3, pc, #152	; (adr r3, 800a0f0 <__ieee754_pow+0x9c8>)
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	f7ff bbf5 	b.w	800984a <__ieee754_pow+0x122>
 800a060:	4622      	mov	r2, r4
 800a062:	462b      	mov	r3, r5
 800a064:	f7f6 f880 	bl	8000168 <__aeabi_dsub>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4640      	mov	r0, r8
 800a06e:	4649      	mov	r1, r9
 800a070:	f7f6 fcaa 	bl	80009c8 <__aeabi_dcmple>
 800a074:	2800      	cmp	r0, #0
 800a076:	f43f aef7 	beq.w	8009e68 <__ieee754_pow+0x740>
 800a07a:	e7e5      	b.n	800a048 <__ieee754_pow+0x920>
 800a07c:	f04f 0a00 	mov.w	sl, #0
 800a080:	e71d      	b.n	8009ebe <__ieee754_pow+0x796>
 800a082:	4621      	mov	r1, r4
 800a084:	e7d3      	b.n	800a02e <__ieee754_pow+0x906>
 800a086:	2000      	movs	r0, #0
 800a088:	491d      	ldr	r1, [pc, #116]	; (800a100 <__ieee754_pow+0x9d8>)
 800a08a:	f7ff bbac 	b.w	80097e6 <__ieee754_pow+0xbe>
 800a08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a092:	f7ff bba8 	b.w	80097e6 <__ieee754_pow+0xbe>
 800a096:	4638      	mov	r0, r7
 800a098:	4641      	mov	r1, r8
 800a09a:	f7ff bba4 	b.w	80097e6 <__ieee754_pow+0xbe>
 800a09e:	9200      	str	r2, [sp, #0]
 800a0a0:	f7ff bbb4 	b.w	800980c <__ieee754_pow+0xe4>
 800a0a4:	f3af 8000 	nop.w
 800a0a8:	652b82fe 	.word	0x652b82fe
 800a0ac:	3c971547 	.word	0x3c971547
 800a0b0:	00000000 	.word	0x00000000
 800a0b4:	3fe62e43 	.word	0x3fe62e43
 800a0b8:	fefa39ef 	.word	0xfefa39ef
 800a0bc:	3fe62e42 	.word	0x3fe62e42
 800a0c0:	0ca86c39 	.word	0x0ca86c39
 800a0c4:	be205c61 	.word	0xbe205c61
 800a0c8:	72bea4d0 	.word	0x72bea4d0
 800a0cc:	3e663769 	.word	0x3e663769
 800a0d0:	c5d26bf1 	.word	0xc5d26bf1
 800a0d4:	3ebbbd41 	.word	0x3ebbbd41
 800a0d8:	af25de2c 	.word	0xaf25de2c
 800a0dc:	3f11566a 	.word	0x3f11566a
 800a0e0:	16bebd93 	.word	0x16bebd93
 800a0e4:	3f66c16c 	.word	0x3f66c16c
 800a0e8:	5555553e 	.word	0x5555553e
 800a0ec:	3fc55555 	.word	0x3fc55555
 800a0f0:	c2f8f359 	.word	0xc2f8f359
 800a0f4:	01a56e1f 	.word	0x01a56e1f
 800a0f8:	3fe00000 	.word	0x3fe00000
 800a0fc:	000fffff 	.word	0x000fffff
 800a100:	3ff00000 	.word	0x3ff00000
 800a104:	4090cbff 	.word	0x4090cbff
 800a108:	3f6f3400 	.word	0x3f6f3400

0800a10c <__ieee754_sqrt>:
 800a10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a110:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800a260 <__ieee754_sqrt+0x154>
 800a114:	4606      	mov	r6, r0
 800a116:	ea3e 0e01 	bics.w	lr, lr, r1
 800a11a:	460d      	mov	r5, r1
 800a11c:	4607      	mov	r7, r0
 800a11e:	460a      	mov	r2, r1
 800a120:	460c      	mov	r4, r1
 800a122:	4603      	mov	r3, r0
 800a124:	d10f      	bne.n	800a146 <__ieee754_sqrt+0x3a>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	f7f6 f9d1 	bl	80004d0 <__aeabi_dmul>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	4630      	mov	r0, r6
 800a134:	4629      	mov	r1, r5
 800a136:	f7f6 f819 	bl	800016c <__adddf3>
 800a13a:	4606      	mov	r6, r0
 800a13c:	460d      	mov	r5, r1
 800a13e:	4630      	mov	r0, r6
 800a140:	4629      	mov	r1, r5
 800a142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a146:	2900      	cmp	r1, #0
 800a148:	dc0e      	bgt.n	800a168 <__ieee754_sqrt+0x5c>
 800a14a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800a14e:	ea5e 0707 	orrs.w	r7, lr, r7
 800a152:	d0f4      	beq.n	800a13e <__ieee754_sqrt+0x32>
 800a154:	b141      	cbz	r1, 800a168 <__ieee754_sqrt+0x5c>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	f7f6 f805 	bl	8000168 <__aeabi_dsub>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	f7f6 fadf 	bl	8000724 <__aeabi_ddiv>
 800a166:	e7e8      	b.n	800a13a <__ieee754_sqrt+0x2e>
 800a168:	1512      	asrs	r2, r2, #20
 800a16a:	d10c      	bne.n	800a186 <__ieee754_sqrt+0x7a>
 800a16c:	2c00      	cmp	r4, #0
 800a16e:	d06e      	beq.n	800a24e <__ieee754_sqrt+0x142>
 800a170:	2100      	movs	r1, #0
 800a172:	02e6      	lsls	r6, r4, #11
 800a174:	d56f      	bpl.n	800a256 <__ieee754_sqrt+0x14a>
 800a176:	1e48      	subs	r0, r1, #1
 800a178:	1a12      	subs	r2, r2, r0
 800a17a:	f1c1 0020 	rsb	r0, r1, #32
 800a17e:	fa23 f000 	lsr.w	r0, r3, r0
 800a182:	4304      	orrs	r4, r0
 800a184:	408b      	lsls	r3, r1
 800a186:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a18a:	07d5      	lsls	r5, r2, #31
 800a18c:	f04f 0500 	mov.w	r5, #0
 800a190:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a194:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800a198:	bf42      	ittt	mi
 800a19a:	0064      	lslmi	r4, r4, #1
 800a19c:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 800a1a0:	005b      	lslmi	r3, r3, #1
 800a1a2:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 800a1a6:	1050      	asrs	r0, r2, #1
 800a1a8:	4421      	add	r1, r4
 800a1aa:	2216      	movs	r2, #22
 800a1ac:	462c      	mov	r4, r5
 800a1ae:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	19a7      	adds	r7, r4, r6
 800a1b6:	428f      	cmp	r7, r1
 800a1b8:	bfde      	ittt	le
 800a1ba:	1bc9      	suble	r1, r1, r7
 800a1bc:	19bc      	addle	r4, r7, r6
 800a1be:	19ad      	addle	r5, r5, r6
 800a1c0:	0049      	lsls	r1, r1, #1
 800a1c2:	3a01      	subs	r2, #1
 800a1c4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a1c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a1cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1d0:	d1f0      	bne.n	800a1b4 <__ieee754_sqrt+0xa8>
 800a1d2:	f04f 0e20 	mov.w	lr, #32
 800a1d6:	4694      	mov	ip, r2
 800a1d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a1dc:	42a1      	cmp	r1, r4
 800a1de:	eb06 070c 	add.w	r7, r6, ip
 800a1e2:	dc02      	bgt.n	800a1ea <__ieee754_sqrt+0xde>
 800a1e4:	d112      	bne.n	800a20c <__ieee754_sqrt+0x100>
 800a1e6:	429f      	cmp	r7, r3
 800a1e8:	d810      	bhi.n	800a20c <__ieee754_sqrt+0x100>
 800a1ea:	2f00      	cmp	r7, #0
 800a1ec:	eb07 0c06 	add.w	ip, r7, r6
 800a1f0:	da34      	bge.n	800a25c <__ieee754_sqrt+0x150>
 800a1f2:	f1bc 0f00 	cmp.w	ip, #0
 800a1f6:	db31      	blt.n	800a25c <__ieee754_sqrt+0x150>
 800a1f8:	f104 0801 	add.w	r8, r4, #1
 800a1fc:	1b09      	subs	r1, r1, r4
 800a1fe:	4644      	mov	r4, r8
 800a200:	429f      	cmp	r7, r3
 800a202:	bf88      	it	hi
 800a204:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a208:	1bdb      	subs	r3, r3, r7
 800a20a:	4432      	add	r2, r6
 800a20c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 800a210:	f1be 0e01 	subs.w	lr, lr, #1
 800a214:	4439      	add	r1, r7
 800a216:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a21a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a21e:	d1dd      	bne.n	800a1dc <__ieee754_sqrt+0xd0>
 800a220:	430b      	orrs	r3, r1
 800a222:	d006      	beq.n	800a232 <__ieee754_sqrt+0x126>
 800a224:	1c54      	adds	r4, r2, #1
 800a226:	bf0b      	itete	eq
 800a228:	4672      	moveq	r2, lr
 800a22a:	3201      	addne	r2, #1
 800a22c:	3501      	addeq	r5, #1
 800a22e:	f022 0201 	bicne.w	r2, r2, #1
 800a232:	106b      	asrs	r3, r5, #1
 800a234:	0852      	lsrs	r2, r2, #1
 800a236:	07e9      	lsls	r1, r5, #31
 800a238:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a23c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a240:	bf48      	it	mi
 800a242:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a246:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800a24a:	4616      	mov	r6, r2
 800a24c:	e777      	b.n	800a13e <__ieee754_sqrt+0x32>
 800a24e:	0adc      	lsrs	r4, r3, #11
 800a250:	3a15      	subs	r2, #21
 800a252:	055b      	lsls	r3, r3, #21
 800a254:	e78a      	b.n	800a16c <__ieee754_sqrt+0x60>
 800a256:	0064      	lsls	r4, r4, #1
 800a258:	3101      	adds	r1, #1
 800a25a:	e78a      	b.n	800a172 <__ieee754_sqrt+0x66>
 800a25c:	46a0      	mov	r8, r4
 800a25e:	e7cd      	b.n	800a1fc <__ieee754_sqrt+0xf0>
 800a260:	7ff00000 	.word	0x7ff00000

0800a264 <__ieee754_asinf>:
 800a264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a268:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800a26c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800a270:	4604      	mov	r4, r0
 800a272:	4607      	mov	r7, r0
 800a274:	d10c      	bne.n	800a290 <__ieee754_asinf+0x2c>
 800a276:	498d      	ldr	r1, [pc, #564]	; (800a4ac <__ieee754_asinf+0x248>)
 800a278:	f7f6 fd38 	bl	8000cec <__aeabi_fmul>
 800a27c:	498c      	ldr	r1, [pc, #560]	; (800a4b0 <__ieee754_asinf+0x24c>)
 800a27e:	4605      	mov	r5, r0
 800a280:	4620      	mov	r0, r4
 800a282:	f7f6 fd33 	bl	8000cec <__aeabi_fmul>
 800a286:	4601      	mov	r1, r0
 800a288:	4628      	mov	r0, r5
 800a28a:	f7f6 fc27 	bl	8000adc <__addsf3>
 800a28e:	e006      	b.n	800a29e <__ieee754_asinf+0x3a>
 800a290:	dd09      	ble.n	800a2a6 <__ieee754_asinf+0x42>
 800a292:	4601      	mov	r1, r0
 800a294:	f7f6 fc20 	bl	8000ad8 <__aeabi_fsub>
 800a298:	4601      	mov	r1, r0
 800a29a:	f7f6 fddb 	bl	8000e54 <__aeabi_fdiv>
 800a29e:	4604      	mov	r4, r0
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2a6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800a2aa:	da0b      	bge.n	800a2c4 <__ieee754_asinf+0x60>
 800a2ac:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800a2b0:	da73      	bge.n	800a39a <__ieee754_asinf+0x136>
 800a2b2:	4980      	ldr	r1, [pc, #512]	; (800a4b4 <__ieee754_asinf+0x250>)
 800a2b4:	f7f6 fc12 	bl	8000adc <__addsf3>
 800a2b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a2bc:	f7f6 fed2 	bl	8001064 <__aeabi_fcmpgt>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d1ed      	bne.n	800a2a0 <__ieee754_asinf+0x3c>
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f000 ff59 	bl	800b17c <fabsf>
 800a2ca:	4601      	mov	r1, r0
 800a2cc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a2d0:	f7f6 fc02 	bl	8000ad8 <__aeabi_fsub>
 800a2d4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a2d8:	f7f6 fd08 	bl	8000cec <__aeabi_fmul>
 800a2dc:	4604      	mov	r4, r0
 800a2de:	4976      	ldr	r1, [pc, #472]	; (800a4b8 <__ieee754_asinf+0x254>)
 800a2e0:	f7f6 fd04 	bl	8000cec <__aeabi_fmul>
 800a2e4:	4975      	ldr	r1, [pc, #468]	; (800a4bc <__ieee754_asinf+0x258>)
 800a2e6:	f7f6 fbf9 	bl	8000adc <__addsf3>
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	f7f6 fcfe 	bl	8000cec <__aeabi_fmul>
 800a2f0:	4973      	ldr	r1, [pc, #460]	; (800a4c0 <__ieee754_asinf+0x25c>)
 800a2f2:	f7f6 fbf1 	bl	8000ad8 <__aeabi_fsub>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	f7f6 fcf8 	bl	8000cec <__aeabi_fmul>
 800a2fc:	4971      	ldr	r1, [pc, #452]	; (800a4c4 <__ieee754_asinf+0x260>)
 800a2fe:	f7f6 fbed 	bl	8000adc <__addsf3>
 800a302:	4621      	mov	r1, r4
 800a304:	f7f6 fcf2 	bl	8000cec <__aeabi_fmul>
 800a308:	496f      	ldr	r1, [pc, #444]	; (800a4c8 <__ieee754_asinf+0x264>)
 800a30a:	f7f6 fbe5 	bl	8000ad8 <__aeabi_fsub>
 800a30e:	4621      	mov	r1, r4
 800a310:	f7f6 fcec 	bl	8000cec <__aeabi_fmul>
 800a314:	496d      	ldr	r1, [pc, #436]	; (800a4cc <__ieee754_asinf+0x268>)
 800a316:	f7f6 fbe1 	bl	8000adc <__addsf3>
 800a31a:	4621      	mov	r1, r4
 800a31c:	f7f6 fce6 	bl	8000cec <__aeabi_fmul>
 800a320:	496b      	ldr	r1, [pc, #428]	; (800a4d0 <__ieee754_asinf+0x26c>)
 800a322:	4680      	mov	r8, r0
 800a324:	4620      	mov	r0, r4
 800a326:	f7f6 fce1 	bl	8000cec <__aeabi_fmul>
 800a32a:	496a      	ldr	r1, [pc, #424]	; (800a4d4 <__ieee754_asinf+0x270>)
 800a32c:	f7f6 fbd4 	bl	8000ad8 <__aeabi_fsub>
 800a330:	4621      	mov	r1, r4
 800a332:	f7f6 fcdb 	bl	8000cec <__aeabi_fmul>
 800a336:	4968      	ldr	r1, [pc, #416]	; (800a4d8 <__ieee754_asinf+0x274>)
 800a338:	f7f6 fbd0 	bl	8000adc <__addsf3>
 800a33c:	4621      	mov	r1, r4
 800a33e:	f7f6 fcd5 	bl	8000cec <__aeabi_fmul>
 800a342:	4966      	ldr	r1, [pc, #408]	; (800a4dc <__ieee754_asinf+0x278>)
 800a344:	f7f6 fbc8 	bl	8000ad8 <__aeabi_fsub>
 800a348:	4621      	mov	r1, r4
 800a34a:	f7f6 fccf 	bl	8000cec <__aeabi_fmul>
 800a34e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a352:	f7f6 fbc3 	bl	8000adc <__addsf3>
 800a356:	4681      	mov	r9, r0
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 fca3 	bl	800aca4 <__ieee754_sqrtf>
 800a35e:	4b60      	ldr	r3, [pc, #384]	; (800a4e0 <__ieee754_asinf+0x27c>)
 800a360:	4606      	mov	r6, r0
 800a362:	429d      	cmp	r5, r3
 800a364:	dd63      	ble.n	800a42e <__ieee754_asinf+0x1ca>
 800a366:	4649      	mov	r1, r9
 800a368:	4640      	mov	r0, r8
 800a36a:	f7f6 fd73 	bl	8000e54 <__aeabi_fdiv>
 800a36e:	4631      	mov	r1, r6
 800a370:	f7f6 fcbc 	bl	8000cec <__aeabi_fmul>
 800a374:	4631      	mov	r1, r6
 800a376:	f7f6 fbb1 	bl	8000adc <__addsf3>
 800a37a:	4601      	mov	r1, r0
 800a37c:	f7f6 fbae 	bl	8000adc <__addsf3>
 800a380:	4958      	ldr	r1, [pc, #352]	; (800a4e4 <__ieee754_asinf+0x280>)
 800a382:	f7f6 fbab 	bl	8000adc <__addsf3>
 800a386:	4601      	mov	r1, r0
 800a388:	4848      	ldr	r0, [pc, #288]	; (800a4ac <__ieee754_asinf+0x248>)
 800a38a:	f7f6 fba5 	bl	8000ad8 <__aeabi_fsub>
 800a38e:	2f00      	cmp	r7, #0
 800a390:	4604      	mov	r4, r0
 800a392:	bfd8      	it	le
 800a394:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800a398:	e782      	b.n	800a2a0 <__ieee754_asinf+0x3c>
 800a39a:	4601      	mov	r1, r0
 800a39c:	f7f6 fca6 	bl	8000cec <__aeabi_fmul>
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	4945      	ldr	r1, [pc, #276]	; (800a4b8 <__ieee754_asinf+0x254>)
 800a3a4:	f7f6 fca2 	bl	8000cec <__aeabi_fmul>
 800a3a8:	4944      	ldr	r1, [pc, #272]	; (800a4bc <__ieee754_asinf+0x258>)
 800a3aa:	f7f6 fb97 	bl	8000adc <__addsf3>
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	f7f6 fc9c 	bl	8000cec <__aeabi_fmul>
 800a3b4:	4942      	ldr	r1, [pc, #264]	; (800a4c0 <__ieee754_asinf+0x25c>)
 800a3b6:	f7f6 fb8f 	bl	8000ad8 <__aeabi_fsub>
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f7f6 fc96 	bl	8000cec <__aeabi_fmul>
 800a3c0:	4940      	ldr	r1, [pc, #256]	; (800a4c4 <__ieee754_asinf+0x260>)
 800a3c2:	f7f6 fb8b 	bl	8000adc <__addsf3>
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	f7f6 fc90 	bl	8000cec <__aeabi_fmul>
 800a3cc:	493e      	ldr	r1, [pc, #248]	; (800a4c8 <__ieee754_asinf+0x264>)
 800a3ce:	f7f6 fb83 	bl	8000ad8 <__aeabi_fsub>
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	f7f6 fc8a 	bl	8000cec <__aeabi_fmul>
 800a3d8:	493c      	ldr	r1, [pc, #240]	; (800a4cc <__ieee754_asinf+0x268>)
 800a3da:	f7f6 fb7f 	bl	8000adc <__addsf3>
 800a3de:	4629      	mov	r1, r5
 800a3e0:	f7f6 fc84 	bl	8000cec <__aeabi_fmul>
 800a3e4:	493a      	ldr	r1, [pc, #232]	; (800a4d0 <__ieee754_asinf+0x26c>)
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	f7f6 fc7f 	bl	8000cec <__aeabi_fmul>
 800a3ee:	4939      	ldr	r1, [pc, #228]	; (800a4d4 <__ieee754_asinf+0x270>)
 800a3f0:	f7f6 fb72 	bl	8000ad8 <__aeabi_fsub>
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	f7f6 fc79 	bl	8000cec <__aeabi_fmul>
 800a3fa:	4937      	ldr	r1, [pc, #220]	; (800a4d8 <__ieee754_asinf+0x274>)
 800a3fc:	f7f6 fb6e 	bl	8000adc <__addsf3>
 800a400:	4629      	mov	r1, r5
 800a402:	f7f6 fc73 	bl	8000cec <__aeabi_fmul>
 800a406:	4935      	ldr	r1, [pc, #212]	; (800a4dc <__ieee754_asinf+0x278>)
 800a408:	f7f6 fb66 	bl	8000ad8 <__aeabi_fsub>
 800a40c:	4629      	mov	r1, r5
 800a40e:	f7f6 fc6d 	bl	8000cec <__aeabi_fmul>
 800a412:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a416:	f7f6 fb61 	bl	8000adc <__addsf3>
 800a41a:	4601      	mov	r1, r0
 800a41c:	4630      	mov	r0, r6
 800a41e:	f7f6 fd19 	bl	8000e54 <__aeabi_fdiv>
 800a422:	4621      	mov	r1, r4
 800a424:	f7f6 fc62 	bl	8000cec <__aeabi_fmul>
 800a428:	4601      	mov	r1, r0
 800a42a:	4620      	mov	r0, r4
 800a42c:	e72d      	b.n	800a28a <__ieee754_asinf+0x26>
 800a42e:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800a432:	4649      	mov	r1, r9
 800a434:	4640      	mov	r0, r8
 800a436:	f7f6 fd0d 	bl	8000e54 <__aeabi_fdiv>
 800a43a:	4631      	mov	r1, r6
 800a43c:	4680      	mov	r8, r0
 800a43e:	4630      	mov	r0, r6
 800a440:	f7f6 fb4c 	bl	8000adc <__addsf3>
 800a444:	4601      	mov	r1, r0
 800a446:	4640      	mov	r0, r8
 800a448:	f7f6 fc50 	bl	8000cec <__aeabi_fmul>
 800a44c:	f025 050f 	bic.w	r5, r5, #15
 800a450:	4680      	mov	r8, r0
 800a452:	4629      	mov	r1, r5
 800a454:	4628      	mov	r0, r5
 800a456:	f7f6 fc49 	bl	8000cec <__aeabi_fmul>
 800a45a:	4601      	mov	r1, r0
 800a45c:	4620      	mov	r0, r4
 800a45e:	f7f6 fb3b 	bl	8000ad8 <__aeabi_fsub>
 800a462:	4631      	mov	r1, r6
 800a464:	4604      	mov	r4, r0
 800a466:	4628      	mov	r0, r5
 800a468:	f7f6 fb38 	bl	8000adc <__addsf3>
 800a46c:	4601      	mov	r1, r0
 800a46e:	4620      	mov	r0, r4
 800a470:	f7f6 fcf0 	bl	8000e54 <__aeabi_fdiv>
 800a474:	4601      	mov	r1, r0
 800a476:	f7f6 fb31 	bl	8000adc <__addsf3>
 800a47a:	4601      	mov	r1, r0
 800a47c:	480c      	ldr	r0, [pc, #48]	; (800a4b0 <__ieee754_asinf+0x24c>)
 800a47e:	f7f6 fb2b 	bl	8000ad8 <__aeabi_fsub>
 800a482:	4601      	mov	r1, r0
 800a484:	4640      	mov	r0, r8
 800a486:	f7f6 fb27 	bl	8000ad8 <__aeabi_fsub>
 800a48a:	4629      	mov	r1, r5
 800a48c:	4604      	mov	r4, r0
 800a48e:	4628      	mov	r0, r5
 800a490:	f7f6 fb24 	bl	8000adc <__addsf3>
 800a494:	4601      	mov	r1, r0
 800a496:	4814      	ldr	r0, [pc, #80]	; (800a4e8 <__ieee754_asinf+0x284>)
 800a498:	f7f6 fb1e 	bl	8000ad8 <__aeabi_fsub>
 800a49c:	4601      	mov	r1, r0
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f7f6 fb1a 	bl	8000ad8 <__aeabi_fsub>
 800a4a4:	4601      	mov	r1, r0
 800a4a6:	4810      	ldr	r0, [pc, #64]	; (800a4e8 <__ieee754_asinf+0x284>)
 800a4a8:	e76f      	b.n	800a38a <__ieee754_asinf+0x126>
 800a4aa:	bf00      	nop
 800a4ac:	3fc90fdb 	.word	0x3fc90fdb
 800a4b0:	b33bbd2e 	.word	0xb33bbd2e
 800a4b4:	7149f2ca 	.word	0x7149f2ca
 800a4b8:	3811ef08 	.word	0x3811ef08
 800a4bc:	3a4f7f04 	.word	0x3a4f7f04
 800a4c0:	3d241146 	.word	0x3d241146
 800a4c4:	3e4e0aa8 	.word	0x3e4e0aa8
 800a4c8:	3ea6b090 	.word	0x3ea6b090
 800a4cc:	3e2aaaab 	.word	0x3e2aaaab
 800a4d0:	3d9dc62e 	.word	0x3d9dc62e
 800a4d4:	3f303361 	.word	0x3f303361
 800a4d8:	4001572d 	.word	0x4001572d
 800a4dc:	4019d139 	.word	0x4019d139
 800a4e0:	3f799999 	.word	0x3f799999
 800a4e4:	333bbd2e 	.word	0x333bbd2e
 800a4e8:	3f490fdb 	.word	0x3f490fdb

0800a4ec <__ieee754_atan2f>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a4f2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	dc05      	bgt.n	800a506 <__ieee754_atan2f+0x1a>
 800a4fa:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a4fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a502:	4607      	mov	r7, r0
 800a504:	dd04      	ble.n	800a510 <__ieee754_atan2f+0x24>
 800a506:	4618      	mov	r0, r3
 800a508:	f7f6 fae8 	bl	8000adc <__addsf3>
 800a50c:	4603      	mov	r3, r0
 800a50e:	e010      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a510:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800a514:	d103      	bne.n	800a51e <__ieee754_atan2f+0x32>
 800a516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a51a:	f000 bd1f 	b.w	800af5c <atanf>
 800a51e:	178c      	asrs	r4, r1, #30
 800a520:	f004 0402 	and.w	r4, r4, #2
 800a524:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a528:	b92a      	cbnz	r2, 800a536 <__ieee754_atan2f+0x4a>
 800a52a:	2c02      	cmp	r4, #2
 800a52c:	d023      	beq.n	800a576 <__ieee754_atan2f+0x8a>
 800a52e:	2c03      	cmp	r4, #3
 800a530:	d023      	beq.n	800a57a <__ieee754_atan2f+0x8e>
 800a532:	4618      	mov	r0, r3
 800a534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a536:	b91e      	cbnz	r6, 800a540 <__ieee754_atan2f+0x54>
 800a538:	2f00      	cmp	r7, #0
 800a53a:	da53      	bge.n	800a5e4 <__ieee754_atan2f+0xf8>
 800a53c:	4b2a      	ldr	r3, [pc, #168]	; (800a5e8 <__ieee754_atan2f+0xfc>)
 800a53e:	e7f8      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a540:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a544:	d11b      	bne.n	800a57e <__ieee754_atan2f+0x92>
 800a546:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a54a:	d10b      	bne.n	800a564 <__ieee754_atan2f+0x78>
 800a54c:	2c02      	cmp	r4, #2
 800a54e:	d005      	beq.n	800a55c <__ieee754_atan2f+0x70>
 800a550:	2c03      	cmp	r4, #3
 800a552:	d005      	beq.n	800a560 <__ieee754_atan2f+0x74>
 800a554:	2c01      	cmp	r4, #1
 800a556:	d141      	bne.n	800a5dc <__ieee754_atan2f+0xf0>
 800a558:	4b24      	ldr	r3, [pc, #144]	; (800a5ec <__ieee754_atan2f+0x100>)
 800a55a:	e7ea      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a55c:	4b24      	ldr	r3, [pc, #144]	; (800a5f0 <__ieee754_atan2f+0x104>)
 800a55e:	e7e8      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a560:	4b24      	ldr	r3, [pc, #144]	; (800a5f4 <__ieee754_atan2f+0x108>)
 800a562:	e7e6      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a564:	2c02      	cmp	r4, #2
 800a566:	d006      	beq.n	800a576 <__ieee754_atan2f+0x8a>
 800a568:	2c03      	cmp	r4, #3
 800a56a:	d006      	beq.n	800a57a <__ieee754_atan2f+0x8e>
 800a56c:	2c01      	cmp	r4, #1
 800a56e:	d137      	bne.n	800a5e0 <__ieee754_atan2f+0xf4>
 800a570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a574:	e7dd      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a576:	4b20      	ldr	r3, [pc, #128]	; (800a5f8 <__ieee754_atan2f+0x10c>)
 800a578:	e7db      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a57a:	4b20      	ldr	r3, [pc, #128]	; (800a5fc <__ieee754_atan2f+0x110>)
 800a57c:	e7d9      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a57e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a582:	d0d9      	beq.n	800a538 <__ieee754_atan2f+0x4c>
 800a584:	1b92      	subs	r2, r2, r6
 800a586:	15d2      	asrs	r2, r2, #23
 800a588:	2a3c      	cmp	r2, #60	; 0x3c
 800a58a:	dc17      	bgt.n	800a5bc <__ieee754_atan2f+0xd0>
 800a58c:	2900      	cmp	r1, #0
 800a58e:	da01      	bge.n	800a594 <__ieee754_atan2f+0xa8>
 800a590:	323c      	adds	r2, #60	; 0x3c
 800a592:	db15      	blt.n	800a5c0 <__ieee754_atan2f+0xd4>
 800a594:	4618      	mov	r0, r3
 800a596:	f7f6 fc5d 	bl	8000e54 <__aeabi_fdiv>
 800a59a:	f000 fdef 	bl	800b17c <fabsf>
 800a59e:	f000 fcdd 	bl	800af5c <atanf>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2c01      	cmp	r4, #1
 800a5a6:	d00d      	beq.n	800a5c4 <__ieee754_atan2f+0xd8>
 800a5a8:	2c02      	cmp	r4, #2
 800a5aa:	d00e      	beq.n	800a5ca <__ieee754_atan2f+0xde>
 800a5ac:	2c00      	cmp	r4, #0
 800a5ae:	d0c0      	beq.n	800a532 <__ieee754_atan2f+0x46>
 800a5b0:	4913      	ldr	r1, [pc, #76]	; (800a600 <__ieee754_atan2f+0x114>)
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7f6 fa92 	bl	8000adc <__addsf3>
 800a5b8:	490f      	ldr	r1, [pc, #60]	; (800a5f8 <__ieee754_atan2f+0x10c>)
 800a5ba:	e00c      	b.n	800a5d6 <__ieee754_atan2f+0xea>
 800a5bc:	4b11      	ldr	r3, [pc, #68]	; (800a604 <__ieee754_atan2f+0x118>)
 800a5be:	e7f1      	b.n	800a5a4 <__ieee754_atan2f+0xb8>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	e7ef      	b.n	800a5a4 <__ieee754_atan2f+0xb8>
 800a5c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a5c8:	e7b3      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a5ca:	490d      	ldr	r1, [pc, #52]	; (800a600 <__ieee754_atan2f+0x114>)
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7f6 fa85 	bl	8000adc <__addsf3>
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	4808      	ldr	r0, [pc, #32]	; (800a5f8 <__ieee754_atan2f+0x10c>)
 800a5d6:	f7f6 fa7f 	bl	8000ad8 <__aeabi_fsub>
 800a5da:	e797      	b.n	800a50c <__ieee754_atan2f+0x20>
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <__ieee754_atan2f+0x11c>)
 800a5de:	e7a8      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e7a6      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a5e4:	4b07      	ldr	r3, [pc, #28]	; (800a604 <__ieee754_atan2f+0x118>)
 800a5e6:	e7a4      	b.n	800a532 <__ieee754_atan2f+0x46>
 800a5e8:	bfc90fdb 	.word	0xbfc90fdb
 800a5ec:	bf490fdb 	.word	0xbf490fdb
 800a5f0:	4016cbe4 	.word	0x4016cbe4
 800a5f4:	c016cbe4 	.word	0xc016cbe4
 800a5f8:	40490fdb 	.word	0x40490fdb
 800a5fc:	c0490fdb 	.word	0xc0490fdb
 800a600:	33bbbd2e 	.word	0x33bbbd2e
 800a604:	3fc90fdb 	.word	0x3fc90fdb
 800a608:	3f490fdb 	.word	0x3f490fdb

0800a60c <__ieee754_powf>:
 800a60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a610:	b087      	sub	sp, #28
 800a612:	9101      	str	r1, [sp, #4]
 800a614:	9c01      	ldr	r4, [sp, #4]
 800a616:	4681      	mov	r9, r0
 800a618:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 800a61c:	f000 8325 	beq.w	800ac6a <__ieee754_powf+0x65e>
 800a620:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a624:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a628:	4680      	mov	r8, r0
 800a62a:	dc06      	bgt.n	800a63a <__ieee754_powf+0x2e>
 800a62c:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a630:	dd09      	ble.n	800a646 <__ieee754_powf+0x3a>
 800a632:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800a636:	f000 8318 	beq.w	800ac6a <__ieee754_powf+0x65e>
 800a63a:	4885      	ldr	r0, [pc, #532]	; (800a850 <__ieee754_powf+0x244>)
 800a63c:	b007      	add	sp, #28
 800a63e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a642:	f7fe bc35 	b.w	8008eb0 <nanf>
 800a646:	2800      	cmp	r0, #0
 800a648:	da1d      	bge.n	800a686 <__ieee754_powf+0x7a>
 800a64a:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800a64e:	da2b      	bge.n	800a6a8 <__ieee754_powf+0x9c>
 800a650:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a654:	db30      	blt.n	800a6b8 <__ieee754_powf+0xac>
 800a656:	15fb      	asrs	r3, r7, #23
 800a658:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a65c:	fa47 f503 	asr.w	r5, r7, r3
 800a660:	fa05 f303 	lsl.w	r3, r5, r3
 800a664:	429f      	cmp	r7, r3
 800a666:	d127      	bne.n	800a6b8 <__ieee754_powf+0xac>
 800a668:	f005 0501 	and.w	r5, r5, #1
 800a66c:	f1c5 0502 	rsb	r5, r5, #2
 800a670:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a674:	d122      	bne.n	800a6bc <__ieee754_powf+0xb0>
 800a676:	2c00      	cmp	r4, #0
 800a678:	4649      	mov	r1, r9
 800a67a:	da11      	bge.n	800a6a0 <__ieee754_powf+0x94>
 800a67c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a680:	f7f6 fbe8 	bl	8000e54 <__aeabi_fdiv>
 800a684:	e021      	b.n	800a6ca <__ieee754_powf+0xbe>
 800a686:	2500      	movs	r5, #0
 800a688:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a68c:	d1f0      	bne.n	800a670 <__ieee754_powf+0x64>
 800a68e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800a692:	f000 82ea 	beq.w	800ac6a <__ieee754_powf+0x65e>
 800a696:	dd09      	ble.n	800a6ac <__ieee754_powf+0xa0>
 800a698:	2c00      	cmp	r4, #0
 800a69a:	f280 82e9 	bge.w	800ac70 <__ieee754_powf+0x664>
 800a69e:	2100      	movs	r1, #0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	b007      	add	sp, #28
 800a6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a8:	2502      	movs	r5, #2
 800a6aa:	e7ed      	b.n	800a688 <__ieee754_powf+0x7c>
 800a6ac:	2c00      	cmp	r4, #0
 800a6ae:	daf6      	bge.n	800a69e <__ieee754_powf+0x92>
 800a6b0:	9b01      	ldr	r3, [sp, #4]
 800a6b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6b6:	e7f3      	b.n	800a6a0 <__ieee754_powf+0x94>
 800a6b8:	2500      	movs	r5, #0
 800a6ba:	e7d9      	b.n	800a670 <__ieee754_powf+0x64>
 800a6bc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a6c0:	d105      	bne.n	800a6ce <__ieee754_powf+0xc2>
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	f7f6 fb11 	bl	8000cec <__aeabi_fmul>
 800a6ca:	4601      	mov	r1, r0
 800a6cc:	e7e8      	b.n	800a6a0 <__ieee754_powf+0x94>
 800a6ce:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a6d2:	4648      	mov	r0, r9
 800a6d4:	d107      	bne.n	800a6e6 <__ieee754_powf+0xda>
 800a6d6:	f1b8 0f00 	cmp.w	r8, #0
 800a6da:	db04      	blt.n	800a6e6 <__ieee754_powf+0xda>
 800a6dc:	b007      	add	sp, #28
 800a6de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e2:	f000 badf 	b.w	800aca4 <__ieee754_sqrtf>
 800a6e6:	f000 fd49 	bl	800b17c <fabsf>
 800a6ea:	4601      	mov	r1, r0
 800a6ec:	b126      	cbz	r6, 800a6f8 <__ieee754_powf+0xec>
 800a6ee:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800a6f2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a6f6:	d118      	bne.n	800a72a <__ieee754_powf+0x11e>
 800a6f8:	2c00      	cmp	r4, #0
 800a6fa:	da04      	bge.n	800a706 <__ieee754_powf+0xfa>
 800a6fc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a700:	f7f6 fba8 	bl	8000e54 <__aeabi_fdiv>
 800a704:	4601      	mov	r1, r0
 800a706:	f1b8 0f00 	cmp.w	r8, #0
 800a70a:	dac9      	bge.n	800a6a0 <__ieee754_powf+0x94>
 800a70c:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 800a710:	ea50 0305 	orrs.w	r3, r0, r5
 800a714:	d104      	bne.n	800a720 <__ieee754_powf+0x114>
 800a716:	4608      	mov	r0, r1
 800a718:	f7f6 f9de 	bl	8000ad8 <__aeabi_fsub>
 800a71c:	4601      	mov	r1, r0
 800a71e:	e7af      	b.n	800a680 <__ieee754_powf+0x74>
 800a720:	2d01      	cmp	r5, #1
 800a722:	d1bd      	bne.n	800a6a0 <__ieee754_powf+0x94>
 800a724:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a728:	e7ba      	b.n	800a6a0 <__ieee754_powf+0x94>
 800a72a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800a72e:	f108 33ff 	add.w	r3, r8, #4294967295
 800a732:	9303      	str	r3, [sp, #12]
 800a734:	432b      	orrs	r3, r5
 800a736:	d101      	bne.n	800a73c <__ieee754_powf+0x130>
 800a738:	4649      	mov	r1, r9
 800a73a:	e7ec      	b.n	800a716 <__ieee754_powf+0x10a>
 800a73c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800a740:	f340 8098 	ble.w	800a874 <__ieee754_powf+0x268>
 800a744:	4b43      	ldr	r3, [pc, #268]	; (800a854 <__ieee754_powf+0x248>)
 800a746:	429e      	cmp	r6, r3
 800a748:	dc03      	bgt.n	800a752 <__ieee754_powf+0x146>
 800a74a:	2c00      	cmp	r4, #0
 800a74c:	daa7      	bge.n	800a69e <__ieee754_powf+0x92>
 800a74e:	4942      	ldr	r1, [pc, #264]	; (800a858 <__ieee754_powf+0x24c>)
 800a750:	e7b8      	b.n	800a6c4 <__ieee754_powf+0xb8>
 800a752:	4b42      	ldr	r3, [pc, #264]	; (800a85c <__ieee754_powf+0x250>)
 800a754:	429e      	cmp	r6, r3
 800a756:	dd02      	ble.n	800a75e <__ieee754_powf+0x152>
 800a758:	2c00      	cmp	r4, #0
 800a75a:	dcf8      	bgt.n	800a74e <__ieee754_powf+0x142>
 800a75c:	e79f      	b.n	800a69e <__ieee754_powf+0x92>
 800a75e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a762:	f7f6 f9b9 	bl	8000ad8 <__aeabi_fsub>
 800a766:	493e      	ldr	r1, [pc, #248]	; (800a860 <__ieee754_powf+0x254>)
 800a768:	4606      	mov	r6, r0
 800a76a:	f7f6 fabf 	bl	8000cec <__aeabi_fmul>
 800a76e:	493d      	ldr	r1, [pc, #244]	; (800a864 <__ieee754_powf+0x258>)
 800a770:	4607      	mov	r7, r0
 800a772:	4630      	mov	r0, r6
 800a774:	f7f6 faba 	bl	8000cec <__aeabi_fmul>
 800a778:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800a77c:	4680      	mov	r8, r0
 800a77e:	4630      	mov	r0, r6
 800a780:	f7f6 fab4 	bl	8000cec <__aeabi_fmul>
 800a784:	4601      	mov	r1, r0
 800a786:	4838      	ldr	r0, [pc, #224]	; (800a868 <__ieee754_powf+0x25c>)
 800a788:	f7f6 f9a6 	bl	8000ad8 <__aeabi_fsub>
 800a78c:	4631      	mov	r1, r6
 800a78e:	f7f6 faad 	bl	8000cec <__aeabi_fmul>
 800a792:	4601      	mov	r1, r0
 800a794:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800a798:	f7f6 f99e 	bl	8000ad8 <__aeabi_fsub>
 800a79c:	4631      	mov	r1, r6
 800a79e:	4681      	mov	r9, r0
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7f6 faa3 	bl	8000cec <__aeabi_fmul>
 800a7a6:	4601      	mov	r1, r0
 800a7a8:	4648      	mov	r0, r9
 800a7aa:	f7f6 fa9f 	bl	8000cec <__aeabi_fmul>
 800a7ae:	492f      	ldr	r1, [pc, #188]	; (800a86c <__ieee754_powf+0x260>)
 800a7b0:	f7f6 fa9c 	bl	8000cec <__aeabi_fmul>
 800a7b4:	4601      	mov	r1, r0
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	f7f6 f98e 	bl	8000ad8 <__aeabi_fsub>
 800a7bc:	4601      	mov	r1, r0
 800a7be:	4606      	mov	r6, r0
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f7f6 f98b 	bl	8000adc <__addsf3>
 800a7c6:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800a7ca:	f02a 0a0f 	bic.w	sl, sl, #15
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	f7f6 f981 	bl	8000ad8 <__aeabi_fsub>
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7f6 f97d 	bl	8000ad8 <__aeabi_fsub>
 800a7de:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800a7e2:	9b03      	ldr	r3, [sp, #12]
 800a7e4:	3d01      	subs	r5, #1
 800a7e6:	f024 040f 	bic.w	r4, r4, #15
 800a7ea:	432b      	orrs	r3, r5
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	9801      	ldr	r0, [sp, #4]
 800a7f2:	bf0c      	ite	eq
 800a7f4:	4d1e      	ldreq	r5, [pc, #120]	; (800a870 <__ieee754_powf+0x264>)
 800a7f6:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 800a7fa:	f7f6 f96d 	bl	8000ad8 <__aeabi_fsub>
 800a7fe:	4651      	mov	r1, sl
 800a800:	f7f6 fa74 	bl	8000cec <__aeabi_fmul>
 800a804:	9901      	ldr	r1, [sp, #4]
 800a806:	4607      	mov	r7, r0
 800a808:	4630      	mov	r0, r6
 800a80a:	f7f6 fa6f 	bl	8000cec <__aeabi_fmul>
 800a80e:	4601      	mov	r1, r0
 800a810:	4638      	mov	r0, r7
 800a812:	f7f6 f963 	bl	8000adc <__addsf3>
 800a816:	4621      	mov	r1, r4
 800a818:	4606      	mov	r6, r0
 800a81a:	4650      	mov	r0, sl
 800a81c:	f7f6 fa66 	bl	8000cec <__aeabi_fmul>
 800a820:	4601      	mov	r1, r0
 800a822:	4607      	mov	r7, r0
 800a824:	4681      	mov	r9, r0
 800a826:	4630      	mov	r0, r6
 800a828:	f7f6 f958 	bl	8000adc <__addsf3>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	4682      	mov	sl, r0
 800a830:	4680      	mov	r8, r0
 800a832:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800a836:	f340 81fb 	ble.w	800ac30 <__ieee754_powf+0x624>
 800a83a:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800a83e:	f340 8149 	ble.w	800aad4 <__ieee754_powf+0x4c8>
 800a842:	4905      	ldr	r1, [pc, #20]	; (800a858 <__ieee754_powf+0x24c>)
 800a844:	4628      	mov	r0, r5
 800a846:	f7f6 fa51 	bl	8000cec <__aeabi_fmul>
 800a84a:	4903      	ldr	r1, [pc, #12]	; (800a858 <__ieee754_powf+0x24c>)
 800a84c:	e73b      	b.n	800a6c6 <__ieee754_powf+0xba>
 800a84e:	bf00      	nop
 800a850:	0800ba1a 	.word	0x0800ba1a
 800a854:	3f7ffff7 	.word	0x3f7ffff7
 800a858:	7149f2ca 	.word	0x7149f2ca
 800a85c:	3f800007 	.word	0x3f800007
 800a860:	3fb8aa00 	.word	0x3fb8aa00
 800a864:	36eca570 	.word	0x36eca570
 800a868:	3eaaaaab 	.word	0x3eaaaaab
 800a86c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a870:	bf800000 	.word	0xbf800000
 800a874:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 800a878:	f280 810a 	bge.w	800aa90 <__ieee754_powf+0x484>
 800a87c:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 800a880:	f7f6 fa34 	bl	8000cec <__aeabi_fmul>
 800a884:	f06f 0217 	mvn.w	r2, #23
 800a888:	4606      	mov	r6, r0
 800a88a:	15f3      	asrs	r3, r6, #23
 800a88c:	3b7f      	subs	r3, #127	; 0x7f
 800a88e:	441a      	add	r2, r3
 800a890:	4b81      	ldr	r3, [pc, #516]	; (800aa98 <__ieee754_powf+0x48c>)
 800a892:	f3c6 0016 	ubfx	r0, r6, #0, #23
 800a896:	4298      	cmp	r0, r3
 800a898:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 800a89c:	dd06      	ble.n	800a8ac <__ieee754_powf+0x2a0>
 800a89e:	4b7f      	ldr	r3, [pc, #508]	; (800aa9c <__ieee754_powf+0x490>)
 800a8a0:	4298      	cmp	r0, r3
 800a8a2:	f340 80f7 	ble.w	800aa94 <__ieee754_powf+0x488>
 800a8a6:	3201      	adds	r2, #1
 800a8a8:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 800a8ac:	2700      	movs	r7, #0
 800a8ae:	4b7c      	ldr	r3, [pc, #496]	; (800aaa0 <__ieee754_powf+0x494>)
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800a8b6:	9205      	str	r2, [sp, #20]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	9302      	str	r3, [sp, #8]
 800a8bc:	f7f6 f90c 	bl	8000ad8 <__aeabi_fsub>
 800a8c0:	9902      	ldr	r1, [sp, #8]
 800a8c2:	4683      	mov	fp, r0
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	f7f6 f909 	bl	8000adc <__addsf3>
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a8d0:	f7f6 fac0 	bl	8000e54 <__aeabi_fdiv>
 800a8d4:	4601      	mov	r1, r0
 800a8d6:	9004      	str	r0, [sp, #16]
 800a8d8:	4658      	mov	r0, fp
 800a8da:	f7f6 fa07 	bl	8000cec <__aeabi_fmul>
 800a8de:	46b2      	mov	sl, r6
 800a8e0:	1076      	asrs	r6, r6, #1
 800a8e2:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800a8e6:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800a8ea:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 800a8ee:	f028 080f 	bic.w	r8, r8, #15
 800a8f2:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 800a8f6:	4681      	mov	r9, r0
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	f7f6 f9f6 	bl	8000cec <__aeabi_fmul>
 800a900:	4601      	mov	r1, r0
 800a902:	4658      	mov	r0, fp
 800a904:	f7f6 f8e8 	bl	8000ad8 <__aeabi_fsub>
 800a908:	9902      	ldr	r1, [sp, #8]
 800a90a:	4683      	mov	fp, r0
 800a90c:	4630      	mov	r0, r6
 800a90e:	f7f6 f8e3 	bl	8000ad8 <__aeabi_fsub>
 800a912:	4601      	mov	r1, r0
 800a914:	4650      	mov	r0, sl
 800a916:	f7f6 f8df 	bl	8000ad8 <__aeabi_fsub>
 800a91a:	4641      	mov	r1, r8
 800a91c:	f7f6 f9e6 	bl	8000cec <__aeabi_fmul>
 800a920:	4601      	mov	r1, r0
 800a922:	4658      	mov	r0, fp
 800a924:	f7f6 f8d8 	bl	8000ad8 <__aeabi_fsub>
 800a928:	9b04      	ldr	r3, [sp, #16]
 800a92a:	4619      	mov	r1, r3
 800a92c:	f7f6 f9de 	bl	8000cec <__aeabi_fmul>
 800a930:	4649      	mov	r1, r9
 800a932:	4683      	mov	fp, r0
 800a934:	4648      	mov	r0, r9
 800a936:	f7f6 f9d9 	bl	8000cec <__aeabi_fmul>
 800a93a:	4606      	mov	r6, r0
 800a93c:	4959      	ldr	r1, [pc, #356]	; (800aaa4 <__ieee754_powf+0x498>)
 800a93e:	f7f6 f9d5 	bl	8000cec <__aeabi_fmul>
 800a942:	4959      	ldr	r1, [pc, #356]	; (800aaa8 <__ieee754_powf+0x49c>)
 800a944:	f7f6 f8ca 	bl	8000adc <__addsf3>
 800a948:	4631      	mov	r1, r6
 800a94a:	f7f6 f9cf 	bl	8000cec <__aeabi_fmul>
 800a94e:	4957      	ldr	r1, [pc, #348]	; (800aaac <__ieee754_powf+0x4a0>)
 800a950:	f7f6 f8c4 	bl	8000adc <__addsf3>
 800a954:	4631      	mov	r1, r6
 800a956:	f7f6 f9c9 	bl	8000cec <__aeabi_fmul>
 800a95a:	4955      	ldr	r1, [pc, #340]	; (800aab0 <__ieee754_powf+0x4a4>)
 800a95c:	f7f6 f8be 	bl	8000adc <__addsf3>
 800a960:	4631      	mov	r1, r6
 800a962:	f7f6 f9c3 	bl	8000cec <__aeabi_fmul>
 800a966:	4953      	ldr	r1, [pc, #332]	; (800aab4 <__ieee754_powf+0x4a8>)
 800a968:	f7f6 f8b8 	bl	8000adc <__addsf3>
 800a96c:	4631      	mov	r1, r6
 800a96e:	f7f6 f9bd 	bl	8000cec <__aeabi_fmul>
 800a972:	4951      	ldr	r1, [pc, #324]	; (800aab8 <__ieee754_powf+0x4ac>)
 800a974:	f7f6 f8b2 	bl	8000adc <__addsf3>
 800a978:	4631      	mov	r1, r6
 800a97a:	4682      	mov	sl, r0
 800a97c:	4630      	mov	r0, r6
 800a97e:	f7f6 f9b5 	bl	8000cec <__aeabi_fmul>
 800a982:	4601      	mov	r1, r0
 800a984:	4650      	mov	r0, sl
 800a986:	f7f6 f9b1 	bl	8000cec <__aeabi_fmul>
 800a98a:	4606      	mov	r6, r0
 800a98c:	4649      	mov	r1, r9
 800a98e:	4640      	mov	r0, r8
 800a990:	f7f6 f8a4 	bl	8000adc <__addsf3>
 800a994:	4659      	mov	r1, fp
 800a996:	f7f6 f9a9 	bl	8000cec <__aeabi_fmul>
 800a99a:	4631      	mov	r1, r6
 800a99c:	f7f6 f89e 	bl	8000adc <__addsf3>
 800a9a0:	4641      	mov	r1, r8
 800a9a2:	4682      	mov	sl, r0
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	f7f6 f9a1 	bl	8000cec <__aeabi_fmul>
 800a9aa:	4944      	ldr	r1, [pc, #272]	; (800aabc <__ieee754_powf+0x4b0>)
 800a9ac:	9002      	str	r0, [sp, #8]
 800a9ae:	f7f6 f895 	bl	8000adc <__addsf3>
 800a9b2:	4651      	mov	r1, sl
 800a9b4:	f7f6 f892 	bl	8000adc <__addsf3>
 800a9b8:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 800a9bc:	f026 060f 	bic.w	r6, r6, #15
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	f7f6 f992 	bl	8000cec <__aeabi_fmul>
 800a9c8:	493c      	ldr	r1, [pc, #240]	; (800aabc <__ieee754_powf+0x4b0>)
 800a9ca:	4680      	mov	r8, r0
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	f7f6 f883 	bl	8000ad8 <__aeabi_fsub>
 800a9d2:	9b02      	ldr	r3, [sp, #8]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f7f6 f87f 	bl	8000ad8 <__aeabi_fsub>
 800a9da:	4601      	mov	r1, r0
 800a9dc:	4650      	mov	r0, sl
 800a9de:	f7f6 f87b 	bl	8000ad8 <__aeabi_fsub>
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	f7f6 f982 	bl	8000cec <__aeabi_fmul>
 800a9e8:	4659      	mov	r1, fp
 800a9ea:	4681      	mov	r9, r0
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7f6 f97d 	bl	8000cec <__aeabi_fmul>
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	4648      	mov	r0, r9
 800a9f6:	f7f6 f871 	bl	8000adc <__addsf3>
 800a9fa:	4682      	mov	sl, r0
 800a9fc:	4601      	mov	r1, r0
 800a9fe:	4640      	mov	r0, r8
 800aa00:	f7f6 f86c 	bl	8000adc <__addsf3>
 800aa04:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800aa08:	f029 090f 	bic.w	r9, r9, #15
 800aa0c:	492c      	ldr	r1, [pc, #176]	; (800aac0 <__ieee754_powf+0x4b4>)
 800aa0e:	4648      	mov	r0, r9
 800aa10:	f7f6 f96c 	bl	8000cec <__aeabi_fmul>
 800aa14:	4641      	mov	r1, r8
 800aa16:	4606      	mov	r6, r0
 800aa18:	4648      	mov	r0, r9
 800aa1a:	f7f6 f85d 	bl	8000ad8 <__aeabi_fsub>
 800aa1e:	4601      	mov	r1, r0
 800aa20:	4650      	mov	r0, sl
 800aa22:	f7f6 f859 	bl	8000ad8 <__aeabi_fsub>
 800aa26:	4927      	ldr	r1, [pc, #156]	; (800aac4 <__ieee754_powf+0x4b8>)
 800aa28:	f7f6 f960 	bl	8000cec <__aeabi_fmul>
 800aa2c:	4926      	ldr	r1, [pc, #152]	; (800aac8 <__ieee754_powf+0x4bc>)
 800aa2e:	4680      	mov	r8, r0
 800aa30:	4648      	mov	r0, r9
 800aa32:	f7f6 f95b 	bl	8000cec <__aeabi_fmul>
 800aa36:	4601      	mov	r1, r0
 800aa38:	4640      	mov	r0, r8
 800aa3a:	f7f6 f84f 	bl	8000adc <__addsf3>
 800aa3e:	4b23      	ldr	r3, [pc, #140]	; (800aacc <__ieee754_powf+0x4c0>)
 800aa40:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800aa44:	f7f6 f84a 	bl	8000adc <__addsf3>
 800aa48:	9a05      	ldr	r2, [sp, #20]
 800aa4a:	4680      	mov	r8, r0
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	f7f6 f8f9 	bl	8000c44 <__aeabi_i2f>
 800aa52:	4681      	mov	r9, r0
 800aa54:	4b1e      	ldr	r3, [pc, #120]	; (800aad0 <__ieee754_powf+0x4c4>)
 800aa56:	4641      	mov	r1, r8
 800aa58:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f7f6 f83d 	bl	8000adc <__addsf3>
 800aa62:	4639      	mov	r1, r7
 800aa64:	f7f6 f83a 	bl	8000adc <__addsf3>
 800aa68:	4649      	mov	r1, r9
 800aa6a:	f7f6 f837 	bl	8000adc <__addsf3>
 800aa6e:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800aa72:	f02a 0a0f 	bic.w	sl, sl, #15
 800aa76:	4649      	mov	r1, r9
 800aa78:	4650      	mov	r0, sl
 800aa7a:	f7f6 f82d 	bl	8000ad8 <__aeabi_fsub>
 800aa7e:	4639      	mov	r1, r7
 800aa80:	f7f6 f82a 	bl	8000ad8 <__aeabi_fsub>
 800aa84:	4631      	mov	r1, r6
 800aa86:	f7f6 f827 	bl	8000ad8 <__aeabi_fsub>
 800aa8a:	4601      	mov	r1, r0
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	e6a4      	b.n	800a7da <__ieee754_powf+0x1ce>
 800aa90:	2200      	movs	r2, #0
 800aa92:	e6fa      	b.n	800a88a <__ieee754_powf+0x27e>
 800aa94:	2701      	movs	r7, #1
 800aa96:	e70a      	b.n	800a8ae <__ieee754_powf+0x2a2>
 800aa98:	001cc471 	.word	0x001cc471
 800aa9c:	005db3d6 	.word	0x005db3d6
 800aaa0:	0800bb78 	.word	0x0800bb78
 800aaa4:	3e53f142 	.word	0x3e53f142
 800aaa8:	3e6c3255 	.word	0x3e6c3255
 800aaac:	3e8ba305 	.word	0x3e8ba305
 800aab0:	3eaaaaab 	.word	0x3eaaaaab
 800aab4:	3edb6db7 	.word	0x3edb6db7
 800aab8:	3f19999a 	.word	0x3f19999a
 800aabc:	40400000 	.word	0x40400000
 800aac0:	3f763800 	.word	0x3f763800
 800aac4:	3f76384f 	.word	0x3f76384f
 800aac8:	369dc3a0 	.word	0x369dc3a0
 800aacc:	0800bb88 	.word	0x0800bb88
 800aad0:	0800bb80 	.word	0x0800bb80
 800aad4:	f040 80c1 	bne.w	800ac5a <__ieee754_powf+0x64e>
 800aad8:	4966      	ldr	r1, [pc, #408]	; (800ac74 <__ieee754_powf+0x668>)
 800aada:	4630      	mov	r0, r6
 800aadc:	f7f5 fffe 	bl	8000adc <__addsf3>
 800aae0:	4639      	mov	r1, r7
 800aae2:	4681      	mov	r9, r0
 800aae4:	4650      	mov	r0, sl
 800aae6:	f7f5 fff7 	bl	8000ad8 <__aeabi_fsub>
 800aaea:	4601      	mov	r1, r0
 800aaec:	4648      	mov	r0, r9
 800aaee:	f7f6 fab9 	bl	8001064 <__aeabi_fcmpgt>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	f47f aea5 	bne.w	800a842 <__ieee754_powf+0x236>
 800aaf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aafc:	15e4      	asrs	r4, r4, #23
 800aafe:	3c7e      	subs	r4, #126	; 0x7e
 800ab00:	4123      	asrs	r3, r4
 800ab02:	4443      	add	r3, r8
 800ab04:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ab08:	495b      	ldr	r1, [pc, #364]	; (800ac78 <__ieee754_powf+0x66c>)
 800ab0a:	3a7f      	subs	r2, #127	; 0x7f
 800ab0c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800ab10:	4111      	asrs	r1, r2
 800ab12:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800ab16:	f1c2 0217 	rsb	r2, r2, #23
 800ab1a:	4114      	asrs	r4, r2
 800ab1c:	f1b8 0f00 	cmp.w	r8, #0
 800ab20:	ea23 0101 	bic.w	r1, r3, r1
 800ab24:	4638      	mov	r0, r7
 800ab26:	bfb8      	it	lt
 800ab28:	4264      	neglt	r4, r4
 800ab2a:	f7f5 ffd5 	bl	8000ad8 <__aeabi_fsub>
 800ab2e:	4681      	mov	r9, r0
 800ab30:	4631      	mov	r1, r6
 800ab32:	4648      	mov	r0, r9
 800ab34:	f7f5 ffd2 	bl	8000adc <__addsf3>
 800ab38:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800ab3c:	f027 070f 	bic.w	r7, r7, #15
 800ab40:	494e      	ldr	r1, [pc, #312]	; (800ac7c <__ieee754_powf+0x670>)
 800ab42:	4638      	mov	r0, r7
 800ab44:	f7f6 f8d2 	bl	8000cec <__aeabi_fmul>
 800ab48:	4649      	mov	r1, r9
 800ab4a:	4680      	mov	r8, r0
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	f7f5 ffc3 	bl	8000ad8 <__aeabi_fsub>
 800ab52:	4601      	mov	r1, r0
 800ab54:	4630      	mov	r0, r6
 800ab56:	f7f5 ffbf 	bl	8000ad8 <__aeabi_fsub>
 800ab5a:	4949      	ldr	r1, [pc, #292]	; (800ac80 <__ieee754_powf+0x674>)
 800ab5c:	f7f6 f8c6 	bl	8000cec <__aeabi_fmul>
 800ab60:	4948      	ldr	r1, [pc, #288]	; (800ac84 <__ieee754_powf+0x678>)
 800ab62:	4606      	mov	r6, r0
 800ab64:	4638      	mov	r0, r7
 800ab66:	f7f6 f8c1 	bl	8000cec <__aeabi_fmul>
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f7f5 ffb5 	bl	8000adc <__addsf3>
 800ab72:	4607      	mov	r7, r0
 800ab74:	4601      	mov	r1, r0
 800ab76:	4640      	mov	r0, r8
 800ab78:	f7f5 ffb0 	bl	8000adc <__addsf3>
 800ab7c:	4641      	mov	r1, r8
 800ab7e:	4606      	mov	r6, r0
 800ab80:	f7f5 ffaa 	bl	8000ad8 <__aeabi_fsub>
 800ab84:	4601      	mov	r1, r0
 800ab86:	4638      	mov	r0, r7
 800ab88:	f7f5 ffa6 	bl	8000ad8 <__aeabi_fsub>
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4680      	mov	r8, r0
 800ab90:	4630      	mov	r0, r6
 800ab92:	f7f6 f8ab 	bl	8000cec <__aeabi_fmul>
 800ab96:	4607      	mov	r7, r0
 800ab98:	493b      	ldr	r1, [pc, #236]	; (800ac88 <__ieee754_powf+0x67c>)
 800ab9a:	f7f6 f8a7 	bl	8000cec <__aeabi_fmul>
 800ab9e:	493b      	ldr	r1, [pc, #236]	; (800ac8c <__ieee754_powf+0x680>)
 800aba0:	f7f5 ff9a 	bl	8000ad8 <__aeabi_fsub>
 800aba4:	4639      	mov	r1, r7
 800aba6:	f7f6 f8a1 	bl	8000cec <__aeabi_fmul>
 800abaa:	4939      	ldr	r1, [pc, #228]	; (800ac90 <__ieee754_powf+0x684>)
 800abac:	f7f5 ff96 	bl	8000adc <__addsf3>
 800abb0:	4639      	mov	r1, r7
 800abb2:	f7f6 f89b 	bl	8000cec <__aeabi_fmul>
 800abb6:	4937      	ldr	r1, [pc, #220]	; (800ac94 <__ieee754_powf+0x688>)
 800abb8:	f7f5 ff8e 	bl	8000ad8 <__aeabi_fsub>
 800abbc:	4639      	mov	r1, r7
 800abbe:	f7f6 f895 	bl	8000cec <__aeabi_fmul>
 800abc2:	4935      	ldr	r1, [pc, #212]	; (800ac98 <__ieee754_powf+0x68c>)
 800abc4:	f7f5 ff8a 	bl	8000adc <__addsf3>
 800abc8:	4639      	mov	r1, r7
 800abca:	f7f6 f88f 	bl	8000cec <__aeabi_fmul>
 800abce:	4601      	mov	r1, r0
 800abd0:	4630      	mov	r0, r6
 800abd2:	f7f5 ff81 	bl	8000ad8 <__aeabi_fsub>
 800abd6:	4607      	mov	r7, r0
 800abd8:	4601      	mov	r1, r0
 800abda:	4630      	mov	r0, r6
 800abdc:	f7f6 f886 	bl	8000cec <__aeabi_fmul>
 800abe0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800abe4:	4681      	mov	r9, r0
 800abe6:	4638      	mov	r0, r7
 800abe8:	f7f5 ff76 	bl	8000ad8 <__aeabi_fsub>
 800abec:	4601      	mov	r1, r0
 800abee:	4648      	mov	r0, r9
 800abf0:	f7f6 f930 	bl	8000e54 <__aeabi_fdiv>
 800abf4:	4641      	mov	r1, r8
 800abf6:	4607      	mov	r7, r0
 800abf8:	4630      	mov	r0, r6
 800abfa:	f7f6 f877 	bl	8000cec <__aeabi_fmul>
 800abfe:	4641      	mov	r1, r8
 800ac00:	f7f5 ff6c 	bl	8000adc <__addsf3>
 800ac04:	4601      	mov	r1, r0
 800ac06:	4638      	mov	r0, r7
 800ac08:	f7f5 ff66 	bl	8000ad8 <__aeabi_fsub>
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	f7f5 ff63 	bl	8000ad8 <__aeabi_fsub>
 800ac12:	4601      	mov	r1, r0
 800ac14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ac18:	f7f5 ff5e 	bl	8000ad8 <__aeabi_fsub>
 800ac1c:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800ac20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac24:	da1f      	bge.n	800ac66 <__ieee754_powf+0x65a>
 800ac26:	4621      	mov	r1, r4
 800ac28:	f000 fab4 	bl	800b194 <scalbnf>
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	e54a      	b.n	800a6c6 <__ieee754_powf+0xba>
 800ac30:	4b1a      	ldr	r3, [pc, #104]	; (800ac9c <__ieee754_powf+0x690>)
 800ac32:	429c      	cmp	r4, r3
 800ac34:	dd05      	ble.n	800ac42 <__ieee754_powf+0x636>
 800ac36:	491a      	ldr	r1, [pc, #104]	; (800aca0 <__ieee754_powf+0x694>)
 800ac38:	4628      	mov	r0, r5
 800ac3a:	f7f6 f857 	bl	8000cec <__aeabi_fmul>
 800ac3e:	4918      	ldr	r1, [pc, #96]	; (800aca0 <__ieee754_powf+0x694>)
 800ac40:	e541      	b.n	800a6c6 <__ieee754_powf+0xba>
 800ac42:	d10a      	bne.n	800ac5a <__ieee754_powf+0x64e>
 800ac44:	4639      	mov	r1, r7
 800ac46:	f7f5 ff47 	bl	8000ad8 <__aeabi_fsub>
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	f7f6 f9f5 	bl	800103c <__aeabi_fcmple>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	f43f af50 	beq.w	800aaf8 <__ieee754_powf+0x4ec>
 800ac58:	e7ed      	b.n	800ac36 <__ieee754_powf+0x62a>
 800ac5a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ac5e:	f73f af4b 	bgt.w	800aaf8 <__ieee754_powf+0x4ec>
 800ac62:	2400      	movs	r4, #0
 800ac64:	e764      	b.n	800ab30 <__ieee754_powf+0x524>
 800ac66:	4618      	mov	r0, r3
 800ac68:	e7e0      	b.n	800ac2c <__ieee754_powf+0x620>
 800ac6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ac6e:	e517      	b.n	800a6a0 <__ieee754_powf+0x94>
 800ac70:	9901      	ldr	r1, [sp, #4]
 800ac72:	e515      	b.n	800a6a0 <__ieee754_powf+0x94>
 800ac74:	3338aa3c 	.word	0x3338aa3c
 800ac78:	007fffff 	.word	0x007fffff
 800ac7c:	3f317200 	.word	0x3f317200
 800ac80:	3f317218 	.word	0x3f317218
 800ac84:	35bfbe8c 	.word	0x35bfbe8c
 800ac88:	3331bb4c 	.word	0x3331bb4c
 800ac8c:	35ddea0e 	.word	0x35ddea0e
 800ac90:	388ab355 	.word	0x388ab355
 800ac94:	3b360b61 	.word	0x3b360b61
 800ac98:	3e2aaaab 	.word	0x3e2aaaab
 800ac9c:	43160000 	.word	0x43160000
 800aca0:	0da24260 	.word	0x0da24260

0800aca4 <__ieee754_sqrtf>:
 800aca4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800aca8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	4603      	mov	r3, r0
 800acb0:	4604      	mov	r4, r0
 800acb2:	d309      	bcc.n	800acc8 <__ieee754_sqrtf+0x24>
 800acb4:	4601      	mov	r1, r0
 800acb6:	f7f6 f819 	bl	8000cec <__aeabi_fmul>
 800acba:	4601      	mov	r1, r0
 800acbc:	4620      	mov	r0, r4
 800acbe:	f7f5 ff0d 	bl	8000adc <__addsf3>
 800acc2:	4604      	mov	r4, r0
 800acc4:	4620      	mov	r0, r4
 800acc6:	bd70      	pop	{r4, r5, r6, pc}
 800acc8:	2a00      	cmp	r2, #0
 800acca:	d0fb      	beq.n	800acc4 <__ieee754_sqrtf+0x20>
 800accc:	2800      	cmp	r0, #0
 800acce:	da06      	bge.n	800acde <__ieee754_sqrtf+0x3a>
 800acd0:	4601      	mov	r1, r0
 800acd2:	f7f5 ff01 	bl	8000ad8 <__aeabi_fsub>
 800acd6:	4601      	mov	r1, r0
 800acd8:	f7f6 f8bc 	bl	8000e54 <__aeabi_fdiv>
 800acdc:	e7f1      	b.n	800acc2 <__ieee754_sqrtf+0x1e>
 800acde:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800ace2:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800ace6:	d204      	bcs.n	800acf2 <__ieee754_sqrtf+0x4e>
 800ace8:	2200      	movs	r2, #0
 800acea:	0219      	lsls	r1, r3, #8
 800acec:	d529      	bpl.n	800ad42 <__ieee754_sqrtf+0x9e>
 800acee:	3a01      	subs	r2, #1
 800acf0:	1aa4      	subs	r4, r4, r2
 800acf2:	3c7f      	subs	r4, #127	; 0x7f
 800acf4:	07e2      	lsls	r2, r4, #31
 800acf6:	f04f 0200 	mov.w	r2, #0
 800acfa:	ea4f 0164 	mov.w	r1, r4, asr #1
 800acfe:	4616      	mov	r6, r2
 800ad00:	f04f 0419 	mov.w	r4, #25
 800ad04:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800ad08:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ad0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ad10:	bf48      	it	mi
 800ad12:	005b      	lslmi	r3, r3, #1
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	1835      	adds	r5, r6, r0
 800ad18:	429d      	cmp	r5, r3
 800ad1a:	bfde      	ittt	le
 800ad1c:	182e      	addle	r6, r5, r0
 800ad1e:	1b5b      	suble	r3, r3, r5
 800ad20:	1812      	addle	r2, r2, r0
 800ad22:	3c01      	subs	r4, #1
 800ad24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad28:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ad2c:	d1f3      	bne.n	800ad16 <__ieee754_sqrtf+0x72>
 800ad2e:	b113      	cbz	r3, 800ad36 <__ieee754_sqrtf+0x92>
 800ad30:	3201      	adds	r2, #1
 800ad32:	f022 0201 	bic.w	r2, r2, #1
 800ad36:	1054      	asrs	r4, r2, #1
 800ad38:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800ad3c:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800ad40:	e7c0      	b.n	800acc4 <__ieee754_sqrtf+0x20>
 800ad42:	005b      	lsls	r3, r3, #1
 800ad44:	3201      	adds	r2, #1
 800ad46:	e7d0      	b.n	800acea <__ieee754_sqrtf+0x46>

0800ad48 <fabs>:
 800ad48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ad4c:	4770      	bx	lr

0800ad4e <finite>:
 800ad4e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800ad52:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800ad56:	0fc0      	lsrs	r0, r0, #31
 800ad58:	4770      	bx	lr

0800ad5a <matherr>:
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	4770      	bx	lr
	...

0800ad60 <nan>:
 800ad60:	2000      	movs	r0, #0
 800ad62:	4901      	ldr	r1, [pc, #4]	; (800ad68 <nan+0x8>)
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	7ff80000 	.word	0x7ff80000

0800ad6c <rint>:
 800ad6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad6e:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 800ad72:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 800ad76:	2f13      	cmp	r7, #19
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4684      	mov	ip, r0
 800ad7e:	460c      	mov	r4, r1
 800ad80:	4605      	mov	r5, r0
 800ad82:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800ad86:	dc56      	bgt.n	800ae36 <rint+0xca>
 800ad88:	2f00      	cmp	r7, #0
 800ad8a:	da29      	bge.n	800ade0 <rint+0x74>
 800ad8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ad90:	4301      	orrs	r1, r0
 800ad92:	d021      	beq.n	800add8 <rint+0x6c>
 800ad94:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800ad98:	4305      	orrs	r5, r0
 800ad9a:	426b      	negs	r3, r5
 800ad9c:	432b      	orrs	r3, r5
 800ad9e:	0b1b      	lsrs	r3, r3, #12
 800ada0:	0c64      	lsrs	r4, r4, #17
 800ada2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ada6:	0464      	lsls	r4, r4, #17
 800ada8:	ea43 0104 	orr.w	r1, r3, r4
 800adac:	4b31      	ldr	r3, [pc, #196]	; (800ae74 <rint+0x108>)
 800adae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800adb2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800adb6:	4622      	mov	r2, r4
 800adb8:	462b      	mov	r3, r5
 800adba:	f7f5 f9d7 	bl	800016c <__adddf3>
 800adbe:	e9cd 0100 	strd	r0, r1, [sp]
 800adc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adc6:	4622      	mov	r2, r4
 800adc8:	462b      	mov	r3, r5
 800adca:	f7f5 f9cd 	bl	8000168 <__aeabi_dsub>
 800adce:	4602      	mov	r2, r0
 800add0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800add4:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 800add8:	4610      	mov	r0, r2
 800adda:	4619      	mov	r1, r3
 800addc:	b003      	add	sp, #12
 800adde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade0:	4925      	ldr	r1, [pc, #148]	; (800ae78 <rint+0x10c>)
 800ade2:	4139      	asrs	r1, r7
 800ade4:	ea03 0001 	and.w	r0, r3, r1
 800ade8:	4310      	orrs	r0, r2
 800adea:	d0f5      	beq.n	800add8 <rint+0x6c>
 800adec:	084b      	lsrs	r3, r1, #1
 800adee:	ea04 0203 	and.w	r2, r4, r3
 800adf2:	ea52 050c 	orrs.w	r5, r2, ip
 800adf6:	d00a      	beq.n	800ae0e <rint+0xa2>
 800adf8:	ea24 0303 	bic.w	r3, r4, r3
 800adfc:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ae00:	2f13      	cmp	r7, #19
 800ae02:	bf0c      	ite	eq
 800ae04:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ae08:	2500      	movne	r5, #0
 800ae0a:	413c      	asrs	r4, r7
 800ae0c:	431c      	orrs	r4, r3
 800ae0e:	4b19      	ldr	r3, [pc, #100]	; (800ae74 <rint+0x108>)
 800ae10:	4621      	mov	r1, r4
 800ae12:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ae16:	4628      	mov	r0, r5
 800ae18:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	462b      	mov	r3, r5
 800ae20:	f7f5 f9a4 	bl	800016c <__adddf3>
 800ae24:	e9cd 0100 	strd	r0, r1, [sp]
 800ae28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	462b      	mov	r3, r5
 800ae30:	f7f5 f99a 	bl	8000168 <__aeabi_dsub>
 800ae34:	e006      	b.n	800ae44 <rint+0xd8>
 800ae36:	2f33      	cmp	r7, #51	; 0x33
 800ae38:	dd07      	ble.n	800ae4a <rint+0xde>
 800ae3a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800ae3e:	d1cb      	bne.n	800add8 <rint+0x6c>
 800ae40:	f7f5 f994 	bl	800016c <__adddf3>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	e7c6      	b.n	800add8 <rint+0x6c>
 800ae4a:	f04f 31ff 	mov.w	r1, #4294967295
 800ae4e:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 800ae52:	fa21 f10e 	lsr.w	r1, r1, lr
 800ae56:	4208      	tst	r0, r1
 800ae58:	d0be      	beq.n	800add8 <rint+0x6c>
 800ae5a:	084b      	lsrs	r3, r1, #1
 800ae5c:	4218      	tst	r0, r3
 800ae5e:	bf1f      	itttt	ne
 800ae60:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800ae64:	ea20 0303 	bicne.w	r3, r0, r3
 800ae68:	fa45 fe0e 	asrne.w	lr, r5, lr
 800ae6c:	ea4e 0503 	orrne.w	r5, lr, r3
 800ae70:	e7cd      	b.n	800ae0e <rint+0xa2>
 800ae72:	bf00      	nop
 800ae74:	0800bb90 	.word	0x0800bb90
 800ae78:	000fffff 	.word	0x000fffff
 800ae7c:	00000000 	.word	0x00000000

0800ae80 <scalbn>:
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae82:	4616      	mov	r6, r2
 800ae84:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ae88:	4604      	mov	r4, r0
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	b98a      	cbnz	r2, 800aeb4 <scalbn+0x34>
 800ae90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae94:	4303      	orrs	r3, r0
 800ae96:	d035      	beq.n	800af04 <scalbn+0x84>
 800ae98:	2200      	movs	r2, #0
 800ae9a:	4b2d      	ldr	r3, [pc, #180]	; (800af50 <scalbn+0xd0>)
 800ae9c:	f7f5 fb18 	bl	80004d0 <__aeabi_dmul>
 800aea0:	4a2c      	ldr	r2, [pc, #176]	; (800af54 <scalbn+0xd4>)
 800aea2:	4604      	mov	r4, r0
 800aea4:	4296      	cmp	r6, r2
 800aea6:	460d      	mov	r5, r1
 800aea8:	460b      	mov	r3, r1
 800aeaa:	da0e      	bge.n	800aeca <scalbn+0x4a>
 800aeac:	a324      	add	r3, pc, #144	; (adr r3, 800af40 <scalbn+0xc0>)
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	e01c      	b.n	800aeee <scalbn+0x6e>
 800aeb4:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800aeb8:	42ba      	cmp	r2, r7
 800aeba:	d109      	bne.n	800aed0 <scalbn+0x50>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	f7f5 f954 	bl	800016c <__adddf3>
 800aec4:	4604      	mov	r4, r0
 800aec6:	460d      	mov	r5, r1
 800aec8:	e01c      	b.n	800af04 <scalbn+0x84>
 800aeca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aece:	3a36      	subs	r2, #54	; 0x36
 800aed0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aed4:	4432      	add	r2, r6
 800aed6:	428a      	cmp	r2, r1
 800aed8:	dd0c      	ble.n	800aef4 <scalbn+0x74>
 800aeda:	4622      	mov	r2, r4
 800aedc:	462b      	mov	r3, r5
 800aede:	a11a      	add	r1, pc, #104	; (adr r1, 800af48 <scalbn+0xc8>)
 800aee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aee4:	f000 f9a2 	bl	800b22c <copysign>
 800aee8:	a317      	add	r3, pc, #92	; (adr r3, 800af48 <scalbn+0xc8>)
 800aeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeee:	f7f5 faef 	bl	80004d0 <__aeabi_dmul>
 800aef2:	e7e7      	b.n	800aec4 <scalbn+0x44>
 800aef4:	2a00      	cmp	r2, #0
 800aef6:	dd08      	ble.n	800af0a <scalbn+0x8a>
 800aef8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aefc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af04:	4620      	mov	r0, r4
 800af06:	4629      	mov	r1, r5
 800af08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af0a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800af0e:	da0b      	bge.n	800af28 <scalbn+0xa8>
 800af10:	f24c 3350 	movw	r3, #50000	; 0xc350
 800af14:	429e      	cmp	r6, r3
 800af16:	4622      	mov	r2, r4
 800af18:	462b      	mov	r3, r5
 800af1a:	dce0      	bgt.n	800aede <scalbn+0x5e>
 800af1c:	a108      	add	r1, pc, #32	; (adr r1, 800af40 <scalbn+0xc0>)
 800af1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af22:	f000 f983 	bl	800b22c <copysign>
 800af26:	e7c1      	b.n	800aeac <scalbn+0x2c>
 800af28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af2c:	3236      	adds	r2, #54	; 0x36
 800af2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af36:	4620      	mov	r0, r4
 800af38:	4629      	mov	r1, r5
 800af3a:	2200      	movs	r2, #0
 800af3c:	4b06      	ldr	r3, [pc, #24]	; (800af58 <scalbn+0xd8>)
 800af3e:	e7d6      	b.n	800aeee <scalbn+0x6e>
 800af40:	c2f8f359 	.word	0xc2f8f359
 800af44:	01a56e1f 	.word	0x01a56e1f
 800af48:	8800759c 	.word	0x8800759c
 800af4c:	7e37e43c 	.word	0x7e37e43c
 800af50:	43500000 	.word	0x43500000
 800af54:	ffff3cb0 	.word	0xffff3cb0
 800af58:	3c900000 	.word	0x3c900000

0800af5c <atanf>:
 800af5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af60:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800af64:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800af68:	4604      	mov	r4, r0
 800af6a:	4607      	mov	r7, r0
 800af6c:	db0e      	blt.n	800af8c <atanf+0x30>
 800af6e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800af72:	dd04      	ble.n	800af7e <atanf+0x22>
 800af74:	4601      	mov	r1, r0
 800af76:	f7f5 fdb1 	bl	8000adc <__addsf3>
 800af7a:	4604      	mov	r4, r0
 800af7c:	e003      	b.n	800af86 <atanf+0x2a>
 800af7e:	2800      	cmp	r0, #0
 800af80:	f300 80d2 	bgt.w	800b128 <atanf+0x1cc>
 800af84:	4c69      	ldr	r4, [pc, #420]	; (800b12c <atanf+0x1d0>)
 800af86:	4620      	mov	r0, r4
 800af88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af8c:	4b68      	ldr	r3, [pc, #416]	; (800b130 <atanf+0x1d4>)
 800af8e:	429d      	cmp	r5, r3
 800af90:	dc0e      	bgt.n	800afb0 <atanf+0x54>
 800af92:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800af96:	da08      	bge.n	800afaa <atanf+0x4e>
 800af98:	4966      	ldr	r1, [pc, #408]	; (800b134 <atanf+0x1d8>)
 800af9a:	f7f5 fd9f 	bl	8000adc <__addsf3>
 800af9e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800afa2:	f7f6 f85f 	bl	8001064 <__aeabi_fcmpgt>
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d1ed      	bne.n	800af86 <atanf+0x2a>
 800afaa:	f04f 36ff 	mov.w	r6, #4294967295
 800afae:	e01c      	b.n	800afea <atanf+0x8e>
 800afb0:	f000 f8e4 	bl	800b17c <fabsf>
 800afb4:	4b60      	ldr	r3, [pc, #384]	; (800b138 <atanf+0x1dc>)
 800afb6:	4604      	mov	r4, r0
 800afb8:	429d      	cmp	r5, r3
 800afba:	dc7c      	bgt.n	800b0b6 <atanf+0x15a>
 800afbc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800afc0:	429d      	cmp	r5, r3
 800afc2:	dc67      	bgt.n	800b094 <atanf+0x138>
 800afc4:	4601      	mov	r1, r0
 800afc6:	f7f5 fd89 	bl	8000adc <__addsf3>
 800afca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800afce:	f7f5 fd83 	bl	8000ad8 <__aeabi_fsub>
 800afd2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800afd6:	4605      	mov	r5, r0
 800afd8:	4620      	mov	r0, r4
 800afda:	f7f5 fd7f 	bl	8000adc <__addsf3>
 800afde:	4601      	mov	r1, r0
 800afe0:	4628      	mov	r0, r5
 800afe2:	f7f5 ff37 	bl	8000e54 <__aeabi_fdiv>
 800afe6:	2600      	movs	r6, #0
 800afe8:	4604      	mov	r4, r0
 800afea:	4621      	mov	r1, r4
 800afec:	4620      	mov	r0, r4
 800afee:	f7f5 fe7d 	bl	8000cec <__aeabi_fmul>
 800aff2:	4601      	mov	r1, r0
 800aff4:	4680      	mov	r8, r0
 800aff6:	f7f5 fe79 	bl	8000cec <__aeabi_fmul>
 800affa:	4605      	mov	r5, r0
 800affc:	494f      	ldr	r1, [pc, #316]	; (800b13c <atanf+0x1e0>)
 800affe:	f7f5 fe75 	bl	8000cec <__aeabi_fmul>
 800b002:	494f      	ldr	r1, [pc, #316]	; (800b140 <atanf+0x1e4>)
 800b004:	f7f5 fd6a 	bl	8000adc <__addsf3>
 800b008:	4629      	mov	r1, r5
 800b00a:	f7f5 fe6f 	bl	8000cec <__aeabi_fmul>
 800b00e:	494d      	ldr	r1, [pc, #308]	; (800b144 <atanf+0x1e8>)
 800b010:	f7f5 fd64 	bl	8000adc <__addsf3>
 800b014:	4629      	mov	r1, r5
 800b016:	f7f5 fe69 	bl	8000cec <__aeabi_fmul>
 800b01a:	494b      	ldr	r1, [pc, #300]	; (800b148 <atanf+0x1ec>)
 800b01c:	f7f5 fd5e 	bl	8000adc <__addsf3>
 800b020:	4629      	mov	r1, r5
 800b022:	f7f5 fe63 	bl	8000cec <__aeabi_fmul>
 800b026:	4949      	ldr	r1, [pc, #292]	; (800b14c <atanf+0x1f0>)
 800b028:	f7f5 fd58 	bl	8000adc <__addsf3>
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7f5 fe5d 	bl	8000cec <__aeabi_fmul>
 800b032:	4947      	ldr	r1, [pc, #284]	; (800b150 <atanf+0x1f4>)
 800b034:	f7f5 fd52 	bl	8000adc <__addsf3>
 800b038:	4641      	mov	r1, r8
 800b03a:	f7f5 fe57 	bl	8000cec <__aeabi_fmul>
 800b03e:	4945      	ldr	r1, [pc, #276]	; (800b154 <atanf+0x1f8>)
 800b040:	4680      	mov	r8, r0
 800b042:	4628      	mov	r0, r5
 800b044:	f7f5 fe52 	bl	8000cec <__aeabi_fmul>
 800b048:	4943      	ldr	r1, [pc, #268]	; (800b158 <atanf+0x1fc>)
 800b04a:	f7f5 fd45 	bl	8000ad8 <__aeabi_fsub>
 800b04e:	4629      	mov	r1, r5
 800b050:	f7f5 fe4c 	bl	8000cec <__aeabi_fmul>
 800b054:	4941      	ldr	r1, [pc, #260]	; (800b15c <atanf+0x200>)
 800b056:	f7f5 fd3f 	bl	8000ad8 <__aeabi_fsub>
 800b05a:	4629      	mov	r1, r5
 800b05c:	f7f5 fe46 	bl	8000cec <__aeabi_fmul>
 800b060:	493f      	ldr	r1, [pc, #252]	; (800b160 <atanf+0x204>)
 800b062:	f7f5 fd39 	bl	8000ad8 <__aeabi_fsub>
 800b066:	4629      	mov	r1, r5
 800b068:	f7f5 fe40 	bl	8000cec <__aeabi_fmul>
 800b06c:	493d      	ldr	r1, [pc, #244]	; (800b164 <atanf+0x208>)
 800b06e:	f7f5 fd33 	bl	8000ad8 <__aeabi_fsub>
 800b072:	4629      	mov	r1, r5
 800b074:	f7f5 fe3a 	bl	8000cec <__aeabi_fmul>
 800b078:	1c73      	adds	r3, r6, #1
 800b07a:	4601      	mov	r1, r0
 800b07c:	4640      	mov	r0, r8
 800b07e:	d139      	bne.n	800b0f4 <atanf+0x198>
 800b080:	f7f5 fd2c 	bl	8000adc <__addsf3>
 800b084:	4621      	mov	r1, r4
 800b086:	f7f5 fe31 	bl	8000cec <__aeabi_fmul>
 800b08a:	4601      	mov	r1, r0
 800b08c:	4620      	mov	r0, r4
 800b08e:	f7f5 fd23 	bl	8000ad8 <__aeabi_fsub>
 800b092:	e772      	b.n	800af7a <atanf+0x1e>
 800b094:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b098:	f7f5 fd1e 	bl	8000ad8 <__aeabi_fsub>
 800b09c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b0a0:	4605      	mov	r5, r0
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f7f5 fd1a 	bl	8000adc <__addsf3>
 800b0a8:	4601      	mov	r1, r0
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f7f5 fed2 	bl	8000e54 <__aeabi_fdiv>
 800b0b0:	2601      	movs	r6, #1
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	e799      	b.n	800afea <atanf+0x8e>
 800b0b6:	4b2c      	ldr	r3, [pc, #176]	; (800b168 <atanf+0x20c>)
 800b0b8:	429d      	cmp	r5, r3
 800b0ba:	dc14      	bgt.n	800b0e6 <atanf+0x18a>
 800b0bc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b0c0:	f7f5 fd0a 	bl	8000ad8 <__aeabi_fsub>
 800b0c4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7f5 fe0e 	bl	8000cec <__aeabi_fmul>
 800b0d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b0d4:	f7f5 fd02 	bl	8000adc <__addsf3>
 800b0d8:	4601      	mov	r1, r0
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f7f5 feba 	bl	8000e54 <__aeabi_fdiv>
 800b0e0:	2602      	movs	r6, #2
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	e781      	b.n	800afea <atanf+0x8e>
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	4820      	ldr	r0, [pc, #128]	; (800b16c <atanf+0x210>)
 800b0ea:	f7f5 feb3 	bl	8000e54 <__aeabi_fdiv>
 800b0ee:	2603      	movs	r6, #3
 800b0f0:	4604      	mov	r4, r0
 800b0f2:	e77a      	b.n	800afea <atanf+0x8e>
 800b0f4:	f7f5 fcf2 	bl	8000adc <__addsf3>
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	f7f5 fdf7 	bl	8000cec <__aeabi_fmul>
 800b0fe:	4b1c      	ldr	r3, [pc, #112]	; (800b170 <atanf+0x214>)
 800b100:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b104:	f7f5 fce8 	bl	8000ad8 <__aeabi_fsub>
 800b108:	4621      	mov	r1, r4
 800b10a:	f7f5 fce5 	bl	8000ad8 <__aeabi_fsub>
 800b10e:	4b19      	ldr	r3, [pc, #100]	; (800b174 <atanf+0x218>)
 800b110:	4601      	mov	r1, r0
 800b112:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b116:	f7f5 fcdf 	bl	8000ad8 <__aeabi_fsub>
 800b11a:	2f00      	cmp	r7, #0
 800b11c:	4604      	mov	r4, r0
 800b11e:	f6bf af32 	bge.w	800af86 <atanf+0x2a>
 800b122:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800b126:	e72e      	b.n	800af86 <atanf+0x2a>
 800b128:	4c13      	ldr	r4, [pc, #76]	; (800b178 <atanf+0x21c>)
 800b12a:	e72c      	b.n	800af86 <atanf+0x2a>
 800b12c:	bfc90fdb 	.word	0xbfc90fdb
 800b130:	3edfffff 	.word	0x3edfffff
 800b134:	7149f2ca 	.word	0x7149f2ca
 800b138:	3f97ffff 	.word	0x3f97ffff
 800b13c:	3c8569d7 	.word	0x3c8569d7
 800b140:	3d4bda59 	.word	0x3d4bda59
 800b144:	3d886b35 	.word	0x3d886b35
 800b148:	3dba2e6e 	.word	0x3dba2e6e
 800b14c:	3e124925 	.word	0x3e124925
 800b150:	3eaaaaab 	.word	0x3eaaaaab
 800b154:	bd15a221 	.word	0xbd15a221
 800b158:	3d6ef16b 	.word	0x3d6ef16b
 800b15c:	3d9d8795 	.word	0x3d9d8795
 800b160:	3de38e38 	.word	0x3de38e38
 800b164:	3e4ccccd 	.word	0x3e4ccccd
 800b168:	401bffff 	.word	0x401bffff
 800b16c:	bf800000 	.word	0xbf800000
 800b170:	0800bbb0 	.word	0x0800bbb0
 800b174:	0800bba0 	.word	0x0800bba0
 800b178:	3fc90fdb 	.word	0x3fc90fdb

0800b17c <fabsf>:
 800b17c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b180:	4770      	bx	lr

0800b182 <finitef>:
 800b182:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b186:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b18a:	bfac      	ite	ge
 800b18c:	2000      	movge	r0, #0
 800b18e:	2001      	movlt	r0, #1
 800b190:	4770      	bx	lr
	...

0800b194 <scalbnf>:
 800b194:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800b198:	b510      	push	{r4, lr}
 800b19a:	4602      	mov	r2, r0
 800b19c:	460c      	mov	r4, r1
 800b19e:	d028      	beq.n	800b1f2 <scalbnf+0x5e>
 800b1a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b1a4:	d304      	bcc.n	800b1b0 <scalbnf+0x1c>
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	f7f5 fc98 	bl	8000adc <__addsf3>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	e020      	b.n	800b1f2 <scalbnf+0x5e>
 800b1b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1b4:	d215      	bcs.n	800b1e2 <scalbnf+0x4e>
 800b1b6:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800b1ba:	f7f5 fd97 	bl	8000cec <__aeabi_fmul>
 800b1be:	4b18      	ldr	r3, [pc, #96]	; (800b220 <scalbnf+0x8c>)
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	429c      	cmp	r4, r3
 800b1c4:	db22      	blt.n	800b20c <scalbnf+0x78>
 800b1c6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b1ca:	3b19      	subs	r3, #25
 800b1cc:	4423      	add	r3, r4
 800b1ce:	2bfe      	cmp	r3, #254	; 0xfe
 800b1d0:	dd09      	ble.n	800b1e6 <scalbnf+0x52>
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	4813      	ldr	r0, [pc, #76]	; (800b224 <scalbnf+0x90>)
 800b1d6:	f000 f830 	bl	800b23a <copysignf>
 800b1da:	4912      	ldr	r1, [pc, #72]	; (800b224 <scalbnf+0x90>)
 800b1dc:	f7f5 fd86 	bl	8000cec <__aeabi_fmul>
 800b1e0:	e7e4      	b.n	800b1ac <scalbnf+0x18>
 800b1e2:	0ddb      	lsrs	r3, r3, #23
 800b1e4:	e7f2      	b.n	800b1cc <scalbnf+0x38>
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	dd05      	ble.n	800b1f6 <scalbnf+0x62>
 800b1ea:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800b1ee:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	bd10      	pop	{r4, pc}
 800b1f6:	f113 0f16 	cmn.w	r3, #22
 800b1fa:	da09      	bge.n	800b210 <scalbnf+0x7c>
 800b1fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b200:	429c      	cmp	r4, r3
 800b202:	4611      	mov	r1, r2
 800b204:	dce6      	bgt.n	800b1d4 <scalbnf+0x40>
 800b206:	4808      	ldr	r0, [pc, #32]	; (800b228 <scalbnf+0x94>)
 800b208:	f000 f817 	bl	800b23a <copysignf>
 800b20c:	4906      	ldr	r1, [pc, #24]	; (800b228 <scalbnf+0x94>)
 800b20e:	e7e5      	b.n	800b1dc <scalbnf+0x48>
 800b210:	3319      	adds	r3, #25
 800b212:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800b216:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800b21a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b21e:	e7dd      	b.n	800b1dc <scalbnf+0x48>
 800b220:	ffff3cb0 	.word	0xffff3cb0
 800b224:	7149f2ca 	.word	0x7149f2ca
 800b228:	0da24260 	.word	0x0da24260

0800b22c <copysign>:
 800b22c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b234:	ea42 0103 	orr.w	r1, r2, r3
 800b238:	4770      	bx	lr

0800b23a <copysignf>:
 800b23a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b23e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b242:	4308      	orrs	r0, r1
 800b244:	4770      	bx	lr
	...

0800b248 <__errno>:
 800b248:	4b01      	ldr	r3, [pc, #4]	; (800b250 <__errno+0x8>)
 800b24a:	6818      	ldr	r0, [r3, #0]
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	20000414 	.word	0x20000414

0800b254 <_sbrk>:
 800b254:	4b04      	ldr	r3, [pc, #16]	; (800b268 <_sbrk+0x14>)
 800b256:	4602      	mov	r2, r0
 800b258:	6819      	ldr	r1, [r3, #0]
 800b25a:	b909      	cbnz	r1, 800b260 <_sbrk+0xc>
 800b25c:	4903      	ldr	r1, [pc, #12]	; (800b26c <_sbrk+0x18>)
 800b25e:	6019      	str	r1, [r3, #0]
 800b260:	6818      	ldr	r0, [r3, #0]
 800b262:	4402      	add	r2, r0
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	4770      	bx	lr
 800b268:	20000748 	.word	0x20000748
 800b26c:	2000112c 	.word	0x2000112c

0800b270 <_init>:
 800b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b272:	bf00      	nop
 800b274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b276:	bc08      	pop	{r3}
 800b278:	469e      	mov	lr, r3
 800b27a:	4770      	bx	lr

0800b27c <_fini>:
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27e:	bf00      	nop
 800b280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b282:	bc08      	pop	{r3}
 800b284:	469e      	mov	lr, r3
 800b286:	4770      	bx	lr
