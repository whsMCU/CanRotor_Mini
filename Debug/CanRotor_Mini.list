
CanRotor_Mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acc8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  0800add8  0800add8  0001add8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b710  0800b710  0001b710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b714  0800b714  0001b714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  20000000  0800b718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000cac  20000480  0800bb94  00020480  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  2000112c  0800bb94  0002112c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00039049  00000000  00000000  000204a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005882  00000000  00000000  000594ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000dcd1  00000000  00000000  0005ed70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001090  00000000  00000000  0006ca48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001748  00000000  00000000  0006dad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c53a  00000000  00000000  0006f220  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005959  00000000  00000000  0007b75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000810b3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003fa0  00000000  00000000  00081130  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000014d  00000000  00000000  000850d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000480 	.word	0x20000480
 800012c:	00000000 	.word	0x00000000
 8000130:	0800adc0 	.word	0x0800adc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000484 	.word	0x20000484
 800014c:	0800adc0 	.word	0x0800adc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2f>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a38:	bf24      	itt	cs
 8000a3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a42:	d90d      	bls.n	8000a60 <__aeabi_d2f+0x30>
 8000a44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a58:	bf08      	it	eq
 8000a5a:	f020 0001 	biceq.w	r0, r0, #1
 8000a5e:	4770      	bx	lr
 8000a60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a64:	d121      	bne.n	8000aaa <__aeabi_d2f+0x7a>
 8000a66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a6a:	bfbc      	itt	lt
 8000a6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	4770      	bxlt	lr
 8000a72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a7a:	f1c2 0218 	rsb	r2, r2, #24
 8000a7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a86:	fa20 f002 	lsr.w	r0, r0, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	f040 0001 	orrne.w	r0, r0, #1
 8000a90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a9c:	ea40 000c 	orr.w	r0, r0, ip
 8000aa0:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa8:	e7cc      	b.n	8000a44 <__aeabi_d2f+0x14>
 8000aaa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aae:	d107      	bne.n	8000ac0 <__aeabi_d2f+0x90>
 8000ab0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab4:	bf1e      	ittt	ne
 8000ab6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000abe:	4770      	bxne	lr
 8000ac0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_frsub>:
 8000ad0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ad4:	e002      	b.n	8000adc <__addsf3>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_fsub>:
 8000ad8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000adc <__addsf3>:
 8000adc:	0042      	lsls	r2, r0, #1
 8000ade:	bf1f      	itttt	ne
 8000ae0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ae4:	ea92 0f03 	teqne	r2, r3
 8000ae8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af0:	d06a      	beq.n	8000bc8 <__addsf3+0xec>
 8000af2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000af6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000afa:	bfc1      	itttt	gt
 8000afc:	18d2      	addgt	r2, r2, r3
 8000afe:	4041      	eorgt	r1, r0
 8000b00:	4048      	eorgt	r0, r1
 8000b02:	4041      	eorgt	r1, r0
 8000b04:	bfb8      	it	lt
 8000b06:	425b      	neglt	r3, r3
 8000b08:	2b19      	cmp	r3, #25
 8000b0a:	bf88      	it	hi
 8000b0c:	4770      	bxhi	lr
 8000b0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b2a:	bf18      	it	ne
 8000b2c:	4249      	negne	r1, r1
 8000b2e:	ea92 0f03 	teq	r2, r3
 8000b32:	d03f      	beq.n	8000bb4 <__addsf3+0xd8>
 8000b34:	f1a2 0201 	sub.w	r2, r2, #1
 8000b38:	fa41 fc03 	asr.w	ip, r1, r3
 8000b3c:	eb10 000c 	adds.w	r0, r0, ip
 8000b40:	f1c3 0320 	rsb	r3, r3, #32
 8000b44:	fa01 f103 	lsl.w	r1, r1, r3
 8000b48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b4c:	d502      	bpl.n	8000b54 <__addsf3+0x78>
 8000b4e:	4249      	negs	r1, r1
 8000b50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b58:	d313      	bcc.n	8000b82 <__addsf3+0xa6>
 8000b5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b5e:	d306      	bcc.n	8000b6e <__addsf3+0x92>
 8000b60:	0840      	lsrs	r0, r0, #1
 8000b62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b66:	f102 0201 	add.w	r2, r2, #1
 8000b6a:	2afe      	cmp	r2, #254	; 0xfe
 8000b6c:	d251      	bcs.n	8000c12 <__addsf3+0x136>
 8000b6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b76:	bf08      	it	eq
 8000b78:	f020 0001 	biceq.w	r0, r0, #1
 8000b7c:	ea40 0003 	orr.w	r0, r0, r3
 8000b80:	4770      	bx	lr
 8000b82:	0049      	lsls	r1, r1, #1
 8000b84:	eb40 0000 	adc.w	r0, r0, r0
 8000b88:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	d1ed      	bne.n	8000b6e <__addsf3+0x92>
 8000b92:	fab0 fc80 	clz	ip, r0
 8000b96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ba2:	bfaa      	itet	ge
 8000ba4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba8:	4252      	neglt	r2, r2
 8000baa:	4318      	orrge	r0, r3
 8000bac:	bfbc      	itt	lt
 8000bae:	40d0      	lsrlt	r0, r2
 8000bb0:	4318      	orrlt	r0, r3
 8000bb2:	4770      	bx	lr
 8000bb4:	f092 0f00 	teq	r2, #0
 8000bb8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bbc:	bf06      	itte	eq
 8000bbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bc2:	3201      	addeq	r2, #1
 8000bc4:	3b01      	subne	r3, #1
 8000bc6:	e7b5      	b.n	8000b34 <__addsf3+0x58>
 8000bc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	bf18      	it	ne
 8000bd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd6:	d021      	beq.n	8000c1c <__addsf3+0x140>
 8000bd8:	ea92 0f03 	teq	r2, r3
 8000bdc:	d004      	beq.n	8000be8 <__addsf3+0x10c>
 8000bde:	f092 0f00 	teq	r2, #0
 8000be2:	bf08      	it	eq
 8000be4:	4608      	moveq	r0, r1
 8000be6:	4770      	bx	lr
 8000be8:	ea90 0f01 	teq	r0, r1
 8000bec:	bf1c      	itt	ne
 8000bee:	2000      	movne	r0, #0
 8000bf0:	4770      	bxne	lr
 8000bf2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bf6:	d104      	bne.n	8000c02 <__addsf3+0x126>
 8000bf8:	0040      	lsls	r0, r0, #1
 8000bfa:	bf28      	it	cs
 8000bfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c00:	4770      	bx	lr
 8000c02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c06:	bf3c      	itt	cc
 8000c08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bxcc	lr
 8000c0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1a:	4770      	bx	lr
 8000c1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c20:	bf16      	itet	ne
 8000c22:	4608      	movne	r0, r1
 8000c24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c28:	4601      	movne	r1, r0
 8000c2a:	0242      	lsls	r2, r0, #9
 8000c2c:	bf06      	itte	eq
 8000c2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c32:	ea90 0f01 	teqeq	r0, r1
 8000c36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_ui2f>:
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e004      	b.n	8000c4c <__aeabi_i2f+0x8>
 8000c42:	bf00      	nop

08000c44 <__aeabi_i2f>:
 8000c44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c48:	bf48      	it	mi
 8000c4a:	4240      	negmi	r0, r0
 8000c4c:	ea5f 0c00 	movs.w	ip, r0
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c58:	4601      	mov	r1, r0
 8000c5a:	f04f 0000 	mov.w	r0, #0
 8000c5e:	e01c      	b.n	8000c9a <__aeabi_l2f+0x2a>

08000c60 <__aeabi_ul2f>:
 8000c60:	ea50 0201 	orrs.w	r2, r0, r1
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e00a      	b.n	8000c84 <__aeabi_l2f+0x14>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_l2f>:
 8000c70:	ea50 0201 	orrs.w	r2, r0, r1
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__aeabi_l2f+0x14>
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	ea5f 0c01 	movs.w	ip, r1
 8000c88:	bf02      	ittt	eq
 8000c8a:	4684      	moveq	ip, r0
 8000c8c:	4601      	moveq	r1, r0
 8000c8e:	2000      	moveq	r0, #0
 8000c90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c94:	bf08      	it	eq
 8000c96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c9e:	fabc f28c 	clz	r2, ip
 8000ca2:	3a08      	subs	r2, #8
 8000ca4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca8:	db10      	blt.n	8000ccc <__aeabi_l2f+0x5c>
 8000caa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cae:	4463      	add	r3, ip
 8000cb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cb4:	f1c2 0220 	rsb	r2, r2, #32
 8000cb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	eb43 0002 	adc.w	r0, r3, r2
 8000cc4:	bf08      	it	eq
 8000cc6:	f020 0001 	biceq.w	r0, r0, #1
 8000cca:	4770      	bx	lr
 8000ccc:	f102 0220 	add.w	r2, r2, #32
 8000cd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd4:	f1c2 0220 	rsb	r2, r2, #32
 8000cd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cdc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce0:	eb43 0002 	adc.w	r0, r3, r2
 8000ce4:	bf08      	it	eq
 8000ce6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cea:	4770      	bx	lr

08000cec <__aeabi_fmul>:
 8000cec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cf4:	bf1e      	ittt	ne
 8000cf6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cfa:	ea92 0f0c 	teqne	r2, ip
 8000cfe:	ea93 0f0c 	teqne	r3, ip
 8000d02:	d06f      	beq.n	8000de4 <__aeabi_fmul+0xf8>
 8000d04:	441a      	add	r2, r3
 8000d06:	ea80 0c01 	eor.w	ip, r0, r1
 8000d0a:	0240      	lsls	r0, r0, #9
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d12:	d01e      	beq.n	8000d52 <__aeabi_fmul+0x66>
 8000d14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d18:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d1c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d20:	fba0 3101 	umull	r3, r1, r0, r1
 8000d24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d28:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d2c:	bf3e      	ittt	cc
 8000d2e:	0049      	lslcc	r1, r1, #1
 8000d30:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d34:	005b      	lslcc	r3, r3, #1
 8000d36:	ea40 0001 	orr.w	r0, r0, r1
 8000d3a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d3e:	2afd      	cmp	r2, #253	; 0xfd
 8000d40:	d81d      	bhi.n	8000d7e <__aeabi_fmul+0x92>
 8000d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4a:	bf08      	it	eq
 8000d4c:	f020 0001 	biceq.w	r0, r0, #1
 8000d50:	4770      	bx	lr
 8000d52:	f090 0f00 	teq	r0, #0
 8000d56:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d5a:	bf08      	it	eq
 8000d5c:	0249      	lsleq	r1, r1, #9
 8000d5e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d62:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d66:	3a7f      	subs	r2, #127	; 0x7f
 8000d68:	bfc2      	ittt	gt
 8000d6a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d6e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d72:	4770      	bxgt	lr
 8000d74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	3a01      	subs	r2, #1
 8000d7e:	dc5d      	bgt.n	8000e3c <__aeabi_fmul+0x150>
 8000d80:	f112 0f19 	cmn.w	r2, #25
 8000d84:	bfdc      	itt	le
 8000d86:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d8a:	4770      	bxle	lr
 8000d8c:	f1c2 0200 	rsb	r2, r2, #0
 8000d90:	0041      	lsls	r1, r0, #1
 8000d92:	fa21 f102 	lsr.w	r1, r1, r2
 8000d96:	f1c2 0220 	rsb	r2, r2, #32
 8000d9a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d9e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000da2:	f140 0000 	adc.w	r0, r0, #0
 8000da6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000daa:	bf08      	it	eq
 8000dac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db0:	4770      	bx	lr
 8000db2:	f092 0f00 	teq	r2, #0
 8000db6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0040      	lsleq	r0, r0, #1
 8000dbe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dc2:	3a01      	subeq	r2, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xce>
 8000dc6:	ea40 000c 	orr.w	r0, r0, ip
 8000dca:	f093 0f00 	teq	r3, #0
 8000dce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0049      	lsleq	r1, r1, #1
 8000dd6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dda:	3b01      	subeq	r3, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fmul+0xe6>
 8000dde:	ea41 010c 	orr.w	r1, r1, ip
 8000de2:	e78f      	b.n	8000d04 <__aeabi_fmul+0x18>
 8000de4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de8:	ea92 0f0c 	teq	r2, ip
 8000dec:	bf18      	it	ne
 8000dee:	ea93 0f0c 	teqne	r3, ip
 8000df2:	d00a      	beq.n	8000e0a <__aeabi_fmul+0x11e>
 8000df4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df8:	bf18      	it	ne
 8000dfa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	d1d8      	bne.n	8000db2 <__aeabi_fmul+0xc6>
 8000e00:	ea80 0001 	eor.w	r0, r0, r1
 8000e04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	bf17      	itett	ne
 8000e10:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e14:	4608      	moveq	r0, r1
 8000e16:	f091 0f00 	teqne	r1, #0
 8000e1a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e1e:	d014      	beq.n	8000e4a <__aeabi_fmul+0x15e>
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	d101      	bne.n	8000e2a <__aeabi_fmul+0x13e>
 8000e26:	0242      	lsls	r2, r0, #9
 8000e28:	d10f      	bne.n	8000e4a <__aeabi_fmul+0x15e>
 8000e2a:	ea93 0f0c 	teq	r3, ip
 8000e2e:	d103      	bne.n	8000e38 <__aeabi_fmul+0x14c>
 8000e30:	024b      	lsls	r3, r1, #9
 8000e32:	bf18      	it	ne
 8000e34:	4608      	movne	r0, r1
 8000e36:	d108      	bne.n	8000e4a <__aeabi_fmul+0x15e>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	4770      	bx	lr
 8000e4a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fdiv>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d069      	beq.n	8000f40 <__aeabi_fdiv+0xec>
 8000e6c:	eba2 0203 	sub.w	r2, r2, r3
 8000e70:	ea80 0c01 	eor.w	ip, r0, r1
 8000e74:	0249      	lsls	r1, r1, #9
 8000e76:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e7a:	d037      	beq.n	8000eec <__aeabi_fdiv+0x98>
 8000e7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e80:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e84:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	bf38      	it	cc
 8000e90:	005b      	lslcc	r3, r3, #1
 8000e92:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e96:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	bf24      	itt	cs
 8000e9e:	1a5b      	subcs	r3, r3, r1
 8000ea0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ea4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea8:	bf24      	itt	cs
 8000eaa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eb2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eb6:	bf24      	itt	cs
 8000eb8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ebc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	bf18      	it	ne
 8000ed2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ed6:	d1e0      	bne.n	8000e9a <__aeabi_fdiv+0x46>
 8000ed8:	2afd      	cmp	r2, #253	; 0xfd
 8000eda:	f63f af50 	bhi.w	8000d7e <__aeabi_fmul+0x92>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ee4:	bf08      	it	eq
 8000ee6:	f020 0001 	biceq.w	r0, r0, #1
 8000eea:	4770      	bx	lr
 8000eec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ef4:	327f      	adds	r2, #127	; 0x7f
 8000ef6:	bfc2      	ittt	gt
 8000ef8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000efc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f00:	4770      	bxgt	lr
 8000f02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	3a01      	subs	r2, #1
 8000f0c:	e737      	b.n	8000d7e <__aeabi_fmul+0x92>
 8000f0e:	f092 0f00 	teq	r2, #0
 8000f12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0040      	lsleq	r0, r0, #1
 8000f1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f1e:	3a01      	subeq	r2, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xc2>
 8000f22:	ea40 000c 	orr.w	r0, r0, ip
 8000f26:	f093 0f00 	teq	r3, #0
 8000f2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	bf02      	ittt	eq
 8000f30:	0049      	lsleq	r1, r1, #1
 8000f32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f36:	3b01      	subeq	r3, #1
 8000f38:	d0f9      	beq.n	8000f2e <__aeabi_fdiv+0xda>
 8000f3a:	ea41 010c 	orr.w	r1, r1, ip
 8000f3e:	e795      	b.n	8000e6c <__aeabi_fdiv+0x18>
 8000f40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f44:	ea92 0f0c 	teq	r2, ip
 8000f48:	d108      	bne.n	8000f5c <__aeabi_fdiv+0x108>
 8000f4a:	0242      	lsls	r2, r0, #9
 8000f4c:	f47f af7d 	bne.w	8000e4a <__aeabi_fmul+0x15e>
 8000f50:	ea93 0f0c 	teq	r3, ip
 8000f54:	f47f af70 	bne.w	8000e38 <__aeabi_fmul+0x14c>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e776      	b.n	8000e4a <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	d104      	bne.n	8000f6c <__aeabi_fdiv+0x118>
 8000f62:	024b      	lsls	r3, r1, #9
 8000f64:	f43f af4c 	beq.w	8000e00 <__aeabi_fmul+0x114>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e76e      	b.n	8000e4a <__aeabi_fmul+0x15e>
 8000f6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f70:	bf18      	it	ne
 8000f72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	d1ca      	bne.n	8000f0e <__aeabi_fdiv+0xba>
 8000f78:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f7c:	f47f af5c 	bne.w	8000e38 <__aeabi_fmul+0x14c>
 8000f80:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f84:	f47f af3c 	bne.w	8000e00 <__aeabi_fmul+0x114>
 8000f88:	e75f      	b.n	8000e4a <__aeabi_fmul+0x15e>
 8000f8a:	bf00      	nop

08000f8c <__gesf2>:
 8000f8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000f90:	e006      	b.n	8000fa0 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__lesf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	e002      	b.n	8000fa0 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__cmpsf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fa4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb0:	bf18      	it	ne
 8000fb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fb6:	d011      	beq.n	8000fdc <__cmpsf2+0x40>
 8000fb8:	b001      	add	sp, #4
 8000fba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fbe:	bf18      	it	ne
 8000fc0:	ea90 0f01 	teqne	r0, r1
 8000fc4:	bf58      	it	pl
 8000fc6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fca:	bf88      	it	hi
 8000fcc:	17c8      	asrhi	r0, r1, #31
 8000fce:	bf38      	it	cc
 8000fd0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fd4:	bf18      	it	ne
 8000fd6:	f040 0001 	orrne.w	r0, r0, #1
 8000fda:	4770      	bx	lr
 8000fdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe0:	d102      	bne.n	8000fe8 <__cmpsf2+0x4c>
 8000fe2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fe6:	d105      	bne.n	8000ff4 <__cmpsf2+0x58>
 8000fe8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fec:	d1e4      	bne.n	8000fb8 <__cmpsf2+0x1c>
 8000fee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ff2:	d0e1      	beq.n	8000fb8 <__cmpsf2+0x1c>
 8000ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <__aeabi_cfrcmple>:
 8000ffc:	4684      	mov	ip, r0
 8000ffe:	4608      	mov	r0, r1
 8001000:	4661      	mov	r1, ip
 8001002:	e7ff      	b.n	8001004 <__aeabi_cfcmpeq>

08001004 <__aeabi_cfcmpeq>:
 8001004:	b50f      	push	{r0, r1, r2, r3, lr}
 8001006:	f7ff ffc9 	bl	8000f9c <__cmpsf2>
 800100a:	2800      	cmp	r0, #0
 800100c:	bf48      	it	mi
 800100e:	f110 0f00 	cmnmi.w	r0, #0
 8001012:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001014 <__aeabi_fcmpeq>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff fff4 	bl	8001004 <__aeabi_cfcmpeq>
 800101c:	bf0c      	ite	eq
 800101e:	2001      	moveq	r0, #1
 8001020:	2000      	movne	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmplt>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffea 	bl	8001004 <__aeabi_cfcmpeq>
 8001030:	bf34      	ite	cc
 8001032:	2001      	movcc	r0, #1
 8001034:	2000      	movcs	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmple>:
 800103c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001040:	f7ff ffe0 	bl	8001004 <__aeabi_cfcmpeq>
 8001044:	bf94      	ite	ls
 8001046:	2001      	movls	r0, #1
 8001048:	2000      	movhi	r0, #0
 800104a:	f85d fb08 	ldr.w	pc, [sp], #8
 800104e:	bf00      	nop

08001050 <__aeabi_fcmpge>:
 8001050:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001054:	f7ff ffd2 	bl	8000ffc <__aeabi_cfrcmple>
 8001058:	bf94      	ite	ls
 800105a:	2001      	movls	r0, #1
 800105c:	2000      	movhi	r0, #0
 800105e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001062:	bf00      	nop

08001064 <__aeabi_fcmpgt>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff ffc8 	bl	8000ffc <__aeabi_cfrcmple>
 800106c:	bf34      	ite	cc
 800106e:	2001      	movcc	r0, #1
 8001070:	2000      	movcs	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmpun>:
 8001078:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800107c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001080:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001084:	d102      	bne.n	800108c <__aeabi_fcmpun+0x14>
 8001086:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800108a:	d108      	bne.n	800109e <__aeabi_fcmpun+0x26>
 800108c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001090:	d102      	bne.n	8001098 <__aeabi_fcmpun+0x20>
 8001092:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001096:	d102      	bne.n	800109e <__aeabi_fcmpun+0x26>
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	f04f 0001 	mov.w	r0, #1
 80010a2:	4770      	bx	lr

080010a4 <__aeabi_f2iz>:
 80010a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ac:	d30f      	bcc.n	80010ce <__aeabi_f2iz+0x2a>
 80010ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010b6:	d90d      	bls.n	80010d4 <__aeabi_f2iz+0x30>
 80010b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	bf18      	it	ne
 80010ca:	4240      	negne	r0, r0
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2iz+0x3a>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d105      	bne.n	80010ea <__aeabi_f2iz+0x46>
 80010de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010e2:	bf08      	it	eq
 80010e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_InitTick+0x3c>)
{
 80010f4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f6:	7818      	ldrb	r0, [r3, #0]
 80010f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <HAL_InitTick+0x40>)
 8001102:	6810      	ldr	r0, [r2, #0]
 8001104:	fbb0 f0f3 	udiv	r0, r0, r3
 8001108:	f000 fb00 	bl	800170c <HAL_SYSTICK_Config>
 800110c:	4604      	mov	r4, r0
 800110e:	b958      	cbnz	r0, 8001128 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	2d0f      	cmp	r5, #15
 8001112:	d809      	bhi.n	8001128 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	4602      	mov	r2, r0
 8001116:	4629      	mov	r1, r5
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 fab6 	bl	800168c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <HAL_InitTick+0x44>)
 8001122:	4620      	mov	r0, r4
 8001124:	601d      	str	r5, [r3, #0]
 8001126:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001128:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800112a:	bd38      	pop	{r3, r4, r5, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20000410 	.word	0x20000410
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_Init+0x20>)
{
 800113a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001146:	f000 fa8f 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff ffd0 	bl	80010f0 <HAL_InitTick>
  HAL_MspInit();
 8001150:	f006 fdc4 	bl	8007cdc <HAL_MspInit>
}
 8001154:	2000      	movs	r0, #0
 8001156:	bd08      	pop	{r3, pc}
 8001158:	40022000 	.word	0x40022000

0800115c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <HAL_IncTick+0x10>)
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_IncTick+0x14>)
 8001160:	6811      	ldr	r1, [r2, #0]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	440b      	add	r3, r1
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2000074c 	.word	0x2000074c
 8001170:	20000000 	.word	0x20000000

08001174 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001174:	4b01      	ldr	r3, [pc, #4]	; (800117c <HAL_GetTick+0x8>)
 8001176:	6818      	ldr	r0, [r3, #0]
}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000074c 	.word	0x2000074c

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b538      	push	{r3, r4, r5, lr}
 8001182:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff fff6 	bl	8001174 <HAL_GetTick>
 8001188:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800118c:	bf1e      	ittt	ne
 800118e:	4b04      	ldrne	r3, [pc, #16]	; (80011a0 <HAL_Delay+0x20>)
 8001190:	781b      	ldrbne	r3, [r3, #0]
 8001192:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	1b40      	subs	r0, r0, r5
 800119a:	4284      	cmp	r4, r0
 800119c:	d8fa      	bhi.n	8001194 <HAL_Delay+0x14>
  {
  }
}
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	20000000 	.word	0x20000000

080011a4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80011a6:	2600      	movs	r6, #0
{
 80011a8:	4604      	mov	r4, r0
 80011aa:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80011ac:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80011ae:	f7ff ffe1 	bl	8001174 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011b2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80011b4:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	05d2      	lsls	r2, r2, #23
 80011ba:	d508      	bpl.n	80011ce <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80011c0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c4:	f043 0320 	orr.w	r3, r3, #32
 80011c8:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80011ca:	b003      	add	sp, #12
 80011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	05d6      	lsls	r6, r2, #23
 80011d2:	d403      	bmi.n	80011dc <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011d6:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80011da:	d03b      	beq.n	8001254 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80011dc:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <HAL_ADC_PollForConversion+0x124>)
 80011de:	2002      	movs	r0, #2
 80011e0:	681e      	ldr	r6, [r3, #0]
 80011e2:	f001 fe55 	bl	8002e90 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	4a38      	ldr	r2, [pc, #224]	; (80012cc <HAL_ADC_PollForConversion+0x128>)
 80011ea:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80011ec:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80011f0:	4211      	tst	r1, r2
 80011f2:	4a37      	ldr	r2, [pc, #220]	; (80012d0 <HAL_ADC_PollForConversion+0x12c>)
 80011f4:	d14f      	bne.n	8001296 <HAL_ADC_PollForConversion+0xf2>
 80011f6:	68de      	ldr	r6, [r3, #12]
 80011f8:	4936      	ldr	r1, [pc, #216]	; (80012d4 <HAL_ADC_PollForConversion+0x130>)
 80011fa:	420e      	tst	r6, r1
 80011fc:	d14b      	bne.n	8001296 <HAL_ADC_PollForConversion+0xf2>
 80011fe:	6919      	ldr	r1, [r3, #16]
 8001200:	4211      	tst	r1, r2
 8001202:	d159      	bne.n	80012b8 <HAL_ADC_PollForConversion+0x114>
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <HAL_ADC_PollForConversion+0x134>)
 8001208:	421a      	tst	r2, r3
 800120a:	bf14      	ite	ne
 800120c:	2329      	movne	r3, #41	; 0x29
 800120e:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001210:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001214:	9b01      	ldr	r3, [sp, #4]
 8001216:	429e      	cmp	r6, r3
 8001218:	d920      	bls.n	800125c <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 800121a:	1c6b      	adds	r3, r5, #1
 800121c:	d005      	beq.n	800122a <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800121e:	b15d      	cbz	r5, 8001238 <HAL_ADC_PollForConversion+0x94>
 8001220:	f7ff ffa8 	bl	8001174 <HAL_GetTick>
 8001224:	1bc0      	subs	r0, r0, r7
 8001226:	4285      	cmp	r5, r0
 8001228:	d306      	bcc.n	8001238 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 800122a:	9b01      	ldr	r3, [sp, #4]
 800122c:	3301      	adds	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	e7f0      	b.n	8001214 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8001232:	1c68      	adds	r0, r5, #1
 8001234:	d00f      	beq.n	8001256 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001236:	b945      	cbnz	r5, 800124a <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001238:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 800123a:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8001242:	2300      	movs	r3, #0
 8001244:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 8001248:	e7bf      	b.n	80011ca <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800124a:	f7ff ff93 	bl	8001174 <HAL_GetTick>
 800124e:	1bc0      	subs	r0, r0, r7
 8001250:	4285      	cmp	r5, r0
 8001252:	d3f1      	bcc.n	8001238 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001254:	6822      	ldr	r2, [r4, #0]
 8001256:	6813      	ldr	r3, [r2, #0]
 8001258:	0799      	lsls	r1, r3, #30
 800125a:	d5ea      	bpl.n	8001232 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800125c:	f06f 0312 	mvn.w	r3, #18
 8001260:	6822      	ldr	r2, [r4, #0]
 8001262:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001264:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126a:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800126c:	6893      	ldr	r3, [r2, #8]
 800126e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001272:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001276:	d125      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x120>
 8001278:	68e3      	ldr	r3, [r4, #12]
 800127a:	bb1b      	cbnz	r3, 80012c4 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800127c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800127e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001282:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001284:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001286:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800128a:	d11b      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	62a3      	str	r3, [r4, #40]	; 0x28
 8001294:	e799      	b.n	80011ca <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001296:	6919      	ldr	r1, [r3, #16]
 8001298:	4211      	tst	r1, r2
 800129a:	d103      	bne.n	80012a4 <HAL_ADC_PollForConversion+0x100>
 800129c:	68d9      	ldr	r1, [r3, #12]
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_ADC_PollForConversion+0x134>)
 80012a0:	4211      	tst	r1, r2
 80012a2:	d00b      	beq.n	80012bc <HAL_ADC_PollForConversion+0x118>
 80012a4:	6919      	ldr	r1, [r3, #16]
 80012a6:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_ADC_PollForConversion+0x138>)
 80012a8:	4211      	tst	r1, r2
 80012aa:	d109      	bne.n	80012c0 <HAL_ADC_PollForConversion+0x11c>
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	4213      	tst	r3, r2
 80012b0:	bf14      	ite	ne
 80012b2:	23fc      	movne	r3, #252	; 0xfc
 80012b4:	2354      	moveq	r3, #84	; 0x54
 80012b6:	e7ab      	b.n	8001210 <HAL_ADC_PollForConversion+0x6c>
 80012b8:	2329      	movs	r3, #41	; 0x29
 80012ba:	e7a9      	b.n	8001210 <HAL_ADC_PollForConversion+0x6c>
 80012bc:	2354      	movs	r3, #84	; 0x54
 80012be:	e7a7      	b.n	8001210 <HAL_ADC_PollForConversion+0x6c>
 80012c0:	23fc      	movs	r3, #252	; 0xfc
 80012c2:	e7a5      	b.n	8001210 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 80012c4:	2000      	movs	r0, #0
 80012c6:	e780      	b.n	80011ca <HAL_ADC_PollForConversion+0x26>
 80012c8:	20000410 	.word	0x20000410
 80012cc:	24924924 	.word	0x24924924
 80012d0:	12492492 	.word	0x12492492
 80012d4:	00924924 	.word	0x00924924
 80012d8:	00492492 	.word	0x00492492
 80012dc:	00249249 	.word	0x00249249

080012e0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012e0:	6803      	ldr	r3, [r0, #0]
 80012e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80012e8:	2300      	movs	r3, #0
{ 
 80012ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80012ec:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d074      	beq.n	80013e0 <HAL_ADC_ConfigChannel+0xf8>
 80012f6:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012f8:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80012fa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80012fe:	2d06      	cmp	r5, #6
 8001300:	6802      	ldr	r2, [r0, #0]
 8001302:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001306:	680c      	ldr	r4, [r1, #0]
 8001308:	d825      	bhi.n	8001356 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800130a:	442b      	add	r3, r5
 800130c:	251f      	movs	r5, #31
 800130e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001310:	3b05      	subs	r3, #5
 8001312:	409d      	lsls	r5, r3
 8001314:	ea26 0505 	bic.w	r5, r6, r5
 8001318:	fa04 f303 	lsl.w	r3, r4, r3
 800131c:	432b      	orrs	r3, r5
 800131e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001320:	2c09      	cmp	r4, #9
 8001322:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001326:	688d      	ldr	r5, [r1, #8]
 8001328:	d92f      	bls.n	800138a <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800132a:	2607      	movs	r6, #7
 800132c:	4423      	add	r3, r4
 800132e:	68d1      	ldr	r1, [r2, #12]
 8001330:	3b1e      	subs	r3, #30
 8001332:	409e      	lsls	r6, r3
 8001334:	ea21 0106 	bic.w	r1, r1, r6
 8001338:	fa05 f303 	lsl.w	r3, r5, r3
 800133c:	430b      	orrs	r3, r1
 800133e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001340:	f1a4 0310 	sub.w	r3, r4, #16
 8001344:	2b01      	cmp	r3, #1
 8001346:	d92b      	bls.n	80013a0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001348:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800134a:	2200      	movs	r2, #0
 800134c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001350:	4618      	mov	r0, r3
 8001352:	b002      	add	sp, #8
 8001354:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001356:	2d0c      	cmp	r5, #12
 8001358:	d80b      	bhi.n	8001372 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800135a:	442b      	add	r3, r5
 800135c:	251f      	movs	r5, #31
 800135e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001360:	3b23      	subs	r3, #35	; 0x23
 8001362:	409d      	lsls	r5, r3
 8001364:	ea26 0505 	bic.w	r5, r6, r5
 8001368:	fa04 f303 	lsl.w	r3, r4, r3
 800136c:	432b      	orrs	r3, r5
 800136e:	6313      	str	r3, [r2, #48]	; 0x30
 8001370:	e7d6      	b.n	8001320 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001372:	442b      	add	r3, r5
 8001374:	251f      	movs	r5, #31
 8001376:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001378:	3b41      	subs	r3, #65	; 0x41
 800137a:	409d      	lsls	r5, r3
 800137c:	ea26 0505 	bic.w	r5, r6, r5
 8001380:	fa04 f303 	lsl.w	r3, r4, r3
 8001384:	432b      	orrs	r3, r5
 8001386:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001388:	e7ca      	b.n	8001320 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800138a:	2607      	movs	r6, #7
 800138c:	6911      	ldr	r1, [r2, #16]
 800138e:	4423      	add	r3, r4
 8001390:	409e      	lsls	r6, r3
 8001392:	ea21 0106 	bic.w	r1, r1, r6
 8001396:	fa05 f303 	lsl.w	r3, r5, r3
 800139a:	430b      	orrs	r3, r1
 800139c:	6113      	str	r3, [r2, #16]
 800139e:	e7cf      	b.n	8001340 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_ADC_ConfigChannel+0xfc>)
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d116      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013a6:	6893      	ldr	r3, [r2, #8]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	d4cd      	bmi.n	8001348 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013ac:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013ae:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013b4:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013b6:	d1c7      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_ADC_ConfigChannel+0x100>)
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <HAL_ADC_ConfigChannel+0x104>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	fbb3 f2f2 	udiv	r2, r3, r2
 80013c2:	230a      	movs	r3, #10
 80013c4:	4353      	muls	r3, r2
            wait_loop_index--;
 80013c6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80013c8:	9b01      	ldr	r3, [sp, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0bc      	beq.n	8001348 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	e7f8      	b.n	80013c6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013d6:	f043 0320 	orr.w	r3, r3, #32
 80013da:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e7b4      	b.n	800134a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80013e0:	2302      	movs	r3, #2
 80013e2:	e7b5      	b.n	8001350 <HAL_ADC_ConfigChannel+0x68>
 80013e4:	40012400 	.word	0x40012400
 80013e8:	20000410 	.word	0x20000410
 80013ec:	000f4240 	.word	0x000f4240

080013f0 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80013f0:	2300      	movs	r3, #0
{
 80013f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80013f4:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013f6:	6803      	ldr	r3, [r0, #0]
{
 80013f8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	07d2      	lsls	r2, r2, #31
 80013fe:	d502      	bpl.n	8001406 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001400:	2000      	movs	r0, #0
}
 8001402:	b002      	add	sp, #8
 8001404:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	f042 0201 	orr.w	r2, r2, #1
 800140c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <ADC_Enable+0x68>)
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <ADC_Enable+0x6c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001418:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800141a:	9b01      	ldr	r3, [sp, #4]
 800141c:	b9c3      	cbnz	r3, 8001450 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800141e:	f7ff fea9 	bl	8001174 <HAL_GetTick>
 8001422:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	689d      	ldr	r5, [r3, #8]
 8001428:	f015 0501 	ands.w	r5, r5, #1
 800142c:	d1e8      	bne.n	8001400 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800142e:	f7ff fea1 	bl	8001174 <HAL_GetTick>
 8001432:	1b80      	subs	r0, r0, r6
 8001434:	2802      	cmp	r0, #2
 8001436:	d9f5      	bls.n	8001424 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001438:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800143a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001446:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800144e:	e7d8      	b.n	8001402 <ADC_Enable+0x12>
      wait_loop_index--;
 8001450:	9b01      	ldr	r3, [sp, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	e7e0      	b.n	8001418 <ADC_Enable+0x28>
 8001456:	bf00      	nop
 8001458:	20000410 	.word	0x20000410
 800145c:	000f4240 	.word	0x000f4240

08001460 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001460:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001464:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001466:	2b01      	cmp	r3, #1
{
 8001468:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800146a:	d054      	beq.n	8001516 <HAL_ADC_Start+0xb6>
 800146c:	2301      	movs	r3, #1
 800146e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001472:	f7ff ffbd 	bl	80013f0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001476:	2800      	cmp	r0, #0
 8001478:	d149      	bne.n	800150e <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800147a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800147c:	4a27      	ldr	r2, [pc, #156]	; (800151c <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800147e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	4293      	cmp	r3, r2
 8001490:	d104      	bne.n	800149c <HAL_ADC_Start+0x3c>
 8001492:	4923      	ldr	r1, [pc, #140]	; (8001520 <HAL_ADC_Start+0xc0>)
 8001494:	684a      	ldr	r2, [r1, #4]
 8001496:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800149a:	d12e      	bne.n	80014fa <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800149c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800149e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80014a2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014a6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014a8:	bf41      	itttt	mi
 80014aa:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80014ac:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80014b0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80014b4:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014bc:	bf1c      	itt	ne
 80014be:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80014c0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80014c4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014cc:	f06f 0202 	mvn.w	r2, #2
 80014d0:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80014d8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80014dc:	d113      	bne.n	8001506 <HAL_ADC_Start+0xa6>
 80014de:	4a0f      	ldr	r2, [pc, #60]	; (800151c <HAL_ADC_Start+0xbc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d105      	bne.n	80014f0 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014e4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80014e8:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014ea:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80014ee:	d10a      	bne.n	8001506 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001500:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001502:	684a      	ldr	r2, [r1, #4]
 8001504:	e7cf      	b.n	80014a6 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800150c:	e7f3      	b.n	80014f6 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800150e:	2300      	movs	r3, #0
 8001510:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001514:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001516:	2002      	movs	r0, #2
}
 8001518:	bd10      	pop	{r4, pc}
 800151a:	bf00      	nop
 800151c:	40012800 	.word	0x40012800
 8001520:	40012400 	.word	0x40012400

08001524 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001524:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001526:	6803      	ldr	r3, [r0, #0]
{
 8001528:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	07d2      	lsls	r2, r2, #31
 800152e:	d401      	bmi.n	8001534 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001530:	2000      	movs	r0, #0
 8001532:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800153c:	f7ff fe1a 	bl	8001174 <HAL_GetTick>
 8001540:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	07db      	lsls	r3, r3, #31
 8001548:	d5f2      	bpl.n	8001530 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800154a:	f7ff fe13 	bl	8001174 <HAL_GetTick>
 800154e:	1b40      	subs	r0, r0, r5
 8001550:	2802      	cmp	r0, #2
 8001552:	d9f6      	bls.n	8001542 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001554:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001556:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001566:	bd38      	pop	{r3, r4, r5, pc}

08001568 <HAL_ADC_Init>:
{
 8001568:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800156a:	4604      	mov	r4, r0
 800156c:	2800      	cmp	r0, #0
 800156e:	d071      	beq.n	8001654 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001570:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001572:	b923      	cbnz	r3, 800157e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001574:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001576:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800157a:	f006 fbd1 	bl	8007d20 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff ffd0 	bl	8001524 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001584:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001586:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800158a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800158c:	d164      	bne.n	8001658 <HAL_ADC_Init+0xf0>
 800158e:	2800      	cmp	r0, #0
 8001590:	d162      	bne.n	8001658 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001592:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001594:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001598:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800159a:	f023 0302 	bic.w	r3, r3, #2
 800159e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80015a2:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015a4:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80015a6:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80015a8:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015aa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80015ae:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015b2:	d038      	beq.n	8001626 <HAL_ADC_Init+0xbe>
 80015b4:	2901      	cmp	r1, #1
 80015b6:	bf14      	ite	ne
 80015b8:	4606      	movne	r6, r0
 80015ba:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015be:	6965      	ldr	r5, [r4, #20]
 80015c0:	2d01      	cmp	r5, #1
 80015c2:	d107      	bne.n	80015d4 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d130      	bne.n	800162a <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015c8:	69a3      	ldr	r3, [r4, #24]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80015d0:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80015d4:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80015da:	685d      	ldr	r5, [r3, #4]
 80015dc:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80015e0:	ea45 0506 	orr.w	r5, r5, r6
 80015e4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80015e6:	689e      	ldr	r6, [r3, #8]
 80015e8:	4d1d      	ldr	r5, [pc, #116]	; (8001660 <HAL_ADC_Init+0xf8>)
 80015ea:	ea05 0506 	and.w	r5, r5, r6
 80015ee:	ea45 0502 	orr.w	r5, r5, r2
 80015f2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015f4:	d001      	beq.n	80015fa <HAL_ADC_Init+0x92>
 80015f6:	2901      	cmp	r1, #1
 80015f8:	d120      	bne.n	800163c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015fa:	6921      	ldr	r1, [r4, #16]
 80015fc:	3901      	subs	r1, #1
 80015fe:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001600:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001602:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001606:	4329      	orrs	r1, r5
 8001608:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_ADC_Init+0xfc>)
 800160e:	400b      	ands	r3, r1
 8001610:	429a      	cmp	r2, r3
 8001612:	d115      	bne.n	8001640 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8001614:	2300      	movs	r3, #0
 8001616:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800161a:	f023 0303 	bic.w	r3, r3, #3
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	62a3      	str	r3, [r4, #40]	; 0x28
 8001624:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001626:	460e      	mov	r6, r1
 8001628:	e7c9      	b.n	80015be <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800162c:	f043 0320 	orr.w	r3, r3, #32
 8001630:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001632:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	62e3      	str	r3, [r4, #44]	; 0x2c
 800163a:	e7cb      	b.n	80015d4 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 800163c:	2100      	movs	r1, #0
 800163e:	e7df      	b.n	8001600 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8001640:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001642:	f023 0312 	bic.w	r3, r3, #18
 8001646:	f043 0310 	orr.w	r3, r3, #16
 800164a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001654:	2001      	movs	r0, #1
}
 8001656:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001658:	f043 0310 	orr.w	r3, r3, #16
 800165c:	62a3      	str	r3, [r4, #40]	; 0x28
 800165e:	e7f9      	b.n	8001654 <HAL_ADC_Init+0xec>
 8001660:	ffe1f7fd 	.word	0xffe1f7fd
 8001664:	ff1f0efe 	.word	0xff1f0efe

08001668 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800166a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800166e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001676:	041b      	lsls	r3, r3, #16
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800167e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001682:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001684:	60d3      	str	r3, [r2, #12]
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b530      	push	{r4, r5, lr}
 8001690:	68dc      	ldr	r4, [r3, #12]
 8001692:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001696:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	2b04      	cmp	r3, #4
 800169e:	bf28      	it	cs
 80016a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a8:	bf98      	it	ls
 80016aa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	fa05 f303 	lsl.w	r3, r5, r3
 80016b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b4:	bf88      	it	hi
 80016b6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4019      	ands	r1, r3
 80016ba:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	fa05 f404 	lsl.w	r4, r5, r4
 80016c0:	3c01      	subs	r4, #1
 80016c2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80016c4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c6:	ea42 0201 	orr.w	r2, r2, r1
 80016ca:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	bfaf      	iteee	ge
 80016d0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	4b06      	ldrlt	r3, [pc, #24]	; (80016f0 <HAL_NVIC_SetPriority+0x64>)
 80016d6:	f000 000f 	andlt.w	r0, r0, #15
 80016da:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	bfa5      	ittet	ge
 80016de:	b2d2      	uxtbge	r2, r2
 80016e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80016ea:	bd30      	pop	{r4, r5, pc}
 80016ec:	e000ed00 	.word	0xe000ed00
 80016f0:	e000ed14 	.word	0xe000ed14

080016f4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016f4:	2301      	movs	r3, #1
 80016f6:	0942      	lsrs	r2, r0, #5
 80016f8:	f000 001f 	and.w	r0, r0, #31
 80016fc:	fa03 f000 	lsl.w	r0, r3, r0
 8001700:	4b01      	ldr	r3, [pc, #4]	; (8001708 <HAL_NVIC_EnableIRQ+0x14>)
 8001702:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100

0800170c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	3801      	subs	r0, #1
 800170e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001712:	d20a      	bcs.n	800172a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800173a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	bf0c      	ite	eq
 8001740:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001744:	f022 0204 	bicne.w	r2, r2, #4
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	4770      	bx	lr
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001750:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001752:	f005 feb3 	bl	80074bc <HAL_SYSTICK_Callback>
 8001756:	bd08      	pop	{r3, pc}

08001758 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001758:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800175a:	b350      	cbz	r0, 80017b2 <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800175c:	2214      	movs	r2, #20
 800175e:	6801      	ldr	r1, [r0, #0]
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001762:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001764:	440b      	add	r3, r1
 8001766:	fbb3 f3f2 	udiv	r3, r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8001770:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001772:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001774:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001776:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800177a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800177e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001782:	4323      	orrs	r3, r4
 8001784:	6904      	ldr	r4, [r0, #16]
 8001786:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001788:	6944      	ldr	r4, [r0, #20]
 800178a:	4323      	orrs	r3, r4
 800178c:	6984      	ldr	r4, [r0, #24]
 800178e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001790:	69c4      	ldr	r4, [r0, #28]
 8001792:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001794:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001796:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001798:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 800179a:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800179c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 80017a0:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80017a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80017a4:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80017a6:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a8:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017aa:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
}
 80017b4:	bd10      	pop	{r4, pc}
 80017b6:	bf00      	nop
 80017b8:	bffdfff8 	.word	0xbffdfff8
 80017bc:	40020000 	.word	0x40020000

080017c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017c2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80017c6:	2c01      	cmp	r4, #1
 80017c8:	d035      	beq.n	8001836 <HAL_DMA_Start_IT+0x76>
 80017ca:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017cc:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80017d0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80017d4:	42a5      	cmp	r5, r4
 80017d6:	f04f 0600 	mov.w	r6, #0
 80017da:	f04f 0402 	mov.w	r4, #2
 80017de:	d128      	bne.n	8001832 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017e0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017e4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80017e8:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017ea:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80017ec:	f026 0601 	bic.w	r6, r6, #1
 80017f0:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017f2:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80017f4:	40bd      	lsls	r5, r7
 80017f6:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017f8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017fa:	6843      	ldr	r3, [r0, #4]
 80017fc:	6805      	ldr	r5, [r0, #0]
 80017fe:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001800:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001802:	bf0b      	itete	eq
 8001804:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001806:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001808:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800180a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800180c:	b14b      	cbz	r3, 8001822 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001814:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001816:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001818:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	602b      	str	r3, [r5, #0]
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	f043 030a 	orr.w	r3, r3, #10
 8001830:	e7f0      	b.n	8001814 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001832:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001836:	2002      	movs	r0, #2
}
 8001838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800183c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800183c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001840:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001842:	2b02      	cmp	r3, #2
 8001844:	d003      	beq.n	800184e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001846:	2304      	movs	r3, #4
 8001848:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800184a:	2001      	movs	r0, #1
 800184c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184e:	6803      	ldr	r3, [r0, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	f022 020e 	bic.w	r2, r2, #14
 8001856:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <HAL_DMA_Abort_IT+0x88>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d01f      	beq.n	80018a6 <HAL_DMA_Abort_IT+0x6a>
 8001866:	3214      	adds	r2, #20
 8001868:	4293      	cmp	r3, r2
 800186a:	d01e      	beq.n	80018aa <HAL_DMA_Abort_IT+0x6e>
 800186c:	3214      	adds	r2, #20
 800186e:	4293      	cmp	r3, r2
 8001870:	d01d      	beq.n	80018ae <HAL_DMA_Abort_IT+0x72>
 8001872:	3214      	adds	r2, #20
 8001874:	4293      	cmp	r3, r2
 8001876:	d01d      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x78>
 8001878:	3214      	adds	r2, #20
 800187a:	4293      	cmp	r3, r2
 800187c:	d01d      	beq.n	80018ba <HAL_DMA_Abort_IT+0x7e>
 800187e:	3214      	adds	r2, #20
 8001880:	4293      	cmp	r3, r2
 8001882:	bf0c      	ite	eq
 8001884:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001888:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800188e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001890:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001892:	2301      	movs	r3, #1
 8001894:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001898:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800189a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800189e:	b17b      	cbz	r3, 80018c0 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80018a0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80018a2:	4620      	mov	r0, r4
 80018a4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018a6:	2301      	movs	r3, #1
 80018a8:	e7f0      	b.n	800188c <HAL_DMA_Abort_IT+0x50>
 80018aa:	2310      	movs	r3, #16
 80018ac:	e7ee      	b.n	800188c <HAL_DMA_Abort_IT+0x50>
 80018ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b2:	e7eb      	b.n	800188c <HAL_DMA_Abort_IT+0x50>
 80018b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b8:	e7e8      	b.n	800188c <HAL_DMA_Abort_IT+0x50>
 80018ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018be:	e7e5      	b.n	800188c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80018c0:	4618      	mov	r0, r3
}
 80018c2:	bd10      	pop	{r4, pc}
 80018c4:	40020008 	.word	0x40020008
 80018c8:	40020000 	.word	0x40020000

080018cc <HAL_DMA_IRQHandler>:
{
 80018cc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018ce:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018d0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018d4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80018d6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018d8:	4095      	lsls	r5, r2
 80018da:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80018dc:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018de:	d032      	beq.n	8001946 <HAL_DMA_IRQHandler+0x7a>
 80018e0:	074d      	lsls	r5, r1, #29
 80018e2:	d530      	bpl.n	8001946 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018e8:	bf5e      	ittt	pl
 80018ea:	681a      	ldrpl	r2, [r3, #0]
 80018ec:	f022 0204 	bicpl.w	r2, r2, #4
 80018f0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018f2:	4a3e      	ldr	r2, [pc, #248]	; (80019ec <HAL_DMA_IRQHandler+0x120>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d019      	beq.n	800192c <HAL_DMA_IRQHandler+0x60>
 80018f8:	3214      	adds	r2, #20
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d018      	beq.n	8001930 <HAL_DMA_IRQHandler+0x64>
 80018fe:	3214      	adds	r2, #20
 8001900:	4293      	cmp	r3, r2
 8001902:	d017      	beq.n	8001934 <HAL_DMA_IRQHandler+0x68>
 8001904:	3214      	adds	r2, #20
 8001906:	4293      	cmp	r3, r2
 8001908:	d017      	beq.n	800193a <HAL_DMA_IRQHandler+0x6e>
 800190a:	3214      	adds	r2, #20
 800190c:	4293      	cmp	r3, r2
 800190e:	d017      	beq.n	8001940 <HAL_DMA_IRQHandler+0x74>
 8001910:	3214      	adds	r2, #20
 8001912:	4293      	cmp	r3, r2
 8001914:	bf0c      	ite	eq
 8001916:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800191a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800191e:	4a34      	ldr	r2, [pc, #208]	; (80019f0 <HAL_DMA_IRQHandler+0x124>)
 8001920:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001922:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001924:	2b00      	cmp	r3, #0
 8001926:	d05e      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x11a>
}
 8001928:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800192a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800192c:	2304      	movs	r3, #4
 800192e:	e7f6      	b.n	800191e <HAL_DMA_IRQHandler+0x52>
 8001930:	2340      	movs	r3, #64	; 0x40
 8001932:	e7f4      	b.n	800191e <HAL_DMA_IRQHandler+0x52>
 8001934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001938:	e7f1      	b.n	800191e <HAL_DMA_IRQHandler+0x52>
 800193a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800193e:	e7ee      	b.n	800191e <HAL_DMA_IRQHandler+0x52>
 8001940:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001944:	e7eb      	b.n	800191e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001946:	2502      	movs	r5, #2
 8001948:	4095      	lsls	r5, r2
 800194a:	4225      	tst	r5, r4
 800194c:	d035      	beq.n	80019ba <HAL_DMA_IRQHandler+0xee>
 800194e:	078d      	lsls	r5, r1, #30
 8001950:	d533      	bpl.n	80019ba <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	0694      	lsls	r4, r2, #26
 8001956:	d406      	bmi.n	8001966 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	f022 020a 	bic.w	r2, r2, #10
 800195e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001960:	2201      	movs	r2, #1
 8001962:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001966:	4a21      	ldr	r2, [pc, #132]	; (80019ec <HAL_DMA_IRQHandler+0x120>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d019      	beq.n	80019a0 <HAL_DMA_IRQHandler+0xd4>
 800196c:	3214      	adds	r2, #20
 800196e:	4293      	cmp	r3, r2
 8001970:	d018      	beq.n	80019a4 <HAL_DMA_IRQHandler+0xd8>
 8001972:	3214      	adds	r2, #20
 8001974:	4293      	cmp	r3, r2
 8001976:	d017      	beq.n	80019a8 <HAL_DMA_IRQHandler+0xdc>
 8001978:	3214      	adds	r2, #20
 800197a:	4293      	cmp	r3, r2
 800197c:	d017      	beq.n	80019ae <HAL_DMA_IRQHandler+0xe2>
 800197e:	3214      	adds	r2, #20
 8001980:	4293      	cmp	r3, r2
 8001982:	d017      	beq.n	80019b4 <HAL_DMA_IRQHandler+0xe8>
 8001984:	3214      	adds	r2, #20
 8001986:	4293      	cmp	r3, r2
 8001988:	bf0c      	ite	eq
 800198a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800198e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_DMA_IRQHandler+0x124>)
 8001994:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001996:	2300      	movs	r3, #0
 8001998:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800199c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800199e:	e7c1      	b.n	8001924 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019a0:	2302      	movs	r3, #2
 80019a2:	e7f6      	b.n	8001992 <HAL_DMA_IRQHandler+0xc6>
 80019a4:	2320      	movs	r3, #32
 80019a6:	e7f4      	b.n	8001992 <HAL_DMA_IRQHandler+0xc6>
 80019a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ac:	e7f1      	b.n	8001992 <HAL_DMA_IRQHandler+0xc6>
 80019ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b2:	e7ee      	b.n	8001992 <HAL_DMA_IRQHandler+0xc6>
 80019b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b8:	e7eb      	b.n	8001992 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019ba:	2508      	movs	r5, #8
 80019bc:	4095      	lsls	r5, r2
 80019be:	4225      	tst	r5, r4
 80019c0:	d011      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x11a>
 80019c2:	0709      	lsls	r1, r1, #28
 80019c4:	d50f      	bpl.n	80019e6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	f021 010e 	bic.w	r1, r1, #14
 80019cc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ce:	2301      	movs	r3, #1
 80019d0:	fa03 f202 	lsl.w	r2, r3, r2
 80019d4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019d6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80019d8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80019dc:	2300      	movs	r3, #0
 80019de:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80019e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80019e4:	e79e      	b.n	8001924 <HAL_DMA_IRQHandler+0x58>
}
 80019e6:	bc70      	pop	{r4, r5, r6}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40020008 	.word	0x40020008
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80019f8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80019fa:	4616      	mov	r6, r2
 80019fc:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019fe:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001ba4 <HAL_GPIO_Init+0x1b0>
 8001a02:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001ba8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001a06:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001a0c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a10:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001a14:	45a0      	cmp	r8, r4
 8001a16:	d17f      	bne.n	8001b18 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001a18:	684d      	ldr	r5, [r1, #4]
 8001a1a:	2d12      	cmp	r5, #18
 8001a1c:	f000 80af 	beq.w	8001b7e <HAL_GPIO_Init+0x18a>
 8001a20:	f200 8088 	bhi.w	8001b34 <HAL_GPIO_Init+0x140>
 8001a24:	2d02      	cmp	r5, #2
 8001a26:	f000 80a7 	beq.w	8001b78 <HAL_GPIO_Init+0x184>
 8001a2a:	d87c      	bhi.n	8001b26 <HAL_GPIO_Init+0x132>
 8001a2c:	2d00      	cmp	r5, #0
 8001a2e:	f000 808e 	beq.w	8001b4e <HAL_GPIO_Init+0x15a>
 8001a32:	2d01      	cmp	r5, #1
 8001a34:	f000 809e 	beq.w	8001b74 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a38:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3c:	2cff      	cmp	r4, #255	; 0xff
 8001a3e:	bf93      	iteet	ls
 8001a40:	4682      	movls	sl, r0
 8001a42:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001a46:	3d08      	subhi	r5, #8
 8001a48:	f8d0 b000 	ldrls.w	fp, [r0]
 8001a4c:	bf92      	itee	ls
 8001a4e:	00b5      	lslls	r5, r6, #2
 8001a50:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001a54:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a56:	fa09 f805 	lsl.w	r8, r9, r5
 8001a5a:	ea2b 0808 	bic.w	r8, fp, r8
 8001a5e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a62:	bf88      	it	hi
 8001a64:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a68:	ea48 0505 	orr.w	r5, r8, r5
 8001a6c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a70:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001a74:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001a78:	d04e      	beq.n	8001b18 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7a:	4d47      	ldr	r5, [pc, #284]	; (8001b98 <HAL_GPIO_Init+0x1a4>)
 8001a7c:	4f46      	ldr	r7, [pc, #280]	; (8001b98 <HAL_GPIO_Init+0x1a4>)
 8001a7e:	69ad      	ldr	r5, [r5, #24]
 8001a80:	f026 0803 	bic.w	r8, r6, #3
 8001a84:	f045 0501 	orr.w	r5, r5, #1
 8001a88:	61bd      	str	r5, [r7, #24]
 8001a8a:	69bd      	ldr	r5, [r7, #24]
 8001a8c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001a90:	f005 0501 	and.w	r5, r5, #1
 8001a94:	9501      	str	r5, [sp, #4]
 8001a96:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001a9a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001aa0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001aa4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001aa8:	fa09 f90b 	lsl.w	r9, r9, fp
 8001aac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab0:	4d3a      	ldr	r5, [pc, #232]	; (8001b9c <HAL_GPIO_Init+0x1a8>)
 8001ab2:	42a8      	cmp	r0, r5
 8001ab4:	d068      	beq.n	8001b88 <HAL_GPIO_Init+0x194>
 8001ab6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aba:	42a8      	cmp	r0, r5
 8001abc:	d066      	beq.n	8001b8c <HAL_GPIO_Init+0x198>
 8001abe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ac2:	42a8      	cmp	r0, r5
 8001ac4:	d064      	beq.n	8001b90 <HAL_GPIO_Init+0x19c>
 8001ac6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aca:	42a8      	cmp	r0, r5
 8001acc:	bf0c      	ite	eq
 8001ace:	2503      	moveq	r5, #3
 8001ad0:	2504      	movne	r5, #4
 8001ad2:	fa05 f50b 	lsl.w	r5, r5, fp
 8001ad6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001ada:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ade:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae4:	bf14      	ite	ne
 8001ae6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae8:	43a5      	biceq	r5, r4
 8001aea:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aec:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001af2:	bf14      	ite	ne
 8001af4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af6:	43a5      	biceq	r5, r4
 8001af8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001afa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001afc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b00:	bf14      	ite	ne
 8001b02:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b04:	43a5      	biceq	r5, r4
 8001b06:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b08:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b0e:	bf14      	ite	ne
 8001b10:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b12:	ea25 0404 	biceq.w	r4, r5, r4
 8001b16:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001b18:	3601      	adds	r6, #1
 8001b1a:	2e10      	cmp	r6, #16
 8001b1c:	f47f af73 	bne.w	8001a06 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001b20:	b003      	add	sp, #12
 8001b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001b26:	2d03      	cmp	r5, #3
 8001b28:	d022      	beq.n	8001b70 <HAL_GPIO_Init+0x17c>
 8001b2a:	2d11      	cmp	r5, #17
 8001b2c:	d184      	bne.n	8001a38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b2e:	68ca      	ldr	r2, [r1, #12]
 8001b30:	3204      	adds	r2, #4
          break;
 8001b32:	e781      	b.n	8001a38 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001b34:	4f1a      	ldr	r7, [pc, #104]	; (8001ba0 <HAL_GPIO_Init+0x1ac>)
 8001b36:	42bd      	cmp	r5, r7
 8001b38:	d009      	beq.n	8001b4e <HAL_GPIO_Init+0x15a>
 8001b3a:	d812      	bhi.n	8001b62 <HAL_GPIO_Init+0x16e>
 8001b3c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001bac <HAL_GPIO_Init+0x1b8>
 8001b40:	454d      	cmp	r5, r9
 8001b42:	d004      	beq.n	8001b4e <HAL_GPIO_Init+0x15a>
 8001b44:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001b48:	454d      	cmp	r5, r9
 8001b4a:	f47f af75 	bne.w	8001a38 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b4e:	688a      	ldr	r2, [r1, #8]
 8001b50:	b1c2      	cbz	r2, 8001b84 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b52:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001b54:	bf0c      	ite	eq
 8001b56:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001b5a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b5e:	2208      	movs	r2, #8
 8001b60:	e76a      	b.n	8001a38 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001b62:	4575      	cmp	r5, lr
 8001b64:	d0f3      	beq.n	8001b4e <HAL_GPIO_Init+0x15a>
 8001b66:	4565      	cmp	r5, ip
 8001b68:	d0f1      	beq.n	8001b4e <HAL_GPIO_Init+0x15a>
 8001b6a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001bb0 <HAL_GPIO_Init+0x1bc>
 8001b6e:	e7eb      	b.n	8001b48 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b70:	2200      	movs	r2, #0
 8001b72:	e761      	b.n	8001a38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b74:	68ca      	ldr	r2, [r1, #12]
          break;
 8001b76:	e75f      	b.n	8001a38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b78:	68ca      	ldr	r2, [r1, #12]
 8001b7a:	3208      	adds	r2, #8
          break;
 8001b7c:	e75c      	b.n	8001a38 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b7e:	68ca      	ldr	r2, [r1, #12]
 8001b80:	320c      	adds	r2, #12
          break;
 8001b82:	e759      	b.n	8001a38 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b84:	2204      	movs	r2, #4
 8001b86:	e757      	b.n	8001a38 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b88:	2500      	movs	r5, #0
 8001b8a:	e7a2      	b.n	8001ad2 <HAL_GPIO_Init+0xde>
 8001b8c:	2501      	movs	r5, #1
 8001b8e:	e7a0      	b.n	8001ad2 <HAL_GPIO_Init+0xde>
 8001b90:	2502      	movs	r5, #2
 8001b92:	e79e      	b.n	8001ad2 <HAL_GPIO_Init+0xde>
 8001b94:	40010400 	.word	0x40010400
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010800 	.word	0x40010800
 8001ba0:	10210000 	.word	0x10210000
 8001ba4:	10310000 	.word	0x10310000
 8001ba8:	10320000 	.word	0x10320000
 8001bac:	10110000 	.word	0x10110000
 8001bb0:	10220000 	.word	0x10220000

08001bb4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb4:	b10a      	cbz	r2, 8001bba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb6:	6101      	str	r1, [r0, #16]
 8001bb8:	4770      	bx	lr
 8001bba:	0409      	lsls	r1, r1, #16
 8001bbc:	e7fb      	b.n	8001bb6 <HAL_GPIO_WritePin+0x2>

08001bbe <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001bbe:	68c3      	ldr	r3, [r0, #12]
 8001bc0:	4059      	eors	r1, r3
 8001bc2:	60c1      	str	r1, [r0, #12]
 8001bc4:	4770      	bx	lr

08001bc6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bc6:	6802      	ldr	r2, [r0, #0]
 8001bc8:	6953      	ldr	r3, [r2, #20]
 8001bca:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001bce:	d00d      	beq.n	8001bec <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001bd4:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001bd6:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001bd8:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001bda:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001be4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
 8001bea:	4770      	bx	lr
  }
  return HAL_OK;
 8001bec:	4618      	mov	r0, r3
}
 8001bee:	4770      	bx	lr

08001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	4617      	mov	r7, r2
 8001bf8:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bfa:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001bfe:	b28e      	uxth	r6, r1
 8001c00:	6825      	ldr	r5, [r4, #0]
 8001c02:	f1b8 0f01 	cmp.w	r8, #1
 8001c06:	bf0c      	ite	eq
 8001c08:	696b      	ldreq	r3, [r5, #20]
 8001c0a:	69ab      	ldrne	r3, [r5, #24]
 8001c0c:	ea36 0303 	bics.w	r3, r6, r3
 8001c10:	bf14      	ite	ne
 8001c12:	2001      	movne	r0, #1
 8001c14:	2000      	moveq	r0, #0
 8001c16:	b908      	cbnz	r0, 8001c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c1c:	696b      	ldr	r3, [r5, #20]
 8001c1e:	055a      	lsls	r2, r3, #21
 8001c20:	d512      	bpl.n	8001c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c22:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001c24:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c2c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001c30:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c32:	2304      	movs	r3, #4
 8001c34:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c36:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001c38:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c3a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001c3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001c40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001c48:	1c7b      	adds	r3, r7, #1
 8001c4a:	d0d9      	beq.n	8001c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c4c:	b94f      	cbnz	r7, 8001c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c4e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001c50:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c52:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001c54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001c58:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c62:	f7ff fa87 	bl	8001174 <HAL_GetTick>
 8001c66:	eba0 0009 	sub.w	r0, r0, r9
 8001c6a:	4287      	cmp	r7, r0
 8001c6c:	d2c8      	bcs.n	8001c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001c6e:	e7ee      	b.n	8001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001c70 <I2C_WaitOnFlagUntilTimeout>:
{
 8001c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c74:	4604      	mov	r4, r0
 8001c76:	4690      	mov	r8, r2
 8001c78:	461f      	mov	r7, r3
 8001c7a:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001c7c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001c80:	b28d      	uxth	r5, r1
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	f1b9 0f01 	cmp.w	r9, #1
 8001c88:	bf0c      	ite	eq
 8001c8a:	695b      	ldreq	r3, [r3, #20]
 8001c8c:	699b      	ldrne	r3, [r3, #24]
 8001c8e:	ea35 0303 	bics.w	r3, r5, r3
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	4543      	cmp	r3, r8
 8001c9a:	d002      	beq.n	8001ca2 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001c9c:	2000      	movs	r0, #0
}
 8001c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001ca2:	1c7b      	adds	r3, r7, #1
 8001ca4:	d0ed      	beq.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ca6:	b95f      	cbnz	r7, 8001cc0 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ca8:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001caa:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cac:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001cae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001cb2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001cb6:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001cc0:	f7ff fa58 	bl	8001174 <HAL_GetTick>
 8001cc4:	1b80      	subs	r0, r0, r6
 8001cc6:	4287      	cmp	r7, r0
 8001cc8:	d2db      	bcs.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001cca:	e7ed      	b.n	8001ca8 <I2C_WaitOnFlagUntilTimeout+0x38>

08001ccc <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	4604      	mov	r4, r0
 8001cd0:	460d      	mov	r5, r1
 8001cd2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	d501      	bpl.n	8001ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001cdc:	2000      	movs	r0, #0
 8001cde:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f7ff ff70 	bl	8001bc6 <I2C_IsAcknowledgeFailed>
 8001ce6:	b9a8      	cbnz	r0, 8001d14 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001ce8:	1c6a      	adds	r2, r5, #1
 8001cea:	d0f3      	beq.n	8001cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001cec:	b965      	cbnz	r5, 8001d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001cf0:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf2:	f043 0320 	orr.w	r3, r3, #32
 8001cf6:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cf8:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001cfa:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cfc:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001cfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001d02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d08:	f7ff fa34 	bl	8001174 <HAL_GetTick>
 8001d0c:	1b80      	subs	r0, r0, r6
 8001d0e:	4285      	cmp	r5, r0
 8001d10:	d2e0      	bcs.n	8001cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001d12:	e7ec      	b.n	8001cee <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001d14:	2001      	movs	r0, #1
}
 8001d16:	bd70      	pop	{r4, r5, r6, pc}

08001d18 <I2C_RequestMemoryWrite>:
{
 8001d18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001d1c:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d1e:	6802      	ldr	r2, [r0, #0]
{
 8001d20:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d22:	6813      	ldr	r3, [r2, #0]
{
 8001d24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2a:	6013      	str	r3, [r2, #0]
{
 8001d2c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d2e:	9600      	str	r6, [sp, #0]
 8001d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d32:	2200      	movs	r2, #0
 8001d34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001d38:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d3a:	f7ff ff99 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8001d3e:	b968      	cbnz	r0, 8001d5c <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001d46:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d4a:	4633      	mov	r3, r6
 8001d4c:	491a      	ldr	r1, [pc, #104]	; (8001db8 <I2C_RequestMemoryWrite+0xa0>)
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff ff4e 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d54:	b130      	cbz	r0, 8001d64 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d018      	beq.n	8001d8e <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001d5c:	2003      	movs	r0, #3
}
 8001d5e:	b004      	add	sp, #16
 8001d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	9003      	str	r0, [sp, #12]
 8001d68:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6c:	9203      	str	r2, [sp, #12]
 8001d6e:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d70:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d72:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d74:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d76:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d78:	f7ff ffa8 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d7c:	b148      	cbz	r0, 8001d92 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d1eb      	bne.n	8001d5c <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d84:	6822      	ldr	r2, [r4, #0]
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001d8e:	2001      	movs	r0, #1
 8001d90:	e7e5      	b.n	8001d5e <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d92:	f1b8 0f01 	cmp.w	r8, #1
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	d102      	bne.n	8001da0 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d9a:	b2ed      	uxtb	r5, r5
 8001d9c:	611d      	str	r5, [r3, #16]
 8001d9e:	e7de      	b.n	8001d5e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001da0:	0a2a      	lsrs	r2, r5, #8
 8001da2:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001da6:	4632      	mov	r2, r6
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff ff8f 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d1e5      	bne.n	8001d7e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	e7f1      	b.n	8001d9a <I2C_RequestMemoryWrite+0x82>
 8001db6:	bf00      	nop
 8001db8:	00010002 	.word	0x00010002

08001dbc <I2C_RequestMemoryRead>:
{
 8001dbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001dc0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001dc2:	6803      	ldr	r3, [r0, #0]
{
 8001dc4:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001dc6:	681a      	ldr	r2, [r3, #0]
{
 8001dc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001dd0:	681a      	ldr	r2, [r3, #0]
{
 8001dd2:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd8:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dde:	9500      	str	r5, [sp, #0]
 8001de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001de2:	2200      	movs	r2, #0
{
 8001de4:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001de6:	f7ff ff43 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8001dea:	b980      	cbnz	r0, 8001e0e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	b2ff      	uxtb	r7, r7
 8001df0:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8001df4:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001df6:	492d      	ldr	r1, [pc, #180]	; (8001eac <I2C_RequestMemoryRead+0xf0>)
 8001df8:	462b      	mov	r3, r5
 8001dfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff fef7 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e02:	b140      	cbz	r0, 8001e16 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d101      	bne.n	8001e0e <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	e000      	b.n	8001e10 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001e0e:	2003      	movs	r0, #3
}
 8001e10:	b004      	add	sp, #16
 8001e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	9003      	str	r0, [sp, #12]
 8001e1a:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e1c:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1e:	9203      	str	r2, [sp, #12]
 8001e20:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e22:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e24:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e26:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e28:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2a:	f7ff ff4f 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001e2e:	b140      	cbz	r0, 8001e42 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d1eb      	bne.n	8001e0e <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e36:	6822      	ldr	r2, [r4, #0]
 8001e38:	6813      	ldr	r3, [r2, #0]
 8001e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	e7e3      	b.n	8001e0a <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e42:	f1b8 0f01 	cmp.w	r8, #1
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	d124      	bne.n	8001e94 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e4a:	b2f6      	uxtb	r6, r6
 8001e4c:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e4e:	462a      	mov	r2, r5
 8001e50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7ff ff3a 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d1e8      	bne.n	8001e30 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e5e:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e60:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e62:	680b      	ldr	r3, [r1, #0]
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e6a:	9500      	str	r5, [sp, #0]
 8001e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e72:	f7ff fefd 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d1c9      	bne.n	8001e0e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	f047 0701 	orr.w	r7, r7, #1
 8001e80:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e84:	462b      	mov	r3, r5
 8001e86:	4909      	ldr	r1, [pc, #36]	; (8001eac <I2C_RequestMemoryRead+0xf0>)
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff feb1 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d1b8      	bne.n	8001e04 <I2C_RequestMemoryRead+0x48>
 8001e92:	e7bd      	b.n	8001e10 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e94:	0a32      	lsrs	r2, r6, #8
 8001e96:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e9a:	462a      	mov	r2, r5
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f7ff ff15 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d1c4      	bne.n	8001e30 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	e7cf      	b.n	8001e4a <I2C_RequestMemoryRead+0x8e>
 8001eaa:	bf00      	nop
 8001eac:	00010002 	.word	0x00010002

08001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	460d      	mov	r5, r1
 8001eb6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001eb8:	6820      	ldr	r0, [r4, #0]
 8001eba:	6943      	ldr	r3, [r0, #20]
 8001ebc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001ec0:	d001      	beq.n	8001ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001ec2:	2000      	movs	r0, #0
}
 8001ec4:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ec6:	6942      	ldr	r2, [r0, #20]
 8001ec8:	06d2      	lsls	r2, r2, #27
 8001eca:	d50b      	bpl.n	8001ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ecc:	f06f 0210 	mvn.w	r2, #16
 8001ed0:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001ed2:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed4:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001ed6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001eda:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001ede:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ee4:	b95d      	cbnz	r5, 8001efe <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001ee8:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eea:	f043 0320 	orr.w	r3, r3, #32
 8001eee:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001efc:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001efe:	f7ff f939 	bl	8001174 <HAL_GetTick>
 8001f02:	1b80      	subs	r0, r0, r6
 8001f04:	4285      	cmp	r5, r0
 8001f06:	d2d7      	bcs.n	8001eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001f08:	e7ed      	b.n	8001ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001f0a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001f0a:	b570      	push	{r4, r5, r6, lr}
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	460d      	mov	r5, r1
 8001f10:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	075b      	lsls	r3, r3, #29
 8001f18:	d501      	bpl.n	8001f1e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7ff fe51 	bl	8001bc6 <I2C_IsAcknowledgeFailed>
 8001f24:	b9a8      	cbnz	r0, 8001f52 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001f26:	1c6a      	adds	r2, r5, #1
 8001f28:	d0f3      	beq.n	8001f12 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f2a:	b965      	cbnz	r5, 8001f46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001f2e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f30:	f043 0320 	orr.w	r3, r3, #32
 8001f34:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f36:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001f38:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f3a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001f3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001f40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f46:	f7ff f915 	bl	8001174 <HAL_GetTick>
 8001f4a:	1b80      	subs	r0, r0, r6
 8001f4c:	4285      	cmp	r5, r0
 8001f4e:	d2e0      	bcs.n	8001f12 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001f50:	e7ec      	b.n	8001f2c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001f52:	2001      	movs	r0, #1
}
 8001f54:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f58 <HAL_I2C_Init>:
{
 8001f58:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	b908      	cbnz	r0, 8001f62 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001f5e:	2001      	movs	r0, #1
 8001f60:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001f62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f6a:	b91b      	cbnz	r3, 8001f74 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001f6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001f70:	f005 ff04 	bl	8007d7c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f74:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001f76:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f84:	f000 feec 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f88:	6863      	ldr	r3, [r4, #4]
 8001f8a:	4a2f      	ldr	r2, [pc, #188]	; (8002048 <HAL_I2C_Init+0xf0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d830      	bhi.n	8001ff2 <HAL_I2C_Init+0x9a>
 8001f90:	4a2e      	ldr	r2, [pc, #184]	; (800204c <HAL_I2C_Init+0xf4>)
 8001f92:	4290      	cmp	r0, r2
 8001f94:	d9e3      	bls.n	8001f5e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001f96:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001f98:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001f9a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001f9e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001fa0:	3201      	adds	r2, #1
 8001fa2:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001fa4:	4a28      	ldr	r2, [pc, #160]	; (8002048 <HAL_I2C_Init+0xf0>)
 8001fa6:	3801      	subs	r0, #1
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d832      	bhi.n	8002012 <HAL_I2C_Init+0xba>
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fb2:	1c43      	adds	r3, r0, #1
 8001fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	bf38      	it	cc
 8001fbc:	2304      	movcc	r3, #4
 8001fbe:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fc0:	6a22      	ldr	r2, [r4, #32]
 8001fc2:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc4:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001fca:	68e2      	ldr	r2, [r4, #12]
 8001fcc:	6923      	ldr	r3, [r4, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001fd2:	69a2      	ldr	r2, [r4, #24]
 8001fd4:	6963      	ldr	r3, [r4, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001fda:	680b      	ldr	r3, [r1, #0]
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fea:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001ff0:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_I2C_Init+0xfc>)
 8001ff4:	4290      	cmp	r0, r2
 8001ff6:	d9b2      	bls.n	8001f5e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001ff8:	4d15      	ldr	r5, [pc, #84]	; (8002050 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ffa:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001ffe:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8002002:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002004:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8002006:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002008:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800200c:	fbb2 f2f5 	udiv	r2, r2, r5
 8002010:	e7c6      	b.n	8001fa0 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002012:	68a2      	ldr	r2, [r4, #8]
 8002014:	b952      	cbnz	r2, 800202c <HAL_I2C_Init+0xd4>
 8002016:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800201a:	fbb0 f0f3 	udiv	r0, r0, r3
 800201e:	1c43      	adds	r3, r0, #1
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	b16b      	cbz	r3, 8002042 <HAL_I2C_Init+0xea>
 8002026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202a:	e7c8      	b.n	8001fbe <HAL_I2C_Init+0x66>
 800202c:	2219      	movs	r2, #25
 800202e:	4353      	muls	r3, r2
 8002030:	fbb0 f0f3 	udiv	r0, r0, r3
 8002034:	1c43      	adds	r3, r0, #1
 8002036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203a:	b113      	cbz	r3, 8002042 <HAL_I2C_Init+0xea>
 800203c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002040:	e7bd      	b.n	8001fbe <HAL_I2C_Init+0x66>
 8002042:	2301      	movs	r3, #1
 8002044:	e7bb      	b.n	8001fbe <HAL_I2C_Init+0x66>
 8002046:	bf00      	nop
 8002048:	000186a0 	.word	0x000186a0
 800204c:	001e847f 	.word	0x001e847f
 8002050:	000f4240 	.word	0x000f4240
 8002054:	003d08ff 	.word	0x003d08ff

08002058 <HAL_I2C_Master_Transmit>:
{
 8002058:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800205c:	4604      	mov	r4, r0
 800205e:	461f      	mov	r7, r3
 8002060:	460d      	mov	r5, r1
 8002062:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8002064:	f7ff f886 	bl	8001174 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002068:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800206c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800206e:	2b20      	cmp	r3, #32
 8002070:	d004      	beq.n	800207c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8002072:	2502      	movs	r5, #2
}
 8002074:	4628      	mov	r0, r5
 8002076:	b004      	add	sp, #16
 8002078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800207c:	9000      	str	r0, [sp, #0]
 800207e:	2319      	movs	r3, #25
 8002080:	2201      	movs	r2, #1
 8002082:	495d      	ldr	r1, [pc, #372]	; (80021f8 <HAL_I2C_Master_Transmit+0x1a0>)
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff fdf3 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 800208a:	2800      	cmp	r0, #0
 800208c:	d1f1      	bne.n	8002072 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800208e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002092:	2b01      	cmp	r3, #1
 8002094:	d0ed      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x1a>
 8002096:	2301      	movs	r3, #1
 8002098:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80020a2:	bf5e      	ittt	pl
 80020a4:	681a      	ldrpl	r2, [r3, #0]
 80020a6:	f042 0201 	orrpl.w	r2, r2, #1
 80020aa:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020b4:	2221      	movs	r2, #33	; 0x21
 80020b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020ba:	2210      	movs	r2, #16
 80020bc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c0:	2200      	movs	r2, #0
 80020c2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020c4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80020c8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ca:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80020cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80020ce:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80020d2:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020d6:	2a04      	cmp	r2, #4
 80020d8:	d004      	beq.n	80020e4 <HAL_I2C_Master_Transmit+0x8c>
 80020da:	2a01      	cmp	r2, #1
 80020dc:	d002      	beq.n	80020e4 <HAL_I2C_Master_Transmit+0x8c>
 80020de:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80020e2:	d104      	bne.n	80020ee <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e002      	b.n	80020f4 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020f0:	2a12      	cmp	r2, #18
 80020f2:	d0f7      	beq.n	80020e4 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020f4:	9600      	str	r6, [sp, #0]
 80020f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020f8:	2200      	movs	r2, #0
 80020fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020fe:	4620      	mov	r0, r4
 8002100:	f7ff fdb6 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8002104:	bb28      	cbnz	r0, 8002152 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002106:	6923      	ldr	r3, [r4, #16]
 8002108:	6822      	ldr	r2, [r4, #0]
 800210a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800210e:	d112      	bne.n	8002136 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002110:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002114:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002116:	4633      	mov	r3, r6
 8002118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800211a:	4938      	ldr	r1, [pc, #224]	; (80021fc <HAL_I2C_Master_Transmit+0x1a4>)
 800211c:	4620      	mov	r0, r4
 800211e:	f7ff fd67 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002122:	4605      	mov	r5, r0
 8002124:	b9a0      	cbnz	r0, 8002150 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	9003      	str	r0, [sp, #12]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	9203      	str	r2, [sp, #12]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	9303      	str	r3, [sp, #12]
 8002132:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8002134:	e050      	b.n	80021d8 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002136:	11eb      	asrs	r3, r5, #7
 8002138:	f003 0306 	and.w	r3, r3, #6
 800213c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002140:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002142:	492f      	ldr	r1, [pc, #188]	; (8002200 <HAL_I2C_Master_Transmit+0x1a8>)
 8002144:	4633      	mov	r3, r6
 8002146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002148:	4620      	mov	r0, r4
 800214a:	f7ff fd51 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800214e:	b148      	cbz	r0, 8002164 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002150:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002154:	2b04      	cmp	r3, #4
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 800215c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002160:	2501      	movs	r5, #1
 8002162:	e787      	b.n	8002074 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	b2ed      	uxtb	r5, r5
 8002168:	611d      	str	r5, [r3, #16]
 800216a:	e7d4      	b.n	8002116 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 800216c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8002170:	2503      	movs	r5, #3
 8002172:	e77f      	b.n	8002074 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002174:	4632      	mov	r2, r6
 8002176:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff fda7 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 800217e:	b140      	cbz	r0, 8002192 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002182:	2b04      	cmp	r3, #4
 8002184:	d1f4      	bne.n	8002170 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	6813      	ldr	r3, [r2, #0]
 800218a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e7e6      	b.n	8002160 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002192:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002194:	6820      	ldr	r0, [r4, #0]
 8002196:	1c4b      	adds	r3, r1, #1
 8002198:	6263      	str	r3, [r4, #36]	; 0x24
 800219a:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 800219c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800219e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80021a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80021aa:	1e53      	subs	r3, r2, #1
 80021ac:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ae:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80021b0:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021b2:	d50a      	bpl.n	80021ca <HAL_I2C_Master_Transmit+0x172>
 80021b4:	b14b      	cbz	r3, 80021ca <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80021b6:	1c8b      	adds	r3, r1, #2
 80021b8:	6263      	str	r3, [r4, #36]	; 0x24
 80021ba:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80021bc:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80021be:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80021c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80021c2:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ca:	4632      	mov	r2, r6
 80021cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff fe9b 	bl	8001f0a <I2C_WaitOnBTFFlagUntilTimeout>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d1d3      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80021d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1ca      	bne.n	8002174 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021de:	6821      	ldr	r1, [r4, #0]
 80021e0:	680a      	ldr	r2, [r1, #0]
 80021e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80021e8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80021ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80021f6:	e73d      	b.n	8002074 <HAL_I2C_Master_Transmit+0x1c>
 80021f8:	00100002 	.word	0x00100002
 80021fc:	00010002 	.word	0x00010002
 8002200:	00010008 	.word	0x00010008

08002204 <HAL_I2C_Master_Receive>:
{
 8002204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002208:	4604      	mov	r4, r0
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	4698      	mov	r8, r3
 800220e:	460d      	mov	r5, r1
 8002210:	4691      	mov	r9, r2
 8002212:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002214:	f7fe ffae 	bl	8001174 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002218:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800221c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800221e:	2b20      	cmp	r3, #32
 8002220:	d004      	beq.n	800222c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8002222:	2502      	movs	r5, #2
}
 8002224:	4628      	mov	r0, r5
 8002226:	b009      	add	sp, #36	; 0x24
 8002228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800222c:	9000      	str	r0, [sp, #0]
 800222e:	2319      	movs	r3, #25
 8002230:	2201      	movs	r2, #1
 8002232:	49a2      	ldr	r1, [pc, #648]	; (80024bc <HAL_I2C_Master_Receive+0x2b8>)
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff fd1b 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 800223a:	2800      	cmp	r0, #0
 800223c:	d1f1      	bne.n	8002222 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800223e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002242:	2b01      	cmp	r3, #1
 8002244:	d0ed      	beq.n	8002222 <HAL_I2C_Master_Receive+0x1e>
 8002246:	2301      	movs	r3, #1
 8002248:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002252:	bf5e      	ittt	pl
 8002254:	681a      	ldrpl	r2, [r3, #0]
 8002256:	f042 0201 	orrpl.w	r2, r2, #1
 800225a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002262:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002264:	2222      	movs	r2, #34	; 0x22
 8002266:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800226a:	2210      	movs	r2, #16
 800226c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002270:	2200      	movs	r2, #0
 8002272:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002274:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8002278:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800227c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800227e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002280:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002284:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002286:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002288:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800228a:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800228c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002290:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002292:	d004      	beq.n	800229e <HAL_I2C_Master_Receive+0x9a>
 8002294:	2a01      	cmp	r2, #1
 8002296:	d002      	beq.n	800229e <HAL_I2C_Master_Receive+0x9a>
 8002298:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800229c:	d104      	bne.n	80022a8 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e002      	b.n	80022ae <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80022a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022aa:	2a11      	cmp	r2, #17
 80022ac:	d0f7      	beq.n	800229e <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022ae:	9600      	str	r6, [sp, #0]
 80022b0:	463b      	mov	r3, r7
 80022b2:	2200      	movs	r2, #0
 80022b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fcd9 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 80022be:	2800      	cmp	r0, #0
 80022c0:	d14d      	bne.n	800235e <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c2:	6923      	ldr	r3, [r4, #16]
 80022c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	d139      	bne.n	8002340 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022cc:	f045 0501 	orr.w	r5, r5, #1
 80022d0:	b2ed      	uxtb	r5, r5
 80022d2:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022d4:	4633      	mov	r3, r6
 80022d6:	463a      	mov	r2, r7
 80022d8:	4979      	ldr	r1, [pc, #484]	; (80024c0 <HAL_I2C_Master_Receive+0x2bc>)
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff fc88 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e0:	4605      	mov	r5, r0
 80022e2:	2800      	cmp	r0, #0
 80022e4:	d13a      	bne.n	800235c <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 80022e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	2a00      	cmp	r2, #0
 80022ec:	d069      	beq.n	80023c2 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 80022ee:	2a01      	cmp	r2, #1
 80022f0:	d17a      	bne.n	80023e8 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022fa:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	9504      	str	r5, [sp, #16]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	9204      	str	r2, [sp, #16]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	9204      	str	r2, [sp, #16]
 8002308:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002310:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002312:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002314:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80024c8 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8002318:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	d05b      	beq.n	80023d6 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 800231e:	2b03      	cmp	r3, #3
 8002320:	f200 80d4 	bhi.w	80024cc <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8002324:	2b01      	cmp	r3, #1
 8002326:	d17b      	bne.n	8002420 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002328:	4632      	mov	r2, r6
 800232a:	4639      	mov	r1, r7
 800232c:	4620      	mov	r0, r4
 800232e:	f7ff fdbf 	bl	8001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002332:	2800      	cmp	r0, #0
 8002334:	f000 8093 	beq.w	800245e <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800233a:	2b20      	cmp	r3, #32
 800233c:	d116      	bne.n	800236c <HAL_I2C_Master_Receive+0x168>
 800233e:	e03e      	b.n	80023be <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002340:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8002344:	f008 0806 	and.w	r8, r8, #6
 8002348:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800234c:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800234e:	495d      	ldr	r1, [pc, #372]	; (80024c4 <HAL_I2C_Master_Receive+0x2c0>)
 8002350:	4633      	mov	r3, r6
 8002352:	463a      	mov	r2, r7
 8002354:	4620      	mov	r0, r4
 8002356:	f7ff fc4b 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800235a:	b148      	cbz	r0, 8002370 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002360:	2b04      	cmp	r3, #4
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	d128      	bne.n	80023ba <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8002368:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 800236c:	2501      	movs	r5, #1
 800236e:	e759      	b.n	8002224 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	b2ed      	uxtb	r5, r5
 8002374:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002376:	463a      	mov	r2, r7
 8002378:	4633      	mov	r3, r6
 800237a:	4951      	ldr	r1, [pc, #324]	; (80024c0 <HAL_I2C_Master_Receive+0x2bc>)
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff fc37 	bl	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002382:	4602      	mov	r2, r0
 8002384:	2800      	cmp	r0, #0
 8002386:	d1e9      	bne.n	800235c <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	9007      	str	r0, [sp, #28]
 800238c:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800238e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002390:	9107      	str	r1, [sp, #28]
 8002392:	6999      	ldr	r1, [r3, #24]
 8002394:	9107      	str	r1, [sp, #28]
 8002396:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002398:	6819      	ldr	r1, [r3, #0]
 800239a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800239e:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a0:	9600      	str	r6, [sp, #0]
 80023a2:	463b      	mov	r3, r7
 80023a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023a8:	f7ff fc62 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 80023ac:	2800      	cmp	r0, #0
 80023ae:	d1d6      	bne.n	800235e <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80023b0:	6822      	ldr	r2, [r4, #0]
 80023b2:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80023b6:	6113      	str	r3, [r2, #16]
 80023b8:	e78c      	b.n	80022d4 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 80023ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 80023be:	2503      	movs	r5, #3
 80023c0:	e730      	b.n	8002224 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c2:	9503      	str	r5, [sp, #12]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	9203      	str	r2, [sp, #12]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	9203      	str	r2, [sp, #12]
 80023cc:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	2320      	movs	r3, #32
 80023d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	2300      	movs	r3, #0
 80023de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80023e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80023e6:	e71d      	b.n	8002224 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80023e8:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80023ea:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80023ec:	d10e      	bne.n	800240c <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80023ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023f4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	9505      	str	r5, [sp, #20]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	9205      	str	r2, [sp, #20]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	9205      	str	r2, [sp, #20]
 8002402:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800240a:	e781      	b.n	8002310 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800240c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002410:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002412:	9506      	str	r5, [sp, #24]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	9206      	str	r2, [sp, #24]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	9306      	str	r3, [sp, #24]
 800241c:	9b06      	ldr	r3, [sp, #24]
 800241e:	e779      	b.n	8002314 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8002420:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002422:	9600      	str	r6, [sp, #0]
 8002424:	463b      	mov	r3, r7
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	4641      	mov	r1, r8
 800242c:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 800242e:	d124      	bne.n	800247a <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002430:	f7ff fc1e 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8002434:	2800      	cmp	r0, #0
 8002436:	d1c2      	bne.n	80023be <HAL_I2C_Master_Receive+0x1ba>
 8002438:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002442:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002444:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	1c51      	adds	r1, r2, #1
 800244a:	6261      	str	r1, [r4, #36]	; 0x24
 800244c:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800244e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002454:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002456:	3b01      	subs	r3, #1
 8002458:	b29b      	uxth	r3, r3
 800245a:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800245c:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800245e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	6262      	str	r2, [r4, #36]	; 0x24
 8002464:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002466:	6912      	ldr	r2, [r2, #16]
 8002468:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800246a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002470:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002472:	3b01      	subs	r3, #1
 8002474:	b29b      	uxth	r3, r3
 8002476:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002478:	e74e      	b.n	8002318 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800247a:	f7ff fbf9 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 800247e:	4602      	mov	r2, r0
 8002480:	2800      	cmp	r0, #0
 8002482:	d19c      	bne.n	80023be <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002484:	6821      	ldr	r1, [r4, #0]
 8002486:	680b      	ldr	r3, [r1, #0]
 8002488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800248c:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800248e:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002490:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002492:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002494:	1c59      	adds	r1, r3, #1
 8002496:	6261      	str	r1, [r4, #36]	; 0x24
 8002498:	6821      	ldr	r1, [r4, #0]
 800249a:	6909      	ldr	r1, [r1, #16]
 800249c:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 800249e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a0:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 80024a2:	3b01      	subs	r3, #1
 80024a4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80024a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a8:	4641      	mov	r1, r8
          hi2c->XferCount--;
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b0:	463b      	mov	r3, r7
 80024b2:	f7ff fbdd 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d0bf      	beq.n	800243a <HAL_I2C_Master_Receive+0x236>
 80024ba:	e780      	b.n	80023be <HAL_I2C_Master_Receive+0x1ba>
 80024bc:	00100002 	.word	0x00100002
 80024c0:	00010002 	.word	0x00010002
 80024c4:	00010008 	.word	0x00010008
 80024c8:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80024cc:	4632      	mov	r2, r6
 80024ce:	4639      	mov	r1, r7
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff fced 	bl	8001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	f47f af2e 	bne.w	8002338 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	6262      	str	r2, [r4, #36]	; 0x24
 80024e2:	6822      	ldr	r2, [r4, #0]
 80024e4:	6912      	ldr	r2, [r2, #16]
 80024e6:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80024e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024ea:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80024ec:	3b01      	subs	r3, #1
 80024ee:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80024f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024f8:	6953      	ldr	r3, [r2, #20]
 80024fa:	075b      	lsls	r3, r3, #29
 80024fc:	f57f af0c 	bpl.w	8002318 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002502:	1c59      	adds	r1, r3, #1
 8002504:	6261      	str	r1, [r4, #36]	; 0x24
 8002506:	e7ae      	b.n	8002466 <HAL_I2C_Master_Receive+0x262>

08002508 <HAL_I2C_Mem_Write>:
{
 8002508:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800250c:	4604      	mov	r4, r0
 800250e:	469a      	mov	sl, r3
 8002510:	4688      	mov	r8, r1
 8002512:	4691      	mov	r9, r2
 8002514:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8002516:	f7fe fe2d 	bl	8001174 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800251a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800251e:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002520:	2b20      	cmp	r3, #32
 8002522:	d003      	beq.n	800252c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8002524:	2002      	movs	r0, #2
}
 8002526:	b002      	add	sp, #8
 8002528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800252c:	9000      	str	r0, [sp, #0]
 800252e:	2319      	movs	r3, #25
 8002530:	2201      	movs	r2, #1
 8002532:	493e      	ldr	r1, [pc, #248]	; (800262c <HAL_I2C_Mem_Write+0x124>)
 8002534:	4620      	mov	r0, r4
 8002536:	f7ff fb9b 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 800253a:	2800      	cmp	r0, #0
 800253c:	d1f2      	bne.n	8002524 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800253e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d0ee      	beq.n	8002524 <HAL_I2C_Mem_Write+0x1c>
 8002546:	2301      	movs	r3, #1
 8002548:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800254c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254e:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002550:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002552:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002554:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002556:	bf58      	it	pl
 8002558:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800255a:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 800255c:	bf5c      	itt	pl
 800255e:	f042 0201 	orrpl.w	r2, r2, #1
 8002562:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800256c:	2321      	movs	r3, #33	; 0x21
 800256e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002572:	2340      	movs	r3, #64	; 0x40
 8002574:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8002578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257a:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800257c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800257e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002582:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8002584:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002588:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800258a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800258c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800258e:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8002590:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002592:	4653      	mov	r3, sl
 8002594:	f7ff fbc0 	bl	8001d18 <I2C_RequestMemoryWrite>
 8002598:	2800      	cmp	r0, #0
 800259a:	d02a      	beq.n	80025f2 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800259e:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d107      	bne.n	80025b6 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 80025a6:	2001      	movs	r0, #1
 80025a8:	e7bd      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025aa:	f7ff fb8f 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80025ae:	b120      	cbz	r0, 80025ba <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d034      	beq.n	8002620 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 80025b6:	2003      	movs	r0, #3
 80025b8:	e7b5      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80025ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80025bc:	6827      	ldr	r7, [r4, #0]
 80025be:	1c4b      	adds	r3, r1, #1
 80025c0:	6263      	str	r3, [r4, #36]	; 0x24
 80025c2:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80025c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80025c6:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 80025c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80025ca:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025d2:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 80025d4:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025d6:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80025d8:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025da:	d50a      	bpl.n	80025f2 <HAL_I2C_Mem_Write+0xea>
 80025dc:	b148      	cbz	r0, 80025f2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80025de:	1c8b      	adds	r3, r1, #2
 80025e0:	6263      	str	r3, [r4, #36]	; 0x24
 80025e2:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80025e4:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80025e6:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 80025e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80025ea:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80025f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f4:	462a      	mov	r2, r5
 80025f6:	4631      	mov	r1, r6
 80025f8:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1d5      	bne.n	80025aa <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fe:	f7ff fc84 	bl	8001f0a <I2C_WaitOnBTFFlagUntilTimeout>
 8002602:	2800      	cmp	r0, #0
 8002604:	d1d4      	bne.n	80025b0 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002606:	6822      	ldr	r2, [r4, #0]
 8002608:	6813      	ldr	r3, [r2, #0]
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002612:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002616:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800261a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800261e:	e782      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002620:	6822      	ldr	r2, [r4, #0]
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e7bc      	b.n	80025a6 <HAL_I2C_Mem_Write+0x9e>
 800262c:	00100002 	.word	0x00100002
 8002630:	ffff0000 	.word	0xffff0000

08002634 <HAL_I2C_Mem_Read>:
{
 8002634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002638:	4604      	mov	r4, r0
 800263a:	b086      	sub	sp, #24
 800263c:	469a      	mov	sl, r3
 800263e:	460d      	mov	r5, r1
 8002640:	4691      	mov	r9, r2
 8002642:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002644:	f7fe fd96 	bl	8001174 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002648:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800264c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800264e:	2b20      	cmp	r3, #32
 8002650:	d004      	beq.n	800265c <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8002652:	2502      	movs	r5, #2
}
 8002654:	4628      	mov	r0, r5
 8002656:	b006      	add	sp, #24
 8002658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265c:	9000      	str	r0, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	2201      	movs	r2, #1
 8002662:	4981      	ldr	r1, [pc, #516]	; (8002868 <HAL_I2C_Mem_Read+0x234>)
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff fb03 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 800266a:	2800      	cmp	r0, #0
 800266c:	d1f1      	bne.n	8002652 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800266e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d0ed      	beq.n	8002652 <HAL_I2C_Mem_Read+0x1e>
 8002676:	2301      	movs	r3, #1
 8002678:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800267c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267e:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002682:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002684:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002686:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002688:	bf58      	it	pl
 800268a:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268c:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 800268e:	bf5c      	itt	pl
 8002690:	f042 0201 	orrpl.w	r2, r2, #1
 8002694:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800269e:	2322      	movs	r3, #34	; 0x22
 80026a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a4:	2340      	movs	r3, #64	; 0x40
 80026a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80026aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ac:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80026b0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026b2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026b6:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 80026b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ba:	4b6c      	ldr	r3, [pc, #432]	; (800286c <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026bc:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026be:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80026c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c2:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 80026c4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c6:	4653      	mov	r3, sl
 80026c8:	f7ff fb78 	bl	8001dbc <I2C_RequestMemoryRead>
 80026cc:	4605      	mov	r5, r0
 80026ce:	b130      	cbz	r0, 80026de <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80026d2:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d13d      	bne.n	8002756 <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 80026da:	2501      	movs	r5, #1
 80026dc:	e7ba      	b.n	8002654 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 80026de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	b992      	cbnz	r2, 800270a <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e4:	9002      	str	r0, [sp, #8]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	9202      	str	r2, [sp, #8]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	9202      	str	r2, [sp, #8]
 80026ee:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	2320      	movs	r3, #32
 80026fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fe:	2300      	movs	r3, #0
 8002700:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002704:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002708:	e7a4      	b.n	8002654 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 800270a:	2a01      	cmp	r2, #1
 800270c:	d125      	bne.n	800275a <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	9003      	str	r0, [sp, #12]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	9203      	str	r2, [sp, #12]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	9203      	str	r2, [sp, #12]
 8002724:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800272c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800272e:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002730:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8002870 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8002734:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0de      	beq.n	80026f8 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 800273a:	2b03      	cmp	r3, #3
 800273c:	d877      	bhi.n	800282e <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 800273e:	2b01      	cmp	r3, #1
 8002740:	d127      	bne.n	8002792 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002742:	4632      	mov	r2, r6
 8002744:	4639      	mov	r1, r7
 8002746:	4620      	mov	r0, r4
 8002748:	f7ff fbb2 	bl	8001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800274c:	2800      	cmp	r0, #0
 800274e:	d03f      	beq.n	80027d0 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002752:	2b20      	cmp	r3, #32
 8002754:	d1c1      	bne.n	80026da <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8002756:	2503      	movs	r5, #3
 8002758:	e77c      	b.n	8002654 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 800275a:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800275c:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 800275e:	d10e      	bne.n	800277e <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002764:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002766:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	9004      	str	r0, [sp, #16]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	9204      	str	r2, [sp, #16]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	9204      	str	r2, [sp, #16]
 8002774:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277c:	e7d6      	b.n	800272c <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002782:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002784:	9005      	str	r0, [sp, #20]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	9205      	str	r2, [sp, #20]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	9305      	str	r3, [sp, #20]
 800278e:	9b05      	ldr	r3, [sp, #20]
 8002790:	e7ce      	b.n	8002730 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 8002792:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002794:	9600      	str	r6, [sp, #0]
 8002796:	463b      	mov	r3, r7
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	4641      	mov	r1, r8
 800279e:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80027a0:	d124      	bne.n	80027ec <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027a2:	f7ff fa65 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d1d5      	bne.n	8002756 <HAL_I2C_Mem_Read+0x122>
 80027aa:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b4:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	1c51      	adds	r1, r2, #1
 80027bc:	6261      	str	r1, [r4, #36]	; 0x24
 80027be:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 80027c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80027c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027ce:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	6262      	str	r2, [r4, #36]	; 0x24
 80027d6:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027d8:	6912      	ldr	r2, [r2, #16]
 80027da:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80027dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80027e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80027ea:	e7a3      	b.n	8002734 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ec:	f7ff fa40 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4602      	mov	r2, r0
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d1af      	bne.n	8002756 <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80027f6:	6821      	ldr	r1, [r4, #0]
 80027f8:	680b      	ldr	r3, [r1, #0]
 80027fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027fe:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002800:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002802:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002804:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002806:	1c59      	adds	r1, r3, #1
 8002808:	6261      	str	r1, [r4, #36]	; 0x24
 800280a:	6821      	ldr	r1, [r4, #0]
 800280c:	6909      	ldr	r1, [r1, #16]
 800280e:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8002810:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002812:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8002814:	3b01      	subs	r3, #1
 8002816:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002818:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800281a:	4641      	mov	r1, r8
          hi2c->XferCount--;
 800281c:	3b01      	subs	r3, #1
 800281e:	b29b      	uxth	r3, r3
 8002820:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002822:	463b      	mov	r3, r7
 8002824:	f7ff fa24 	bl	8001c70 <I2C_WaitOnFlagUntilTimeout>
 8002828:	2800      	cmp	r0, #0
 800282a:	d0bf      	beq.n	80027ac <HAL_I2C_Mem_Read+0x178>
 800282c:	e793      	b.n	8002756 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282e:	4632      	mov	r2, r6
 8002830:	4639      	mov	r1, r7
 8002832:	4620      	mov	r0, r4
 8002834:	f7ff fb3c 	bl	8001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002838:	2800      	cmp	r0, #0
 800283a:	d189      	bne.n	8002750 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800283c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	6262      	str	r2, [r4, #36]	; 0x24
 8002842:	6822      	ldr	r2, [r4, #0]
 8002844:	6912      	ldr	r2, [r2, #16]
 8002846:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002848:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800284a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 800284c:	3b01      	subs	r3, #1
 800284e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002850:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002852:	3b01      	subs	r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002858:	6953      	ldr	r3, [r2, #20]
 800285a:	075b      	lsls	r3, r3, #29
 800285c:	f57f af6a 	bpl.w	8002734 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002862:	1c59      	adds	r1, r3, #1
 8002864:	6261      	str	r1, [r4, #36]	; 0x24
 8002866:	e7b7      	b.n	80027d8 <HAL_I2C_Mem_Read+0x1a4>
 8002868:	00100002 	.word	0x00100002
 800286c:	ffff0000 	.word	0xffff0000
 8002870:	00010004 	.word	0x00010004

08002874 <HAL_I2C_GetState>:
  return hi2c->State;
 8002874:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8002878:	4770      	bx	lr
	...

0800287c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287c:	6803      	ldr	r3, [r0, #0]
{
 800287e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002882:	07db      	lsls	r3, r3, #31
{
 8002884:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	d410      	bmi.n	80028aa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002888:	682b      	ldr	r3, [r5, #0]
 800288a:	079f      	lsls	r7, r3, #30
 800288c:	d45e      	bmi.n	800294c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	682b      	ldr	r3, [r5, #0]
 8002890:	0719      	lsls	r1, r3, #28
 8002892:	f100 8095 	bmi.w	80029c0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002896:	682b      	ldr	r3, [r5, #0]
 8002898:	075a      	lsls	r2, r3, #29
 800289a:	f100 80bf 	bmi.w	8002a1c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289e:	69ea      	ldr	r2, [r5, #28]
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	f040 812d 	bne.w	8002b00 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80028a6:	2000      	movs	r0, #0
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028aa:	4c90      	ldr	r4, [pc, #576]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 80028ac:	6863      	ldr	r3, [r4, #4]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d007      	beq.n	80028c6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028b6:	6863      	ldr	r3, [r4, #4]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x5e>
 80028c0:	6863      	ldr	r3, [r4, #4]
 80028c2:	03de      	lsls	r6, r3, #15
 80028c4:	d509      	bpl.n	80028da <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	039c      	lsls	r4, r3, #14
 80028ca:	d5dd      	bpl.n	8002888 <HAL_RCC_OscConfig+0xc>
 80028cc:	686b      	ldr	r3, [r5, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1da      	bne.n	8002888 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80028d2:	2001      	movs	r0, #1
}
 80028d4:	b002      	add	sp, #8
 80028d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028da:	686b      	ldr	r3, [r5, #4]
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e0:	d110      	bne.n	8002904 <HAL_RCC_OscConfig+0x88>
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028ea:	f7fe fc43 	bl	8001174 <HAL_GetTick>
 80028ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	0398      	lsls	r0, r3, #14
 80028f4:	d4c8      	bmi.n	8002888 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f6:	f7fe fc3d 	bl	8001174 <HAL_GetTick>
 80028fa:	1b80      	subs	r0, r0, r6
 80028fc:	2864      	cmp	r0, #100	; 0x64
 80028fe:	d9f7      	bls.n	80028f0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002900:	2003      	movs	r0, #3
 8002902:	e7e7      	b.n	80028d4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002904:	b99b      	cbnz	r3, 800292e <HAL_RCC_OscConfig+0xb2>
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290c:	6023      	str	r3, [r4, #0]
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002914:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002916:	f7fe fc2d 	bl	8001174 <HAL_GetTick>
 800291a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	0399      	lsls	r1, r3, #14
 8002920:	d5b2      	bpl.n	8002888 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002922:	f7fe fc27 	bl	8001174 <HAL_GetTick>
 8002926:	1b80      	subs	r0, r0, r6
 8002928:	2864      	cmp	r0, #100	; 0x64
 800292a:	d9f7      	bls.n	800291c <HAL_RCC_OscConfig+0xa0>
 800292c:	e7e8      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	d103      	bne.n	800293e <HAL_RCC_OscConfig+0xc2>
 8002936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293a:	6023      	str	r3, [r4, #0]
 800293c:	e7d1      	b.n	80028e2 <HAL_RCC_OscConfig+0x66>
 800293e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002942:	6023      	str	r3, [r4, #0]
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294a:	e7cd      	b.n	80028e8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800294c:	4c67      	ldr	r4, [pc, #412]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 800294e:	6863      	ldr	r3, [r4, #4]
 8002950:	f013 0f0c 	tst.w	r3, #12
 8002954:	d007      	beq.n	8002966 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002956:	6863      	ldr	r3, [r4, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d110      	bne.n	8002982 <HAL_RCC_OscConfig+0x106>
 8002960:	6863      	ldr	r3, [r4, #4]
 8002962:	03da      	lsls	r2, r3, #15
 8002964:	d40d      	bmi.n	8002982 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	079b      	lsls	r3, r3, #30
 800296a:	d502      	bpl.n	8002972 <HAL_RCC_OscConfig+0xf6>
 800296c:	692b      	ldr	r3, [r5, #16]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d1af      	bne.n	80028d2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	696a      	ldr	r2, [r5, #20]
 8002976:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800297a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800297e:	6023      	str	r3, [r4, #0]
 8002980:	e785      	b.n	800288e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002982:	692a      	ldr	r2, [r5, #16]
 8002984:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002986:	b16a      	cbz	r2, 80029a4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800298c:	f7fe fbf2 	bl	8001174 <HAL_GetTick>
 8002990:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	079f      	lsls	r7, r3, #30
 8002996:	d4ec      	bmi.n	8002972 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe fbec 	bl	8001174 <HAL_GetTick>
 800299c:	1b80      	subs	r0, r0, r6
 800299e:	2802      	cmp	r0, #2
 80029a0:	d9f7      	bls.n	8002992 <HAL_RCC_OscConfig+0x116>
 80029a2:	e7ad      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80029a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029a6:	f7fe fbe5 	bl	8001174 <HAL_GetTick>
 80029aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	0798      	lsls	r0, r3, #30
 80029b0:	f57f af6d 	bpl.w	800288e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b4:	f7fe fbde 	bl	8001174 <HAL_GetTick>
 80029b8:	1b80      	subs	r0, r0, r6
 80029ba:	2802      	cmp	r0, #2
 80029bc:	d9f6      	bls.n	80029ac <HAL_RCC_OscConfig+0x130>
 80029be:	e79f      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c0:	69aa      	ldr	r2, [r5, #24]
 80029c2:	4c4a      	ldr	r4, [pc, #296]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 80029c4:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <HAL_RCC_OscConfig+0x278>)
 80029c6:	b1da      	cbz	r2, 8002a00 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80029cc:	f7fe fbd2 	bl	8001174 <HAL_GetTick>
 80029d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029d4:	079b      	lsls	r3, r3, #30
 80029d6:	d50d      	bpl.n	80029f4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80029dc:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_RCC_OscConfig+0x27c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80029e4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80029e6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80029e8:	9b01      	ldr	r3, [sp, #4]
 80029ea:	1e5a      	subs	r2, r3, #1
 80029ec:	9201      	str	r2, [sp, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_RCC_OscConfig+0x16a>
 80029f2:	e750      	b.n	8002896 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f4:	f7fe fbbe 	bl	8001174 <HAL_GetTick>
 80029f8:	1b80      	subs	r0, r0, r6
 80029fa:	2802      	cmp	r0, #2
 80029fc:	d9e9      	bls.n	80029d2 <HAL_RCC_OscConfig+0x156>
 80029fe:	e77f      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002a00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a02:	f7fe fbb7 	bl	8001174 <HAL_GetTick>
 8002a06:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a0a:	079f      	lsls	r7, r3, #30
 8002a0c:	f57f af43 	bpl.w	8002896 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fe fbb0 	bl	8001174 <HAL_GetTick>
 8002a14:	1b80      	subs	r0, r0, r6
 8002a16:	2802      	cmp	r0, #2
 8002a18:	d9f6      	bls.n	8002a08 <HAL_RCC_OscConfig+0x18c>
 8002a1a:	e771      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1c:	4c33      	ldr	r4, [pc, #204]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a1e:	69e3      	ldr	r3, [r4, #28]
 8002a20:	00d8      	lsls	r0, r3, #3
 8002a22:	d424      	bmi.n	8002a6e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002a24:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	69e3      	ldr	r3, [r4, #28]
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	61e3      	str	r3, [r4, #28]
 8002a2e:	69e3      	ldr	r3, [r4, #28]
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4e30      	ldr	r6, [pc, #192]	; (8002afc <HAL_RCC_OscConfig+0x280>)
 8002a3a:	6833      	ldr	r3, [r6, #0]
 8002a3c:	05d9      	lsls	r1, r3, #23
 8002a3e:	d518      	bpl.n	8002a72 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a40:	68eb      	ldr	r3, [r5, #12]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d126      	bne.n	8002a94 <HAL_RCC_OscConfig+0x218>
 8002a46:	6a23      	ldr	r3, [r4, #32]
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fb91 	bl	8001174 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002a56:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	6a23      	ldr	r3, [r4, #32]
 8002a5a:	079b      	lsls	r3, r3, #30
 8002a5c:	d53f      	bpl.n	8002ade <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002a5e:	2f00      	cmp	r7, #0
 8002a60:	f43f af1d 	beq.w	800289e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	69e3      	ldr	r3, [r4, #28]
 8002a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	61e3      	str	r3, [r4, #28]
 8002a6c:	e717      	b.n	800289e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2700      	movs	r7, #0
 8002a70:	e7e2      	b.n	8002a38 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a72:	6833      	ldr	r3, [r6, #0]
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fb7b 	bl	8001174 <HAL_GetTick>
 8002a7e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	6833      	ldr	r3, [r6, #0]
 8002a82:	05da      	lsls	r2, r3, #23
 8002a84:	d4dc      	bmi.n	8002a40 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a86:	f7fe fb75 	bl	8001174 <HAL_GetTick>
 8002a8a:	eba0 0008 	sub.w	r0, r0, r8
 8002a8e:	2864      	cmp	r0, #100	; 0x64
 8002a90:	d9f6      	bls.n	8002a80 <HAL_RCC_OscConfig+0x204>
 8002a92:	e735      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	b9ab      	cbnz	r3, 8002ac2 <HAL_RCC_OscConfig+0x246>
 8002a96:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6223      	str	r3, [r4, #32]
 8002aa2:	6a23      	ldr	r3, [r4, #32]
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fb63 	bl	8001174 <HAL_GetTick>
 8002aae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab0:	6a23      	ldr	r3, [r4, #32]
 8002ab2:	0798      	lsls	r0, r3, #30
 8002ab4:	d5d3      	bpl.n	8002a5e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fe fb5d 	bl	8001174 <HAL_GetTick>
 8002aba:	1b80      	subs	r0, r0, r6
 8002abc:	4540      	cmp	r0, r8
 8002abe:	d9f7      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x234>
 8002ac0:	e71e      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	6a23      	ldr	r3, [r4, #32]
 8002ac6:	d103      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x254>
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6223      	str	r3, [r4, #32]
 8002ace:	e7ba      	b.n	8002a46 <HAL_RCC_OscConfig+0x1ca>
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6223      	str	r3, [r4, #32]
 8002ad6:	6a23      	ldr	r3, [r4, #32]
 8002ad8:	f023 0304 	bic.w	r3, r3, #4
 8002adc:	e7b6      	b.n	8002a4c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe fb49 	bl	8001174 <HAL_GetTick>
 8002ae2:	eba0 0008 	sub.w	r0, r0, r8
 8002ae6:	42b0      	cmp	r0, r6
 8002ae8:	d9b6      	bls.n	8002a58 <HAL_RCC_OscConfig+0x1dc>
 8002aea:	e709      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
 8002aec:	40021000 	.word	0x40021000
 8002af0:	42420000 	.word	0x42420000
 8002af4:	42420480 	.word	0x42420480
 8002af8:	20000410 	.word	0x20000410
 8002afc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b00:	4c22      	ldr	r4, [pc, #136]	; (8002b8c <HAL_RCC_OscConfig+0x310>)
 8002b02:	6863      	ldr	r3, [r4, #4]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	f43f aee2 	beq.w	80028d2 <HAL_RCC_OscConfig+0x56>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	4e1f      	ldr	r6, [pc, #124]	; (8002b90 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b12:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002b14:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b16:	d12b      	bne.n	8002b70 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002b18:	f7fe fb2c 	bl	8001174 <HAL_GetTick>
 8002b1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	0199      	lsls	r1, r3, #6
 8002b22:	d41f      	bmi.n	8002b64 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b24:	6a2b      	ldr	r3, [r5, #32]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b2c:	6862      	ldr	r2, [r4, #4]
 8002b2e:	68a9      	ldr	r1, [r5, #8]
 8002b30:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002b34:	430a      	orrs	r2, r1
 8002b36:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b38:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002b3a:	6862      	ldr	r2, [r4, #4]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002b42:	4313      	orrs	r3, r2
 8002b44:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002b46:	2301      	movs	r3, #1
 8002b48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fb13 	bl	8001174 <HAL_GetTick>
 8002b4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	019a      	lsls	r2, r3, #6
 8002b54:	f53f aea7 	bmi.w	80028a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe fb0c 	bl	8001174 <HAL_GetTick>
 8002b5c:	1b40      	subs	r0, r0, r5
 8002b5e:	2802      	cmp	r0, #2
 8002b60:	d9f6      	bls.n	8002b50 <HAL_RCC_OscConfig+0x2d4>
 8002b62:	e6cd      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fb06 	bl	8001174 <HAL_GetTick>
 8002b68:	1bc0      	subs	r0, r0, r7
 8002b6a:	2802      	cmp	r0, #2
 8002b6c:	d9d7      	bls.n	8002b1e <HAL_RCC_OscConfig+0x2a2>
 8002b6e:	e6c7      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002b70:	f7fe fb00 	bl	8001174 <HAL_GetTick>
 8002b74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	019b      	lsls	r3, r3, #6
 8002b7a:	f57f ae94 	bpl.w	80028a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe faf9 	bl	8001174 <HAL_GetTick>
 8002b82:	1b40      	subs	r0, r0, r5
 8002b84:	2802      	cmp	r0, #2
 8002b86:	d9f6      	bls.n	8002b76 <HAL_RCC_OscConfig+0x2fa>
 8002b88:	e6ba      	b.n	8002900 <HAL_RCC_OscConfig+0x84>
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	42420060 	.word	0x42420060

08002b94 <HAL_RCC_GetSysClockFreq>:
{
 8002b94:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002b98:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b9a:	ac02      	add	r4, sp, #8
 8002b9c:	f103 0510 	add.w	r5, r3, #16
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	c203      	stmia	r2!, {r0, r1}
 8002baa:	42ab      	cmp	r3, r5
 8002bac:	4614      	mov	r4, r2
 8002bae:	d1f7      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f88d 3004 	strb.w	r3, [sp, #4]
 8002bb6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002bb8:	4911      	ldr	r1, [pc, #68]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bba:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002bbe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc0:	f003 020c 	and.w	r2, r3, #12
 8002bc4:	2a08      	cmp	r2, #8
 8002bc6:	d117      	bne.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bc8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002bcc:	a806      	add	r0, sp, #24
 8002bce:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bd0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bd2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bd6:	d50c      	bpl.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bd8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bda:	480a      	ldr	r0, [pc, #40]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bdc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002be0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002be2:	aa06      	add	r2, sp, #24
 8002be4:	4413      	add	r3, r2
 8002be6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bea:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002bee:	b007      	add	sp, #28
 8002bf0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x74>)
 8002bf4:	4350      	muls	r0, r2
 8002bf6:	e7fa      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002bfa:	e7f8      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x5a>
 8002bfc:	0800add8 	.word	0x0800add8
 8002c00:	40021000 	.word	0x40021000
 8002c04:	007a1200 	.word	0x007a1200
 8002c08:	003d0900 	.word	0x003d0900

08002c0c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c0c:	4a4d      	ldr	r2, [pc, #308]	; (8002d44 <HAL_RCC_ClockConfig+0x138>)
{
 8002c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c12:	6813      	ldr	r3, [r2, #0]
{
 8002c14:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	428b      	cmp	r3, r1
{
 8002c1c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c1e:	d328      	bcc.n	8002c72 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c20:	682a      	ldr	r2, [r5, #0]
 8002c22:	0791      	lsls	r1, r2, #30
 8002c24:	d432      	bmi.n	8002c8c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	07d2      	lsls	r2, r2, #31
 8002c28:	d438      	bmi.n	8002c9c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c2a:	4a46      	ldr	r2, [pc, #280]	; (8002d44 <HAL_RCC_ClockConfig+0x138>)
 8002c2c:	6813      	ldr	r3, [r2, #0]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	429e      	cmp	r6, r3
 8002c34:	d373      	bcc.n	8002d1e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c36:	682a      	ldr	r2, [r5, #0]
 8002c38:	4c43      	ldr	r4, [pc, #268]	; (8002d48 <HAL_RCC_ClockConfig+0x13c>)
 8002c3a:	f012 0f04 	tst.w	r2, #4
 8002c3e:	d179      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	0713      	lsls	r3, r2, #28
 8002c42:	d506      	bpl.n	8002c52 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c44:	6863      	ldr	r3, [r4, #4]
 8002c46:	692a      	ldr	r2, [r5, #16]
 8002c48:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002c4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002c50:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c52:	f7ff ff9f 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002c56:	6863      	ldr	r3, [r4, #4]
 8002c58:	4a3c      	ldr	r2, [pc, #240]	; (8002d4c <HAL_RCC_ClockConfig+0x140>)
 8002c5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	40d8      	lsrs	r0, r3
 8002c62:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <HAL_RCC_ClockConfig+0x144>)
 8002c64:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe fa42 	bl	80010f0 <HAL_InitTick>
  return HAL_OK;
 8002c6c:	2000      	movs	r0, #0
}
 8002c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	f023 0307 	bic.w	r3, r3, #7
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c7c:	6813      	ldr	r3, [r2, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	4299      	cmp	r1, r3
 8002c84:	d0cc      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002c86:	2001      	movs	r0, #1
 8002c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8c:	492e      	ldr	r1, [pc, #184]	; (8002d48 <HAL_RCC_ClockConfig+0x13c>)
 8002c8e:	68a8      	ldr	r0, [r5, #8]
 8002c90:	684b      	ldr	r3, [r1, #4]
 8002c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c96:	4303      	orrs	r3, r0
 8002c98:	604b      	str	r3, [r1, #4]
 8002c9a:	e7c4      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9c:	686a      	ldr	r2, [r5, #4]
 8002c9e:	4c2a      	ldr	r4, [pc, #168]	; (8002d48 <HAL_RCC_ClockConfig+0x13c>)
 8002ca0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002caa:	d0ec      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cac:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cae:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002cba:	f7fe fa5b 	bl	8001174 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbe:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002cc0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d114      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc6:	6863      	ldr	r3, [r4, #4]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d0ac      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7fe fa50 	bl	8001174 <HAL_GetTick>
 8002cd4:	1bc0      	subs	r0, r0, r7
 8002cd6:	4540      	cmp	r0, r8
 8002cd8:	d9f5      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8002cda:	2003      	movs	r0, #3
 8002cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce0:	2a02      	cmp	r2, #2
 8002ce2:	d102      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ce8:	e7df      	b.n	8002caa <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cea:	f013 0f02 	tst.w	r3, #2
 8002cee:	e7dc      	b.n	8002caa <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d10f      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf4:	6863      	ldr	r3, [r4, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d095      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfe:	f7fe fa39 	bl	8001174 <HAL_GetTick>
 8002d02:	1bc0      	subs	r0, r0, r7
 8002d04:	4540      	cmp	r0, r8
 8002d06:	d9f5      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0xe8>
 8002d08:	e7e7      	b.n	8002cda <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0a:	f7fe fa33 	bl	8001174 <HAL_GetTick>
 8002d0e:	1bc0      	subs	r0, r0, r7
 8002d10:	4540      	cmp	r0, r8
 8002d12:	d8e2      	bhi.n	8002cda <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d14:	6863      	ldr	r3, [r4, #4]
 8002d16:	f013 0f0c 	tst.w	r3, #12
 8002d1a:	d1f6      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xfe>
 8002d1c:	e785      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	6813      	ldr	r3, [r2, #0]
 8002d20:	f023 0307 	bic.w	r3, r3, #7
 8002d24:	4333      	orrs	r3, r6
 8002d26:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d28:	6813      	ldr	r3, [r2, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	429e      	cmp	r6, r3
 8002d30:	d1a9      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x7a>
 8002d32:	e780      	b.n	8002c36 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	68e9      	ldr	r1, [r5, #12]
 8002d38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6063      	str	r3, [r4, #4]
 8002d40:	e77e      	b.n	8002c40 <HAL_RCC_ClockConfig+0x34>
 8002d42:	bf00      	nop
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	0800b5d3 	.word	0x0800b5d3
 8002d50:	20000410 	.word	0x20000410

08002d54 <HAL_RCC_GetHCLKFreq>:
}
 8002d54:	4b01      	ldr	r3, [pc, #4]	; (8002d5c <HAL_RCC_GetHCLKFreq+0x8>)
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000410 	.word	0x20000410

08002d60 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002d6e:	6810      	ldr	r0, [r2, #0]
}    
 8002d70:	40d8      	lsrs	r0, r3
 8002d72:	4770      	bx	lr
 8002d74:	40021000 	.word	0x40021000
 8002d78:	0800b5e3 	.word	0x0800b5e3
 8002d7c:	20000410 	.word	0x20000410

08002d80 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	4a03      	ldr	r2, [pc, #12]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002d8e:	6810      	ldr	r0, [r2, #0]
} 
 8002d90:	40d8      	lsrs	r0, r3
 8002d92:	4770      	bx	lr
 8002d94:	40021000 	.word	0x40021000
 8002d98:	0800b5e3 	.word	0x0800b5e3
 8002d9c:	20000410 	.word	0x20000410

08002da0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002da0:	6803      	ldr	r3, [r0, #0]
{
 8002da2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002da6:	07d9      	lsls	r1, r3, #31
{
 8002da8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002daa:	d520      	bpl.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dac:	4c35      	ldr	r4, [pc, #212]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002dae:	69e3      	ldr	r3, [r4, #28]
 8002db0:	00da      	lsls	r2, r3, #3
 8002db2:	d432      	bmi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002db4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8002db6:	69e3      	ldr	r3, [r4, #28]
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	61e3      	str	r3, [r4, #28]
 8002dbe:	69e3      	ldr	r3, [r4, #28]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc8:	4e2f      	ldr	r6, [pc, #188]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002dca:	6833      	ldr	r3, [r6, #0]
 8002dcc:	05db      	lsls	r3, r3, #23
 8002dce:	d526      	bpl.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dd0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dd2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002dd6:	d136      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dd8:	6a23      	ldr	r3, [r4, #32]
 8002dda:	686a      	ldr	r2, [r5, #4]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de0:	4313      	orrs	r3, r2
 8002de2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002de4:	b11f      	cbz	r7, 8002dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	69e3      	ldr	r3, [r4, #28]
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dee:	6828      	ldr	r0, [r5, #0]
 8002df0:	0783      	lsls	r3, r0, #30
 8002df2:	d506      	bpl.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df4:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002df6:	68a9      	ldr	r1, [r5, #8]
 8002df8:	6853      	ldr	r3, [r2, #4]
 8002dfa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e02:	f010 0010 	ands.w	r0, r0, #16
 8002e06:	d01b      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e08:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002e0a:	68e9      	ldr	r1, [r5, #12]
 8002e0c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e0e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e10:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6053      	str	r3, [r2, #4]
 8002e18:	e012      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2700      	movs	r7, #0
 8002e1c:	e7d4      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1e:	6833      	ldr	r3, [r6, #0]
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002e26:	f7fe f9a5 	bl	8001174 <HAL_GetTick>
 8002e2a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	6833      	ldr	r3, [r6, #0]
 8002e2e:	05d8      	lsls	r0, r3, #23
 8002e30:	d4ce      	bmi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fe f99f 	bl	8001174 <HAL_GetTick>
 8002e36:	eba0 0008 	sub.w	r0, r0, r8
 8002e3a:	2864      	cmp	r0, #100	; 0x64
 8002e3c:	d9f6      	bls.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002e3e:	2003      	movs	r0, #3
}
 8002e40:	b002      	add	sp, #8
 8002e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e46:	686a      	ldr	r2, [r5, #4]
 8002e48:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d0c3      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e50:	2001      	movs	r0, #1
 8002e52:	4a0e      	ldr	r2, [pc, #56]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e54:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e56:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e58:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002e60:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e62:	07d9      	lsls	r1, r3, #31
 8002e64:	d5b8      	bpl.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002e66:	f7fe f985 	bl	8001174 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002e6e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	6a23      	ldr	r3, [r4, #32]
 8002e72:	079a      	lsls	r2, r3, #30
 8002e74:	d4b0      	bmi.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe f97d 	bl	8001174 <HAL_GetTick>
 8002e7a:	1b80      	subs	r0, r0, r6
 8002e7c:	4540      	cmp	r0, r8
 8002e7e:	d9f7      	bls.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002e80:	e7dd      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42420440 	.word	0x42420440

08002e90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e94:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8002e96:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e98:	ad02      	add	r5, sp, #8
 8002e9a:	f103 0610 	add.w	r6, r3, #16
 8002e9e:	462a      	mov	r2, r5
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	c203      	stmia	r2!, {r0, r1}
 8002ea8:	42b3      	cmp	r3, r6
 8002eaa:	4615      	mov	r5, r2
 8002eac:	d1f7      	bne.n	8002e9e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f88d 3004 	strb.w	r3, [sp, #4]
 8002eb4:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8002eb6:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002eb8:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8002ebc:	d047      	beq.n	8002f4e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8002ebe:	2c10      	cmp	r4, #16
 8002ec0:	d017      	beq.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8002ec2:	2c01      	cmp	r4, #1
 8002ec4:	d14f      	bne.n	8002f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ec6:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8002eca:	4a29      	ldr	r2, [pc, #164]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002ecc:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ece:	4019      	ands	r1, r3
 8002ed0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8002ed4:	d044      	beq.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ede:	d12d      	bne.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8002ee0:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ee4:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8002ee6:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8002eea:	bf08      	it	eq
 8002eec:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8002eee:	b006      	add	sp, #24
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8002ef2:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002ef4:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002efc:	d0f7      	beq.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002efe:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8002f02:	a806      	add	r0, sp, #24
 8002f04:	4402      	add	r2, r0
 8002f06:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f0a:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f0c:	bf41      	itttt	mi
 8002f0e:	685a      	ldrmi	r2, [r3, #4]
 8002f10:	a906      	addmi	r1, sp, #24
 8002f12:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8002f16:	1852      	addmi	r2, r2, r1
 8002f18:	bf44      	itt	mi
 8002f1a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f1e:	4a15      	ldrmi	r2, [pc, #84]	; (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f20:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f22:	bf4c      	ite	mi
 8002f24:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f28:	4a13      	ldrpl	r2, [pc, #76]	; (8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f2a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f2c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f30:	d4dd      	bmi.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8002f32:	2303      	movs	r3, #3
 8002f34:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f36:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002f3a:	e7d8      	b.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f40:	d111      	bne.n	8002f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002f42:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8002f44:	f24f 4024 	movw	r0, #62500	; 0xf424
 8002f48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f4c:	e7cd      	b.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f4e:	f7ff ff17 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	e7ea      	b.n	8002f36 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8002f60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f64:	e7c3      	b.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8002f66:	2000      	movs	r0, #0
 8002f68:	e7c1      	b.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8002f6a:	bf00      	nop
 8002f6c:	0800ade8 	.word	0x0800ade8
 8002f70:	40021000 	.word	0x40021000
 8002f74:	007a1200 	.word	0x007a1200
 8002f78:	003d0900 	.word	0x003d0900

08002f7c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7c:	6a03      	ldr	r3, [r0, #32]
{
 8002f7e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f8e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002f92:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f94:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002f96:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002f9a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f9c:	4d0a      	ldr	r5, [pc, #40]	; (8002fc8 <TIM_OC1_SetConfig+0x4c>)
 8002f9e:	42a8      	cmp	r0, r5
 8002fa0:	d10b      	bne.n	8002fba <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fa2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fa4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002fa8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002faa:	698e      	ldr	r6, [r1, #24]
 8002fac:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fae:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fb4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fbc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fbe:	684a      	ldr	r2, [r1, #4]
 8002fc0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc2:	6203      	str	r3, [r0, #32]
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40012c00 	.word	0x40012c00

08002fcc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fcc:	6a03      	ldr	r3, [r0, #32]
{
 8002fce:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fda:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fdc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fde:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002fe2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fe4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002fe6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fee:	4d0b      	ldr	r5, [pc, #44]	; (800301c <TIM_OC3_SetConfig+0x50>)
 8002ff0:	42a8      	cmp	r0, r5
 8002ff2:	d10d      	bne.n	8003010 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ff4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ffa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ffe:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003000:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003002:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003006:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800300c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003010:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003012:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003014:	684a      	ldr	r2, [r1, #4]
 8003016:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003018:	6203      	str	r3, [r0, #32]
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	40012c00 	.word	0x40012c00

08003020 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003020:	6a03      	ldr	r3, [r0, #32]
{
 8003022:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003028:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800302c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800302e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003030:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003032:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003036:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800303a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800303c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003040:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003044:	4d06      	ldr	r5, [pc, #24]	; (8003060 <TIM_OC4_SetConfig+0x40>)
 8003046:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003048:	bf02      	ittt	eq
 800304a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800304c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003050:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003054:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003056:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003058:	684a      	ldr	r2, [r1, #4]
 800305a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305c:	6203      	str	r3, [r0, #32]
 800305e:	bd30      	pop	{r4, r5, pc}
 8003060:	40012c00 	.word	0x40012c00

08003064 <HAL_TIM_PWM_MspInit>:
 8003064:	4770      	bx	lr

08003066 <HAL_TIM_IC_MspInit>:
 8003066:	4770      	bx	lr

08003068 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003068:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800306c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800306e:	2b01      	cmp	r3, #1
 8003070:	f04f 0302 	mov.w	r3, #2
 8003074:	d01c      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0x48>
 8003076:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800307c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800307e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003082:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003084:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003088:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800308c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800308e:	680a      	ldr	r2, [r1, #0]
 8003090:	2a40      	cmp	r2, #64	; 0x40
 8003092:	d079      	beq.n	8003188 <HAL_TIM_ConfigClockSource+0x120>
 8003094:	d819      	bhi.n	80030ca <HAL_TIM_ConfigClockSource+0x62>
 8003096:	2a10      	cmp	r2, #16
 8003098:	f000 8093 	beq.w	80031c2 <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	d80a      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x4c>
 800309e:	2a00      	cmp	r2, #0
 80030a0:	f000 8089 	beq.w	80031b6 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80030aa:	2300      	movs	r3, #0
 80030ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80030b0:	4618      	mov	r0, r3
}
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80030b4:	2a20      	cmp	r2, #32
 80030b6:	f000 808a 	beq.w	80031ce <HAL_TIM_ConfigClockSource+0x166>
 80030ba:	2a30      	cmp	r2, #48	; 0x30
 80030bc:	d1f2      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80030be:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80030c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80030c4:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80030c8:	e036      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80030ca:	2a70      	cmp	r2, #112	; 0x70
 80030cc:	d036      	beq.n	800313c <HAL_TIM_ConfigClockSource+0xd4>
 80030ce:	d81b      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0xa0>
 80030d0:	2a50      	cmp	r2, #80	; 0x50
 80030d2:	d042      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xf2>
 80030d4:	2a60      	cmp	r2, #96	; 0x60
 80030d6:	d1e5      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d8:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030da:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030dc:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e2:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80030e6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030e8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030f4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80030f8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80030fa:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80030fc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80030fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003102:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8003106:	e017      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8003108:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800310c:	d011      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0xca>
 800310e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003112:	d1c7      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003114:	688a      	ldr	r2, [r1, #8]
 8003116:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003118:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800311a:	68c9      	ldr	r1, [r1, #12]
 800311c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800311e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003122:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003126:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003128:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003130:	e002      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	e7b3      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800313c:	688a      	ldr	r2, [r1, #8]
 800313e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003140:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003142:	68c9      	ldr	r1, [r1, #12]
 8003144:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003146:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800314a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800314e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8003150:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003152:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003154:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8003158:	e7ee      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315a:	684c      	ldr	r4, [r1, #4]
 800315c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800315e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003160:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003162:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003166:	f025 0501 	bic.w	r5, r5, #1
 800316a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800316c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800316e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003170:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003174:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003178:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800317c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800317e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003182:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8003186:	e7d7      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003188:	684c      	ldr	r4, [r1, #4]
 800318a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800318c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800318e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003190:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003194:	f025 0501 	bic.w	r5, r5, #1
 8003198:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800319a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800319c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800319e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031a2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80031a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80031aa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80031b0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80031b4:	e7c0      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031b6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80031bc:	f042 0207 	orr.w	r2, r2, #7
 80031c0:	e7ba      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031c2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80031c8:	f042 0217 	orr.w	r2, r2, #23
 80031cc:	e7b4      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031ce:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80031d4:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80031d8:	e7ae      	b.n	8003138 <HAL_TIM_ConfigClockSource+0xd0>

080031da <HAL_TIM_OC_DelayElapsedCallback>:
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_PWM_PulseFinishedCallback>:
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_TriggerCallback>:
 80031de:	4770      	bx	lr

080031e0 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e0:	6803      	ldr	r3, [r0, #0]
{
 80031e2:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e4:	691a      	ldr	r2, [r3, #16]
{
 80031e6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e8:	0791      	lsls	r1, r2, #30
 80031ea:	d50e      	bpl.n	800320a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	0792      	lsls	r2, r2, #30
 80031f0:	d50b      	bpl.n	800320a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031f2:	f06f 0202 	mvn.w	r2, #2
 80031f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f8:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031fa:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031fc:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031fe:	079b      	lsls	r3, r3, #30
 8003200:	d077      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003202:	f002 f8d1 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	2300      	movs	r3, #0
 8003208:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	0750      	lsls	r0, r2, #29
 8003210:	d510      	bpl.n	8003234 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	0751      	lsls	r1, r2, #29
 8003216:	d50d      	bpl.n	8003234 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003218:	f06f 0204 	mvn.w	r2, #4
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003220:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003222:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003224:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003228:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800322a:	d068      	beq.n	80032fe <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800322c:	f002 f8bc 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003230:	2300      	movs	r3, #0
 8003232:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	0712      	lsls	r2, r2, #28
 800323a:	d50f      	bpl.n	800325c <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	0710      	lsls	r0, r2, #28
 8003240:	d50c      	bpl.n	800325c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003242:	f06f 0208 	mvn.w	r2, #8
 8003246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003248:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800324a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800324c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800324e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003250:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003252:	d05a      	beq.n	800330a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003254:	f002 f8a8 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003258:	2300      	movs	r3, #0
 800325a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	06d2      	lsls	r2, r2, #27
 8003262:	d510      	bpl.n	8003286 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	06d0      	lsls	r0, r2, #27
 8003268:	d50d      	bpl.n	8003286 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800326a:	f06f 0210 	mvn.w	r2, #16
 800326e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003270:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003272:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003274:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003276:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800327c:	d04b      	beq.n	8003316 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800327e:	f002 f893 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	2300      	movs	r3, #0
 8003284:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	07d1      	lsls	r1, r2, #31
 800328c:	d508      	bpl.n	80032a0 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	07d2      	lsls	r2, r2, #31
 8003292:	d505      	bpl.n	80032a0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003294:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003298:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800329a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800329c:	f004 fd1c 	bl	8007cd8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	0610      	lsls	r0, r2, #24
 80032a6:	d508      	bpl.n	80032ba <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	0611      	lsls	r1, r2, #24
 80032ac:	d505      	bpl.n	80032ba <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80032b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80032b6:	f000 fa6c 	bl	8003792 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	0652      	lsls	r2, r2, #25
 80032c0:	d508      	bpl.n	80032d4 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	0650      	lsls	r0, r2, #25
 80032c6:	d505      	bpl.n	80032d4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80032cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80032d0:	f7ff ff85 	bl	80031de <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	0691      	lsls	r1, r2, #26
 80032da:	d522      	bpl.n	8003322 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	0692      	lsls	r2, r2, #26
 80032e0:	d51f      	bpl.n	8003322 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032e2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80032e6:	4620      	mov	r0, r4
}
 80032e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80032ee:	f000 ba4f 	b.w	8003790 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	f7ff ff72 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f6:	4620      	mov	r0, r4
 80032f8:	f7ff ff70 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 80032fc:	e783      	b.n	8003206 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	f7ff ff6c 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003302:	4620      	mov	r0, r4
 8003304:	f7ff ff6a 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003308:	e792      	b.n	8003230 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330a:	f7ff ff66 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330e:	4620      	mov	r0, r4
 8003310:	f7ff ff64 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003314:	e7a0      	b.n	8003258 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	f7ff ff60 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331a:	4620      	mov	r0, r4
 800331c:	f7ff ff5e 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003320:	e7af      	b.n	8003282 <HAL_TIM_IRQHandler+0xa2>
 8003322:	bd10      	pop	{r4, pc}

08003324 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003324:	4a1a      	ldr	r2, [pc, #104]	; (8003390 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003326:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003328:	4290      	cmp	r0, r2
 800332a:	d00a      	beq.n	8003342 <TIM_Base_SetConfig+0x1e>
 800332c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0x1e>
 8003332:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003336:	4290      	cmp	r0, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0x1e>
 800333a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800333e:	4290      	cmp	r0, r2
 8003340:	d115      	bne.n	800336e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003342:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003348:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800334a:	4a11      	ldr	r2, [pc, #68]	; (8003390 <TIM_Base_SetConfig+0x6c>)
 800334c:	4290      	cmp	r0, r2
 800334e:	d00a      	beq.n	8003366 <TIM_Base_SetConfig+0x42>
 8003350:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003354:	d007      	beq.n	8003366 <TIM_Base_SetConfig+0x42>
 8003356:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800335a:	4290      	cmp	r0, r2
 800335c:	d003      	beq.n	8003366 <TIM_Base_SetConfig+0x42>
 800335e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003362:	4290      	cmp	r0, r2
 8003364:	d103      	bne.n	800336e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800336e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003374:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003376:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003378:	688b      	ldr	r3, [r1, #8]
 800337a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800337c:	680b      	ldr	r3, [r1, #0]
 800337e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <TIM_Base_SetConfig+0x6c>)
 8003382:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003384:	bf04      	itt	eq
 8003386:	690b      	ldreq	r3, [r1, #16]
 8003388:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800338a:	2301      	movs	r3, #1
 800338c:	6143      	str	r3, [r0, #20]
 800338e:	4770      	bx	lr
 8003390:	40012c00 	.word	0x40012c00

08003394 <HAL_TIM_Base_Init>:
{
 8003394:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003396:	4604      	mov	r4, r0
 8003398:	b1a0      	cbz	r0, 80033c4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800339a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800339e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033a2:	b91b      	cbnz	r3, 80033ac <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80033a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80033a8:	f004 fd1a 	bl	8007de0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80033ac:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ae:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80033b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b4:	1d21      	adds	r1, r4, #4
 80033b6:	f7ff ffb5 	bl	8003324 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80033ba:	2301      	movs	r3, #1
  return HAL_OK;
 80033bc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80033be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80033c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80033c4:	2001      	movs	r0, #1
}
 80033c6:	bd10      	pop	{r4, pc}

080033c8 <HAL_TIM_PWM_Init>:
{
 80033c8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80033ca:	4604      	mov	r4, r0
 80033cc:	b1a0      	cbz	r0, 80033f8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80033ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033d6:	b91b      	cbnz	r3, 80033e0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80033d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80033dc:	f7ff fe42 	bl	8003064 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80033e0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80033e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e8:	1d21      	adds	r1, r4, #4
 80033ea:	f7ff ff9b 	bl	8003324 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80033ee:	2301      	movs	r3, #1
  return HAL_OK;
 80033f0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80033f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80033f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80033f8:	2001      	movs	r0, #1
}
 80033fa:	bd10      	pop	{r4, pc}

080033fc <HAL_TIM_IC_Init>:
{
 80033fc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80033fe:	4604      	mov	r4, r0
 8003400:	b1a0      	cbz	r0, 800342c <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003402:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003406:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800340a:	b91b      	cbnz	r3, 8003414 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800340c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003410:	f7ff fe29 	bl	8003066 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003414:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003416:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003418:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341c:	1d21      	adds	r1, r4, #4
 800341e:	f7ff ff81 	bl	8003324 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003422:	2301      	movs	r3, #1
  return HAL_OK;
 8003424:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003426:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800342a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800342c:	2001      	movs	r0, #1
}
 800342e:	bd10      	pop	{r4, pc}

08003430 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003430:	6a03      	ldr	r3, [r0, #32]
{
 8003432:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003434:	f023 0310 	bic.w	r3, r3, #16
 8003438:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800343a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800343c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800343e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003440:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003442:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003446:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800344a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800344c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003450:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003454:	4d0b      	ldr	r5, [pc, #44]	; (8003484 <TIM_OC2_SetConfig+0x54>)
 8003456:	42a8      	cmp	r0, r5
 8003458:	d10d      	bne.n	8003476 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800345a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800345c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003460:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003464:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003466:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003468:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800346c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800346e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003472:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003476:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003478:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800347a:	684a      	ldr	r2, [r1, #4]
 800347c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800347e:	6203      	str	r3, [r0, #32]
 8003480:	bd70      	pop	{r4, r5, r6, pc}
 8003482:	bf00      	nop
 8003484:	40012c00 	.word	0x40012c00

08003488 <HAL_TIM_PWM_ConfigChannel>:
{
 8003488:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800348a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800348e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003490:	2b01      	cmp	r3, #1
 8003492:	f04f 0002 	mov.w	r0, #2
 8003496:	d025      	beq.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8003498:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800349a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800349e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80034a2:	2a0c      	cmp	r2, #12
 80034a4:	d818      	bhi.n	80034d8 <HAL_TIM_PWM_ConfigChannel+0x50>
 80034a6:	e8df f002 	tbb	[pc, r2]
 80034aa:	1707      	.short	0x1707
 80034ac:	171e1717 	.word	0x171e1717
 80034b0:	172f1717 	.word	0x172f1717
 80034b4:	1717      	.short	0x1717
 80034b6:	40          	.byte	0x40
 80034b7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034b8:	6820      	ldr	r0, [r4, #0]
 80034ba:	f7ff fd5f 	bl	8002f7c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034be:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034c0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	f042 0208 	orr.w	r2, r2, #8
 80034c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034ca:	699a      	ldr	r2, [r3, #24]
 80034cc:	f022 0204 	bic.w	r2, r2, #4
 80034d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80034d6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80034da:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80034dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80034e0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80034e4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e6:	6820      	ldr	r0, [r4, #0]
 80034e8:	f7ff ffa2 	bl	8003430 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034ec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80034ee:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003506:	e7e6      	b.n	80034d6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003508:	6820      	ldr	r0, [r4, #0]
 800350a:	f7ff fd5f 	bl	8002fcc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800350e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003510:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	f042 0208 	orr.w	r2, r2, #8
 8003518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	f022 0204 	bic.w	r2, r2, #4
 8003520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003526:	61da      	str	r2, [r3, #28]
    break;
 8003528:	e7d6      	b.n	80034d8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	f7ff fd78 	bl	8003020 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003530:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003532:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800353a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003542:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800354a:	e7ec      	b.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800354c <TIM_TI1_SetConfig>:
{
 800354c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354e:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003550:	4e12      	ldr	r6, [pc, #72]	; (800359c <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003552:	f024 0401 	bic.w	r4, r4, #1
 8003556:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003558:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800355a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800355c:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800355e:	d00a      	beq.n	8003576 <TIM_TI1_SetConfig+0x2a>
 8003560:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003564:	d007      	beq.n	8003576 <TIM_TI1_SetConfig+0x2a>
 8003566:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800356a:	42b0      	cmp	r0, r6
 800356c:	d003      	beq.n	8003576 <TIM_TI1_SetConfig+0x2a>
 800356e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003572:	42b0      	cmp	r0, r6
 8003574:	d10f      	bne.n	8003596 <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003576:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800357a:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800357c:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800357e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003582:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003584:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003588:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800358c:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800358e:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8003590:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003592:	6201      	str	r1, [r0, #32]
}
 8003594:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003596:	f044 0201 	orr.w	r2, r4, #1
 800359a:	e7ef      	b.n	800357c <TIM_TI1_SetConfig+0x30>
 800359c:	40012c00 	.word	0x40012c00

080035a0 <HAL_TIM_IC_ConfigChannel>:
{
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80035a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80035a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80035a8:	2b01      	cmp	r3, #1
{
 80035aa:	460d      	mov	r5, r1
 80035ac:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80035b0:	d019      	beq.n	80035e6 <HAL_TIM_IC_ConfigChannel+0x46>
 80035b2:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80035b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80035bc:	b9a2      	cbnz	r2, 80035e8 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 80035be:	68cb      	ldr	r3, [r1, #12]
 80035c0:	6820      	ldr	r0, [r4, #0]
 80035c2:	c906      	ldmia	r1, {r1, r2}
 80035c4:	f7ff ffc2 	bl	800354c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035c8:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035ca:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	f022 020c 	bic.w	r2, r2, #12
 80035d2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80035da:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80035dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80035de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80035e2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80035e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80035e8:	2a04      	cmp	r2, #4
 80035ea:	688e      	ldr	r6, [r1, #8]
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	c982      	ldmia	r1, {r1, r7}
 80035f0:	68e8      	ldr	r0, [r5, #12]
 80035f2:	d11f      	bne.n	8003634 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80035f6:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f8:	f022 0210 	bic.w	r2, r2, #16
 80035fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fe:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8003600:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003602:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003606:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800360a:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800360c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003610:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003612:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003614:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003618:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800361c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003628:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8003630:	619e      	str	r6, [r3, #24]
 8003632:	e7d2      	b.n	80035da <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8003634:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003636:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8003638:	d11c      	bne.n	8003674 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800363a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800363e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003640:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003642:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003644:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 8003648:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 800364a:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800364c:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800364e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003652:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003654:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003656:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800365a:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800365e:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8003660:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003662:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	f022 020c 	bic.w	r2, r2, #12
 800366a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003670:	61de      	str	r6, [r3, #28]
 8003672:	e7b2      	b.n	80035da <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003674:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003678:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800367a:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800367c:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800367e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 8003682:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003684:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003688:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800368c:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800368e:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003690:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003692:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 8003696:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800369a:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 800369c:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 800369e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036a6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80036ae:	e7df      	b.n	8003670 <HAL_TIM_IC_ConfigChannel+0xd0>

080036b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036b0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80036b2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036b4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80036b6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80036b8:	ea23 0304 	bic.w	r3, r3, r4
 80036bc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80036be:	6a03      	ldr	r3, [r0, #32]
 80036c0:	408a      	lsls	r2, r1
 80036c2:	431a      	orrs	r2, r3
 80036c4:	6202      	str	r2, [r0, #32]
 80036c6:	bd10      	pop	{r4, pc}

080036c8 <HAL_TIM_PWM_Start>:
{
 80036c8:	b510      	push	{r4, lr}
 80036ca:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036cc:	2201      	movs	r2, #1
 80036ce:	6800      	ldr	r0, [r0, #0]
 80036d0:	f7ff ffee 	bl	80036b0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	4a06      	ldr	r2, [pc, #24]	; (80036f0 <HAL_TIM_PWM_Start+0x28>)
}
 80036d8:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036da:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80036dc:	bf02      	ittt	eq
 80036de:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80036e0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80036e4:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
}
 80036ee:	bd10      	pop	{r4, pc}
 80036f0:	40012c00 	.word	0x40012c00

080036f4 <HAL_TIM_IC_Start_IT>:
{
 80036f4:	b510      	push	{r4, lr}
 80036f6:	4604      	mov	r4, r0
  switch (Channel)
 80036f8:	290c      	cmp	r1, #12
 80036fa:	d80d      	bhi.n	8003718 <HAL_TIM_IC_Start_IT+0x24>
 80036fc:	e8df f001 	tbb	[pc, r1]
 8003700:	0c0c0c07 	.word	0x0c0c0c07
 8003704:	0c0c0c17 	.word	0x0c0c0c17
 8003708:	0c0c0c1c 	.word	0x0c0c0c1c
 800370c:	21          	.byte	0x21
 800370d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800370e:	6802      	ldr	r2, [r0, #0]
 8003710:	68d3      	ldr	r3, [r2, #12]
 8003712:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003716:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003718:	6820      	ldr	r0, [r4, #0]
 800371a:	2201      	movs	r2, #1
 800371c:	f7ff ffc8 	bl	80036b0 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8003720:	6822      	ldr	r2, [r4, #0]
}
 8003722:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003724:	6813      	ldr	r3, [r2, #0]
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800372e:	6802      	ldr	r2, [r0, #0]
 8003730:	68d3      	ldr	r3, [r2, #12]
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	e7ee      	b.n	8003716 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003738:	6802      	ldr	r2, [r0, #0]
 800373a:	68d3      	ldr	r3, [r2, #12]
 800373c:	f043 0308 	orr.w	r3, r3, #8
 8003740:	e7e9      	b.n	8003716 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003742:	6802      	ldr	r2, [r0, #0]
 8003744:	68d3      	ldr	r3, [r2, #12]
 8003746:	f043 0310 	orr.w	r3, r3, #16
 800374a:	e7e4      	b.n	8003716 <HAL_TIM_IC_Start_IT+0x22>

0800374c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800374c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003750:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003752:	2b01      	cmp	r3, #1
 8003754:	f04f 0302 	mov.w	r3, #2
 8003758:	d018      	beq.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800375a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800375e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003760:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003762:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003764:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003766:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800376a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	4322      	orrs	r2, r4
 8003770:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003778:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003780:	2301      	movs	r3, #1
 8003782:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003786:	2300      	movs	r3, #0
 8003788:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800378c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800378e:	bd10      	pop	{r4, pc}

08003790 <HAL_TIMEx_CommutationCallback>:
 8003790:	4770      	bx	lr

08003792 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003792:	4770      	bx	lr

08003794 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003794:	6803      	ldr	r3, [r0, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800379c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037a6:	2320      	movs	r3, #32
 80037a8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80037ac:	4770      	bx	lr
	...

080037b0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b4:	6805      	ldr	r5, [r0, #0]
 80037b6:	68c2      	ldr	r2, [r0, #12]
 80037b8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037ba:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037c0:	4313      	orrs	r3, r2
 80037c2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037c4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80037c6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80037cc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80037d0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037d4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037da:	696b      	ldr	r3, [r5, #20]
 80037dc:	6982      	ldr	r2, [r0, #24]
 80037de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e2:	4313      	orrs	r3, r2
 80037e4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80037e6:	4b40      	ldr	r3, [pc, #256]	; (80038e8 <UART_SetConfig+0x138>)
{
 80037e8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80037ea:	429d      	cmp	r5, r3
 80037ec:	f04f 0419 	mov.w	r4, #25
 80037f0:	d146      	bne.n	8003880 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80037f2:	f7ff fac5 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 80037f6:	fb04 f300 	mul.w	r3, r4, r0
 80037fa:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80037fe:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003802:	00b6      	lsls	r6, r6, #2
 8003804:	fbb3 f3f6 	udiv	r3, r3, r6
 8003808:	fbb3 f3f8 	udiv	r3, r3, r8
 800380c:	011e      	lsls	r6, r3, #4
 800380e:	f7ff fab7 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8003812:	4360      	muls	r0, r4
 8003814:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	fbb0 f7f3 	udiv	r7, r0, r3
 800381e:	f7ff faaf 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8003822:	4360      	muls	r0, r4
 8003824:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	fbb0 f3f3 	udiv	r3, r0, r3
 800382e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003832:	fb08 7313 	mls	r3, r8, r3, r7
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	3332      	adds	r3, #50	; 0x32
 800383a:	fbb3 f3f8 	udiv	r3, r3, r8
 800383e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003842:	f7ff fa9d 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8003846:	4360      	muls	r0, r4
 8003848:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800384c:	0092      	lsls	r2, r2, #2
 800384e:	fbb0 faf2 	udiv	sl, r0, r2
 8003852:	f7ff fa95 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003856:	4360      	muls	r0, r4
 8003858:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003862:	fbb3 f3f8 	udiv	r3, r3, r8
 8003866:	fb08 a313 	mls	r3, r8, r3, sl
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	3332      	adds	r3, #50	; 0x32
 800386e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	433b      	orrs	r3, r7
 8003878:	4433      	add	r3, r6
 800387a:	60ab      	str	r3, [r5, #8]
 800387c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003880:	f7ff fa6e 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8003884:	fb04 f300 	mul.w	r3, r4, r0
 8003888:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800388c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003890:	00b6      	lsls	r6, r6, #2
 8003892:	fbb3 f3f6 	udiv	r3, r3, r6
 8003896:	fbb3 f3f8 	udiv	r3, r3, r8
 800389a:	011e      	lsls	r6, r3, #4
 800389c:	f7ff fa60 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80038a0:	4360      	muls	r0, r4
 80038a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	fbb0 f7f3 	udiv	r7, r0, r3
 80038ac:	f7ff fa58 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80038b0:	4360      	muls	r0, r4
 80038b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038bc:	fbb3 f3f8 	udiv	r3, r3, r8
 80038c0:	fb08 7313 	mls	r3, r8, r3, r7
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	3332      	adds	r3, #50	; 0x32
 80038c8:	fbb3 f3f8 	udiv	r3, r3, r8
 80038cc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80038d0:	f7ff fa46 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80038d4:	4360      	muls	r0, r4
 80038d6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	fbb0 faf2 	udiv	sl, r0, r2
 80038e0:	f7ff fa3e 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80038e4:	e7b7      	b.n	8003856 <UART_SetConfig+0xa6>
 80038e6:	bf00      	nop
 80038e8:	40013800 	.word	0x40013800

080038ec <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	4604      	mov	r4, r0
 80038f0:	460e      	mov	r6, r1
 80038f2:	4617      	mov	r7, r2
 80038f4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80038f6:	6821      	ldr	r1, [r4, #0]
 80038f8:	680b      	ldr	r3, [r1, #0]
 80038fa:	ea36 0303 	bics.w	r3, r6, r3
 80038fe:	d101      	bne.n	8003904 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003900:	2000      	movs	r0, #0
}
 8003902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003904:	1c6b      	adds	r3, r5, #1
 8003906:	d0f7      	beq.n	80038f8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003908:	b995      	cbnz	r5, 8003930 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800390c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003914:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800391e:	2320      	movs	r3, #32
 8003920:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003924:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003928:	2300      	movs	r3, #0
 800392a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800392e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003930:	f7fd fc20 	bl	8001174 <HAL_GetTick>
 8003934:	1bc0      	subs	r0, r0, r7
 8003936:	4285      	cmp	r5, r0
 8003938:	d2dd      	bcs.n	80038f6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800393a:	e7e6      	b.n	800390a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800393c <HAL_UART_Init>:
{
 800393c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800393e:	4604      	mov	r4, r0
 8003940:	b340      	cbz	r0, 8003994 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003942:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003946:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800394a:	b91b      	cbnz	r3, 8003954 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800394c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003950:	f004 faec 	bl	8007f2c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003954:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003956:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003958:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800395c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800395e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003964:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003966:	f7ff ff23 	bl	80037b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800397c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003984:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8003986:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800398a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800398e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003992:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003994:	2001      	movs	r0, #1
}
 8003996:	bd10      	pop	{r4, pc}

08003998 <HAL_UART_Transmit>:
{
 8003998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800399c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800399e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80039a2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80039a4:	2b20      	cmp	r3, #32
{
 80039a6:	460d      	mov	r5, r1
 80039a8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80039aa:	d14e      	bne.n	8003a4a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80039ac:	2900      	cmp	r1, #0
 80039ae:	d049      	beq.n	8003a44 <HAL_UART_Transmit+0xac>
 80039b0:	2a00      	cmp	r2, #0
 80039b2:	d047      	beq.n	8003a44 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80039b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d046      	beq.n	8003a4a <HAL_UART_Transmit+0xb2>
 80039bc:	2301      	movs	r3, #1
 80039be:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c6:	2321      	movs	r3, #33	; 0x21
 80039c8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80039cc:	f7fd fbd2 	bl	8001174 <HAL_GetTick>
 80039d0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80039d2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80039d6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80039da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80039dc:	b29b      	uxth	r3, r3
 80039de:	b96b      	cbnz	r3, 80039fc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e0:	463b      	mov	r3, r7
 80039e2:	4632      	mov	r2, r6
 80039e4:	2140      	movs	r1, #64	; 0x40
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7ff ff80 	bl	80038ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 80039ec:	b9a8      	cbnz	r0, 8003a1a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80039ee:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80039f0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80039f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80039f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80039fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039fe:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a06:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a08:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0e:	4620      	mov	r0, r4
 8003a10:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a12:	d10e      	bne.n	8003a32 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a14:	f7ff ff6a 	bl	80038ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003a18:	b110      	cbz	r0, 8003a20 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8003a1a:	2003      	movs	r0, #3
 8003a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a20:	882b      	ldrh	r3, [r5, #0]
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a28:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	b943      	cbnz	r3, 8003a40 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8003a2e:	3502      	adds	r5, #2
 8003a30:	e7d3      	b.n	80039da <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a32:	f7ff ff5b 	bl	80038ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d1ef      	bne.n	8003a1a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	782a      	ldrb	r2, [r5, #0]
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	3501      	adds	r5, #1
 8003a42:	e7ca      	b.n	80039da <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003a44:	2001      	movs	r0, #1
 8003a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003a4a:	2002      	movs	r0, #2
}
 8003a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a50 <HAL_UART_Transmit_DMA>:
{
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	4604      	mov	r4, r0
 8003a54:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003a56:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003a5a:	2a20      	cmp	r2, #32
 8003a5c:	d12a      	bne.n	8003ab4 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 8003a5e:	b339      	cbz	r1, 8003ab0 <HAL_UART_Transmit_DMA+0x60>
 8003a60:	b333      	cbz	r3, 8003ab0 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8003a62:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8003a66:	2a01      	cmp	r2, #1
 8003a68:	d024      	beq.n	8003ab4 <HAL_UART_Transmit_DMA+0x64>
 8003a6a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003a6e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a72:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8003a74:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a76:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a7a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a7e:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8003a80:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8003a82:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a84:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a86:	4a0d      	ldr	r2, [pc, #52]	; (8003abc <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8003a88:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a8a:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ac0 <HAL_UART_Transmit_DMA+0x70>)
 8003a8e:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	3204      	adds	r2, #4
 8003a94:	f7fd fe94 	bl	80017c0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a9c:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8003a9e:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003aa0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003aa2:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8003aa4:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003aa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aac:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8003aae:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8003ab4:	2002      	movs	r0, #2
}
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	08003b57 	.word	0x08003b57
 8003abc:	08003b85 	.word	0x08003b85
 8003ac0:	08003c51 	.word	0x08003c51

08003ac4 <HAL_UART_Receive_DMA>:
{
 8003ac4:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003ac6:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8003aca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003acc:	2a20      	cmp	r2, #32
{
 8003ace:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003ad0:	d138      	bne.n	8003b44 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL) || (Size == 0U))
 8003ad2:	2900      	cmp	r1, #0
 8003ad4:	d034      	beq.n	8003b40 <HAL_UART_Receive_DMA+0x7c>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d032      	beq.n	8003b40 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8003ada:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8003ade:	2a01      	cmp	r2, #1
 8003ae0:	d030      	beq.n	8003b44 <HAL_UART_Receive_DMA+0x80>
 8003ae2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8003ae6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aea:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8003aec:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8003aee:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af0:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003af2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003af6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003af8:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003afa:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003afc:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003afe:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 8003b00:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b02:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b04:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <HAL_UART_Receive_DMA+0x8c>)
 8003b06:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003b08:	460a      	mov	r2, r1
 8003b0a:	1d31      	adds	r1, r6, #4
 8003b0c:	f7fd fe58 	bl	80017c0 <HAL_DMA_Start_IT>
    return HAL_OK;
 8003b10:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003b12:	682b      	ldr	r3, [r5, #0]
 8003b14:	9401      	str	r4, [sp, #4]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	9201      	str	r2, [sp, #4]
 8003b1a:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8003b1c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003b20:	9201      	str	r2, [sp, #4]
 8003b22:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2a:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b3a:	615a      	str	r2, [r3, #20]
}
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003b40:	2001      	movs	r0, #1
 8003b42:	e7fb      	b.n	8003b3c <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8003b44:	2002      	movs	r0, #2
 8003b46:	e7f9      	b.n	8003b3c <HAL_UART_Receive_DMA+0x78>
 8003b48:	08003b8f 	.word	0x08003b8f
 8003b4c:	08003c45 	.word	0x08003c45
 8003b50:	08003c51 	.word	0x08003c51

08003b54 <HAL_UART_TxCpltCallback>:
 8003b54:	4770      	bx	lr

08003b56 <UART_DMATransmitCplt>:
{
 8003b56:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b58:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b5a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f013 0320 	ands.w	r3, r3, #32
 8003b62:	d10a      	bne.n	8003b7a <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 8003b64:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b6e:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7ff ffea 	bl	8003b54 <HAL_UART_TxCpltCallback>
 8003b80:	bd08      	pop	{r3, pc}

08003b82 <HAL_UART_TxHalfCpltCallback>:
 8003b82:	4770      	bx	lr

08003b84 <UART_DMATxHalfCplt>:
{
 8003b84:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003b86:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003b88:	f7ff fffb 	bl	8003b82 <HAL_UART_TxHalfCpltCallback>
 8003b8c:	bd08      	pop	{r3, pc}

08003b8e <UART_DMAReceiveCplt>:
{
 8003b8e:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b90:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b92:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f013 0320 	ands.w	r3, r3, #32
 8003b9a:	d110      	bne.n	8003bbe <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8003b9c:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	68d9      	ldr	r1, [r3, #12]
 8003ba2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003ba6:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba8:	6959      	ldr	r1, [r3, #20]
 8003baa:	f021 0101 	bic.w	r1, r1, #1
 8003bae:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb0:	6959      	ldr	r1, [r3, #20]
 8003bb2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003bb6:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f003 f9c0 	bl	8006f44 <HAL_UART_RxCpltCallback>
 8003bc4:	bd08      	pop	{r3, pc}

08003bc6 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003bc6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8003bca:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003bcc:	2b22      	cmp	r3, #34	; 0x22
 8003bce:	d136      	bne.n	8003c3e <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bd0:	6883      	ldr	r3, [r0, #8]
 8003bd2:	6901      	ldr	r1, [r0, #16]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	6802      	ldr	r2, [r0, #0]
 8003bda:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003bdc:	d123      	bne.n	8003c26 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bde:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003be0:	b9e9      	cbnz	r1, 8003c1e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003be2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be6:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003bea:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8003bec:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003bee:	3c01      	subs	r4, #1
 8003bf0:	b2a4      	uxth	r4, r4
 8003bf2:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003bf4:	b98c      	cbnz	r4, 8003c1a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bf6:	6803      	ldr	r3, [r0, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	f022 0220 	bic.w	r2, r2, #32
 8003bfe:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c06:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003c10:	2320      	movs	r3, #32
 8003c12:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003c16:	f003 f995 	bl	8006f44 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8003c1a:	2000      	movs	r0, #0
}
 8003c1c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	f823 2b01 	strh.w	r2, [r3], #1
 8003c24:	e7e1      	b.n	8003bea <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003c26:	b921      	cbnz	r1, 8003c32 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c28:	1c59      	adds	r1, r3, #1
 8003c2a:	6852      	ldr	r2, [r2, #4]
 8003c2c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e7dc      	b.n	8003bec <UART_Receive_IT+0x26>
 8003c32:	6852      	ldr	r2, [r2, #4]
 8003c34:	1c59      	adds	r1, r3, #1
 8003c36:	6281      	str	r1, [r0, #40]	; 0x28
 8003c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c3c:	e7f7      	b.n	8003c2e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8003c3e:	2002      	movs	r0, #2
 8003c40:	bd10      	pop	{r4, pc}

08003c42 <HAL_UART_RxHalfCpltCallback>:
 8003c42:	4770      	bx	lr

08003c44 <UART_DMARxHalfCplt>:
{
 8003c44:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8003c46:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003c48:	f7ff fffb 	bl	8003c42 <HAL_UART_RxHalfCpltCallback>
 8003c4c:	bd08      	pop	{r3, pc}

08003c4e <HAL_UART_ErrorCallback>:
 8003c4e:	4770      	bx	lr

08003c50 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c50:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8003c52:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003c54:	680b      	ldr	r3, [r1, #0]
 8003c56:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003c58:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8003c5c:	2821      	cmp	r0, #33	; 0x21
 8003c5e:	d10a      	bne.n	8003c76 <UART_DMAError+0x26>
 8003c60:	0612      	lsls	r2, r2, #24
 8003c62:	d508      	bpl.n	8003c76 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8003c64:	2200      	movs	r2, #0
 8003c66:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003c6e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003c70:	2220      	movs	r2, #32
 8003c72:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8003c76:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c78:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8003c7c:	2a22      	cmp	r2, #34	; 0x22
 8003c7e:	d106      	bne.n	8003c8e <UART_DMAError+0x3e>
 8003c80:	065b      	lsls	r3, r3, #25
 8003c82:	d504      	bpl.n	8003c8e <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8003c84:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8003c86:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8003c88:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003c8a:	f7ff fd83 	bl	8003794 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c8e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003c90:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c92:	f043 0310 	orr.w	r3, r3, #16
 8003c96:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003c98:	f7ff ffd9 	bl	8003c4e <HAL_UART_ErrorCallback>
 8003c9c:	bd08      	pop	{r3, pc}
	...

08003ca0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ca0:	6803      	ldr	r3, [r0, #0]
{
 8003ca2:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ca4:	681a      	ldr	r2, [r3, #0]
{
 8003ca6:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8003ca8:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003caa:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cac:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8003cae:	d107      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cb0:	0696      	lsls	r6, r2, #26
 8003cb2:	d55a      	bpl.n	8003d6a <HAL_UART_IRQHandler+0xca>
 8003cb4:	068d      	lsls	r5, r1, #26
 8003cb6:	d558      	bpl.n	8003d6a <HAL_UART_IRQHandler+0xca>
}
 8003cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003cbc:	f7ff bf83 	b.w	8003bc6 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cc0:	f015 0501 	ands.w	r5, r5, #1
 8003cc4:	d102      	bne.n	8003ccc <HAL_UART_IRQHandler+0x2c>
 8003cc6:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003cca:	d04e      	beq.n	8003d6a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ccc:	07d3      	lsls	r3, r2, #31
 8003cce:	d505      	bpl.n	8003cdc <HAL_UART_IRQHandler+0x3c>
 8003cd0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cd2:	bf42      	ittt	mi
 8003cd4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003cd6:	f043 0301 	orrmi.w	r3, r3, #1
 8003cda:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cdc:	0750      	lsls	r0, r2, #29
 8003cde:	d504      	bpl.n	8003cea <HAL_UART_IRQHandler+0x4a>
 8003ce0:	b11d      	cbz	r5, 8003cea <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ce2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cea:	0793      	lsls	r3, r2, #30
 8003cec:	d504      	bpl.n	8003cf8 <HAL_UART_IRQHandler+0x58>
 8003cee:	b11d      	cbz	r5, 8003cf8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf8:	0716      	lsls	r6, r2, #28
 8003cfa:	d504      	bpl.n	8003d06 <HAL_UART_IRQHandler+0x66>
 8003cfc:	b11d      	cbz	r5, 8003d06 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d00:	f043 0308 	orr.w	r3, r3, #8
 8003d04:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d066      	beq.n	8003dda <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d0c:	0695      	lsls	r5, r2, #26
 8003d0e:	d504      	bpl.n	8003d1a <HAL_UART_IRQHandler+0x7a>
 8003d10:	0688      	lsls	r0, r1, #26
 8003d12:	d502      	bpl.n	8003d1a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8003d14:	4620      	mov	r0, r4
 8003d16:	f7ff ff56 	bl	8003bc6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003d1c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d20:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003d22:	0711      	lsls	r1, r2, #28
 8003d24:	d402      	bmi.n	8003d2c <HAL_UART_IRQHandler+0x8c>
 8003d26:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003d2a:	d01a      	beq.n	8003d62 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003d2c:	f7ff fd32 	bl	8003794 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	0652      	lsls	r2, r2, #25
 8003d36:	d510      	bpl.n	8003d5a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d38:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8003d3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d40:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8003d42:	b150      	cbz	r0, 8003d5a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <HAL_UART_IRQHandler+0x13c>)
 8003d46:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d48:	f7fd fd78 	bl	800183c <HAL_DMA_Abort_IT>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d044      	beq.n	8003dda <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d50:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d58:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7ff ff77 	bl	8003c4e <HAL_UART_ErrorCallback>
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003d62:	f7ff ff74 	bl	8003c4e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003d68:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d6a:	0616      	lsls	r6, r2, #24
 8003d6c:	d527      	bpl.n	8003dbe <HAL_UART_IRQHandler+0x11e>
 8003d6e:	060d      	lsls	r5, r1, #24
 8003d70:	d525      	bpl.n	8003dbe <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d72:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003d76:	2a21      	cmp	r2, #33	; 0x21
 8003d78:	d12f      	bne.n	8003dda <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d7a:	68a2      	ldr	r2, [r4, #8]
 8003d7c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003d80:	6a22      	ldr	r2, [r4, #32]
 8003d82:	d117      	bne.n	8003db4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d84:	8811      	ldrh	r1, [r2, #0]
 8003d86:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003d8a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003d8c:	6921      	ldr	r1, [r4, #16]
 8003d8e:	b979      	cbnz	r1, 8003db0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8003d90:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8003d92:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8003d94:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003d96:	3a01      	subs	r2, #1
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003d9c:	b9ea      	cbnz	r2, 8003dda <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003da4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8003db0:	3201      	adds	r2, #1
 8003db2:	e7ee      	b.n	8003d92 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003db4:	1c51      	adds	r1, r2, #1
 8003db6:	6221      	str	r1, [r4, #32]
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	e7ea      	b.n	8003d94 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dbe:	0650      	lsls	r0, r2, #25
 8003dc0:	d50b      	bpl.n	8003dda <HAL_UART_IRQHandler+0x13a>
 8003dc2:	064a      	lsls	r2, r1, #25
 8003dc4:	d509      	bpl.n	8003dda <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dc6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003dc8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dce:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003dd6:	f7ff febd 	bl	8003b54 <HAL_UART_TxCpltCallback>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	08003de1 	.word	0x08003de1

08003de0 <UART_DMAAbortOnError>:
{
 8003de0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003de2:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003de4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003de6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003de8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003dea:	f7ff ff30 	bl	8003c4e <HAL_UART_ErrorCallback>
 8003dee:	bd08      	pop	{r3, pc}

08003df0 <write_2>:
}

/**
 * Write sequence of n bytes from offset
 */
void write_2(unsigned int address, uint8_t *data, int offset, int n) {
 8003df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t *adr = data+offset;
    HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n, 1000);
 8003df2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    uint8_t *adr = data+offset;
 8003df6:	440a      	add	r2, r1
    HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n, 1000);
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	9200      	str	r2, [sp, #0]
 8003dfe:	9402      	str	r4, [sp, #8]
 8003e00:	b282      	uxth	r2, r0
 8003e02:	2302      	movs	r3, #2
 8003e04:	21a0      	movs	r1, #160	; 0xa0
 8003e06:	4804      	ldr	r0, [pc, #16]	; (8003e18 <write_2+0x28>)
 8003e08:	f7fe fb7e 	bl	8002508 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8003e0c:	200a      	movs	r0, #10
}
 8003e0e:	b004      	add	sp, #16
 8003e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(10);
 8003e14:	f7fd b9b4 	b.w	8001180 <HAL_Delay>
 8003e18:	20000ed0 	.word	0x20000ed0

08003e1c <write_1>:
void write_1(unsigned int address, uint8_t *data, int n) {
 8003e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e20:	4606      	mov	r6, r0
 8003e22:	4688      	mov	r8, r1
 8003e24:	4615      	mov	r5, r2
  int offD = 0;         // current offset in data pointer
 8003e26:	2700      	movs	r7, #0
  while (c > 0) {
 8003e28:	2d00      	cmp	r5, #0
 8003e2a:	dc01      	bgt.n	8003e30 <write_1+0x14>
}
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nc = min(min(c, 30), PAGE_SIZE - offP);
 8003e30:	2d1e      	cmp	r5, #30
 8003e32:	462b      	mov	r3, r5
 8003e34:	bfa8      	it	ge
 8003e36:	231e      	movge	r3, #30
    offP = address % PAGE_SIZE;
 8003e38:	f006 043f 	and.w	r4, r6, #63	; 0x3f
    nc = min(min(c, 30), PAGE_SIZE - offP);
 8003e3c:	f1c4 0440 	rsb	r4, r4, #64	; 0x40
 8003e40:	429c      	cmp	r4, r3
 8003e42:	bfa8      	it	ge
 8003e44:	461c      	movge	r4, r3
    write_2(address, data, offD, nc);
 8003e46:	463a      	mov	r2, r7
 8003e48:	4630      	mov	r0, r6
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	f7ff ffcf 	bl	8003df0 <write_2>
    c-=nc;
 8003e52:	1b2d      	subs	r5, r5, r4
    offD+=nc;
 8003e54:	4427      	add	r7, r4
    address+=nc;
 8003e56:	4426      	add	r6, r4
 8003e58:	e7e6      	b.n	8003e28 <write_1+0xc>

08003e5a <writeFloat>:
void writeFloat(unsigned int address, float data) {
 8003e5a:	b507      	push	{r0, r1, r2, lr}
 8003e5c:	ab02      	add	r3, sp, #8
 8003e5e:	f843 1d04 	str.w	r1, [r3, #-4]!
  write_1(address, (uint8_t*)&data, 4);
 8003e62:	2204      	movs	r2, #4
 8003e64:	4619      	mov	r1, r3
 8003e66:	f7ff ffd9 	bl	8003e1c <write_1>
}
 8003e6a:	b003      	add	sp, #12
 8003e6c:	f85d fb04 	ldr.w	pc, [sp], #4

08003e70 <read_2>:


/**
 * Read sequence of n bytes to offset
 */
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8003e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e74:	b098      	sub	sp, #96	; 0x60
  int r = 0;
  uint8_t pData[80];
  memset(&pData[0], n, sizeof(pData));
 8003e76:	ad04      	add	r5, sp, #16
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8003e78:	4680      	mov	r8, r0
 8003e7a:	460e      	mov	r6, r1
 8003e7c:	4617      	mov	r7, r2
  memset(&pData[0], n, sizeof(pData));
 8003e7e:	4619      	mov	r1, r3
 8003e80:	2250      	movs	r2, #80	; 0x50
 8003e82:	4628      	mov	r0, r5
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8003e84:	461c      	mov	r4, r3
  memset(&pData[0], n, sizeof(pData));
 8003e86:	f004 f9e4 	bl	8008252 <memset>
  HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, pData, n, 1000);
 8003e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e8e:	9302      	str	r3, [sp, #8]
 8003e90:	b2a3      	uxth	r3, r4
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	9500      	str	r5, [sp, #0]
 8003e96:	2302      	movs	r3, #2
 8003e98:	fa1f f288 	uxth.w	r2, r8
 8003e9c:	21a0      	movs	r1, #160	; 0xa0
 8003e9e:	4807      	ldr	r0, [pc, #28]	; (8003ebc <read_2+0x4c>)
 8003ea0:	f7fe fbc8 	bl	8002634 <HAL_I2C_Mem_Read>
  int r = 0;
 8003ea4:	2300      	movs	r3, #0
  while (r<n) {
    data[offset+r] = pData[r];
 8003ea6:	443e      	add	r6, r7
  while (r<n) {
 8003ea8:	42a3      	cmp	r3, r4
 8003eaa:	db02      	blt.n	8003eb2 <read_2+0x42>
    r++;
  }
}
 8003eac:	b018      	add	sp, #96	; 0x60
 8003eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    data[offset+r] = pData[r];
 8003eb2:	5cea      	ldrb	r2, [r5, r3]
 8003eb4:	54f2      	strb	r2, [r6, r3]
    r++;
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	e7f6      	b.n	8003ea8 <read_2+0x38>
 8003eba:	bf00      	nop
 8003ebc:	20000ed0 	.word	0x20000ed0

08003ec0 <read_1>:
void read_1(unsigned int address, uint8_t *data, int n) {
 8003ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec4:	4607      	mov	r7, r0
 8003ec6:	4688      	mov	r8, r1
 8003ec8:	4614      	mov	r4, r2
  int offD = 0;
 8003eca:	2600      	movs	r6, #0
  while (c > 0) {
 8003ecc:	2c00      	cmp	r4, #0
 8003ece:	dc01      	bgt.n	8003ed4 <read_1+0x14>
}
 8003ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed4:	2c20      	cmp	r4, #32
 8003ed6:	4625      	mov	r5, r4
 8003ed8:	bfa8      	it	ge
 8003eda:	2520      	movge	r5, #32
    read_2(address, data, offD, nc);
 8003edc:	4632      	mov	r2, r6
 8003ede:	4638      	mov	r0, r7
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	f7ff ffc4 	bl	8003e70 <read_2>
    address+=nc;
 8003ee8:	442f      	add	r7, r5
    offD+=nc;
 8003eea:	442e      	add	r6, r5
    c-=nc;
 8003eec:	1b64      	subs	r4, r4, r5
 8003eee:	e7ed      	b.n	8003ecc <read_1+0xc>

08003ef0 <readFloat>:
float readFloat(unsigned int address) {
 8003ef0:	b510      	push	{r4, lr}
  read_1(address, _b, 4);
 8003ef2:	4c03      	ldr	r4, [pc, #12]	; (8003f00 <readFloat+0x10>)
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	f7ff ffe2 	bl	8003ec0 <read_1>
  return *(float*)&_b[0];
 8003efc:	6820      	ldr	r0, [r4, #0]
}
 8003efe:	bd10      	pop	{r4, pc}
 8003f00:	20000760 	.word	0x20000760

08003f04 <EEPROM_Init>:
{
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	2400      	movs	r4, #0
 8003f08:	4d09      	ldr	r5, [pc, #36]	; (8003f30 <EEPROM_Init+0x2c>)
     pid.kp[i] = readFloat( 0 + (4*i));
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f7ff fff0 	bl	8003ef0 <readFloat>
 8003f10:	f845 0f04 	str.w	r0, [r5, #4]!
     pid.ki[i] = readFloat(12 + (4*i));
 8003f14:	f104 000c 	add.w	r0, r4, #12
 8003f18:	f7ff ffea 	bl	8003ef0 <readFloat>
 8003f1c:	6268      	str	r0, [r5, #36]	; 0x24
     pid.kd[i] = readFloat(24 + (4*i));
 8003f1e:	f104 0018 	add.w	r0, r4, #24
 8003f22:	f7ff ffe5 	bl	8003ef0 <readFloat>
 8003f26:	3404      	adds	r4, #4
   for(int i = 0; i < 3; i++){
 8003f28:	2c0c      	cmp	r4, #12
     pid.kd[i] = readFloat(24 + (4*i));
 8003f2a:	64a8      	str	r0, [r5, #72]	; 0x48
   for(int i = 0; i < 3; i++){
 8003f2c:	d1ed      	bne.n	8003f0a <EEPROM_Init+0x6>
}
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	20000874 	.word	0x20000874

08003f34 <gps_Init>:

void USART2_TX(unsigned char data){while(!(USART2->SR&0x40)); USART2->DR=data;}
void USART2_TX_str(char *str){while(*str){USART2_TX(*str++);}}

void gps_Init(void)
{
 8003f34:	4770      	bx	lr
	...

08003f38 <I2C_ByteWrite>:
#include <Board.h>


void I2C_ByteWrite(uint8_t DevAddress, uint8_t MemAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t tmp;
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
 8003f3c:	2601      	movs	r6, #1
{
 8003f3e:	4692      	mov	sl, r2
 8003f40:	461c      	mov	r4, r3
 8003f42:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
 8003f44:	4f16      	ldr	r7, [pc, #88]	; (8003fa0 <I2C_ByteWrite+0x68>)
 8003f46:	f10d 0517 	add.w	r5, sp, #23
 8003f4a:	4680      	mov	r8, r0
 8003f4c:	4689      	mov	r9, r1
 8003f4e:	4633      	mov	r3, r6
 8003f50:	460a      	mov	r2, r1
 8003f52:	9602      	str	r6, [sp, #8]
 8003f54:	4601      	mov	r1, r0
 8003f56:	9601      	str	r6, [sp, #4]
 8003f58:	9500      	str	r5, [sp, #0]
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	f7fe fb6a 	bl	8002634 <HAL_I2C_Mem_Read>
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8003f60:	ebaa 0304 	sub.w	r3, sl, r4
 8003f64:	199a      	adds	r2, r3, r6
 8003f66:	fa06 f404 	lsl.w	r4, r6, r4
	data <<= (bitStart - length + 1); // shift data into correct position
 8003f6a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8003f6e:	3c01      	subs	r4, #1
 8003f70:	4094      	lsls	r4, r2
	data <<= (bitStart - length + 1); // shift data into correct position
 8003f72:	4093      	lsls	r3, r2
	data &= mask; // zero all non-important bits in data
	tmp &= ~(mask); // zero all important bits in existing byte
 8003f74:	f89d 2017 	ldrb.w	r2, [sp, #23]
	data <<= (bitStart - length + 1); // shift data into correct position
 8003f78:	b2db      	uxtb	r3, r3
	tmp &= ~(mask); // zero all important bits in existing byte
 8003f7a:	ea22 0204 	bic.w	r2, r2, r4
	data &= mask; // zero all non-important bits in data
 8003f7e:	401c      	ands	r4, r3
	tmp |= data; // combine data with existing byte
	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 8003f80:	230a      	movs	r3, #10
	tmp |= data; // combine data with existing byte
 8003f82:	4314      	orrs	r4, r2
	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 8003f84:	9302      	str	r3, [sp, #8]
 8003f86:	e88d 0060 	stmia.w	sp, {r5, r6}
 8003f8a:	4633      	mov	r3, r6
 8003f8c:	464a      	mov	r2, r9
 8003f8e:	4641      	mov	r1, r8
 8003f90:	4638      	mov	r0, r7
	tmp |= data; // combine data with existing byte
 8003f92:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 8003f96:	f7fe fab7 	bl	8002508 <HAL_I2C_Mem_Write>
}
 8003f9a:	b006      	add	sp, #24
 8003f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa0:	20000ed0 	.word	0x20000ed0

08003fa4 <I2C_ByteRead>:
//	tmp >>= (bitStart - length + 1);
//	*data = tmp;
//}

void I2C_ByteRead(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 8003fa6:	2401      	movs	r4, #1
 8003fa8:	9402      	str	r4, [sp, #8]
 8003faa:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8003fae:	e88d 0018 	stmia.w	sp, {r3, r4}
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	460a      	mov	r2, r1
 8003fb6:	4601      	mov	r1, r0
 8003fb8:	4802      	ldr	r0, [pc, #8]	; (8003fc4 <I2C_ByteRead+0x20>)
 8003fba:	f7fe fb3b 	bl	8002634 <HAL_I2C_Mem_Read>
}
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000ed0 	.word	0x20000ed0

08003fc8 <I2C_Write>:
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
	*data = tmp & (1 << bitNum);
}

void I2C_Write(uint16_t DevAddress, uint8_t data, uint16_t Size)
{
 8003fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8003fcc:	4c1e      	ldr	r4, [pc, #120]	; (8004048 <I2C_Write+0x80>)
{
 8003fce:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8003fd0:	4620      	mov	r0, r4
{
 8003fd2:	4616      	mov	r6, r2
 8003fd4:	f88d 100f 	strb.w	r1, [sp, #15]
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8003fd8:	f7fe fc4c 	bl	8002874 <HAL_I2C_GetState>
 8003fdc:	2820      	cmp	r0, #32
 8003fde:	d111      	bne.n	8004004 <I2C_Write+0x3c>

  state = HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1000);
 8003fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	4620      	mov	r0, r4
 8003fea:	4633      	mov	r3, r6
 8003fec:	f10d 020f 	add.w	r2, sp, #15
 8003ff0:	f7fe f832 	bl	8002058 <HAL_I2C_Master_Transmit>
 8003ff4:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 8003ff6:	6c27      	ldr	r7, [r4, #64]	; 0x40
   while(state)
   {
     sprintf(Buf, "MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 8003ff8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004054 <I2C_Write+0x8c>
 8003ffc:	4c13      	ldr	r4, [pc, #76]	; (800404c <I2C_Write+0x84>)
     HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8003ffe:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004058 <I2C_Write+0x90>
   while(state)
 8004002:	b915      	cbnz	r5, 800400a <I2C_Write+0x42>
       HAL_Delay(4);
     }
   }
  }
  //while(HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1) != HAL_OK);
}
 8004004:	b004      	add	sp, #16
 8004006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     sprintf(Buf, "MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 800400a:	463b      	mov	r3, r7
 800400c:	462a      	mov	r2, r5
 800400e:	4641      	mov	r1, r8
 8004010:	4620      	mov	r0, r4
 8004012:	f004 f927 	bl	8008264 <siprintf>
     HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8004016:	4620      	mov	r0, r4
 8004018:	f7fc f89a 	bl	8000150 <strlen>
 800401c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004020:	b282      	uxth	r2, r0
 8004022:	4621      	mov	r1, r4
 8004024:	4648      	mov	r0, r9
 8004026:	f7ff fcb7 	bl	8003998 <HAL_UART_Transmit>
       Error.error = 2;
 800402a:	f04f 0a02 	mov.w	sl, #2
     while (Error.error !=0)
 800402e:	4e08      	ldr	r6, [pc, #32]	; (8004050 <I2C_Write+0x88>)
 8004030:	7833      	ldrb	r3, [r6, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0e5      	beq.n	8004002 <I2C_Write+0x3a>
       Error.error = 2;
 8004036:	f886 a000 	strb.w	sl, [r6]
       error_signal();
 800403a:	f000 fcc7 	bl	80049cc <error_signal>
       HAL_Delay(4);
 800403e:	2004      	movs	r0, #4
 8004040:	f7fd f89e 	bl	8001180 <HAL_Delay>
 8004044:	e7f4      	b.n	8004030 <I2C_Write+0x68>
 8004046:	bf00      	nop
 8004048:	20000ed0 	.word	0x20000ed0
 800404c:	20000da4 	.word	0x20000da4
 8004050:	200010a0 	.word	0x200010a0
 8004054:	0800ae14 	.word	0x0800ae14
 8004058:	200010e8 	.word	0x200010e8

0800405c <I2C_Read>:

void I2C_Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800405c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004060:	4c1d      	ldr	r4, [pc, #116]	; (80040d8 <I2C_Read+0x7c>)
{
 8004062:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004064:	4620      	mov	r0, r4
{
 8004066:	460e      	mov	r6, r1
 8004068:	4617      	mov	r7, r2
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 800406a:	f7fe fc03 	bl	8002874 <HAL_I2C_GetState>
 800406e:	2820      	cmp	r0, #32
 8004070:	d110      	bne.n	8004094 <I2C_Read+0x38>

  state = HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1000);
 8004072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004076:	4629      	mov	r1, r5
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	4620      	mov	r0, r4
 800407c:	463b      	mov	r3, r7
 800407e:	4632      	mov	r2, r6
 8004080:	f7fe f8c0 	bl	8002204 <HAL_I2C_Master_Receive>
 8004084:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 8004086:	6c27      	ldr	r7, [r4, #64]	; 0x40
    while(state)
    {
      sprintf(Buf, "MS5611_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 8004088:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80040e4 <I2C_Read+0x88>
 800408c:	4c13      	ldr	r4, [pc, #76]	; (80040dc <I2C_Read+0x80>)
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800408e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80040e8 <I2C_Read+0x8c>
    while(state)
 8004092:	b915      	cbnz	r5, 800409a <I2C_Read+0x3e>
        HAL_Delay(4);
      }
    }
  }
  //while(HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1) != HAL_OK);
}
 8004094:	b002      	add	sp, #8
 8004096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sprintf(Buf, "MS5611_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 800409a:	463b      	mov	r3, r7
 800409c:	462a      	mov	r2, r5
 800409e:	4641      	mov	r1, r8
 80040a0:	4620      	mov	r0, r4
 80040a2:	f004 f8df 	bl	8008264 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7fc f852 	bl	8000150 <strlen>
 80040ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040b0:	b282      	uxth	r2, r0
 80040b2:	4621      	mov	r1, r4
 80040b4:	4648      	mov	r0, r9
 80040b6:	f7ff fc6f 	bl	8003998 <HAL_UART_Transmit>
        Error.error = 3;
 80040ba:	f04f 0a03 	mov.w	sl, #3
      while (Error.error !=0)
 80040be:	4e08      	ldr	r6, [pc, #32]	; (80040e0 <I2C_Read+0x84>)
 80040c0:	7833      	ldrb	r3, [r6, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0e5      	beq.n	8004092 <I2C_Read+0x36>
        Error.error = 3;
 80040c6:	f886 a000 	strb.w	sl, [r6]
        error_signal();
 80040ca:	f000 fc7f 	bl	80049cc <error_signal>
        HAL_Delay(4);
 80040ce:	2004      	movs	r0, #4
 80040d0:	f7fd f856 	bl	8001180 <HAL_Delay>
 80040d4:	e7f4      	b.n	80040c0 <I2C_Read+0x64>
 80040d6:	bf00      	nop
 80040d8:	20000ed0 	.word	0x20000ed0
 80040dc:	20000da4 	.word	0x20000da4
 80040e0:	200010a0 	.word	0x200010a0
 80040e4:	0800adf8 	.word	0x0800adf8
 80040e8:	200010e8 	.word	0x200010e8

080040ec <invSqrt>:
/* Calculate 1/sqrt(x) with magic number support */
//static float oneOverSqrt(float x) {
//    return 1.0f / (float) sqrt(x);
//}

float invSqrt(float x) {
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4606      	mov	r6, r0
	float halfx = 0.5f * x;
 80040f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80040f4:	f7fc fdfa 	bl	8000cec <__aeabi_fmul>
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
 80040f8:	4c11      	ldr	r4, [pc, #68]	; (8004140 <invSqrt+0x54>)
	float halfx = 0.5f * x;
 80040fa:	4605      	mov	r5, r0
	y = *(float*)&i;
 80040fc:	eba4 0466 	sub.w	r4, r4, r6, asr #1
	y = y * (1.5f - (halfx * y * y));
 8004100:	4621      	mov	r1, r4
 8004102:	f7fc fdf3 	bl	8000cec <__aeabi_fmul>
 8004106:	4621      	mov	r1, r4
 8004108:	f7fc fdf0 	bl	8000cec <__aeabi_fmul>
 800410c:	4601      	mov	r1, r0
 800410e:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8004112:	f7fc fce1 	bl	8000ad8 <__aeabi_fsub>
 8004116:	4621      	mov	r1, r4
 8004118:	f7fc fde8 	bl	8000cec <__aeabi_fmul>
 800411c:	4604      	mov	r4, r0
	y = y * (1.5f - (halfx * y * y));
 800411e:	4601      	mov	r1, r0
 8004120:	4628      	mov	r0, r5
 8004122:	f7fc fde3 	bl	8000cec <__aeabi_fmul>
 8004126:	4621      	mov	r1, r4
 8004128:	f7fc fde0 	bl	8000cec <__aeabi_fmul>
 800412c:	4601      	mov	r1, r0
 800412e:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8004132:	f7fc fcd1 	bl	8000ad8 <__aeabi_fsub>
 8004136:	4621      	mov	r1, r4
 8004138:	f7fc fdd8 	bl	8000cec <__aeabi_fmul>
	return y;
}
 800413c:	bd70      	pop	{r4, r5, r6, pc}
 800413e:	bf00      	nop
 8004140:	5f3759df 	.word	0x5f3759df
 8004144:	00000000 	.word	0x00000000

08004148 <calculateAngles>:
//   float tmp = *(float*)&i;
//   return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
//}


void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 8004148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AHRSIMU->Roll = (float) atan2f(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 800414c:	6986      	ldr	r6, [r0, #24]
void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 800414e:	4604      	mov	r4, r0
    AHRSIMU->Roll = (float) atan2f(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 8004150:	69c5      	ldr	r5, [r0, #28]
 8004152:	4631      	mov	r1, r6
 8004154:	4630      	mov	r0, r6
 8004156:	f7fc fdc9 	bl	8000cec <__aeabi_fmul>
 800415a:	4601      	mov	r1, r0
 800415c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004160:	f7fc fcba 	bl	8000ad8 <__aeabi_fsub>
 8004164:	4629      	mov	r1, r5
 8004166:	4607      	mov	r7, r0
 8004168:	4628      	mov	r0, r5
 800416a:	f7fc fdbf 	bl	8000cec <__aeabi_fmul>
 800416e:	4601      	mov	r1, r0
 8004170:	4638      	mov	r0, r7
 8004172:	f7fc fcb1 	bl	8000ad8 <__aeabi_fsub>
 8004176:	6961      	ldr	r1, [r4, #20]
 8004178:	4607      	mov	r7, r0
 800417a:	4630      	mov	r0, r6
 800417c:	f7fc fdb6 	bl	8000cec <__aeabi_fmul>
 8004180:	6a21      	ldr	r1, [r4, #32]
 8004182:	4606      	mov	r6, r0
 8004184:	4628      	mov	r0, r5
 8004186:	f7fc fdb1 	bl	8000cec <__aeabi_fmul>
 800418a:	4601      	mov	r1, r0
 800418c:	4630      	mov	r0, r6
 800418e:	f7fc fca5 	bl	8000adc <__addsf3>
 8004192:	4639      	mov	r1, r7
 8004194:	f004 ff02 	bl	8008f9c <atan2f>
    AHRSIMU->Pitch = (float) asinf(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 8004198:	6a21      	ldr	r1, [r4, #32]
    AHRSIMU->Roll = (float) atan2f(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 800419a:	6020      	str	r0, [r4, #0]
    AHRSIMU->Pitch = (float) asinf(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 800419c:	69a0      	ldr	r0, [r4, #24]
 800419e:	f7fc fda5 	bl	8000cec <__aeabi_fmul>
 80041a2:	69e1      	ldr	r1, [r4, #28]
 80041a4:	4605      	mov	r5, r0
 80041a6:	6960      	ldr	r0, [r4, #20]
 80041a8:	f7fc fda0 	bl	8000cec <__aeabi_fmul>
 80041ac:	4601      	mov	r1, r0
 80041ae:	4628      	mov	r0, r5
 80041b0:	f7fc fc92 	bl	8000ad8 <__aeabi_fsub>
 80041b4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80041b8:	f7fc fd98 	bl	8000cec <__aeabi_fmul>
 80041bc:	f004 fea0 	bl	8008f00 <asinf>
    AHRSIMU->Yaw = (float) atan2f(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 80041c0:	69e6      	ldr	r6, [r4, #28]
    AHRSIMU->Pitch = (float) asinf(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 80041c2:	6060      	str	r0, [r4, #4]
    AHRSIMU->Yaw = (float) atan2f(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 80041c4:	4631      	mov	r1, r6
 80041c6:	4630      	mov	r0, r6
 80041c8:	f7fc fd90 	bl	8000cec <__aeabi_fmul>
 80041cc:	4601      	mov	r1, r0
 80041ce:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80041d2:	f7fc fc81 	bl	8000ad8 <__aeabi_fsub>
 80041d6:	6a25      	ldr	r5, [r4, #32]
 80041d8:	4607      	mov	r7, r0
 80041da:	4629      	mov	r1, r5
 80041dc:	4628      	mov	r0, r5
 80041de:	f7fc fd85 	bl	8000cec <__aeabi_fmul>
 80041e2:	4601      	mov	r1, r0
 80041e4:	4638      	mov	r0, r7
 80041e6:	f7fc fc77 	bl	8000ad8 <__aeabi_fsub>
 80041ea:	69a1      	ldr	r1, [r4, #24]
 80041ec:	4607      	mov	r7, r0
 80041ee:	4630      	mov	r0, r6
 80041f0:	f7fc fd7c 	bl	8000cec <__aeabi_fmul>
 80041f4:	6961      	ldr	r1, [r4, #20]
 80041f6:	4606      	mov	r6, r0
 80041f8:	4628      	mov	r0, r5
 80041fa:	f7fc fd77 	bl	8000cec <__aeabi_fmul>
 80041fe:	4601      	mov	r1, r0
 8004200:	4630      	mov	r0, r6
 8004202:	f7fc fc6b 	bl	8000adc <__addsf3>
 8004206:	4639      	mov	r1, r7
 8004208:	f004 fec8 	bl	8008f9c <atan2f>

    /* Calculate degrees and remove inclination */
    AHRSIMU->Roll *= R2D;
 800420c:	4980      	ldr	r1, [pc, #512]	; (8004410 <calculateAngles+0x2c8>)
    AHRSIMU->Yaw = (float) atan2f(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 800420e:	4605      	mov	r5, r0
    AHRSIMU->Roll *= R2D;
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	f7fc fd6b 	bl	8000cec <__aeabi_fmul>
    AHRSIMU->Pitch *= R2D;
 8004216:	497e      	ldr	r1, [pc, #504]	; (8004410 <calculateAngles+0x2c8>)
    AHRSIMU->Roll *= R2D;
 8004218:	6020      	str	r0, [r4, #0]
 800421a:	4682      	mov	sl, r0
    AHRSIMU->Pitch *= R2D;
 800421c:	6860      	ldr	r0, [r4, #4]
 800421e:	f7fc fd65 	bl	8000cec <__aeabi_fmul>
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 8004222:	497b      	ldr	r1, [pc, #492]	; (8004410 <calculateAngles+0x2c8>)
    AHRSIMU->Pitch *= R2D;
 8004224:	6060      	str	r0, [r4, #4]
 8004226:	4607      	mov	r7, r0
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 8004228:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 800422c:	f7fc fd5e 	bl	8000cec <__aeabi_fmul>
 8004230:	68e1      	ldr	r1, [r4, #12]
 8004232:	f7fc fc51 	bl	8000ad8 <__aeabi_fsub>

    /* Check values because of inclination */
    if (AHRSIMU->Yaw < -180) {
 8004236:	4977      	ldr	r1, [pc, #476]	; (8004414 <calculateAngles+0x2cc>)
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 8004238:	4605      	mov	r5, r0
    if (AHRSIMU->Yaw < -180) {
 800423a:	f7fc fef5 	bl	8001028 <__aeabi_fcmplt>
 800423e:	b148      	cbz	r0, 8004254 <calculateAngles+0x10c>
        AHRSIMU->Yaw = 180.0f - (-180.0f - AHRSIMU->Yaw);
 8004240:	4629      	mov	r1, r5
 8004242:	4874      	ldr	r0, [pc, #464]	; (8004414 <calculateAngles+0x2cc>)
 8004244:	f7fc fc48 	bl	8000ad8 <__aeabi_fsub>
 8004248:	4601      	mov	r1, r0
 800424a:	4873      	ldr	r0, [pc, #460]	; (8004418 <calculateAngles+0x2d0>)
    } else if (AHRSIMU->Yaw > 180) {
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 800424c:	f7fc fc44 	bl	8000ad8 <__aeabi_fsub>
 8004250:	60a0      	str	r0, [r4, #8]
 8004252:	e007      	b.n	8004264 <calculateAngles+0x11c>
    } else if (AHRSIMU->Yaw > 180) {
 8004254:	4970      	ldr	r1, [pc, #448]	; (8004418 <calculateAngles+0x2d0>)
 8004256:	4628      	mov	r0, r5
 8004258:	f7fc ff04 	bl	8001064 <__aeabi_fcmpgt>
 800425c:	2800      	cmp	r0, #0
 800425e:	f040 80c4 	bne.w	80043ea <calculateAngles+0x2a2>
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 8004262:	60a5      	str	r5, [r4, #8]
//  AHRSIMU->Roll  = (0.96 * Pre_IMU[ROLL]  ) + ((0.04) * AHRSIMU->Roll);
//	AHRSIMU->Pitch = (0.96 * Pre_IMU[PITCH] ) + ((0.04) * AHRSIMU->Pitch);
//	AHRSIMU->Yaw   = (0.96 * Pre_IMU[YAW]   ) + ((0.04) * AHRSIMU->Yaw);
		

  AHRSIMU->Roll  = (0.95 * (Pre_IMU[ROLL]  + (imu.gyroRaw[ROLL] * 0.004)))  + (0.05 * AHRSIMU->Roll);
 8004264:	4d6d      	ldr	r5, [pc, #436]	; (800441c <calculateAngles+0x2d4>)
 8004266:	4e6e      	ldr	r6, [pc, #440]	; (8004420 <calculateAngles+0x2d8>)
 8004268:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800426a:	f7fc f8dd 	bl	8000428 <__aeabi_f2d>
 800426e:	a362      	add	r3, pc, #392	; (adr r3, 80043f8 <calculateAngles+0x2b0>)
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f7fc f92c 	bl	80004d0 <__aeabi_dmul>
 8004278:	4680      	mov	r8, r0
 800427a:	6830      	ldr	r0, [r6, #0]
 800427c:	4689      	mov	r9, r1
 800427e:	f7fc f8d3 	bl	8000428 <__aeabi_f2d>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4640      	mov	r0, r8
 8004288:	4649      	mov	r1, r9
 800428a:	f7fb ff6f 	bl	800016c <__adddf3>
 800428e:	a35c      	add	r3, pc, #368	; (adr r3, 8004400 <calculateAngles+0x2b8>)
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f7fc f91c 	bl	80004d0 <__aeabi_dmul>
 8004298:	4680      	mov	r8, r0
 800429a:	4650      	mov	r0, sl
 800429c:	4689      	mov	r9, r1
 800429e:	f7fc f8c3 	bl	8000428 <__aeabi_f2d>
 80042a2:	a359      	add	r3, pc, #356	; (adr r3, 8004408 <calculateAngles+0x2c0>)
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	f7fc f912 	bl	80004d0 <__aeabi_dmul>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4640      	mov	r0, r8
 80042b2:	4649      	mov	r1, r9
 80042b4:	f7fb ff5a 	bl	800016c <__adddf3>
 80042b8:	f7fc fbba 	bl	8000a30 <__aeabi_d2f>
 80042bc:	4682      	mov	sl, r0
 80042be:	6020      	str	r0, [r4, #0]
  AHRSIMU->Pitch = (0.95 * (Pre_IMU[PITCH] + (imu.gyroRaw[PITCH] * 0.004))) + (0.05 * AHRSIMU->Pitch);
 80042c0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80042c2:	f7fc f8b1 	bl	8000428 <__aeabi_f2d>
 80042c6:	a34c      	add	r3, pc, #304	; (adr r3, 80043f8 <calculateAngles+0x2b0>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f7fc f900 	bl	80004d0 <__aeabi_dmul>
 80042d0:	4680      	mov	r8, r0
 80042d2:	6870      	ldr	r0, [r6, #4]
 80042d4:	4689      	mov	r9, r1
 80042d6:	f7fc f8a7 	bl	8000428 <__aeabi_f2d>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4640      	mov	r0, r8
 80042e0:	4649      	mov	r1, r9
 80042e2:	f7fb ff43 	bl	800016c <__adddf3>
 80042e6:	a346      	add	r3, pc, #280	; (adr r3, 8004400 <calculateAngles+0x2b8>)
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	f7fc f8f0 	bl	80004d0 <__aeabi_dmul>
 80042f0:	4680      	mov	r8, r0
 80042f2:	4638      	mov	r0, r7
 80042f4:	4689      	mov	r9, r1
 80042f6:	f7fc f897 	bl	8000428 <__aeabi_f2d>
 80042fa:	a343      	add	r3, pc, #268	; (adr r3, 8004408 <calculateAngles+0x2c0>)
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f7fc f8e6 	bl	80004d0 <__aeabi_dmul>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4640      	mov	r0, r8
 800430a:	4649      	mov	r1, r9
 800430c:	f7fb ff2e 	bl	800016c <__adddf3>
 8004310:	f7fc fb8e 	bl	8000a30 <__aeabi_d2f>
 8004314:	4683      	mov	fp, r0
 8004316:	6060      	str	r0, [r4, #4]
  AHRSIMU->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRSIMU->Yaw);
 8004318:	68b0      	ldr	r0, [r6, #8]
 800431a:	f7fc f885 	bl	8000428 <__aeabi_f2d>
 800431e:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 8004320:	4680      	mov	r8, r0
 8004322:	4638      	mov	r0, r7
 8004324:	4689      	mov	r9, r1
 8004326:	f7fc f87f 	bl	8000428 <__aeabi_f2d>
 800432a:	a333      	add	r3, pc, #204	; (adr r3, 80043f8 <calculateAngles+0x2b0>)
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f7fc f8ce 	bl	80004d0 <__aeabi_dmul>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4640      	mov	r0, r8
 800433a:	4649      	mov	r1, r9
 800433c:	f7fb ff16 	bl	800016c <__adddf3>
 8004340:	a32f      	add	r3, pc, #188	; (adr r3, 8004400 <calculateAngles+0x2b8>)
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f7fc f8c3 	bl	80004d0 <__aeabi_dmul>
 800434a:	4680      	mov	r8, r0
 800434c:	68a0      	ldr	r0, [r4, #8]
 800434e:	4689      	mov	r9, r1
 8004350:	f7fc f86a 	bl	8000428 <__aeabi_f2d>
 8004354:	a32c      	add	r3, pc, #176	; (adr r3, 8004408 <calculateAngles+0x2c0>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	f7fc f8b9 	bl	80004d0 <__aeabi_dmul>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4640      	mov	r0, r8
 8004364:	4649      	mov	r1, r9
 8004366:	f7fb ff01 	bl	800016c <__adddf3>
 800436a:	f7fc fb61 	bl	8000a30 <__aeabi_d2f>
 800436e:	60a0      	str	r0, [r4, #8]

  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 8004370:	4c2c      	ldr	r4, [pc, #176]	; (8004424 <calculateAngles+0x2dc>)
  AHRSIMU->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRSIMU->Yaw);
 8004372:	4680      	mov	r8, r0
  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 8004374:	6820      	ldr	r0, [r4, #0]
 8004376:	f7fc f857 	bl	8000428 <__aeabi_f2d>
 800437a:	a321      	add	r3, pc, #132	; (adr r3, 8004400 <calculateAngles+0x2b8>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fc f8a6 	bl	80004d0 <__aeabi_dmul>
 8004384:	e9cd 0100 	strd	r0, r1, [sp]
 8004388:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 800438c:	f7fc f84c 	bl	8000428 <__aeabi_f2d>
 8004390:	a31d      	add	r3, pc, #116	; (adr r3, 8004408 <calculateAngles+0x2c0>)
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f7fc f89b 	bl	80004d0 <__aeabi_dmul>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043a2:	f7fb fee3 	bl	800016c <__adddf3>
 80043a6:	f7fc fb43 	bl	8000a30 <__aeabi_d2f>
		
		imu.Roll = AHRSIMU->Roll + 0.0f;
 80043aa:	2100      	movs	r1, #0
  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 80043ac:	4607      	mov	r7, r0
 80043ae:	f8c5 0084 	str.w	r0, [r5, #132]	; 0x84
		imu.Roll = AHRSIMU->Roll + 0.0f;
 80043b2:	4650      	mov	r0, sl
 80043b4:	f7fc fb92 	bl	8000adc <__addsf3>
		imu.Pitch = AHRSIMU->Pitch + 0.0f;
 80043b8:	2100      	movs	r1, #0
		imu.Roll = AHRSIMU->Roll + 0.0f;
 80043ba:	4681      	mov	r9, r0
 80043bc:	67a8      	str	r0, [r5, #120]	; 0x78
		imu.Pitch = AHRSIMU->Pitch + 0.0f;
 80043be:	4658      	mov	r0, fp
 80043c0:	f7fc fb8c 	bl	8000adc <__addsf3>
		imu.Yaw = AHRSIMU->Yaw;
 80043c4:	f8c5 8080 	str.w	r8, [r5, #128]	; 0x80
		imu.Pitch = AHRSIMU->Pitch + 0.0f;
 80043c8:	67e8      	str	r0, [r5, #124]	; 0x7c
		
		imu.AHRS[ROLL] = AHRSIMU->Roll + 0.0f;
 80043ca:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
		imu.AHRS[PITCH] = AHRSIMU->Pitch + 0.0f;
 80043ce:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
		imu.AHRS[YAW] = AHRSIMU->Yaw;
 80043d2:	f8c5 8090 	str.w	r8, [r5, #144]	; 0x90
		
	Pre_IMU[ROLL]  = AHRSIMU->Roll;
 80043d6:	f8c6 a000 	str.w	sl, [r6]
	Pre_IMU[PITCH] = AHRSIMU->Pitch;
 80043da:	f8c6 b004 	str.w	fp, [r6, #4]
	Pre_IMU[YAW]   = AHRSIMU->Yaw;
 80043de:	f8c6 8008 	str.w	r8, [r6, #8]
	Pre_gyro = imu.gyroYaw;
 80043e2:	6027      	str	r7, [r4, #0]
	}
 80043e4:	b003      	add	sp, #12
 80043e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 80043ea:	4629      	mov	r1, r5
 80043ec:	480a      	ldr	r0, [pc, #40]	; (8004418 <calculateAngles+0x2d0>)
 80043ee:	f7fc fb73 	bl	8000ad8 <__aeabi_fsub>
 80043f2:	4601      	mov	r1, r0
 80043f4:	4807      	ldr	r0, [pc, #28]	; (8004414 <calculateAngles+0x2cc>)
 80043f6:	e729      	b.n	800424c <calculateAngles+0x104>
 80043f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80043fc:	3f70624d 	.word	0x3f70624d
 8004400:	66666666 	.word	0x66666666
 8004404:	3fee6666 	.word	0x3fee6666
 8004408:	9999999a 	.word	0x9999999a
 800440c:	3fa99999 	.word	0x3fa99999
 8004410:	42652ee0 	.word	0x42652ee0
 8004414:	c3340000 	.word	0xc3340000
 8004418:	43340000 	.word	0x43340000
 800441c:	20000cf8 	.word	0x20000cf8
 8004420:	2000049c 	.word	0x2000049c
 8004424:	200004a8 	.word	0x200004a8

08004428 <TM_AHRSIMU_Init>:

void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRSIMU, float sampleRate, float beta, float inclination) {
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4604      	mov	r4, r0
    AHRSIMU->_beta = beta;
 800442c:	6102      	str	r2, [r0, #16]
    AHRSIMU->_sampleRate = 1 / sampleRate;
 800442e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRSIMU, float sampleRate, float beta, float inclination) {
 8004432:	461d      	mov	r5, r3
    AHRSIMU->_sampleRate = 1 / sampleRate;
 8004434:	f7fc fd0e 	bl	8000e54 <__aeabi_fdiv>
    AHRSIMU->Inclination = inclination;

    AHRSIMU->_q0 = 1.0f;
 8004438:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800443c:	6163      	str	r3, [r4, #20]
    AHRSIMU->_q1 = 0.0f;
 800443e:	2300      	movs	r3, #0
    AHRSIMU->_sampleRate = 1 / sampleRate;
 8004440:	6260      	str	r0, [r4, #36]	; 0x24
    AHRSIMU->Inclination = inclination;
 8004442:	60e5      	str	r5, [r4, #12]
    AHRSIMU->_q1 = 0.0f;
 8004444:	61a3      	str	r3, [r4, #24]
    AHRSIMU->_q2 = 0.0f;
 8004446:	61e3      	str	r3, [r4, #28]
    AHRSIMU->_q3 = 0.0f;
 8004448:	6223      	str	r3, [r4, #32]
 800444a:	bd38      	pop	{r3, r4, r5, pc}

0800444c <TM_AHRSIMU_UpdateIMU>:

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 800444c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004450:	4683      	mov	fp, r0
 8004452:	b093      	sub	sp, #76	; 0x4c
 8004454:	4608      	mov	r0, r1
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	
		// Convert gyroscope degrees/sec to radians/sec
	  gx = AHRSIMU_DEG2RAD(gx);
 8004456:	4952      	ldr	r1, [pc, #328]	; (80045a0 <TM_AHRSIMU_UpdateIMU+0x154>)
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8004458:	4615      	mov	r5, r2
 800445a:	461c      	mov	r4, r3
	  gx = AHRSIMU_DEG2RAD(gx);
 800445c:	f7fc fc46 	bl	8000cec <__aeabi_fmul>
	  gy = AHRSIMU_DEG2RAD(gy);
 8004460:	494f      	ldr	r1, [pc, #316]	; (80045a0 <TM_AHRSIMU_UpdateIMU+0x154>)
	  gx = AHRSIMU_DEG2RAD(gx);
 8004462:	4681      	mov	r9, r0
	  gy = AHRSIMU_DEG2RAD(gy);
 8004464:	4628      	mov	r0, r5
 8004466:	f7fc fc41 	bl	8000cec <__aeabi_fmul>
	  gz = AHRSIMU_DEG2RAD(gz);
 800446a:	494d      	ldr	r1, [pc, #308]	; (80045a0 <TM_AHRSIMU_UpdateIMU+0x154>)
	  gy = AHRSIMU_DEG2RAD(gy);
 800446c:	4682      	mov	sl, r0
	  gz = AHRSIMU_DEG2RAD(gz);
 800446e:	4620      	mov	r0, r4
 8004470:	f7fc fc3c 	bl	8000cec <__aeabi_fmul>

    /* Rate of change of quaternion from gyroscope */
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8004474:	f8db 5018 	ldr.w	r5, [fp, #24]
 8004478:	f8db 3020 	ldr.w	r3, [fp, #32]
	  gz = AHRSIMU_DEG2RAD(gz);
 800447c:	9002      	str	r0, [sp, #8]
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 800447e:	4649      	mov	r1, r9
 8004480:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	f7fc fc31 	bl	8000cec <__aeabi_fmul>
 800448a:	f8db 401c 	ldr.w	r4, [fp, #28]
 800448e:	9001      	str	r0, [sp, #4]
 8004490:	4621      	mov	r1, r4
 8004492:	4650      	mov	r0, sl
 8004494:	f7fc fc2a 	bl	8000cec <__aeabi_fmul>
 8004498:	9b01      	ldr	r3, [sp, #4]
 800449a:	4601      	mov	r1, r0
 800449c:	4618      	mov	r0, r3
 800449e:	f7fc fb1b 	bl	8000ad8 <__aeabi_fsub>
 80044a2:	9900      	ldr	r1, [sp, #0]
 80044a4:	9001      	str	r0, [sp, #4]
 80044a6:	9802      	ldr	r0, [sp, #8]
 80044a8:	f7fc fc20 	bl	8000cec <__aeabi_fmul>
 80044ac:	9b01      	ldr	r3, [sp, #4]
 80044ae:	4601      	mov	r1, r0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fc fb11 	bl	8000ad8 <__aeabi_fsub>
 80044b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80044ba:	f7fc fc17 	bl	8000cec <__aeabi_fmul>
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 80044be:	f8db 3014 	ldr.w	r3, [fp, #20]
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 80044c2:	9004      	str	r0, [sp, #16]
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 80044c4:	4619      	mov	r1, r3
 80044c6:	4648      	mov	r0, r9
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	f7fc fc0f 	bl	8000cec <__aeabi_fmul>
 80044ce:	4621      	mov	r1, r4
 80044d0:	9003      	str	r0, [sp, #12]
 80044d2:	9802      	ldr	r0, [sp, #8]
 80044d4:	f7fc fc0a 	bl	8000cec <__aeabi_fmul>
 80044d8:	9b03      	ldr	r3, [sp, #12]
 80044da:	4601      	mov	r1, r0
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fc fafd 	bl	8000adc <__addsf3>
 80044e2:	9900      	ldr	r1, [sp, #0]
 80044e4:	9003      	str	r0, [sp, #12]
 80044e6:	4650      	mov	r0, sl
 80044e8:	f7fc fc00 	bl	8000cec <__aeabi_fmul>
 80044ec:	9b03      	ldr	r3, [sp, #12]
 80044ee:	4601      	mov	r1, r0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fc faf1 	bl	8000ad8 <__aeabi_fsub>
 80044f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80044fa:	f7fc fbf7 	bl	8000cec <__aeabi_fmul>
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 80044fe:	9901      	ldr	r1, [sp, #4]
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8004500:	9005      	str	r0, [sp, #20]
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8004502:	4650      	mov	r0, sl
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8004504:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004508:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800450a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 800450c:	f7fc fbee 	bl	8000cec <__aeabi_fmul>
 8004510:	4629      	mov	r1, r5
 8004512:	9003      	str	r0, [sp, #12]
 8004514:	9802      	ldr	r0, [sp, #8]
 8004516:	f7fc fbe9 	bl	8000cec <__aeabi_fmul>
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	4601      	mov	r1, r0
 800451e:	4618      	mov	r0, r3
 8004520:	f7fc fada 	bl	8000ad8 <__aeabi_fsub>
 8004524:	9900      	ldr	r1, [sp, #0]
 8004526:	9003      	str	r0, [sp, #12]
 8004528:	4648      	mov	r0, r9
 800452a:	f7fc fbdf 	bl	8000cec <__aeabi_fmul>
 800452e:	9b03      	ldr	r3, [sp, #12]
 8004530:	4601      	mov	r1, r0
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc fad2 	bl	8000adc <__addsf3>
 8004538:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800453c:	f7fc fbd6 	bl	8000cec <__aeabi_fmul>
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8004540:	9901      	ldr	r1, [sp, #4]
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8004542:	9006      	str	r0, [sp, #24]
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8004544:	9802      	ldr	r0, [sp, #8]
 8004546:	f7fc fbd1 	bl	8000cec <__aeabi_fmul>
 800454a:	4629      	mov	r1, r5
 800454c:	9002      	str	r0, [sp, #8]
 800454e:	4650      	mov	r0, sl
 8004550:	f7fc fbcc 	bl	8000cec <__aeabi_fmul>
 8004554:	9b02      	ldr	r3, [sp, #8]
 8004556:	4601      	mov	r1, r0
 8004558:	4618      	mov	r0, r3
 800455a:	f7fc fabf 	bl	8000adc <__addsf3>
 800455e:	4621      	mov	r1, r4
 8004560:	4682      	mov	sl, r0
 8004562:	4648      	mov	r0, r9
 8004564:	f7fc fbc2 	bl	8000cec <__aeabi_fmul>
 8004568:	4601      	mov	r1, r0
 800456a:	4650      	mov	r0, sl
 800456c:	f7fc fab4 	bl	8000ad8 <__aeabi_fsub>
 8004570:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004574:	f7fc fbba 	bl	8000cec <__aeabi_fmul>

    /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8004578:	2100      	movs	r1, #0
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 800457a:	9007      	str	r0, [sp, #28]
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 800457c:	4640      	mov	r0, r8
 800457e:	f7fc fd49 	bl	8001014 <__aeabi_fcmpeq>
 8004582:	b178      	cbz	r0, 80045a4 <TM_AHRSIMU_UpdateIMU+0x158>
 8004584:	2100      	movs	r1, #0
 8004586:	4638      	mov	r0, r7
 8004588:	f7fc fd44 	bl	8001014 <__aeabi_fcmpeq>
 800458c:	b150      	cbz	r0, 80045a4 <TM_AHRSIMU_UpdateIMU+0x158>
 800458e:	2100      	movs	r1, #0
 8004590:	4630      	mov	r0, r6
 8004592:	f7fc fd3f 	bl	8001014 <__aeabi_fcmpeq>
 8004596:	2800      	cmp	r0, #0
 8004598:	f040 8198 	bne.w	80048cc <TM_AHRSIMU_UpdateIMU+0x480>
 800459c:	e002      	b.n	80045a4 <TM_AHRSIMU_UpdateIMU+0x158>
 800459e:	bf00      	nop
 80045a0:	3c8efa35 	.word	0x3c8efa35

        /* Normalise accelerometer measurement */
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80045a4:	4641      	mov	r1, r8
 80045a6:	4640      	mov	r0, r8
 80045a8:	f7fc fba0 	bl	8000cec <__aeabi_fmul>
 80045ac:	4639      	mov	r1, r7
 80045ae:	4681      	mov	r9, r0
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7fc fb9b 	bl	8000cec <__aeabi_fmul>
 80045b6:	4601      	mov	r1, r0
 80045b8:	4648      	mov	r0, r9
 80045ba:	f7fc fa8f 	bl	8000adc <__addsf3>
 80045be:	4631      	mov	r1, r6
 80045c0:	4681      	mov	r9, r0
 80045c2:	4630      	mov	r0, r6
 80045c4:	f7fc fb92 	bl	8000cec <__aeabi_fmul>
 80045c8:	4601      	mov	r1, r0
 80045ca:	4648      	mov	r0, r9
 80045cc:	f7fc fa86 	bl	8000adc <__addsf3>
 80045d0:	f7ff fd8c 	bl	80040ec <invSqrt>
 80045d4:	4681      	mov	r9, r0
        ax *= recipNorm;
 80045d6:	4601      	mov	r1, r0
 80045d8:	4640      	mov	r0, r8
 80045da:	f7fc fb87 	bl	8000cec <__aeabi_fmul>
        ay *= recipNorm;
 80045de:	4649      	mov	r1, r9
        ax *= recipNorm;
 80045e0:	9002      	str	r0, [sp, #8]
        ay *= recipNorm;
 80045e2:	4638      	mov	r0, r7
 80045e4:	f7fc fb82 	bl	8000cec <__aeabi_fmul>
        az *= recipNorm;
 80045e8:	4649      	mov	r1, r9
        ay *= recipNorm;
 80045ea:	9003      	str	r0, [sp, #12]
        az *= recipNorm;
 80045ec:	4630      	mov	r0, r6
 80045ee:	f7fc fb7d 	bl	8000cec <__aeabi_fmul>

        /* Auxiliary variables to avoid repeated arithmetic */
        _2q0 = 2.0f * AHRSIMU->_q0;
 80045f2:	9901      	ldr	r1, [sp, #4]
        az *= recipNorm;
 80045f4:	9009      	str	r0, [sp, #36]	; 0x24
        _2q0 = 2.0f * AHRSIMU->_q0;
 80045f6:	4608      	mov	r0, r1
 80045f8:	f7fc fa70 	bl	8000adc <__addsf3>
        _2q1 = 2.0f * AHRSIMU->_q1;
 80045fc:	4629      	mov	r1, r5
        _2q0 = 2.0f * AHRSIMU->_q0;
 80045fe:	900a      	str	r0, [sp, #40]	; 0x28
        _2q1 = 2.0f * AHRSIMU->_q1;
 8004600:	4628      	mov	r0, r5
 8004602:	f7fc fa6b 	bl	8000adc <__addsf3>
        _2q2 = 2.0f * AHRSIMU->_q2;
 8004606:	4621      	mov	r1, r4
        _2q1 = 2.0f * AHRSIMU->_q1;
 8004608:	900b      	str	r0, [sp, #44]	; 0x2c
        _2q2 = 2.0f * AHRSIMU->_q2;
 800460a:	4620      	mov	r0, r4
 800460c:	f7fc fa66 	bl	8000adc <__addsf3>
        _2q3 = 2.0f * AHRSIMU->_q3;
 8004610:	9900      	ldr	r1, [sp, #0]
        _2q2 = 2.0f * AHRSIMU->_q2;
 8004612:	900c      	str	r0, [sp, #48]	; 0x30
        _2q3 = 2.0f * AHRSIMU->_q3;
 8004614:	4608      	mov	r0, r1
 8004616:	f7fc fa61 	bl	8000adc <__addsf3>
        _4q0 = 4.0f * AHRSIMU->_q0;
 800461a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _2q3 = 2.0f * AHRSIMU->_q3;
 800461e:	900d      	str	r0, [sp, #52]	; 0x34
        _4q0 = 4.0f * AHRSIMU->_q0;
 8004620:	9801      	ldr	r0, [sp, #4]
 8004622:	f7fc fb63 	bl	8000cec <__aeabi_fmul>
        _4q1 = 4.0f * AHRSIMU->_q1;
 8004626:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _4q0 = 4.0f * AHRSIMU->_q0;
 800462a:	4680      	mov	r8, r0
        _4q1 = 4.0f * AHRSIMU->_q1;
 800462c:	4628      	mov	r0, r5
 800462e:	f7fc fb5d 	bl	8000cec <__aeabi_fmul>
        _4q2 = 4.0f * AHRSIMU->_q2;
 8004632:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _4q1 = 4.0f * AHRSIMU->_q1;
 8004636:	4607      	mov	r7, r0
        _4q2 = 4.0f * AHRSIMU->_q2;
 8004638:	4620      	mov	r0, r4
 800463a:	f7fc fb57 	bl	8000cec <__aeabi_fmul>
        _8q1 = 8.0f * AHRSIMU->_q1;
 800463e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
        _4q2 = 4.0f * AHRSIMU->_q2;
 8004642:	9008      	str	r0, [sp, #32]
        _8q1 = 8.0f * AHRSIMU->_q1;
 8004644:	4628      	mov	r0, r5
 8004646:	f7fc fb51 	bl	8000cec <__aeabi_fmul>
        _8q2 = 8.0f * AHRSIMU->_q2;
 800464a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
        _8q1 = 8.0f * AHRSIMU->_q1;
 800464e:	4681      	mov	r9, r0
        _8q2 = 8.0f * AHRSIMU->_q2;
 8004650:	4620      	mov	r0, r4
 8004652:	f7fc fb4b 	bl	8000cec <__aeabi_fmul>
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 8004656:	4629      	mov	r1, r5
        _8q2 = 8.0f * AHRSIMU->_q2;
 8004658:	900e      	str	r0, [sp, #56]	; 0x38
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 800465a:	4628      	mov	r0, r5
 800465c:	f7fc fb46 	bl	8000cec <__aeabi_fmul>
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 8004660:	4621      	mov	r1, r4
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 8004662:	4606      	mov	r6, r0
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 8004664:	4620      	mov	r0, r4
 8004666:	f7fc fb41 	bl	8000cec <__aeabi_fmul>
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 800466a:	9900      	ldr	r1, [sp, #0]
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 800466c:	4682      	mov	sl, r0
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 800466e:	4608      	mov	r0, r1
 8004670:	f7fc fb3c 	bl	8000cec <__aeabi_fmul>

        /* Gradient decent algorithm corrective step */
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004674:	4651      	mov	r1, sl
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 8004676:	900f      	str	r0, [sp, #60]	; 0x3c
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004678:	4640      	mov	r0, r8
 800467a:	f7fc fb37 	bl	8000cec <__aeabi_fmul>
 800467e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004680:	9010      	str	r0, [sp, #64]	; 0x40
 8004682:	9802      	ldr	r0, [sp, #8]
 8004684:	f7fc fb32 	bl	8000cec <__aeabi_fmul>
 8004688:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800468a:	4601      	mov	r1, r0
 800468c:	4618      	mov	r0, r3
 800468e:	f7fc fa25 	bl	8000adc <__addsf3>
 8004692:	4631      	mov	r1, r6
 8004694:	9010      	str	r0, [sp, #64]	; 0x40
 8004696:	4640      	mov	r0, r8
 8004698:	f7fc fb28 	bl	8000cec <__aeabi_fmul>
 800469c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800469e:	4601      	mov	r1, r0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fc fa1b 	bl	8000adc <__addsf3>
 80046a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046a8:	4680      	mov	r8, r0
 80046aa:	9803      	ldr	r0, [sp, #12]
 80046ac:	f7fc fb1e 	bl	8000cec <__aeabi_fmul>
 80046b0:	4601      	mov	r1, r0
 80046b2:	4640      	mov	r0, r8
 80046b4:	f7fc fa10 	bl	8000ad8 <__aeabi_fsub>
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
 80046b8:	9901      	ldr	r1, [sp, #4]
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80046ba:	9011      	str	r0, [sp, #68]	; 0x44
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
 80046bc:	4608      	mov	r0, r1
 80046be:	f7fc fb15 	bl	8000cec <__aeabi_fmul>
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80046c2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80046c6:	f7fc fb11 	bl	8000cec <__aeabi_fmul>
 80046ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80046cc:	4680      	mov	r8, r0
 80046ce:	4638      	mov	r0, r7
 80046d0:	f7fc fb0c 	bl	8000cec <__aeabi_fmul>
 80046d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046d6:	9010      	str	r0, [sp, #64]	; 0x40
 80046d8:	9802      	ldr	r0, [sp, #8]
 80046da:	f7fc fb07 	bl	8000cec <__aeabi_fmul>
 80046de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046e0:	4601      	mov	r1, r0
 80046e2:	4610      	mov	r0, r2
 80046e4:	f7fc f9f8 	bl	8000ad8 <__aeabi_fsub>
 80046e8:	4641      	mov	r1, r8
 80046ea:	9010      	str	r0, [sp, #64]	; 0x40
 80046ec:	4628      	mov	r0, r5
 80046ee:	f7fc fafd 	bl	8000cec <__aeabi_fmul>
 80046f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046f4:	4601      	mov	r1, r0
 80046f6:	4610      	mov	r0, r2
 80046f8:	f7fc f9f0 	bl	8000adc <__addsf3>
 80046fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80046fe:	9010      	str	r0, [sp, #64]	; 0x40
 8004700:	9803      	ldr	r0, [sp, #12]
 8004702:	f7fc faf3 	bl	8000cec <__aeabi_fmul>
 8004706:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004708:	4601      	mov	r1, r0
 800470a:	4610      	mov	r0, r2
 800470c:	f7fc f9e4 	bl	8000ad8 <__aeabi_fsub>
 8004710:	4639      	mov	r1, r7
 8004712:	f7fc f9e1 	bl	8000ad8 <__aeabi_fsub>
 8004716:	4631      	mov	r1, r6
 8004718:	9010      	str	r0, [sp, #64]	; 0x40
 800471a:	4648      	mov	r0, r9
 800471c:	f7fc fae6 	bl	8000cec <__aeabi_fmul>
 8004720:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004722:	4601      	mov	r1, r0
 8004724:	4610      	mov	r0, r2
 8004726:	f7fc f9d9 	bl	8000adc <__addsf3>
 800472a:	4651      	mov	r1, sl
 800472c:	9010      	str	r0, [sp, #64]	; 0x40
 800472e:	4648      	mov	r0, r9
 8004730:	f7fc fadc 	bl	8000cec <__aeabi_fmul>
 8004734:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004736:	4601      	mov	r1, r0
 8004738:	4610      	mov	r0, r2
 800473a:	f7fc f9cf 	bl	8000adc <__addsf3>
 800473e:	4639      	mov	r1, r7
 8004740:	4681      	mov	r9, r0
 8004742:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004744:	f7fc fad2 	bl	8000cec <__aeabi_fmul>
 8004748:	4601      	mov	r1, r0
 800474a:	4648      	mov	r0, r9
 800474c:	f7fc f9c6 	bl	8000adc <__addsf3>
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004750:	4641      	mov	r1, r8
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004752:	4681      	mov	r9, r0
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004754:	4620      	mov	r0, r4
 8004756:	f7fc fac9 	bl	8000cec <__aeabi_fmul>
 800475a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800475c:	4607      	mov	r7, r0
 800475e:	9802      	ldr	r0, [sp, #8]
 8004760:	f7fc fac4 	bl	8000cec <__aeabi_fmul>
 8004764:	4601      	mov	r1, r0
 8004766:	4638      	mov	r0, r7
 8004768:	f7fc f9b8 	bl	8000adc <__addsf3>
 800476c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800476e:	4607      	mov	r7, r0
 8004770:	9808      	ldr	r0, [sp, #32]
 8004772:	f7fc fabb 	bl	8000cec <__aeabi_fmul>
 8004776:	4601      	mov	r1, r0
 8004778:	4638      	mov	r0, r7
 800477a:	f7fc f9af 	bl	8000adc <__addsf3>
 800477e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004780:	4607      	mov	r7, r0
 8004782:	9803      	ldr	r0, [sp, #12]
 8004784:	f7fc fab2 	bl	8000cec <__aeabi_fmul>
 8004788:	4601      	mov	r1, r0
 800478a:	4638      	mov	r0, r7
 800478c:	f7fc f9a4 	bl	8000ad8 <__aeabi_fsub>
 8004790:	9908      	ldr	r1, [sp, #32]
 8004792:	f7fc f9a1 	bl	8000ad8 <__aeabi_fsub>
 8004796:	4631      	mov	r1, r6
 8004798:	4607      	mov	r7, r0
 800479a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800479c:	f7fc faa6 	bl	8000cec <__aeabi_fmul>
 80047a0:	4601      	mov	r1, r0
 80047a2:	4638      	mov	r0, r7
 80047a4:	f7fc f99a 	bl	8000adc <__addsf3>
 80047a8:	4651      	mov	r1, sl
 80047aa:	4607      	mov	r7, r0
 80047ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80047ae:	f7fc fa9d 	bl	8000cec <__aeabi_fmul>
 80047b2:	4601      	mov	r1, r0
 80047b4:	4638      	mov	r0, r7
 80047b6:	f7fc f991 	bl	8000adc <__addsf3>
 80047ba:	9908      	ldr	r1, [sp, #32]
 80047bc:	4607      	mov	r7, r0
 80047be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047c0:	f7fc fa94 	bl	8000cec <__aeabi_fmul>
 80047c4:	4601      	mov	r1, r0
 80047c6:	4638      	mov	r0, r7
 80047c8:	f7fc f988 	bl	8000adc <__addsf3>
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 80047cc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80047d0:	4680      	mov	r8, r0
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 80047d2:	4630      	mov	r0, r6
 80047d4:	f7fc fa8a 	bl	8000cec <__aeabi_fmul>
 80047d8:	9900      	ldr	r1, [sp, #0]
 80047da:	f7fc fa87 	bl	8000cec <__aeabi_fmul>
 80047de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047e0:	4606      	mov	r6, r0
 80047e2:	9802      	ldr	r0, [sp, #8]
 80047e4:	f7fc fa82 	bl	8000cec <__aeabi_fmul>
 80047e8:	4601      	mov	r1, r0
 80047ea:	4630      	mov	r0, r6
 80047ec:	f7fc f974 	bl	8000ad8 <__aeabi_fsub>
 80047f0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80047f4:	4606      	mov	r6, r0
 80047f6:	4650      	mov	r0, sl
 80047f8:	f7fc fa78 	bl	8000cec <__aeabi_fmul>
 80047fc:	9900      	ldr	r1, [sp, #0]
 80047fe:	f7fc fa75 	bl	8000cec <__aeabi_fmul>
 8004802:	4601      	mov	r1, r0
 8004804:	4630      	mov	r0, r6
 8004806:	f7fc f969 	bl	8000adc <__addsf3>
 800480a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800480c:	4606      	mov	r6, r0
 800480e:	9803      	ldr	r0, [sp, #12]
 8004810:	f7fc fa6c 	bl	8000cec <__aeabi_fmul>
 8004814:	4601      	mov	r1, r0
 8004816:	4630      	mov	r0, r6
 8004818:	f7fc f95e 	bl	8000ad8 <__aeabi_fsub>

        /* Normalise step magnitude */
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 800481c:	9b11      	ldr	r3, [sp, #68]	; 0x44
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 800481e:	4682      	mov	sl, r0
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004820:	4619      	mov	r1, r3
 8004822:	4618      	mov	r0, r3
 8004824:	9302      	str	r3, [sp, #8]
 8004826:	f7fc fa61 	bl	8000cec <__aeabi_fmul>
 800482a:	4649      	mov	r1, r9
 800482c:	4606      	mov	r6, r0
 800482e:	4648      	mov	r0, r9
 8004830:	f7fc fa5c 	bl	8000cec <__aeabi_fmul>
 8004834:	4601      	mov	r1, r0
 8004836:	4630      	mov	r0, r6
 8004838:	f7fc f950 	bl	8000adc <__addsf3>
 800483c:	4641      	mov	r1, r8
 800483e:	4606      	mov	r6, r0
 8004840:	4640      	mov	r0, r8
 8004842:	f7fc fa53 	bl	8000cec <__aeabi_fmul>
 8004846:	4601      	mov	r1, r0
 8004848:	4630      	mov	r0, r6
 800484a:	f7fc f947 	bl	8000adc <__addsf3>
 800484e:	4651      	mov	r1, sl
 8004850:	4606      	mov	r6, r0
 8004852:	4650      	mov	r0, sl
 8004854:	f7fc fa4a 	bl	8000cec <__aeabi_fmul>
 8004858:	4601      	mov	r1, r0
 800485a:	4630      	mov	r0, r6
 800485c:	f7fc f93e 	bl	8000adc <__addsf3>
 8004860:	f7ff fc44 	bl	80040ec <invSqrt>
        s0 *= recipNorm;
 8004864:	9b02      	ldr	r3, [sp, #8]
        s1 *= recipNorm;
        s2 *= recipNorm;
        s3 *= recipNorm;

        /* Apply feedback step */
        qDot1 -= AHRSIMU->_beta * s0;
 8004866:	f8db 6010 	ldr.w	r6, [fp, #16]
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 800486a:	4607      	mov	r7, r0
        s0 *= recipNorm;
 800486c:	4601      	mov	r1, r0
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fa3c 	bl	8000cec <__aeabi_fmul>
        qDot1 -= AHRSIMU->_beta * s0;
 8004874:	4631      	mov	r1, r6
 8004876:	f7fc fa39 	bl	8000cec <__aeabi_fmul>
 800487a:	4601      	mov	r1, r0
 800487c:	9804      	ldr	r0, [sp, #16]
 800487e:	f7fc f92b 	bl	8000ad8 <__aeabi_fsub>
        s1 *= recipNorm;
 8004882:	4639      	mov	r1, r7
        qDot1 -= AHRSIMU->_beta * s0;
 8004884:	9004      	str	r0, [sp, #16]
        s1 *= recipNorm;
 8004886:	4648      	mov	r0, r9
 8004888:	f7fc fa30 	bl	8000cec <__aeabi_fmul>
        qDot2 -= AHRSIMU->_beta * s1;
 800488c:	4631      	mov	r1, r6
 800488e:	f7fc fa2d 	bl	8000cec <__aeabi_fmul>
 8004892:	4601      	mov	r1, r0
 8004894:	9805      	ldr	r0, [sp, #20]
 8004896:	f7fc f91f 	bl	8000ad8 <__aeabi_fsub>
        s2 *= recipNorm;
 800489a:	4639      	mov	r1, r7
        qDot2 -= AHRSIMU->_beta * s1;
 800489c:	9005      	str	r0, [sp, #20]
        s2 *= recipNorm;
 800489e:	4640      	mov	r0, r8
 80048a0:	f7fc fa24 	bl	8000cec <__aeabi_fmul>
        qDot3 -= AHRSIMU->_beta * s2;
 80048a4:	4631      	mov	r1, r6
 80048a6:	f7fc fa21 	bl	8000cec <__aeabi_fmul>
 80048aa:	4601      	mov	r1, r0
 80048ac:	9806      	ldr	r0, [sp, #24]
 80048ae:	f7fc f913 	bl	8000ad8 <__aeabi_fsub>
        s3 *= recipNorm;
 80048b2:	4639      	mov	r1, r7
        qDot3 -= AHRSIMU->_beta * s2;
 80048b4:	9006      	str	r0, [sp, #24]
        s3 *= recipNorm;
 80048b6:	4650      	mov	r0, sl
 80048b8:	f7fc fa18 	bl	8000cec <__aeabi_fmul>
        qDot4 -= AHRSIMU->_beta * s3;
 80048bc:	4631      	mov	r1, r6
 80048be:	f7fc fa15 	bl	8000cec <__aeabi_fmul>
 80048c2:	4601      	mov	r1, r0
 80048c4:	9807      	ldr	r0, [sp, #28]
 80048c6:	f7fc f907 	bl	8000ad8 <__aeabi_fsub>
 80048ca:	9007      	str	r0, [sp, #28]
    }

    /* Integrate rate of change of quaternion to yield quaternion */
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 80048cc:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 80048d0:	9804      	ldr	r0, [sp, #16]
 80048d2:	4631      	mov	r1, r6
 80048d4:	f7fc fa0a 	bl	8000cec <__aeabi_fmul>
 80048d8:	9901      	ldr	r1, [sp, #4]
 80048da:	f7fc f8ff 	bl	8000adc <__addsf3>
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 80048de:	4631      	mov	r1, r6
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 80048e0:	4607      	mov	r7, r0
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 80048e2:	9805      	ldr	r0, [sp, #20]
 80048e4:	f7fc fa02 	bl	8000cec <__aeabi_fmul>
 80048e8:	4629      	mov	r1, r5
 80048ea:	f7fc f8f7 	bl	8000adc <__addsf3>
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 80048ee:	4631      	mov	r1, r6
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 80048f0:	4680      	mov	r8, r0
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 80048f2:	9806      	ldr	r0, [sp, #24]
 80048f4:	f7fc f9fa 	bl	8000cec <__aeabi_fmul>
 80048f8:	4621      	mov	r1, r4
 80048fa:	f7fc f8ef 	bl	8000adc <__addsf3>
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 80048fe:	4631      	mov	r1, r6
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8004900:	4681      	mov	r9, r0
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8004902:	9807      	ldr	r0, [sp, #28]
 8004904:	f7fc f9f2 	bl	8000cec <__aeabi_fmul>
 8004908:	9900      	ldr	r1, [sp, #0]
 800490a:	f7fc f8e7 	bl	8000adc <__addsf3>

    /* Normalise quaternion */
    recipNorm = invSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 800490e:	4639      	mov	r1, r7
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8004910:	4605      	mov	r5, r0
    recipNorm = invSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8004912:	4638      	mov	r0, r7
 8004914:	f7fc f9ea 	bl	8000cec <__aeabi_fmul>
 8004918:	4641      	mov	r1, r8
 800491a:	4604      	mov	r4, r0
 800491c:	4640      	mov	r0, r8
 800491e:	f7fc f9e5 	bl	8000cec <__aeabi_fmul>
 8004922:	4601      	mov	r1, r0
 8004924:	4620      	mov	r0, r4
 8004926:	f7fc f8d9 	bl	8000adc <__addsf3>
 800492a:	4649      	mov	r1, r9
 800492c:	4604      	mov	r4, r0
 800492e:	4648      	mov	r0, r9
 8004930:	f7fc f9dc 	bl	8000cec <__aeabi_fmul>
 8004934:	4601      	mov	r1, r0
 8004936:	4620      	mov	r0, r4
 8004938:	f7fc f8d0 	bl	8000adc <__addsf3>
 800493c:	4629      	mov	r1, r5
 800493e:	4604      	mov	r4, r0
 8004940:	4628      	mov	r0, r5
 8004942:	f7fc f9d3 	bl	8000cec <__aeabi_fmul>
 8004946:	4601      	mov	r1, r0
 8004948:	4620      	mov	r0, r4
 800494a:	f7fc f8c7 	bl	8000adc <__addsf3>
 800494e:	f7ff fbcd 	bl	80040ec <invSqrt>
 8004952:	4604      	mov	r4, r0
    AHRSIMU->_q0 *= recipNorm;
 8004954:	4601      	mov	r1, r0
 8004956:	4638      	mov	r0, r7
 8004958:	f7fc f9c8 	bl	8000cec <__aeabi_fmul>
    AHRSIMU->_q1 *= recipNorm;
 800495c:	4621      	mov	r1, r4
    AHRSIMU->_q0 *= recipNorm;
 800495e:	f8cb 0014 	str.w	r0, [fp, #20]
    AHRSIMU->_q1 *= recipNorm;
 8004962:	4640      	mov	r0, r8
 8004964:	f7fc f9c2 	bl	8000cec <__aeabi_fmul>
    AHRSIMU->_q2 *= recipNorm;
 8004968:	4621      	mov	r1, r4
    AHRSIMU->_q1 *= recipNorm;
 800496a:	f8cb 0018 	str.w	r0, [fp, #24]
    AHRSIMU->_q2 *= recipNorm;
 800496e:	4648      	mov	r0, r9
 8004970:	f7fc f9bc 	bl	8000cec <__aeabi_fmul>
    AHRSIMU->_q3 *= recipNorm;
 8004974:	4621      	mov	r1, r4
    AHRSIMU->_q2 *= recipNorm;
 8004976:	f8cb 001c 	str.w	r0, [fp, #28]
    AHRSIMU->_q3 *= recipNorm;
 800497a:	4628      	mov	r0, r5
 800497c:	f7fc f9b6 	bl	8000cec <__aeabi_fmul>
 8004980:	f8cb 0020 	str.w	r0, [fp, #32]

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
 8004984:	4658      	mov	r0, fp
}
 8004986:	b013      	add	sp, #76	; 0x4c
 8004988:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    calculateAngles(AHRSIMU);
 800498c:	f7ff bbdc 	b.w	8004148 <calculateAngles>

08004990 <computeIMU>:
            imu.AHRS[ROLL]  *= 180.0f / AHRSIMU_PI;

        }

void computeIMU(void)
{
 8004990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
//  uint8_t DATA[0];
//  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_STATUS, 1, DATA, 1);
//  if(DATA[0] & 0x01){
	Gyro_getADC();
 8004992:	f000 fe53 	bl	800563c <Gyro_getADC>
  ACC_getADC();
 8004996:	f000 fedd 	bl	8005754 <ACC_getADC>
  Mag_getADC();                                               //Read the raw acc and gyro data from the MPU-6050
 800499a:	f000 ff2b 	bl	80057f4 <Mag_getADC>
	Temp_getADC();
 800499e:	f000 ffbf 	bl	8005920 <Temp_getADC>
		#endif
	
#ifdef IMU_AHRS
    /* Call update function */
    /* This function must be called periodically in inteervals set by sample rate on initialization process */
	TM_AHRSIMU_UpdateIMU(&AHRSIMU, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW]);
 80049a2:	4908      	ldr	r1, [pc, #32]	; (80049c4 <computeIMU+0x34>)
 80049a4:	4808      	ldr	r0, [pc, #32]	; (80049c8 <computeIMU+0x38>)
 80049a6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80049a8:	9302      	str	r3, [sp, #8]
 80049aa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80049b4:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80049b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80049b8:	f7ff fd48 	bl	800444c <TM_AHRSIMU_UpdateIMU>
	 // MadgwickQuaternionUpdate(imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.gyroRaw[ROLL]*AHRSIMU_PI/180.0f, imu.gyroRaw[PITCH]*AHRSIMU_PI/180.0f, imu.gyroRaw[YAW]*AHRSIMU_PI/180.0f,  imu.magRaw[PITCH], imu.magRaw[ROLL], imu.magRaw[YAW]);
	//TM_AHRSIMU_UpdateAHRS(&AHRSIMU, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.magRaw[PITCH], imu.magRaw[ROLL], imu.magRaw[YAW]);
	
  //TM_AHRSIMU_UpdateAHRS(&AHRSIMU, AHRSIMU_DEG2RAD(imu.gyroRaw[ROLL]), AHRSIMU_DEG2RAD(imu.gyroRaw[PITCH]), AHRSIMU_DEG2RAD(imu.gyroRaw[YAW]), imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.magRaw[PITCH], imu.magRaw[ROLL], imu.magRaw[YAW]);
	#endif
}
 80049bc:	b005      	add	sp, #20
 80049be:	f85d fb04 	ldr.w	pc, [sp], #4
 80049c2:	bf00      	nop
 80049c4:	20000cf8 	.word	0x20000cf8
 80049c8:	20000838 	.word	0x20000838

080049cc <error_signal>:
uint32_t flight_mode_timer;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the error LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void error_signal(void) {
 80049cc:	b538      	push	{r3, r4, r5, lr}
  if (Error.error >= 100) {RGB_R_ON;}                                                         //When the error is 100 the LED is always on.
 80049ce:	4c1b      	ldr	r4, [pc, #108]	; (8004a3c <error_signal+0x70>)
 80049d0:	7823      	ldrb	r3, [r4, #0]
 80049d2:	2b63      	cmp	r3, #99	; 0x63
 80049d4:	d907      	bls.n	80049e6 <error_signal+0x1a>
      RGB_R_OFF;                                                                        //Turn the LED off.
      Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
    }
  }
}
 80049d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (Error.error >= 100) {RGB_R_ON;}                                                         //When the error is 100 the LED is always on.
 80049da:	2200      	movs	r2, #0
 80049dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049e0:	4817      	ldr	r0, [pc, #92]	; (8004a40 <error_signal+0x74>)
 80049e2:	f7fd b8e7 	b.w	8001bb4 <HAL_GPIO_WritePin>
  else if (Error.error_timer < millis()) {                                                       //If the error_timer value is smaller that the millis() function.
 80049e6:	6865      	ldr	r5, [r4, #4]
 80049e8:	f002 fd88 	bl	80074fc <millis>
 80049ec:	4285      	cmp	r5, r0
 80049ee:	d218      	bcs.n	8004a22 <error_signal+0x56>
    Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 80049f0:	f002 fd84 	bl	80074fc <millis>
    if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 80049f4:	7823      	ldrb	r3, [r4, #0]
    Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 80049f6:	30fa      	adds	r0, #250	; 0xfa
 80049f8:	6060      	str	r0, [r4, #4]
    if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 80049fa:	b12b      	cbz	r3, 8004a08 <error_signal+0x3c>
 80049fc:	7861      	ldrb	r1, [r4, #1]
 80049fe:	1cda      	adds	r2, r3, #3
 8004a00:	4291      	cmp	r1, r2
 8004a02:	bfc4      	itt	gt
 8004a04:	2200      	movgt	r2, #0
 8004a06:	7062      	strbgt	r2, [r4, #1]
    if (Error.error_counter < Error.error && Error.error_led == 0 && Error.error > 0) {                            //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8004a08:	7862      	ldrb	r2, [r4, #1]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d20a      	bcs.n	8004a24 <error_signal+0x58>
 8004a0e:	78a2      	ldrb	r2, [r4, #2]
 8004a10:	b942      	cbnz	r2, 8004a24 <error_signal+0x58>
 8004a12:	b13b      	cbz	r3, 8004a24 <error_signal+0x58>
      RGB_R_ON;                                                                       //Turn the LED on.
 8004a14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a18:	4809      	ldr	r0, [pc, #36]	; (8004a40 <error_signal+0x74>)
 8004a1a:	f7fd f8cb 	bl	8001bb4 <HAL_GPIO_WritePin>
      Error.error_led = 1;                                                                       //Set the LED flag to indicate that the LED is on.
 8004a1e:	2301      	movs	r3, #1
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 8004a20:	70a3      	strb	r3, [r4, #2]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
      RGB_R_OFF;                                                                        //Turn the LED off.
 8004a24:	2201      	movs	r2, #1
 8004a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a2a:	4805      	ldr	r0, [pc, #20]	; (8004a40 <error_signal+0x74>)
 8004a2c:	f7fd f8c2 	bl	8001bb4 <HAL_GPIO_WritePin>
      Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
 8004a30:	7863      	ldrb	r3, [r4, #1]
 8004a32:	3301      	adds	r3, #1
 8004a34:	7063      	strb	r3, [r4, #1]
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 8004a36:	2300      	movs	r3, #0
 8004a38:	e7f2      	b.n	8004a20 <error_signal+0x54>
 8004a3a:	bf00      	nop
 8004a3c:	200010a0 	.word	0x200010a0
 8004a40:	40010c00 	.word	0x40010c00

08004a44 <flight_mode_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the flight mode LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void flight_mode_signal(void) {
 8004a44:	b538      	push	{r3, r4, r5, lr}
  if (flight_mode_timer < millis()) {                                                      //If the error_timer value is smaller that the millis() function.
 8004a46:	f002 fd59 	bl	80074fc <millis>
 8004a4a:	4c17      	ldr	r4, [pc, #92]	; (8004aa8 <flight_mode_signal+0x64>)
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	4298      	cmp	r0, r3
 8004a50:	d91d      	bls.n	8004a8e <flight_mode_signal+0x4a>
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004a52:	f002 fd53 	bl	80074fc <millis>
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <flight_mode_signal+0x68>)
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004a58:	30fa      	adds	r0, #250	; 0xfa
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004a5a:	785b      	ldrb	r3, [r3, #1]
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004a5c:	6020      	str	r0, [r4, #0]
 8004a5e:	4c14      	ldr	r4, [pc, #80]	; (8004ab0 <flight_mode_signal+0x6c>)
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004a60:	b13b      	cbz	r3, 8004a72 <flight_mode_signal+0x2e>
 8004a62:	4a14      	ldr	r2, [pc, #80]	; (8004ab4 <flight_mode_signal+0x70>)
 8004a64:	7821      	ldrb	r1, [r4, #0]
 8004a66:	7812      	ldrb	r2, [r2, #0]
 8004a68:	3203      	adds	r2, #3
 8004a6a:	4291      	cmp	r1, r2
 8004a6c:	bfc4      	itt	gt
 8004a6e:	2200      	movgt	r2, #0
 8004a70:	7022      	strbgt	r2, [r4, #0]
    if (flight_mode_counter < f.ARMED && flight_mode_led == 0 && f.ARMED > 0) {    //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8004a72:	7822      	ldrb	r2, [r4, #0]
 8004a74:	4d10      	ldr	r5, [pc, #64]	; (8004ab8 <flight_mode_signal+0x74>)
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d20a      	bcs.n	8004a90 <flight_mode_signal+0x4c>
 8004a7a:	782a      	ldrb	r2, [r5, #0]
 8004a7c:	b942      	cbnz	r2, 8004a90 <flight_mode_signal+0x4c>
 8004a7e:	b13b      	cbz	r3, 8004a90 <flight_mode_signal+0x4c>
      RGB_R_ON;                                                                     //Turn the LED on.
 8004a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a84:	480d      	ldr	r0, [pc, #52]	; (8004abc <flight_mode_signal+0x78>)
 8004a86:	f7fd f895 	bl	8001bb4 <HAL_GPIO_WritePin>
      flight_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8004a8a:	2301      	movs	r3, #1
    }
    else {                                                                                 //If the error flash sequence isn't finisched (error_counter < error) and the LED is on.
      RGB_R_OFF;                                                                      //Turn the LED off.
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8004a8c:	702b      	strb	r3, [r5, #0]
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
      RGB_R_OFF;                                                                      //Turn the LED off.
 8004a90:	2201      	movs	r2, #1
 8004a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a96:	4809      	ldr	r0, [pc, #36]	; (8004abc <flight_mode_signal+0x78>)
 8004a98:	f7fd f88c 	bl	8001bb4 <HAL_GPIO_WritePin>
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8004a9c:	7823      	ldrb	r3, [r4, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	7023      	strb	r3, [r4, #0]
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e7f2      	b.n	8004a8c <flight_mode_signal+0x48>
 8004aa6:	bf00      	nop
 8004aa8:	20000864 	.word	0x20000864
 8004aac:	20000a7c 	.word	0x20000a7c
 8004ab0:	20000861 	.word	0x20000861
 8004ab4:	20000868 	.word	0x20000868
 8004ab8:	20000860 	.word	0x20000860
 8004abc:	40010c00 	.word	0x40010c00

08004ac0 <mixerInit>:
    { 4, 0, mixerQuadP },          // MULTITYPE_QUADP
    { 4, 0, mixerQuadX },          // MULTITYPE_QUADX
};

void mixerInit(void)
{
 8004ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac2:	2400      	movs	r4, #0
	int i;
    for (i = 0; i < 4; i++)
	  {
			#ifdef QUAD_X
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 8004ac4:	4f05      	ldr	r7, [pc, #20]	; (8004adc <mixerInit+0x1c>)
 8004ac6:	4e06      	ldr	r6, [pc, #24]	; (8004ae0 <mixerInit+0x20>)
 8004ac8:	193d      	adds	r5, r7, r4
 8004aca:	1933      	adds	r3, r6, r4
 8004acc:	3410      	adds	r4, #16
    for (i = 0; i < 4; i++)
 8004ace:	2c40      	cmp	r4, #64	; 0x40
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 8004ad0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ad2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for (i = 0; i < 4; i++)
 8004ad6:	d1f7      	bne.n	8004ac8 <mixerInit+0x8>
			#endif
			#ifdef QUAD_P
      currentMixer[i] = mixers[QuadP].motor[i];   //0 = QuadP, 1 = QuadX
			#endif
		}
}
 8004ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ada:	bf00      	nop
 8004adc:	200004ac 	.word	0x200004ac
 8004ae0:	0800ae30 	.word	0x0800ae30

08004ae4 <mixTable>:

void mixTable(void)
{
	uint8_t i = 0;
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 8004ae4:	4b35      	ldr	r3, [pc, #212]	; (8004bbc <mixTable+0xd8>)
{
 8004ae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 8004aea:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
{
 8004aee:	b085      	sub	sp, #20
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 8004af0:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
 8004af4:	bfc4      	itt	gt
 8004af6:	f44f 62e1 	movgt.w	r2, #1800	; 0x708
 8004afa:	f8a3 2056 	strhgt.w	r2, [r3, #86]	; 0x56
			for (i = 0; i < 4; i++){
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004afe:	f9b3 9056 	ldrsh.w	r9, [r3, #86]	; 0x56
				
				if(motor[i]<0) motor[i] = 0;
 8004b02:	f04f 0a00 	mov.w	sl, #0
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004b06:	4648      	mov	r0, r9
 8004b08:	f7fc f89c 	bl	8000c44 <__aeabi_i2f>
				if(motor[i] > 2000) motor[i] = 2000;
	
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004b0c:	4b2c      	ldr	r3, [pc, #176]	; (8004bc0 <mixTable+0xdc>)
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004b0e:	4683      	mov	fp, r0
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004b10:	785b      	ldrb	r3, [r3, #1]
				{
					motor[i] = 0;
					pid.output1[i] = 0;
 8004b12:	2700      	movs	r7, #0
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004b14:	9301      	str	r3, [sp, #4]
				if(motor[i] > 2000) motor[i] = 2000;
 8004b16:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004b1a:	4d2a      	ldr	r5, [pc, #168]	; (8004bc4 <mixTable+0xe0>)
 8004b1c:	4c2a      	ldr	r4, [pc, #168]	; (8004bc8 <mixTable+0xe4>)
 8004b1e:	4e2b      	ldr	r6, [pc, #172]	; (8004bcc <mixTable+0xe8>)
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004b20:	f1a5 087c 	sub.w	r8, r5, #124	; 0x7c
 8004b24:	6861      	ldr	r1, [r4, #4]
 8004b26:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
 8004b2a:	9303      	str	r3, [sp, #12]
 8004b2c:	f7fc f8de 	bl	8000cec <__aeabi_fmul>
 8004b30:	6821      	ldr	r1, [r4, #0]
 8004b32:	9002      	str	r0, [sp, #8]
 8004b34:	4658      	mov	r0, fp
 8004b36:	f7fc f8d9 	bl	8000cec <__aeabi_fmul>
 8004b3a:	9a02      	ldr	r2, [sp, #8]
 8004b3c:	4601      	mov	r1, r0
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f7fb ffcc 	bl	8000adc <__addsf3>
 8004b44:	68a1      	ldr	r1, [r4, #8]
 8004b46:	9002      	str	r0, [sp, #8]
 8004b48:	f8d8 00ec 	ldr.w	r0, [r8, #236]	; 0xec
 8004b4c:	f7fc f8ce 	bl	8000cec <__aeabi_fmul>
 8004b50:	9a02      	ldr	r2, [sp, #8]
 8004b52:	4601      	mov	r1, r0
 8004b54:	4610      	mov	r0, r2
 8004b56:	f7fb ffc1 	bl	8000adc <__addsf3>
 8004b5a:	68e1      	ldr	r1, [r4, #12]
 8004b5c:	9002      	str	r0, [sp, #8]
 8004b5e:	f8d8 00f0 	ldr.w	r0, [r8, #240]	; 0xf0
 8004b62:	f7fc f8c3 	bl	8000cec <__aeabi_fmul>
 8004b66:	9a02      	ldr	r2, [sp, #8]
 8004b68:	4601      	mov	r1, r0
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f7fb ffb6 	bl	8000adc <__addsf3>
 8004b70:	f7fc fa98 	bl	80010a4 <__aeabi_f2iz>
 8004b74:	b200      	sxth	r0, r0
				if(motor[i]<0) motor[i] = 0;
 8004b76:	2800      	cmp	r0, #0
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004b78:	bfac      	ite	ge
 8004b7a:	8030      	strhge	r0, [r6, #0]
				if(motor[i]<0) motor[i] = 0;
 8004b7c:	f8a6 a000 	strhlt.w	sl, [r6]
				if(motor[i] > 2000) motor[i] = 2000;
 8004b80:	f9b6 2000 	ldrsh.w	r2, [r6]
				if(motor[i]<0) motor[i] = 0;
 8004b84:	9b03      	ldr	r3, [sp, #12]
				if(motor[i] > 2000) motor[i] = 2000;
 8004b86:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8004b8a:	bfc8      	it	gt
 8004b8c:	8033      	strhgt	r3, [r6, #0]
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004b8e:	f1b9 0fc7 	cmp.w	r9, #199	; 0xc7
 8004b92:	dd01      	ble.n	8004b98 <mixTable+0xb4>
 8004b94:	9a01      	ldr	r2, [sp, #4]
 8004b96:	b932      	cbnz	r2, 8004ba6 <mixTable+0xc2>
					motor[i] = 0;
 8004b98:	f8a6 a000 	strh.w	sl, [r6]
					pid.output1[i] = 0;
 8004b9c:	662f      	str	r7, [r5, #96]	; 0x60
					pid.output2[i] = 0;
 8004b9e:	66ef      	str	r7, [r5, #108]	; 0x6c
					pid.Iterm[i] = 0;
 8004ba0:	602f      	str	r7, [r5, #0]
					pid.Iterm1[i] = 0;
 8004ba2:	60ef      	str	r7, [r5, #12]
					pid.Iterm2[i] = 0;
 8004ba4:	61af      	str	r7, [r5, #24]
			for (i = 0; i < 4; i++){
 8004ba6:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <mixTable+0xec>)
 8004ba8:	3410      	adds	r4, #16
 8004baa:	42a2      	cmp	r2, r4
 8004bac:	f106 0602 	add.w	r6, r6, #2
 8004bb0:	f105 0504 	add.w	r5, r5, #4
 8004bb4:	d1b6      	bne.n	8004b24 <mixTable+0x40>
				}
			}
}
 8004bb6:	b005      	add	sp, #20
 8004bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bbc:	20000af4 	.word	0x20000af4
 8004bc0:	20000a7c 	.word	0x20000a7c
 8004bc4:	200008f0 	.word	0x200008f0
 8004bc8:	200004ac 	.word	0x200004ac
 8004bcc:	2000086a 	.word	0x2000086a
 8004bd0:	200004ec 	.word	0x200004ec

08004bd4 <PIDControlInit>:

	pid->ki[ROLL]  = 5.0f;
	pid->ki[PITCH] = pid->ki[ROLL];
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5

	pid->kd[ROLL]  = 4.0f;
 8004bd4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004bd8:	64c2      	str	r2, [r0, #76]	; 0x4c
	pid->kd[PITCH] = pid->kd[ROLL];
 8004bda:	6502      	str	r2, [r0, #80]	; 0x50
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
///////////////////////////////////	
	pid->kp1[ROLL] = 1.0f;
 8004bdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	pid->ts = 0.004f;
 8004be0:	4b31      	ldr	r3, [pc, #196]	; (8004ca8 <PIDControlInit+0xd4>)
	pid->kp1[ROLL] = 1.0f;
 8004be2:	6102      	str	r2, [r0, #16]
	pid->ts = 0.004f;
 8004be4:	6003      	str	r3, [r0, #0]
	pid->kp[ROLL]  = 15.0f;
 8004be6:	4b31      	ldr	r3, [pc, #196]	; (8004cac <PIDControlInit+0xd8>)
	pid->kp1[PITCH] = 1.0f;
 8004be8:	6142      	str	r2, [r0, #20]
	pid->kp[ROLL]  = 15.0f;
 8004bea:	6043      	str	r3, [r0, #4]
	pid->kp[PITCH] = pid->kp[ROLL];
 8004bec:	6083      	str	r3, [r0, #8]
	pid->ki[ROLL]  = 5.0f;
 8004bee:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <PIDControlInit+0xdc>)
	pid->kp1[YAW] = 1.0f;
 8004bf0:	6182      	str	r2, [r0, #24]
	pid->ki[ROLL]  = 5.0f;
 8004bf2:	6283      	str	r3, [r0, #40]	; 0x28
	pid->ki[PITCH] = pid->ki[ROLL];
 8004bf4:	62c3      	str	r3, [r0, #44]	; 0x2c
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5
 8004bf6:	6303      	str	r3, [r0, #48]	; 0x30

	pid->ki1[ROLL] = 2.0f;
	pid->ki1[PITCH] = 2.0f;
	pid->ki1[YAW] = 2.0f;
/////////////////////////////////
	pid->kp2[ROLL] = 5.0f;
 8004bf8:	61c3      	str	r3, [r0, #28]
	pid->kp2[PITCH] = 5.0f;
 8004bfa:	6203      	str	r3, [r0, #32]
	pid->kp2[YAW] = 5.0f;
 8004bfc:	6243      	str	r3, [r0, #36]	; 0x24

	pid->kd2[ROLL] = 3.0f;
	pid->kd2[PITCH] = 3.0f;
	pid->kd2[YAW] = 3.0f;
////////////////////////////////////////
  pid->i1_limit[ROLL] = 5.0f;
 8004bfe:	6643      	str	r3, [r0, #100]	; 0x64
	pid->i1_limit[PITCH] = 5.0f;
 8004c00:	6683      	str	r3, [r0, #104]	; 0x68
	pid->i1_limit[YAW] = 10.0f;

  pid->i2_limit[ROLL] = 500.0f;
 8004c02:	4b2c      	ldr	r3, [pc, #176]	; (8004cb4 <PIDControlInit+0xe0>)
	pid->ki1[ROLL] = 2.0f;
 8004c04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  pid->i2_limit[ROLL] = 500.0f;
 8004c08:	6703      	str	r3, [r0, #112]	; 0x70
	pid->i2_limit[PITCH] = 500.0f;
 8004c0a:	6743      	str	r3, [r0, #116]	; 0x74
	pid->i2_limit[YAW] = 500.0f;
 8004c0c:	6783      	str	r3, [r0, #120]	; 0x78

	pid->Iterm[ROLL] = 0.0f ;
 8004c0e:	2300      	movs	r3, #0
{
 8004c10:	b510      	push	{r4, lr}
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 8004c12:	4929      	ldr	r1, [pc, #164]	; (8004cb8 <PIDControlInit+0xe4>)
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 8004c14:	4c29      	ldr	r4, [pc, #164]	; (8004cbc <PIDControlInit+0xe8>)
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 8004c16:	6541      	str	r1, [r0, #84]	; 0x54
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 8004c18:	60c4      	str	r4, [r0, #12]
	pid->ki1[ROLL] = 2.0f;
 8004c1a:	6342      	str	r2, [r0, #52]	; 0x34
	pid->ki1[PITCH] = 2.0f;
 8004c1c:	6382      	str	r2, [r0, #56]	; 0x38
	pid->ki1[YAW] = 2.0f;
 8004c1e:	63c2      	str	r2, [r0, #60]	; 0x3c
  pid->ki2[ROLL] = 2.0f;
 8004c20:	6402      	str	r2, [r0, #64]	; 0x40
	pid->ki2[PITCH] = 2.0f;
 8004c22:	6442      	str	r2, [r0, #68]	; 0x44
	pid->ki2[YAW] = 2.0f;
 8004c24:	6482      	str	r2, [r0, #72]	; 0x48
	pid->kd2[ROLL] = 3.0f;
 8004c26:	6581      	str	r1, [r0, #88]	; 0x58
	pid->kd2[PITCH] = 3.0f;
 8004c28:	65c1      	str	r1, [r0, #92]	; 0x5c
	pid->kd2[YAW] = 3.0f;
 8004c2a:	6601      	str	r1, [r0, #96]	; 0x60
	pid->i1_limit[YAW] = 10.0f;
 8004c2c:	66c4      	str	r4, [r0, #108]	; 0x6c
	pid->Iterm[ROLL] = 0.0f ;
 8004c2e:	67c3      	str	r3, [r0, #124]	; 0x7c
	pid->Iterm[PITCH] = 0.0f;
 8004c30:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	pid->Iterm[YAW] = 0.0f;
 8004c34:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

	pid->Iterm1[ROLL] = 0.0f ;
 8004c38:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	pid->Iterm1[PITCH] = 0.0f;
 8004c3c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
	pid->Iterm1[YAW] = 0.0f;
 8004c40:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90

	pid->Iterm2[ROLL] = 0.0f ;
 8004c44:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	pid->Iterm2[PITCH] = 0.0f;
 8004c48:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	pid->Iterm2[YAW] = 0.0f;
 8004c4c:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c

	pid->dInput[ROLL] = 0.0f ;
 8004c50:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	pid->dInput[PITCH] = 0.0f;
 8004c54:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	pid->dInput[YAW] = 0.0f;
 8004c58:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8

	pid->error[ROLL] = 0.0f ;
 8004c5c:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
	pid->error[PITCH] = 0.0f;
 8004c60:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	pid->error[YAW] = 0.0f;
 8004c64:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	pid->pre_error[ROLL] = 0.0f ;
 8004c68:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	pid->pre_error[PITCH] = 0.0f;
 8004c6c:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	pid->pre_error[YAW] = 0.0f;
 8004c70:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0

	pid->pre_deriv[ROLL] = 0.0f ;
 8004c74:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	pid->pre_deriv[PITCH] = 0.0f;
 8004c78:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	pid->pre_deriv[YAW] = 0.0f;
 8004c7c:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc

	pid->lastInput[ROLL] = 0.0f ;
 8004c80:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	pid->lastInput[PITCH] = 0.0f;
 8004c84:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	pid->lastInput[YAW] = 0.0f;
 8004c88:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	pid->output1[ROLL] = 0.0f ;
 8004c8c:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	pid->output1[PITCH] = 0.0f;
 8004c90:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
	pid->output1[YAW] = 0.0f;
 8004c94:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

	pid->output2[ROLL] = 0.0f ;
 8004c98:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
	pid->output2[PITCH] = 0.0f;
 8004c9c:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
	pid->output2[YAW] = 0.0f;
 8004ca0:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 8004ca4:	bd10      	pop	{r4, pc}
 8004ca6:	bf00      	nop
 8004ca8:	3b83126f 	.word	0x3b83126f
 8004cac:	41700000 	.word	0x41700000
 8004cb0:	40a00000 	.word	0x40a00000
 8004cb4:	43fa0000 	.word	0x43fa0000
 8004cb8:	40400000 	.word	0x40400000
 8004cbc:	41200000 	.word	0x41200000

08004cc0 <Control>:
}

void Control(void)
{
 8004cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int axis;
	float error, deriv;
	dt_recip = 1/pid.ts;
 8004cc4:	4cba      	ldr	r4, [pc, #744]	; (8004fb0 <Control+0x2f0>)
 8004cc6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004cca:	6826      	ldr	r6, [r4, #0]
		if(pid.output2[axis] < -OUT_MAX) pid.output2[axis] = -OUT_MAX;
		}
		#endif
		
#ifdef PID_NORMAL
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 8004ccc:	f8df b304 	ldr.w	fp, [pc, #772]	; 8004fd4 <Control+0x314>
	dt_recip = 1/pid.ts;
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	f7fc f8bf 	bl	8000e54 <__aeabi_fdiv>
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 8004cd6:	4db7      	ldr	r5, [pc, #732]	; (8004fb4 <Control+0x2f4>)
	dt_recip = 1/pid.ts;
 8004cd8:	4bb7      	ldr	r3, [pc, #732]	; (8004fb8 <Control+0x2f8>)
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 8004cda:	f8db 9078 	ldr.w	r9, [fp, #120]	; 0x78
	dt_recip = 1/pid.ts;
 8004cde:	6018      	str	r0, [r3, #0]
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 8004ce0:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
 8004ce4:	f7fb ffae 	bl	8000c44 <__aeabi_i2f>
 8004ce8:	4649      	mov	r1, r9
 8004cea:	f7fb fef5 	bl	8000ad8 <__aeabi_fsub>
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 8004cee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 8004cf0:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
 8004cf4:	4607      	mov	r7, r0
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 8004cf6:	f7fb fff9 	bl	8000cec <__aeabi_fmul>
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	f7fb fff6 	bl	8000cec <__aeabi_fmul>
 8004d00:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004d02:	f7fb feeb 	bl	8000adc <__addsf3>
	  if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 8004d06:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8004fc0 <Control+0x300>
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 8004d0a:	4682      	mov	sl, r0
	  if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	f7fc f9a9 	bl	8001064 <__aeabi_fcmpgt>
 8004d12:	f8cd b000 	str.w	fp, [sp]
 8004d16:	2800      	cmp	r0, #0
 8004d18:	f000 808d 	beq.w	8004e36 <Control+0x176>
 8004d1c:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
	  pid.dInput[ROLL] = (imu.Roll - pid.lastInput[ROLL])  / pid.ts;
 8004d20:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8004d24:	4648      	mov	r0, r9
 8004d26:	f7fb fed7 	bl	8000ad8 <__aeabi_fsub>
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	f7fc f892 	bl	8000e54 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8004d30:	6861      	ldr	r1, [r4, #4]
	  pid.dInput[ROLL] = (imu.Roll - pid.lastInput[ROLL])  / pid.ts;
 8004d32:	4682      	mov	sl, r0
 8004d34:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f7fb ffd7 	bl	8000cec <__aeabi_fmul>
 8004d3e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004d40:	f7fb fecc 	bl	8000adc <__addsf3>
 8004d44:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004d46:	4607      	mov	r7, r0
 8004d48:	4650      	mov	r0, sl
 8004d4a:	f7fb ffcf 	bl	8000cec <__aeabi_fmul>
 8004d4e:	4601      	mov	r1, r0
 8004d50:	4638      	mov	r0, r7
 8004d52:	f7fb fec1 	bl	8000ad8 <__aeabi_fsub>

	  if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 8004d56:	4f99      	ldr	r7, [pc, #612]	; (8004fbc <Control+0x2fc>)
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8004d58:	4682      	mov	sl, r0
	  if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 8004d5a:	4639      	mov	r1, r7
 8004d5c:	f7fc f982 	bl	8001064 <__aeabi_fcmpgt>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d075      	beq.n	8004e50 <Control+0x190>
 8004d64:	f8c4 70e8 	str.w	r7, [r4, #232]	; 0xe8
	  pid.lastInput[ROLL] = imu.Roll;

/////////////////////////////////////////////////////////////////////////////////////////////////

	  /*Compute all the working error variables*/
	  pid.error[PITCH] = RC.rcCommand[PITCH] - imu.Pitch;
 8004d68:	9b00      	ldr	r3, [sp, #0]
	  pid.lastInput[ROLL] = imu.Roll;
 8004d6a:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	  pid.error[PITCH] = RC.rcCommand[PITCH] - imu.Pitch;
 8004d6e:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8004d72:	f9b5 0052 	ldrsh.w	r0, [r5, #82]	; 0x52
 8004d76:	f7fb ff65 	bl	8000c44 <__aeabi_i2f>
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	f7fb feac 	bl	8000ad8 <__aeabi_fsub>
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 8004d80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	  pid.error[PITCH] = RC.rcCommand[PITCH] - imu.Pitch;
 8004d82:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
 8004d86:	4682      	mov	sl, r0
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 8004d88:	f7fb ffb0 	bl	8000cec <__aeabi_fmul>
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	f7fb ffad 	bl	8000cec <__aeabi_fmul>
 8004d92:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004d96:	f7fb fea1 	bl	8000adc <__addsf3>
	  if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 8004d9a:	4989      	ldr	r1, [pc, #548]	; (8004fc0 <Control+0x300>)
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 8004d9c:	4683      	mov	fp, r0
	  if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 8004d9e:	f7fc f961 	bl	8001064 <__aeabi_fcmpgt>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d061      	beq.n	8004e6a <Control+0x1aa>
 8004da6:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
	  pid.dInput[PITCH] = (imu.Pitch - pid.lastInput[PITCH]) / pid.ts;
 8004daa:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
 8004dae:	4648      	mov	r0, r9
 8004db0:	f7fb fe92 	bl	8000ad8 <__aeabi_fsub>
 8004db4:	4631      	mov	r1, r6
 8004db6:	f7fc f84d 	bl	8000e54 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 8004dba:	68a1      	ldr	r1, [r4, #8]
	  pid.dInput[PITCH] = (imu.Pitch - pid.lastInput[PITCH]) / pid.ts;
 8004dbc:	4683      	mov	fp, r0
 8004dbe:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 8004dc2:	4650      	mov	r0, sl
 8004dc4:	f7fb ff92 	bl	8000cec <__aeabi_fmul>
 8004dc8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004dcc:	f7fb fe86 	bl	8000adc <__addsf3>
 8004dd0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004dd2:	4682      	mov	sl, r0
 8004dd4:	4658      	mov	r0, fp
 8004dd6:	f7fb ff89 	bl	8000cec <__aeabi_fmul>
 8004dda:	4601      	mov	r1, r0
 8004ddc:	4650      	mov	r0, sl
 8004dde:	f7fb fe7b 	bl	8000ad8 <__aeabi_fsub>

	  if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 8004de2:	4976      	ldr	r1, [pc, #472]	; (8004fbc <Control+0x2fc>)
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 8004de4:	4682      	mov	sl, r0
	  if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 8004de6:	f7fc f93d 	bl	8001064 <__aeabi_fcmpgt>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d04b      	beq.n	8004e86 <Control+0x1c6>
 8004dee:	f8c4 70ec 	str.w	r7, [r4, #236]	; 0xec
	  pid.lastInput[PITCH] = imu.Pitch;

//////////////////////////////////////////////////////////////////////////////////////////////////

	  /*Compute all the working error variables*/
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 8004df2:	9b00      	ldr	r3, [sp, #0]
	  pid.lastInput[PITCH] = imu.Pitch;
 8004df4:	f8c4 90d4 	str.w	r9, [r4, #212]	; 0xd4
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 8004df8:	f8d3 9084 	ldr.w	r9, [r3, #132]	; 0x84
 8004dfc:	f9b5 0054 	ldrsh.w	r0, [r5, #84]	; 0x54
 8004e00:	f7fb ff20 	bl	8000c44 <__aeabi_i2f>
 8004e04:	4649      	mov	r1, r9
 8004e06:	f7fb fe67 	bl	8000ad8 <__aeabi_fsub>
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 8004e0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 8004e0c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 8004e10:	4682      	mov	sl, r0
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 8004e12:	f7fb ff6b 	bl	8000cec <__aeabi_fmul>
 8004e16:	4631      	mov	r1, r6
 8004e18:	f7fb ff68 	bl	8000cec <__aeabi_fmul>
 8004e1c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004e20:	f7fb fe5c 	bl	8000adc <__addsf3>
	  if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 8004e24:	4966      	ldr	r1, [pc, #408]	; (8004fc0 <Control+0x300>)
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 8004e26:	4683      	mov	fp, r0
	  if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 8004e28:	f7fc f91c 	bl	8001064 <__aeabi_fcmpgt>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d037      	beq.n	8004ea0 <Control+0x1e0>
	  else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 8004e30:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
 8004e34:	e03e      	b.n	8004eb4 <Control+0x1f4>
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 8004e36:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8004fc4 <Control+0x304>
 8004e3a:	4650      	mov	r0, sl
 8004e3c:	4659      	mov	r1, fp
 8004e3e:	f7fc f8f3 	bl	8001028 <__aeabi_fcmplt>
 8004e42:	b910      	cbnz	r0, 8004e4a <Control+0x18a>
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 8004e44:	f8c4 a07c 	str.w	sl, [r4, #124]	; 0x7c
 8004e48:	e76a      	b.n	8004d20 <Control+0x60>
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 8004e4a:	f8c4 b07c 	str.w	fp, [r4, #124]	; 0x7c
 8004e4e:	e767      	b.n	8004d20 <Control+0x60>
	  else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 8004e50:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8004fd0 <Control+0x310>
 8004e54:	4650      	mov	r0, sl
 8004e56:	4659      	mov	r1, fp
 8004e58:	f7fc f8e6 	bl	8001028 <__aeabi_fcmplt>
 8004e5c:	b910      	cbnz	r0, 8004e64 <Control+0x1a4>
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8004e5e:	f8c4 a0e8 	str.w	sl, [r4, #232]	; 0xe8
 8004e62:	e781      	b.n	8004d68 <Control+0xa8>
	  else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 8004e64:	f8c4 b0e8 	str.w	fp, [r4, #232]	; 0xe8
 8004e68:	e77e      	b.n	8004d68 <Control+0xa8>
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 8004e6a:	4b56      	ldr	r3, [pc, #344]	; (8004fc4 <Control+0x304>)
 8004e6c:	4658      	mov	r0, fp
 8004e6e:	4619      	mov	r1, r3
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	f7fc f8d9 	bl	8001028 <__aeabi_fcmplt>
 8004e76:	9b01      	ldr	r3, [sp, #4]
 8004e78:	b910      	cbnz	r0, 8004e80 <Control+0x1c0>
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 8004e7a:	f8c4 b080 	str.w	fp, [r4, #128]	; 0x80
 8004e7e:	e794      	b.n	8004daa <Control+0xea>
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 8004e80:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004e84:	e791      	b.n	8004daa <Control+0xea>
	  else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 8004e86:	f8df b148 	ldr.w	fp, [pc, #328]	; 8004fd0 <Control+0x310>
 8004e8a:	4650      	mov	r0, sl
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	f7fc f8cb 	bl	8001028 <__aeabi_fcmplt>
 8004e92:	b910      	cbnz	r0, 8004e9a <Control+0x1da>
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 8004e94:	f8c4 a0ec 	str.w	sl, [r4, #236]	; 0xec
 8004e98:	e7ab      	b.n	8004df2 <Control+0x132>
	  else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 8004e9a:	f8c4 b0ec 	str.w	fp, [r4, #236]	; 0xec
 8004e9e:	e7a8      	b.n	8004df2 <Control+0x132>
	  else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 8004ea0:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8004fc4 <Control+0x304>
 8004ea4:	4658      	mov	r0, fp
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	f7fc f8be 	bl	8001028 <__aeabi_fcmplt>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d1bf      	bne.n	8004e30 <Control+0x170>
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 8004eb0:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
	  pid.dInput[YAW] = (imu.gyroYaw - pid.lastInput[YAW]) / pid.ts; //imu.Yaw
 8004eb4:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 8004eb8:	4648      	mov	r0, r9
 8004eba:	f7fb fe0d 	bl	8000ad8 <__aeabi_fsub>
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	f7fb ffc8 	bl	8000e54 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 8004ec4:	68e1      	ldr	r1, [r4, #12]
	  pid.dInput[YAW] = (imu.gyroYaw - pid.lastInput[YAW]) / pid.ts; //imu.Yaw
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 8004ecc:	4650      	mov	r0, sl
 8004ece:	f7fb ff0d 	bl	8000cec <__aeabi_fmul>
 8004ed2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004ed6:	f7fb fe01 	bl	8000adc <__addsf3>
 8004eda:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004edc:	4680      	mov	r8, r0
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f7fb ff04 	bl	8000cec <__aeabi_fmul>
 8004ee4:	4601      	mov	r1, r0
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f7fb fdf6 	bl	8000ad8 <__aeabi_fsub>

	  if(pid.output2[YAW] > OUT_MAX) pid.output2[YAW] = OUT_MAX;
 8004eec:	4933      	ldr	r1, [pc, #204]	; (8004fbc <Control+0x2fc>)
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 8004eee:	4680      	mov	r8, r0
	  if(pid.output2[YAW] > OUT_MAX) pid.output2[YAW] = OUT_MAX;
 8004ef0:	f7fc f8b8 	bl	8001064 <__aeabi_fcmpgt>
 8004ef4:	b350      	cbz	r0, 8004f4c <Control+0x28c>
 8004ef6:	f8c4 70f0 	str.w	r7, [r4, #240]	; 0xf0
	  else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;

	  /*Remember some variables for next time*/
	  pid.lastInput[YAW] = imu.gyroYaw;//imu.Yaw
		#endif
	  if(f.Tuning_MODE == 1){
 8004efa:	4e33      	ldr	r6, [pc, #204]	; (8004fc8 <Control+0x308>)
	  pid.lastInput[YAW] = imu.gyroYaw;//imu.Yaw
 8004efc:	f8c4 90d8 	str.w	r9, [r4, #216]	; 0xd8
	  if(f.Tuning_MODE == 1){
 8004f00:	78b7      	ldrb	r7, [r6, #2]
 8004f02:	2f01      	cmp	r7, #1
 8004f04:	f040 8185 	bne.w	8005212 <Control+0x552>
	    RGB_G_TOGGLE;
 8004f08:	4830      	ldr	r0, [pc, #192]	; (8004fcc <Control+0x30c>)
 8004f0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f0e:	f7fc fe56 	bl	8001bbe <HAL_GPIO_TogglePin>
	    f.Write_MODE = 1;
	    if(RC.rcCommand[ROLL]  >  10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 8004f12:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
	    f.Write_MODE = 1;
 8004f16:	70f7      	strb	r7, [r6, #3]
	    if(RC.rcCommand[ROLL]  >  10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 8004f18:	280a      	cmp	r0, #10
 8004f1a:	dd23      	ble.n	8004f64 <Control+0x2a4>
	    if(RC.rcCommand[ROLL]  < -10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 8004f1c:	f7fb fe92 	bl	8000c44 <__aeabi_i2f>
 8004f20:	f7fb fa82 	bl	8000428 <__aeabi_f2d>
 8004f24:	a320      	add	r3, pc, #128	; (adr r3, 8004fa8 <Control+0x2e8>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f7fb fad1 	bl	80004d0 <__aeabi_dmul>
 8004f2e:	4680      	mov	r8, r0
 8004f30:	6860      	ldr	r0, [r4, #4]
 8004f32:	4689      	mov	r9, r1
 8004f34:	f7fb fa78 	bl	8000428 <__aeabi_f2d>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	4649      	mov	r1, r9
 8004f40:	f7fb f914 	bl	800016c <__adddf3>
 8004f44:	f7fb fd74 	bl	8000a30 <__aeabi_d2f>
 8004f48:	6060      	str	r0, [r4, #4]
 8004f4a:	e00e      	b.n	8004f6a <Control+0x2aa>
	  else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;
 8004f4c:	4e20      	ldr	r6, [pc, #128]	; (8004fd0 <Control+0x310>)
 8004f4e:	4640      	mov	r0, r8
 8004f50:	4631      	mov	r1, r6
 8004f52:	f7fc f869 	bl	8001028 <__aeabi_fcmplt>
 8004f56:	b910      	cbnz	r0, 8004f5e <Control+0x29e>
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 8004f58:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
 8004f5c:	e7cd      	b.n	8004efa <Control+0x23a>
	  else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;
 8004f5e:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
 8004f62:	e7ca      	b.n	8004efa <Control+0x23a>
	    if(RC.rcCommand[ROLL]  < -10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 8004f64:	f110 0f0a 	cmn.w	r0, #10
 8004f68:	dbd8      	blt.n	8004f1c <Control+0x25c>
	    if(RC.rcCommand[PITCH] >  10) pid.ki[ROLL] += (float)RC.rcCommand[PITCH] * 0.0005;
 8004f6a:	f9b5 0052 	ldrsh.w	r0, [r5, #82]	; 0x52
 8004f6e:	280a      	cmp	r0, #10
 8004f70:	dd32      	ble.n	8004fd8 <Control+0x318>
	    if(RC.rcCommand[PITCH] < -10) pid.ki[ROLL] += (float)RC.rcCommand[PITCH] * 0.0005;
 8004f72:	f7fb fe67 	bl	8000c44 <__aeabi_i2f>
 8004f76:	f7fb fa57 	bl	8000428 <__aeabi_f2d>
 8004f7a:	a30b      	add	r3, pc, #44	; (adr r3, 8004fa8 <Control+0x2e8>)
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f7fb faa6 	bl	80004d0 <__aeabi_dmul>
 8004f84:	4680      	mov	r8, r0
 8004f86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004f88:	4689      	mov	r9, r1
 8004f8a:	f7fb fa4d 	bl	8000428 <__aeabi_f2d>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4640      	mov	r0, r8
 8004f94:	4649      	mov	r1, r9
 8004f96:	f7fb f8e9 	bl	800016c <__adddf3>
 8004f9a:	f7fb fd49 	bl	8000a30 <__aeabi_d2f>
 8004f9e:	62a0      	str	r0, [r4, #40]	; 0x28
 8004fa0:	e01d      	b.n	8004fde <Control+0x31e>
 8004fa2:	bf00      	nop
 8004fa4:	f3af 8000 	nop.w
 8004fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004fac:	3f40624d 	.word	0x3f40624d
 8004fb0:	20000874 	.word	0x20000874
 8004fb4:	20000af4 	.word	0x20000af4
 8004fb8:	20000968 	.word	0x20000968
 8004fbc:	44480000 	.word	0x44480000
 8004fc0:	43480000 	.word	0x43480000
 8004fc4:	c3480000 	.word	0xc3480000
 8004fc8:	20000a7c 	.word	0x20000a7c
 8004fcc:	40010c00 	.word	0x40010c00
 8004fd0:	c4480000 	.word	0xc4480000
 8004fd4:	20000cf8 	.word	0x20000cf8
 8004fd8:	f110 0f0a 	cmn.w	r0, #10
 8004fdc:	dbc9      	blt.n	8004f72 <Control+0x2b2>
	    if(RC.rcCommand[YAW]   >  10) pid.kd[ROLL] += (float)RC.rcCommand[YAW]   * 0.00005;
 8004fde:	f9b5 0054 	ldrsh.w	r0, [r5, #84]	; 0x54
 8004fe2:	280a      	cmp	r0, #10
 8004fe4:	dd17      	ble.n	8005016 <Control+0x356>
	    if(RC.rcCommand[YAW]   < -10) pid.kd[ROLL] += (float)RC.rcCommand[YAW]   * 0.00005;
 8004fe6:	f7fb fe2d 	bl	8000c44 <__aeabi_i2f>
 8004fea:	f7fb fa1d 	bl	8000428 <__aeabi_f2d>
 8004fee:	a3c0      	add	r3, pc, #768	; (adr r3, 80052f0 <Control+0x630>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f7fb fa6c 	bl	80004d0 <__aeabi_dmul>
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004ffc:	4689      	mov	r9, r1
 8004ffe:	f7fb fa13 	bl	8000428 <__aeabi_f2d>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4640      	mov	r0, r8
 8005008:	4649      	mov	r1, r9
 800500a:	f7fb f8af 	bl	800016c <__adddf3>
 800500e:	f7fb fd0f 	bl	8000a30 <__aeabi_d2f>
 8005012:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005014:	e002      	b.n	800501c <Control+0x35c>
 8005016:	f110 0f0a 	cmn.w	r0, #10
 800501a:	dbe4      	blt.n	8004fe6 <Control+0x326>

	    pid.kp[PITCH] = pid.kp[ROLL];
 800501c:	6863      	ldr	r3, [r4, #4]
 800501e:	60a3      	str	r3, [r4, #8]
	    pid.ki[PITCH] = pid.ki[ROLL];
 8005020:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005022:	62e3      	str	r3, [r4, #44]	; 0x2c
	    pid.kd[PITCH] = pid.kd[ROLL];
 8005024:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005026:	6523      	str	r3, [r4, #80]	; 0x50
      if(RC.rcCommand[PITCH] >  10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
      if(RC.rcCommand[PITCH] < -10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
      if(RC.rcCommand[YAW]   >  10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
      if(RC.rcCommand[YAW]   < -10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
    }
	  if(f.Tuning_MODE == 0 && f.Write_MODE == 1){
 8005028:	78b5      	ldrb	r5, [r6, #2]
 800502a:	2d00      	cmp	r5, #0
 800502c:	f040 80ee 	bne.w	800520c <Control+0x54c>
 8005030:	78f7      	ldrb	r7, [r6, #3]
 8005032:	2f01      	cmp	r7, #1
 8005034:	f040 80ea 	bne.w	800520c <Control+0x54c>
	    f.Write_MODE = 0;
      RGB_G_OFF;
 8005038:	463a      	mov	r2, r7
 800503a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800503e:	48b0      	ldr	r0, [pc, #704]	; (8005300 <Control+0x640>)
	    f.Write_MODE = 0;
 8005040:	70f5      	strb	r5, [r6, #3]
      RGB_G_OFF;
 8005042:	f7fc fdb7 	bl	8001bb4 <HAL_GPIO_WritePin>
	    RGB_R_OFF;
 8005046:	463a      	mov	r2, r7
 8005048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800504c:	48ac      	ldr	r0, [pc, #688]	; (8005300 <Control+0x640>)
 800504e:	f7fc fdb1 	bl	8001bb4 <HAL_GPIO_WritePin>
	    pid.kp[ROLL] = ROUND(pid.kp[ROLL], 1);
 8005052:	6860      	ldr	r0, [r4, #4]
 8005054:	f7fb f9e8 	bl	8000428 <__aeabi_f2d>
 8005058:	2200      	movs	r2, #0
 800505a:	4baa      	ldr	r3, [pc, #680]	; (8005304 <Control+0x644>)
 800505c:	f7fb fa38 	bl	80004d0 <__aeabi_dmul>
 8005060:	2200      	movs	r2, #0
 8005062:	4ba9      	ldr	r3, [pc, #676]	; (8005308 <Control+0x648>)
 8005064:	f7fb f882 	bl	800016c <__adddf3>
 8005068:	f003 fd2a 	bl	8008ac0 <floor>
 800506c:	2200      	movs	r2, #0
 800506e:	4ba5      	ldr	r3, [pc, #660]	; (8005304 <Control+0x644>)
 8005070:	f7fb fb58 	bl	8000724 <__aeabi_ddiv>
 8005074:	f7fb fcdc 	bl	8000a30 <__aeabi_d2f>
 8005078:	6060      	str	r0, [r4, #4]
	    pid.ki[ROLL] = ROUND(pid.ki[ROLL], 1);
 800507a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800507c:	f7fb f9d4 	bl	8000428 <__aeabi_f2d>
 8005080:	2200      	movs	r2, #0
 8005082:	4ba0      	ldr	r3, [pc, #640]	; (8005304 <Control+0x644>)
 8005084:	f7fb fa24 	bl	80004d0 <__aeabi_dmul>
 8005088:	2200      	movs	r2, #0
 800508a:	4b9f      	ldr	r3, [pc, #636]	; (8005308 <Control+0x648>)
 800508c:	f7fb f86e 	bl	800016c <__adddf3>
 8005090:	f003 fd16 	bl	8008ac0 <floor>
 8005094:	2200      	movs	r2, #0
 8005096:	4b9b      	ldr	r3, [pc, #620]	; (8005304 <Control+0x644>)
 8005098:	f7fb fb44 	bl	8000724 <__aeabi_ddiv>
 800509c:	f7fb fcc8 	bl	8000a30 <__aeabi_d2f>
 80050a0:	62a0      	str	r0, [r4, #40]	; 0x28
	    pid.kd[ROLL] = ROUND(pid.kd[ROLL], 1);
 80050a2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80050a4:	f7fb f9c0 	bl	8000428 <__aeabi_f2d>
 80050a8:	2200      	movs	r2, #0
 80050aa:	4b96      	ldr	r3, [pc, #600]	; (8005304 <Control+0x644>)
 80050ac:	f7fb fa10 	bl	80004d0 <__aeabi_dmul>
 80050b0:	2200      	movs	r2, #0
 80050b2:	4b95      	ldr	r3, [pc, #596]	; (8005308 <Control+0x648>)
 80050b4:	f7fb f85a 	bl	800016c <__adddf3>
 80050b8:	f003 fd02 	bl	8008ac0 <floor>
 80050bc:	2200      	movs	r2, #0
 80050be:	4b91      	ldr	r3, [pc, #580]	; (8005304 <Control+0x644>)
 80050c0:	f7fb fb30 	bl	8000724 <__aeabi_ddiv>
 80050c4:	f7fb fcb4 	bl	8000a30 <__aeabi_d2f>
 80050c8:	64e0      	str	r0, [r4, #76]	; 0x4c
      pid.kp[PITCH] = ROUND(pid.kp[PITCH], 1);
 80050ca:	68a0      	ldr	r0, [r4, #8]
 80050cc:	f7fb f9ac 	bl	8000428 <__aeabi_f2d>
 80050d0:	2200      	movs	r2, #0
 80050d2:	4b8c      	ldr	r3, [pc, #560]	; (8005304 <Control+0x644>)
 80050d4:	f7fb f9fc 	bl	80004d0 <__aeabi_dmul>
 80050d8:	2200      	movs	r2, #0
 80050da:	4b8b      	ldr	r3, [pc, #556]	; (8005308 <Control+0x648>)
 80050dc:	f7fb f846 	bl	800016c <__adddf3>
 80050e0:	f003 fcee 	bl	8008ac0 <floor>
 80050e4:	2200      	movs	r2, #0
 80050e6:	4b87      	ldr	r3, [pc, #540]	; (8005304 <Control+0x644>)
 80050e8:	f7fb fb1c 	bl	8000724 <__aeabi_ddiv>
 80050ec:	f7fb fca0 	bl	8000a30 <__aeabi_d2f>
 80050f0:	60a0      	str	r0, [r4, #8]
      pid.ki[PITCH] = ROUND(pid.ki[PITCH], 1);
 80050f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80050f4:	f7fb f998 	bl	8000428 <__aeabi_f2d>
 80050f8:	2200      	movs	r2, #0
 80050fa:	4b82      	ldr	r3, [pc, #520]	; (8005304 <Control+0x644>)
 80050fc:	f7fb f9e8 	bl	80004d0 <__aeabi_dmul>
 8005100:	2200      	movs	r2, #0
 8005102:	4b81      	ldr	r3, [pc, #516]	; (8005308 <Control+0x648>)
 8005104:	f7fb f832 	bl	800016c <__adddf3>
 8005108:	f003 fcda 	bl	8008ac0 <floor>
 800510c:	2200      	movs	r2, #0
 800510e:	4b7d      	ldr	r3, [pc, #500]	; (8005304 <Control+0x644>)
 8005110:	f7fb fb08 	bl	8000724 <__aeabi_ddiv>
 8005114:	f7fb fc8c 	bl	8000a30 <__aeabi_d2f>
 8005118:	62e0      	str	r0, [r4, #44]	; 0x2c
      pid.kd[PITCH] = ROUND(pid.kd[PITCH], 1);
 800511a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800511c:	f7fb f984 	bl	8000428 <__aeabi_f2d>
 8005120:	2200      	movs	r2, #0
 8005122:	4b78      	ldr	r3, [pc, #480]	; (8005304 <Control+0x644>)
 8005124:	f7fb f9d4 	bl	80004d0 <__aeabi_dmul>
 8005128:	2200      	movs	r2, #0
 800512a:	4b77      	ldr	r3, [pc, #476]	; (8005308 <Control+0x648>)
 800512c:	f7fb f81e 	bl	800016c <__adddf3>
 8005130:	f003 fcc6 	bl	8008ac0 <floor>
 8005134:	2200      	movs	r2, #0
 8005136:	4b73      	ldr	r3, [pc, #460]	; (8005304 <Control+0x644>)
 8005138:	f7fb faf4 	bl	8000724 <__aeabi_ddiv>
 800513c:	f7fb fc78 	bl	8000a30 <__aeabi_d2f>
 8005140:	6520      	str	r0, [r4, #80]	; 0x50
	    pid.kp[YAW] = ROUND(pid.kp[YAW], 1);
 8005142:	68e0      	ldr	r0, [r4, #12]
 8005144:	f7fb f970 	bl	8000428 <__aeabi_f2d>
 8005148:	2200      	movs	r2, #0
 800514a:	4b6e      	ldr	r3, [pc, #440]	; (8005304 <Control+0x644>)
 800514c:	f7fb f9c0 	bl	80004d0 <__aeabi_dmul>
 8005150:	2200      	movs	r2, #0
 8005152:	4b6d      	ldr	r3, [pc, #436]	; (8005308 <Control+0x648>)
 8005154:	f7fb f80a 	bl	800016c <__adddf3>
 8005158:	f003 fcb2 	bl	8008ac0 <floor>
 800515c:	2200      	movs	r2, #0
 800515e:	4b69      	ldr	r3, [pc, #420]	; (8005304 <Control+0x644>)
 8005160:	f7fb fae0 	bl	8000724 <__aeabi_ddiv>
 8005164:	f7fb fc64 	bl	8000a30 <__aeabi_d2f>
 8005168:	60e0      	str	r0, [r4, #12]
	    pid.ki[YAW] = ROUND(pid.ki[YAW], 1);
 800516a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800516c:	f7fb f95c 	bl	8000428 <__aeabi_f2d>
 8005170:	2200      	movs	r2, #0
 8005172:	4b64      	ldr	r3, [pc, #400]	; (8005304 <Control+0x644>)
 8005174:	f7fb f9ac 	bl	80004d0 <__aeabi_dmul>
 8005178:	2200      	movs	r2, #0
 800517a:	4b63      	ldr	r3, [pc, #396]	; (8005308 <Control+0x648>)
 800517c:	f7fa fff6 	bl	800016c <__adddf3>
 8005180:	f003 fc9e 	bl	8008ac0 <floor>
 8005184:	2200      	movs	r2, #0
 8005186:	4b5f      	ldr	r3, [pc, #380]	; (8005304 <Control+0x644>)
 8005188:	f7fb facc 	bl	8000724 <__aeabi_ddiv>
 800518c:	f7fb fc50 	bl	8000a30 <__aeabi_d2f>
 8005190:	6320      	str	r0, [r4, #48]	; 0x30
	    pid.kd[YAW] = ROUND(pid.kd[YAW], 1);
 8005192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005194:	f7fb f948 	bl	8000428 <__aeabi_f2d>
 8005198:	2200      	movs	r2, #0
 800519a:	4b5a      	ldr	r3, [pc, #360]	; (8005304 <Control+0x644>)
 800519c:	f7fb f998 	bl	80004d0 <__aeabi_dmul>
 80051a0:	2200      	movs	r2, #0
 80051a2:	4b59      	ldr	r3, [pc, #356]	; (8005308 <Control+0x648>)
 80051a4:	f7fa ffe2 	bl	800016c <__adddf3>
 80051a8:	f003 fc8a 	bl	8008ac0 <floor>
 80051ac:	2200      	movs	r2, #0
 80051ae:	4b55      	ldr	r3, [pc, #340]	; (8005304 <Control+0x644>)
 80051b0:	f7fb fab8 	bl	8000724 <__aeabi_ddiv>
 80051b4:	f7fb fc3c 	bl	8000a30 <__aeabi_d2f>
 80051b8:	4e54      	ldr	r6, [pc, #336]	; (800530c <Control+0x64c>)
 80051ba:	6560      	str	r0, [r4, #84]	; 0x54

      for(int i = 0; i < 3; i++){
        writeFloat( 0+(4*i), pid.kp[i]);
 80051bc:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80051c0:	4628      	mov	r0, r5
 80051c2:	f7fe fe4a 	bl	8003e5a <writeFloat>
        writeFloat(12+(4*i), pid.ki[i]);
 80051c6:	f105 000c 	add.w	r0, r5, #12
 80051ca:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80051cc:	f7fe fe45 	bl	8003e5a <writeFloat>
        writeFloat(24+(4*i), pid.kd[i]);
 80051d0:	f105 0018 	add.w	r0, r5, #24
 80051d4:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80051d6:	3504      	adds	r5, #4
 80051d8:	f7fe fe3f 	bl	8003e5a <writeFloat>
      for(int i = 0; i < 3; i++){
 80051dc:	2d0c      	cmp	r5, #12
 80051de:	d1ed      	bne.n	80051bc <Control+0x4fc>
 80051e0:	240a      	movs	r4, #10
      }

	    for(int i = 0; i < 10; i++) {
	      HAL_Delay(25);
	      //BEEP_ON;
	      RGB_B_ON;
 80051e2:	4d47      	ldr	r5, [pc, #284]	; (8005300 <Control+0x640>)
	      HAL_Delay(25);
 80051e4:	2019      	movs	r0, #25
 80051e6:	f7fb ffcb 	bl	8001180 <HAL_Delay>
	      RGB_B_ON;
 80051ea:	2200      	movs	r2, #0
 80051ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051f0:	4628      	mov	r0, r5
 80051f2:	f7fc fcdf 	bl	8001bb4 <HAL_GPIO_WritePin>
	      HAL_Delay(25);
 80051f6:	2019      	movs	r0, #25
 80051f8:	f7fb ffc2 	bl	8001180 <HAL_Delay>
	      //BEEP_OFF;
	      RGB_B_OFF;
 80051fc:	2201      	movs	r2, #1
 80051fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005202:	4628      	mov	r0, r5
 8005204:	f7fc fcd6 	bl	8001bb4 <HAL_GPIO_WritePin>
	    for(int i = 0; i < 10; i++) {
 8005208:	3c01      	subs	r4, #1
 800520a:	d1eb      	bne.n	80051e4 <Control+0x524>
	    }
	  }
}
 800520c:	b003      	add	sp, #12
 800520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  }else if(f.Tuning_MODE == 2){
 8005212:	2f02      	cmp	r7, #2
 8005214:	f47f af08 	bne.w	8005028 <Control+0x368>
	    RGB_G_OFF;
 8005218:	2201      	movs	r2, #1
 800521a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800521e:	4838      	ldr	r0, [pc, #224]	; (8005300 <Control+0x640>)
 8005220:	f7fc fcc8 	bl	8001bb4 <HAL_GPIO_WritePin>
	    RGB_R_TOGGLE;
 8005224:	4836      	ldr	r0, [pc, #216]	; (8005300 <Control+0x640>)
 8005226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800522a:	f7fc fcc8 	bl	8001bbe <HAL_GPIO_TogglePin>
      if(RC.rcCommand[ROLL]  >  10) pid.kp[YAW] += (float)RC.rcCommand[ROLL]  * 0.0005;
 800522e:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
 8005232:	280a      	cmp	r0, #10
 8005234:	dd17      	ble.n	8005266 <Control+0x5a6>
      if(RC.rcCommand[ROLL]  < -10) pid.kp[YAW] += (float)RC.rcCommand[ROLL]  * 0.0005;
 8005236:	f7fb fd05 	bl	8000c44 <__aeabi_i2f>
 800523a:	f7fb f8f5 	bl	8000428 <__aeabi_f2d>
 800523e:	a32e      	add	r3, pc, #184	; (adr r3, 80052f8 <Control+0x638>)
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f7fb f944 	bl	80004d0 <__aeabi_dmul>
 8005248:	4680      	mov	r8, r0
 800524a:	68e0      	ldr	r0, [r4, #12]
 800524c:	4689      	mov	r9, r1
 800524e:	f7fb f8eb 	bl	8000428 <__aeabi_f2d>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4640      	mov	r0, r8
 8005258:	4649      	mov	r1, r9
 800525a:	f7fa ff87 	bl	800016c <__adddf3>
 800525e:	f7fb fbe7 	bl	8000a30 <__aeabi_d2f>
 8005262:	60e0      	str	r0, [r4, #12]
 8005264:	e002      	b.n	800526c <Control+0x5ac>
 8005266:	f110 0f0a 	cmn.w	r0, #10
 800526a:	dbe4      	blt.n	8005236 <Control+0x576>
      if(RC.rcCommand[PITCH] >  10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
 800526c:	f9b5 0052 	ldrsh.w	r0, [r5, #82]	; 0x52
 8005270:	280a      	cmp	r0, #10
 8005272:	dd17      	ble.n	80052a4 <Control+0x5e4>
      if(RC.rcCommand[PITCH] < -10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
 8005274:	f7fb fce6 	bl	8000c44 <__aeabi_i2f>
 8005278:	f7fb f8d6 	bl	8000428 <__aeabi_f2d>
 800527c:	a31e      	add	r3, pc, #120	; (adr r3, 80052f8 <Control+0x638>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f7fb f925 	bl	80004d0 <__aeabi_dmul>
 8005286:	4680      	mov	r8, r0
 8005288:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800528a:	4689      	mov	r9, r1
 800528c:	f7fb f8cc 	bl	8000428 <__aeabi_f2d>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4640      	mov	r0, r8
 8005296:	4649      	mov	r1, r9
 8005298:	f7fa ff68 	bl	800016c <__adddf3>
 800529c:	f7fb fbc8 	bl	8000a30 <__aeabi_d2f>
 80052a0:	6320      	str	r0, [r4, #48]	; 0x30
 80052a2:	e002      	b.n	80052aa <Control+0x5ea>
 80052a4:	f110 0f0a 	cmn.w	r0, #10
 80052a8:	dbe4      	blt.n	8005274 <Control+0x5b4>
      if(RC.rcCommand[YAW]   >  10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
 80052aa:	f9b5 0054 	ldrsh.w	r0, [r5, #84]	; 0x54
 80052ae:	280a      	cmp	r0, #10
 80052b0:	dd17      	ble.n	80052e2 <Control+0x622>
      if(RC.rcCommand[YAW]   < -10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
 80052b2:	f7fb fcc7 	bl	8000c44 <__aeabi_i2f>
 80052b6:	f7fb f8b7 	bl	8000428 <__aeabi_f2d>
 80052ba:	a30d      	add	r3, pc, #52	; (adr r3, 80052f0 <Control+0x630>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f7fb f906 	bl	80004d0 <__aeabi_dmul>
 80052c4:	4680      	mov	r8, r0
 80052c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052c8:	4689      	mov	r9, r1
 80052ca:	f7fb f8ad 	bl	8000428 <__aeabi_f2d>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4640      	mov	r0, r8
 80052d4:	4649      	mov	r1, r9
 80052d6:	f7fa ff49 	bl	800016c <__adddf3>
 80052da:	f7fb fba9 	bl	8000a30 <__aeabi_d2f>
 80052de:	6560      	str	r0, [r4, #84]	; 0x54
 80052e0:	e6a2      	b.n	8005028 <Control+0x368>
 80052e2:	f110 0f0a 	cmn.w	r0, #10
 80052e6:	dbe4      	blt.n	80052b2 <Control+0x5f2>
 80052e8:	e69e      	b.n	8005028 <Control+0x368>
 80052ea:	bf00      	nop
 80052ec:	f3af 8000 	nop.w
 80052f0:	eb1c432d 	.word	0xeb1c432d
 80052f4:	3f0a36e2 	.word	0x3f0a36e2
 80052f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80052fc:	3f40624d 	.word	0x3f40624d
 8005300:	40010c00 	.word	0x40010c00
 8005304:	40240000 	.word	0x40240000
 8005308:	3fe00000 	.word	0x3fe00000
 800530c:	20000874 	.word	0x20000874

08005310 <PwmWriteMotor>:



void PwmWriteMotor(void)
{
  TIM4->CCR1 = motor[0];  // Actual : REAR_L
 8005310:	4a07      	ldr	r2, [pc, #28]	; (8005330 <PwmWriteMotor+0x20>)
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <PwmWriteMotor+0x24>)
 8005314:	f9b2 1000 	ldrsh.w	r1, [r2]
 8005318:	6359      	str	r1, [r3, #52]	; 0x34
  TIM4->CCR2 = motor[1];  // Actual : FRONT_R
 800531a:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800531e:	6399      	str	r1, [r3, #56]	; 0x38
	TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8005320:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
	TIM4->CCR4 = motor[3];  // Actual : REAR_R
 8005324:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8005328:	63d9      	str	r1, [r3, #60]	; 0x3c
	TIM4->CCR4 = motor[3];  // Actual : REAR_R
 800532a:	641a      	str	r2, [r3, #64]	; 0x40
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	2000086a 	.word	0x2000086a
 8005334:	40000800 	.word	0x40000800

08005338 <Init_Buffer>:
	Queue_t *p_uart;
	p_uart = &Q_buffer[channel];
	Init_Buffer(p_uart);
}

bool Init_Buffer(Queue_t *Q){
 8005338:	2300      	movs	r3, #0
	bool result = true;
		uint8_t count;
	for(count = 0; count<MAX; count++){
		Q->Ring_Buffer[count]= 0;
 800533a:	461a      	mov	r2, r3
 800533c:	54c2      	strb	r2, [r0, r3]
 800533e:	3301      	adds	r3, #1
	for(count = 0; count<MAX; count++){
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	d1fb      	bne.n	800533c <Init_Buffer+0x4>
	}
	Q->head = 0;
 8005344:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
	Q->tail = 0;
 8005348:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
	Q->size = MAX;
 800534c:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
	Q->temp = 0;
 8005350:	f880 2083 	strb.w	r2, [r0, #131]	; 0x83
	
	return result;
}
 8005354:	2001      	movs	r0, #1
 8005356:	4770      	bx	lr

08005358 <QueueCreate>:
	Init_Buffer(p_uart);
 8005358:	2288      	movs	r2, #136	; 0x88
 800535a:	4b02      	ldr	r3, [pc, #8]	; (8005364 <QueueCreate+0xc>)
 800535c:	fb02 3000 	mla	r0, r2, r0, r3
 8005360:	f7ff bfea 	b.w	8005338 <Init_Buffer>
 8005364:	2000096c 	.word	0x2000096c

08005368 <Q_full>:

uint8_t Q_full(Queue_t *Q){
	if((Q->head+1)%MAX == Q->tail){
 8005368:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800536c:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
 8005370:	3301      	adds	r3, #1
 8005372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	   return TRUE;
	} return FALSE;
}
 8005376:	1a1b      	subs	r3, r3, r0
 8005378:	4258      	negs	r0, r3
 800537a:	4158      	adcs	r0, r3
 800537c:	4770      	bx	lr

0800537e <write_Q>:
	if(Q->head == Q->tail){
		return TRUE;
	} return FALSE;
}

uint8_t write_Q(Queue_t *Q, char data){
 800537e:	b508      	push	{r3, lr}
 8005380:	4602      	mov	r2, r0
	if(Q_full(Q)){
 8005382:	f7ff fff1 	bl	8005368 <Q_full>
 8005386:	b960      	cbnz	r0, 80053a2 <write_Q+0x24>
		return FALSE;
	}
  Q->Ring_Buffer[Q->head] = data;
 8005388:	f892 3080 	ldrb.w	r3, [r2, #128]	; 0x80
  Q->head = (Q->head+1) % MAX;
	return TRUE;
 800538c:	2001      	movs	r0, #1
  Q->Ring_Buffer[Q->head] = data;
 800538e:	b2db      	uxtb	r3, r3
 8005390:	54d1      	strb	r1, [r2, r3]
  Q->head = (Q->head+1) % MAX;
 8005392:	f892 3080 	ldrb.w	r3, [r2, #128]	; 0x80
 8005396:	3301      	adds	r3, #1
 8005398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800539c:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
	return TRUE;
 80053a0:	bd08      	pop	{r3, pc}
		return FALSE;
 80053a2:	2000      	movs	r0, #0
}
 80053a4:	bd08      	pop	{r3, pc}
	...

080053a8 <HAL_TIM_IC_CaptureCallback>:
rc RC;
rc RC_Raw;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM2){
 80053a8:	7f03      	ldrb	r3, [r0, #28]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d11d      	bne.n	80053ea <HAL_TIM_IC_CaptureCallback+0x42>
 80053ae:	6803      	ldr	r3, [r0, #0]
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b4:	f040 8095 	bne.w	80054e2 <HAL_TIM_IC_CaptureCallback+0x13a>
	        if(Ch1_PIN){  // Timer2 Ch1 pin(PA0) is High
 80053b8:	4a52      	ldr	r2, [pc, #328]	; (8005504 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80053ba:	6892      	ldr	r2, [r2, #8]
 80053bc:	f012 0f01 	tst.w	r2, #1
 80053c0:	4a51      	ldr	r2, [pc, #324]	; (8005508 <HAL_TIM_IC_CaptureCallback+0x160>)
 80053c2:	d008      	beq.n	80053d6 <HAL_TIM_IC_CaptureCallback+0x2e>
	            TIM2->CCR1 = 0;
 80053c4:	2100      	movs	r1, #0
 80053c6:	6359      	str	r1, [r3, #52]	; 0x34
	            RC.capture_rise[0] = TIM2->CCR1; // read capture data
 80053c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053ca:	6011      	str	r1, [r2, #0]

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3){
	        if(Ch3_PIN){  // Timer3 Ch1 pin(PA6) is High
	            TIM3->CCR1 = 0;
	        	RC.capture_rise[2] = TIM3->CCR1; // read capture data
	            Ch3_POL_FALLING;  // to falling edge
 80053cc:	6a1a      	ldr	r2, [r3, #32]
 80053ce:	f042 0202 	orr.w	r2, r2, #2
	            Ch6_POL_FALLING;  // to falling edge
	        }
	        else{   // Timer3 Ch4 pin(PB1) is Low
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
	            Ch6_POL_RISING;   // to rising edge
 80053d2:	621a      	str	r2, [r3, #32]
//	        	RC.capture_fall[7] = TIM3->CCR4; // read capture data
//	            RC.rcADC[7] = RC.capture_fall[7] - RC.capture_rise[7];
//	            Ch8_POL_RISING;   // to rising edge
//	        }
//	    }
}
 80053d4:	4770      	bx	lr
	            RC.capture_fall[0] = TIM2->CCR1; // read capture data
 80053d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
	            RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 80053d8:	6810      	ldr	r0, [r2, #0]
	            RC.capture_fall[0] = TIM2->CCR1; // read capture data
 80053da:	6211      	str	r1, [r2, #32]
	            RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 80053dc:	1a09      	subs	r1, r1, r0
 80053de:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
	            Ch3_POL_RISING;   // to rising edge
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	f022 0202 	bic.w	r2, r2, #2
 80053e8:	e7f3      	b.n	80053d2 <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM2){
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d13d      	bne.n	800546a <HAL_TIM_IC_CaptureCallback+0xc2>
 80053ee:	6803      	ldr	r3, [r0, #0]
 80053f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f4:	d10d      	bne.n	8005412 <HAL_TIM_IC_CaptureCallback+0x6a>
	        if(Ch2_PIN){  // Timer2 Ch2 pin(PA1) is High
 80053f6:	4a43      	ldr	r2, [pc, #268]	; (8005504 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80053f8:	6892      	ldr	r2, [r2, #8]
 80053fa:	f012 0f02 	tst.w	r2, #2
 80053fe:	4a42      	ldr	r2, [pc, #264]	; (8005508 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005400:	d018      	beq.n	8005434 <HAL_TIM_IC_CaptureCallback+0x8c>
	            TIM2->CCR2 = 0;
 8005402:	2100      	movs	r1, #0
 8005404:	6399      	str	r1, [r3, #56]	; 0x38
	        	RC.capture_rise[1] = TIM2->CCR2; // read capture data
 8005406:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005408:	6051      	str	r1, [r2, #4]
	            Ch2_POL_FALLING;  // to falling edge
 800540a:	6a1a      	ldr	r2, [r3, #32]
 800540c:	f042 0220 	orr.w	r2, r2, #32
	            Ch2_POL_RISING;   // to rising edge
 8005410:	621a      	str	r2, [r3, #32]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM3){
 8005412:	4a3e      	ldr	r2, [pc, #248]	; (800550c <HAL_TIM_IC_CaptureCallback+0x164>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d174      	bne.n	8005502 <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch4_PIN){  // Timer3 Ch2 pin(PA7) is High
 8005418:	4a3a      	ldr	r2, [pc, #232]	; (8005504 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800541a:	6892      	ldr	r2, [r2, #8]
 800541c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005420:	4a39      	ldr	r2, [pc, #228]	; (8005508 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005422:	d018      	beq.n	8005456 <HAL_TIM_IC_CaptureCallback+0xae>
	            TIM3->CCR2 = 0;
 8005424:	2100      	movs	r1, #0
 8005426:	6399      	str	r1, [r3, #56]	; 0x38
	        	RC.capture_rise[3] = TIM3->CCR2; // read capture data
 8005428:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800542a:	60d1      	str	r1, [r2, #12]
	            Ch4_POL_FALLING;  // to falling edge
 800542c:	6a1a      	ldr	r2, [r3, #32]
 800542e:	f042 0220 	orr.w	r2, r2, #32
 8005432:	e7ce      	b.n	80053d2 <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[1] = TIM2->CCR2; // read capture data
 8005434:	6b99      	ldr	r1, [r3, #56]	; 0x38
	        	RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 8005436:	6850      	ldr	r0, [r2, #4]
	        	RC.capture_fall[1] = TIM2->CCR2; // read capture data
 8005438:	6251      	str	r1, [r2, #36]	; 0x24
	        	RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 800543a:	1a09      	subs	r1, r1, r0
 800543c:	f8a2 1042 	strh.w	r1, [r2, #66]	; 0x42
	            Ch2_POL_RISING;   // to rising edge
 8005440:	6a1a      	ldr	r2, [r3, #32]
 8005442:	f022 0220 	bic.w	r2, r2, #32
 8005446:	e7e3      	b.n	8005410 <HAL_TIM_IC_CaptureCallback+0x68>
	        	RC.capture_fall[2] = TIM3->CCR1; // read capture data
 8005448:	6b59      	ldr	r1, [r3, #52]	; 0x34
	        	RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 800544a:	6890      	ldr	r0, [r2, #8]
	        	RC.capture_fall[2] = TIM3->CCR1; // read capture data
 800544c:	6291      	str	r1, [r2, #40]	; 0x28
	        	RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 800544e:	1a09      	subs	r1, r1, r0
 8005450:	f8a2 1044 	strh.w	r1, [r2, #68]	; 0x44
 8005454:	e7c5      	b.n	80053e2 <HAL_TIM_IC_CaptureCallback+0x3a>
	        	RC.capture_fall[3] = TIM3->CCR2; // read capture data
 8005456:	6b99      	ldr	r1, [r3, #56]	; 0x38
	            RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 8005458:	68d0      	ldr	r0, [r2, #12]
	        	RC.capture_fall[3] = TIM3->CCR2; // read capture data
 800545a:	62d1      	str	r1, [r2, #44]	; 0x2c
	            RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 800545c:	1a09      	subs	r1, r1, r0
 800545e:	f8a2 1046 	strh.w	r1, [r2, #70]	; 0x46
	            Ch4_POL_RISING;   // to rising edge
 8005462:	6a1a      	ldr	r2, [r3, #32]
 8005464:	f022 0220 	bic.w	r2, r2, #32
 8005468:	e7b3      	b.n	80053d2 <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 && htim->Instance == TIM3){
 800546a:	2b04      	cmp	r3, #4
 800546c:	d147      	bne.n	80054fe <HAL_TIM_IC_CaptureCallback+0x156>
 800546e:	6803      	ldr	r3, [r0, #0]
 8005470:	4a26      	ldr	r2, [pc, #152]	; (800550c <HAL_TIM_IC_CaptureCallback+0x164>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d145      	bne.n	8005502 <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch5_PIN){  // Timer3 Ch3 pin(PB0) is High
 8005476:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 800547a:	6892      	ldr	r2, [r2, #8]
 800547c:	f012 0f01 	tst.w	r2, #1
 8005480:	4a21      	ldr	r2, [pc, #132]	; (8005508 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005482:	d007      	beq.n	8005494 <HAL_TIM_IC_CaptureCallback+0xec>
	            TIM3->CCR3 = 0;
 8005484:	2100      	movs	r1, #0
 8005486:	63d9      	str	r1, [r3, #60]	; 0x3c
	        	RC.capture_rise[4] = TIM3->CCR3; // read capture data
 8005488:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800548a:	6111      	str	r1, [r2, #16]
	            Ch5_POL_FALLING;  // to falling edge
 800548c:	6a1a      	ldr	r2, [r3, #32]
 800548e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005492:	e79e      	b.n	80053d2 <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[4] = TIM3->CCR3; // read capture data
 8005494:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	            RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 8005496:	6910      	ldr	r0, [r2, #16]
	        	RC.capture_fall[4] = TIM3->CCR3; // read capture data
 8005498:	6311      	str	r1, [r2, #48]	; 0x30
	            RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 800549a:	1a09      	subs	r1, r1, r0
 800549c:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
	            Ch5_POL_RISING;   // to rising edge
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054a6:	e794      	b.n	80053d2 <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3){
 80054a8:	6803      	ldr	r3, [r0, #0]
 80054aa:	4a18      	ldr	r2, [pc, #96]	; (800550c <HAL_TIM_IC_CaptureCallback+0x164>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d128      	bne.n	8005502 <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch6_PIN){  // Timer3 Ch4 pin(PB1) is High
 80054b0:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 80054b4:	6892      	ldr	r2, [r2, #8]
 80054b6:	f012 0f02 	tst.w	r2, #2
 80054ba:	4a13      	ldr	r2, [pc, #76]	; (8005508 <HAL_TIM_IC_CaptureCallback+0x160>)
 80054bc:	d007      	beq.n	80054ce <HAL_TIM_IC_CaptureCallback+0x126>
	            TIM3->CCR4 = 0;
 80054be:	2100      	movs	r1, #0
 80054c0:	6419      	str	r1, [r3, #64]	; 0x40
	        	RC.capture_rise[5] = TIM3->CCR4; // read capture data
 80054c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80054c4:	6151      	str	r1, [r2, #20]
	            Ch6_POL_FALLING;  // to falling edge
 80054c6:	6a1a      	ldr	r2, [r3, #32]
 80054c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054cc:	e781      	b.n	80053d2 <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
 80054ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 80054d0:	6950      	ldr	r0, [r2, #20]
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
 80054d2:	6351      	str	r1, [r2, #52]	; 0x34
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 80054d4:	1a09      	subs	r1, r1, r0
 80054d6:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
	            Ch6_POL_RISING;   // to rising edge
 80054da:	6a1a      	ldr	r2, [r3, #32]
 80054dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e0:	e777      	b.n	80053d2 <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3){
 80054e2:	4a0a      	ldr	r2, [pc, #40]	; (800550c <HAL_TIM_IC_CaptureCallback+0x164>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10c      	bne.n	8005502 <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch3_PIN){  // Timer3 Ch1 pin(PA6) is High
 80054e8:	4a06      	ldr	r2, [pc, #24]	; (8005504 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80054ea:	6892      	ldr	r2, [r2, #8]
 80054ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80054f0:	4a05      	ldr	r2, [pc, #20]	; (8005508 <HAL_TIM_IC_CaptureCallback+0x160>)
 80054f2:	d0a9      	beq.n	8005448 <HAL_TIM_IC_CaptureCallback+0xa0>
	            TIM3->CCR1 = 0;
 80054f4:	2100      	movs	r1, #0
 80054f6:	6359      	str	r1, [r3, #52]	; 0x34
	        	RC.capture_rise[2] = TIM3->CCR1; // read capture data
 80054f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054fa:	6091      	str	r1, [r2, #8]
 80054fc:	e766      	b.n	80053cc <HAL_TIM_IC_CaptureCallback+0x24>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3){
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d0d2      	beq.n	80054a8 <HAL_TIM_IC_CaptureCallback+0x100>
 8005502:	4770      	bx	lr
 8005504:	40010800 	.word	0x40010800
 8005508:	20000af4 	.word	0x20000af4
 800550c:	40000400 	.word	0x40000400

08005510 <getMres>:
// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
uint8_t Mmode = M_100HZ;

void getMres()
{
  switch (Mscale)
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <getMres+0x18>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	b113      	cbz	r3, 800551c <getMres+0xc>
 8005516:	2b01      	cmp	r3, #1
 8005518:	d004      	beq.n	8005524 <getMres+0x14>
 800551a:	4770      	bx	lr
  {
    // Possible magnetometer scales (and their register bit settings) are:
    // 14 bit resolution (0) and 16 bit resolution (1)
    case MFS_14BITS:
      mRes = 10.0f * 4912.0f / 8190.0f; // Proper scale to return milliGauss
 800551c:	4a03      	ldr	r2, [pc, #12]	; (800552c <getMres+0x1c>)
      break;
    case MFS_16BITS:
      mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
 800551e:	4b04      	ldr	r3, [pc, #16]	; (8005530 <getMres+0x20>)
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	4770      	bx	lr
 8005524:	4a03      	ldr	r2, [pc, #12]	; (8005534 <getMres+0x24>)
 8005526:	e7fa      	b.n	800551e <getMres+0xe>
 8005528:	20000009 	.word	0x20000009
 800552c:	40bfebff 	.word	0x40bfebff
 8005530:	20000774 	.word	0x20000774
 8005534:	3fbfebff 	.word	0x3fbfebff

08005538 <getGres>:
  }
}

void getGres()
{
  switch (Gscale)
 8005538:	4b08      	ldr	r3, [pc, #32]	; (800555c <getGres+0x24>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b03      	cmp	r3, #3
 800553e:	d806      	bhi.n	800554e <getGres+0x16>
 8005540:	e8df f003 	tbb	[pc, r3]
 8005544:	0a080602 	.word	0x0a080602
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case GFS_250DPS:
      gRes = 250.0f / 32768.0f;
 8005548:	4a05      	ldr	r2, [pc, #20]	; (8005560 <getGres+0x28>)
      break;
    case GFS_1000DPS:
      gRes = 1000.0f / 32768.0f;
      break;
    case GFS_2000DPS:
      gRes = 2000.0f / 32768.0f;
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <getGres+0x2c>)
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	4770      	bx	lr
      gRes = 500.0f / 32768.0f;
 8005550:	4a05      	ldr	r2, [pc, #20]	; (8005568 <getGres+0x30>)
 8005552:	e7fa      	b.n	800554a <getGres+0x12>
      gRes = 1000.0f / 32768.0f;
 8005554:	4a05      	ldr	r2, [pc, #20]	; (800556c <getGres+0x34>)
 8005556:	e7f8      	b.n	800554a <getGres+0x12>
      gRes = 2000.0f / 32768.0f;
 8005558:	4a05      	ldr	r2, [pc, #20]	; (8005570 <getGres+0x38>)
 800555a:	e7f6      	b.n	800554a <getGres+0x12>
 800555c:	200004ed 	.word	0x200004ed
 8005560:	3bfa0000 	.word	0x3bfa0000
 8005564:	2000076c 	.word	0x2000076c
 8005568:	3c7a0000 	.word	0x3c7a0000
 800556c:	3cfa0000 	.word	0x3cfa0000
 8005570:	3d7a0000 	.word	0x3d7a0000

08005574 <getAres>:
  }
}

void getAres()
{
  switch (Ascale)
 8005574:	4b0a      	ldr	r3, [pc, #40]	; (80055a0 <getAres+0x2c>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d807      	bhi.n	800558c <getAres+0x18>
 800557c:	e8df f003 	tbb	[pc, r3]
 8005580:	0d0a0702 	.word	0x0d0a0702
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case AFS_2G:
      aRes = 2.0f / 32768.0f;
 8005584:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
      break;
    case AFS_8G:
      aRes = 8.0f / 32768.0f;
      break;
    case AFS_16G:
      aRes = 16.0f / 32768.0f;
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <getAres+0x30>)
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	4770      	bx	lr
      aRes = 4.0f / 32768.0f;
 800558e:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8005592:	e7f9      	b.n	8005588 <getAres+0x14>
      aRes = 8.0f / 32768.0f;
 8005594:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8005598:	e7f6      	b.n	8005588 <getAres+0x14>
      aRes = 16.0f / 32768.0f;
 800559a:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800559e:	e7f3      	b.n	8005588 <getAres+0x14>
 80055a0:	200004ec 	.word	0x200004ec
 80055a4:	2000075c 	.word	0x2000075c

080055a8 <GYRO_Common>:
	
	if(1) GYRO_Common(); //Flight_Status >= 1
}

void GYRO_Common(void)
{
 80055a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t axis =0;
  for(axis=0; axis<3; axis++)
  {
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 80055ac:	f04f 0900 	mov.w	r9, #0

    if(abs(imu.gyroRaw[axis]) <= 5)
 80055b0:	2600      	movs	r6, #0
 80055b2:	f04f 0701 	mov.w	r7, #1
 80055b6:	46c8      	mov	r8, r9
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 80055b8:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <GYRO_Common+0x80>)
 80055ba:	4c1c      	ldr	r4, [pc, #112]	; (800562c <GYRO_Common+0x84>)
 80055bc:	681b      	ldr	r3, [r3, #0]
    if(abs(imu.gyroRaw[axis]) <= 5)
 80055be:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005634 <GYRO_Common+0x8c>
 80055c2:	f8df b074 	ldr.w	fp, [pc, #116]	; 8005638 <GYRO_Common+0x90>
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4b19      	ldr	r3, [pc, #100]	; (8005630 <GYRO_Common+0x88>)
 80055ca:	444b      	add	r3, r9
 80055cc:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80055d0:	f7fb fb38 	bl	8000c44 <__aeabi_i2f>
 80055d4:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80055d8:	f7fb fa7e 	bl	8000ad8 <__aeabi_fsub>
 80055dc:	9900      	ldr	r1, [sp, #0]
 80055de:	f7fb fb85 	bl	8000cec <__aeabi_fmul>
    if(abs(imu.gyroRaw[axis]) <= 5)
 80055e2:	4631      	mov	r1, r6
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 80055e4:	4605      	mov	r5, r0
    if(abs(imu.gyroRaw[axis]) <= 5)
 80055e6:	f7fb fd3d 	bl	8001064 <__aeabi_fcmpgt>
 80055ea:	463b      	mov	r3, r7
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	b190      	cbz	r0, 8005616 <GYRO_Common+0x6e>
 80055f0:	4659      	mov	r1, fp
 80055f2:	4628      	mov	r0, r5
 80055f4:	f7fb fd22 	bl	800103c <__aeabi_fcmple>
 80055f8:	9b01      	ldr	r3, [sp, #4]
 80055fa:	b900      	cbnz	r0, 80055fe <GYRO_Common+0x56>
 80055fc:	4643      	mov	r3, r8
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	b973      	cbnz	r3, 8005620 <GYRO_Common+0x78>
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005602:	f844 5c2c 	str.w	r5, [r4, #-44]
 8005606:	f109 0902 	add.w	r9, r9, #2
  for(axis=0; axis<3; axis++)
 800560a:	f1b9 0f06 	cmp.w	r9, #6
 800560e:	d1db      	bne.n	80055c8 <GYRO_Common+0x20>
      {
        imu.gyroRaw[axis] = 0;
      }
  }
}
 8005610:	b003      	add	sp, #12
 8005612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(abs(imu.gyroRaw[axis]) <= 5)
 8005616:	4651      	mov	r1, sl
 8005618:	4628      	mov	r0, r5
 800561a:	f7fb fd19 	bl	8001050 <__aeabi_fcmpge>
 800561e:	e7eb      	b.n	80055f8 <GYRO_Common+0x50>
        imu.gyroRaw[axis] = 0;
 8005620:	f844 6c2c 	str.w	r6, [r4, #-44]
 8005624:	e7ef      	b.n	8005606 <GYRO_Common+0x5e>
 8005626:	bf00      	nop
 8005628:	2000076c 	.word	0x2000076c
 800562c:	20000d54 	.word	0x20000d54
 8005630:	20000cf8 	.word	0x20000cf8
 8005634:	c0a00000 	.word	0xc0a00000
 8005638:	40a00000 	.word	0x40a00000

0800563c <Gyro_getADC>:
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 800563c:	2306      	movs	r3, #6
{
 800563e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 8005640:	4c0e      	ldr	r4, [pc, #56]	; (800567c <Gyro_getADC+0x40>)
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	2201      	movs	r2, #1
 8005646:	4623      	mov	r3, r4
 8005648:	2143      	movs	r1, #67	; 0x43
 800564a:	20d2      	movs	r0, #210	; 0xd2
 800564c:	f7fe fcaa 	bl	8003fa4 <I2C_ByteRead>
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005650:	78a3      	ldrb	r3, [r4, #2]
 8005652:	78e1      	ldrb	r1, [r4, #3]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005654:	7962      	ldrb	r2, [r4, #5]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005656:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 800565a:	7923      	ldrb	r3, [r4, #4]
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 800565c:	7825      	ldrb	r5, [r4, #0]
 800565e:	7860      	ldrb	r0, [r4, #1]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005660:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	GYRO_ORIENTATION(x, y, z);
 8005664:	4b06      	ldr	r3, [pc, #24]	; (8005680 <Gyro_getADC+0x44>)
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005666:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	GYRO_ORIENTATION(x, y, z);
 800566a:	8298      	strh	r0, [r3, #20]
 800566c:	82d9      	strh	r1, [r3, #22]
 800566e:	831a      	strh	r2, [r3, #24]
}
 8005670:	b003      	add	sp, #12
 8005672:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(1) GYRO_Common(); //Flight_Status >= 1
 8005676:	f7ff bf97 	b.w	80055a8 <GYRO_Common>
 800567a:	bf00      	nop
 800567c:	20000d98 	.word	0x20000d98
 8005680:	20000cf8 	.word	0x20000cf8

08005684 <ACC_Common>:
	
	if(1) ACC_Common(); //Flight_Status >= 1
}

void ACC_Common(void)
{
 8005684:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t axis = 0;
  static int32_t a[3];

  if(calibratingA>0){
 8005688:	4e2a      	ldr	r6, [pc, #168]	; (8005734 <ACC_Common+0xb0>)
 800568a:	4c2b      	ldr	r4, [pc, #172]	; (8005738 <ACC_Common+0xb4>)
 800568c:	8830      	ldrh	r0, [r6, #0]
 800568e:	2800      	cmp	r0, #0
 8005690:	d03c      	beq.n	800570c <ACC_Common+0x88>
 8005692:	2300      	movs	r3, #0
 8005694:	4a29      	ldr	r2, [pc, #164]	; (800573c <ACC_Common+0xb8>)
    for(axis=0; axis <3; axis++){
    // Reset a[axis] at start of calibration
      if (calibratingA == 512) a[axis]=0;
 8005696:	461d      	mov	r5, r3
 8005698:	4611      	mov	r1, r2
 800569a:	f104 0e18 	add.w	lr, r4, #24
 800569e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80056a2:	bf08      	it	eq
 80056a4:	6015      	streq	r5, [r2, #0]
      // Sum up 512 readings
      a[axis] +=imu.accADC[axis];
 80056a6:	f9be c002 	ldrsh.w	ip, [lr, #2]
 80056aa:	6817      	ldr	r7, [r2, #0]
      // Clear global variables for next reading
      imu.accADC[axis]=0;
 80056ac:	f82e 5f02 	strh.w	r5, [lr, #2]!
      a[axis] +=imu.accADC[axis];
 80056b0:	4467      	add	r7, ip
 80056b2:	f842 7b04 	str.w	r7, [r2], #4
      imu.acc_cal[axis]=0;
 80056b6:	18e7      	adds	r7, r4, r3
 80056b8:	3304      	adds	r3, #4
    for(axis=0; axis <3; axis++){
 80056ba:	2b0c      	cmp	r3, #12
      imu.acc_cal[axis]=0;
 80056bc:	657d      	str	r5, [r7, #84]	; 0x54
    for(axis=0; axis <3; axis++){
 80056be:	d1ee      	bne.n	800569e <ACC_Common+0x1a>
  }
     // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
  if (calibratingA == 1) {
 80056c0:	2801      	cmp	r0, #1
 80056c2:	d120      	bne.n	8005706 <ACC_Common+0x82>
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 80056c4:	684b      	ldr	r3, [r1, #4]
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 80056c6:	680f      	ldr	r7, [r1, #0]
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 80056c8:	ea4f 2863 	mov.w	r8, r3, asr #9
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 80056cc:	4b1c      	ldr	r3, [pc, #112]	; (8005740 <ACC_Common+0xbc>)
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 80056ce:	127f      	asrs	r7, r7, #9
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 80056d0:	6818      	ldr	r0, [r3, #0]
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 80056d2:	6567      	str	r7, [r4, #84]	; 0x54
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 80056d4:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 80056d8:	688d      	ldr	r5, [r1, #8]
 80056da:	f7fb fce3 	bl	80010a4 <__aeabi_f2iz>
 80056de:	126d      	asrs	r5, r5, #9
 80056e0:	1a28      	subs	r0, r5, r0
    sprintf(Buf, "ACC_CALI_DONE : %ld, %ld, %ld\r\n ", imu.acc_cal[ROLL], imu.acc_cal[PITCH], imu.acc_cal[YAW]);
 80056e2:	4643      	mov	r3, r8
 80056e4:	463a      	mov	r2, r7
 80056e6:	4917      	ldr	r1, [pc, #92]	; (8005744 <ACC_Common+0xc0>)
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 80056e8:	65e0      	str	r0, [r4, #92]	; 0x5c
    sprintf(Buf, "ACC_CALI_DONE : %ld, %ld, %ld\r\n ", imu.acc_cal[ROLL], imu.acc_cal[PITCH], imu.acc_cal[YAW]);
 80056ea:	9000      	str	r0, [sp, #0]
 80056ec:	4816      	ldr	r0, [pc, #88]	; (8005748 <ACC_Common+0xc4>)
 80056ee:	f002 fdb9 	bl	8008264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf),1000);
 80056f2:	4815      	ldr	r0, [pc, #84]	; (8005748 <ACC_Common+0xc4>)
 80056f4:	f7fa fd2c 	bl	8000150 <strlen>
 80056f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056fc:	b282      	uxth	r2, r0
 80056fe:	4912      	ldr	r1, [pc, #72]	; (8005748 <ACC_Common+0xc4>)
 8005700:	4812      	ldr	r0, [pc, #72]	; (800574c <ACC_Common+0xc8>)
 8005702:	f7fe f949 	bl	8003998 <HAL_UART_Transmit>
  }
  calibratingA--;
 8005706:	8833      	ldrh	r3, [r6, #0]
 8005708:	3b01      	subs	r3, #1
 800570a:	8033      	strh	r3, [r6, #0]
}

  for(axis=0;axis<3;axis++)
  {
    imu.accRaw[axis] = (float)imu.accADC[axis] * aRes;// - accBias[axis];
 800570c:	2500      	movs	r5, #0
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <ACC_Common+0xbc>)
 8005710:	4e0f      	ldr	r6, [pc, #60]	; (8005750 <ACC_Common+0xcc>)
 8005712:	f8d3 8000 	ldr.w	r8, [r3]
 8005716:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
 800571a:	f7fb fa93 	bl	8000c44 <__aeabi_i2f>
 800571e:	4641      	mov	r1, r8
 8005720:	f7fb fae4 	bl	8000cec <__aeabi_fmul>
 8005724:	1967      	adds	r7, r4, r5
 8005726:	3504      	adds	r5, #4
  for(axis=0;axis<3;axis++)
 8005728:	2d0c      	cmp	r5, #12
    imu.accRaw[axis] = (float)imu.accADC[axis] * aRes;// - accBias[axis];
 800572a:	62b8      	str	r0, [r7, #40]	; 0x28
  for(axis=0;axis<3;axis++)
 800572c:	d1f3      	bne.n	8005716 <ACC_Common+0x92>
    //imu.accRaw[axis] = ((float)imu.accADC[axis]-(float)imu.acc_cal[axis]) * AMult;// - accelBias[axis];
  }
}
 800572e:	b002      	add	sp, #8
 8005730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005734:	200005f4 	.word	0x200005f4
 8005738:	20000cf8 	.word	0x20000cf8
 800573c:	20000508 	.word	0x20000508
 8005740:	2000075c 	.word	0x2000075c
 8005744:	0800ae70 	.word	0x0800ae70
 8005748:	20000da4 	.word	0x20000da4
 800574c:	200010e8 	.word	0x200010e8
 8005750:	20000d10 	.word	0x20000d10

08005754 <ACC_getADC>:
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 8005754:	2306      	movs	r3, #6
{
 8005756:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 8005758:	4c0e      	ldr	r4, [pc, #56]	; (8005794 <ACC_getADC+0x40>)
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	2201      	movs	r2, #1
 800575e:	4623      	mov	r3, r4
 8005760:	213b      	movs	r1, #59	; 0x3b
 8005762:	20d2      	movs	r0, #210	; 0xd2
 8005764:	f7fe fc1e 	bl	8003fa4 <I2C_ByteRead>
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005768:	78a3      	ldrb	r3, [r4, #2]
 800576a:	78e1      	ldrb	r1, [r4, #3]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 800576c:	7962      	ldrb	r2, [r4, #5]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 800576e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005772:	7923      	ldrb	r3, [r4, #4]
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005774:	7825      	ldrb	r5, [r4, #0]
 8005776:	7860      	ldrb	r0, [r4, #1]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005778:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	ACC_ORIENTATION( x, y, z);
 800577c:	4b06      	ldr	r3, [pc, #24]	; (8005798 <ACC_getADC+0x44>)
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 800577e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	ACC_ORIENTATION( x, y, z);
 8005782:	8358      	strh	r0, [r3, #26]
 8005784:	8399      	strh	r1, [r3, #28]
 8005786:	83da      	strh	r2, [r3, #30]
}
 8005788:	b003      	add	sp, #12
 800578a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(1) ACC_Common(); //Flight_Status >= 1
 800578e:	f7ff bf79 	b.w	8005684 <ACC_Common>
 8005792:	bf00      	nop
 8005794:	20000d98 	.word	0x20000d98
 8005798:	20000cf8 	.word	0x20000cf8

0800579c <MAG_Common>:
		}
	}
}

void MAG_Common(void)
{
 800579c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t axis = 0;
  for(axis=0;axis<3;axis++)
  {
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 80057a0:	2400      	movs	r4, #0
 80057a2:	4b10      	ldr	r3, [pc, #64]	; (80057e4 <MAG_Common+0x48>)
 80057a4:	4d10      	ldr	r5, [pc, #64]	; (80057e8 <MAG_Common+0x4c>)
 80057a6:	f8d3 8000 	ldr.w	r8, [r3]
 80057aa:	4f10      	ldr	r7, [pc, #64]	; (80057ec <MAG_Common+0x50>)
 80057ac:	4e10      	ldr	r6, [pc, #64]	; (80057f0 <MAG_Common+0x54>)
 80057ae:	f1a5 093c 	sub.w	r9, r5, #60	; 0x3c
 80057b2:	eb04 0309 	add.w	r3, r4, r9
 80057b6:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80057ba:	f7fb fa43 	bl	8000c44 <__aeabi_i2f>
 80057be:	4641      	mov	r1, r8
 80057c0:	f7fb fa94 	bl	8000cec <__aeabi_fmul>
 80057c4:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
 80057c8:	f7fb fa90 	bl	8000cec <__aeabi_fmul>
 80057cc:	f856 1014 	ldr.w	r1, [r6, r4, lsl #1]
 80057d0:	f7fb f982 	bl	8000ad8 <__aeabi_fsub>
 80057d4:	3402      	adds	r4, #2
  for(axis=0;axis<3;axis++)
 80057d6:	2c06      	cmp	r4, #6
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 80057d8:	f845 0f04 	str.w	r0, [r5, #4]!
  for(axis=0;axis<3;axis++)
 80057dc:	d1e9      	bne.n	80057b2 <MAG_Common+0x16>
  }
}
 80057de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057e2:	bf00      	nop
 80057e4:	20000774 	.word	0x20000774
 80057e8:	20000d34 	.word	0x20000d34
 80057ec:	20000610 	.word	0x20000610
 80057f0:	20000604 	.word	0x20000604

080057f4 <Mag_getADC>:
{
 80057f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x02, 1, rawADC, 1);
 80057f6:	2501      	movs	r5, #1
 80057f8:	4c16      	ldr	r4, [pc, #88]	; (8005854 <Mag_getADC+0x60>)
 80057fa:	462a      	mov	r2, r5
 80057fc:	4623      	mov	r3, r4
 80057fe:	9500      	str	r5, [sp, #0]
 8005800:	2102      	movs	r1, #2
 8005802:	2018      	movs	r0, #24
 8005804:	f7fe fbce 	bl	8003fa4 <I2C_ByteRead>
	if( rawADC[0] & 0x01)
 8005808:	7823      	ldrb	r3, [r4, #0]
 800580a:	07da      	lsls	r2, r3, #31
 800580c:	d51f      	bpl.n	800584e <Mag_getADC+0x5a>
	I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x03, 1, rawADC, 7);
 800580e:	2307      	movs	r3, #7
 8005810:	462a      	mov	r2, r5
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	2103      	movs	r1, #3
 8005816:	4623      	mov	r3, r4
 8005818:	2018      	movs	r0, #24
 800581a:	f7fe fbc3 	bl	8003fa4 <I2C_ByteRead>
	if(!(c & 0x08)){
 800581e:	79a3      	ldrb	r3, [r4, #6]
 8005820:	071b      	lsls	r3, r3, #28
 8005822:	d414      	bmi.n	800584e <Mag_getADC+0x5a>
	y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 8005824:	78e3      	ldrb	r3, [r4, #3]
 8005826:	78a1      	ldrb	r1, [r4, #2]
	z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8005828:	7922      	ldrb	r2, [r4, #4]
	y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 800582a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 800582e:	7963      	ldrb	r3, [r4, #5]
	x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 8005830:	7865      	ldrb	r5, [r4, #1]
 8005832:	7820      	ldrb	r0, [r4, #0]
	z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8005834:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	MAG_ORIENTATION( x, y, z);
 8005838:	4b07      	ldr	r3, [pc, #28]	; (8005858 <Mag_getADC+0x64>)
	x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 800583a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	MAG_ORIENTATION( x, y, z);
 800583e:	8198      	strh	r0, [r3, #12]
 8005840:	81d9      	strh	r1, [r3, #14]
 8005842:	821a      	strh	r2, [r3, #16]
}
 8005844:	b003      	add	sp, #12
 8005846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(1) MAG_Common();//Flight_Status >= 1
 800584a:	f7ff bfa7 	b.w	800579c <MAG_Common>
}
 800584e:	b003      	add	sp, #12
 8005850:	bd30      	pop	{r4, r5, pc}
 8005852:	bf00      	nop
 8005854:	20000d98 	.word	0x20000d98
 8005858:	20000cf8 	.word	0x20000cf8

0800585c <Calibrate_gyro>:
{
 800585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (cal_int = 0; cal_int < 2000; cal_int ++){
 8005860:	2500      	movs	r5, #0
      RGB_G_TOGGLE;                                         //Change the led status to indicate calibration.
 8005862:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005914 <Calibrate_gyro+0xb8>
      sprintf(Buf, ".");
 8005866:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8005918 <Calibrate_gyro+0xbc>
 800586a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800591c <Calibrate_gyro+0xc0>
    if (cal_int % 125 == 0) {
 800586e:	227d      	movs	r2, #125	; 0x7d
 8005870:	fb95 f3f2 	sdiv	r3, r5, r2
 8005874:	fb02 5313 	mls	r3, r2, r3, r5
 8005878:	b993      	cbnz	r3, 80058a0 <Calibrate_gyro+0x44>
      RGB_G_TOGGLE;                                         //Change the led status to indicate calibration.
 800587a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800587e:	4648      	mov	r0, r9
 8005880:	f7fc f99d 	bl	8001bbe <HAL_GPIO_TogglePin>
      sprintf(Buf, ".");
 8005884:	4651      	mov	r1, sl
 8005886:	4640      	mov	r0, r8
 8005888:	f002 fd10 	bl	80082ac <strcpy>
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800588c:	4640      	mov	r0, r8
 800588e:	f7fa fc5f 	bl	8000150 <strlen>
 8005892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005896:	b282      	uxth	r2, r0
 8005898:	4641      	mov	r1, r8
 800589a:	481b      	ldr	r0, [pc, #108]	; (8005908 <Calibrate_gyro+0xac>)
 800589c:	f7fe f87c 	bl	8003998 <HAL_UART_Transmit>
		Gyro_getADC();
 80058a0:	f7ff fecc 	bl	800563c <Gyro_getADC>
		Mag_getADC();
 80058a4:	2600      	movs	r6, #0
 80058a6:	f7ff ffa5 	bl	80057f4 <Mag_getADC>
 80058aa:	4f18      	ldr	r7, [pc, #96]	; (800590c <Calibrate_gyro+0xb0>)
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 80058ac:	f1a7 045c 	sub.w	r4, r7, #92	; 0x5c
 80058b0:	1933      	adds	r3, r6, r4
 80058b2:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80058b6:	f7fb f9c5 	bl	8000c44 <__aeabi_i2f>
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	f7fb f90e 	bl	8000adc <__addsf3>
 80058c0:	3602      	adds	r6, #2
		for(axis=0; axis<3; axis++)
 80058c2:	2e06      	cmp	r6, #6
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 80058c4:	f847 0f04 	str.w	r0, [r7, #4]!
		for(axis=0; axis<3; axis++)
 80058c8:	d1f2      	bne.n	80058b0 <Calibrate_gyro+0x54>
	for (cal_int = 0; cal_int < 2000; cal_int ++){
 80058ca:	3501      	adds	r5, #1
 80058cc:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80058d0:	d1cd      	bne.n	800586e <Calibrate_gyro+0x12>
	PrintData(2);
 80058d2:	2002      	movs	r0, #2
 80058d4:	f001 fb9a 	bl	800700c <PrintData>
		imu.gyro_cal[axis] /= 2000.0f;
 80058d8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80058da:	490d      	ldr	r1, [pc, #52]	; (8005910 <Calibrate_gyro+0xb4>)
 80058dc:	f7fb faba 	bl	8000e54 <__aeabi_fdiv>
 80058e0:	490b      	ldr	r1, [pc, #44]	; (8005910 <Calibrate_gyro+0xb4>)
 80058e2:	6620      	str	r0, [r4, #96]	; 0x60
 80058e4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80058e6:	f7fb fab5 	bl	8000e54 <__aeabi_fdiv>
 80058ea:	4909      	ldr	r1, [pc, #36]	; (8005910 <Calibrate_gyro+0xb4>)
 80058ec:	6660      	str	r0, [r4, #100]	; 0x64
 80058ee:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80058f0:	f7fb fab0 	bl	8000e54 <__aeabi_fdiv>
 80058f4:	66a0      	str	r0, [r4, #104]	; 0x68
	HAL_Delay(100);
 80058f6:	2064      	movs	r0, #100	; 0x64
 80058f8:	f7fb fc42 	bl	8001180 <HAL_Delay>
}
 80058fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PrintData(2);
 8005900:	2002      	movs	r0, #2
 8005902:	f001 bb83 	b.w	800700c <PrintData>
 8005906:	bf00      	nop
 8005908:	200010e8 	.word	0x200010e8
 800590c:	20000d54 	.word	0x20000d54
 8005910:	44fa0000 	.word	0x44fa0000
 8005914:	40010c00 	.word	0x40010c00
 8005918:	0800ae91 	.word	0x0800ae91
 800591c:	20000da4 	.word	0x20000da4

08005920 <Temp_getADC>:

void Temp_getADC(void)
{
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 8005920:	2302      	movs	r3, #2
{
 8005922:	b513      	push	{r0, r1, r4, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 8005924:	4c0c      	ldr	r4, [pc, #48]	; (8005958 <Temp_getADC+0x38>)
 8005926:	2201      	movs	r2, #1
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	2141      	movs	r1, #65	; 0x41
 800592c:	4623      	mov	r3, r4
 800592e:	20d2      	movs	r0, #210	; 0xd2
 8005930:	f7fe fb38 	bl	8003fa4 <I2C_ByteRead>
	/* Get acceleration */
	imu.rawTemp = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005934:	7823      	ldrb	r3, [r4, #0]
 8005936:	7860      	ldrb	r0, [r4, #1]
 8005938:	4c08      	ldr	r4, [pc, #32]	; (800595c <Temp_getADC+0x3c>)
 800593a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800593e:	b200      	sxth	r0, r0
 8005940:	8260      	strh	r0, [r4, #18]
	imu.Temp = ((float)imu.rawTemp / 337.87f) + 21.0f;
 8005942:	f7fb f97f 	bl	8000c44 <__aeabi_i2f>
 8005946:	4906      	ldr	r1, [pc, #24]	; (8005960 <Temp_getADC+0x40>)
 8005948:	f7fb fa84 	bl	8000e54 <__aeabi_fdiv>
 800594c:	4905      	ldr	r1, [pc, #20]	; (8005964 <Temp_getADC+0x44>)
 800594e:	f7fb f8c5 	bl	8000adc <__addsf3>
 8005952:	6520      	str	r0, [r4, #80]	; 0x50
}
 8005954:	b002      	add	sp, #8
 8005956:	bd10      	pop	{r4, pc}
 8005958:	20000d98 	.word	0x20000d98
 800595c:	20000cf8 	.word	0x20000cf8
 8005960:	43a8ef5c 	.word	0x43a8ef5c
 8005964:	41a80000 	.word	0x41a80000

08005968 <calibrateMPU9250>:
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

// reset device, reset all registers, clear gyro and accelerometer bias registers
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8005968:	2380      	movs	r3, #128	; 0x80
{
 800596a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_Delay(100); // for stability
// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 800596e:	2601      	movs	r6, #1
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 8005970:	2400      	movs	r4, #0
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 8005972:	f04f 0b0c 	mov.w	fp, #12
{
 8005976:	b087      	sub	sp, #28
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8005978:	2207      	movs	r2, #7
 800597a:	9300      	str	r3, [sp, #0]
{
 800597c:	4682      	mov	sl, r0
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 800597e:	2308      	movs	r3, #8
 8005980:	20d2      	movs	r0, #210	; 0xd2
{
 8005982:	4689      	mov	r9, r1
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8005984:	216b      	movs	r1, #107	; 0x6b
 8005986:	f7fe fad7 	bl	8003f38 <I2C_ByteWrite>
  HAL_Delay(100); // for stability
 800598a:	2064      	movs	r0, #100	; 0x64
 800598c:	f7fb fbf8 	bl	8001180 <HAL_Delay>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 8005990:	9600      	str	r6, [sp, #0]
 8005992:	2308      	movs	r3, #8
 8005994:	2207      	movs	r2, #7
 8005996:	216b      	movs	r1, #107	; 0x6b
 8005998:	20d2      	movs	r0, #210	; 0xd2
 800599a:	f7fe facd 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 800599e:	2308      	movs	r3, #8
 80059a0:	2207      	movs	r2, #7
 80059a2:	216c      	movs	r1, #108	; 0x6c
 80059a4:	20d2      	movs	r0, #210	; 0xd2
 80059a6:	9400      	str	r4, [sp, #0]
 80059a8:	f7fe fac6 	bl	8003f38 <I2C_ByteWrite>
  HAL_Delay(200); // for stability
 80059ac:	20c8      	movs	r0, #200	; 0xc8
 80059ae:	f7fb fbe7 	bl	8001180 <HAL_Delay>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
 80059b2:	2308      	movs	r3, #8
 80059b4:	2207      	movs	r2, #7
 80059b6:	2138      	movs	r1, #56	; 0x38
 80059b8:	20d2      	movs	r0, #210	; 0xd2
 80059ba:	9400      	str	r4, [sp, #0]
 80059bc:	f7fe fabc 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
 80059c0:	2308      	movs	r3, #8
 80059c2:	2207      	movs	r2, #7
 80059c4:	2123      	movs	r1, #35	; 0x23
 80059c6:	20d2      	movs	r0, #210	; 0xd2
 80059c8:	9400      	str	r4, [sp, #0]
 80059ca:	f7fe fab5 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
 80059ce:	2308      	movs	r3, #8
 80059d0:	2207      	movs	r2, #7
 80059d2:	216b      	movs	r1, #107	; 0x6b
 80059d4:	20d2      	movs	r0, #210	; 0xd2
 80059d6:	9400      	str	r4, [sp, #0]
 80059d8:	f7fe faae 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
 80059dc:	2308      	movs	r3, #8
 80059de:	2207      	movs	r2, #7
 80059e0:	2124      	movs	r1, #36	; 0x24
 80059e2:	20d2      	movs	r0, #210	; 0xd2
 80059e4:	9400      	str	r4, [sp, #0]
 80059e6:	f7fe faa7 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
 80059ea:	2308      	movs	r3, #8
 80059ec:	2207      	movs	r2, #7
 80059ee:	216a      	movs	r1, #106	; 0x6a
 80059f0:	20d2      	movs	r0, #210	; 0xd2
 80059f2:	9400      	str	r4, [sp, #0]
 80059f4:	f7fe faa0 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 80059f8:	2308      	movs	r3, #8
 80059fa:	2207      	movs	r2, #7
 80059fc:	216a      	movs	r1, #106	; 0x6a
 80059fe:	20d2      	movs	r0, #210	; 0xd2
 8005a00:	f8cd b000 	str.w	fp, [sp]
 8005a04:	f7fe fa98 	bl	8003f38 <I2C_ByteWrite>
  HAL_Delay(15); // for stability
 8005a08:	200f      	movs	r0, #15
 8005a0a:	f7fb fbb9 	bl	8001180 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation.

  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x01); // Set low-pass filter to 188 Hz
 8005a0e:	9600      	str	r6, [sp, #0]
 8005a10:	2308      	movs	r3, #8
 8005a12:	2207      	movs	r2, #7
 8005a14:	211a      	movs	r1, #26
 8005a16:	20d2      	movs	r0, #210	; 0xd2
 8005a18:	f7fe fa8e 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set sample rate to 1 kHz
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	2207      	movs	r2, #7
 8005a20:	2119      	movs	r1, #25
 8005a22:	20d2      	movs	r0, #210	; 0xd2
 8005a24:	9400      	str	r4, [sp, #0]
 8005a26:	f7fe fa87 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8005a2a:	2308      	movs	r3, #8
 8005a2c:	2207      	movs	r2, #7
 8005a2e:	211b      	movs	r1, #27
 8005a30:	20d2      	movs	r0, #210	; 0xd2
 8005a32:	9400      	str	r4, [sp, #0]
 8005a34:	f7fe fa80 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8005a38:	2308      	movs	r3, #8
 8005a3a:	2207      	movs	r2, #7
 8005a3c:	211c      	movs	r1, #28
 8005a3e:	20d2      	movs	r0, #210	; 0xd2
 8005a40:	9400      	str	r4, [sp, #0]
 8005a42:	f7fe fa79 	bl	8003f38 <I2C_ByteWrite>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x40); // Enable FIFO
 8005a46:	2340      	movs	r3, #64	; 0x40
 8005a48:	2207      	movs	r2, #7
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	216a      	movs	r1, #106	; 0x6a
 8005a4e:	2308      	movs	r3, #8
 8005a50:	20d2      	movs	r0, #210	; 0xd2
 8005a52:	f7fe fa71 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8005a56:	2378      	movs	r3, #120	; 0x78
 8005a58:	2207      	movs	r2, #7
 8005a5a:	2123      	movs	r1, #35	; 0x23
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	20d2      	movs	r0, #210	; 0xd2
 8005a60:	2308      	movs	r3, #8
 8005a62:	f7fe fa69 	bl	8003f38 <I2C_ByteWrite>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8005a66:	2028      	movs	r0, #40	; 0x28
 8005a68:	f7fb fb8a 	bl	8001180 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable gyro and accelerometer sensors for FIFO
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	2207      	movs	r2, #7
 8005a70:	2123      	movs	r1, #35	; 0x23
 8005a72:	20d2      	movs	r0, #210	; 0xd2
 8005a74:	9400      	str	r4, [sp, #0]
 8005a76:	f7fe fa5f 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_COUNTH, 1, rawADC, 2);// read FIFO sample count
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	4d56      	ldr	r5, [pc, #344]	; (8005bd8 <calibrateMPU9250+0x270>)
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	4632      	mov	r2, r6
 8005a82:	462b      	mov	r3, r5
 8005a84:	2172      	movs	r1, #114	; 0x72
 8005a86:	20d2      	movs	r0, #210	; 0xd2
 8005a88:	f7fe fa8c 	bl	8003fa4 <I2C_ByteRead>
  fifo_count = ((uint16_t)rawADC[0] << 8) | rawADC[1];
 8005a8c:	782b      	ldrb	r3, [r5, #0]
 8005a8e:	786e      	ldrb	r6, [r5, #1]
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8005a90:	4627      	mov	r7, r4
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8005a92:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8005a96:	fbb6 f6fb 	udiv	r6, r6, fp
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8005a9a:	46a0      	mov	r8, r4
 8005a9c:	9402      	str	r4, [sp, #8]
 8005a9e:	9405      	str	r4, [sp, #20]
 8005aa0:	9404      	str	r4, [sp, #16]
 8005aa2:	9403      	str	r4, [sp, #12]

  for (ii = 0; ii < packet_count; ii++) {
 8005aa4:	b2a3      	uxth	r3, r4
 8005aa6:	429e      	cmp	r6, r3
 8005aa8:	d860      	bhi.n	8005b6c <calibrateMPU9250+0x204>
    gyro_bias[2]  += (int32_t) gyro_temp[2];

}
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
    accel_bias[1] /= (int32_t) packet_count;
    accel_bias[2] /= (int32_t) packet_count;
 8005aaa:	9b02      	ldr	r3, [sp, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 8005aac:	9a03      	ldr	r2, [sp, #12]
    accel_bias[2] /= (int32_t) packet_count;
 8005aae:	fb93 f3f6 	sdiv	r3, r3, r6
    gyro_bias[0]  /= (int32_t) packet_count;
 8005ab2:	fb92 f0f6 	sdiv	r0, r2, r6
    gyro_bias[1]  /= (int32_t) packet_count;
 8005ab6:	9a04      	ldr	r2, [sp, #16]
    gyro_bias[2]  /= (int32_t) packet_count;

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8005ab8:	2b00      	cmp	r3, #0
    gyro_bias[1]  /= (int32_t) packet_count;
 8005aba:	fb92 f5f6 	sdiv	r5, r2, r6
    gyro_bias[2]  /= (int32_t) packet_count;
 8005abe:	9a05      	ldr	r2, [sp, #20]
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8005ac0:	bfcc      	ite	gt
 8005ac2:	f5a3 4480 	subgt.w	r4, r3, #16384	; 0x4000
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8005ac6:	f503 4480 	addle.w	r4, r3, #16384	; 0x4000
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8005aca:	fb98 f8f6 	sdiv	r8, r8, r6
    accel_bias[1] /= (int32_t) packet_count;
 8005ace:	fb97 f7f6 	sdiv	r7, r7, r6
    gyro_bias[2]  /= (int32_t) packet_count;
 8005ad2:	fb92 f6f6 	sdiv	r6, r2, r6
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YG_OFFS_USRL, 7, 8, data[3]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRH, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRL, 7, 8, data[5]);
*/
	
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8005ad6:	f7fb f8b5 	bl	8000c44 <__aeabi_i2f>
 8005ada:	4940      	ldr	r1, [pc, #256]	; (8005bdc <calibrateMPU9250+0x274>)
 8005adc:	f7fb f9ba 	bl	8000e54 <__aeabi_fdiv>
 8005ae0:	f8ca 0000 	str.w	r0, [sl]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f7fb f8ad 	bl	8000c44 <__aeabi_i2f>
 8005aea:	493c      	ldr	r1, [pc, #240]	; (8005bdc <calibrateMPU9250+0x274>)
 8005aec:	f7fb f9b2 	bl	8000e54 <__aeabi_fdiv>
 8005af0:	f8ca 0004 	str.w	r0, [sl, #4]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7fb f8a5 	bl	8000c44 <__aeabi_i2f>
 8005afa:	4938      	ldr	r1, [pc, #224]	; (8005bdc <calibrateMPU9250+0x274>)
 8005afc:	f7fb f9aa 	bl	8000e54 <__aeabi_fdiv>
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 8005b00:	2502      	movs	r5, #2
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8005b02:	f8ca 0008 	str.w	r0, [sl, #8]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 8005b06:	9500      	str	r5, [sp, #0]
 8005b08:	4b33      	ldr	r3, [pc, #204]	; (8005bd8 <calibrateMPU9250+0x270>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	2177      	movs	r1, #119	; 0x77
 8005b0e:	20d2      	movs	r0, #210	; 0xd2
 8005b10:	f7fe fa48 	bl	8003fa4 <I2C_ByteRead>
  accel_bias_reg[0] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YA_OFFSET_H, 1, rawADC, 2);
 8005b14:	9500      	str	r5, [sp, #0]
 8005b16:	4b30      	ldr	r3, [pc, #192]	; (8005bd8 <calibrateMPU9250+0x270>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	217a      	movs	r1, #122	; 0x7a
 8005b1c:	20d2      	movs	r0, #210	; 0xd2
 8005b1e:	f7fe fa41 	bl	8003fa4 <I2C_ByteRead>
  accel_bias_reg[1] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 1, rawADC, 2);
 8005b22:	4b2d      	ldr	r3, [pc, #180]	; (8005bd8 <calibrateMPU9250+0x270>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	217d      	movs	r1, #125	; 0x7d
 8005b28:	9500      	str	r5, [sp, #0]
 8005b2a:	20d2      	movs	r0, #210	; 0xd2
 8005b2c:	f7fe fa3a 	bl	8003fa4 <I2C_ByteRead>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_L, 7, 8, data[5]);*/


// Output scaled accelerometer biases for manual subtraction in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8005b30:	4640      	mov	r0, r8
 8005b32:	f7fb f887 	bl	8000c44 <__aeabi_i2f>
 8005b36:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8005b3a:	f7fb f8d7 	bl	8000cec <__aeabi_fmul>
 8005b3e:	f8c9 0000 	str.w	r0, [r9]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8005b42:	4638      	mov	r0, r7
 8005b44:	f7fb f87e 	bl	8000c44 <__aeabi_i2f>
 8005b48:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8005b4c:	f7fb f8ce 	bl	8000cec <__aeabi_fmul>
 8005b50:	f8c9 0004 	str.w	r0, [r9, #4]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8005b54:	4620      	mov	r0, r4
 8005b56:	f7fb f875 	bl	8000c44 <__aeabi_i2f>
 8005b5a:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8005b5e:	f7fb f8c5 	bl	8000cec <__aeabi_fmul>
 8005b62:	f8c9 0008 	str.w	r0, [r9, #8]
}
 8005b66:	b007      	add	sp, #28
 8005b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_FIFO_R_W, 1, rawADC, 12);// read data for averaging
 8005b6c:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <calibrateMPU9250+0x270>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f8cd b000 	str.w	fp, [sp]
 8005b74:	2174      	movs	r1, #116	; 0x74
 8005b76:	20d2      	movs	r0, #210	; 0xd2
 8005b78:	f7fe fa14 	bl	8003fa4 <I2C_ByteRead>
    accel_temp[0] = (int16_t) (((int16_t)rawADC[0] << 8) | rawADC[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8005b7c:	782a      	ldrb	r2, [r5, #0]
 8005b7e:	786b      	ldrb	r3, [r5, #1]
 8005b80:	3401      	adds	r4, #1
 8005b82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8005b86:	b21b      	sxth	r3, r3
    accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 8005b88:	78aa      	ldrb	r2, [r5, #2]
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8005b8a:	4498      	add	r8, r3
    accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 8005b8c:	78eb      	ldrb	r3, [r5, #3]
 8005b8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[1] += (int32_t) accel_temp[1];
 8005b92:	b21b      	sxth	r3, r3
    accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 8005b94:	792a      	ldrb	r2, [r5, #4]
    accel_bias[1] += (int32_t) accel_temp[1];
 8005b96:	441f      	add	r7, r3
    accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 8005b98:	796b      	ldrb	r3, [r5, #5]
 8005b9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[2] += (int32_t) accel_temp[2];
 8005b9e:	9a02      	ldr	r2, [sp, #8]
 8005ba0:	b21b      	sxth	r3, r3
 8005ba2:	441a      	add	r2, r3
 8005ba4:	9202      	str	r2, [sp, #8]
    gyro_temp[0]  = (int16_t) (((int16_t)rawADC[6] << 8) | rawADC[7]  ) ;
 8005ba6:	79eb      	ldrb	r3, [r5, #7]
 8005ba8:	79aa      	ldrb	r2, [r5, #6]
 8005baa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8005bae:	9a03      	ldr	r2, [sp, #12]
 8005bb0:	b21b      	sxth	r3, r3
 8005bb2:	441a      	add	r2, r3
 8005bb4:	9203      	str	r2, [sp, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)rawADC[8] << 8) | rawADC[9]  ) ;
 8005bb6:	7a6b      	ldrb	r3, [r5, #9]
 8005bb8:	7a2a      	ldrb	r2, [r5, #8]
 8005bba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8005bbe:	9a04      	ldr	r2, [sp, #16]
 8005bc0:	b21b      	sxth	r3, r3
 8005bc2:	441a      	add	r2, r3
 8005bc4:	9204      	str	r2, [sp, #16]
    gyro_temp[2]  = (int16_t) (((int16_t)rawADC[10] << 8) | rawADC[11]) ;
 8005bc6:	7aeb      	ldrb	r3, [r5, #11]
 8005bc8:	7aaa      	ldrb	r2, [r5, #10]
 8005bca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8005bce:	9a05      	ldr	r2, [sp, #20]
 8005bd0:	b21b      	sxth	r3, r3
 8005bd2:	441a      	add	r2, r3
 8005bd4:	9205      	str	r2, [sp, #20]
 8005bd6:	e765      	b.n	8005aa4 <calibrateMPU9250+0x13c>
 8005bd8:	20000d98 	.word	0x20000d98
 8005bdc:	43030000 	.word	0x43030000

08005be0 <initAK8963>:
void initAK8963(float * destination)
{
 8005be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// First extract the factory calibration for each magnetometer axis
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8005be2:	2600      	movs	r6, #0
{
 8005be4:	4605      	mov	r5, r0
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8005be6:	2308      	movs	r3, #8
 8005be8:	2207      	movs	r2, #7
 8005bea:	210a      	movs	r1, #10
 8005bec:	9600      	str	r6, [sp, #0]
 8005bee:	2018      	movs	r0, #24
 8005bf0:	f7fe f9a2 	bl	8003f38 <I2C_ByteWrite>
	  HAL_Delay(10);
 8005bf4:	200a      	movs	r0, #10
 8005bf6:	f7fb fac3 	bl	8001180 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x0F);// Enter Fuse ROM access mode
 8005bfa:	230f      	movs	r3, #15
 8005bfc:	2207      	movs	r2, #7
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	210a      	movs	r1, #10
 8005c02:	2308      	movs	r3, #8
 8005c04:	2018      	movs	r0, #24
 8005c06:	f7fe f997 	bl	8003f38 <I2C_ByteWrite>
	  HAL_Delay(10);
 8005c0a:	200a      	movs	r0, #10
 8005c0c:	f7fb fab8 	bl	8001180 <HAL_Delay>
	  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, AK8963_ASAX, 1, rawADC, 3);// Read the x-, y-, and z-axis calibration values
 8005c10:	2303      	movs	r3, #3
 8005c12:	4c26      	ldr	r4, [pc, #152]	; (8005cac <initAK8963+0xcc>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2110      	movs	r1, #16
 8005c1a:	4623      	mov	r3, r4
 8005c1c:	2018      	movs	r0, #24
 8005c1e:	f7fe f9c1 	bl	8003fa4 <I2C_ByteRead>
	  destination[0] =  (float)(rawADC[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8005c22:	7820      	ldrb	r0, [r4, #0]
 8005c24:	3880      	subs	r0, #128	; 0x80
 8005c26:	f7fb f80d 	bl	8000c44 <__aeabi_i2f>
 8005c2a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005c2e:	f7fb f85d 	bl	8000cec <__aeabi_fmul>
 8005c32:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005c36:	f7fa ff51 	bl	8000adc <__addsf3>
 8005c3a:	6028      	str	r0, [r5, #0]
	  destination[1] =  (float)(rawADC[1] - 128)/256.0f + 1.0f;
 8005c3c:	7860      	ldrb	r0, [r4, #1]
 8005c3e:	3880      	subs	r0, #128	; 0x80
 8005c40:	f7fb f800 	bl	8000c44 <__aeabi_i2f>
 8005c44:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005c48:	f7fb f850 	bl	8000cec <__aeabi_fmul>
 8005c4c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005c50:	f7fa ff44 	bl	8000adc <__addsf3>
 8005c54:	6068      	str	r0, [r5, #4]
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 8005c56:	78a0      	ldrb	r0, [r4, #2]
 8005c58:	3880      	subs	r0, #128	; 0x80
 8005c5a:	f7fa fff3 	bl	8000c44 <__aeabi_i2f>
 8005c5e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005c62:	f7fb f843 	bl	8000cec <__aeabi_fmul>
 8005c66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005c6a:	f7fa ff37 	bl	8000adc <__addsf3>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8005c6e:	2308      	movs	r3, #8
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 8005c70:	60a8      	str	r0, [r5, #8]
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8005c72:	2207      	movs	r2, #7
 8005c74:	210a      	movs	r1, #10
 8005c76:	9600      	str	r6, [sp, #0]
 8005c78:	2018      	movs	r0, #24
 8005c7a:	f7fe f95d 	bl	8003f38 <I2C_ByteWrite>
	  HAL_Delay(10);
 8005c7e:	200a      	movs	r0, #10
 8005c80:	f7fb fa7e 	bl	8001180 <HAL_Delay>
	  // Configure the magnetometer for continuous read and highest resolution
	  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <initAK8963+0xd0>)
 8005c86:	210a      	movs	r1, #10
 8005c88:	781a      	ldrb	r2, [r3, #0]
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <initAK8963+0xd4>)
 8005c8c:	2018      	movs	r0, #24
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	2207      	movs	r2, #7
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	f7fe f94c 	bl	8003f38 <I2C_ByteWrite>
	  HAL_Delay(10);
 8005ca0:	200a      	movs	r0, #10
}
 8005ca2:	b002      	add	sp, #8
 8005ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  HAL_Delay(10);
 8005ca8:	f7fb ba6a 	b.w	8001180 <HAL_Delay>
 8005cac:	20000d98 	.word	0x20000d98
 8005cb0:	20000009 	.word	0x20000009
 8005cb4:	20000008 	.word	0x20000008

08005cb8 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t selfTest[6] = {0, 0, 0, 0, 0, 0};
   uint16_t i, ii;
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8005cbc:	2400      	movs	r4, #0
   float factoryTrim[6];
   uint8_t FS = GFS_250DPS;

   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8005cbe:	2502      	movs	r5, #2
{
 8005cc0:	b097      	sub	sp, #92	; 0x5c
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8005cc2:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8005cc6:	ae0c      	add	r6, sp, #48	; 0x30
 8005cc8:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8005ccc:	f8aa 4004 	strh.w	r4, [sl, #4]
 8005cd0:	80b4      	strh	r4, [r6, #4]
 8005cd2:	f8ab 4004 	strh.w	r4, [fp, #4]
{
 8005cd6:	9007      	str	r0, [sp, #28]
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 8005cd8:	9400      	str	r4, [sp, #0]
 8005cda:	2308      	movs	r3, #8
 8005cdc:	2207      	movs	r2, #7
 8005cde:	2119      	movs	r1, #25
 8005ce0:	20d2      	movs	r0, #210	; 0xd2
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8005ce2:	9408      	str	r4, [sp, #32]
 8005ce4:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8005ce8:	940a      	str	r4, [sp, #40]	; 0x28
 8005cea:	940c      	str	r4, [sp, #48]	; 0x30
 8005cec:	940e      	str	r4, [sp, #56]	; 0x38
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 8005cee:	f7fe f923 	bl	8003f38 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8005cf2:	9500      	str	r5, [sp, #0]
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	2207      	movs	r2, #7
 8005cf8:	211a      	movs	r1, #26
 8005cfa:	20d2      	movs	r0, #210	; 0xd2
 8005cfc:	f7fe f91c 	bl	8003f38 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, FS<<3);// Set full scale range for the gyro to 250 dps
 8005d00:	9400      	str	r4, [sp, #0]
 8005d02:	2308      	movs	r3, #8
 8005d04:	2207      	movs	r2, #7
 8005d06:	211b      	movs	r1, #27
 8005d08:	20d2      	movs	r0, #210	; 0xd2
 8005d0a:	f7fe f915 	bl	8003f38 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, 0x1D, 7, 8, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8005d0e:	9500      	str	r5, [sp, #0]
 8005d10:	2308      	movs	r3, #8
 8005d12:	2207      	movs	r2, #7
 8005d14:	211d      	movs	r1, #29
 8005d16:	20d2      	movs	r0, #210	; 0xd2
 8005d18:	f7fe f90e 	bl	8003f38 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, FS<<3);// Set full scale range for the accelerometer to 2 g
 8005d1c:	9400      	str	r4, [sp, #0]
 8005d1e:	2308      	movs	r3, #8
 8005d20:	2207      	movs	r2, #7
 8005d22:	211c      	movs	r1, #28
 8005d24:	20d2      	movs	r0, #210	; 0xd2
 8005d26:	f7fe f907 	bl	8003f38 <I2C_ByteWrite>
 8005d2a:	25c8      	movs	r5, #200	; 0xc8

  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);  // Read the six raw data registers into data array
 8005d2c:	4ccc      	ldr	r4, [pc, #816]	; (8006060 <MPU9250SelfTest+0x3a8>)
 8005d2e:	2706      	movs	r7, #6
 8005d30:	4bcb      	ldr	r3, [pc, #812]	; (8006060 <MPU9250SelfTest+0x3a8>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	213b      	movs	r1, #59	; 0x3b
 8005d36:	20d2      	movs	r0, #210	; 0xd2
 8005d38:	9700      	str	r7, [sp, #0]
 8005d3a:	f7fe f933 	bl	8003fa4 <I2C_ByteRead>
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8005d3e:	7822      	ldrb	r2, [r4, #0]
 8005d40:	7863      	ldrb	r3, [r4, #1]
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8005d42:	2143      	movs	r1, #67	; 0x43
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8005d44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d48:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8005d4c:	20d2      	movs	r0, #210	; 0xd2
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8005d4e:	4413      	add	r3, r2
 8005d50:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8005d54:	78a2      	ldrb	r2, [r4, #2]
 8005d56:	78e3      	ldrb	r3, [r4, #3]
 8005d58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d5c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8005d60:	4413      	add	r3, r2
 8005d62:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8005d66:	7922      	ldrb	r2, [r4, #4]
 8005d68:	7963      	ldrb	r3, [r4, #5]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8005d6a:	9700      	str	r7, [sp, #0]
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8005d6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d70:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8005d74:	4413      	add	r3, r2
 8005d76:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4bb8      	ldr	r3, [pc, #736]	; (8006060 <MPU9250SelfTest+0x3a8>)
 8005d7e:	f7fe f911 	bl	8003fa4 <I2C_ByteRead>
  gAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8005d82:	7822      	ldrb	r2, [r4, #0]
 8005d84:	7863      	ldrb	r3, [r4, #1]
 8005d86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d8a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f8ad 3020 	strh.w	r3, [sp, #32]
  gAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8005d94:	78a2      	ldrb	r2, [r4, #2]
 8005d96:	78e3      	ldrb	r3, [r4, #3]
 8005d98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d9c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8005da0:	4413      	add	r3, r2
 8005da2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  gAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8005da6:	7922      	ldrb	r2, [r4, #4]
 8005da8:	7963      	ldrb	r3, [r4, #5]
 8005daa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dae:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8005db2:	4413      	add	r3, r2
 8005db4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8005db8:	1e6b      	subs	r3, r5, #1
 8005dba:	b29d      	uxth	r5, r3
  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8005dbc:	2d00      	cmp	r5, #0
 8005dbe:	d1b6      	bne.n	8005d2e <MPU9250SelfTest+0x76>
 8005dc0:	462b      	mov	r3, r5
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
  aAvg[ii] /= 200;
 8005dc2:	21c8      	movs	r1, #200	; 0xc8
 8005dc4:	f93a 2013 	ldrsh.w	r2, [sl, r3, lsl #1]
  gAvg[ii] /= 200;
 8005dc8:	a808      	add	r0, sp, #32
  aAvg[ii] /= 200;
 8005dca:	fb92 f2f1 	sdiv	r2, r2, r1
 8005dce:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
  gAvg[ii] /= 200;
 8005dd2:	aa08      	add	r2, sp, #32
 8005dd4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8005dd8:	fb92 f2f1 	sdiv	r2, r2, r1
 8005ddc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8005de0:	3301      	adds	r3, #1
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d1ee      	bne.n	8005dc4 <MPU9250SelfTest+0x10c>
  }

// Configure the accelerometer for self-test
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8005de6:	25e0      	movs	r5, #224	; 0xe0
 8005de8:	2308      	movs	r3, #8
 8005dea:	9500      	str	r5, [sp, #0]
 8005dec:	2207      	movs	r2, #7
 8005dee:	211c      	movs	r1, #28
 8005df0:	20d2      	movs	r0, #210	; 0xd2
 8005df2:	f7fe f8a1 	bl	8003f38 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8005df6:	9500      	str	r5, [sp, #0]
 8005df8:	2308      	movs	r3, #8
 8005dfa:	2207      	movs	r2, #7
 8005dfc:	211b      	movs	r1, #27
 8005dfe:	20d2      	movs	r0, #210	; 0xd2
 8005e00:	f7fe f89a 	bl	8003f38 <I2C_ByteWrite>
   HAL_Delay(25); // Delay a while to let the device stabilize
 8005e04:	2019      	movs	r0, #25
 8005e06:	f7fb f9bb 	bl	8001180 <HAL_Delay>
 8005e0a:	25c8      	movs	r5, #200	; 0xc8

  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6); // Read the six raw data registers into data array
 8005e0c:	4f94      	ldr	r7, [pc, #592]	; (8006060 <MPU9250SelfTest+0x3a8>)
 8005e0e:	f04f 0806 	mov.w	r8, #6
 8005e12:	463b      	mov	r3, r7
 8005e14:	2201      	movs	r2, #1
 8005e16:	213b      	movs	r1, #59	; 0x3b
 8005e18:	20d2      	movs	r0, #210	; 0xd2
 8005e1a:	f8cd 8000 	str.w	r8, [sp]
 8005e1e:	f7fe f8c1 	bl	8003fa4 <I2C_ByteRead>
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8005e22:	7822      	ldrb	r2, [r4, #0]
 8005e24:	7863      	ldrb	r3, [r4, #1]
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8005e26:	2143      	movs	r1, #67	; 0x43
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8005e28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e2c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8005e30:	20d2      	movs	r0, #210	; 0xd2
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8005e32:	4413      	add	r3, r2
 8005e34:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8005e38:	78a2      	ldrb	r2, [r4, #2]
 8005e3a:	78e3      	ldrb	r3, [r4, #3]
 8005e3c:	3d01      	subs	r5, #1
 8005e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e42:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8005e46:	b2ad      	uxth	r5, r5
 8005e48:	4413      	add	r3, r2
 8005e4a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8005e4e:	7922      	ldrb	r2, [r4, #4]
 8005e50:	7963      	ldrb	r3, [r4, #5]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8005e52:	f8cd 8000 	str.w	r8, [sp]
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8005e56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e5a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8005e5e:	4413      	add	r3, r2
 8005e60:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8005e64:	2201      	movs	r2, #1
 8005e66:	463b      	mov	r3, r7
 8005e68:	f7fe f89c 	bl	8003fa4 <I2C_ByteRead>
  gSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8005e6c:	7822      	ldrb	r2, [r4, #0]
 8005e6e:	7863      	ldrb	r3, [r4, #1]
 8005e70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e74:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8005e78:	4413      	add	r3, r2
 8005e7a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  gSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8005e7e:	78a2      	ldrb	r2, [r4, #2]
 8005e80:	78e3      	ldrb	r3, [r4, #3]
 8005e82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e86:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
  gSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8005e90:	7922      	ldrb	r2, [r4, #4]
 8005e92:	7963      	ldrb	r3, [r4, #5]
 8005e94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e98:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8005ea2:	2d00      	cmp	r5, #0
 8005ea4:	d1b3      	bne.n	8005e0e <MPU9250SelfTest+0x156>
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
  aSTAvg[ii] /= 200;
 8005ea6:	22c8      	movs	r2, #200	; 0xc8
 8005ea8:	f936 3015 	ldrsh.w	r3, [r6, r5, lsl #1]
 8005eac:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eb0:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
  gSTAvg[ii] /= 200;
 8005eb4:	f93b 3015 	ldrsh.w	r3, [fp, r5, lsl #1]
 8005eb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ebc:	f82b 3015 	strh.w	r3, [fp, r5, lsl #1]
 8005ec0:	3501      	adds	r5, #1
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8005ec2:	2d03      	cmp	r5, #3
 8005ec4:	d1f0      	bne.n	8005ea8 <MPU9250SelfTest+0x1f0>
  }

 // Configure the gyro and accelerometer for normal operation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 8005ec6:	2400      	movs	r4, #0
 8005ec8:	2308      	movs	r3, #8
 8005eca:	2207      	movs	r2, #7
 8005ecc:	211c      	movs	r1, #28
 8005ece:	20d2      	movs	r0, #210	; 0xd2
 8005ed0:	9400      	str	r4, [sp, #0]
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
  HAL_Delay(25); // Delay a while to let the device stabilize

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 8005ed2:	4f63      	ldr	r7, [pc, #396]	; (8006060 <MPU9250SelfTest+0x3a8>)
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 8005ed4:	f7fe f830 	bl	8003f38 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
 8005ed8:	2308      	movs	r3, #8
 8005eda:	2207      	movs	r2, #7
 8005edc:	211b      	movs	r1, #27
 8005ede:	20d2      	movs	r0, #210	; 0xd2
 8005ee0:	9400      	str	r4, [sp, #0]
 8005ee2:	f7fe f829 	bl	8003f38 <I2C_ByteWrite>
  HAL_Delay(25); // Delay a while to let the device stabilize
 8005ee6:	2019      	movs	r0, #25
 8005ee8:	f7fb f94a 	bl	8001180 <HAL_Delay>
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 8005eec:	463b      	mov	r3, r7
 8005eee:	9500      	str	r5, [sp, #0]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	210d      	movs	r1, #13
 8005ef4:	20d2      	movs	r0, #210	; 0xd2
 8005ef6:	f7fe f855 	bl	8003fa4 <I2C_ByteRead>
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 8005efa:	78bb      	ldrb	r3, [r7, #2]
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
 8005efc:	f897 9000 	ldrb.w	r9, [r7]
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
 8005f00:	f897 8001 	ldrb.w	r8, [r7, #1]
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 8005f04:	2201      	movs	r2, #1
 8005f06:	4621      	mov	r1, r4
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 8005f08:	9302      	str	r3, [sp, #8]
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 8005f0a:	9500      	str	r5, [sp, #0]
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	20d2      	movs	r0, #210	; 0xd2
 8005f10:	f7fe f848 	bl	8003fa4 <I2C_ByteRead>
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 8005f14:	783b      	ldrb	r3, [r7, #0]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8005f16:	4648      	mov	r0, r9
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 8005f18:	9305      	str	r3, [sp, #20]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 8005f1a:	787b      	ldrb	r3, [r7, #1]
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results
 8005f1c:	78bd      	ldrb	r5, [r7, #2]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 8005f1e:	9306      	str	r3, [sp, #24]
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8005f20:	f7fa fe8c 	bl	8000c3c <__aeabi_ui2f>
 8005f24:	f7fa fa80 	bl	8000428 <__aeabi_f2d>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4b4e      	ldr	r3, [pc, #312]	; (8006064 <MPU9250SelfTest+0x3ac>)
 8005f2c:	f7fa f91c 	bl	8000168 <__aeabi_dsub>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	a146      	add	r1, pc, #280	; (adr r1, 8006050 <MPU9250SelfTest+0x398>)
 8005f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f3a:	f002 fe7d 	bl	8008c38 <pow>
 8005f3e:	a346      	add	r3, pc, #280	; (adr r3, 8006058 <MPU9250SelfTest+0x3a0>)
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f7fa fac4 	bl	80004d0 <__aeabi_dmul>
 8005f48:	f7fa fd72 	bl	8000a30 <__aeabi_d2f>
 8005f4c:	9010      	str	r0, [sp, #64]	; 0x40
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8005f4e:	4640      	mov	r0, r8
 8005f50:	f7fa fe74 	bl	8000c3c <__aeabi_ui2f>
 8005f54:	f7fa fa68 	bl	8000428 <__aeabi_f2d>
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4b42      	ldr	r3, [pc, #264]	; (8006064 <MPU9250SelfTest+0x3ac>)
 8005f5c:	f7fa f904 	bl	8000168 <__aeabi_dsub>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	a13a      	add	r1, pc, #232	; (adr r1, 8006050 <MPU9250SelfTest+0x398>)
 8005f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f6a:	f002 fe65 	bl	8008c38 <pow>
 8005f6e:	a33a      	add	r3, pc, #232	; (adr r3, 8006058 <MPU9250SelfTest+0x3a0>)
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f7fa faac 	bl	80004d0 <__aeabi_dmul>
 8005f78:	f7fa fd5a 	bl	8000a30 <__aeabi_d2f>
 8005f7c:	9011      	str	r0, [sp, #68]	; 0x44
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8005f7e:	9802      	ldr	r0, [sp, #8]
 8005f80:	f7fa fe5c 	bl	8000c3c <__aeabi_ui2f>
 8005f84:	f7fa fa50 	bl	8000428 <__aeabi_f2d>
 8005f88:	2200      	movs	r2, #0
 8005f8a:	4b36      	ldr	r3, [pc, #216]	; (8006064 <MPU9250SelfTest+0x3ac>)
 8005f8c:	f7fa f8ec 	bl	8000168 <__aeabi_dsub>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	a12e      	add	r1, pc, #184	; (adr r1, 8006050 <MPU9250SelfTest+0x398>)
 8005f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f9a:	f002 fe4d 	bl	8008c38 <pow>
 8005f9e:	a32e      	add	r3, pc, #184	; (adr r3, 8006058 <MPU9250SelfTest+0x3a0>)
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f7fa fa94 	bl	80004d0 <__aeabi_dmul>
 8005fa8:	f7fa fd42 	bl	8000a30 <__aeabi_d2f>
 8005fac:	9012      	str	r0, [sp, #72]	; 0x48
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8005fae:	9805      	ldr	r0, [sp, #20]
 8005fb0:	f7fa fe44 	bl	8000c3c <__aeabi_ui2f>
 8005fb4:	f7fa fa38 	bl	8000428 <__aeabi_f2d>
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4b2a      	ldr	r3, [pc, #168]	; (8006064 <MPU9250SelfTest+0x3ac>)
 8005fbc:	f7fa f8d4 	bl	8000168 <__aeabi_dsub>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	a122      	add	r1, pc, #136	; (adr r1, 8006050 <MPU9250SelfTest+0x398>)
 8005fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fca:	f002 fe35 	bl	8008c38 <pow>
 8005fce:	a322      	add	r3, pc, #136	; (adr r3, 8006058 <MPU9250SelfTest+0x3a0>)
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f7fa fa7c 	bl	80004d0 <__aeabi_dmul>
 8005fd8:	f7fa fd2a 	bl	8000a30 <__aeabi_d2f>
 8005fdc:	9013      	str	r0, [sp, #76]	; 0x4c
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8005fde:	9806      	ldr	r0, [sp, #24]
 8005fe0:	f7fa fe2c 	bl	8000c3c <__aeabi_ui2f>
 8005fe4:	f7fa fa20 	bl	8000428 <__aeabi_f2d>
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4b1e      	ldr	r3, [pc, #120]	; (8006064 <MPU9250SelfTest+0x3ac>)
 8005fec:	f7fa f8bc 	bl	8000168 <__aeabi_dsub>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	a116      	add	r1, pc, #88	; (adr r1, 8006050 <MPU9250SelfTest+0x398>)
 8005ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ffa:	f002 fe1d 	bl	8008c38 <pow>
 8005ffe:	a316      	add	r3, pc, #88	; (adr r3, 8006058 <MPU9250SelfTest+0x3a0>)
 8006000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006004:	f7fa fa64 	bl	80004d0 <__aeabi_dmul>
 8006008:	f7fa fd12 	bl	8000a30 <__aeabi_d2f>
 800600c:	9014      	str	r0, [sp, #80]	; 0x50
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 800600e:	4628      	mov	r0, r5
 8006010:	f7fa fe14 	bl	8000c3c <__aeabi_ui2f>
 8006014:	f7fa fa08 	bl	8000428 <__aeabi_f2d>
 8006018:	2200      	movs	r2, #0
 800601a:	4b12      	ldr	r3, [pc, #72]	; (8006064 <MPU9250SelfTest+0x3ac>)
 800601c:	f7fa f8a4 	bl	8000168 <__aeabi_dsub>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	a10a      	add	r1, pc, #40	; (adr r1, 8006050 <MPU9250SelfTest+0x398>)
 8006026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800602a:	f002 fe05 	bl	8008c38 <pow>
 800602e:	a30a      	add	r3, pc, #40	; (adr r3, 8006058 <MPU9250SelfTest+0x3a0>)
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f7fa fa4c 	bl	80004d0 <__aeabi_dmul>
 8006038:	f7fa fcfa 	bl	8000a30 <__aeabi_d2f>

 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (i = 0; i < 3; i++) {
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.0; // Report percent differences
 800603c:	f04f 0800 	mov.w	r8, #0
 8006040:	9b07      	ldr	r3, [sp, #28]
 8006042:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8006068 <MPU9250SelfTest+0x3b0>
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8006046:	9015      	str	r0, [sp, #84]	; 0x54
 8006048:	af0f      	add	r7, sp, #60	; 0x3c
 800604a:	1f1d      	subs	r5, r3, #4
 800604c:	e00e      	b.n	800606c <MPU9250SelfTest+0x3b4>
 800604e:	bf00      	nop
 8006050:	c28f5c29 	.word	0xc28f5c29
 8006054:	3ff028f5 	.word	0x3ff028f5
 8006058:	00000000 	.word	0x00000000
 800605c:	40a47800 	.word	0x40a47800
 8006060:	20000d98 	.word	0x20000d98
 8006064:	3ff00000 	.word	0x3ff00000
 8006068:	40590000 	.word	0x40590000
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.0; // Report percent differences
 800606c:	f93a 3014 	ldrsh.w	r3, [sl, r4, lsl #1]
 8006070:	f936 0014 	ldrsh.w	r0, [r6, r4, lsl #1]
 8006074:	1ac0      	subs	r0, r0, r3
 8006076:	f7fa fde5 	bl	8000c44 <__aeabi_i2f>
 800607a:	f7fa f9d5 	bl	8000428 <__aeabi_f2d>
 800607e:	4642      	mov	r2, r8
 8006080:	464b      	mov	r3, r9
 8006082:	f7fa fa25 	bl	80004d0 <__aeabi_dmul>
 8006086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800608a:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800608e:	f7fa f9cb 	bl	8000428 <__aeabi_f2d>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800609a:	f7fa fb43 	bl	8000724 <__aeabi_ddiv>
 800609e:	4642      	mov	r2, r8
 80060a0:	464b      	mov	r3, r9
 80060a2:	f7fa f861 	bl	8000168 <__aeabi_dsub>
 80060a6:	f7fa fcc3 	bl	8000a30 <__aeabi_d2f>
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.0; // Report percent differences
 80060aa:	ab08      	add	r3, sp, #32
 80060ac:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.0; // Report percent differences
 80060b0:	f845 0f04 	str.w	r0, [r5, #4]!
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.0; // Report percent differences
 80060b4:	f93b 0014 	ldrsh.w	r0, [fp, r4, lsl #1]
 80060b8:	3401      	adds	r4, #1
 80060ba:	1ac0      	subs	r0, r0, r3
 80060bc:	f7fa fdc2 	bl	8000c44 <__aeabi_i2f>
 80060c0:	f7fa f9b2 	bl	8000428 <__aeabi_f2d>
 80060c4:	4642      	mov	r2, r8
 80060c6:	464b      	mov	r3, r9
 80060c8:	f7fa fa02 	bl	80004d0 <__aeabi_dmul>
 80060cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7fa f9a9 	bl	8000428 <__aeabi_f2d>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060de:	f7fa fb21 	bl	8000724 <__aeabi_ddiv>
 80060e2:	4642      	mov	r2, r8
 80060e4:	464b      	mov	r3, r9
 80060e6:	f7fa f83f 	bl	8000168 <__aeabi_dsub>
 80060ea:	f7fa fca1 	bl	8000a30 <__aeabi_d2f>
   for (i = 0; i < 3; i++) {
 80060ee:	2c03      	cmp	r4, #3
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.0; // Report percent differences
 80060f0:	60e8      	str	r0, [r5, #12]
   for (i = 0; i < 3; i++) {
 80060f2:	d1bb      	bne.n	800606c <MPU9250SelfTest+0x3b4>
   }
}
 80060f4:	b017      	add	sp, #92	; 0x5c
 80060f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fa:	bf00      	nop

080060fc <MPU9250_Init>:
{
 80060fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 8006100:	2401      	movs	r4, #1
 8006102:	4dc0      	ldr	r5, [pc, #768]	; (8006404 <MPU9250_Init+0x308>)
{
 8006104:	b085      	sub	sp, #20
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 8006106:	462b      	mov	r3, r5
 8006108:	4622      	mov	r2, r4
 800610a:	2175      	movs	r1, #117	; 0x75
 800610c:	20d2      	movs	r0, #210	; 0xd2
 800610e:	9400      	str	r4, [sp, #0]
 8006110:	f7fd ff48 	bl	8003fa4 <I2C_ByteRead>
    whoami = rawADC[0];
 8006114:	782e      	ldrb	r6, [r5, #0]
    sprintf(Buf, "I AM 0x%x\r\n", whoami);
 8006116:	49bc      	ldr	r1, [pc, #752]	; (8006408 <MPU9250_Init+0x30c>)
 8006118:	4632      	mov	r2, r6
 800611a:	48bc      	ldr	r0, [pc, #752]	; (800640c <MPU9250_Init+0x310>)
 800611c:	f002 f8a2 	bl	8008264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006120:	48ba      	ldr	r0, [pc, #744]	; (800640c <MPU9250_Init+0x310>)
 8006122:	f7fa f815 	bl	8000150 <strlen>
 8006126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800612a:	b282      	uxth	r2, r0
 800612c:	49b7      	ldr	r1, [pc, #732]	; (800640c <MPU9250_Init+0x310>)
 800612e:	48b8      	ldr	r0, [pc, #736]	; (8006410 <MPU9250_Init+0x314>)
 8006130:	f7fd fc32 	bl	8003998 <HAL_UART_Transmit>
    sprintf(Buf, "I SHOULD BE 0x71\r\n");
 8006134:	49b7      	ldr	r1, [pc, #732]	; (8006414 <MPU9250_Init+0x318>)
 8006136:	48b5      	ldr	r0, [pc, #724]	; (800640c <MPU9250_Init+0x310>)
 8006138:	f002 f8b8 	bl	80082ac <strcpy>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800613c:	48b3      	ldr	r0, [pc, #716]	; (800640c <MPU9250_Init+0x310>)
 800613e:	f7fa f807 	bl	8000150 <strlen>
 8006142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006146:	b282      	uxth	r2, r0
 8006148:	49b0      	ldr	r1, [pc, #704]	; (800640c <MPU9250_Init+0x310>)
 800614a:	48b1      	ldr	r0, [pc, #708]	; (8006410 <MPU9250_Init+0x314>)
 800614c:	f7fd fc24 	bl	8003998 <HAL_UART_Transmit>
  if(whoami == 0x71)
 8006150:	2e71      	cmp	r6, #113	; 0x71
 8006152:	f040 82a8 	bne.w	80066a6 <MPU9250_Init+0x5aa>
		sprintf(Buf, "MPU-9250 Init Start (9-DOF 16-bit mortion sensor)\r\nMPU-9250 SelfTest Start\r\n");
 8006156:	49b0      	ldr	r1, [pc, #704]	; (8006418 <MPU9250_Init+0x31c>)
 8006158:	48ac      	ldr	r0, [pc, #688]	; (800640c <MPU9250_Init+0x310>)
 800615a:	f002 f8a7 	bl	80082ac <strcpy>
	  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800615e:	48ab      	ldr	r0, [pc, #684]	; (800640c <MPU9250_Init+0x310>)
 8006160:	f7f9 fff6 	bl	8000150 <strlen>
 8006164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006168:	b282      	uxth	r2, r0
 800616a:	49a8      	ldr	r1, [pc, #672]	; (800640c <MPU9250_Init+0x310>)
 800616c:	48a8      	ldr	r0, [pc, #672]	; (8006410 <MPU9250_Init+0x314>)
 800616e:	f7fd fc13 	bl	8003998 <HAL_UART_Transmit>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 8006172:	2380      	movs	r3, #128	; 0x80
	  MPU9250SelfTest(SelfTest);
 8006174:	4ea9      	ldr	r6, [pc, #676]	; (800641c <MPU9250_Init+0x320>)
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 8006176:	2207      	movs	r2, #7
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	216b      	movs	r1, #107	; 0x6b
 800617c:	2308      	movs	r3, #8
 800617e:	20d2      	movs	r0, #210	; 0xd2
 8006180:	f7fd feda 	bl	8003f38 <I2C_ByteWrite>
	  MPU9250SelfTest(SelfTest);
 8006184:	4630      	mov	r0, r6
 8006186:	f7ff fd97 	bl	8005cb8 <MPU9250SelfTest>
		sprintf(Buf, "Self Test Finish\r\n");
 800618a:	49a5      	ldr	r1, [pc, #660]	; (8006420 <MPU9250_Init+0x324>)
 800618c:	489f      	ldr	r0, [pc, #636]	; (800640c <MPU9250_Init+0x310>)
 800618e:	f002 f88d 	bl	80082ac <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006192:	489e      	ldr	r0, [pc, #632]	; (800640c <MPU9250_Init+0x310>)
 8006194:	f7f9 ffdc 	bl	8000150 <strlen>
 8006198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800619c:	b282      	uxth	r2, r0
 800619e:	499b      	ldr	r1, [pc, #620]	; (800640c <MPU9250_Init+0x310>)
 80061a0:	489b      	ldr	r0, [pc, #620]	; (8006410 <MPU9250_Init+0x314>)
 80061a2:	f7fd fbf9 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80061a6:	2064      	movs	r0, #100	; 0x64
 80061a8:	f7fa ffea 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " x-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[0]);
 80061ac:	6830      	ldr	r0, [r6, #0]
 80061ae:	f7fa f93b 	bl	8000428 <__aeabi_f2d>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4895      	ldr	r0, [pc, #596]	; (800640c <MPU9250_Init+0x310>)
 80061b8:	499a      	ldr	r1, [pc, #616]	; (8006424 <MPU9250_Init+0x328>)
 80061ba:	f002 f853 	bl	8008264 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80061be:	4893      	ldr	r0, [pc, #588]	; (800640c <MPU9250_Init+0x310>)
 80061c0:	f7f9 ffc6 	bl	8000150 <strlen>
 80061c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061c8:	b282      	uxth	r2, r0
 80061ca:	4990      	ldr	r1, [pc, #576]	; (800640c <MPU9250_Init+0x310>)
 80061cc:	4890      	ldr	r0, [pc, #576]	; (8006410 <MPU9250_Init+0x314>)
 80061ce:	f7fd fbe3 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80061d2:	2064      	movs	r0, #100	; 0x64
 80061d4:	f7fa ffd4 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " y-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[1]);
 80061d8:	6870      	ldr	r0, [r6, #4]
 80061da:	f7fa f925 	bl	8000428 <__aeabi_f2d>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	488a      	ldr	r0, [pc, #552]	; (800640c <MPU9250_Init+0x310>)
 80061e4:	4990      	ldr	r1, [pc, #576]	; (8006428 <MPU9250_Init+0x32c>)
 80061e6:	f002 f83d 	bl	8008264 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80061ea:	4888      	ldr	r0, [pc, #544]	; (800640c <MPU9250_Init+0x310>)
 80061ec:	f7f9 ffb0 	bl	8000150 <strlen>
 80061f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061f4:	b282      	uxth	r2, r0
 80061f6:	4985      	ldr	r1, [pc, #532]	; (800640c <MPU9250_Init+0x310>)
 80061f8:	4885      	ldr	r0, [pc, #532]	; (8006410 <MPU9250_Init+0x314>)
 80061fa:	f7fd fbcd 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80061fe:	2064      	movs	r0, #100	; 0x64
 8006200:	f7fa ffbe 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " z-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[2]);
 8006204:	68b0      	ldr	r0, [r6, #8]
 8006206:	f7fa f90f 	bl	8000428 <__aeabi_f2d>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	487f      	ldr	r0, [pc, #508]	; (800640c <MPU9250_Init+0x310>)
 8006210:	4986      	ldr	r1, [pc, #536]	; (800642c <MPU9250_Init+0x330>)
 8006212:	f002 f827 	bl	8008264 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006216:	487d      	ldr	r0, [pc, #500]	; (800640c <MPU9250_Init+0x310>)
 8006218:	f7f9 ff9a 	bl	8000150 <strlen>
 800621c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006220:	b282      	uxth	r2, r0
 8006222:	497a      	ldr	r1, [pc, #488]	; (800640c <MPU9250_Init+0x310>)
 8006224:	487a      	ldr	r0, [pc, #488]	; (8006410 <MPU9250_Init+0x314>)
 8006226:	f7fd fbb7 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800622a:	2064      	movs	r0, #100	; 0x64
 800622c:	f7fa ffa8 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " x-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[3]);
 8006230:	68f0      	ldr	r0, [r6, #12]
 8006232:	f7fa f8f9 	bl	8000428 <__aeabi_f2d>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4874      	ldr	r0, [pc, #464]	; (800640c <MPU9250_Init+0x310>)
 800623c:	497c      	ldr	r1, [pc, #496]	; (8006430 <MPU9250_Init+0x334>)
 800623e:	f002 f811 	bl	8008264 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006242:	4872      	ldr	r0, [pc, #456]	; (800640c <MPU9250_Init+0x310>)
 8006244:	f7f9 ff84 	bl	8000150 <strlen>
 8006248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800624c:	b282      	uxth	r2, r0
 800624e:	496f      	ldr	r1, [pc, #444]	; (800640c <MPU9250_Init+0x310>)
 8006250:	486f      	ldr	r0, [pc, #444]	; (8006410 <MPU9250_Init+0x314>)
 8006252:	f7fd fba1 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006256:	2064      	movs	r0, #100	; 0x64
 8006258:	f7fa ff92 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " y-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[4]);
 800625c:	6930      	ldr	r0, [r6, #16]
 800625e:	f7fa f8e3 	bl	8000428 <__aeabi_f2d>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4869      	ldr	r0, [pc, #420]	; (800640c <MPU9250_Init+0x310>)
 8006268:	4972      	ldr	r1, [pc, #456]	; (8006434 <MPU9250_Init+0x338>)
 800626a:	f001 fffb 	bl	8008264 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800626e:	4867      	ldr	r0, [pc, #412]	; (800640c <MPU9250_Init+0x310>)
 8006270:	f7f9 ff6e 	bl	8000150 <strlen>
 8006274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006278:	b282      	uxth	r2, r0
 800627a:	4964      	ldr	r1, [pc, #400]	; (800640c <MPU9250_Init+0x310>)
 800627c:	4864      	ldr	r0, [pc, #400]	; (8006410 <MPU9250_Init+0x314>)
 800627e:	f7fd fb8b 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006282:	2064      	movs	r0, #100	; 0x64
 8006284:	f7fa ff7c 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " z-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[5]);
 8006288:	6970      	ldr	r0, [r6, #20]
 800628a:	f7fa f8cd 	bl	8000428 <__aeabi_f2d>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	485e      	ldr	r0, [pc, #376]	; (800640c <MPU9250_Init+0x310>)
 8006294:	4968      	ldr	r1, [pc, #416]	; (8006438 <MPU9250_Init+0x33c>)
 8006296:	f001 ffe5 	bl	8008264 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800629a:	485c      	ldr	r0, [pc, #368]	; (800640c <MPU9250_Init+0x310>)
 800629c:	f7f9 ff58 	bl	8000150 <strlen>
 80062a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062a4:	b282      	uxth	r2, r0
 80062a6:	4959      	ldr	r1, [pc, #356]	; (800640c <MPU9250_Init+0x310>)
 80062a8:	4859      	ldr	r0, [pc, #356]	; (8006410 <MPU9250_Init+0x314>)
 80062aa:	f7fd fb75 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80062ae:	2064      	movs	r0, #100	; 0x64
 80062b0:	f7fa ff66 	bl	8001180 <HAL_Delay>
		sprintf(Buf, "MPU-9250 Calibration Start\r\n");
 80062b4:	4961      	ldr	r1, [pc, #388]	; (800643c <MPU9250_Init+0x340>)
 80062b6:	4855      	ldr	r0, [pc, #340]	; (800640c <MPU9250_Init+0x310>)
 80062b8:	f001 fff8 	bl	80082ac <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80062bc:	4853      	ldr	r0, [pc, #332]	; (800640c <MPU9250_Init+0x310>)
 80062be:	f7f9 ff47 	bl	8000150 <strlen>
	  calibrateMPU9250(gyroBias, accBias);
 80062c2:	4f5f      	ldr	r7, [pc, #380]	; (8006440 <MPU9250_Init+0x344>)
 80062c4:	4e5f      	ldr	r6, [pc, #380]	; (8006444 <MPU9250_Init+0x348>)
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80062c6:	b282      	uxth	r2, r0
 80062c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062cc:	494f      	ldr	r1, [pc, #316]	; (800640c <MPU9250_Init+0x310>)
 80062ce:	4850      	ldr	r0, [pc, #320]	; (8006410 <MPU9250_Init+0x314>)
 80062d0:	f7fd fb62 	bl	8003998 <HAL_UART_Transmit>
	  calibrateMPU9250(gyroBias, accBias);
 80062d4:	4639      	mov	r1, r7
 80062d6:	4630      	mov	r0, r6
 80062d8:	f7ff fb46 	bl	8005968 <calibrateMPU9250>
		sprintf(Buf, "Calibration Finish\r\n");
 80062dc:	495a      	ldr	r1, [pc, #360]	; (8006448 <MPU9250_Init+0x34c>)
 80062de:	484b      	ldr	r0, [pc, #300]	; (800640c <MPU9250_Init+0x310>)
 80062e0:	f001 ffe4 	bl	80082ac <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80062e4:	4849      	ldr	r0, [pc, #292]	; (800640c <MPU9250_Init+0x310>)
 80062e6:	f7f9 ff33 	bl	8000150 <strlen>
 80062ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062ee:	b282      	uxth	r2, r0
 80062f0:	4946      	ldr	r1, [pc, #280]	; (800640c <MPU9250_Init+0x310>)
 80062f2:	4847      	ldr	r0, [pc, #284]	; (8006410 <MPU9250_Init+0x314>)
 80062f4:	f7fd fb50 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80062f8:	2064      	movs	r0, #100	; 0x64
 80062fa:	f7fa ff41 	bl	8001180 <HAL_Delay>
		sprintf(Buf, "   x       y      z\r\n");
 80062fe:	4953      	ldr	r1, [pc, #332]	; (800644c <MPU9250_Init+0x350>)
 8006300:	4842      	ldr	r0, [pc, #264]	; (800640c <MPU9250_Init+0x310>)
 8006302:	f001 ffd3 	bl	80082ac <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006306:	4841      	ldr	r0, [pc, #260]	; (800640c <MPU9250_Init+0x310>)
 8006308:	f7f9 ff22 	bl	8000150 <strlen>
 800630c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006310:	b282      	uxth	r2, r0
 8006312:	493e      	ldr	r1, [pc, #248]	; (800640c <MPU9250_Init+0x310>)
 8006314:	483e      	ldr	r0, [pc, #248]	; (8006410 <MPU9250_Init+0x314>)
 8006316:	f7fd fb3f 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800631a:	2064      	movs	r0, #100	; 0x64
 800631c:	f7fa ff30 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " %.2f   %.2f   %.2f mg\r\n", 1000*accBias[0], 1000*accBias[1], 1000*accBias[2]);
 8006320:	6838      	ldr	r0, [r7, #0]
 8006322:	494b      	ldr	r1, [pc, #300]	; (8006450 <MPU9250_Init+0x354>)
 8006324:	f7fa fce2 	bl	8000cec <__aeabi_fmul>
 8006328:	f7fa f87e 	bl	8000428 <__aeabi_f2d>
 800632c:	4680      	mov	r8, r0
 800632e:	4689      	mov	r9, r1
 8006330:	68b8      	ldr	r0, [r7, #8]
 8006332:	4947      	ldr	r1, [pc, #284]	; (8006450 <MPU9250_Init+0x354>)
 8006334:	f7fa fcda 	bl	8000cec <__aeabi_fmul>
 8006338:	f7fa f876 	bl	8000428 <__aeabi_f2d>
 800633c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	4943      	ldr	r1, [pc, #268]	; (8006450 <MPU9250_Init+0x354>)
 8006344:	f7fa fcd2 	bl	8000cec <__aeabi_fmul>
 8006348:	f7fa f86e 	bl	8000428 <__aeabi_f2d>
 800634c:	4642      	mov	r2, r8
 800634e:	e9cd 0100 	strd	r0, r1, [sp]
 8006352:	464b      	mov	r3, r9
 8006354:	493f      	ldr	r1, [pc, #252]	; (8006454 <MPU9250_Init+0x358>)
 8006356:	482d      	ldr	r0, [pc, #180]	; (800640c <MPU9250_Init+0x310>)
 8006358:	f001 ff84 	bl	8008264 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800635c:	482b      	ldr	r0, [pc, #172]	; (800640c <MPU9250_Init+0x310>)
 800635e:	f7f9 fef7 	bl	8000150 <strlen>
 8006362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006366:	b282      	uxth	r2, r0
 8006368:	4928      	ldr	r1, [pc, #160]	; (800640c <MPU9250_Init+0x310>)
 800636a:	4829      	ldr	r0, [pc, #164]	; (8006410 <MPU9250_Init+0x314>)
 800636c:	f7fd fb14 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006370:	2064      	movs	r0, #100	; 0x64
 8006372:	f7fa ff05 	bl	8001180 <HAL_Delay>
		sprintf(Buf, " %.2f   %.2f   %.2f o/s\r\n", gyroBias[0], gyroBias[1], gyroBias[2]);
 8006376:	6830      	ldr	r0, [r6, #0]
 8006378:	f7fa f856 	bl	8000428 <__aeabi_f2d>
 800637c:	4680      	mov	r8, r0
 800637e:	68b0      	ldr	r0, [r6, #8]
 8006380:	4689      	mov	r9, r1
 8006382:	f7fa f851 	bl	8000428 <__aeabi_f2d>
 8006386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800638a:	6870      	ldr	r0, [r6, #4]
 800638c:	f7fa f84c 	bl	8000428 <__aeabi_f2d>
 8006390:	4642      	mov	r2, r8
 8006392:	e9cd 0100 	strd	r0, r1, [sp]
 8006396:	464b      	mov	r3, r9
 8006398:	492f      	ldr	r1, [pc, #188]	; (8006458 <MPU9250_Init+0x35c>)
 800639a:	481c      	ldr	r0, [pc, #112]	; (800640c <MPU9250_Init+0x310>)
 800639c:	f001 ff62 	bl	8008264 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80063a0:	481a      	ldr	r0, [pc, #104]	; (800640c <MPU9250_Init+0x310>)
 80063a2:	f7f9 fed5 	bl	8000150 <strlen>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 80063a6:	2700      	movs	r7, #0
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80063a8:	b282      	uxth	r2, r0
 80063aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063ae:	4917      	ldr	r1, [pc, #92]	; (800640c <MPU9250_Init+0x310>)
 80063b0:	4817      	ldr	r0, [pc, #92]	; (8006410 <MPU9250_Init+0x314>)
 80063b2:	f7fd faf1 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80063b6:	2064      	movs	r0, #100	; 0x64
 80063b8:	f7fa fee2 	bl	8001180 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 80063bc:	2308      	movs	r3, #8
 80063be:	2207      	movs	r2, #7
 80063c0:	216b      	movs	r1, #107	; 0x6b
 80063c2:	9700      	str	r7, [sp, #0]
 80063c4:	20d2      	movs	r0, #210	; 0xd2
 80063c6:	f7fd fdb7 	bl	8003f38 <I2C_ByteWrite>
    HAL_Delay(100); // for stability
 80063ca:	2064      	movs	r0, #100	; 0x64
 80063cc:	f7fa fed8 	bl	8001180 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001;
 80063d0:	9400      	str	r4, [sp, #0]
 80063d2:	2308      	movs	r3, #8
 80063d4:	2207      	movs	r2, #7
 80063d6:	216b      	movs	r1, #107	; 0x6b
 80063d8:	20d2      	movs	r0, #210	; 0xd2
 80063da:	f7fd fdad 	bl	8003f38 <I2C_ByteWrite>
    HAL_Delay(200); // for stability
 80063de:	20c8      	movs	r0, #200	; 0xc8
 80063e0:	f7fa fece 	bl	8001180 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, MPU9250_DLPF_BW_42); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 80063e4:	2303      	movs	r3, #3
 80063e6:	2207      	movs	r2, #7
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	211a      	movs	r1, #26
 80063ec:	2308      	movs	r3, #8
 80063ee:	20d2      	movs	r0, #210	; 0xd2
 80063f0:	f7fd fda2 	bl	8003f38 <I2C_ByteWrite>
	  HAL_Delay(100);
 80063f4:	2064      	movs	r0, #100	; 0x64
 80063f6:	f7fa fec3 	bl	8001180 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x04);  //0x00 SMPLRT_DIV    -- SMPLRT_DIV = 0  Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
 80063fa:	2304      	movs	r3, #4
 80063fc:	2207      	movs	r2, #7
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	e02c      	b.n	800645c <MPU9250_Init+0x360>
 8006402:	bf00      	nop
 8006404:	20000d98 	.word	0x20000d98
 8006408:	0800ae93 	.word	0x0800ae93
 800640c:	20000da4 	.word	0x20000da4
 8006410:	200010e8 	.word	0x200010e8
 8006414:	0800ae9f 	.word	0x0800ae9f
 8006418:	0800aeb2 	.word	0x0800aeb2
 800641c:	200004f0 	.word	0x200004f0
 8006420:	0800aeff 	.word	0x0800aeff
 8006424:	0800af12 	.word	0x0800af12
 8006428:	0800af5e 	.word	0x0800af5e
 800642c:	0800afaa 	.word	0x0800afaa
 8006430:	0800aff6 	.word	0x0800aff6
 8006434:	0800b03e 	.word	0x0800b03e
 8006438:	0800b086 	.word	0x0800b086
 800643c:	0800b0ce 	.word	0x0800b0ce
 8006440:	20000514 	.word	0x20000514
 8006444:	200005f8 	.word	0x200005f8
 8006448:	0800b0eb 	.word	0x0800b0eb
 800644c:	0800b100 	.word	0x0800b100
 8006450:	447a0000 	.word	0x447a0000
 8006454:	0800b116 	.word	0x0800b116
 8006458:	0800b12f 	.word	0x0800b12f
 800645c:	2119      	movs	r1, #25
 800645e:	2308      	movs	r3, #8
 8006460:	20d2      	movs	r0, #210	; 0xd2
 8006462:	f7fd fd69 	bl	8003f38 <I2C_ByteWrite>
	  HAL_Delay(100);
 8006466:	2064      	movs	r0, #100	; 0x64
 8006468:	f7fa fe8a 	bl	8001180 <HAL_Delay>
	  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 1, rawADC, 1);
 800646c:	9400      	str	r4, [sp, #0]
 800646e:	462b      	mov	r3, r5
 8006470:	4622      	mov	r2, r4
 8006472:	211b      	movs	r1, #27
 8006474:	20d2      	movs	r0, #210	; 0xd2
 8006476:	f7fd fd95 	bl	8003fa4 <I2C_ByteRead>
	  c = c | Gscale << 3; // Set full scale range for the gyro
 800647a:	4ba0      	ldr	r3, [pc, #640]	; (80066fc <MPU9250_Init+0x600>)
	  uint8_t c = rawADC[0];
 800647c:	782e      	ldrb	r6, [r5, #0]
	  c = c | Gscale << 3; // Set full scale range for the gyro
 800647e:	781b      	ldrb	r3, [r3, #0]
	  c = c & ~0x18; // Clear AFS bits [4:3]
 8006480:	f026 061a 	bic.w	r6, r6, #26
	  c = c | Gscale << 3; // Set full scale range for the gyro
 8006484:	ea46 06c3 	orr.w	r6, r6, r3, lsl #3
 8006488:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
    sprintf(Buf, " GYRO : %d \r\n", c);
 800648c:	4632      	mov	r2, r6
 800648e:	499c      	ldr	r1, [pc, #624]	; (8006700 <MPU9250_Init+0x604>)
 8006490:	489c      	ldr	r0, [pc, #624]	; (8006704 <MPU9250_Init+0x608>)
 8006492:	f001 fee7 	bl	8008264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006496:	489b      	ldr	r0, [pc, #620]	; (8006704 <MPU9250_Init+0x608>)
 8006498:	f7f9 fe5a 	bl	8000150 <strlen>
 800649c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064a0:	b282      	uxth	r2, r0
 80064a2:	4998      	ldr	r1, [pc, #608]	; (8006704 <MPU9250_Init+0x608>)
 80064a4:	4898      	ldr	r0, [pc, #608]	; (8006708 <MPU9250_Init+0x60c>)
 80064a6:	f7fd fa77 	bl	8003998 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, c);
 80064aa:	9600      	str	r6, [sp, #0]
 80064ac:	2308      	movs	r3, #8
 80064ae:	2207      	movs	r2, #7
 80064b0:	211b      	movs	r1, #27
 80064b2:	20d2      	movs	r0, #210	; 0xd2
 80064b4:	f7fd fd40 	bl	8003f38 <I2C_ByteWrite>
	  HAL_Delay(100);
 80064b8:	2064      	movs	r0, #100	; 0x64
 80064ba:	f7fa fe61 	bl	8001180 <HAL_Delay>
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 1, rawADC, 1);
 80064be:	9400      	str	r4, [sp, #0]
 80064c0:	462b      	mov	r3, r5
 80064c2:	4622      	mov	r2, r4
 80064c4:	211c      	movs	r1, #28
 80064c6:	20d2      	movs	r0, #210	; 0xd2
 80064c8:	f7fd fd6c 	bl	8003fa4 <I2C_ByteRead>
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 80064cc:	4b8f      	ldr	r3, [pc, #572]	; (800670c <MPU9250_Init+0x610>)
    c = rawADC[0];
 80064ce:	782e      	ldrb	r6, [r5, #0]
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 80064d0:	781b      	ldrb	r3, [r3, #0]
    c = c & ~0x18;  // Clear AFS bits [4:3]
 80064d2:	f026 0618 	bic.w	r6, r6, #24
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 80064d6:	ea46 06c3 	orr.w	r6, r6, r3, lsl #3
 80064da:	b2f6      	uxtb	r6, r6
    sprintf(Buf, " ACEL : %d \r\n", c);
 80064dc:	4632      	mov	r2, r6
 80064de:	498c      	ldr	r1, [pc, #560]	; (8006710 <MPU9250_Init+0x614>)
 80064e0:	4888      	ldr	r0, [pc, #544]	; (8006704 <MPU9250_Init+0x608>)
 80064e2:	f001 febf 	bl	8008264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80064e6:	4887      	ldr	r0, [pc, #540]	; (8006704 <MPU9250_Init+0x608>)
 80064e8:	f7f9 fe32 	bl	8000150 <strlen>
 80064ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064f0:	b282      	uxth	r2, r0
 80064f2:	4984      	ldr	r1, [pc, #528]	; (8006704 <MPU9250_Init+0x608>)
 80064f4:	4884      	ldr	r0, [pc, #528]	; (8006708 <MPU9250_Init+0x60c>)
 80064f6:	f7fd fa4f 	bl	8003998 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, c);
 80064fa:	9600      	str	r6, [sp, #0]
 80064fc:	2308      	movs	r3, #8
 80064fe:	2207      	movs	r2, #7
 8006500:	211c      	movs	r1, #28
 8006502:	20d2      	movs	r0, #210	; 0xd2
 8006504:	f7fd fd18 	bl	8003f38 <I2C_ByteWrite>
	  HAL_Delay(100);
 8006508:	2064      	movs	r0, #100	; 0x64
 800650a:	f7fa fe39 	bl	8001180 <HAL_Delay>
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 1, rawADC, 1);
 800650e:	462b      	mov	r3, r5
 8006510:	9400      	str	r4, [sp, #0]
 8006512:	4622      	mov	r2, r4
 8006514:	211d      	movs	r1, #29
 8006516:	20d2      	movs	r0, #210	; 0xd2
 8006518:	f7fd fd44 	bl	8003fa4 <I2C_ByteRead>
    c = rawADC[0];
 800651c:	782e      	ldrb	r6, [r5, #0]
    sprintf(Buf, " ACEL2 : %d \r\n", c);
 800651e:	497d      	ldr	r1, [pc, #500]	; (8006714 <MPU9250_Init+0x618>)
    c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8006520:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8006524:	f046 0603 	orr.w	r6, r6, #3
    sprintf(Buf, " ACEL2 : %d \r\n", c);
 8006528:	4632      	mov	r2, r6
 800652a:	4876      	ldr	r0, [pc, #472]	; (8006704 <MPU9250_Init+0x608>)
 800652c:	f001 fe9a 	bl	8008264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006530:	4874      	ldr	r0, [pc, #464]	; (8006704 <MPU9250_Init+0x608>)
 8006532:	f7f9 fe0d 	bl	8000150 <strlen>
 8006536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800653a:	b282      	uxth	r2, r0
 800653c:	4971      	ldr	r1, [pc, #452]	; (8006704 <MPU9250_Init+0x608>)
 800653e:	4872      	ldr	r0, [pc, #456]	; (8006708 <MPU9250_Init+0x60c>)
 8006540:	f7fd fa2a 	bl	8003998 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, c);
 8006544:	2308      	movs	r3, #8
 8006546:	2207      	movs	r2, #7
 8006548:	211d      	movs	r1, #29
 800654a:	9600      	str	r6, [sp, #0]
 800654c:	20d2      	movs	r0, #210	; 0xd2
 800654e:	f7fd fcf3 	bl	8003f38 <I2C_ByteWrite>
		HAL_Delay(100);
 8006552:	2064      	movs	r0, #100	; 0x64
 8006554:	f7fa fe14 	bl	8001180 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_PIN_CFG, 7, 8, 0x22);
 8006558:	2322      	movs	r3, #34	; 0x22
 800655a:	2207      	movs	r2, #7
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	2137      	movs	r1, #55	; 0x37
 8006560:	2308      	movs	r3, #8
 8006562:	20d2      	movs	r0, #210	; 0xd2
 8006564:	f7fd fce8 	bl	8003f38 <I2C_ByteWrite>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x01);
 8006568:	2308      	movs	r3, #8
 800656a:	2207      	movs	r2, #7
 800656c:	9400      	str	r4, [sp, #0]
 800656e:	2138      	movs	r1, #56	; 0x38
 8006570:	20d2      	movs	r0, #210	; 0xd2
 8006572:	f7fd fce1 	bl	8003f38 <I2C_ByteWrite>
	HAL_Delay(100); // for stability
 8006576:	2064      	movs	r0, #100	; 0x64
 8006578:	f7fa fe02 	bl	8001180 <HAL_Delay>
  sprintf(Buf, "AK8963 Init Start!\r\n");
 800657c:	4966      	ldr	r1, [pc, #408]	; (8006718 <MPU9250_Init+0x61c>)
 800657e:	4861      	ldr	r0, [pc, #388]	; (8006704 <MPU9250_Init+0x608>)
 8006580:	f001 fe94 	bl	80082ac <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006584:	485f      	ldr	r0, [pc, #380]	; (8006704 <MPU9250_Init+0x608>)
 8006586:	f7f9 fde3 	bl	8000150 <strlen>
 800658a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800658e:	b282      	uxth	r2, r0
 8006590:	495c      	ldr	r1, [pc, #368]	; (8006704 <MPU9250_Init+0x608>)
 8006592:	485d      	ldr	r0, [pc, #372]	; (8006708 <MPU9250_Init+0x60c>)
 8006594:	f7fd fa00 	bl	8003998 <HAL_UART_Transmit>
  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, WHO_AM_I_AK8963, 1, rawADC, 1);
 8006598:	462b      	mov	r3, r5
 800659a:	9400      	str	r4, [sp, #0]
 800659c:	4622      	mov	r2, r4
 800659e:	4639      	mov	r1, r7
 80065a0:	2018      	movs	r0, #24
 80065a2:	f7fd fcff 	bl	8003fa4 <I2C_ByteRead>
  sprintf(Buf, "I AM 0x%x\r\n", whoami);
 80065a6:	782a      	ldrb	r2, [r5, #0]
 80065a8:	495c      	ldr	r1, [pc, #368]	; (800671c <MPU9250_Init+0x620>)
 80065aa:	4856      	ldr	r0, [pc, #344]	; (8006704 <MPU9250_Init+0x608>)
 80065ac:	f001 fe5a 	bl	8008264 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80065b0:	4854      	ldr	r0, [pc, #336]	; (8006704 <MPU9250_Init+0x608>)
 80065b2:	f7f9 fdcd 	bl	8000150 <strlen>
 80065b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065ba:	b282      	uxth	r2, r0
 80065bc:	4951      	ldr	r1, [pc, #324]	; (8006704 <MPU9250_Init+0x608>)
 80065be:	4852      	ldr	r0, [pc, #328]	; (8006708 <MPU9250_Init+0x60c>)
 80065c0:	f7fd f9ea 	bl	8003998 <HAL_UART_Transmit>
  sprintf(Buf, "I SHOULD BE 0x48\r\n");
 80065c4:	4956      	ldr	r1, [pc, #344]	; (8006720 <MPU9250_Init+0x624>)
 80065c6:	484f      	ldr	r0, [pc, #316]	; (8006704 <MPU9250_Init+0x608>)
 80065c8:	f001 fe70 	bl	80082ac <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80065cc:	484d      	ldr	r0, [pc, #308]	; (8006704 <MPU9250_Init+0x608>)
 80065ce:	f7f9 fdbf 	bl	8000150 <strlen>
 80065d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065d6:	b282      	uxth	r2, r0
 80065d8:	494a      	ldr	r1, [pc, #296]	; (8006704 <MPU9250_Init+0x608>)
 80065da:	484b      	ldr	r0, [pc, #300]	; (8006708 <MPU9250_Init+0x60c>)
 80065dc:	f7fd f9dc 	bl	8003998 <HAL_UART_Transmit>
	sprintf(Buf, "AK8963 Init (Compass sensor)\r\n");
 80065e0:	4950      	ldr	r1, [pc, #320]	; (8006724 <MPU9250_Init+0x628>)
 80065e2:	4848      	ldr	r0, [pc, #288]	; (8006704 <MPU9250_Init+0x608>)
 80065e4:	f001 fe62 	bl	80082ac <strcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80065e8:	4846      	ldr	r0, [pc, #280]	; (8006704 <MPU9250_Init+0x608>)
 80065ea:	f7f9 fdb1 	bl	8000150 <strlen>
	initAK8963(magCalibration);
 80065ee:	4c4e      	ldr	r4, [pc, #312]	; (8006728 <MPU9250_Init+0x62c>)
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80065f0:	b282      	uxth	r2, r0
 80065f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065f6:	4943      	ldr	r1, [pc, #268]	; (8006704 <MPU9250_Init+0x608>)
 80065f8:	4843      	ldr	r0, [pc, #268]	; (8006708 <MPU9250_Init+0x60c>)
 80065fa:	f7fd f9cd 	bl	8003998 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 80065fe:	2064      	movs	r0, #100	; 0x64
 8006600:	f7fa fdbe 	bl	8001180 <HAL_Delay>
	initAK8963(magCalibration);
 8006604:	4620      	mov	r0, r4
 8006606:	f7ff faeb 	bl	8005be0 <initAK8963>
	HAL_Delay(100); // for stability
 800660a:	2064      	movs	r0, #100	; 0x64
 800660c:	f7fa fdb8 	bl	8001180 <HAL_Delay>
  getAres();
 8006610:	f7fe ffb0 	bl	8005574 <getAres>
  getGres();
 8006614:	f7fe ff90 	bl	8005538 <getGres>
  getMres();
 8006618:	f7fe ff7a 	bl	8005510 <getMres>
	sprintf(Buf, "ASAX : %.2f\r\n", magCalibration[0]);
 800661c:	6820      	ldr	r0, [r4, #0]
 800661e:	f7f9 ff03 	bl	8000428 <__aeabi_f2d>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4837      	ldr	r0, [pc, #220]	; (8006704 <MPU9250_Init+0x608>)
 8006628:	4940      	ldr	r1, [pc, #256]	; (800672c <MPU9250_Init+0x630>)
 800662a:	f001 fe1b 	bl	8008264 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800662e:	4835      	ldr	r0, [pc, #212]	; (8006704 <MPU9250_Init+0x608>)
 8006630:	f7f9 fd8e 	bl	8000150 <strlen>
 8006634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006638:	b282      	uxth	r2, r0
 800663a:	4932      	ldr	r1, [pc, #200]	; (8006704 <MPU9250_Init+0x608>)
 800663c:	4832      	ldr	r0, [pc, #200]	; (8006708 <MPU9250_Init+0x60c>)
 800663e:	f7fd f9ab 	bl	8003998 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 8006642:	2064      	movs	r0, #100	; 0x64
 8006644:	f7fa fd9c 	bl	8001180 <HAL_Delay>
	sprintf(Buf, "ASAY : %.2f\r\n", magCalibration[1]);
 8006648:	6860      	ldr	r0, [r4, #4]
 800664a:	f7f9 feed 	bl	8000428 <__aeabi_f2d>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	482c      	ldr	r0, [pc, #176]	; (8006704 <MPU9250_Init+0x608>)
 8006654:	4936      	ldr	r1, [pc, #216]	; (8006730 <MPU9250_Init+0x634>)
 8006656:	f001 fe05 	bl	8008264 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800665a:	482a      	ldr	r0, [pc, #168]	; (8006704 <MPU9250_Init+0x608>)
 800665c:	f7f9 fd78 	bl	8000150 <strlen>
 8006660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006664:	b282      	uxth	r2, r0
 8006666:	4927      	ldr	r1, [pc, #156]	; (8006704 <MPU9250_Init+0x608>)
 8006668:	4827      	ldr	r0, [pc, #156]	; (8006708 <MPU9250_Init+0x60c>)
 800666a:	f7fd f995 	bl	8003998 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 800666e:	2064      	movs	r0, #100	; 0x64
 8006670:	f7fa fd86 	bl	8001180 <HAL_Delay>
	sprintf(Buf, "ASAZ : %.2f\r\n", magCalibration[2]);
 8006674:	68a0      	ldr	r0, [r4, #8]
 8006676:	f7f9 fed7 	bl	8000428 <__aeabi_f2d>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4821      	ldr	r0, [pc, #132]	; (8006704 <MPU9250_Init+0x608>)
 8006680:	492c      	ldr	r1, [pc, #176]	; (8006734 <MPU9250_Init+0x638>)
 8006682:	f001 fdef 	bl	8008264 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006686:	481f      	ldr	r0, [pc, #124]	; (8006704 <MPU9250_Init+0x608>)
 8006688:	f7f9 fd62 	bl	8000150 <strlen>
 800668c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006690:	b282      	uxth	r2, r0
 8006692:	491c      	ldr	r1, [pc, #112]	; (8006704 <MPU9250_Init+0x608>)
 8006694:	481c      	ldr	r0, [pc, #112]	; (8006708 <MPU9250_Init+0x60c>)
 8006696:	f7fd f97f 	bl	8003998 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 800669a:	2064      	movs	r0, #100	; 0x64
}
 800669c:	b005      	add	sp, #20
 800669e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(100); // for stability
 80066a2:	f7fa bd6d 	b.w	8001180 <HAL_Delay>
    sprintf(Buf, "Could not connect to MPU9250: %#x\r\n", whoami);
 80066a6:	4632      	mov	r2, r6
 80066a8:	4923      	ldr	r1, [pc, #140]	; (8006738 <MPU9250_Init+0x63c>)
 80066aa:	4816      	ldr	r0, [pc, #88]	; (8006704 <MPU9250_Init+0x608>)
 80066ac:	f001 fdda 	bl	8008264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80066b0:	4814      	ldr	r0, [pc, #80]	; (8006704 <MPU9250_Init+0x608>)
 80066b2:	f7f9 fd4d 	bl	8000150 <strlen>
 80066b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066ba:	b282      	uxth	r2, r0
 80066bc:	4911      	ldr	r1, [pc, #68]	; (8006704 <MPU9250_Init+0x608>)
 80066be:	4812      	ldr	r0, [pc, #72]	; (8006708 <MPU9250_Init+0x60c>)
 80066c0:	f7fd f96a 	bl	8003998 <HAL_UART_Transmit>
    sprintf(Buf, "Communication failed, abort!\r\n");
 80066c4:	491d      	ldr	r1, [pc, #116]	; (800673c <MPU9250_Init+0x640>)
 80066c6:	480f      	ldr	r0, [pc, #60]	; (8006704 <MPU9250_Init+0x608>)
 80066c8:	f001 fdf0 	bl	80082ac <strcpy>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80066cc:	480d      	ldr	r0, [pc, #52]	; (8006704 <MPU9250_Init+0x608>)
 80066ce:	f7f9 fd3f 	bl	8000150 <strlen>
 80066d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066d6:	b282      	uxth	r2, r0
 80066d8:	490a      	ldr	r1, [pc, #40]	; (8006704 <MPU9250_Init+0x608>)
 80066da:	480b      	ldr	r0, [pc, #44]	; (8006708 <MPU9250_Init+0x60c>)
 80066dc:	f7fd f95c 	bl	8003998 <HAL_UART_Transmit>
    while (Error.error !=0)
 80066e0:	4d17      	ldr	r5, [pc, #92]	; (8006740 <MPU9250_Init+0x644>)
 80066e2:	782b      	ldrb	r3, [r5, #0]
 80066e4:	b913      	cbnz	r3, 80066ec <MPU9250_Init+0x5f0>
}
 80066e6:	b005      	add	sp, #20
 80066e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error.error = 1;
 80066ec:	702c      	strb	r4, [r5, #0]
      error_signal();
 80066ee:	f7fe f96d 	bl	80049cc <error_signal>
      HAL_Delay(4);
 80066f2:	2004      	movs	r0, #4
 80066f4:	f7fa fd44 	bl	8001180 <HAL_Delay>
 80066f8:	e7f3      	b.n	80066e2 <MPU9250_Init+0x5e6>
 80066fa:	bf00      	nop
 80066fc:	200004ed 	.word	0x200004ed
 8006700:	0800b149 	.word	0x0800b149
 8006704:	20000da4 	.word	0x20000da4
 8006708:	200010e8 	.word	0x200010e8
 800670c:	200004ec 	.word	0x200004ec
 8006710:	0800b157 	.word	0x0800b157
 8006714:	0800b165 	.word	0x0800b165
 8006718:	0800b174 	.word	0x0800b174
 800671c:	0800ae93 	.word	0x0800ae93
 8006720:	0800b189 	.word	0x0800b189
 8006724:	0800b19c 	.word	0x0800b19c
 8006728:	20000610 	.word	0x20000610
 800672c:	0800b1bb 	.word	0x0800b1bb
 8006730:	0800b1c9 	.word	0x0800b1c9
 8006734:	0800b1d7 	.word	0x0800b1d7
 8006738:	0800b1e5 	.word	0x0800b1e5
 800673c:	0800b209 	.word	0x0800b209
 8006740:	200010a0 	.word	0x200010a0

08006744 <Baro_Common>:
void Baro_Common(void)
{
  static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
  static int baroHistIdx = 0;
  int indexplus1;
   indexplus1 = (baroHistIdx + 1);
 8006744:	490a      	ldr	r1, [pc, #40]	; (8006770 <Baro_Common+0x2c>)
  if (indexplus1 == 21)
      indexplus1 = 0;
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <Baro_Common+0x30>)
   indexplus1 = (baroHistIdx + 1);
 8006748:	6808      	ldr	r0, [r1, #0]
{
 800674a:	b530      	push	{r4, r5, lr}
   indexplus1 = (baroHistIdx + 1);
 800674c:	1c42      	adds	r2, r0, #1
  if (indexplus1 == 21)
 800674e:	2a15      	cmp	r2, #21
      indexplus1 = 0;
 8006750:	bf08      	it	eq
 8006752:	2200      	moveq	r2, #0
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8006754:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8006758:	4c07      	ldr	r4, [pc, #28]	; (8006778 <Baro_Common+0x34>)
  baroPressureSum += baroHistTab[baroHistIdx];
  baroPressureSum -= baroHistTab[indexplus1];
  baroHistIdx = indexplus1;
 800675a:	600a      	str	r2, [r1, #0]
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 800675c:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
  baroPressureSum -= baroHistTab[indexplus1];
 8006760:	4806      	ldr	r0, [pc, #24]	; (800677c <Baro_Common+0x38>)
 8006762:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
  baroPressureSum += baroHistTab[baroHistIdx];
 8006766:	6805      	ldr	r5, [r0, #0]
 8006768:	442b      	add	r3, r5
  baroPressureSum -= baroHistTab[indexplus1];
 800676a:	1b1b      	subs	r3, r3, r4
 800676c:	6003      	str	r3, [r0, #0]
  baroHistIdx = indexplus1;
 800676e:	bd30      	pop	{r4, r5, pc}
 8006770:	2000052c 	.word	0x2000052c
 8006774:	20000b58 	.word	0x20000b58
 8006778:	20000530 	.word	0x20000530
 800677c:	200005f0 	.word	0x200005f0

08006780 <getEstimatedAltitude>:
    }
    return 1;
}

int getEstimatedAltitude(void)
{
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int32_t BaroAlt_tmp;
  static int32_t baroGroundAltitude = 0;
  static int32_t baroGroundPressure = 0;

  if (calibratingB > 0) {
 8006784:	4d40      	ldr	r5, [pc, #256]	; (8006888 <getEstimatedAltitude+0x108>)
 8006786:	4c41      	ldr	r4, [pc, #260]	; (800688c <getEstimatedAltitude+0x10c>)
 8006788:	882b      	ldrh	r3, [r5, #0]
 800678a:	4e41      	ldr	r6, [pc, #260]	; (8006890 <getEstimatedAltitude+0x110>)
 800678c:	b31b      	cbz	r3, 80067d6 <getEstimatedAltitude+0x56>
      baroGroundPressure -= baroGroundPressure / 8;
      baroGroundPressure += baroPressureSum / (21 - 1);
 800678e:	2314      	movs	r3, #20
 8006790:	6820      	ldr	r0, [r4, #0]
      baroGroundPressure -= baroGroundPressure / 8;
 8006792:	4940      	ldr	r1, [pc, #256]	; (8006894 <getEstimatedAltitude+0x114>)
      baroGroundPressure += baroPressureSum / (21 - 1);
 8006794:	fbb0 f3f3 	udiv	r3, r0, r3
      baroGroundPressure -= baroGroundPressure / 8;
 8006798:	2008      	movs	r0, #8
 800679a:	680a      	ldr	r2, [r1, #0]
 800679c:	fb92 f7f0 	sdiv	r7, r2, r0
 80067a0:	1bd2      	subs	r2, r2, r7
      baroGroundPressure += baroPressureSum / (21 - 1);
 80067a2:	4413      	add	r3, r2
 80067a4:	600b      	str	r3, [r1, #0]
      baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 80067a6:	fb93 f0f0 	sdiv	r0, r3, r0
 80067aa:	f7fa fa4b 	bl	8000c44 <__aeabi_i2f>
 80067ae:	493a      	ldr	r1, [pc, #232]	; (8006898 <getEstimatedAltitude+0x118>)
 80067b0:	f7fa fb50 	bl	8000e54 <__aeabi_fdiv>
 80067b4:	4939      	ldr	r1, [pc, #228]	; (800689c <getEstimatedAltitude+0x11c>)
 80067b6:	f002 fbf3 	bl	8008fa0 <powf>
 80067ba:	4601      	mov	r1, r0
 80067bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80067c0:	f7fa f98a 	bl	8000ad8 <__aeabi_fsub>
 80067c4:	4936      	ldr	r1, [pc, #216]	; (80068a0 <getEstimatedAltitude+0x120>)
 80067c6:	f7fa fa91 	bl	8000cec <__aeabi_fmul>
 80067ca:	f7fa fc6b 	bl	80010a4 <__aeabi_f2iz>

      calibratingB--;
 80067ce:	882b      	ldrh	r3, [r5, #0]
      baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 80067d0:	6030      	str	r0, [r6, #0]
      calibratingB--;
 80067d2:	3b01      	subs	r3, #1
 80067d4:	802b      	strh	r3, [r5, #0]
  }

  BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (21 - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 80067d6:	2514      	movs	r5, #20
 80067d8:	6820      	ldr	r0, [r4, #0]
 80067da:	fbb0 f0f5 	udiv	r0, r0, r5
 80067de:	f7fa fa2d 	bl	8000c3c <__aeabi_ui2f>
 80067e2:	492d      	ldr	r1, [pc, #180]	; (8006898 <getEstimatedAltitude+0x118>)
 80067e4:	f7fa fb36 	bl	8000e54 <__aeabi_fdiv>
 80067e8:	492c      	ldr	r1, [pc, #176]	; (800689c <getEstimatedAltitude+0x11c>)
 80067ea:	f002 fbd9 	bl	8008fa0 <powf>
 80067ee:	4601      	mov	r1, r0
 80067f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80067f4:	f7fa f970 	bl	8000ad8 <__aeabi_fsub>
 80067f8:	4929      	ldr	r1, [pc, #164]	; (80068a0 <getEstimatedAltitude+0x120>)
 80067fa:	f7fa fa77 	bl	8000cec <__aeabi_fmul>
 80067fe:	f002 f9e3 	bl	8008bc8 <lrintf>
  BaroAlt_tmp -= baroGroundAltitude;
 8006802:	6833      	ldr	r3, [r6, #0]
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.8 + (float)BaroAlt_tmp * (1.0f - 0.8)); // additional LPF to reduce baro noise
 8006804:	4e27      	ldr	r6, [pc, #156]	; (80068a4 <getEstimatedAltitude+0x124>)
 8006806:	1ac0      	subs	r0, r0, r3
 8006808:	f7fa fa1c 	bl	8000c44 <__aeabi_i2f>
 800680c:	f7f9 fe0c 	bl	8000428 <__aeabi_f2d>
 8006810:	a319      	add	r3, pc, #100	; (adr r3, 8006878 <getEstimatedAltitude+0xf8>)
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	f7f9 fe5b 	bl	80004d0 <__aeabi_dmul>
 800681a:	4680      	mov	r8, r0
 800681c:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 8006820:	4689      	mov	r9, r1
 8006822:	f7fa fa0f 	bl	8000c44 <__aeabi_i2f>
 8006826:	f7f9 fdff 	bl	8000428 <__aeabi_f2d>
 800682a:	a315      	add	r3, pc, #84	; (adr r3, 8006880 <getEstimatedAltitude+0x100>)
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	f7f9 fe4e 	bl	80004d0 <__aeabi_dmul>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4640      	mov	r0, r8
 800683a:	4649      	mov	r1, r9
 800683c:	f7f9 fc96 	bl	800016c <__adddf3>
 8006840:	f7fa f8f6 	bl	8000a30 <__aeabi_d2f>
 8006844:	f002 f9c0 	bl	8008bc8 <lrintf>
  sprintf(Buf, "%ld pa, %ld cm \n ", baroPressureSum / (21 - 1), ms5611.BaroAlt);
 8006848:	6822      	ldr	r2, [r4, #0]
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.8 + (float)BaroAlt_tmp * (1.0f - 0.8)); // additional LPF to reduce baro noise
 800684a:	4603      	mov	r3, r0
  sprintf(Buf, "%ld pa, %ld cm \n ", baroPressureSum / (21 - 1), ms5611.BaroAlt);
 800684c:	fbb2 f2f5 	udiv	r2, r2, r5
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.8 + (float)BaroAlt_tmp * (1.0f - 0.8)); // additional LPF to reduce baro noise
 8006850:	f8c6 018c 	str.w	r0, [r6, #396]	; 0x18c
  sprintf(Buf, "%ld pa, %ld cm \n ", baroPressureSum / (21 - 1), ms5611.BaroAlt);
 8006854:	4914      	ldr	r1, [pc, #80]	; (80068a8 <getEstimatedAltitude+0x128>)
 8006856:	4815      	ldr	r0, [pc, #84]	; (80068ac <getEstimatedAltitude+0x12c>)
 8006858:	f001 fd04 	bl	8008264 <siprintf>
  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
 800685c:	4813      	ldr	r0, [pc, #76]	; (80068ac <getEstimatedAltitude+0x12c>)
 800685e:	f7f9 fc77 	bl	8000150 <strlen>
 8006862:	4912      	ldr	r1, [pc, #72]	; (80068ac <getEstimatedAltitude+0x12c>)
 8006864:	b282      	uxth	r2, r0
 8006866:	4812      	ldr	r0, [pc, #72]	; (80068b0 <getEstimatedAltitude+0x130>)
 8006868:	f7fd f8f2 	bl	8003a50 <HAL_UART_Transmit_DMA>

  return 1;
}
 800686c:	2001      	movs	r0, #1
 800686e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006872:	bf00      	nop
 8006874:	f3af 8000 	nop.w
 8006878:	99999998 	.word	0x99999998
 800687c:	3fc99999 	.word	0x3fc99999
 8006880:	9999999a 	.word	0x9999999a
 8006884:	3fe99999 	.word	0x3fe99999
 8006888:	2000000a 	.word	0x2000000a
 800688c:	200005f0 	.word	0x200005f0
 8006890:	20000524 	.word	0x20000524
 8006894:	20000528 	.word	0x20000528
 8006898:	47c5e680 	.word	0x47c5e680
 800689c:	3e42dcb1 	.word	0x3e42dcb1
 80068a0:	4a8748d0 	.word	0x4a8748d0
 80068a4:	20000b58 	.word	0x20000b58
 80068a8:	0800b257 	.word	0x0800b257
 80068ac:	20000da4 	.word	0x20000da4
 80068b0:	200010e8 	.word	0x200010e8

080068b4 <readPressure>:
    return readRegister24(MS5611_CMD_ADC_READ);
}

int32_t readPressure(bool compensation)
{
    uint32_t D1 = ms5611.rawPressure;
 80068b4:	4b55      	ldr	r3, [pc, #340]	; (8006a0c <readPressure+0x158>)
{
 80068b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    uint32_t D2 = ms5611.rawTemp;
    int32_t dT = D2 - (uint32_t)ms5611.fc[4] * 256;
 80068ba:	8919      	ldrh	r1, [r3, #8]
 80068bc:	6e5c      	ldr	r4, [r3, #100]	; 0x64
    uint32_t D1 = ms5611.rawPressure;
 80068be:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    int32_t dT = D2 - (uint32_t)ms5611.fc[4] * 256;
 80068c2:	eba4 2101 	sub.w	r1, r4, r1, lsl #8

    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 80068c6:	88dc      	ldrh	r4, [r3, #6]
 80068c8:	fb84 4501 	smull	r4, r5, r4, r1
 80068cc:	2c00      	cmp	r4, #0
 80068ce:	f175 0600 	sbcs.w	r6, r5, #0
 80068d2:	da02      	bge.n	80068da <readPressure+0x26>
 80068d4:	347f      	adds	r4, #127	; 0x7f
 80068d6:	f145 0500 	adc.w	r5, r5, #0
 80068da:	09e6      	lsrs	r6, r4, #7
 80068dc:	ea46 6645 	orr.w	r6, r6, r5, lsl #25
 80068e0:	11ef      	asrs	r7, r5, #7
 80068e2:	2500      	movs	r5, #0
 80068e4:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 80068e8:	f8b3 e000 	ldrh.w	lr, [r3]
    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 80068ec:	ea4f 4408 	mov.w	r4, r8, lsl #16
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 80068f0:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 80068f4:	1936      	adds	r6, r6, r4
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 80068f6:	fb88 8901 	smull	r8, r9, r8, r1
    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 80068fa:	416f      	adcs	r7, r5
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 80068fc:	f1b8 0f00 	cmp.w	r8, #0
 8006900:	f179 0400 	sbcs.w	r4, r9, #0
 8006904:	da03      	bge.n	800690e <readPressure+0x5a>
 8006906:	f118 08ff 	adds.w	r8, r8, #255	; 0xff
 800690a:	f149 0900 	adc.w	r9, r9, #0
 800690e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 8006912:	ea4f 2418 	mov.w	r4, r8, lsr #8
 8006916:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
 800691a:	ea4f 2529 	mov.w	r5, r9, asr #8
 800691e:	fbee 450c 	umlal	r4, r5, lr, ip

    if (compensation)
 8006922:	2800      	cmp	r0, #0
 8006924:	d051      	beq.n	80069ca <readPressure+0x116>
    {
  int32_t TEMP = 2000 + ((int64_t) dT * ms5611.fc[5]) / 8388608;
 8006926:	8958      	ldrh	r0, [r3, #10]
 8006928:	fb80 0101 	smull	r0, r1, r0, r1
 800692c:	2800      	cmp	r0, #0
 800692e:	f171 0e00 	sbcs.w	lr, r1, #0
 8006932:	da07      	bge.n	8006944 <readPressure+0x90>
 8006934:	f04f 0900 	mov.w	r9, #0
 8006938:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8006a14 <readPressure+0x160>
 800693c:	eb10 0008 	adds.w	r0, r0, r8
 8006940:	eb41 0109 	adc.w	r1, r1, r9
 8006944:	ea4f 5ed0 	mov.w	lr, r0, lsr #23
 8006948:	ea4e 2e41 	orr.w	lr, lr, r1, lsl #9

  ms5611.OFF2 = 0;
 800694c:	2000      	movs	r0, #0
 800694e:	2100      	movs	r1, #0
  int32_t TEMP = 2000 + ((int64_t) dT * ms5611.fc[5]) / 8388608;
 8006950:	f50e 6cfa 	add.w	ip, lr, #2000	; 0x7d0
  ms5611.SENS2 = 0;

  if (TEMP < 2000)
 8006954:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
  ms5611.OFF2 = 0;
 8006958:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
  ms5611.SENS2 = 0;
 800695c:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  if (TEMP < 2000)
 8006960:	da29      	bge.n	80069b6 <readPressure+0x102>
  {
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006962:	fb0e f00e 	mul.w	r0, lr, lr
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
  }

  if (TEMP < -1500)
 8006966:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8006a18 <readPressure+0x164>
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 800696a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800696e:	ea4f 0860 	mov.w	r8, r0, asr #1
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006972:	1080      	asrs	r0, r0, #2
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006974:	ea4f 79e8 	mov.w	r9, r8, asr #31
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006978:	17c1      	asrs	r1, r0, #31
  if (TEMP < -1500)
 800697a:	45d4      	cmp	ip, sl
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 800697c:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006980:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  if (TEMP < -1500)
 8006984:	da17      	bge.n	80069b6 <readPressure+0x102>
  {
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8006986:	f60e 5eac 	addw	lr, lr, #3500	; 0xdac
 800698a:	fb0e fe0e 	mul.w	lr, lr, lr
 800698e:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 8006992:	eb18 080c 	adds.w	r8, r8, ip
 8006996:	eb49 79ec 	adc.w	r9, r9, ip, asr #31
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 800699a:	f04f 0c0b 	mov.w	ip, #11
 800699e:	fb0c fe0e 	mul.w	lr, ip, lr
 80069a2:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80069a6:	eb10 000e 	adds.w	r0, r0, lr
 80069aa:	eb41 71ee 	adc.w	r1, r1, lr, asr #31
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 80069ae:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 80069b2:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  }

  OFF = OFF - ms5611.OFF2;
 80069b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80069ba:	1a36      	subs	r6, r6, r0
 80069bc:	eb67 0701 	sbc.w	r7, r7, r1
  SENS = SENS - ms5611.SENS2;
 80069c0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80069c4:	1a24      	subs	r4, r4, r0
 80069c6:	eb65 0501 	sbc.w	r5, r5, r1
  }

    uint32_t P = (D1 * SENS / 2097152 - OFF) / 32768;
 80069ca:	fba2 0104 	umull	r0, r1, r2, r4
 80069ce:	fb02 1105 	mla	r1, r2, r5, r1
 80069d2:	2800      	cmp	r0, #0
 80069d4:	f171 0300 	sbcs.w	r3, r1, #0
 80069d8:	da03      	bge.n	80069e2 <readPressure+0x12e>
 80069da:	2300      	movs	r3, #0
 80069dc:	4a0c      	ldr	r2, [pc, #48]	; (8006a10 <readPressure+0x15c>)
 80069de:	1880      	adds	r0, r0, r2
 80069e0:	4159      	adcs	r1, r3
 80069e2:	0d42      	lsrs	r2, r0, #21
 80069e4:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80069e8:	154b      	asrs	r3, r1, #21
 80069ea:	1b96      	subs	r6, r2, r6
 80069ec:	eb63 0707 	sbc.w	r7, r3, r7
 80069f0:	2e00      	cmp	r6, #0
 80069f2:	f177 0300 	sbcs.w	r3, r7, #0
 80069f6:	da04      	bge.n	8006a02 <readPressure+0x14e>
 80069f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80069fc:	2300      	movs	r3, #0
 80069fe:	18b6      	adds	r6, r6, r2
 8006a00:	415f      	adcs	r7, r3
 8006a02:	0bf0      	lsrs	r0, r6, #15

    return P;
}
 8006a04:	ea40 4047 	orr.w	r0, r0, r7, lsl #17
 8006a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0c:	20000b58 	.word	0x20000b58
 8006a10:	001fffff 	.word	0x001fffff
 8006a14:	007fffff 	.word	0x007fffff
 8006a18:	fffffa24 	.word	0xfffffa24

08006a1c <readRegister16>:
    return ((double)pressure / pow(1.0f - ((double)altitude / 44330.0f), 5.255f));
}

// Read 16-bit from register (oops MSB, LSB)
uint16_t readRegister16(uint8_t reg)
{
 8006a1c:	b510      	push	{r4, lr}
    uint16_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);

    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 8006a1e:	4c08      	ldr	r4, [pc, #32]	; (8006a40 <readRegister16+0x24>)
    I2C_Write(MS5611_ADDRESS, reg, 1);
 8006a20:	4601      	mov	r1, r0
 8006a22:	2201      	movs	r2, #1
 8006a24:	20ee      	movs	r0, #238	; 0xee
 8006a26:	f7fd facf 	bl	8003fc8 <I2C_Write>
    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	20ee      	movs	r0, #238	; 0xee
 8006a30:	f7fd fb14 	bl	800405c <I2C_Read>

    uint8_t vha = rawADC[0];
    uint8_t vla = rawADC[1];

    value = vha << 8 | vla;
 8006a34:	7820      	ldrb	r0, [r4, #0]
 8006a36:	7863      	ldrb	r3, [r4, #1]

    return value;
}
 8006a38:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8006a3c:	bd10      	pop	{r4, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000d98 	.word	0x20000d98

08006a44 <readRegister24>:

// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg)
{
 8006a44:	b510      	push	{r4, lr}
    uint32_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);

    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 8006a46:	4c09      	ldr	r4, [pc, #36]	; (8006a6c <readRegister24+0x28>)
    I2C_Write(MS5611_ADDRESS, reg, 1);
 8006a48:	4601      	mov	r1, r0
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	20ee      	movs	r0, #238	; 0xee
 8006a4e:	f7fd fabb 	bl	8003fc8 <I2C_Write>
    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 8006a52:	2203      	movs	r2, #3
 8006a54:	4621      	mov	r1, r4
 8006a56:	20ee      	movs	r0, #238	; 0xee
 8006a58:	f7fd fb00 	bl	800405c <I2C_Read>

    uint8_t vxa = rawADC[0];
    uint8_t vha = rawADC[1];
    uint8_t vla = rawADC[2];

    value = ((int32_t)vxa << 16) | ((int32_t)vha << 8) | vla;
 8006a5c:	7863      	ldrb	r3, [r4, #1]
 8006a5e:	7820      	ldrb	r0, [r4, #0]
 8006a60:	021b      	lsls	r3, r3, #8
 8006a62:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a66:	78a0      	ldrb	r0, [r4, #2]

    return value;
}
 8006a68:	4318      	orrs	r0, r3
 8006a6a:	bd10      	pop	{r4, pc}
 8006a6c:	20000d98 	.word	0x20000d98

08006a70 <read_barometer>:
{
 8006a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ms5611.barometer_counter ++;
 8006a74:	4cc1      	ldr	r4, [pc, #772]	; (8006d7c <read_barometer+0x30c>)
 8006a76:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	b2db      	uxtb	r3, r3
  if (ms5611.barometer_counter == 1) {                                                 //When the barometer_counter variable is 1.
 8006a7e:	2b01      	cmp	r3, #1
  ms5611.barometer_counter ++;
 8006a80:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  if (ms5611.barometer_counter == 1) {                                                 //When the barometer_counter variable is 1.
 8006a84:	d13c      	bne.n	8006b00 <read_barometer+0x90>
    if (ms5611.temperature_counter == 0) {                                             //And the temperature counter is 0.
 8006a86:	f894 5061 	ldrb.w	r5, [r4, #97]	; 0x61
 8006a8a:	2d00      	cmp	r5, #0
 8006a8c:	f040 816d 	bne.w	8006d6a <read_barometer+0x2fa>
      ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8006a90:	4628      	mov	r0, r5
 8006a92:	f7ff ffd7 	bl	8006a44 <readRegister24>
      ms5611.raw_average_temperature_total -= ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006a96:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8006a9a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006a9e:	f103 021a 	add.w	r2, r3, #26
      ms5611.average_temperature_mem_location++;
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	b2db      	uxtb	r3, r3
      if (ms5611.average_temperature_mem_location == 5)ms5611.average_temperature_mem_location = 0;
 8006aa6:	2b05      	cmp	r3, #5
      ms5611.average_temperature_mem_location++;
 8006aa8:	bf18      	it	ne
 8006aaa:	f884 3068 	strbne.w	r3, [r4, #104]	; 0x68
      ms5611.T = ms5611.raw_average_temperature_total / 5;                      //Calculate the avarage temperature of the last 5 measurements.
 8006aae:	f04f 0305 	mov.w	r3, #5
      ms5611.raw_average_temperature_total -= ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006ab2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006ab6:	6856      	ldr	r6, [r2, #4]
      ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8006ab8:	6660      	str	r0, [r4, #100]	; 0x64
      ms5611.raw_average_temperature_total -= ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006aba:	eba1 0106 	sub.w	r1, r1, r6
      ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location] = ms5611.rawTemp;
 8006abe:	6050      	str	r0, [r2, #4]
      ms5611.raw_average_temperature_total += ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006ac0:	4408      	add	r0, r1
 8006ac2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      ms5611.T = ms5611.raw_average_temperature_total / 5;                      //Calculate the avarage temperature of the last 5 measurements.
 8006ac6:	fbb0 f0f3 	udiv	r0, r0, r3
      if (ms5611.average_temperature_mem_location == 5)ms5611.average_temperature_mem_location = 0;
 8006aca:	bf08      	it	eq
 8006acc:	f884 5068 	strbeq.w	r5, [r4, #104]	; 0x68
      ms5611.T = ms5611.raw_average_temperature_total / 5;                      //Calculate the avarage temperature of the last 5 measurements.
 8006ad0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ms5611.temperature_counter ++;                                                     //Increase the temperature_counter variable.
 8006ad4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8006ad8:	7b61      	ldrb	r1, [r4, #13]
 8006ada:	3301      	adds	r3, #1
 8006adc:	b2db      	uxtb	r3, r3
    if (ms5611.temperature_counter == 20) {                                            //When the temperature counter equals 20.
 8006ade:	2b14      	cmp	r3, #20
    ms5611.temperature_counter ++;                                                     //Increase the temperature_counter variable.
 8006ae0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      ms5611.temperature_counter = 0;                                                  //Reset the temperature_counter variable.
 8006ae4:	bf06      	itte	eq
 8006ae6:	2300      	moveq	r3, #0
      I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8006ae8:	3150      	addeq	r1, #80	; 0x50
      I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8006aea:	3140      	addne	r1, #64	; 0x40
 8006aec:	f04f 0201 	mov.w	r2, #1
 8006af0:	b2c9      	uxtb	r1, r1
 8006af2:	f04f 00ee 	mov.w	r0, #238	; 0xee
      ms5611.temperature_counter = 0;                                                  //Reset the temperature_counter variable.
 8006af6:	bf08      	it	eq
 8006af8:	f884 3061 	strbeq.w	r3, [r4, #97]	; 0x61
      I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8006afc:	f7fd fa64 	bl	8003fc8 <I2C_Write>
  if (ms5611.barometer_counter == 2) {                                                 //If the barometer_counter variable equals 2.
 8006b00:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	f040 8127 	bne.w	8006d58 <read_barometer+0x2e8>
    ms5611.dT = ms5611.fc[4];
 8006b0a:	8923      	ldrh	r3, [r4, #8]
    ms5611.dT += ms5611.T;
 8006b0c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006b10:	88e0      	ldrh	r0, [r4, #6]
    ms5611.dT += ms5611.T;
 8006b12:	eba2 2503 	sub.w	r5, r2, r3, lsl #8
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006b16:	fb80 0105 	smull	r0, r1, r0, r5
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	f171 0300 	sbcs.w	r3, r1, #0
    ms5611.dT += ms5611.T;
 8006b20:	6165      	str	r5, [r4, #20]
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006b22:	da02      	bge.n	8006b2a <read_barometer+0xba>
 8006b24:	307f      	adds	r0, #127	; 0x7f
 8006b26:	f141 0100 	adc.w	r1, r1, #0
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	09c6      	lsrs	r6, r0, #7
 8006b2e:	8860      	ldrh	r0, [r4, #2]
 8006b30:	ea46 6641 	orr.w	r6, r6, r1, lsl #25
 8006b34:	0402      	lsls	r2, r0, #16
 8006b36:	18b6      	adds	r6, r6, r2
    ms5611.SENS = (int64_t)ms5611.fc[0] * 32768 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[2]) / 256;
 8006b38:	88a2      	ldrh	r2, [r4, #4]
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006b3a:	ea4f 17e1 	mov.w	r7, r1, asr #7
 8006b3e:	415f      	adcs	r7, r3
    ms5611.SENS = (int64_t)ms5611.fc[0] * 32768 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[2]) / 256;
 8006b40:	fb82 2305 	smull	r2, r3, r2, r5
 8006b44:	2a00      	cmp	r2, #0
 8006b46:	f173 0100 	sbcs.w	r1, r3, #0
 8006b4a:	f8b4 e000 	ldrh.w	lr, [r4]
 8006b4e:	da02      	bge.n	8006b56 <read_barometer+0xe6>
 8006b50:	32ff      	adds	r2, #255	; 0xff
 8006b52:	f143 0300 	adc.w	r3, r3, #0
 8006b56:	0a10      	lsrs	r0, r2, #8
 8006b58:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8006b5c:	1219      	asrs	r1, r3, #8
 8006b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    int32_t TEMP = 2000 + ((int64_t) ms5611.dT * ms5611.fc[5]) / 8388608;
 8006b62:	8962      	ldrh	r2, [r4, #10]
    ms5611.SENS = (int64_t)ms5611.fc[0] * 32768 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[2]) / 256;
 8006b64:	fbee 0103 	umlal	r0, r1, lr, r3
    int32_t TEMP = 2000 + ((int64_t) ms5611.dT * ms5611.fc[5]) / 8388608;
 8006b68:	fb82 2305 	smull	r2, r3, r2, r5
 8006b6c:	2a00      	cmp	r2, #0
 8006b6e:	f173 0500 	sbcs.w	r5, r3, #0
 8006b72:	da07      	bge.n	8006b84 <read_barometer+0x114>
 8006b74:	f04f 0900 	mov.w	r9, #0
 8006b78:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8006da8 <read_barometer+0x338>
 8006b7c:	eb12 0208 	adds.w	r2, r2, r8
 8006b80:	eb43 0309 	adc.w	r3, r3, r9
 8006b84:	0dd5      	lsrs	r5, r2, #23
 8006b86:	ea45 2543 	orr.w	r5, r5, r3, lsl #9
    ms5611.OFF2 = 0;
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2300      	movs	r3, #0
    int32_t TEMP = 2000 + ((int64_t) ms5611.dT * ms5611.fc[5]) / 8388608;
 8006b8e:	f505 6efa 	add.w	lr, r5, #2000	; 0x7d0
    if(TEMP < 2000){
 8006b92:	f5be 6ffa 	cmp.w	lr, #2000	; 0x7d0
    ms5611.OFF2 = 0;
 8006b96:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    ms5611.SENS2 = 0;
 8006b9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if(TEMP < 2000){
 8006b9e:	da26      	bge.n	8006bee <read_barometer+0x17e>
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006ba0:	fb05 f205 	mul.w	r2, r5, r5
    if (TEMP < -1500){
 8006ba4:	f8df c204 	ldr.w	ip, [pc, #516]	; 8006dac <read_barometer+0x33c>
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006ba8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006bac:	ea4f 0862 	mov.w	r8, r2, asr #1
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006bb0:	1092      	asrs	r2, r2, #2
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006bb2:	ea4f 79e8 	mov.w	r9, r8, asr #31
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006bb6:	17d3      	asrs	r3, r2, #31
    if (TEMP < -1500){
 8006bb8:	45e6      	cmp	lr, ip
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006bba:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006bbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if (TEMP < -1500){
 8006bc2:	da14      	bge.n	8006bee <read_barometer+0x17e>
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8006bc4:	f605 55ac 	addw	r5, r5, #3500	; 0xdac
 8006bc8:	436d      	muls	r5, r5
 8006bca:	ebc5 0ec5 	rsb	lr, r5, r5, lsl #3
 8006bce:	eb18 080e 	adds.w	r8, r8, lr
 8006bd2:	eb49 79ee 	adc.w	r9, r9, lr, asr #31
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8006bd6:	f04f 0e0b 	mov.w	lr, #11
 8006bda:	fb0e f505 	mul.w	r5, lr, r5
 8006bde:	106d      	asrs	r5, r5, #1
 8006be0:	1952      	adds	r2, r2, r5
 8006be2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8006be6:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8006bea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    ms5611.OFF = ms5611.OFF - ms5611.OFF2;
 8006bee:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    ms5611.SENS = ms5611.SENS - ms5611.SENS2;
 8006bf2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
    ms5611.OFF = ms5611.OFF - ms5611.OFF2;
 8006bf6:	1ab6      	subs	r6, r6, r2
 8006bf8:	eb67 0703 	sbc.w	r7, r7, r3
    ms5611.P = ((ms5611.rawPressure * ms5611.SENS) / 2097152 - ms5611.OFF) / 32768;
 8006bfc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    ms5611.SENS = ms5611.SENS - ms5611.SENS2;
 8006c00:	ebb0 0808 	subs.w	r8, r0, r8
 8006c04:	eb61 0909 	sbc.w	r9, r1, r9
    ms5611.P = ((ms5611.rawPressure * ms5611.SENS) / 2097152 - ms5611.OFF) / 32768;
 8006c08:	fba3 0108 	umull	r0, r1, r3, r8
 8006c0c:	fb03 1109 	mla	r1, r3, r9, r1
 8006c10:	2800      	cmp	r0, #0
 8006c12:	f171 0300 	sbcs.w	r3, r1, #0
    ms5611.OFF = ms5611.OFF - ms5611.OFF2;
 8006c16:	e9c4 6708 	strd	r6, r7, [r4, #32]
    ms5611.SENS = ms5611.SENS - ms5611.SENS2;
 8006c1a:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
    ms5611.P = ((ms5611.rawPressure * ms5611.SENS) / 2097152 - ms5611.OFF) / 32768;
 8006c1e:	da03      	bge.n	8006c28 <read_barometer+0x1b8>
 8006c20:	2300      	movs	r3, #0
 8006c22:	4a57      	ldr	r2, [pc, #348]	; (8006d80 <read_barometer+0x310>)
 8006c24:	1880      	adds	r0, r0, r2
 8006c26:	4159      	adcs	r1, r3
 8006c28:	0d42      	lsrs	r2, r0, #21
 8006c2a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8006c2e:	154b      	asrs	r3, r1, #21
 8006c30:	1b92      	subs	r2, r2, r6
 8006c32:	eb63 0307 	sbc.w	r3, r3, r7
 8006c36:	2a00      	cmp	r2, #0
 8006c38:	f173 0100 	sbcs.w	r1, r3, #0
 8006c3c:	da04      	bge.n	8006c48 <read_barometer+0x1d8>
 8006c3e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8006c42:	2100      	movs	r1, #0
 8006c44:	1812      	adds	r2, r2, r0
 8006c46:	414b      	adcs	r3, r1
 8006c48:	0bd1      	lsrs	r1, r2, #15
 8006c4a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8006c4e:	13da      	asrs	r2, r3, #15
 8006c50:	4b4c      	ldr	r3, [pc, #304]	; (8006d84 <read_barometer+0x314>)
 8006c52:	f8c4 1160 	str.w	r1, [r4, #352]	; 0x160
 8006c56:	605a      	str	r2, [r3, #4]
    ms5611.pressure_total_avarage -= ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 8006c58:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8006c5c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8006c60:	f103 0526 	add.w	r5, r3, #38	; 0x26
    ms5611.pressure_rotating_mem_location++;                                                                         //Increase the rotating memory location.
 8006c64:	3301      	adds	r3, #1
 8006c66:	b2db      	uxtb	r3, r3
    if (ms5611.pressure_rotating_mem_location == 20)ms5611.pressure_rotating_mem_location = 0;                              //Start at 0 when the memory location 20 is reached.
 8006c68:	2b14      	cmp	r3, #20
 8006c6a:	bf08      	it	eq
 8006c6c:	2300      	moveq	r3, #0
    ms5611.pressure_total_avarage -= ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 8006c6e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    if (ms5611.pressure_rotating_mem_location == 20)ms5611.pressure_rotating_mem_location = 0;                              //Start at 0 when the memory location 20 is reached.
 8006c72:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    ms5611.pressure_total_avarage -= ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 8006c76:	1a10      	subs	r0, r2, r0
    ms5611.pressure_total_avarage += ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Add the new value to the long term avarage value.
 8006c78:	4408      	add	r0, r1
    ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location] = ms5611.P;                                                //Calculate the new change between the actual pressure and the previous measurement.
 8006c7a:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    ms5611.pressure_total_avarage += ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Add the new value to the long term avarage value.
 8006c7e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    ms5611.actual_pressure_fast = (float)ms5611.pressure_total_avarage / 20.0;                                              //Calculate the average pressure of the last 20 pressure readings.
 8006c82:	f7f9 ffdf 	bl	8000c44 <__aeabi_i2f>
 8006c86:	4940      	ldr	r1, [pc, #256]	; (8006d88 <read_barometer+0x318>)
 8006c88:	f7fa f8e4 	bl	8000e54 <__aeabi_fdiv>
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 8006c8c:	493f      	ldr	r1, [pc, #252]	; (8006d8c <read_barometer+0x31c>)
    ms5611.actual_pressure_fast = (float)ms5611.pressure_total_avarage / 20.0;                                              //Calculate the average pressure of the last 20 pressure readings.
 8006c8e:	4605      	mov	r5, r0
 8006c90:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 8006c94:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
 8006c98:	f7fa f828 	bl	8000cec <__aeabi_fmul>
 8006c9c:	493c      	ldr	r1, [pc, #240]	; (8006d90 <read_barometer+0x320>)
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f7fa f823 	bl	8000cec <__aeabi_fmul>
 8006ca6:	4601      	mov	r1, r0
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f7f9 ff17 	bl	8000adc <__addsf3>
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 8006cae:	4629      	mov	r1, r5
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 8006cb0:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 8006cb4:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 8006cb8:	4606      	mov	r6, r0
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 8006cba:	f7f9 ff0d 	bl	8000ad8 <__aeabi_fsub>
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 8006cbe:	4629      	mov	r1, r5
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 8006cc0:	4607      	mov	r7, r0
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 8006cc2:	f7fa f9cf 	bl	8001064 <__aeabi_fcmpgt>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d155      	bne.n	8006d76 <read_barometer+0x306>
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 8006cca:	f8c4 7174 	str.w	r7, [r4, #372]	; 0x174
    if (ms5611.actual_pressure_diff < -8)ms5611.actual_pressure_diff = -8;                                                  //If the difference is smaller then -8 limit the difference to -8.
 8006cce:	f04f 4541 	mov.w	r5, #3238002688	; 0xc1000000
 8006cd2:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	f7fa f9a6 	bl	8001028 <__aeabi_fcmplt>
 8006cdc:	b108      	cbz	r0, 8006ce2 <read_barometer+0x272>
 8006cde:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
    if (ms5611.actual_pressure_diff > 1 || ms5611.actual_pressure_diff < -1)ms5611.actual_pressure_slow -= ms5611.actual_pressure_diff / 6.0;
 8006ce2:	f8d4 5174 	ldr.w	r5, [r4, #372]	; 0x174
 8006ce6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006cea:	4628      	mov	r0, r5
 8006cec:	f7fa f9ba 	bl	8001064 <__aeabi_fcmpgt>
 8006cf0:	b920      	cbnz	r0, 8006cfc <read_barometer+0x28c>
 8006cf2:	4928      	ldr	r1, [pc, #160]	; (8006d94 <read_barometer+0x324>)
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	f7fa f997 	bl	8001028 <__aeabi_fcmplt>
 8006cfa:	b1a8      	cbz	r0, 8006d28 <read_barometer+0x2b8>
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f7f9 fb93 	bl	8000428 <__aeabi_f2d>
 8006d02:	4606      	mov	r6, r0
 8006d04:	4628      	mov	r0, r5
 8006d06:	460f      	mov	r7, r1
 8006d08:	f7f9 fb8e 	bl	8000428 <__aeabi_f2d>
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4b22      	ldr	r3, [pc, #136]	; (8006d98 <read_barometer+0x328>)
 8006d10:	f7f9 fd08 	bl	8000724 <__aeabi_ddiv>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4630      	mov	r0, r6
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	f7f9 fa24 	bl	8000168 <__aeabi_dsub>
 8006d20:	f7f9 fe86 	bl	8000a30 <__aeabi_d2f>
 8006d24:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    ms5611.actual_pressure = ms5611.actual_pressure_slow;                                                                   //The actual_pressure is used in the program for altitude calculations.
 8006d28:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    ms5611.GroundAltitude = lrintf((1.0f - powf((ms5611.actual_pressure) / 101325.0f, 0.190295f)) * 4433000.0f);
 8006d2c:	491b      	ldr	r1, [pc, #108]	; (8006d9c <read_barometer+0x32c>)
    ms5611.actual_pressure = ms5611.actual_pressure_slow;                                                                   //The actual_pressure is used in the program for altitude calculations.
 8006d2e:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    ms5611.GroundAltitude = lrintf((1.0f - powf((ms5611.actual_pressure) / 101325.0f, 0.190295f)) * 4433000.0f);
 8006d32:	f7fa f88f 	bl	8000e54 <__aeabi_fdiv>
 8006d36:	491a      	ldr	r1, [pc, #104]	; (8006da0 <read_barometer+0x330>)
 8006d38:	f002 f932 	bl	8008fa0 <powf>
 8006d3c:	4601      	mov	r1, r0
 8006d3e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006d42:	f7f9 fec9 	bl	8000ad8 <__aeabi_fsub>
 8006d46:	4917      	ldr	r1, [pc, #92]	; (8006da4 <read_barometer+0x334>)
 8006d48:	f7f9 ffd0 	bl	8000cec <__aeabi_fmul>
 8006d4c:	f001 ff3c 	bl	8008bc8 <lrintf>
 8006d50:	f7f9 ff78 	bl	8000c44 <__aeabi_i2f>
 8006d54:	f8c4 0194 	str.w	r0, [r4, #404]	; 0x194
  if (ms5611.barometer_counter == 3) {                                                                               //When the barometer counter is 3
 8006d58:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8006d5c:	2b03      	cmp	r3, #3
    ms5611.barometer_counter = 0;                                                                                    //Set the barometer counter to 0 for the next measurements.
 8006d5e:	bf04      	itt	eq
 8006d60:	2300      	moveq	r3, #0
 8006d62:	f884 3060 	strbeq.w	r3, [r4, #96]	; 0x60
 8006d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	f7ff fe6a 	bl	8006a44 <readRegister24>
 8006d70:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8006d74:	e6ae      	b.n	8006ad4 <read_barometer+0x64>
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 8006d76:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
 8006d7a:	e7a8      	b.n	8006cce <read_barometer+0x25e>
 8006d7c:	20000b58 	.word	0x20000b58
 8006d80:	001fffff 	.word	0x001fffff
 8006d84:	20000cb8 	.word	0x20000cb8
 8006d88:	41a00000 	.word	0x41a00000
 8006d8c:	3f7c28f6 	.word	0x3f7c28f6
 8006d90:	3c75c28f 	.word	0x3c75c28f
 8006d94:	bf800000 	.word	0xbf800000
 8006d98:	40180000 	.word	0x40180000
 8006d9c:	47c5e680 	.word	0x47c5e680
 8006da0:	3e42dcb1 	.word	0x3e42dcb1
 8006da4:	4a8748d0 	.word	0x4a8748d0
 8006da8:	007fffff 	.word	0x007fffff
 8006dac:	fffffa24 	.word	0xfffffa24

08006db0 <MS5611_Init>:
{
 8006db0:	b538      	push	{r3, r4, r5, lr}
	sprintf(Buf, "Initialize MS-5611 Sensor\r\n");
 8006db2:	492f      	ldr	r1, [pc, #188]	; (8006e70 <MS5611_Init+0xc0>)
{
 8006db4:	4605      	mov	r5, r0
	sprintf(Buf, "Initialize MS-5611 Sensor\r\n");
 8006db6:	482f      	ldr	r0, [pc, #188]	; (8006e74 <MS5611_Init+0xc4>)
 8006db8:	f001 fa78 	bl	80082ac <strcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006dbc:	482d      	ldr	r0, [pc, #180]	; (8006e74 <MS5611_Init+0xc4>)
 8006dbe:	f7f9 f9c7 	bl	8000150 <strlen>
 8006dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dc6:	b282      	uxth	r2, r0
 8006dc8:	492a      	ldr	r1, [pc, #168]	; (8006e74 <MS5611_Init+0xc4>)
 8006dca:	482b      	ldr	r0, [pc, #172]	; (8006e78 <MS5611_Init+0xc8>)
 8006dcc:	f7fc fde4 	bl	8003998 <HAL_UART_Transmit>
  I2C_Write(MS5611_ADDRESS, MS5611_CMD_RESET, 1);
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	211e      	movs	r1, #30
 8006dd4:	20ee      	movs	r0, #238	; 0xee
 8006dd6:	f7fd f8f7 	bl	8003fc8 <I2C_Write>
  ms5611.seaLevelPressure = 101325;
 8006dda:	a123      	add	r1, pc, #140	; (adr r1, 8006e68 <MS5611_Init+0xb8>)
 8006ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
  ms5611.compensation = 1;
 8006de0:	2301      	movs	r3, #1
 8006de2:	4c26      	ldr	r4, [pc, #152]	; (8006e7c <MS5611_Init+0xcc>)
  ms5611.seaLevelPressure = 101325;
 8006de4:	f504 72bc 	add.w	r2, r4, #376	; 0x178
  ms5611.compensation = 1;
 8006de8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  ms5611.seaLevelPressure = 101325;
 8006dec:	e9c2 0100 	strd	r0, r1, [r2]
  switch (osr)
 8006df0:	2d08      	cmp	r5, #8
 8006df2:	d808      	bhi.n	8006e06 <MS5611_Init+0x56>
 8006df4:	e8df f005 	tbb	[pc, r5]
 8006df8:	07050706 	.word	0x07050706
 8006dfc:	07340732 	.word	0x07340732
 8006e00:	36          	.byte	0x36
 8006e01:	00          	.byte	0x00
      ms5611.ct = 2;
 8006e02:	2302      	movs	r3, #2
      ms5611.ct = 10;
 8006e04:	7323      	strb	r3, [r4, #12]
  HAL_Delay(100);
 8006e06:	2064      	movs	r0, #100	; 0x64
  ms5611.uosr = osr;
 8006e08:	7365      	strb	r5, [r4, #13]
  HAL_Delay(100);
 8006e0a:	f7fa f9b9 	bl	8001180 <HAL_Delay>
 8006e0e:	2500      	movs	r5, #0
    ms5611.fc[offset] = readRegister16(MS5611_CMD_READ_PROM + (offset * 2));
 8006e10:	f1a5 005e 	sub.w	r0, r5, #94	; 0x5e
 8006e14:	b2c0      	uxtb	r0, r0
 8006e16:	f7ff fe01 	bl	8006a1c <readRegister16>
 8006e1a:	5360      	strh	r0, [r4, r5]
 8006e1c:	3502      	adds	r5, #2
  for (uint8_t offset = 0; offset < 6; offset++)
 8006e1e:	2d0c      	cmp	r5, #12
 8006e20:	d1f6      	bne.n	8006e10 <MS5611_Init+0x60>
  sprintf(Buf, "Oversampling: %d\r\n", ms5611.uosr);
 8006e22:	7b62      	ldrb	r2, [r4, #13]
 8006e24:	4916      	ldr	r1, [pc, #88]	; (8006e80 <MS5611_Init+0xd0>)
 8006e26:	4813      	ldr	r0, [pc, #76]	; (8006e74 <MS5611_Init+0xc4>)
 8006e28:	f001 fa1c 	bl	8008264 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006e2c:	4811      	ldr	r0, [pc, #68]	; (8006e74 <MS5611_Init+0xc4>)
 8006e2e:	f7f9 f98f 	bl	8000150 <strlen>
 8006e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e36:	b282      	uxth	r2, r0
 8006e38:	490e      	ldr	r1, [pc, #56]	; (8006e74 <MS5611_Init+0xc4>)
 8006e3a:	480f      	ldr	r0, [pc, #60]	; (8006e78 <MS5611_Init+0xc8>)
 8006e3c:	f7fc fdac 	bl	8003998 <HAL_UART_Transmit>
 8006e40:	25ff      	movs	r5, #255	; 0xff
    read_barometer();                                           //Read and calculate the barometer data.
 8006e42:	f7ff fe15 	bl	8006a70 <read_barometer>
 8006e46:	3d01      	subs	r5, #1
    HAL_Delay(4);                                               //The main program loop also runs 250Hz (4ms per loop).
 8006e48:	2004      	movs	r0, #4
 8006e4a:	f7fa f999 	bl	8001180 <HAL_Delay>
  for (uint8_t start = 0; start < 255; start++) {                       //This loop runs 100 times.
 8006e4e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8006e52:	d1f6      	bne.n	8006e42 <MS5611_Init+0x92>
  ms5611.actual_pressure = 0;                                          //Reset the pressure calculations.
 8006e54:	2300      	movs	r3, #0
 8006e56:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
      ms5611.ct = 3;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e7d1      	b.n	8006e04 <MS5611_Init+0x54>
      ms5611.ct = 5;
 8006e60:	2305      	movs	r3, #5
 8006e62:	e7cf      	b.n	8006e04 <MS5611_Init+0x54>
      ms5611.ct = 10;
 8006e64:	230a      	movs	r3, #10
 8006e66:	e7cd      	b.n	8006e04 <MS5611_Init+0x54>
 8006e68:	00000000 	.word	0x00000000
 8006e6c:	40f8bcd0 	.word	0x40f8bcd0
 8006e70:	0800b228 	.word	0x0800b228
 8006e74:	20000da4 	.word	0x20000da4
 8006e78:	200010e8 	.word	0x200010e8
 8006e7c:	20000b58 	.word	0x20000b58
 8006e80:	0800b244 	.word	0x0800b244

08006e84 <Baro_update>:
    switch (taskOrder){
 8006e84:	4b2a      	ldr	r3, [pc, #168]	; (8006f30 <Baro_update+0xac>)
{
 8006e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (taskOrder){
 8006e8a:	681c      	ldr	r4, [r3, #0]
 8006e8c:	2c01      	cmp	r4, #1
 8006e8e:	d046      	beq.n	8006f1e <Baro_update+0x9a>
 8006e90:	2c02      	cmp	r4, #2
 8006e92:	f04f 0501 	mov.w	r5, #1
 8006e96:	d047      	beq.n	8006f28 <Baro_update+0xa4>
 8006e98:	2c00      	cmp	r4, #0
 8006e9a:	d13e      	bne.n	8006f1a <Baro_update+0x96>
       if ((int32_t)(loop_timer - baroDeadline) < 0)
 8006e9c:	4a25      	ldr	r2, [pc, #148]	; (8006f34 <Baro_update+0xb0>)
 8006e9e:	4e26      	ldr	r6, [pc, #152]	; (8006f38 <Baro_update+0xb4>)
       taskOrder++;
 8006ea0:	601d      	str	r5, [r3, #0]
       if ((int32_t)(loop_timer - baroDeadline) < 0)
 8006ea2:	6831      	ldr	r1, [r6, #0]
 8006ea4:	6813      	ldr	r3, [r2, #0]
 8006ea6:	1a5b      	subs	r3, r3, r1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	db20      	blt.n	8006eee <Baro_update+0x6a>
       baroDeadline = loop_timer;
 8006eac:	6813      	ldr	r3, [r2, #0]
       if (state) {
 8006eae:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8006f40 <Baro_update+0xbc>
       baroDeadline = loop_timer;
 8006eb2:	6033      	str	r3, [r6, #0]
       if (state) {
 8006eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8006eb8:	4f20      	ldr	r7, [pc, #128]	; (8006f3c <Baro_update+0xb8>)
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8006eba:	4620      	mov	r0, r4
       if (state) {
 8006ebc:	b1d3      	cbz	r3, 8006ef4 <Baro_update+0x70>
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8006ebe:	f7ff fdc1 	bl	8006a44 <readRegister24>
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8006ec2:	7b79      	ldrb	r1, [r7, #13]
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8006ec4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8006ec8:	3150      	adds	r1, #80	; 0x50
 8006eca:	462a      	mov	r2, r5
 8006ecc:	b2c9      	uxtb	r1, r1
 8006ece:	20ee      	movs	r0, #238	; 0xee
 8006ed0:	f7fd f87a 	bl	8003fc8 <I2C_Write>
        baroDeadline += 10000;
 8006ed4:	6833      	ldr	r3, [r6, #0]
        ms5611.realPressure = readPressure(1);
 8006ed6:	4628      	mov	r0, r5
        baroDeadline += 10000;
 8006ed8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8006edc:	3310      	adds	r3, #16
 8006ede:	6033      	str	r3, [r6, #0]
        ms5611.realPressure = readPressure(1);
 8006ee0:	f7ff fce8 	bl	80068b4 <readPressure>
        state = 0;
 8006ee4:	f8c8 4000 	str.w	r4, [r8]
        return 2;
 8006ee8:	2402      	movs	r4, #2
        ms5611.realPressure = readPressure(1);
 8006eea:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
}
 8006eee:	4620      	mov	r0, r4
 8006ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8006ef4:	f7ff fda6 	bl	8006a44 <readRegister24>
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8006ef8:	7b79      	ldrb	r1, [r7, #13]
        ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8006efa:	6678      	str	r0, [r7, #100]	; 0x64
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8006efc:	3140      	adds	r1, #64	; 0x40
 8006efe:	462a      	mov	r2, r5
 8006f00:	b2c9      	uxtb	r1, r1
 8006f02:	20ee      	movs	r0, #238	; 0xee
 8006f04:	f7fd f860 	bl	8003fc8 <I2C_Write>
        Baro_Common();
 8006f08:	f7ff fc1c 	bl	8006744 <Baro_Common>
        baroDeadline += 10000;
 8006f0c:	6833      	ldr	r3, [r6, #0]
        state = 1;
 8006f0e:	f8c8 5000 	str.w	r5, [r8]
        baroDeadline += 10000;
 8006f12:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8006f16:	3310      	adds	r3, #16
 8006f18:	6033      	str	r3, [r6, #0]
    return 1;
 8006f1a:	462c      	mov	r4, r5
 8006f1c:	e7e7      	b.n	8006eee <Baro_update+0x6a>
      taskOrder++;
 8006f1e:	2202      	movs	r2, #2
 8006f20:	601a      	str	r2, [r3, #0]
       getEstimatedAltitude();
 8006f22:	f7ff fc2d 	bl	8006780 <getEstimatedAltitude>
       break;
 8006f26:	e7e2      	b.n	8006eee <Baro_update+0x6a>
      taskOrder = 0;
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	e7f5      	b.n	8006f1a <Baro_update+0x96>
 8006f2e:	bf00      	nop
 8006f30:	20000620 	.word	0x20000620
 8006f34:	2000073c 	.word	0x2000073c
 8006f38:	20000520 	.word	0x20000520
 8006f3c:	20000b58 	.word	0x20000b58
 8006f40:	2000061c 	.word	0x2000061c

08006f44 <HAL_UART_RxCpltCallback>:
   return(ch);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART1) //current USART
 8006f44:	6802      	ldr	r2, [r0, #0]
 8006f46:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <HAL_UART_RxCpltCallback+0x30>)
{
 8006f48:	b510      	push	{r4, lr}
	if(huart->Instance == USART1) //current USART
 8006f4a:	429a      	cmp	r2, r3
{
 8006f4c:	4604      	mov	r4, r0
	if(huart->Instance == USART1) //current USART
 8006f4e:	d104      	bne.n	8006f5a <HAL_UART_RxCpltCallback+0x16>
		{
			write_Q(&Q_buffer[UART1], rx1_buffer[0]);
 8006f50:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <HAL_UART_RxCpltCallback+0x34>)
 8006f52:	480a      	ldr	r0, [pc, #40]	; (8006f7c <HAL_UART_RxCpltCallback+0x38>)
 8006f54:	7819      	ldrb	r1, [r3, #0]
 8006f56:	f7fe fa12 	bl	800537e <write_Q>
			//TX_CHR(rx1_buffer[0]);
		}
		
	if(huart->Instance == USART2) //current USART
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	4b08      	ldr	r3, [pc, #32]	; (8006f80 <HAL_UART_RxCpltCallback+0x3c>)
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d106      	bne.n	8006f70 <HAL_UART_RxCpltCallback+0x2c>
		{
			write_Q(&Q_buffer[UART2], rx2_buffer[0]);
		}
}
 8006f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			write_Q(&Q_buffer[UART2], rx2_buffer[0]);
 8006f66:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <HAL_UART_RxCpltCallback+0x40>)
 8006f68:	4807      	ldr	r0, [pc, #28]	; (8006f88 <HAL_UART_RxCpltCallback+0x44>)
 8006f6a:	7819      	ldrb	r1, [r3, #0]
 8006f6c:	f7fe ba07 	b.w	800537e <write_Q>
 8006f70:	bd10      	pop	{r4, pc}
 8006f72:	bf00      	nop
 8006f74:	40013800 	.word	0x40013800
 8006f78:	20000e24 	.word	0x20000e24
 8006f7c:	2000096c 	.word	0x2000096c
 8006f80:	40004400 	.word	0x40004400
 8006f84:	20000e34 	.word	0x20000e34
 8006f88:	200009f4 	.word	0x200009f4

08006f8c <TX_CHR>:

void TX_CHR(char ch){
	while(!(USART1->SR & 0x80));
 8006f8c:	4b02      	ldr	r3, [pc, #8]	; (8006f98 <TX_CHR+0xc>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	0612      	lsls	r2, r2, #24
 8006f92:	d5fc      	bpl.n	8006f8e <TX_CHR+0x2>
	USART1->DR = ch;
 8006f94:	6058      	str	r0, [r3, #4]
 8006f96:	4770      	bx	lr
 8006f98:	40013800 	.word	0x40013800

08006f9c <serialize8>:
}

///////////////////////////////////////////////////
void serialize8(uint8_t a)
{
 8006f9c:	b508      	push	{r3, lr}
 8006f9e:	4601      	mov	r1, r0
    TX_CHR(a);
 8006fa0:	f7ff fff4 	bl	8006f8c <TX_CHR>
    currentPortState->checksum ^= a;
 8006fa4:	4b02      	ldr	r3, [pc, #8]	; (8006fb0 <serialize8+0x14>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	781a      	ldrb	r2, [r3, #0]
 8006faa:	4051      	eors	r1, r2
 8006fac:	7019      	strb	r1, [r3, #0]
 8006fae:	bd08      	pop	{r3, pc}
 8006fb0:	2000000c 	.word	0x2000000c

08006fb4 <headSerial>:
    t += (uint32_t)read16() << 16;
    return t;
}

void headSerial(uint8_t err, uint8_t s, uint8_t cmdMSP)
{
 8006fb4:	b570      	push	{r4, r5, r6, lr}
 8006fb6:	4606      	mov	r6, r0
    serialize8('$');
 8006fb8:	2024      	movs	r0, #36	; 0x24
{
 8006fba:	460d      	mov	r5, r1
 8006fbc:	4614      	mov	r4, r2
    serialize8('$');
 8006fbe:	f7ff ffed 	bl	8006f9c <serialize8>
    serialize8('M');
 8006fc2:	204d      	movs	r0, #77	; 0x4d
 8006fc4:	f7ff ffea 	bl	8006f9c <serialize8>
    serialize8(err ? '!' : '>');
 8006fc8:	2e00      	cmp	r6, #0
 8006fca:	bf14      	ite	ne
 8006fcc:	2021      	movne	r0, #33	; 0x21
 8006fce:	203e      	moveq	r0, #62	; 0x3e
 8006fd0:	f7ff ffe4 	bl	8006f9c <serialize8>
    currentPortState->checksum = 0;               // start calculating a new checksum
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <headSerial+0x38>)
    serialize8(s);
 8006fd8:	4628      	mov	r0, r5
    currentPortState->checksum = 0;               // start calculating a new checksum
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	701a      	strb	r2, [r3, #0]
    serialize8(s);
 8006fde:	f7ff ffdd 	bl	8006f9c <serialize8>
    serialize8(cmdMSP);
 8006fe2:	4620      	mov	r0, r4
}
 8006fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serialize8(cmdMSP);
 8006fe8:	f7ff bfd8 	b.w	8006f9c <serialize8>
 8006fec:	2000000c 	.word	0x2000000c

08006ff0 <headSerialSend>:

void headSerialSend(uint8_t s, uint8_t cmdMSP)
{
    headSerial(0, s, cmdMSP);
 8006ff0:	460a      	mov	r2, r1
 8006ff2:	4601      	mov	r1, r0
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	f7ff bfdd 	b.w	8006fb4 <headSerial>
	...

08006ffc <tailSerialReply>:
    headSerialResponse(1, s);
}

void tailSerialReply(void)
{
    serialize8(currentPortState->checksum);
 8006ffc:	4b02      	ldr	r3, [pc, #8]	; (8007008 <tailSerialReply+0xc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	7818      	ldrb	r0, [r3, #0]
 8007002:	f7ff bfcb 	b.w	8006f9c <serialize8>
 8007006:	bf00      	nop
 8007008:	2000000c 	.word	0x2000000c

0800700c <PrintData>:
}
///////////////////////////////////////////////////

void PrintData(uint8_t command)
{
 800700c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Debug_TC++;
 800700e:	4aa6      	ldr	r2, [pc, #664]	; (80072a8 <PrintData+0x29c>)
{
 8007010:	b099      	sub	sp, #100	; 0x64
  Debug_TC++;
 8007012:	7813      	ldrb	r3, [r2, #0]
{
 8007014:	4604      	mov	r4, r0
  Debug_TC++;
 8007016:	3301      	adds	r3, #1
 8007018:	b2db      	uxtb	r3, r3
  if(Debug_TC >= 12){
 800701a:	2b0b      	cmp	r3, #11
 800701c:	d802      	bhi.n	8007024 <PrintData+0x18>
  Debug_TC++;
 800701e:	7013      	strb	r3, [r2, #0]
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw);
	     HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
		break;
	 }
  }
}
 8007020:	b019      	add	sp, #100	; 0x64
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Debug_TC = 0;
 8007024:	2300      	movs	r3, #0
    LED1_TOGGLE;  //GREEN
 8007026:	2110      	movs	r1, #16
 8007028:	48a0      	ldr	r0, [pc, #640]	; (80072ac <PrintData+0x2a0>)
    Debug_TC = 0;
 800702a:	7013      	strb	r3, [r2, #0]
    LED1_TOGGLE;  //GREEN
 800702c:	f7fa fdc7 	bl	8001bbe <HAL_GPIO_TogglePin>
	switch(command)
 8007030:	2c0e      	cmp	r4, #14
 8007032:	d8f5      	bhi.n	8007020 <PrintData+0x14>
 8007034:	e8df f014 	tbh	[pc, r4, lsl #1]
 8007038:	001e000f 	.word	0x001e000f
 800703c:	0076005f 	.word	0x0076005f
 8007040:	00b000a0 	.word	0x00b000a0
 8007044:	015e00fe 	.word	0x015e00fe
 8007048:	01820168 	.word	0x01820168
 800704c:	01b0019d 	.word	0x01b0019d
 8007050:	01d801c4 	.word	0x01d801c4
 8007054:	01ec      	.short	0x01ec
		sprintf(Buf, "[1]9250 [3]Radio [4]Motor [5]Angle [6]PID [9]IMU [p]Kp [i]Ki [d]Kd [q,w,e] [z,x,c] \r\n ");
 8007056:	4996      	ldr	r1, [pc, #600]	; (80072b0 <PrintData+0x2a4>)
 8007058:	4896      	ldr	r0, [pc, #600]	; (80072b4 <PrintData+0x2a8>)
 800705a:	f001 f927 	bl	80082ac <strcpy>
	     HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
 800705e:	4895      	ldr	r0, [pc, #596]	; (80072b4 <PrintData+0x2a8>)
 8007060:	f7f9 f876 	bl	8000150 <strlen>
 8007064:	4993      	ldr	r1, [pc, #588]	; (80072b4 <PrintData+0x2a8>)
 8007066:	b282      	uxth	r2, r0
 8007068:	4893      	ldr	r0, [pc, #588]	; (80072b8 <PrintData+0x2ac>)
}
 800706a:	b019      	add	sp, #100	; 0x64
 800706c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	     HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
 8007070:	f7fc bcee 	b.w	8003a50 <HAL_UART_Transmit_DMA>
	                    imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW]);
 8007074:	4c91      	ldr	r4, [pc, #580]	; (80072bc <PrintData+0x2b0>)
	     sprintf(Buf, " acc (%6.2f), (%6.2f), (%6.2f) / gyro (%6.2f), (%6.2f), (%6.2f) / mag (%6.f), (%6.f), (%6.f)\r\n",
 8007076:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007078:	f7f9 f9d6 	bl	8000428 <__aeabi_f2d>
 800707c:	4606      	mov	r6, r0
 800707e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007080:	460f      	mov	r7, r1
 8007082:	f7f9 f9d1 	bl	8000428 <__aeabi_f2d>
 8007086:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800708a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800708c:	f7f9 f9cc 	bl	8000428 <__aeabi_f2d>
 8007090:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007094:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007096:	f7f9 f9c7 	bl	8000428 <__aeabi_f2d>
 800709a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800709e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80070a0:	f7f9 f9c2 	bl	8000428 <__aeabi_f2d>
 80070a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80070a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80070aa:	f7f9 f9bd 	bl	8000428 <__aeabi_f2d>
 80070ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80070b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80070b4:	f7f9 f9b8 	bl	8000428 <__aeabi_f2d>
 80070b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80070be:	f7f9 f9b3 	bl	8000428 <__aeabi_f2d>
 80070c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80070c8:	f7f9 f9ae 	bl	8000428 <__aeabi_f2d>
 80070cc:	4632      	mov	r2, r6
 80070ce:	e9cd 0100 	strd	r0, r1, [sp]
 80070d2:	463b      	mov	r3, r7
 80070d4:	497a      	ldr	r1, [pc, #488]	; (80072c0 <PrintData+0x2b4>)
 80070d6:	4877      	ldr	r0, [pc, #476]	; (80072b4 <PrintData+0x2a8>)
 80070d8:	f001 f8c4 	bl	8008264 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80070dc:	4875      	ldr	r0, [pc, #468]	; (80072b4 <PrintData+0x2a8>)
 80070de:	f7f9 f837 	bl	8000150 <strlen>
 80070e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070e6:	b282      	uxth	r2, r0
 80070e8:	4972      	ldr	r1, [pc, #456]	; (80072b4 <PrintData+0x2a8>)
 80070ea:	4873      	ldr	r0, [pc, #460]	; (80072b8 <PrintData+0x2ac>)
}
 80070ec:	b019      	add	sp, #100	; 0x64
 80070ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80070f2:	f7fc bc51 	b.w	8003998 <HAL_UART_Transmit>
                 	imu.gyro_cal[ROLL], imu.gyro_cal[PITCH], imu.gyro_cal[YAW]);
 80070f6:	4c71      	ldr	r4, [pc, #452]	; (80072bc <PrintData+0x2b0>)
		sprintf(Buf, " gyroBias_x: (%3.2f), gyroBias_y: (%3.2f), gyroBias_z: (%3.2f)\r\n",
 80070f8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80070fa:	f7f9 f995 	bl	8000428 <__aeabi_f2d>
 80070fe:	4606      	mov	r6, r0
 8007100:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007102:	460f      	mov	r7, r1
 8007104:	f7f9 f990 	bl	8000428 <__aeabi_f2d>
 8007108:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800710c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800710e:	f7f9 f98b 	bl	8000428 <__aeabi_f2d>
 8007112:	4632      	mov	r2, r6
 8007114:	e9cd 0100 	strd	r0, r1, [sp]
 8007118:	463b      	mov	r3, r7
 800711a:	496a      	ldr	r1, [pc, #424]	; (80072c4 <PrintData+0x2b8>)
 800711c:	4865      	ldr	r0, [pc, #404]	; (80072b4 <PrintData+0x2a8>)
 800711e:	f001 f8a1 	bl	8008264 <siprintf>
 8007122:	e7db      	b.n	80070dc <PrintData+0xd0>
	          GPS.year, GPS.month, GPS.day, GPS.hour, GPS.minute, GPS.seconds, GPS.milliseconds, GPS.speed, GPS.angle, GPS.error);
 8007124:	4c68      	ldr	r4, [pc, #416]	; (80072c8 <PrintData+0x2bc>)
	  sprintf(Buf, "Y : %2d, M : %2d, D : %2d, H: %2d, min : %2d, sec : %2d, mil : %3d, speed : %.2f, angle : %.2f, Error : %d\n",
 8007126:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800712a:	f894 607c 	ldrb.w	r6, [r4, #124]	; 0x7c
 800712e:	f894 507b 	ldrb.w	r5, [r4, #123]	; 0x7b
 8007132:	930a      	str	r3, [sp, #40]	; 0x28
 8007134:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8007138:	f7f9 f976 	bl	8000428 <__aeabi_f2d>
 800713c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007140:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8007144:	f7f9 f970 	bl	8000428 <__aeabi_f2d>
 8007148:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800714c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 8007150:	462a      	mov	r2, r5
 8007152:	9304      	str	r3, [sp, #16]
 8007154:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 8007158:	495c      	ldr	r1, [pc, #368]	; (80072cc <PrintData+0x2c0>)
 800715a:	9303      	str	r3, [sp, #12]
 800715c:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8007160:	4854      	ldr	r0, [pc, #336]	; (80072b4 <PrintData+0x2a8>)
 8007162:	9302      	str	r3, [sp, #8]
 8007164:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	4633      	mov	r3, r6
 8007172:	f001 f877 	bl	8008264 <siprintf>
 8007176:	e772      	b.n	800705e <PrintData+0x52>
		sprintf(Buf, " %d %d %d %d\r\n", motor[0], motor[1], motor[2], motor[3]);
 8007178:	4955      	ldr	r1, [pc, #340]	; (80072d0 <PrintData+0x2c4>)
 800717a:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 800717e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8007182:	f9b1 2000 	ldrsh.w	r2, [r1]
 8007186:	9001      	str	r0, [sp, #4]
 8007188:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800718c:	4849      	ldr	r0, [pc, #292]	; (80072b4 <PrintData+0x2a8>)
 800718e:	9100      	str	r1, [sp, #0]
 8007190:	4950      	ldr	r1, [pc, #320]	; (80072d4 <PrintData+0x2c8>)
 8007192:	f001 f867 	bl	8008264 <siprintf>
 8007196:	e7a1      	b.n	80070dc <PrintData+0xd0>
            imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW], imu.AHRS[ROLL], imu.AHRS[PITCH], imu.AHRS[YAW], RC.rcCommand[ROLL], RC.rcCommand[PITCH], RC.rcCommand[YAW], RC.rcCommand[THROTTLE], BAT.VBAT_Sense, BAT.VBAT, f.ARMED, ms5611.actual_pressure, ms5611.GroundAltitude);
 8007198:	4c48      	ldr	r4, [pc, #288]	; (80072bc <PrintData+0x2b0>)
 800719a:	4d4f      	ldr	r5, [pc, #316]	; (80072d8 <PrintData+0x2cc>)
    sprintf(Buf, "Mag:(%5.f)(%5.f)(%5.f), AHRS:(%4.f)(%4.f)(%4.f), RC:(%4.d)(%4.d)(%4.d)(%4.d), (%4.d) (%4.2f), ARMED: (%2.1d), MS5611 : %.2f Pa , %.2f cm\r\n",
 800719c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800719e:	f7f9 f943 	bl	8000428 <__aeabi_f2d>
 80071a2:	4606      	mov	r6, r0
 80071a4:	f8d5 0194 	ldr.w	r0, [r5, #404]	; 0x194
 80071a8:	460f      	mov	r7, r1
 80071aa:	f7f9 f93d 	bl	8000428 <__aeabi_f2d>
 80071ae:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80071b2:	f8d5 0168 	ldr.w	r0, [r5, #360]	; 0x168
 80071b6:	f7f9 f937 	bl	8000428 <__aeabi_f2d>
 80071ba:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
            imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW], imu.AHRS[ROLL], imu.AHRS[PITCH], imu.AHRS[YAW], RC.rcCommand[ROLL], RC.rcCommand[PITCH], RC.rcCommand[YAW], RC.rcCommand[THROTTLE], BAT.VBAT_Sense, BAT.VBAT, f.ARMED, ms5611.actual_pressure, ms5611.GroundAltitude);
 80071be:	4b47      	ldr	r3, [pc, #284]	; (80072dc <PrintData+0x2d0>)
 80071c0:	4d47      	ldr	r5, [pc, #284]	; (80072e0 <PrintData+0x2d4>)
    sprintf(Buf, "Mag:(%5.f)(%5.f)(%5.f), AHRS:(%4.f)(%4.f)(%4.f), RC:(%4.d)(%4.d)(%4.d)(%4.d), (%4.d) (%4.2f), ARMED: (%2.1d), MS5611 : %.2f Pa , %.2f cm\r\n",
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	9312      	str	r3, [sp, #72]	; 0x48
 80071c6:	6868      	ldr	r0, [r5, #4]
 80071c8:	f7f9 f92e 	bl	8000428 <__aeabi_f2d>
 80071cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	930e      	str	r3, [sp, #56]	; 0x38
            imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW], imu.AHRS[ROLL], imu.AHRS[PITCH], imu.AHRS[YAW], RC.rcCommand[ROLL], RC.rcCommand[PITCH], RC.rcCommand[YAW], RC.rcCommand[THROTTLE], BAT.VBAT_Sense, BAT.VBAT, f.ARMED, ms5611.actual_pressure, ms5611.GroundAltitude);
 80071d4:	4b43      	ldr	r3, [pc, #268]	; (80072e4 <PrintData+0x2d8>)
    sprintf(Buf, "Mag:(%5.f)(%5.f)(%5.f), AHRS:(%4.f)(%4.f)(%4.f), RC:(%4.d)(%4.d)(%4.d)(%4.d), (%4.d) (%4.2f), ARMED: (%2.1d), MS5611 : %.2f Pa , %.2f cm\r\n",
 80071d6:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 80071da:	920d      	str	r2, [sp, #52]	; 0x34
 80071dc:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 80071e0:	920c      	str	r2, [sp, #48]	; 0x30
 80071e2:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 80071e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80071e8:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80071ec:	930a      	str	r3, [sp, #40]	; 0x28
 80071ee:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80071f2:	f7f9 f919 	bl	8000428 <__aeabi_f2d>
 80071f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071fa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80071fe:	f7f9 f913 	bl	8000428 <__aeabi_f2d>
 8007202:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007206:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800720a:	f7f9 f90d 	bl	8000428 <__aeabi_f2d>
 800720e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007212:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007214:	f7f9 f908 	bl	8000428 <__aeabi_f2d>
 8007218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800721c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800721e:	f7f9 f903 	bl	8000428 <__aeabi_f2d>
 8007222:	4632      	mov	r2, r6
 8007224:	e9cd 0100 	strd	r0, r1, [sp]
 8007228:	463b      	mov	r3, r7
 800722a:	492f      	ldr	r1, [pc, #188]	; (80072e8 <PrintData+0x2dc>)
 800722c:	4821      	ldr	r0, [pc, #132]	; (80072b4 <PrintData+0x2a8>)
 800722e:	f001 f819 	bl	8008264 <siprintf>
 8007232:	e714      	b.n	800705e <PrintData+0x52>
            pid.kp[ROLL], pid.kp[PITCH], pid.ki[ROLL], pid.ki[PITCH], pid.kd[ROLL], pid.kd[PITCH], pid.kp[YAW], pid.ki[YAW], pid.kd[YAW], f.ARMED, f.Tuning_MODE);
 8007234:	4c2d      	ldr	r4, [pc, #180]	; (80072ec <PrintData+0x2e0>)
    sprintf(Buf,"R[P]: %2.2f, P[P]: %2.2f, R[I]: %2.2f, P[I]: %2.2f, R[D]: %2.2f, P[D]: %2.2f, Y[P]: %2.2f, Y[I]: %2.2f, Y[D]: %2.2f, ARMED: (%d), Tuning : (%d)\r\n",
 8007236:	6860      	ldr	r0, [r4, #4]
 8007238:	f7f9 f8f6 	bl	8000428 <__aeabi_f2d>
            pid.kp[ROLL], pid.kp[PITCH], pid.ki[ROLL], pid.ki[PITCH], pid.kd[ROLL], pid.kd[PITCH], pid.kp[YAW], pid.ki[YAW], pid.kd[YAW], f.ARMED, f.Tuning_MODE);
 800723c:	4b27      	ldr	r3, [pc, #156]	; (80072dc <PrintData+0x2d0>)
    sprintf(Buf,"R[P]: %2.2f, P[P]: %2.2f, R[I]: %2.2f, P[I]: %2.2f, R[D]: %2.2f, P[D]: %2.2f, Y[P]: %2.2f, Y[I]: %2.2f, Y[D]: %2.2f, ARMED: (%d), Tuning : (%d)\r\n",
 800723e:	4606      	mov	r6, r0
 8007240:	789a      	ldrb	r2, [r3, #2]
 8007242:	460f      	mov	r7, r1
 8007244:	9211      	str	r2, [sp, #68]	; 0x44
 8007246:	785b      	ldrb	r3, [r3, #1]
 8007248:	9310      	str	r3, [sp, #64]	; 0x40
 800724a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800724c:	f7f9 f8ec 	bl	8000428 <__aeabi_f2d>
 8007250:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007254:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007256:	f7f9 f8e7 	bl	8000428 <__aeabi_f2d>
 800725a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800725e:	68e0      	ldr	r0, [r4, #12]
 8007260:	f7f9 f8e2 	bl	8000428 <__aeabi_f2d>
 8007264:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007268:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800726a:	f7f9 f8dd 	bl	8000428 <__aeabi_f2d>
 800726e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007272:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007274:	f7f9 f8d8 	bl	8000428 <__aeabi_f2d>
 8007278:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800727c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800727e:	f7f9 f8d3 	bl	8000428 <__aeabi_f2d>
 8007282:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007286:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007288:	f7f9 f8ce 	bl	8000428 <__aeabi_f2d>
 800728c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007290:	68a0      	ldr	r0, [r4, #8]
 8007292:	f7f9 f8c9 	bl	8000428 <__aeabi_f2d>
 8007296:	4632      	mov	r2, r6
 8007298:	e9cd 0100 	strd	r0, r1, [sp]
 800729c:	463b      	mov	r3, r7
 800729e:	4914      	ldr	r1, [pc, #80]	; (80072f0 <PrintData+0x2e4>)
 80072a0:	4804      	ldr	r0, [pc, #16]	; (80072b4 <PrintData+0x2a8>)
 80072a2:	f000 ffdf 	bl	8008264 <siprintf>
 80072a6:	e6da      	b.n	800705e <PrintData+0x52>
 80072a8:	20000624 	.word	0x20000624
 80072ac:	40010c00 	.word	0x40010c00
 80072b0:	0800b269 	.word	0x0800b269
 80072b4:	20000da4 	.word	0x20000da4
 80072b8:	200010e8 	.word	0x200010e8
 80072bc:	20000cf8 	.word	0x20000cf8
 80072c0:	0800b2c0 	.word	0x0800b2c0
 80072c4:	0800b31f 	.word	0x0800b31f
 80072c8:	2000077c 	.word	0x2000077c
 80072cc:	0800b360 	.word	0x0800b360
 80072d0:	2000086a 	.word	0x2000086a
 80072d4:	0800b3cc 	.word	0x0800b3cc
 80072d8:	20000b58 	.word	0x20000b58
 80072dc:	20000a7c 	.word	0x20000a7c
 80072e0:	20000e44 	.word	0x20000e44
 80072e4:	20000af4 	.word	0x20000af4
 80072e8:	0800b3db 	.word	0x0800b3db
 80072ec:	20000874 	.word	0x20000874
 80072f0:	0800b466 	.word	0x0800b466
		  sprintf(Buf, " state: %d, data: %d \n ", hdma_usart1_rx.State, rx1_buffer[0]);
 80072f4:	4b50      	ldr	r3, [pc, #320]	; (8007438 <PrintData+0x42c>)
 80072f6:	4a51      	ldr	r2, [pc, #324]	; (800743c <PrintData+0x430>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80072fe:	4950      	ldr	r1, [pc, #320]	; (8007440 <PrintData+0x434>)
 8007300:	4850      	ldr	r0, [pc, #320]	; (8007444 <PrintData+0x438>)
 8007302:	f000 ffaf 	bl	8008264 <siprintf>
 8007306:	e6aa      	b.n	800705e <PrintData+0x52>
		sprintf(Buf, "%f %f %f\r\n",pid.output2[ROLL], pid.output2[PITCH], pid.output2[YAW]);
 8007308:	4c4f      	ldr	r4, [pc, #316]	; (8007448 <PrintData+0x43c>)
 800730a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 800730e:	f7f9 f88b 	bl	8000428 <__aeabi_f2d>
 8007312:	4606      	mov	r6, r0
 8007314:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8007318:	460f      	mov	r7, r1
 800731a:	f7f9 f885 	bl	8000428 <__aeabi_f2d>
 800731e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007322:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8007326:	f7f9 f87f 	bl	8000428 <__aeabi_f2d>
 800732a:	4632      	mov	r2, r6
 800732c:	463b      	mov	r3, r7
 800732e:	e9cd 0100 	strd	r0, r1, [sp]
 8007332:	4946      	ldr	r1, [pc, #280]	; (800744c <PrintData+0x440>)
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw);
 8007334:	4843      	ldr	r0, [pc, #268]	; (8007444 <PrintData+0x438>)
 8007336:	f000 ff95 	bl	8008264 <siprintf>
 800733a:	e690      	b.n	800705e <PrintData+0x52>
		sprintf(Buf, "Roll:(%.2f), Pitch:(%.2f), Yaw:(%.2f), rx_buffer:(%d)\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw, rx1_buffer[0]);
 800733c:	4c44      	ldr	r4, [pc, #272]	; (8007450 <PrintData+0x444>)
 800733e:	4b3e      	ldr	r3, [pc, #248]	; (8007438 <PrintData+0x42c>)
 8007340:	6820      	ldr	r0, [r4, #0]
 8007342:	781d      	ldrb	r5, [r3, #0]
 8007344:	f7f9 f870 	bl	8000428 <__aeabi_f2d>
 8007348:	b2ed      	uxtb	r5, r5
 800734a:	9504      	str	r5, [sp, #16]
 800734c:	4606      	mov	r6, r0
 800734e:	68a0      	ldr	r0, [r4, #8]
 8007350:	460f      	mov	r7, r1
 8007352:	f7f9 f869 	bl	8000428 <__aeabi_f2d>
 8007356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800735a:	6860      	ldr	r0, [r4, #4]
 800735c:	f7f9 f864 	bl	8000428 <__aeabi_f2d>
 8007360:	4632      	mov	r2, r6
 8007362:	e9cd 0100 	strd	r0, r1, [sp]
 8007366:	463b      	mov	r3, r7
 8007368:	493a      	ldr	r1, [pc, #232]	; (8007454 <PrintData+0x448>)
 800736a:	4836      	ldr	r0, [pc, #216]	; (8007444 <PrintData+0x438>)
 800736c:	f000 ff7a 	bl	8008264 <siprintf>
 8007370:	e675      	b.n	800705e <PrintData+0x52>
    sprintf(Buf, "MS5611 : %.2f C, %d Pa, %.2f m\r\n\r\n",
 8007372:	4c39      	ldr	r4, [pc, #228]	; (8007458 <PrintData+0x44c>)
 8007374:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
 8007378:	f7f9 f856 	bl	8000428 <__aeabi_f2d>
 800737c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007380:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8007384:	f504 75c0 	add.w	r5, r4, #384	; 0x180
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800738e:	4933      	ldr	r1, [pc, #204]	; (800745c <PrintData+0x450>)
 8007390:	482c      	ldr	r0, [pc, #176]	; (8007444 <PrintData+0x438>)
 8007392:	f000 ff67 	bl	8008264 <siprintf>
 8007396:	e662      	b.n	800705e <PrintData+0x52>
			sprintf(Buf, "\r\n [KP]: %.2f, %.2f, %.2f \r\n ", pid.kp[0], pid.kp[1], pid.kp[2]);
 8007398:	4c2b      	ldr	r4, [pc, #172]	; (8007448 <PrintData+0x43c>)
 800739a:	6860      	ldr	r0, [r4, #4]
 800739c:	f7f9 f844 	bl	8000428 <__aeabi_f2d>
 80073a0:	4606      	mov	r6, r0
 80073a2:	68e0      	ldr	r0, [r4, #12]
 80073a4:	460f      	mov	r7, r1
 80073a6:	f7f9 f83f 	bl	8000428 <__aeabi_f2d>
 80073aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ae:	68a0      	ldr	r0, [r4, #8]
 80073b0:	f7f9 f83a 	bl	8000428 <__aeabi_f2d>
 80073b4:	4632      	mov	r2, r6
 80073b6:	e9cd 0100 	strd	r0, r1, [sp]
 80073ba:	463b      	mov	r3, r7
 80073bc:	4928      	ldr	r1, [pc, #160]	; (8007460 <PrintData+0x454>)
 80073be:	e7b9      	b.n	8007334 <PrintData+0x328>
			sprintf(Buf, "\r\n [KI]: %.2f, %.2f, %.2f\r\n", pid.ki[0], pid.ki[1], pid.ki[2]);
 80073c0:	4c21      	ldr	r4, [pc, #132]	; (8007448 <PrintData+0x43c>)
 80073c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80073c4:	f7f9 f830 	bl	8000428 <__aeabi_f2d>
 80073c8:	4606      	mov	r6, r0
 80073ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80073cc:	460f      	mov	r7, r1
 80073ce:	f7f9 f82b 	bl	8000428 <__aeabi_f2d>
 80073d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80073d8:	f7f9 f826 	bl	8000428 <__aeabi_f2d>
 80073dc:	4632      	mov	r2, r6
 80073de:	e9cd 0100 	strd	r0, r1, [sp]
 80073e2:	463b      	mov	r3, r7
 80073e4:	491f      	ldr	r1, [pc, #124]	; (8007464 <PrintData+0x458>)
 80073e6:	e7a5      	b.n	8007334 <PrintData+0x328>
			sprintf(Buf, "\r\n [KD]: %.2f, %.2f, %.2f\r\n", pid.kd[0], pid.kd[1], pid.kd[2]);
 80073e8:	4c17      	ldr	r4, [pc, #92]	; (8007448 <PrintData+0x43c>)
 80073ea:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80073ec:	f7f9 f81c 	bl	8000428 <__aeabi_f2d>
 80073f0:	4606      	mov	r6, r0
 80073f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073f4:	460f      	mov	r7, r1
 80073f6:	f7f9 f817 	bl	8000428 <__aeabi_f2d>
 80073fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007400:	f7f9 f812 	bl	8000428 <__aeabi_f2d>
 8007404:	4632      	mov	r2, r6
 8007406:	e9cd 0100 	strd	r0, r1, [sp]
 800740a:	463b      	mov	r3, r7
 800740c:	4916      	ldr	r1, [pc, #88]	; (8007468 <PrintData+0x45c>)
 800740e:	e791      	b.n	8007334 <PrintData+0x328>
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw);
 8007410:	4c0f      	ldr	r4, [pc, #60]	; (8007450 <PrintData+0x444>)
 8007412:	6820      	ldr	r0, [r4, #0]
 8007414:	f7f9 f808 	bl	8000428 <__aeabi_f2d>
 8007418:	4606      	mov	r6, r0
 800741a:	68a0      	ldr	r0, [r4, #8]
 800741c:	460f      	mov	r7, r1
 800741e:	f7f9 f803 	bl	8000428 <__aeabi_f2d>
 8007422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007426:	6860      	ldr	r0, [r4, #4]
 8007428:	f7f8 fffe 	bl	8000428 <__aeabi_f2d>
 800742c:	4632      	mov	r2, r6
 800742e:	e9cd 0100 	strd	r0, r1, [sp]
 8007432:	463b      	mov	r3, r7
 8007434:	490d      	ldr	r1, [pc, #52]	; (800746c <PrintData+0x460>)
 8007436:	e77d      	b.n	8007334 <PrintData+0x328>
 8007438:	20000e24 	.word	0x20000e24
 800743c:	20000fd8 	.word	0x20000fd8
 8007440:	0800b4f8 	.word	0x0800b4f8
 8007444:	20000da4 	.word	0x20000da4
 8007448:	20000874 	.word	0x20000874
 800744c:	0800b5c8 	.word	0x0800b5c8
 8007450:	20000838 	.word	0x20000838
 8007454:	0800b510 	.word	0x0800b510
 8007458:	20000b58 	.word	0x20000b58
 800745c:	0800b548 	.word	0x0800b548
 8007460:	0800b56b 	.word	0x0800b56b
 8007464:	0800b589 	.word	0x0800b589
 8007468:	0800b5a5 	.word	0x0800b5a5
 800746c:	0800b5c1 	.word	0x0800b5c1

08007470 <SendTelemetry>:

 }

void SendTelemetry(void){
  static int x = 0;
  x++;
 8007470:	4a10      	ldr	r2, [pc, #64]	; (80074b4 <SendTelemetry+0x44>)
void SendTelemetry(void){
 8007472:	b508      	push	{r3, lr}
  x++;
 8007474:	6813      	ldr	r3, [r2, #0]
 8007476:	3301      	adds	r3, #1
  if (x >= 1000){
 8007478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800747c:	da01      	bge.n	8007482 <SendTelemetry+0x12>
  x++;
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	bd08      	pop	{r3, pc}
    x = 0;
 8007482:	2300      	movs	r3, #0
    RGB_B_TOGGLE;
 8007484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007488:	480b      	ldr	r0, [pc, #44]	; (80074b8 <SendTelemetry+0x48>)
    x = 0;
 800748a:	6013      	str	r3, [r2, #0]
    RGB_B_TOGGLE;
 800748c:	f7fa fb97 	bl	8001bbe <HAL_GPIO_TogglePin>
    headSerialSend(3, MSP_PID);
 8007490:	2170      	movs	r1, #112	; 0x70
 8007492:	2003      	movs	r0, #3
 8007494:	f7ff fdac 	bl	8006ff0 <headSerialSend>
    serialize8(10);
 8007498:	200a      	movs	r0, #10
 800749a:	f7ff fd7f 	bl	8006f9c <serialize8>
    serialize8(20);
 800749e:	2014      	movs	r0, #20
 80074a0:	f7ff fd7c 	bl	8006f9c <serialize8>
    serialize8(110);
 80074a4:	206e      	movs	r0, #110	; 0x6e
 80074a6:	f7ff fd79 	bl	8006f9c <serialize8>
    tailSerialReply();
  }
}
 80074aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tailSerialReply();
 80074ae:	f7ff bda5 	b.w	8006ffc <tailSerialReply>
 80074b2:	bf00      	nop
 80074b4:	20000734 	.word	0x20000734
 80074b8:	40010c00 	.word	0x40010c00

080074bc <HAL_SYSTICK_Callback>:
static volatile uint32_t msTicks = 0;


void HAL_SYSTICK_Callback(void)
{
	msTicks++;
 80074bc:	4a02      	ldr	r2, [pc, #8]	; (80074c8 <HAL_SYSTICK_Callback+0xc>)
 80074be:	6813      	ldr	r3, [r2, #0]
 80074c0:	3301      	adds	r3, #1
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	20000738 	.word	0x20000738

080074cc <micros>:
}

uint32_t micros(void)
{
 80074cc:	b510      	push	{r4, lr}
	 register uint32_t ms, cycle_cnt;
	    do {
	        ms = msTicks;
 80074ce:	4909      	ldr	r1, [pc, #36]	; (80074f4 <micros+0x28>)
	        cycle_cnt = SysTick->VAL;
 80074d0:	4c09      	ldr	r4, [pc, #36]	; (80074f8 <micros+0x2c>)
	        ms = msTicks;
 80074d2:	680a      	ldr	r2, [r1, #0]
	        cycle_cnt = SysTick->VAL;
 80074d4:	68a3      	ldr	r3, [r4, #8]
	    } while (ms != msTicks);
 80074d6:	6808      	ldr	r0, [r1, #0]
 80074d8:	4282      	cmp	r2, r0
 80074da:	d1fa      	bne.n	80074d2 <micros+0x6>
	    return (ms * 1000) + (72 * 1000 - cycle_cnt) / 72; //168
 80074dc:	2048      	movs	r0, #72	; 0x48
 80074de:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
 80074e2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80074e6:	fbb3 f3f0 	udiv	r3, r3, r0
}
 80074ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074ee:	fb00 3002 	mla	r0, r0, r2, r3
 80074f2:	bd10      	pop	{r4, pc}
 80074f4:	20000738 	.word	0x20000738
 80074f8:	e000e010 	.word	0xe000e010

080074fc <millis>:

uint32_t millis(void)
{
  return HAL_GetTick();
 80074fc:	f7f9 be3a 	b.w	8001174 <HAL_GetTick>

08007500 <ssd1306_command>:



#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }

void ssd1306_command(uint8_t command) {
 8007500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr, 0x00, 1, &command, 1, 10);
 8007502:	4b09      	ldr	r3, [pc, #36]	; (8007528 <ssd1306_command+0x28>)
void ssd1306_command(uint8_t command) {
 8007504:	aa06      	add	r2, sp, #24
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr, 0x00, 1, &command, 1, 10);
 8007506:	f993 1000 	ldrsb.w	r1, [r3]
 800750a:	230a      	movs	r3, #10
void ssd1306_command(uint8_t command) {
 800750c:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr, 0x00, 1, &command, 1, 10);
 8007510:	9302      	str	r3, [sp, #8]
 8007512:	2301      	movs	r3, #1
 8007514:	b289      	uxth	r1, r1
 8007516:	e88d 000c 	stmia.w	sp, {r2, r3}
 800751a:	4804      	ldr	r0, [pc, #16]	; (800752c <ssd1306_command+0x2c>)
 800751c:	2200      	movs	r2, #0
 800751e:	f7fa fff3 	bl	8002508 <HAL_I2C_Mem_Write>
}
 8007522:	b007      	add	sp, #28
 8007524:	f85d fb04 	ldr.w	pc, [sp], #4
 8007528:	20000758 	.word	0x20000758
 800752c:	20000ed0 	.word	0x20000ed0

08007530 <ssd1306_begin>:

void ssd1306_begin(uint8_t vccstate, uint8_t i2caddr) {
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4604      	mov	r4, r0
 8007534:	460d      	mov	r5, r1
	HAL_Delay(100);
 8007536:	2064      	movs	r0, #100	; 0x64
 8007538:	f7f9 fe22 	bl	8001180 <HAL_Delay>
	_vccstate = vccstate;
 800753c:	4b2d      	ldr	r3, [pc, #180]	; (80075f4 <ssd1306_begin+0xc4>)
	_i2caddr = i2caddr<<1;
	_width   = SSD1306_LCDWIDTH;
 800753e:	2280      	movs	r2, #128	; 0x80
	_vccstate = vccstate;
 8007540:	701c      	strb	r4, [r3, #0]
	_i2caddr = i2caddr<<1;
 8007542:	4b2d      	ldr	r3, [pc, #180]	; (80075f8 <ssd1306_begin+0xc8>)
 8007544:	006d      	lsls	r5, r5, #1
 8007546:	701d      	strb	r5, [r3, #0]
	_height  = SSD1306_LCDHEIGHT;
 8007548:	2540      	movs	r5, #64	; 0x40
	_width   = SSD1306_LCDWIDTH;
 800754a:	4b2c      	ldr	r3, [pc, #176]	; (80075fc <ssd1306_begin+0xcc>)

	// Init sequence
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 800754c:	20ae      	movs	r0, #174	; 0xae
	_width   = SSD1306_LCDWIDTH;
 800754e:	701a      	strb	r2, [r3, #0]
	_height  = SSD1306_LCDHEIGHT;
 8007550:	4b2b      	ldr	r3, [pc, #172]	; (8007600 <ssd1306_begin+0xd0>)
 8007552:	701d      	strb	r5, [r3, #0]
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8007554:	f7ff ffd4 	bl	8007500 <ssd1306_command>
	//ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
	//ssd1306_command(0x80);                                  // the suggested ratio 0x80
	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8007558:	20a8      	movs	r0, #168	; 0xa8
 800755a:	f7ff ffd1 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_LCDHEIGHT - 1);
 800755e:	203f      	movs	r0, #63	; 0x3f
 8007560:	f7ff ffce 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8007564:	20d3      	movs	r0, #211	; 0xd3
 8007566:	f7ff ffcb 	bl	8007500 <ssd1306_command>
	ssd1306_command(0x0);                                   // no offset
 800756a:	2000      	movs	r0, #0
 800756c:	f7ff ffc8 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8007570:	4628      	mov	r0, r5
 8007572:	f7ff ffc5 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8007576:	208d      	movs	r0, #141	; 0x8d
 8007578:	f7ff ffc2 	bl	8007500 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC) { ssd1306_command(0x10); }
 800757c:	2c01      	cmp	r4, #1
 800757e:	bf0c      	ite	eq
 8007580:	2010      	moveq	r0, #16
	else { ssd1306_command(0x14); }
 8007582:	2014      	movne	r0, #20
 8007584:	f7ff ffbc 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8007588:	2020      	movs	r0, #32
 800758a:	f7ff ffb9 	bl	8007500 <ssd1306_command>
	ssd1306_command(0x00);                                  // 0x0 act like ks0108
 800758e:	2000      	movs	r0, #0
 8007590:	f7ff ffb6 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_SEGREMAP | 0x1);
 8007594:	20a1      	movs	r0, #161	; 0xa1
 8007596:	f7ff ffb3 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_COMSCANDEC);
 800759a:	20c8      	movs	r0, #200	; 0xc8
 800759c:	f7ff ffb0 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 80075a0:	20da      	movs	r0, #218	; 0xda
 80075a2:	f7ff ffad 	bl	8007500 <ssd1306_command>
	ssd1306_command(0x12);
 80075a6:	2012      	movs	r0, #18
 80075a8:	f7ff ffaa 	bl	8007500 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC) { ssd1306_command(0x9F); }
 80075ac:	2c01      	cmp	r4, #1
 80075ae:	bf0c      	ite	eq
 80075b0:	209f      	moveq	r0, #159	; 0x9f
	else { ssd1306_command(0xCF); }
 80075b2:	20cf      	movne	r0, #207	; 0xcf
 80075b4:	f7ff ffa4 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 80075b8:	20d9      	movs	r0, #217	; 0xd9
 80075ba:	f7ff ffa1 	bl	8007500 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC) { ssd1306_command(0x22); }
 80075be:	2c01      	cmp	r4, #1
 80075c0:	bf0c      	ite	eq
 80075c2:	2022      	moveq	r0, #34	; 0x22
	else { ssd1306_command(0xF1); }
 80075c4:	20f1      	movne	r0, #241	; 0xf1
 80075c6:	f7ff ff9b 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 80075ca:	20db      	movs	r0, #219	; 0xdb
 80075cc:	f7ff ff98 	bl	8007500 <ssd1306_command>
	ssd1306_command(0x40);
 80075d0:	2040      	movs	r0, #64	; 0x40
 80075d2:	f7ff ff95 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 80075d6:	20a4      	movs	r0, #164	; 0xa4
 80075d8:	f7ff ff92 	bl	8007500 <ssd1306_command>
	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 80075dc:	20a6      	movs	r0, #166	; 0xa6
 80075de:	f7ff ff8f 	bl	8007500 <ssd1306_command>

	ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 80075e2:	202e      	movs	r0, #46	; 0x2e
 80075e4:	f7ff ff8c 	bl	8007500 <ssd1306_command>

	ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
}
 80075e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 80075ec:	20af      	movs	r0, #175	; 0xaf
 80075ee:	f7ff bf87 	b.w	8007500 <ssd1306_command>
 80075f2:	bf00      	nop
 80075f4:	20000778 	.word	0x20000778
 80075f8:	20000758 	.word	0x20000758
 80075fc:	20000768 	.word	0x20000768
 8007600:	20000770 	.word	0x20000770

08007604 <display>:

void display(void) {
 8007604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007606:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < 8; i++) {
		ssd1306_command(0xB0 + i); // Set Page Start Address for Page Addressing Mode (B0h~B7h)
		ssd1306_command(SSD1306_SETLOWCOLUMN);
		ssd1306_command(SSD1306_SETHIGHCOLUMN);

		HAL_I2C_Mem_Write(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, &buffer[SSD1306_LCDWIDTH * i], SSD1306_LCDWIDTH, 100);
 8007608:	4f11      	ldr	r7, [pc, #68]	; (8007650 <display+0x4c>)
 800760a:	4e12      	ldr	r6, [pc, #72]	; (8007654 <display+0x50>)
 800760c:	4d12      	ldr	r5, [pc, #72]	; (8007658 <display+0x54>)
void display(void) {
 800760e:	b085      	sub	sp, #20
		ssd1306_command(0xB0 + i); // Set Page Start Address for Page Addressing Mode (B0h~B7h)
 8007610:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8007614:	b2c0      	uxtb	r0, r0
 8007616:	f7ff ff73 	bl	8007500 <ssd1306_command>
		ssd1306_command(SSD1306_SETLOWCOLUMN);
 800761a:	2000      	movs	r0, #0
 800761c:	f7ff ff70 	bl	8007500 <ssd1306_command>
		ssd1306_command(SSD1306_SETHIGHCOLUMN);
 8007620:	2010      	movs	r0, #16
 8007622:	f7ff ff6d 	bl	8007500 <ssd1306_command>
		HAL_I2C_Mem_Write(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, &buffer[SSD1306_LCDWIDTH * i], SSD1306_LCDWIDTH, 100);
 8007626:	2364      	movs	r3, #100	; 0x64
 8007628:	f997 1000 	ldrsb.w	r1, [r7]
 800762c:	9302      	str	r3, [sp, #8]
 800762e:	2380      	movs	r3, #128	; 0x80
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	eb06 13c4 	add.w	r3, r6, r4, lsl #7
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	2240      	movs	r2, #64	; 0x40
 800763a:	2301      	movs	r3, #1
 800763c:	b289      	uxth	r1, r1
 800763e:	4628      	mov	r0, r5
 8007640:	3401      	adds	r4, #1
 8007642:	f7fa ff61 	bl	8002508 <HAL_I2C_Mem_Write>
	for (uint8_t i = 0; i < 8; i++) {
 8007646:	2c08      	cmp	r4, #8
 8007648:	d1e2      	bne.n	8007610 <display+0xc>
		//HAL_I2C_Mem_Write(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, buffer, 1024, 100);
		//HAL_I2C_Mem_Write_DMA(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, &buffer[SSD1306_LCDWIDTH * i], SSD1306_LCDWIDTH);
	}
}
 800764a:	b005      	add	sp, #20
 800764c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800764e:	bf00      	nop
 8007650:	20000758 	.word	0x20000758
 8007654:	20000010 	.word	0x20000010
 8007658:	20000ed0 	.word	0x20000ed0

0800765c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800765c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    RGB_R_TOGGLE;
 800765e:	4c03      	ldr	r4, [pc, #12]	; (800766c <Error_Handler+0x10>)
 8007660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007664:	4620      	mov	r0, r4
 8007666:	f7fa faaa 	bl	8001bbe <HAL_GPIO_TogglePin>
 800766a:	e7f9      	b.n	8007660 <Error_Handler+0x4>
 800766c:	40010c00 	.word	0x40010c00

08007670 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007670:	2228      	movs	r2, #40	; 0x28
{
 8007672:	b510      	push	{r4, lr}
 8007674:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007676:	2100      	movs	r1, #0
 8007678:	eb0d 0002 	add.w	r0, sp, r2
 800767c:	f000 fde9 	bl	8008252 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007680:	2214      	movs	r2, #20
 8007682:	2100      	movs	r1, #0
 8007684:	eb0d 0002 	add.w	r0, sp, r2
 8007688:	f000 fde3 	bl	8008252 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800768c:	2210      	movs	r2, #16
 800768e:	2100      	movs	r1, #0
 8007690:	a801      	add	r0, sp, #4
 8007692:	f000 fdde 	bl	8008252 <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800769a:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800769c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800769e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80076a0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80076a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80076a6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80076a8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80076aa:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80076ac:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80076ae:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80076b0:	f7fb f8e4 	bl	800287c <HAL_RCC_OscConfig>
 80076b4:	b108      	cbz	r0, 80076ba <SystemClock_Config+0x4a>
    Error_Handler();
 80076b6:	f7ff ffd1 	bl	800765c <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80076ba:	230f      	movs	r3, #15
 80076bc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80076be:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80076c2:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80076c4:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80076c6:	4621      	mov	r1, r4
 80076c8:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80076ca:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80076cc:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80076ce:	f7fb fa9d 	bl	8002c0c <HAL_RCC_ClockConfig>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d1ef      	bne.n	80076b6 <SystemClock_Config+0x46>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80076d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076da:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80076dc:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80076de:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076e0:	f7fb fb5e 	bl	8002da0 <HAL_RCCEx_PeriphCLKConfig>
 80076e4:	4604      	mov	r4, r0
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d1e5      	bne.n	80076b6 <SystemClock_Config+0x46>
HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80076ea:	f7fb fb33 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 80076ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80076f6:	f7fa f809 	bl	800170c <HAL_SYSTICK_Config>
HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80076fa:	2004      	movs	r0, #4
 80076fc:	f7fa f81c 	bl	8001738 <HAL_SYSTICK_CLKSourceConfig>
HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007700:	4622      	mov	r2, r4
 8007702:	4621      	mov	r1, r4
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	f7f9 ffc0 	bl	800168c <HAL_NVIC_SetPriority>
}
 800770c:	b014      	add	sp, #80	; 0x50
 800770e:	bd10      	pop	{r4, pc}

08007710 <main>:
{
 8007710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007714:	4d3d      	ldr	r5, [pc, #244]	; (800780c <main+0xfc>)
{
 8007716:	b0a8      	sub	sp, #160	; 0xa0
  HAL_Init();
 8007718:	f7f9 fd0e 	bl	8001138 <HAL_Init>
  SystemClock_Config();
 800771c:	f7ff ffa8 	bl	8007670 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007720:	2210      	movs	r2, #16
 8007722:	2100      	movs	r1, #0
 8007724:	a821      	add	r0, sp, #132	; 0x84
 8007726:	f000 fd94 	bl	8008252 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800772a:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800772c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800772e:	f043 0320 	orr.w	r3, r3, #32
 8007732:	61ab      	str	r3, [r5, #24]
 8007734:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8007736:	2118      	movs	r1, #24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007740:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8007742:	4833      	ldr	r0, [pc, #204]	; (8007810 <main+0x100>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007744:	f043 0304 	orr.w	r3, r3, #4
 8007748:	61ab      	str	r3, [r5, #24]
 800774a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800774c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800774e:	f003 0304 	and.w	r3, r3, #4
 8007752:	9302      	str	r3, [sp, #8]
 8007754:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007756:	69ab      	ldr	r3, [r5, #24]
 8007758:	f043 0308 	orr.w	r3, r3, #8
 800775c:	61ab      	str	r3, [r5, #24]
 800775e:	69ab      	ldr	r3, [r5, #24]
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	9303      	str	r3, [sp, #12]
 8007766:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8007768:	f7fa fa24 	bl	8001bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 800776c:	2201      	movs	r2, #1
 800776e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8007772:	4827      	ldr	r0, [pc, #156]	; (8007810 <main+0x100>)
 8007774:	f7fa fa1e 	bl	8001bb4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007778:	f24e 0318 	movw	r3, #57368	; 0xe018
 800777c:	9321      	str	r3, [sp, #132]	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800777e:	2301      	movs	r3, #1
 8007780:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007782:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007784:	a921      	add	r1, sp, #132	; 0x84
 8007786:	4822      	ldr	r0, [pc, #136]	; (8007810 <main+0x100>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007788:	9324      	str	r3, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778a:	9423      	str	r4, [sp, #140]	; 0x8c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800778c:	f7fa f932 	bl	80019f4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007790:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007792:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	616b      	str	r3, [r5, #20]
 800779a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800779c:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80077a4:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80077a6:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80077a8:	f7f9 ff70 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80077ac:	200e      	movs	r0, #14
 80077ae:	f7f9 ffa1 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80077b2:	4622      	mov	r2, r4
 80077b4:	4621      	mov	r1, r4
 80077b6:	200f      	movs	r0, #15
 80077b8:	f7f9 ff68 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80077bc:	200f      	movs	r0, #15
 80077be:	f7f9 ff99 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80077c2:	4622      	mov	r2, r4
 80077c4:	4621      	mov	r1, r4
 80077c6:	2010      	movs	r0, #16
 80077c8:	f7f9 ff60 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80077cc:	2010      	movs	r0, #16
 80077ce:	f7f9 ff91 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80077d2:	4622      	mov	r2, r4
 80077d4:	4621      	mov	r1, r4
 80077d6:	2011      	movs	r0, #17
 80077d8:	f7f9 ff58 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80077dc:	2011      	movs	r0, #17
 80077de:	f7f9 ff89 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  hi2c2.Init.ClockSpeed = 400000;
 80077e2:	4d0c      	ldr	r5, [pc, #48]	; (8007814 <main+0x104>)
  hi2c2.Instance = I2C2;
 80077e4:	480c      	ldr	r0, [pc, #48]	; (8007818 <main+0x108>)
  hi2c2.Init.ClockSpeed = 400000;
 80077e6:	4b0d      	ldr	r3, [pc, #52]	; (800781c <main+0x10c>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80077e8:	6084      	str	r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 400000;
 80077ea:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 80077f2:	60c4      	str	r4, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077f4:	6103      	str	r3, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077f6:	6144      	str	r4, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80077f8:	6184      	str	r4, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077fa:	61c4      	str	r4, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077fc:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80077fe:	f7fa fbab 	bl	8001f58 <HAL_I2C_Init>
 8007802:	4605      	mov	r5, r0
 8007804:	b160      	cbz	r0, 8007820 <main+0x110>
    Error_Handler();
 8007806:	f7ff ff29 	bl	800765c <Error_Handler>
 800780a:	bf00      	nop
 800780c:	40021000 	.word	0x40021000
 8007810:	40010c00 	.word	0x40010c00
 8007814:	00061a80 	.word	0x00061a80
 8007818:	20000ed0 	.word	0x20000ed0
 800781c:	40005800 	.word	0x40005800
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007820:	4601      	mov	r1, r0
 8007822:	2210      	movs	r2, #16
 8007824:	a81d      	add	r0, sp, #116	; 0x74
 8007826:	f000 fd14 	bl	8008252 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800782a:	221c      	movs	r2, #28
 800782c:	4629      	mov	r1, r5
 800782e:	a821      	add	r0, sp, #132	; 0x84
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007830:	9508      	str	r5, [sp, #32]
 8007832:	9509      	str	r5, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007834:	f000 fd0d 	bl	8008252 <memset>
  htim4.Init.Prescaler = 72-1;
 8007838:	2347      	movs	r3, #71	; 0x47
  htim4.Instance = TIM4;
 800783a:	4cb5      	ldr	r4, [pc, #724]	; (8007b10 <main+0x400>)
  htim4.Init.Prescaler = 72-1;
 800783c:	48b5      	ldr	r0, [pc, #724]	; (8007b14 <main+0x404>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800783e:	60a5      	str	r5, [r4, #8]
  htim4.Init.Prescaler = 72-1;
 8007840:	e884 0009 	stmia.w	r4, {r0, r3}
  htim4.Init.Period = 2000-1;
 8007844:	f240 73cf 	movw	r3, #1999	; 0x7cf
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007848:	4620      	mov	r0, r4
  htim4.Init.Period = 2000-1;
 800784a:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800784c:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800784e:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007850:	f7fb fda0 	bl	8003394 <HAL_TIM_Base_Init>
 8007854:	2800      	cmp	r0, #0
 8007856:	d1d6      	bne.n	8007806 <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800785c:	a91d      	add	r1, sp, #116	; 0x74
 800785e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007860:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007862:	f7fb fc01 	bl	8003068 <HAL_TIM_ConfigClockSource>
 8007866:	2800      	cmp	r0, #0
 8007868:	d1cd      	bne.n	8007806 <main+0xf6>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800786a:	4620      	mov	r0, r4
 800786c:	f7fb fdac 	bl	80033c8 <HAL_TIM_PWM_Init>
 8007870:	2800      	cmp	r0, #0
 8007872:	d1c8      	bne.n	8007806 <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007874:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007876:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007878:	a908      	add	r1, sp, #32
 800787a:	4620      	mov	r0, r4
 800787c:	f7fb ff66 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8007880:	4602      	mov	r2, r0
 8007882:	2800      	cmp	r0, #0
 8007884:	d1bf      	bne.n	8007806 <main+0xf6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007886:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8007888:	9022      	str	r0, [sp, #136]	; 0x88
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800788a:	9023      	str	r0, [sp, #140]	; 0x8c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800788c:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800788e:	a921      	add	r1, sp, #132	; 0x84
 8007890:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007892:	9321      	str	r3, [sp, #132]	; 0x84
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007894:	f7fb fdf8 	bl	8003488 <HAL_TIM_PWM_ConfigChannel>
 8007898:	2800      	cmp	r0, #0
 800789a:	d1b4      	bne.n	8007806 <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800789c:	2204      	movs	r2, #4
 800789e:	a921      	add	r1, sp, #132	; 0x84
 80078a0:	4620      	mov	r0, r4
 80078a2:	f7fb fdf1 	bl	8003488 <HAL_TIM_PWM_ConfigChannel>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d1ad      	bne.n	8007806 <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80078aa:	2208      	movs	r2, #8
 80078ac:	a921      	add	r1, sp, #132	; 0x84
 80078ae:	4620      	mov	r0, r4
 80078b0:	f7fb fdea 	bl	8003488 <HAL_TIM_PWM_ConfigChannel>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d1a6      	bne.n	8007806 <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80078b8:	220c      	movs	r2, #12
 80078ba:	a921      	add	r1, sp, #132	; 0x84
 80078bc:	4620      	mov	r0, r4
 80078be:	f7fb fde3 	bl	8003488 <HAL_TIM_PWM_ConfigChannel>
 80078c2:	4605      	mov	r5, r0
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d19e      	bne.n	8007806 <main+0xf6>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80078c8:	4601      	mov	r1, r0
 80078ca:	4620      	mov	r0, r4
 80078cc:	f7fb fefc 	bl	80036c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80078d0:	2104      	movs	r1, #4
 80078d2:	4620      	mov	r0, r4
 80078d4:	f7fb fef8 	bl	80036c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80078d8:	2108      	movs	r1, #8
 80078da:	4620      	mov	r0, r4
 80078dc:	f7fb fef4 	bl	80036c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80078e0:	210c      	movs	r1, #12
 80078e2:	4620      	mov	r0, r4
 80078e4:	f7fb fef0 	bl	80036c8 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim4);
 80078e8:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 57600;//57600
 80078ea:	f44f 4461 	mov.w	r4, #57600	; 0xe100
  HAL_TIM_MspPostInit(&htim4);
 80078ee:	f000 faf5 	bl	8007edc <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 80078f2:	4889      	ldr	r0, [pc, #548]	; (8007b18 <main+0x408>)
  huart1.Init.BaudRate = 57600;//57600
 80078f4:	4b89      	ldr	r3, [pc, #548]	; (8007b1c <main+0x40c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80078f6:	6085      	str	r5, [r0, #8]
  huart1.Init.BaudRate = 57600;//57600
 80078f8:	e880 0018 	stmia.w	r0, {r3, r4}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80078fc:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80078fe:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007900:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007902:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007904:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007906:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007908:	f7fc f818 	bl	800393c <HAL_UART_Init>
 800790c:	2800      	cmp	r0, #0
 800790e:	f47f af7a 	bne.w	8007806 <main+0xf6>
  huart2.Instance = USART2;
 8007912:	4883      	ldr	r0, [pc, #524]	; (8007b20 <main+0x410>)
 8007914:	4b83      	ldr	r3, [pc, #524]	; (8007b24 <main+0x414>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007916:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 57600;
 8007918:	e880 0018 	stmia.w	r0, {r3, r4}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800791c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800791e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007920:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007922:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007924:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007926:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007928:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800792a:	f7fc f807 	bl	800393c <HAL_UART_Init>
 800792e:	2800      	cmp	r0, #0
 8007930:	f47f af69 	bne.w	8007806 <main+0xf6>
  hadc1.Instance = ADC1;
 8007934:	4c7c      	ldr	r4, [pc, #496]	; (8007b28 <main+0x418>)
 8007936:	4b7d      	ldr	r3, [pc, #500]	; (8007b2c <main+0x41c>)
  hadc1.Init.NbrOfConversion = 1;
 8007938:	2601      	movs	r6, #1
  hadc1.Instance = ADC1;
 800793a:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800793c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8007940:	900a      	str	r0, [sp, #40]	; 0x28
 8007942:	900b      	str	r0, [sp, #44]	; 0x2c
 8007944:	900c      	str	r0, [sp, #48]	; 0x30
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007946:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007948:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800794a:	6160      	str	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800794c:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800794e:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007950:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 8007952:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007954:	f7f9 fe08 	bl	8001568 <HAL_ADC_Init>
 8007958:	2800      	cmp	r0, #0
 800795a:	f47f af54 	bne.w	8007806 <main+0xf6>
  sConfig.Channel = ADC_CHANNEL_4;
 800795e:	2704      	movs	r7, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007960:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007962:	a90a      	add	r1, sp, #40	; 0x28
 8007964:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8007966:	970a      	str	r7, [sp, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007968:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800796a:	f7f9 fcbd 	bl	80012e8 <HAL_ADC_ConfigChannel>
 800796e:	4605      	mov	r5, r0
 8007970:	2800      	cmp	r0, #0
 8007972:	f47f af48 	bne.w	8007806 <main+0xf6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007976:	4601      	mov	r1, r0
 8007978:	2210      	movs	r2, #16
 800797a:	a815      	add	r0, sp, #84	; 0x54
 800797c:	f000 fc69 	bl	8008252 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007980:	4629      	mov	r1, r5
 8007982:	2210      	movs	r2, #16
 8007984:	a819      	add	r0, sp, #100	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007986:	9506      	str	r5, [sp, #24]
 8007988:	9507      	str	r5, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800798a:	f000 fc62 	bl	8008252 <memset>
  htim3.Init.Prescaler = 72-1;
 800798e:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 8007990:	4c67      	ldr	r4, [pc, #412]	; (8007b30 <main+0x420>)
  htim3.Init.Prescaler = 72-1;
 8007992:	4968      	ldr	r1, [pc, #416]	; (8007b34 <main+0x424>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007994:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 72-1;
 8007996:	e884 000a 	stmia.w	r4, {r1, r3}
  htim3.Init.Period = 0xFFFF;
 800799a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800799e:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0xFFFF;
 80079a0:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079a2:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079a4:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80079a6:	f7fb fcf5 	bl	8003394 <HAL_TIM_Base_Init>
 80079aa:	2800      	cmp	r0, #0
 80079ac:	f47f af2b 	bne.w	8007806 <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80079b4:	a915      	add	r1, sp, #84	; 0x54
 80079b6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079b8:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80079ba:	f7fb fb55 	bl	8003068 <HAL_TIM_ConfigClockSource>
 80079be:	2800      	cmp	r0, #0
 80079c0:	f47f af21 	bne.w	8007806 <main+0xf6>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80079c4:	4620      	mov	r0, r4
 80079c6:	f7fb fd19 	bl	80033fc <HAL_TIM_IC_Init>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	f47f af1b 	bne.w	8007806 <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079d0:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079d2:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80079d4:	a906      	add	r1, sp, #24
 80079d6:	4620      	mov	r0, r4
 80079d8:	f7fb feb8 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 80079dc:	4602      	mov	r2, r0
 80079de:	2800      	cmp	r0, #0
 80079e0:	f47f af11 	bne.w	8007806 <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80079e4:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80079e6:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigIC.ICFilter = 0;
 80079e8:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80079ea:	a919      	add	r1, sp, #100	; 0x64
 80079ec:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80079ee:	961a      	str	r6, [sp, #104]	; 0x68
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80079f0:	f7fb fdd6 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	f47f af06 	bne.w	8007806 <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80079fa:	463a      	mov	r2, r7
 80079fc:	a919      	add	r1, sp, #100	; 0x64
 80079fe:	4620      	mov	r0, r4
 8007a00:	f7fb fdce 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	f47f aefe 	bne.w	8007806 <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8007a0a:	2208      	movs	r2, #8
 8007a0c:	a919      	add	r1, sp, #100	; 0x64
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f7fb fdc6 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	f47f aef6 	bne.w	8007806 <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8007a1a:	220c      	movs	r2, #12
 8007a1c:	a919      	add	r1, sp, #100	; 0x64
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f7fb fdbe 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 8007a24:	4605      	mov	r5, r0
 8007a26:	2800      	cmp	r0, #0
 8007a28:	f47f aeed 	bne.w	8007806 <main+0xf6>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8007a2c:	4601      	mov	r1, r0
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f7fb fe60 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8007a34:	4639      	mov	r1, r7
 8007a36:	4620      	mov	r0, r4
 8007a38:	f7fb fe5c 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8007a3c:	2108      	movs	r1, #8
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7fb fe58 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8007a44:	210c      	movs	r1, #12
 8007a46:	4620      	mov	r0, r4
 8007a48:	f7fb fe54 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	4629      	mov	r1, r5
 8007a50:	a80d      	add	r0, sp, #52	; 0x34
 8007a52:	f000 fbfe 	bl	8008252 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007a56:	2210      	movs	r2, #16
 8007a58:	4629      	mov	r1, r5
 8007a5a:	a811      	add	r0, sp, #68	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a5c:	9504      	str	r5, [sp, #16]
 8007a5e:	9505      	str	r5, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007a60:	f000 fbf7 	bl	8008252 <memset>
  htim2.Init.Prescaler = 72-1;
 8007a64:	2347      	movs	r3, #71	; 0x47
 8007a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8007a6a:	4c33      	ldr	r4, [pc, #204]	; (8007b38 <main+0x428>)
  htim2.Init.Prescaler = 72-1;
 8007a6c:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.Period = 0xFFFF;
 8007a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007a74:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a76:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 0xFFFF;
 8007a78:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a7a:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a7c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007a7e:	f7fb fc89 	bl	8003394 <HAL_TIM_Base_Init>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f47f aebf 	bne.w	8007806 <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007a8c:	a90d      	add	r1, sp, #52	; 0x34
 8007a8e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a90:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007a92:	f7fb fae9 	bl	8003068 <HAL_TIM_ConfigClockSource>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f47f aeb5 	bne.w	8007806 <main+0xf6>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f7fb fcad 	bl	80033fc <HAL_TIM_IC_Init>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	f47f aeaf 	bne.w	8007806 <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007aa8:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007aaa:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007aac:	a904      	add	r1, sp, #16
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f7fb fe4c 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	f47f aea5 	bne.w	8007806 <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007abc:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007abe:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigIC.ICFilter = 0;
 8007ac0:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007ac2:	a911      	add	r1, sp, #68	; 0x44
 8007ac4:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007ac6:	9612      	str	r6, [sp, #72]	; 0x48
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007ac8:	f7fb fd6a 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f47f ae9a 	bne.w	8007806 <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8007ad2:	463a      	mov	r2, r7
 8007ad4:	a911      	add	r1, sp, #68	; 0x44
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7fb fd62 	bl	80035a0 <HAL_TIM_IC_ConfigChannel>
 8007adc:	4605      	mov	r5, r0
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f47f ae91 	bne.w	8007806 <main+0xf6>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f7fb fe04 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8007aec:	4639      	mov	r1, r7
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7fb fe00 	bl	80036f4 <HAL_TIM_IC_Start_IT>
  LED1_ON;
 8007af4:	4632      	mov	r2, r6
 8007af6:	2110      	movs	r1, #16
 8007af8:	4810      	ldr	r0, [pc, #64]	; (8007b3c <main+0x42c>)
 8007afa:	f7fa f85b 	bl	8001bb4 <HAL_GPIO_WritePin>
   LED0_OFF;
 8007afe:	462a      	mov	r2, r5
 8007b00:	2108      	movs	r1, #8
 8007b02:	480e      	ldr	r0, [pc, #56]	; (8007b3c <main+0x42c>)
 8007b04:	f7fa f856 	bl	8001bb4 <HAL_GPIO_WritePin>
 8007b08:	240a      	movs	r4, #10
       LED1_TOGGLE;
 8007b0a:	4d0c      	ldr	r5, [pc, #48]	; (8007b3c <main+0x42c>)
 8007b0c:	e018      	b.n	8007b40 <main+0x430>
 8007b0e:	bf00      	nop
 8007b10:	20000e90 	.word	0x20000e90
 8007b14:	40000800 	.word	0x40000800
 8007b18:	20001060 	.word	0x20001060
 8007b1c:	40013800 	.word	0x40013800
 8007b20:	200010e8 	.word	0x200010e8
 8007b24:	40004400 	.word	0x40004400
 8007b28:	20000fa8 	.word	0x20000fa8
 8007b2c:	40012400 	.word	0x40012400
 8007b30:	20000f24 	.word	0x20000f24
 8007b34:	40000400 	.word	0x40000400
 8007b38:	200010a8 	.word	0x200010a8
 8007b3c:	40010c00 	.word	0x40010c00
 8007b40:	2110      	movs	r1, #16
 8007b42:	4628      	mov	r0, r5
 8007b44:	f7fa f83b 	bl	8001bbe <HAL_GPIO_TogglePin>
       LED0_TOGGLE;
 8007b48:	2108      	movs	r1, #8
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f7fa f837 	bl	8001bbe <HAL_GPIO_TogglePin>
       HAL_Delay(25);
 8007b50:	2019      	movs	r0, #25
 8007b52:	f7f9 fb15 	bl	8001180 <HAL_Delay>
       HAL_Delay(25);
 8007b56:	2019      	movs	r0, #25
 8007b58:	f7f9 fb12 	bl	8001180 <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 8007b5c:	3c01      	subs	r4, #1
 8007b5e:	d1ef      	bne.n	8007b40 <main+0x430>
   LED0_OFF;
 8007b60:	4622      	mov	r2, r4
         BAT.VBAT = (((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW;
 8007b62:	a749      	add	r7, pc, #292	; (adr r7, 8007c88 <main+0x578>)
 8007b64:	e9d7 6700 	ldrd	r6, r7, [r7]
 8007b68:	f20f 1924 	addw	r9, pc, #292	; 0x124
 8007b6c:	e9d9 8900 	ldrd	r8, r9, [r9]
   LED0_OFF;
 8007b70:	2108      	movs	r1, #8
 8007b72:	4849      	ldr	r0, [pc, #292]	; (8007c98 <main+0x588>)
 8007b74:	f7fa f81e 	bl	8001bb4 <HAL_GPIO_WritePin>
   LED1_OFF;
 8007b78:	4622      	mov	r2, r4
 8007b7a:	2110      	movs	r1, #16
 8007b7c:	4846      	ldr	r0, [pc, #280]	; (8007c98 <main+0x588>)
 8007b7e:	f7fa f819 	bl	8001bb4 <HAL_GPIO_WritePin>
   MPU9250_Init();
 8007b82:	f7fe fabb 	bl	80060fc <MPU9250_Init>
   MS5611_Init(MS5611_ULTRA_HIGH_RES);
 8007b86:	2008      	movs	r0, #8
 8007b88:	f7ff f912 	bl	8006db0 <MS5611_Init>
   gps_Init();
 8007b8c:	f7fc f9d2 	bl	8003f34 <gps_Init>
  TM_AHRSIMU_Init(&AHRSIMU, 250, 0.1f, 0.0f);
 8007b90:	2300      	movs	r3, #0
 8007b92:	4a42      	ldr	r2, [pc, #264]	; (8007c9c <main+0x58c>)
 8007b94:	4942      	ldr	r1, [pc, #264]	; (8007ca0 <main+0x590>)
 8007b96:	4843      	ldr	r0, [pc, #268]	; (8007ca4 <main+0x594>)
 8007b98:	f7fc fc46 	bl	8004428 <TM_AHRSIMU_Init>
  Calibrate_gyro();
 8007b9c:	f7fd fe5e 	bl	800585c <Calibrate_gyro>
  mixerInit();
 8007ba0:	f7fc ff8e 	bl	8004ac0 <mixerInit>
   QueueCreate(UART1);
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f7fd fbd7 	bl	8005358 <QueueCreate>
   QueueCreate(UART2);
 8007baa:	2001      	movs	r0, #1
 8007bac:	f7fd fbd4 	bl	8005358 <QueueCreate>
   PIDControlInit(&pid);
 8007bb0:	483d      	ldr	r0, [pc, #244]	; (8007ca8 <main+0x598>)
 8007bb2:	f7fd f80f 	bl	8004bd4 <PIDControlInit>
   EEPROM_Init();
 8007bb6:	f7fc f9a5 	bl	8003f04 <EEPROM_Init>
   ssd1306_begin(SSD1306_SWITCHCAPVCC, 0x3C);
 8007bba:	213c      	movs	r1, #60	; 0x3c
 8007bbc:	2002      	movs	r0, #2
 8007bbe:	f7ff fcb7 	bl	8007530 <ssd1306_begin>
   HAL_Delay(1000);
 8007bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bc6:	f7f9 fadb 	bl	8001180 <HAL_Delay>
   display();
 8007bca:	f7ff fd1b 	bl	8007604 <display>
   HAL_UART_Receive_DMA(&huart1, (uint8_t*)rx1_buffer, 1);
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4936      	ldr	r1, [pc, #216]	; (8007cac <main+0x59c>)
 8007bd2:	4837      	ldr	r0, [pc, #220]	; (8007cb0 <main+0x5a0>)
 8007bd4:	f7fb ff76 	bl	8003ac4 <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx2_buffer, 1);
 8007bd8:	2201      	movs	r2, #1
 8007bda:	4936      	ldr	r1, [pc, #216]	; (8007cb4 <main+0x5a4>)
 8007bdc:	4836      	ldr	r0, [pc, #216]	; (8007cb8 <main+0x5a8>)
 8007bde:	f7fb ff71 	bl	8003ac4 <HAL_UART_Receive_DMA>
      HAL_ADC_Start(&hadc1);
 8007be2:	4d36      	ldr	r5, [pc, #216]	; (8007cbc <main+0x5ac>)
    LED0_TOGGLE; //RED
 8007be4:	2108      	movs	r1, #8
 8007be6:	482c      	ldr	r0, [pc, #176]	; (8007c98 <main+0x588>)
 8007be8:	f7f9 ffe9 	bl	8001bbe <HAL_GPIO_TogglePin>
        Baro_update();
 8007bec:	f7ff f94a 	bl	8006e84 <Baro_update>
        computeIMU();
 8007bf0:	f7fc fece 	bl	8004990 <computeIMU>
        Control();
 8007bf4:	f7fd f864 	bl	8004cc0 <Control>
        mixTable();
 8007bf8:	f7fc ff74 	bl	8004ae4 <mixTable>
        PwmWriteMotor();
 8007bfc:	f7fd fb88 	bl	8005310 <PwmWriteMotor>
        PrintData(5);   //All Data Out Put
 8007c00:	2005      	movs	r0, #5
 8007c02:	f7ff fa03 	bl	800700c <PrintData>
      HAL_ADC_Start(&hadc1);
 8007c06:	4628      	mov	r0, r5
 8007c08:	f7f9 fc2a 	bl	8001460 <HAL_ADC_Start>
       if(HAL_ADC_PollForConversion(&hadc1,1000000) == HAL_OK)
 8007c0c:	492c      	ldr	r1, [pc, #176]	; (8007cc0 <main+0x5b0>)
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f7f9 fac8 	bl	80011a4 <HAL_ADC_PollForConversion>
 8007c14:	b9c8      	cbnz	r0, 8007c4a <main+0x53a>
         BAT.VBAT_Sense = HAL_ADC_GetValue(&hadc1);
 8007c16:	4628      	mov	r0, r5
 8007c18:	f7f9 fb62 	bl	80012e0 <HAL_ADC_GetValue>
 8007c1c:	4c29      	ldr	r4, [pc, #164]	; (8007cc4 <main+0x5b4>)
 8007c1e:	6020      	str	r0, [r4, #0]
         BAT.VBAT = (((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW;
 8007c20:	f7f8 fbe0 	bl	80003e4 <__aeabi_ui2d>
 8007c24:	4632      	mov	r2, r6
 8007c26:	463b      	mov	r3, r7
 8007c28:	f7f8 fc52 	bl	80004d0 <__aeabi_dmul>
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	464b      	mov	r3, r9
 8007c30:	f7f8 fd78 	bl	8000724 <__aeabi_ddiv>
 8007c34:	2200      	movs	r2, #0
 8007c36:	4b24      	ldr	r3, [pc, #144]	; (8007cc8 <main+0x5b8>)
 8007c38:	f7f8 fc4a 	bl	80004d0 <__aeabi_dmul>
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4b23      	ldr	r3, [pc, #140]	; (8007ccc <main+0x5bc>)
 8007c40:	f7f8 fd70 	bl	8000724 <__aeabi_ddiv>
 8007c44:	f7f8 fef4 	bl	8000a30 <__aeabi_d2f>
 8007c48:	6060      	str	r0, [r4, #4]
       flight_mode_signal();
 8007c4a:	f7fc fefb 	bl	8004a44 <flight_mode_signal>
      SendTelemetry();
 8007c4e:	f7ff fc0f 	bl	8007470 <SendTelemetry>
      if (micros() - loop_timer > 4050)Error.error = 4;                                      //Output an error if the loop time exceeds 4050us.
 8007c52:	f7ff fc3b 	bl	80074cc <micros>
 8007c56:	4c1e      	ldr	r4, [pc, #120]	; (8007cd0 <main+0x5c0>)
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	46a2      	mov	sl, r4
 8007c5c:	1ac0      	subs	r0, r0, r3
 8007c5e:	f640 73d2 	movw	r3, #4050	; 0xfd2
 8007c62:	4298      	cmp	r0, r3
 8007c64:	bf82      	ittt	hi
 8007c66:	2204      	movhi	r2, #4
 8007c68:	4b1a      	ldrhi	r3, [pc, #104]	; (8007cd4 <main+0x5c4>)
 8007c6a:	701a      	strbhi	r2, [r3, #0]
      while (micros() - loop_timer < 4000);                                            //We wait until 4000us are passed.
 8007c6c:	f7ff fc2e 	bl	80074cc <micros>
 8007c70:	f8da 3000 	ldr.w	r3, [sl]
 8007c74:	1ac0      	subs	r0, r0, r3
 8007c76:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8007c7a:	d3f7      	bcc.n	8007c6c <main+0x55c>
      loop_timer = micros();
 8007c7c:	f7ff fc26 	bl	80074cc <micros>
 8007c80:	6020      	str	r0, [r4, #0]
    LED0_TOGGLE; //RED
 8007c82:	e7af      	b.n	8007be4 <main+0x4d4>
 8007c84:	f3af 8000 	nop.w
 8007c88:	66666666 	.word	0x66666666
 8007c8c:	400a6666 	.word	0x400a6666
 8007c90:	00000000 	.word	0x00000000
 8007c94:	40affe00 	.word	0x40affe00
 8007c98:	40010c00 	.word	0x40010c00
 8007c9c:	3dcccccd 	.word	0x3dcccccd
 8007ca0:	437a0000 	.word	0x437a0000
 8007ca4:	20000838 	.word	0x20000838
 8007ca8:	20000874 	.word	0x20000874
 8007cac:	20000e24 	.word	0x20000e24
 8007cb0:	20001060 	.word	0x20001060
 8007cb4:	20000e34 	.word	0x20000e34
 8007cb8:	200010e8 	.word	0x200010e8
 8007cbc:	20000fa8 	.word	0x20000fa8
 8007cc0:	000f4240 	.word	0x000f4240
 8007cc4:	20000e44 	.word	0x20000e44
 8007cc8:	403e0000 	.word	0x403e0000
 8007ccc:	40340000 	.word	0x40340000
 8007cd0:	2000073c 	.word	0x2000073c
 8007cd4:	200010a0 	.word	0x200010a0

08007cd8 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cd8:	4770      	bx	lr
	...

08007cdc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007cdc:	4b0e      	ldr	r3, [pc, #56]	; (8007d18 <HAL_MspInit+0x3c>)
{
 8007cde:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8007ce0:	699a      	ldr	r2, [r3, #24]
 8007ce2:	f042 0201 	orr.w	r2, r2, #1
 8007ce6:	619a      	str	r2, [r3, #24]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	f002 0201 	and.w	r2, r2, #1
 8007cee:	9200      	str	r2, [sp, #0]
 8007cf0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007cf2:	69da      	ldr	r2, [r3, #28]
 8007cf4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007cf8:	61da      	str	r2, [r3, #28]
 8007cfa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007cfc:	4a07      	ldr	r2, [pc, #28]	; (8007d1c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8007cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007d06:	6853      	ldr	r3, [r2, #4]
 8007d08:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d12:	b002      	add	sp, #8
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	40021000 	.word	0x40021000
 8007d1c:	40010000 	.word	0x40010000

08007d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007d20:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d22:	2410      	movs	r4, #16
{
 8007d24:	4605      	mov	r5, r0
 8007d26:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d28:	4622      	mov	r2, r4
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	a802      	add	r0, sp, #8
 8007d2e:	f000 fa90 	bl	8008252 <memset>
  if(hadc->Instance==ADC1)
 8007d32:	682a      	ldr	r2, [r5, #0]
 8007d34:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <HAL_ADC_MspInit+0x54>)
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d11a      	bne.n	8007d70 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007d3a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8007d3e:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d40:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d46:	619a      	str	r2, [r3, #24]
 8007d48:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d4a:	480b      	ldr	r0, [pc, #44]	; (8007d78 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007d4c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007d50:	9200      	str	r2, [sp, #0]
 8007d52:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	f042 0204 	orr.w	r2, r2, #4
 8007d5a:	619a      	str	r2, [r3, #24]
 8007d5c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007d5e:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d6c:	f7f9 fe42 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007d70:	b007      	add	sp, #28
 8007d72:	bd30      	pop	{r4, r5, pc}
 8007d74:	40012400 	.word	0x40012400
 8007d78:	40010800 	.word	0x40010800

08007d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	4604      	mov	r4, r0
 8007d80:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d82:	2210      	movs	r2, #16
 8007d84:	2100      	movs	r1, #0
 8007d86:	a802      	add	r0, sp, #8
 8007d88:	f000 fa63 	bl	8008252 <memset>
  if(hi2c->Instance==I2C2)
 8007d8c:	6822      	ldr	r2, [r4, #0]
 8007d8e:	4b11      	ldr	r3, [pc, #68]	; (8007dd4 <HAL_I2C_MspInit+0x58>)
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d11d      	bne.n	8007dd0 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d94:	4c10      	ldr	r4, [pc, #64]	; (8007dd8 <HAL_I2C_MspInit+0x5c>)
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d96:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d98:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d9a:	4810      	ldr	r0, [pc, #64]	; (8007ddc <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d9c:	f043 0308 	orr.w	r3, r3, #8
 8007da0:	61a3      	str	r3, [r4, #24]
 8007da2:	69a3      	ldr	r3, [r4, #24]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007dac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007db0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007db2:	2312      	movs	r3, #18
 8007db4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007db6:	2303      	movs	r3, #3
 8007db8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007dba:	f7f9 fe1b 	bl	80019f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007dbe:	69e3      	ldr	r3, [r4, #28]
 8007dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007dc4:	61e3      	str	r3, [r4, #28]
 8007dc6:	69e3      	ldr	r3, [r4, #28]
 8007dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007dd0:	b006      	add	sp, #24
 8007dd2:	bd10      	pop	{r4, pc}
 8007dd4:	40005800 	.word	0x40005800
 8007dd8:	40021000 	.word	0x40021000
 8007ddc:	40010c00 	.word	0x40010c00

08007de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007de0:	b510      	push	{r4, lr}
 8007de2:	4604      	mov	r4, r0
 8007de4:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007de6:	2210      	movs	r2, #16
 8007de8:	2100      	movs	r1, #0
 8007dea:	a806      	add	r0, sp, #24
 8007dec:	f000 fa31 	bl	8008252 <memset>
  if(htim_base->Instance==TIM2)
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df6:	d122      	bne.n	8007e3e <HAL_TIM_Base_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007df8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8007dfc:	69da      	ldr	r2, [r3, #28]
    PA3     ------> TIM2_CH4  //UART2 reserved
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfe:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e00:	f042 0201 	orr.w	r2, r2, #1
 8007e04:	61da      	str	r2, [r3, #28]
 8007e06:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e08:	482f      	ldr	r0, [pc, #188]	; (8007ec8 <HAL_TIM_Base_MspInit+0xe8>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e0a:	f002 0201 	and.w	r2, r2, #1
 8007e0e:	9200      	str	r2, [sp, #0]
 8007e10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e12:	699a      	ldr	r2, [r3, #24]
 8007e14:	f042 0204 	orr.w	r2, r2, #4
 8007e18:	619a      	str	r2, [r3, #24]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007e24:	2303      	movs	r3, #3
 8007e26:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e28:	f7f9 fde4 	bl	80019f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	201c      	movs	r0, #28
 8007e30:	4611      	mov	r1, r2
 8007e32:	f7f9 fc2b 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007e36:	201c      	movs	r0, #28
  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007e38:	f7f9 fc5c 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007e3c:	e02d      	b.n	8007e9a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8007e3e:	4a23      	ldr	r2, [pc, #140]	; (8007ecc <HAL_TIM_Base_MspInit+0xec>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d12c      	bne.n	8007e9e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007e44:	4b22      	ldr	r3, [pc, #136]	; (8007ed0 <HAL_TIM_Base_MspInit+0xf0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e46:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007e48:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e4a:	481f      	ldr	r0, [pc, #124]	; (8007ec8 <HAL_TIM_Base_MspInit+0xe8>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007e4c:	f042 0202 	orr.w	r2, r2, #2
 8007e50:	61da      	str	r2, [r3, #28]
 8007e52:	69da      	ldr	r2, [r3, #28]
 8007e54:	f002 0202 	and.w	r2, r2, #2
 8007e58:	9202      	str	r2, [sp, #8]
 8007e5a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	f042 0204 	orr.w	r2, r2, #4
 8007e62:	619a      	str	r2, [r3, #24]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	f002 0204 	and.w	r2, r2, #4
 8007e6a:	9203      	str	r2, [sp, #12]
 8007e6c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e6e:	699a      	ldr	r2, [r3, #24]
 8007e70:	f042 0208 	orr.w	r2, r2, #8
 8007e74:	619a      	str	r2, [r3, #24]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	9304      	str	r3, [sp, #16]
 8007e7e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007e80:	23c0      	movs	r3, #192	; 0xc0
 8007e82:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e84:	f7f9 fdb6 	bl	80019f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e8c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e8e:	a906      	add	r1, sp, #24
 8007e90:	4810      	ldr	r0, [pc, #64]	; (8007ed4 <HAL_TIM_Base_MspInit+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e92:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e94:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e96:	f7f9 fdad 	bl	80019f4 <HAL_GPIO_Init>
}
 8007e9a:	b00a      	add	sp, #40	; 0x28
 8007e9c:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM4)
 8007e9e:	4a0e      	ldr	r2, [pc, #56]	; (8007ed8 <HAL_TIM_Base_MspInit+0xf8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d1fa      	bne.n	8007e9a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <HAL_TIM_Base_MspInit+0xf0>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007ea6:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007ea8:	69da      	ldr	r2, [r3, #28]
 8007eaa:	f042 0204 	orr.w	r2, r2, #4
 8007eae:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007eb0:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007eb2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007eb4:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	9305      	str	r3, [sp, #20]
 8007ebc:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007ebe:	f7f9 fbe5 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007ec2:	201e      	movs	r0, #30
 8007ec4:	e7b8      	b.n	8007e38 <HAL_TIM_Base_MspInit+0x58>
 8007ec6:	bf00      	nop
 8007ec8:	40010800 	.word	0x40010800
 8007ecc:	40000400 	.word	0x40000400
 8007ed0:	40021000 	.word	0x40021000
 8007ed4:	40010c00 	.word	0x40010c00
 8007ed8:	40000800 	.word	0x40000800

08007edc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007edc:	b510      	push	{r4, lr}
 8007ede:	4604      	mov	r4, r0
 8007ee0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ee2:	2210      	movs	r2, #16
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	a802      	add	r0, sp, #8
 8007ee8:	f000 f9b3 	bl	8008252 <memset>
  if(htim->Instance==TIM4)
 8007eec:	6822      	ldr	r2, [r4, #0]
 8007eee:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <HAL_TIM_MspPostInit+0x48>)
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d115      	bne.n	8007f20 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ef4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007ef8:	699a      	ldr	r2, [r3, #24]
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007efa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007efc:	f042 0208 	orr.w	r2, r2, #8
 8007f00:	619a      	str	r2, [r3, #24]
 8007f02:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f04:	4808      	ldr	r0, [pc, #32]	; (8007f28 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f06:	f003 0308 	and.w	r3, r3, #8
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8007f0e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007f12:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f14:	2302      	movs	r3, #2
 8007f16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f1c:	f7f9 fd6a 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007f20:	b006      	add	sp, #24
 8007f22:	bd10      	pop	{r4, pc}
 8007f24:	40000800 	.word	0x40000800
 8007f28:	40010c00 	.word	0x40010c00

08007f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007f2c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f2e:	2710      	movs	r7, #16
{
 8007f30:	4605      	mov	r5, r0
 8007f32:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f34:	463a      	mov	r2, r7
 8007f36:	2100      	movs	r1, #0
 8007f38:	eb0d 0007 	add.w	r0, sp, r7
 8007f3c:	f000 f989 	bl	8008252 <memset>
  if(huart->Instance==USART1)
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	4a57      	ldr	r2, [pc, #348]	; (80080a0 <HAL_UART_MspInit+0x174>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d15b      	bne.n	8008000 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f48:	4b56      	ldr	r3, [pc, #344]	; (80080a4 <HAL_UART_MspInit+0x178>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f4a:	eb0d 0107 	add.w	r1, sp, r7
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f4e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f50:	4855      	ldr	r0, [pc, #340]	; (80080a8 <HAL_UART_MspInit+0x17c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f56:	619a      	str	r2, [r3, #24]
 8007f58:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f5a:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f5c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007f60:	9201      	str	r2, [sp, #4]
 8007f62:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f64:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007f66:	4c51      	ldr	r4, [pc, #324]	; (80080ac <HAL_UART_MspInit+0x180>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f68:	f042 0204 	orr.w	r2, r2, #4
 8007f6c:	619a      	str	r2, [r3, #24]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	9302      	str	r3, [sp, #8]
 8007f76:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f7c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f7e:	2302      	movs	r3, #2
 8007f80:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f82:	2303      	movs	r3, #3
 8007f84:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f86:	f7f9 fd35 	bl	80019f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f8e:	4846      	ldr	r0, [pc, #280]	; (80080a8 <HAL_UART_MspInit+0x17c>)
 8007f90:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007f94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f96:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f98:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f9a:	f7f9 fd2b 	bl	80019f4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007f9e:	4b44      	ldr	r3, [pc, #272]	; (80080b0 <HAL_UART_MspInit+0x184>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007fa0:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007fa2:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007fa6:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fa8:	60a6      	str	r6, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007faa:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007fac:	6126      	str	r6, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007fae:	6166      	str	r6, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007fb0:	61a6      	str	r6, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007fb2:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007fb4:	f7f9 fbd0 	bl	8001758 <HAL_DMA_Init>
 8007fb8:	b108      	cbz	r0, 8007fbe <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 8007fba:	f7ff fb4f 	bl	800765c <Error_Handler>

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007fbe:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007fc0:	4b3c      	ldr	r3, [pc, #240]	; (80080b4 <HAL_UART_MspInit+0x188>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007fc2:	632c      	str	r4, [r5, #48]	; 0x30
 8007fc4:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007fc6:	4c3c      	ldr	r4, [pc, #240]	; (80080b8 <HAL_UART_MspInit+0x18c>)
 8007fc8:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007fca:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007fcc:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8007fce:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007fd0:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007fd2:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fd4:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007fd6:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007fd8:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8007fda:	61a2      	str	r2, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007fdc:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007fde:	f7f9 fbbb 	bl	8001758 <HAL_DMA_Init>
 8007fe2:	b108      	cbz	r0, 8007fe8 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8007fe4:	f7ff fb3a 	bl	800765c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007fec:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007fee:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007ff0:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007ff2:	f7f9 fb4b 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007ff6:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007ff8:	f7f9 fb7c 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007ffc:	b009      	add	sp, #36	; 0x24
 8007ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART2)
 8008000:	4a2e      	ldr	r2, [pc, #184]	; (80080bc <HAL_UART_MspInit+0x190>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d1fa      	bne.n	8007ffc <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008006:	4b27      	ldr	r3, [pc, #156]	; (80080a4 <HAL_UART_MspInit+0x178>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008008:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 800800a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800800c:	4826      	ldr	r0, [pc, #152]	; (80080a8 <HAL_UART_MspInit+0x17c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800800e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008012:	61da      	str	r2, [r3, #28]
 8008014:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008016:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8008018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801c:	9303      	str	r3, [sp, #12]
 800801e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008020:	2304      	movs	r3, #4
 8008022:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008024:	2302      	movs	r3, #2
 8008026:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008028:	2303      	movs	r3, #3
 800802a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800802c:	f7f9 fce2 	bl	80019f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008030:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008032:	481d      	ldr	r0, [pc, #116]	; (80080a8 <HAL_UART_MspInit+0x17c>)
 8008034:	a904      	add	r1, sp, #16
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8008036:	4c22      	ldr	r4, [pc, #136]	; (80080c0 <HAL_UART_MspInit+0x194>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008038:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800803a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800803c:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800803e:	f7f9 fcd9 	bl	80019f4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8008042:	4b20      	ldr	r3, [pc, #128]	; (80080c4 <HAL_UART_MspInit+0x198>)
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008044:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008046:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800804a:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800804c:	60a6      	str	r6, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800804e:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008050:	6126      	str	r6, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008052:	6166      	str	r6, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008054:	61a6      	str	r6, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008056:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008058:	f7f9 fb7e 	bl	8001758 <HAL_DMA_Init>
 800805c:	b108      	cbz	r0, 8008062 <HAL_UART_MspInit+0x136>
      Error_Handler();
 800805e:	f7ff fafd 	bl	800765c <Error_Handler>
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008062:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8008064:	4b18      	ldr	r3, [pc, #96]	; (80080c8 <HAL_UART_MspInit+0x19c>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008066:	632c      	str	r4, [r5, #48]	; 0x30
 8008068:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800806a:	4c18      	ldr	r4, [pc, #96]	; (80080cc <HAL_UART_MspInit+0x1a0>)
 800806c:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800806e:	60e2      	str	r2, [r4, #12]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008070:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008072:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008074:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008076:	6063      	str	r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008078:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800807a:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800807c:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800807e:	61a2      	str	r2, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008080:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008082:	f7f9 fb69 	bl	8001758 <HAL_DMA_Init>
 8008086:	b108      	cbz	r0, 800808c <HAL_UART_MspInit+0x160>
      Error_Handler();
 8008088:	f7ff fae8 	bl	800765c <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800808c:	2200      	movs	r2, #0
 800808e:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008090:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008092:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008094:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008096:	f7f9 faf9 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800809a:	2026      	movs	r0, #38	; 0x26
 800809c:	e7ac      	b.n	8007ff8 <HAL_UART_MspInit+0xcc>
 800809e:	bf00      	nop
 80080a0:	40013800 	.word	0x40013800
 80080a4:	40021000 	.word	0x40021000
 80080a8:	40010800 	.word	0x40010800
 80080ac:	20000f64 	.word	0x20000f64
 80080b0:	40020044 	.word	0x40020044
 80080b4:	40020058 	.word	0x40020058
 80080b8:	20000fd8 	.word	0x20000fd8
 80080bc:	40004400 	.word	0x40004400
 80080c0:	2000101c 	.word	0x2000101c
 80080c4:	40020080 	.word	0x40020080
 80080c8:	4002006c 	.word	0x4002006c
 80080cc:	20000e4c 	.word	0x20000e4c

080080d0 <NMI_Handler>:
 80080d0:	4770      	bx	lr

080080d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80080d2:	e7fe      	b.n	80080d2 <HardFault_Handler>

080080d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80080d4:	e7fe      	b.n	80080d4 <MemManage_Handler>

080080d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80080d6:	e7fe      	b.n	80080d6 <BusFault_Handler>

080080d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80080d8:	e7fe      	b.n	80080d8 <UsageFault_Handler>

080080da <SVC_Handler>:
 80080da:	4770      	bx	lr

080080dc <DebugMon_Handler>:
 80080dc:	4770      	bx	lr

080080de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80080de:	4770      	bx	lr

080080e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80080e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80080e2:	f7f9 f83b 	bl	800115c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80080e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80080ea:	f7f9 bb31 	b.w	8001750 <HAL_SYSTICK_IRQHandler>
	...

080080f0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <DMA1_Channel4_IRQHandler+0x8>)
 80080f2:	f7f9 bbeb 	b.w	80018cc <HAL_DMA_IRQHandler>
 80080f6:	bf00      	nop
 80080f8:	20000f64 	.word	0x20000f64

080080fc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80080fc:	4801      	ldr	r0, [pc, #4]	; (8008104 <DMA1_Channel5_IRQHandler+0x8>)
 80080fe:	f7f9 bbe5 	b.w	80018cc <HAL_DMA_IRQHandler>
 8008102:	bf00      	nop
 8008104:	20000fd8 	.word	0x20000fd8

08008108 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008108:	4801      	ldr	r0, [pc, #4]	; (8008110 <DMA1_Channel6_IRQHandler+0x8>)
 800810a:	f7f9 bbdf 	b.w	80018cc <HAL_DMA_IRQHandler>
 800810e:	bf00      	nop
 8008110:	20000e4c 	.word	0x20000e4c

08008114 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008114:	4801      	ldr	r0, [pc, #4]	; (800811c <DMA1_Channel7_IRQHandler+0x8>)
 8008116:	f7f9 bbd9 	b.w	80018cc <HAL_DMA_IRQHandler>
 800811a:	bf00      	nop
 800811c:	2000101c 	.word	0x2000101c

08008120 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008120:	4801      	ldr	r0, [pc, #4]	; (8008128 <TIM2_IRQHandler+0x8>)
 8008122:	f7fb b85d 	b.w	80031e0 <HAL_TIM_IRQHandler>
 8008126:	bf00      	nop
 8008128:	200010a8 	.word	0x200010a8

0800812c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800812c:	4801      	ldr	r0, [pc, #4]	; (8008134 <TIM3_IRQHandler+0x8>)
 800812e:	f7fb b857 	b.w	80031e0 <HAL_TIM_IRQHandler>
 8008132:	bf00      	nop
 8008134:	20000f24 	.word	0x20000f24

08008138 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008138:	4801      	ldr	r0, [pc, #4]	; (8008140 <TIM4_IRQHandler+0x8>)
 800813a:	f7fb b851 	b.w	80031e0 <HAL_TIM_IRQHandler>
 800813e:	bf00      	nop
 8008140:	20000e90 	.word	0x20000e90

08008144 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008144:	4801      	ldr	r0, [pc, #4]	; (800814c <USART1_IRQHandler+0x8>)
 8008146:	f7fb bdab 	b.w	8003ca0 <HAL_UART_IRQHandler>
 800814a:	bf00      	nop
 800814c:	20001060 	.word	0x20001060

08008150 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008150:	4801      	ldr	r0, [pc, #4]	; (8008158 <USART2_IRQHandler+0x8>)
 8008152:	f7fb bda5 	b.w	8003ca0 <HAL_UART_IRQHandler>
 8008156:	bf00      	nop
 8008158:	200010e8 	.word	0x200010e8

0800815c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800815c:	4b0f      	ldr	r3, [pc, #60]	; (800819c <SystemInit+0x40>)
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	f042 0201 	orr.w	r2, r2, #1
 8008164:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8008166:	6859      	ldr	r1, [r3, #4]
 8008168:	4a0d      	ldr	r2, [pc, #52]	; (80081a0 <SystemInit+0x44>)
 800816a:	400a      	ands	r2, r1
 800816c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008174:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008178:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008180:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8008188:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800818a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800818e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008190:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008194:	4b03      	ldr	r3, [pc, #12]	; (80081a4 <SystemInit+0x48>)
 8008196:	609a      	str	r2, [r3, #8]
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40021000 	.word	0x40021000
 80081a0:	f8ff0000 	.word	0xf8ff0000
 80081a4:	e000ed00 	.word	0xe000ed00

080081a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80081a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80081aa:	e003      	b.n	80081b4 <LoopCopyDataInit>

080081ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80081ac:	4b0b      	ldr	r3, [pc, #44]	; (80081dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80081ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80081b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80081b2:	3104      	adds	r1, #4

080081b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80081b4:	480a      	ldr	r0, [pc, #40]	; (80081e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80081b6:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80081b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80081ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80081bc:	d3f6      	bcc.n	80081ac <CopyDataInit>
  ldr r2, =_sbss
 80081be:	4a0a      	ldr	r2, [pc, #40]	; (80081e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80081c0:	e002      	b.n	80081c8 <LoopFillZerobss>

080081c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80081c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80081c4:	f842 3b04 	str.w	r3, [r2], #4

080081c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80081c8:	4b08      	ldr	r3, [pc, #32]	; (80081ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80081ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80081cc:	d3f9      	bcc.n	80081c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80081ce:	f7ff ffc5 	bl	800815c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80081d2:	f000 f80f 	bl	80081f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80081d6:	f7ff fa9b 	bl	8007710 <main>
  bx lr
 80081da:	4770      	bx	lr
  ldr r3, =_sidata
 80081dc:	0800b718 	.word	0x0800b718
  ldr r0, =_sdata
 80081e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80081e4:	2000047c 	.word	0x2000047c
  ldr r2, =_sbss
 80081e8:	20000480 	.word	0x20000480
  ldr r3, = _ebss
 80081ec:	2000112c 	.word	0x2000112c

080081f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80081f0:	e7fe      	b.n	80081f0 <ADC1_2_IRQHandler>
	...

080081f4 <__libc_init_array>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	2500      	movs	r5, #0
 80081f8:	4e0c      	ldr	r6, [pc, #48]	; (800822c <__libc_init_array+0x38>)
 80081fa:	4c0d      	ldr	r4, [pc, #52]	; (8008230 <__libc_init_array+0x3c>)
 80081fc:	1ba4      	subs	r4, r4, r6
 80081fe:	10a4      	asrs	r4, r4, #2
 8008200:	42a5      	cmp	r5, r4
 8008202:	d109      	bne.n	8008218 <__libc_init_array+0x24>
 8008204:	f002 fddc 	bl	800adc0 <_init>
 8008208:	2500      	movs	r5, #0
 800820a:	4e0a      	ldr	r6, [pc, #40]	; (8008234 <__libc_init_array+0x40>)
 800820c:	4c0a      	ldr	r4, [pc, #40]	; (8008238 <__libc_init_array+0x44>)
 800820e:	1ba4      	subs	r4, r4, r6
 8008210:	10a4      	asrs	r4, r4, #2
 8008212:	42a5      	cmp	r5, r4
 8008214:	d105      	bne.n	8008222 <__libc_init_array+0x2e>
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800821c:	4798      	blx	r3
 800821e:	3501      	adds	r5, #1
 8008220:	e7ee      	b.n	8008200 <__libc_init_array+0xc>
 8008222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008226:	4798      	blx	r3
 8008228:	3501      	adds	r5, #1
 800822a:	e7f2      	b.n	8008212 <__libc_init_array+0x1e>
 800822c:	0800b710 	.word	0x0800b710
 8008230:	0800b710 	.word	0x0800b710
 8008234:	0800b710 	.word	0x0800b710
 8008238:	0800b714 	.word	0x0800b714

0800823c <memcpy>:
 800823c:	b510      	push	{r4, lr}
 800823e:	1e43      	subs	r3, r0, #1
 8008240:	440a      	add	r2, r1
 8008242:	4291      	cmp	r1, r2
 8008244:	d100      	bne.n	8008248 <memcpy+0xc>
 8008246:	bd10      	pop	{r4, pc}
 8008248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800824c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008250:	e7f7      	b.n	8008242 <memcpy+0x6>

08008252 <memset>:
 8008252:	4603      	mov	r3, r0
 8008254:	4402      	add	r2, r0
 8008256:	4293      	cmp	r3, r2
 8008258:	d100      	bne.n	800825c <memset+0xa>
 800825a:	4770      	bx	lr
 800825c:	f803 1b01 	strb.w	r1, [r3], #1
 8008260:	e7f9      	b.n	8008256 <memset+0x4>
	...

08008264 <siprintf>:
 8008264:	b40e      	push	{r1, r2, r3}
 8008266:	f44f 7102 	mov.w	r1, #520	; 0x208
 800826a:	b500      	push	{lr}
 800826c:	b09c      	sub	sp, #112	; 0x70
 800826e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008272:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008276:	9104      	str	r1, [sp, #16]
 8008278:	9107      	str	r1, [sp, #28]
 800827a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800827e:	ab1d      	add	r3, sp, #116	; 0x74
 8008280:	9002      	str	r0, [sp, #8]
 8008282:	9006      	str	r0, [sp, #24]
 8008284:	4808      	ldr	r0, [pc, #32]	; (80082a8 <siprintf+0x44>)
 8008286:	f853 2b04 	ldr.w	r2, [r3], #4
 800828a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800828e:	6800      	ldr	r0, [r0, #0]
 8008290:	a902      	add	r1, sp, #8
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	f000 f918 	bl	80084c8 <_svfiprintf_r>
 8008298:	2200      	movs	r2, #0
 800829a:	9b02      	ldr	r3, [sp, #8]
 800829c:	701a      	strb	r2, [r3, #0]
 800829e:	b01c      	add	sp, #112	; 0x70
 80082a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082a4:	b003      	add	sp, #12
 80082a6:	4770      	bx	lr
 80082a8:	20000414 	.word	0x20000414

080082ac <strcpy>:
 80082ac:	4603      	mov	r3, r0
 80082ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082b2:	f803 2b01 	strb.w	r2, [r3], #1
 80082b6:	2a00      	cmp	r2, #0
 80082b8:	d1f9      	bne.n	80082ae <strcpy+0x2>
 80082ba:	4770      	bx	lr

080082bc <_free_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4605      	mov	r5, r0
 80082c0:	2900      	cmp	r1, #0
 80082c2:	d043      	beq.n	800834c <_free_r+0x90>
 80082c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082c8:	1f0c      	subs	r4, r1, #4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	bfb8      	it	lt
 80082ce:	18e4      	addlt	r4, r4, r3
 80082d0:	f000 fbc2 	bl	8008a58 <__malloc_lock>
 80082d4:	4a1e      	ldr	r2, [pc, #120]	; (8008350 <_free_r+0x94>)
 80082d6:	6813      	ldr	r3, [r2, #0]
 80082d8:	4610      	mov	r0, r2
 80082da:	b933      	cbnz	r3, 80082ea <_free_r+0x2e>
 80082dc:	6063      	str	r3, [r4, #4]
 80082de:	6014      	str	r4, [r2, #0]
 80082e0:	4628      	mov	r0, r5
 80082e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082e6:	f000 bbb8 	b.w	8008a5a <__malloc_unlock>
 80082ea:	42a3      	cmp	r3, r4
 80082ec:	d90b      	bls.n	8008306 <_free_r+0x4a>
 80082ee:	6821      	ldr	r1, [r4, #0]
 80082f0:	1862      	adds	r2, r4, r1
 80082f2:	4293      	cmp	r3, r2
 80082f4:	bf01      	itttt	eq
 80082f6:	681a      	ldreq	r2, [r3, #0]
 80082f8:	685b      	ldreq	r3, [r3, #4]
 80082fa:	1852      	addeq	r2, r2, r1
 80082fc:	6022      	streq	r2, [r4, #0]
 80082fe:	6063      	str	r3, [r4, #4]
 8008300:	6004      	str	r4, [r0, #0]
 8008302:	e7ed      	b.n	80082e0 <_free_r+0x24>
 8008304:	4613      	mov	r3, r2
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	b10a      	cbz	r2, 800830e <_free_r+0x52>
 800830a:	42a2      	cmp	r2, r4
 800830c:	d9fa      	bls.n	8008304 <_free_r+0x48>
 800830e:	6819      	ldr	r1, [r3, #0]
 8008310:	1858      	adds	r0, r3, r1
 8008312:	42a0      	cmp	r0, r4
 8008314:	d10b      	bne.n	800832e <_free_r+0x72>
 8008316:	6820      	ldr	r0, [r4, #0]
 8008318:	4401      	add	r1, r0
 800831a:	1858      	adds	r0, r3, r1
 800831c:	4282      	cmp	r2, r0
 800831e:	6019      	str	r1, [r3, #0]
 8008320:	d1de      	bne.n	80082e0 <_free_r+0x24>
 8008322:	6810      	ldr	r0, [r2, #0]
 8008324:	6852      	ldr	r2, [r2, #4]
 8008326:	4401      	add	r1, r0
 8008328:	6019      	str	r1, [r3, #0]
 800832a:	605a      	str	r2, [r3, #4]
 800832c:	e7d8      	b.n	80082e0 <_free_r+0x24>
 800832e:	d902      	bls.n	8008336 <_free_r+0x7a>
 8008330:	230c      	movs	r3, #12
 8008332:	602b      	str	r3, [r5, #0]
 8008334:	e7d4      	b.n	80082e0 <_free_r+0x24>
 8008336:	6820      	ldr	r0, [r4, #0]
 8008338:	1821      	adds	r1, r4, r0
 800833a:	428a      	cmp	r2, r1
 800833c:	bf01      	itttt	eq
 800833e:	6811      	ldreq	r1, [r2, #0]
 8008340:	6852      	ldreq	r2, [r2, #4]
 8008342:	1809      	addeq	r1, r1, r0
 8008344:	6021      	streq	r1, [r4, #0]
 8008346:	6062      	str	r2, [r4, #4]
 8008348:	605c      	str	r4, [r3, #4]
 800834a:	e7c9      	b.n	80082e0 <_free_r+0x24>
 800834c:	bd38      	pop	{r3, r4, r5, pc}
 800834e:	bf00      	nop
 8008350:	20000740 	.word	0x20000740

08008354 <_malloc_r>:
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	1ccd      	adds	r5, r1, #3
 8008358:	f025 0503 	bic.w	r5, r5, #3
 800835c:	3508      	adds	r5, #8
 800835e:	2d0c      	cmp	r5, #12
 8008360:	bf38      	it	cc
 8008362:	250c      	movcc	r5, #12
 8008364:	2d00      	cmp	r5, #0
 8008366:	4606      	mov	r6, r0
 8008368:	db01      	blt.n	800836e <_malloc_r+0x1a>
 800836a:	42a9      	cmp	r1, r5
 800836c:	d903      	bls.n	8008376 <_malloc_r+0x22>
 800836e:	230c      	movs	r3, #12
 8008370:	6033      	str	r3, [r6, #0]
 8008372:	2000      	movs	r0, #0
 8008374:	bd70      	pop	{r4, r5, r6, pc}
 8008376:	f000 fb6f 	bl	8008a58 <__malloc_lock>
 800837a:	4a23      	ldr	r2, [pc, #140]	; (8008408 <_malloc_r+0xb4>)
 800837c:	6814      	ldr	r4, [r2, #0]
 800837e:	4621      	mov	r1, r4
 8008380:	b991      	cbnz	r1, 80083a8 <_malloc_r+0x54>
 8008382:	4c22      	ldr	r4, [pc, #136]	; (800840c <_malloc_r+0xb8>)
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	b91b      	cbnz	r3, 8008390 <_malloc_r+0x3c>
 8008388:	4630      	mov	r0, r6
 800838a:	f000 fb29 	bl	80089e0 <_sbrk_r>
 800838e:	6020      	str	r0, [r4, #0]
 8008390:	4629      	mov	r1, r5
 8008392:	4630      	mov	r0, r6
 8008394:	f000 fb24 	bl	80089e0 <_sbrk_r>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d126      	bne.n	80083ea <_malloc_r+0x96>
 800839c:	230c      	movs	r3, #12
 800839e:	4630      	mov	r0, r6
 80083a0:	6033      	str	r3, [r6, #0]
 80083a2:	f000 fb5a 	bl	8008a5a <__malloc_unlock>
 80083a6:	e7e4      	b.n	8008372 <_malloc_r+0x1e>
 80083a8:	680b      	ldr	r3, [r1, #0]
 80083aa:	1b5b      	subs	r3, r3, r5
 80083ac:	d41a      	bmi.n	80083e4 <_malloc_r+0x90>
 80083ae:	2b0b      	cmp	r3, #11
 80083b0:	d90f      	bls.n	80083d2 <_malloc_r+0x7e>
 80083b2:	600b      	str	r3, [r1, #0]
 80083b4:	18cc      	adds	r4, r1, r3
 80083b6:	50cd      	str	r5, [r1, r3]
 80083b8:	4630      	mov	r0, r6
 80083ba:	f000 fb4e 	bl	8008a5a <__malloc_unlock>
 80083be:	f104 000b 	add.w	r0, r4, #11
 80083c2:	1d23      	adds	r3, r4, #4
 80083c4:	f020 0007 	bic.w	r0, r0, #7
 80083c8:	1ac3      	subs	r3, r0, r3
 80083ca:	d01b      	beq.n	8008404 <_malloc_r+0xb0>
 80083cc:	425a      	negs	r2, r3
 80083ce:	50e2      	str	r2, [r4, r3]
 80083d0:	bd70      	pop	{r4, r5, r6, pc}
 80083d2:	428c      	cmp	r4, r1
 80083d4:	bf0b      	itete	eq
 80083d6:	6863      	ldreq	r3, [r4, #4]
 80083d8:	684b      	ldrne	r3, [r1, #4]
 80083da:	6013      	streq	r3, [r2, #0]
 80083dc:	6063      	strne	r3, [r4, #4]
 80083de:	bf18      	it	ne
 80083e0:	460c      	movne	r4, r1
 80083e2:	e7e9      	b.n	80083b8 <_malloc_r+0x64>
 80083e4:	460c      	mov	r4, r1
 80083e6:	6849      	ldr	r1, [r1, #4]
 80083e8:	e7ca      	b.n	8008380 <_malloc_r+0x2c>
 80083ea:	1cc4      	adds	r4, r0, #3
 80083ec:	f024 0403 	bic.w	r4, r4, #3
 80083f0:	42a0      	cmp	r0, r4
 80083f2:	d005      	beq.n	8008400 <_malloc_r+0xac>
 80083f4:	1a21      	subs	r1, r4, r0
 80083f6:	4630      	mov	r0, r6
 80083f8:	f000 faf2 	bl	80089e0 <_sbrk_r>
 80083fc:	3001      	adds	r0, #1
 80083fe:	d0cd      	beq.n	800839c <_malloc_r+0x48>
 8008400:	6025      	str	r5, [r4, #0]
 8008402:	e7d9      	b.n	80083b8 <_malloc_r+0x64>
 8008404:	bd70      	pop	{r4, r5, r6, pc}
 8008406:	bf00      	nop
 8008408:	20000740 	.word	0x20000740
 800840c:	20000744 	.word	0x20000744

08008410 <__ssputs_r>:
 8008410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008414:	688e      	ldr	r6, [r1, #8]
 8008416:	4682      	mov	sl, r0
 8008418:	429e      	cmp	r6, r3
 800841a:	460c      	mov	r4, r1
 800841c:	4691      	mov	r9, r2
 800841e:	4698      	mov	r8, r3
 8008420:	d835      	bhi.n	800848e <__ssputs_r+0x7e>
 8008422:	898a      	ldrh	r2, [r1, #12]
 8008424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008428:	d031      	beq.n	800848e <__ssputs_r+0x7e>
 800842a:	2302      	movs	r3, #2
 800842c:	6825      	ldr	r5, [r4, #0]
 800842e:	6909      	ldr	r1, [r1, #16]
 8008430:	1a6f      	subs	r7, r5, r1
 8008432:	6965      	ldr	r5, [r4, #20]
 8008434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008438:	fb95 f5f3 	sdiv	r5, r5, r3
 800843c:	f108 0301 	add.w	r3, r8, #1
 8008440:	443b      	add	r3, r7
 8008442:	429d      	cmp	r5, r3
 8008444:	bf38      	it	cc
 8008446:	461d      	movcc	r5, r3
 8008448:	0553      	lsls	r3, r2, #21
 800844a:	d531      	bpl.n	80084b0 <__ssputs_r+0xa0>
 800844c:	4629      	mov	r1, r5
 800844e:	f7ff ff81 	bl	8008354 <_malloc_r>
 8008452:	4606      	mov	r6, r0
 8008454:	b950      	cbnz	r0, 800846c <__ssputs_r+0x5c>
 8008456:	230c      	movs	r3, #12
 8008458:	f8ca 3000 	str.w	r3, [sl]
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	f04f 30ff 	mov.w	r0, #4294967295
 8008462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008466:	81a3      	strh	r3, [r4, #12]
 8008468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800846c:	463a      	mov	r2, r7
 800846e:	6921      	ldr	r1, [r4, #16]
 8008470:	f7ff fee4 	bl	800823c <memcpy>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800847a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847e:	81a3      	strh	r3, [r4, #12]
 8008480:	6126      	str	r6, [r4, #16]
 8008482:	443e      	add	r6, r7
 8008484:	6026      	str	r6, [r4, #0]
 8008486:	4646      	mov	r6, r8
 8008488:	6165      	str	r5, [r4, #20]
 800848a:	1bed      	subs	r5, r5, r7
 800848c:	60a5      	str	r5, [r4, #8]
 800848e:	4546      	cmp	r6, r8
 8008490:	bf28      	it	cs
 8008492:	4646      	movcs	r6, r8
 8008494:	4649      	mov	r1, r9
 8008496:	4632      	mov	r2, r6
 8008498:	6820      	ldr	r0, [r4, #0]
 800849a:	f000 fac3 	bl	8008a24 <memmove>
 800849e:	68a3      	ldr	r3, [r4, #8]
 80084a0:	2000      	movs	r0, #0
 80084a2:	1b9b      	subs	r3, r3, r6
 80084a4:	60a3      	str	r3, [r4, #8]
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	441e      	add	r6, r3
 80084aa:	6026      	str	r6, [r4, #0]
 80084ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b0:	462a      	mov	r2, r5
 80084b2:	f000 fad3 	bl	8008a5c <_realloc_r>
 80084b6:	4606      	mov	r6, r0
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d1e1      	bne.n	8008480 <__ssputs_r+0x70>
 80084bc:	6921      	ldr	r1, [r4, #16]
 80084be:	4650      	mov	r0, sl
 80084c0:	f7ff fefc 	bl	80082bc <_free_r>
 80084c4:	e7c7      	b.n	8008456 <__ssputs_r+0x46>
	...

080084c8 <_svfiprintf_r>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	b09d      	sub	sp, #116	; 0x74
 80084ce:	9303      	str	r3, [sp, #12]
 80084d0:	898b      	ldrh	r3, [r1, #12]
 80084d2:	4680      	mov	r8, r0
 80084d4:	061c      	lsls	r4, r3, #24
 80084d6:	460d      	mov	r5, r1
 80084d8:	4616      	mov	r6, r2
 80084da:	d50f      	bpl.n	80084fc <_svfiprintf_r+0x34>
 80084dc:	690b      	ldr	r3, [r1, #16]
 80084de:	b96b      	cbnz	r3, 80084fc <_svfiprintf_r+0x34>
 80084e0:	2140      	movs	r1, #64	; 0x40
 80084e2:	f7ff ff37 	bl	8008354 <_malloc_r>
 80084e6:	6028      	str	r0, [r5, #0]
 80084e8:	6128      	str	r0, [r5, #16]
 80084ea:	b928      	cbnz	r0, 80084f8 <_svfiprintf_r+0x30>
 80084ec:	230c      	movs	r3, #12
 80084ee:	f8c8 3000 	str.w	r3, [r8]
 80084f2:	f04f 30ff 	mov.w	r0, #4294967295
 80084f6:	e0c4      	b.n	8008682 <_svfiprintf_r+0x1ba>
 80084f8:	2340      	movs	r3, #64	; 0x40
 80084fa:	616b      	str	r3, [r5, #20]
 80084fc:	2300      	movs	r3, #0
 80084fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008500:	2320      	movs	r3, #32
 8008502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008506:	2330      	movs	r3, #48	; 0x30
 8008508:	f04f 0b01 	mov.w	fp, #1
 800850c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008510:	4637      	mov	r7, r6
 8008512:	463c      	mov	r4, r7
 8008514:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d13c      	bne.n	8008596 <_svfiprintf_r+0xce>
 800851c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008520:	d00b      	beq.n	800853a <_svfiprintf_r+0x72>
 8008522:	4653      	mov	r3, sl
 8008524:	4632      	mov	r2, r6
 8008526:	4629      	mov	r1, r5
 8008528:	4640      	mov	r0, r8
 800852a:	f7ff ff71 	bl	8008410 <__ssputs_r>
 800852e:	3001      	adds	r0, #1
 8008530:	f000 80a2 	beq.w	8008678 <_svfiprintf_r+0x1b0>
 8008534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008536:	4453      	add	r3, sl
 8008538:	9309      	str	r3, [sp, #36]	; 0x24
 800853a:	783b      	ldrb	r3, [r7, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 809b 	beq.w	8008678 <_svfiprintf_r+0x1b0>
 8008542:	2300      	movs	r3, #0
 8008544:	f04f 32ff 	mov.w	r2, #4294967295
 8008548:	9304      	str	r3, [sp, #16]
 800854a:	9307      	str	r3, [sp, #28]
 800854c:	9205      	str	r2, [sp, #20]
 800854e:	9306      	str	r3, [sp, #24]
 8008550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008554:	931a      	str	r3, [sp, #104]	; 0x68
 8008556:	2205      	movs	r2, #5
 8008558:	7821      	ldrb	r1, [r4, #0]
 800855a:	4850      	ldr	r0, [pc, #320]	; (800869c <_svfiprintf_r+0x1d4>)
 800855c:	f000 fa54 	bl	8008a08 <memchr>
 8008560:	1c67      	adds	r7, r4, #1
 8008562:	9b04      	ldr	r3, [sp, #16]
 8008564:	b9d8      	cbnz	r0, 800859e <_svfiprintf_r+0xd6>
 8008566:	06d9      	lsls	r1, r3, #27
 8008568:	bf44      	itt	mi
 800856a:	2220      	movmi	r2, #32
 800856c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008570:	071a      	lsls	r2, r3, #28
 8008572:	bf44      	itt	mi
 8008574:	222b      	movmi	r2, #43	; 0x2b
 8008576:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800857a:	7822      	ldrb	r2, [r4, #0]
 800857c:	2a2a      	cmp	r2, #42	; 0x2a
 800857e:	d016      	beq.n	80085ae <_svfiprintf_r+0xe6>
 8008580:	2100      	movs	r1, #0
 8008582:	200a      	movs	r0, #10
 8008584:	9a07      	ldr	r2, [sp, #28]
 8008586:	4627      	mov	r7, r4
 8008588:	783b      	ldrb	r3, [r7, #0]
 800858a:	3401      	adds	r4, #1
 800858c:	3b30      	subs	r3, #48	; 0x30
 800858e:	2b09      	cmp	r3, #9
 8008590:	d950      	bls.n	8008634 <_svfiprintf_r+0x16c>
 8008592:	b1c9      	cbz	r1, 80085c8 <_svfiprintf_r+0x100>
 8008594:	e011      	b.n	80085ba <_svfiprintf_r+0xf2>
 8008596:	2b25      	cmp	r3, #37	; 0x25
 8008598:	d0c0      	beq.n	800851c <_svfiprintf_r+0x54>
 800859a:	4627      	mov	r7, r4
 800859c:	e7b9      	b.n	8008512 <_svfiprintf_r+0x4a>
 800859e:	4a3f      	ldr	r2, [pc, #252]	; (800869c <_svfiprintf_r+0x1d4>)
 80085a0:	463c      	mov	r4, r7
 80085a2:	1a80      	subs	r0, r0, r2
 80085a4:	fa0b f000 	lsl.w	r0, fp, r0
 80085a8:	4318      	orrs	r0, r3
 80085aa:	9004      	str	r0, [sp, #16]
 80085ac:	e7d3      	b.n	8008556 <_svfiprintf_r+0x8e>
 80085ae:	9a03      	ldr	r2, [sp, #12]
 80085b0:	1d11      	adds	r1, r2, #4
 80085b2:	6812      	ldr	r2, [r2, #0]
 80085b4:	9103      	str	r1, [sp, #12]
 80085b6:	2a00      	cmp	r2, #0
 80085b8:	db01      	blt.n	80085be <_svfiprintf_r+0xf6>
 80085ba:	9207      	str	r2, [sp, #28]
 80085bc:	e004      	b.n	80085c8 <_svfiprintf_r+0x100>
 80085be:	4252      	negs	r2, r2
 80085c0:	f043 0302 	orr.w	r3, r3, #2
 80085c4:	9207      	str	r2, [sp, #28]
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	783b      	ldrb	r3, [r7, #0]
 80085ca:	2b2e      	cmp	r3, #46	; 0x2e
 80085cc:	d10d      	bne.n	80085ea <_svfiprintf_r+0x122>
 80085ce:	787b      	ldrb	r3, [r7, #1]
 80085d0:	1c79      	adds	r1, r7, #1
 80085d2:	2b2a      	cmp	r3, #42	; 0x2a
 80085d4:	d132      	bne.n	800863c <_svfiprintf_r+0x174>
 80085d6:	9b03      	ldr	r3, [sp, #12]
 80085d8:	3702      	adds	r7, #2
 80085da:	1d1a      	adds	r2, r3, #4
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	9203      	str	r2, [sp, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bfb8      	it	lt
 80085e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80085e8:	9305      	str	r3, [sp, #20]
 80085ea:	4c2d      	ldr	r4, [pc, #180]	; (80086a0 <_svfiprintf_r+0x1d8>)
 80085ec:	2203      	movs	r2, #3
 80085ee:	7839      	ldrb	r1, [r7, #0]
 80085f0:	4620      	mov	r0, r4
 80085f2:	f000 fa09 	bl	8008a08 <memchr>
 80085f6:	b138      	cbz	r0, 8008608 <_svfiprintf_r+0x140>
 80085f8:	2340      	movs	r3, #64	; 0x40
 80085fa:	1b00      	subs	r0, r0, r4
 80085fc:	fa03 f000 	lsl.w	r0, r3, r0
 8008600:	9b04      	ldr	r3, [sp, #16]
 8008602:	3701      	adds	r7, #1
 8008604:	4303      	orrs	r3, r0
 8008606:	9304      	str	r3, [sp, #16]
 8008608:	7839      	ldrb	r1, [r7, #0]
 800860a:	2206      	movs	r2, #6
 800860c:	4825      	ldr	r0, [pc, #148]	; (80086a4 <_svfiprintf_r+0x1dc>)
 800860e:	1c7e      	adds	r6, r7, #1
 8008610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008614:	f000 f9f8 	bl	8008a08 <memchr>
 8008618:	2800      	cmp	r0, #0
 800861a:	d035      	beq.n	8008688 <_svfiprintf_r+0x1c0>
 800861c:	4b22      	ldr	r3, [pc, #136]	; (80086a8 <_svfiprintf_r+0x1e0>)
 800861e:	b9fb      	cbnz	r3, 8008660 <_svfiprintf_r+0x198>
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	3307      	adds	r3, #7
 8008624:	f023 0307 	bic.w	r3, r3, #7
 8008628:	3308      	adds	r3, #8
 800862a:	9303      	str	r3, [sp, #12]
 800862c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862e:	444b      	add	r3, r9
 8008630:	9309      	str	r3, [sp, #36]	; 0x24
 8008632:	e76d      	b.n	8008510 <_svfiprintf_r+0x48>
 8008634:	fb00 3202 	mla	r2, r0, r2, r3
 8008638:	2101      	movs	r1, #1
 800863a:	e7a4      	b.n	8008586 <_svfiprintf_r+0xbe>
 800863c:	2300      	movs	r3, #0
 800863e:	240a      	movs	r4, #10
 8008640:	4618      	mov	r0, r3
 8008642:	9305      	str	r3, [sp, #20]
 8008644:	460f      	mov	r7, r1
 8008646:	783a      	ldrb	r2, [r7, #0]
 8008648:	3101      	adds	r1, #1
 800864a:	3a30      	subs	r2, #48	; 0x30
 800864c:	2a09      	cmp	r2, #9
 800864e:	d903      	bls.n	8008658 <_svfiprintf_r+0x190>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0ca      	beq.n	80085ea <_svfiprintf_r+0x122>
 8008654:	9005      	str	r0, [sp, #20]
 8008656:	e7c8      	b.n	80085ea <_svfiprintf_r+0x122>
 8008658:	fb04 2000 	mla	r0, r4, r0, r2
 800865c:	2301      	movs	r3, #1
 800865e:	e7f1      	b.n	8008644 <_svfiprintf_r+0x17c>
 8008660:	ab03      	add	r3, sp, #12
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	462a      	mov	r2, r5
 8008666:	4b11      	ldr	r3, [pc, #68]	; (80086ac <_svfiprintf_r+0x1e4>)
 8008668:	a904      	add	r1, sp, #16
 800866a:	4640      	mov	r0, r8
 800866c:	f3af 8000 	nop.w
 8008670:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008674:	4681      	mov	r9, r0
 8008676:	d1d9      	bne.n	800862c <_svfiprintf_r+0x164>
 8008678:	89ab      	ldrh	r3, [r5, #12]
 800867a:	065b      	lsls	r3, r3, #25
 800867c:	f53f af39 	bmi.w	80084f2 <_svfiprintf_r+0x2a>
 8008680:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008682:	b01d      	add	sp, #116	; 0x74
 8008684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008688:	ab03      	add	r3, sp, #12
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	462a      	mov	r2, r5
 800868e:	4b07      	ldr	r3, [pc, #28]	; (80086ac <_svfiprintf_r+0x1e4>)
 8008690:	a904      	add	r1, sp, #16
 8008692:	4640      	mov	r0, r8
 8008694:	f000 f884 	bl	80087a0 <_printf_i>
 8008698:	e7ea      	b.n	8008670 <_svfiprintf_r+0x1a8>
 800869a:	bf00      	nop
 800869c:	0800b64c 	.word	0x0800b64c
 80086a0:	0800b652 	.word	0x0800b652
 80086a4:	0800b656 	.word	0x0800b656
 80086a8:	00000000 	.word	0x00000000
 80086ac:	08008411 	.word	0x08008411

080086b0 <_printf_common>:
 80086b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b4:	4691      	mov	r9, r2
 80086b6:	461f      	mov	r7, r3
 80086b8:	688a      	ldr	r2, [r1, #8]
 80086ba:	690b      	ldr	r3, [r1, #16]
 80086bc:	4606      	mov	r6, r0
 80086be:	4293      	cmp	r3, r2
 80086c0:	bfb8      	it	lt
 80086c2:	4613      	movlt	r3, r2
 80086c4:	f8c9 3000 	str.w	r3, [r9]
 80086c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086cc:	460c      	mov	r4, r1
 80086ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086d2:	b112      	cbz	r2, 80086da <_printf_common+0x2a>
 80086d4:	3301      	adds	r3, #1
 80086d6:	f8c9 3000 	str.w	r3, [r9]
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	0699      	lsls	r1, r3, #26
 80086de:	bf42      	ittt	mi
 80086e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80086e4:	3302      	addmi	r3, #2
 80086e6:	f8c9 3000 	strmi.w	r3, [r9]
 80086ea:	6825      	ldr	r5, [r4, #0]
 80086ec:	f015 0506 	ands.w	r5, r5, #6
 80086f0:	d107      	bne.n	8008702 <_printf_common+0x52>
 80086f2:	f104 0a19 	add.w	sl, r4, #25
 80086f6:	68e3      	ldr	r3, [r4, #12]
 80086f8:	f8d9 2000 	ldr.w	r2, [r9]
 80086fc:	1a9b      	subs	r3, r3, r2
 80086fe:	429d      	cmp	r5, r3
 8008700:	db2a      	blt.n	8008758 <_printf_common+0xa8>
 8008702:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008706:	6822      	ldr	r2, [r4, #0]
 8008708:	3300      	adds	r3, #0
 800870a:	bf18      	it	ne
 800870c:	2301      	movne	r3, #1
 800870e:	0692      	lsls	r2, r2, #26
 8008710:	d42f      	bmi.n	8008772 <_printf_common+0xc2>
 8008712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008716:	4639      	mov	r1, r7
 8008718:	4630      	mov	r0, r6
 800871a:	47c0      	blx	r8
 800871c:	3001      	adds	r0, #1
 800871e:	d022      	beq.n	8008766 <_printf_common+0xb6>
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	68e5      	ldr	r5, [r4, #12]
 8008724:	f003 0306 	and.w	r3, r3, #6
 8008728:	2b04      	cmp	r3, #4
 800872a:	bf18      	it	ne
 800872c:	2500      	movne	r5, #0
 800872e:	f8d9 2000 	ldr.w	r2, [r9]
 8008732:	f04f 0900 	mov.w	r9, #0
 8008736:	bf08      	it	eq
 8008738:	1aad      	subeq	r5, r5, r2
 800873a:	68a3      	ldr	r3, [r4, #8]
 800873c:	6922      	ldr	r2, [r4, #16]
 800873e:	bf08      	it	eq
 8008740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008744:	4293      	cmp	r3, r2
 8008746:	bfc4      	itt	gt
 8008748:	1a9b      	subgt	r3, r3, r2
 800874a:	18ed      	addgt	r5, r5, r3
 800874c:	341a      	adds	r4, #26
 800874e:	454d      	cmp	r5, r9
 8008750:	d11b      	bne.n	800878a <_printf_common+0xda>
 8008752:	2000      	movs	r0, #0
 8008754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008758:	2301      	movs	r3, #1
 800875a:	4652      	mov	r2, sl
 800875c:	4639      	mov	r1, r7
 800875e:	4630      	mov	r0, r6
 8008760:	47c0      	blx	r8
 8008762:	3001      	adds	r0, #1
 8008764:	d103      	bne.n	800876e <_printf_common+0xbe>
 8008766:	f04f 30ff 	mov.w	r0, #4294967295
 800876a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876e:	3501      	adds	r5, #1
 8008770:	e7c1      	b.n	80086f6 <_printf_common+0x46>
 8008772:	2030      	movs	r0, #48	; 0x30
 8008774:	18e1      	adds	r1, r4, r3
 8008776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008780:	4422      	add	r2, r4
 8008782:	3302      	adds	r3, #2
 8008784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008788:	e7c3      	b.n	8008712 <_printf_common+0x62>
 800878a:	2301      	movs	r3, #1
 800878c:	4622      	mov	r2, r4
 800878e:	4639      	mov	r1, r7
 8008790:	4630      	mov	r0, r6
 8008792:	47c0      	blx	r8
 8008794:	3001      	adds	r0, #1
 8008796:	d0e6      	beq.n	8008766 <_printf_common+0xb6>
 8008798:	f109 0901 	add.w	r9, r9, #1
 800879c:	e7d7      	b.n	800874e <_printf_common+0x9e>
	...

080087a0 <_printf_i>:
 80087a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087a4:	4617      	mov	r7, r2
 80087a6:	7e0a      	ldrb	r2, [r1, #24]
 80087a8:	b085      	sub	sp, #20
 80087aa:	2a6e      	cmp	r2, #110	; 0x6e
 80087ac:	4698      	mov	r8, r3
 80087ae:	4606      	mov	r6, r0
 80087b0:	460c      	mov	r4, r1
 80087b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087b4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80087b8:	f000 80bc 	beq.w	8008934 <_printf_i+0x194>
 80087bc:	d81a      	bhi.n	80087f4 <_printf_i+0x54>
 80087be:	2a63      	cmp	r2, #99	; 0x63
 80087c0:	d02e      	beq.n	8008820 <_printf_i+0x80>
 80087c2:	d80a      	bhi.n	80087da <_printf_i+0x3a>
 80087c4:	2a00      	cmp	r2, #0
 80087c6:	f000 80c8 	beq.w	800895a <_printf_i+0x1ba>
 80087ca:	2a58      	cmp	r2, #88	; 0x58
 80087cc:	f000 808a 	beq.w	80088e4 <_printf_i+0x144>
 80087d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087d4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80087d8:	e02a      	b.n	8008830 <_printf_i+0x90>
 80087da:	2a64      	cmp	r2, #100	; 0x64
 80087dc:	d001      	beq.n	80087e2 <_printf_i+0x42>
 80087de:	2a69      	cmp	r2, #105	; 0x69
 80087e0:	d1f6      	bne.n	80087d0 <_printf_i+0x30>
 80087e2:	6821      	ldr	r1, [r4, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80087ea:	d023      	beq.n	8008834 <_printf_i+0x94>
 80087ec:	1d11      	adds	r1, r2, #4
 80087ee:	6019      	str	r1, [r3, #0]
 80087f0:	6813      	ldr	r3, [r2, #0]
 80087f2:	e027      	b.n	8008844 <_printf_i+0xa4>
 80087f4:	2a73      	cmp	r2, #115	; 0x73
 80087f6:	f000 80b4 	beq.w	8008962 <_printf_i+0x1c2>
 80087fa:	d808      	bhi.n	800880e <_printf_i+0x6e>
 80087fc:	2a6f      	cmp	r2, #111	; 0x6f
 80087fe:	d02a      	beq.n	8008856 <_printf_i+0xb6>
 8008800:	2a70      	cmp	r2, #112	; 0x70
 8008802:	d1e5      	bne.n	80087d0 <_printf_i+0x30>
 8008804:	680a      	ldr	r2, [r1, #0]
 8008806:	f042 0220 	orr.w	r2, r2, #32
 800880a:	600a      	str	r2, [r1, #0]
 800880c:	e003      	b.n	8008816 <_printf_i+0x76>
 800880e:	2a75      	cmp	r2, #117	; 0x75
 8008810:	d021      	beq.n	8008856 <_printf_i+0xb6>
 8008812:	2a78      	cmp	r2, #120	; 0x78
 8008814:	d1dc      	bne.n	80087d0 <_printf_i+0x30>
 8008816:	2278      	movs	r2, #120	; 0x78
 8008818:	496f      	ldr	r1, [pc, #444]	; (80089d8 <_printf_i+0x238>)
 800881a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800881e:	e064      	b.n	80088ea <_printf_i+0x14a>
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8008826:	1d11      	adds	r1, r2, #4
 8008828:	6019      	str	r1, [r3, #0]
 800882a:	6813      	ldr	r3, [r2, #0]
 800882c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008830:	2301      	movs	r3, #1
 8008832:	e0a3      	b.n	800897c <_printf_i+0x1dc>
 8008834:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008838:	f102 0104 	add.w	r1, r2, #4
 800883c:	6019      	str	r1, [r3, #0]
 800883e:	d0d7      	beq.n	80087f0 <_printf_i+0x50>
 8008840:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008844:	2b00      	cmp	r3, #0
 8008846:	da03      	bge.n	8008850 <_printf_i+0xb0>
 8008848:	222d      	movs	r2, #45	; 0x2d
 800884a:	425b      	negs	r3, r3
 800884c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008850:	4962      	ldr	r1, [pc, #392]	; (80089dc <_printf_i+0x23c>)
 8008852:	220a      	movs	r2, #10
 8008854:	e017      	b.n	8008886 <_printf_i+0xe6>
 8008856:	6820      	ldr	r0, [r4, #0]
 8008858:	6819      	ldr	r1, [r3, #0]
 800885a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800885e:	d003      	beq.n	8008868 <_printf_i+0xc8>
 8008860:	1d08      	adds	r0, r1, #4
 8008862:	6018      	str	r0, [r3, #0]
 8008864:	680b      	ldr	r3, [r1, #0]
 8008866:	e006      	b.n	8008876 <_printf_i+0xd6>
 8008868:	f010 0f40 	tst.w	r0, #64	; 0x40
 800886c:	f101 0004 	add.w	r0, r1, #4
 8008870:	6018      	str	r0, [r3, #0]
 8008872:	d0f7      	beq.n	8008864 <_printf_i+0xc4>
 8008874:	880b      	ldrh	r3, [r1, #0]
 8008876:	2a6f      	cmp	r2, #111	; 0x6f
 8008878:	bf14      	ite	ne
 800887a:	220a      	movne	r2, #10
 800887c:	2208      	moveq	r2, #8
 800887e:	4957      	ldr	r1, [pc, #348]	; (80089dc <_printf_i+0x23c>)
 8008880:	2000      	movs	r0, #0
 8008882:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008886:	6865      	ldr	r5, [r4, #4]
 8008888:	2d00      	cmp	r5, #0
 800888a:	60a5      	str	r5, [r4, #8]
 800888c:	f2c0 809c 	blt.w	80089c8 <_printf_i+0x228>
 8008890:	6820      	ldr	r0, [r4, #0]
 8008892:	f020 0004 	bic.w	r0, r0, #4
 8008896:	6020      	str	r0, [r4, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d13f      	bne.n	800891c <_printf_i+0x17c>
 800889c:	2d00      	cmp	r5, #0
 800889e:	f040 8095 	bne.w	80089cc <_printf_i+0x22c>
 80088a2:	4675      	mov	r5, lr
 80088a4:	2a08      	cmp	r2, #8
 80088a6:	d10b      	bne.n	80088c0 <_printf_i+0x120>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	07da      	lsls	r2, r3, #31
 80088ac:	d508      	bpl.n	80088c0 <_printf_i+0x120>
 80088ae:	6923      	ldr	r3, [r4, #16]
 80088b0:	6862      	ldr	r2, [r4, #4]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	bfde      	ittt	le
 80088b6:	2330      	movle	r3, #48	; 0x30
 80088b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088c0:	ebae 0305 	sub.w	r3, lr, r5
 80088c4:	6123      	str	r3, [r4, #16]
 80088c6:	f8cd 8000 	str.w	r8, [sp]
 80088ca:	463b      	mov	r3, r7
 80088cc:	aa03      	add	r2, sp, #12
 80088ce:	4621      	mov	r1, r4
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff feed 	bl	80086b0 <_printf_common>
 80088d6:	3001      	adds	r0, #1
 80088d8:	d155      	bne.n	8008986 <_printf_i+0x1e6>
 80088da:	f04f 30ff 	mov.w	r0, #4294967295
 80088de:	b005      	add	sp, #20
 80088e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088e4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80088e8:	493c      	ldr	r1, [pc, #240]	; (80089dc <_printf_i+0x23c>)
 80088ea:	6822      	ldr	r2, [r4, #0]
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80088f2:	f100 0504 	add.w	r5, r0, #4
 80088f6:	601d      	str	r5, [r3, #0]
 80088f8:	d001      	beq.n	80088fe <_printf_i+0x15e>
 80088fa:	6803      	ldr	r3, [r0, #0]
 80088fc:	e002      	b.n	8008904 <_printf_i+0x164>
 80088fe:	0655      	lsls	r5, r2, #25
 8008900:	d5fb      	bpl.n	80088fa <_printf_i+0x15a>
 8008902:	8803      	ldrh	r3, [r0, #0]
 8008904:	07d0      	lsls	r0, r2, #31
 8008906:	bf44      	itt	mi
 8008908:	f042 0220 	orrmi.w	r2, r2, #32
 800890c:	6022      	strmi	r2, [r4, #0]
 800890e:	b91b      	cbnz	r3, 8008918 <_printf_i+0x178>
 8008910:	6822      	ldr	r2, [r4, #0]
 8008912:	f022 0220 	bic.w	r2, r2, #32
 8008916:	6022      	str	r2, [r4, #0]
 8008918:	2210      	movs	r2, #16
 800891a:	e7b1      	b.n	8008880 <_printf_i+0xe0>
 800891c:	4675      	mov	r5, lr
 800891e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008922:	fb02 3310 	mls	r3, r2, r0, r3
 8008926:	5ccb      	ldrb	r3, [r1, r3]
 8008928:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800892c:	4603      	mov	r3, r0
 800892e:	2800      	cmp	r0, #0
 8008930:	d1f5      	bne.n	800891e <_printf_i+0x17e>
 8008932:	e7b7      	b.n	80088a4 <_printf_i+0x104>
 8008934:	6808      	ldr	r0, [r1, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	f010 0f80 	tst.w	r0, #128	; 0x80
 800893c:	6949      	ldr	r1, [r1, #20]
 800893e:	d004      	beq.n	800894a <_printf_i+0x1aa>
 8008940:	1d10      	adds	r0, r2, #4
 8008942:	6018      	str	r0, [r3, #0]
 8008944:	6813      	ldr	r3, [r2, #0]
 8008946:	6019      	str	r1, [r3, #0]
 8008948:	e007      	b.n	800895a <_printf_i+0x1ba>
 800894a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800894e:	f102 0004 	add.w	r0, r2, #4
 8008952:	6018      	str	r0, [r3, #0]
 8008954:	6813      	ldr	r3, [r2, #0]
 8008956:	d0f6      	beq.n	8008946 <_printf_i+0x1a6>
 8008958:	8019      	strh	r1, [r3, #0]
 800895a:	2300      	movs	r3, #0
 800895c:	4675      	mov	r5, lr
 800895e:	6123      	str	r3, [r4, #16]
 8008960:	e7b1      	b.n	80088c6 <_printf_i+0x126>
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	1d11      	adds	r1, r2, #4
 8008966:	6019      	str	r1, [r3, #0]
 8008968:	6815      	ldr	r5, [r2, #0]
 800896a:	2100      	movs	r1, #0
 800896c:	6862      	ldr	r2, [r4, #4]
 800896e:	4628      	mov	r0, r5
 8008970:	f000 f84a 	bl	8008a08 <memchr>
 8008974:	b108      	cbz	r0, 800897a <_printf_i+0x1da>
 8008976:	1b40      	subs	r0, r0, r5
 8008978:	6060      	str	r0, [r4, #4]
 800897a:	6863      	ldr	r3, [r4, #4]
 800897c:	6123      	str	r3, [r4, #16]
 800897e:	2300      	movs	r3, #0
 8008980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008984:	e79f      	b.n	80088c6 <_printf_i+0x126>
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	462a      	mov	r2, r5
 800898a:	4639      	mov	r1, r7
 800898c:	4630      	mov	r0, r6
 800898e:	47c0      	blx	r8
 8008990:	3001      	adds	r0, #1
 8008992:	d0a2      	beq.n	80088da <_printf_i+0x13a>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	079b      	lsls	r3, r3, #30
 8008998:	d507      	bpl.n	80089aa <_printf_i+0x20a>
 800899a:	2500      	movs	r5, #0
 800899c:	f104 0919 	add.w	r9, r4, #25
 80089a0:	68e3      	ldr	r3, [r4, #12]
 80089a2:	9a03      	ldr	r2, [sp, #12]
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	429d      	cmp	r5, r3
 80089a8:	db05      	blt.n	80089b6 <_printf_i+0x216>
 80089aa:	68e0      	ldr	r0, [r4, #12]
 80089ac:	9b03      	ldr	r3, [sp, #12]
 80089ae:	4298      	cmp	r0, r3
 80089b0:	bfb8      	it	lt
 80089b2:	4618      	movlt	r0, r3
 80089b4:	e793      	b.n	80088de <_printf_i+0x13e>
 80089b6:	2301      	movs	r3, #1
 80089b8:	464a      	mov	r2, r9
 80089ba:	4639      	mov	r1, r7
 80089bc:	4630      	mov	r0, r6
 80089be:	47c0      	blx	r8
 80089c0:	3001      	adds	r0, #1
 80089c2:	d08a      	beq.n	80088da <_printf_i+0x13a>
 80089c4:	3501      	adds	r5, #1
 80089c6:	e7eb      	b.n	80089a0 <_printf_i+0x200>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1a7      	bne.n	800891c <_printf_i+0x17c>
 80089cc:	780b      	ldrb	r3, [r1, #0]
 80089ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089d6:	e765      	b.n	80088a4 <_printf_i+0x104>
 80089d8:	0800b66e 	.word	0x0800b66e
 80089dc:	0800b65d 	.word	0x0800b65d

080089e0 <_sbrk_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	2300      	movs	r3, #0
 80089e4:	4c05      	ldr	r4, [pc, #20]	; (80089fc <_sbrk_r+0x1c>)
 80089e6:	4605      	mov	r5, r0
 80089e8:	4608      	mov	r0, r1
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	f002 f9da 	bl	800ada4 <_sbrk>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_sbrk_r+0x1a>
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_sbrk_r+0x1a>
 80089f8:	602b      	str	r3, [r5, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	20001128 	.word	0x20001128

08008a00 <nanf>:
 8008a00:	4800      	ldr	r0, [pc, #0]	; (8008a04 <nanf+0x4>)
 8008a02:	4770      	bx	lr
 8008a04:	7fc00000 	.word	0x7fc00000

08008a08 <memchr>:
 8008a08:	b510      	push	{r4, lr}
 8008a0a:	b2c9      	uxtb	r1, r1
 8008a0c:	4402      	add	r2, r0
 8008a0e:	4290      	cmp	r0, r2
 8008a10:	4603      	mov	r3, r0
 8008a12:	d101      	bne.n	8008a18 <memchr+0x10>
 8008a14:	2000      	movs	r0, #0
 8008a16:	bd10      	pop	{r4, pc}
 8008a18:	781c      	ldrb	r4, [r3, #0]
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	428c      	cmp	r4, r1
 8008a1e:	d1f6      	bne.n	8008a0e <memchr+0x6>
 8008a20:	4618      	mov	r0, r3
 8008a22:	bd10      	pop	{r4, pc}

08008a24 <memmove>:
 8008a24:	4288      	cmp	r0, r1
 8008a26:	b510      	push	{r4, lr}
 8008a28:	eb01 0302 	add.w	r3, r1, r2
 8008a2c:	d803      	bhi.n	8008a36 <memmove+0x12>
 8008a2e:	1e42      	subs	r2, r0, #1
 8008a30:	4299      	cmp	r1, r3
 8008a32:	d10c      	bne.n	8008a4e <memmove+0x2a>
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	4298      	cmp	r0, r3
 8008a38:	d2f9      	bcs.n	8008a2e <memmove+0xa>
 8008a3a:	1881      	adds	r1, r0, r2
 8008a3c:	1ad2      	subs	r2, r2, r3
 8008a3e:	42d3      	cmn	r3, r2
 8008a40:	d100      	bne.n	8008a44 <memmove+0x20>
 8008a42:	bd10      	pop	{r4, pc}
 8008a44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008a4c:	e7f7      	b.n	8008a3e <memmove+0x1a>
 8008a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a52:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008a56:	e7eb      	b.n	8008a30 <memmove+0xc>

08008a58 <__malloc_lock>:
 8008a58:	4770      	bx	lr

08008a5a <__malloc_unlock>:
 8008a5a:	4770      	bx	lr

08008a5c <_realloc_r>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	4607      	mov	r7, r0
 8008a60:	4614      	mov	r4, r2
 8008a62:	460e      	mov	r6, r1
 8008a64:	b921      	cbnz	r1, 8008a70 <_realloc_r+0x14>
 8008a66:	4611      	mov	r1, r2
 8008a68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a6c:	f7ff bc72 	b.w	8008354 <_malloc_r>
 8008a70:	b922      	cbnz	r2, 8008a7c <_realloc_r+0x20>
 8008a72:	f7ff fc23 	bl	80082bc <_free_r>
 8008a76:	4625      	mov	r5, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a7c:	f000 f814 	bl	8008aa8 <_malloc_usable_size_r>
 8008a80:	4284      	cmp	r4, r0
 8008a82:	d90f      	bls.n	8008aa4 <_realloc_r+0x48>
 8008a84:	4621      	mov	r1, r4
 8008a86:	4638      	mov	r0, r7
 8008a88:	f7ff fc64 	bl	8008354 <_malloc_r>
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d0f2      	beq.n	8008a78 <_realloc_r+0x1c>
 8008a92:	4631      	mov	r1, r6
 8008a94:	4622      	mov	r2, r4
 8008a96:	f7ff fbd1 	bl	800823c <memcpy>
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	f7ff fc0d 	bl	80082bc <_free_r>
 8008aa2:	e7e9      	b.n	8008a78 <_realloc_r+0x1c>
 8008aa4:	4635      	mov	r5, r6
 8008aa6:	e7e7      	b.n	8008a78 <_realloc_r+0x1c>

08008aa8 <_malloc_usable_size_r>:
 8008aa8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f1a0 0004 	sub.w	r0, r0, #4
 8008ab2:	bfbc      	itt	lt
 8008ab4:	580b      	ldrlt	r3, [r1, r0]
 8008ab6:	18c0      	addlt	r0, r0, r3
 8008ab8:	4770      	bx	lr
 8008aba:	0000      	movs	r0, r0
 8008abc:	0000      	movs	r0, r0
	...

08008ac0 <floor>:
 8008ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008ac8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008acc:	2e13      	cmp	r6, #19
 8008ace:	4607      	mov	r7, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	dc35      	bgt.n	8008b44 <floor+0x84>
 8008ad8:	2e00      	cmp	r6, #0
 8008ada:	da16      	bge.n	8008b0a <floor+0x4a>
 8008adc:	a336      	add	r3, pc, #216	; (adr r3, 8008bb8 <floor+0xf8>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	f7f7 fb43 	bl	800016c <__adddf3>
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f7f7 ff81 	bl	80009f0 <__aeabi_dcmpgt>
 8008aee:	b148      	cbz	r0, 8008b04 <floor+0x44>
 8008af0:	2c00      	cmp	r4, #0
 8008af2:	da5c      	bge.n	8008bae <floor+0xee>
 8008af4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008af8:	433b      	orrs	r3, r7
 8008afa:	4b31      	ldr	r3, [pc, #196]	; (8008bc0 <floor+0x100>)
 8008afc:	f04f 0500 	mov.w	r5, #0
 8008b00:	bf18      	it	ne
 8008b02:	461c      	movne	r4, r3
 8008b04:	4623      	mov	r3, r4
 8008b06:	462f      	mov	r7, r5
 8008b08:	e027      	b.n	8008b5a <floor+0x9a>
 8008b0a:	4a2e      	ldr	r2, [pc, #184]	; (8008bc4 <floor+0x104>)
 8008b0c:	fa42 f806 	asr.w	r8, r2, r6
 8008b10:	ea01 0208 	and.w	r2, r1, r8
 8008b14:	4302      	orrs	r2, r0
 8008b16:	d020      	beq.n	8008b5a <floor+0x9a>
 8008b18:	a327      	add	r3, pc, #156	; (adr r3, 8008bb8 <floor+0xf8>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f7f7 fb25 	bl	800016c <__adddf3>
 8008b22:	2200      	movs	r2, #0
 8008b24:	2300      	movs	r3, #0
 8008b26:	f7f7 ff63 	bl	80009f0 <__aeabi_dcmpgt>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d0ea      	beq.n	8008b04 <floor+0x44>
 8008b2e:	2c00      	cmp	r4, #0
 8008b30:	bfbe      	ittt	lt
 8008b32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008b36:	fa43 f606 	asrlt.w	r6, r3, r6
 8008b3a:	19a4      	addlt	r4, r4, r6
 8008b3c:	ea24 0408 	bic.w	r4, r4, r8
 8008b40:	2500      	movs	r5, #0
 8008b42:	e7df      	b.n	8008b04 <floor+0x44>
 8008b44:	2e33      	cmp	r6, #51	; 0x33
 8008b46:	dd0c      	ble.n	8008b62 <floor+0xa2>
 8008b48:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008b4c:	d105      	bne.n	8008b5a <floor+0x9a>
 8008b4e:	460b      	mov	r3, r1
 8008b50:	4602      	mov	r2, r0
 8008b52:	f7f7 fb0b 	bl	800016c <__adddf3>
 8008b56:	4607      	mov	r7, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b62:	f04f 32ff 	mov.w	r2, #4294967295
 8008b66:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008b6a:	fa22 f808 	lsr.w	r8, r2, r8
 8008b6e:	ea10 0f08 	tst.w	r0, r8
 8008b72:	d0f2      	beq.n	8008b5a <floor+0x9a>
 8008b74:	a310      	add	r3, pc, #64	; (adr r3, 8008bb8 <floor+0xf8>)
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f7f7 faf7 	bl	800016c <__adddf3>
 8008b7e:	2200      	movs	r2, #0
 8008b80:	2300      	movs	r3, #0
 8008b82:	f7f7 ff35 	bl	80009f0 <__aeabi_dcmpgt>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d0bc      	beq.n	8008b04 <floor+0x44>
 8008b8a:	2c00      	cmp	r4, #0
 8008b8c:	da02      	bge.n	8008b94 <floor+0xd4>
 8008b8e:	2e14      	cmp	r6, #20
 8008b90:	d103      	bne.n	8008b9a <floor+0xda>
 8008b92:	3401      	adds	r4, #1
 8008b94:	ea25 0508 	bic.w	r5, r5, r8
 8008b98:	e7b4      	b.n	8008b04 <floor+0x44>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008ba0:	fa03 f606 	lsl.w	r6, r3, r6
 8008ba4:	4435      	add	r5, r6
 8008ba6:	42af      	cmp	r7, r5
 8008ba8:	bf88      	it	hi
 8008baa:	18e4      	addhi	r4, r4, r3
 8008bac:	e7f2      	b.n	8008b94 <floor+0xd4>
 8008bae:	2500      	movs	r5, #0
 8008bb0:	462c      	mov	r4, r5
 8008bb2:	e7a7      	b.n	8008b04 <floor+0x44>
 8008bb4:	f3af 8000 	nop.w
 8008bb8:	8800759c 	.word	0x8800759c
 8008bbc:	7e37e43c 	.word	0x7e37e43c
 8008bc0:	bff00000 	.word	0xbff00000
 8008bc4:	000fffff 	.word	0x000fffff

08008bc8 <lrintf>:
 8008bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bca:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008bce:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 8008bd2:	291e      	cmp	r1, #30
 8008bd4:	dc2b      	bgt.n	8008c2e <lrintf+0x66>
 8008bd6:	1c4c      	adds	r4, r1, #1
 8008bd8:	da02      	bge.n	8008be0 <lrintf+0x18>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	b003      	add	sp, #12
 8008bde:	bd30      	pop	{r4, r5, pc}
 8008be0:	2916      	cmp	r1, #22
 8008be2:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 8008be6:	dd09      	ble.n	8008bfc <lrintf+0x34>
 8008be8:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8008bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008bf0:	3a96      	subs	r2, #150	; 0x96
 8008bf2:	4090      	lsls	r0, r2
 8008bf4:	2c00      	cmp	r4, #0
 8008bf6:	d0f1      	beq.n	8008bdc <lrintf+0x14>
 8008bf8:	4240      	negs	r0, r0
 8008bfa:	e7ef      	b.n	8008bdc <lrintf+0x14>
 8008bfc:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <lrintf+0x6c>)
 8008bfe:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8008c02:	4629      	mov	r1, r5
 8008c04:	f7f7 ff6a 	bl	8000adc <__addsf3>
 8008c08:	9001      	str	r0, [sp, #4]
 8008c0a:	9801      	ldr	r0, [sp, #4]
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f7f7 ff63 	bl	8000ad8 <__aeabi_fsub>
 8008c12:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8008c16:	d0e0      	beq.n	8008bda <lrintf+0x12>
 8008c18:	f3c0 0316 	ubfx	r3, r0, #0, #23
 8008c1c:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 8008c20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c24:	f1c0 0096 	rsb	r0, r0, #150	; 0x96
 8008c28:	fa23 f000 	lsr.w	r0, r3, r0
 8008c2c:	e7e2      	b.n	8008bf4 <lrintf+0x2c>
 8008c2e:	f7f8 fa39 	bl	80010a4 <__aeabi_f2iz>
 8008c32:	e7d3      	b.n	8008bdc <lrintf+0x14>
 8008c34:	0800b680 	.word	0x0800b680

08008c38 <pow>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	b08f      	sub	sp, #60	; 0x3c
 8008c3e:	461d      	mov	r5, r3
 8008c40:	4680      	mov	r8, r0
 8008c42:	4689      	mov	r9, r1
 8008c44:	4614      	mov	r4, r2
 8008c46:	f000 fb17 	bl	8009278 <__ieee754_pow>
 8008c4a:	4fa5      	ldr	r7, [pc, #660]	; (8008ee0 <pow+0x2a8>)
 8008c4c:	e9cd 0100 	strd	r0, r1, [sp]
 8008c50:	f997 3000 	ldrsb.w	r3, [r7]
 8008c54:	463e      	mov	r6, r7
 8008c56:	9302      	str	r3, [sp, #8]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	d05f      	beq.n	8008d1c <pow+0xe4>
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	462b      	mov	r3, r5
 8008c60:	4620      	mov	r0, r4
 8008c62:	4629      	mov	r1, r5
 8008c64:	f7f7 fece 	bl	8000a04 <__aeabi_dcmpun>
 8008c68:	4682      	mov	sl, r0
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d156      	bne.n	8008d1c <pow+0xe4>
 8008c6e:	4642      	mov	r2, r8
 8008c70:	464b      	mov	r3, r9
 8008c72:	4640      	mov	r0, r8
 8008c74:	4649      	mov	r1, r9
 8008c76:	f7f7 fec5 	bl	8000a04 <__aeabi_dcmpun>
 8008c7a:	9003      	str	r0, [sp, #12]
 8008c7c:	b1e8      	cbz	r0, 8008cba <pow+0x82>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2300      	movs	r3, #0
 8008c82:	4620      	mov	r0, r4
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7f7 fe8b 	bl	80009a0 <__aeabi_dcmpeq>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d046      	beq.n	8008d1c <pow+0xe4>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	2200      	movs	r2, #0
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	4b93      	ldr	r3, [pc, #588]	; (8008ee4 <pow+0x2ac>)
 8008c96:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008c9a:	9305      	str	r3, [sp, #20]
 8008c9c:	4b92      	ldr	r3, [pc, #584]	; (8008ee8 <pow+0x2b0>)
 8008c9e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008ca2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008ca6:	9b02      	ldr	r3, [sp, #8]
 8008ca8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d031      	beq.n	8008d14 <pow+0xdc>
 8008cb0:	a804      	add	r0, sp, #16
 8008cb2:	f001 fdfa 	bl	800a8aa <matherr>
 8008cb6:	bb38      	cbnz	r0, 8008d08 <pow+0xd0>
 8008cb8:	e058      	b.n	8008d6c <pow+0x134>
 8008cba:	f04f 0a00 	mov.w	sl, #0
 8008cbe:	f04f 0b00 	mov.w	fp, #0
 8008cc2:	4652      	mov	r2, sl
 8008cc4:	465b      	mov	r3, fp
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	4649      	mov	r1, r9
 8008cca:	f7f7 fe69 	bl	80009a0 <__aeabi_dcmpeq>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d051      	beq.n	8008d76 <pow+0x13e>
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	465b      	mov	r3, fp
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	4629      	mov	r1, r5
 8008cda:	f7f7 fe61 	bl	80009a0 <__aeabi_dcmpeq>
 8008cde:	4606      	mov	r6, r0
 8008ce0:	b308      	cbz	r0, 8008d26 <pow+0xee>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	9304      	str	r3, [sp, #16]
 8008ce6:	4b7f      	ldr	r3, [pc, #508]	; (8008ee4 <pow+0x2ac>)
 8008ce8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008cec:	9305      	str	r3, [sp, #20]
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf6:	9b02      	ldr	r3, [sp, #8]
 8008cf8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0d7      	beq.n	8008cb0 <pow+0x78>
 8008d00:	2200      	movs	r2, #0
 8008d02:	4b79      	ldr	r3, [pc, #484]	; (8008ee8 <pow+0x2b0>)
 8008d04:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d0a:	b11b      	cbz	r3, 8008d14 <pow+0xdc>
 8008d0c:	f002 f844 	bl	800ad98 <__errno>
 8008d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d12:	6003      	str	r3, [r0, #0]
 8008d14:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8008d18:	e88d 0018 	stmia.w	sp, {r3, r4}
 8008d1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d20:	b00f      	add	sp, #60	; 0x3c
 8008d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f001 fdb8 	bl	800a89e <finite>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d0f4      	beq.n	8008d1c <pow+0xe4>
 8008d32:	4652      	mov	r2, sl
 8008d34:	465b      	mov	r3, fp
 8008d36:	4620      	mov	r0, r4
 8008d38:	4629      	mov	r1, r5
 8008d3a:	f7f7 fe3b 	bl	80009b4 <__aeabi_dcmplt>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d0ec      	beq.n	8008d1c <pow+0xe4>
 8008d42:	2301      	movs	r3, #1
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	4b67      	ldr	r3, [pc, #412]	; (8008ee4 <pow+0x2ac>)
 8008d48:	960c      	str	r6, [sp, #48]	; 0x30
 8008d4a:	9305      	str	r3, [sp, #20]
 8008d4c:	f997 3000 	ldrsb.w	r3, [r7]
 8008d50:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008d54:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008d58:	b913      	cbnz	r3, 8008d60 <pow+0x128>
 8008d5a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008d5e:	e7a7      	b.n	8008cb0 <pow+0x78>
 8008d60:	2000      	movs	r0, #0
 8008d62:	4962      	ldr	r1, [pc, #392]	; (8008eec <pow+0x2b4>)
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d6a:	d1a1      	bne.n	8008cb0 <pow+0x78>
 8008d6c:	f002 f814 	bl	800ad98 <__errno>
 8008d70:	2321      	movs	r3, #33	; 0x21
 8008d72:	6003      	str	r3, [r0, #0]
 8008d74:	e7c8      	b.n	8008d08 <pow+0xd0>
 8008d76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d7a:	f001 fd90 	bl	800a89e <finite>
 8008d7e:	9002      	str	r0, [sp, #8]
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d17f      	bne.n	8008e84 <pow+0x24c>
 8008d84:	4640      	mov	r0, r8
 8008d86:	4649      	mov	r1, r9
 8008d88:	f001 fd89 	bl	800a89e <finite>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d079      	beq.n	8008e84 <pow+0x24c>
 8008d90:	4620      	mov	r0, r4
 8008d92:	4629      	mov	r1, r5
 8008d94:	f001 fd83 	bl	800a89e <finite>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d073      	beq.n	8008e84 <pow+0x24c>
 8008d9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f7f7 fe2e 	bl	8000a04 <__aeabi_dcmpun>
 8008da8:	f997 7000 	ldrsb.w	r7, [r7]
 8008dac:	4b4d      	ldr	r3, [pc, #308]	; (8008ee4 <pow+0x2ac>)
 8008dae:	b1a0      	cbz	r0, 8008dda <pow+0x1a2>
 8008db0:	2201      	movs	r2, #1
 8008db2:	9305      	str	r3, [sp, #20]
 8008db4:	9b02      	ldr	r3, [sp, #8]
 8008db6:	9204      	str	r2, [sp, #16]
 8008db8:	930c      	str	r3, [sp, #48]	; 0x30
 8008dba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008dbe:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008dc2:	2f00      	cmp	r7, #0
 8008dc4:	d0c9      	beq.n	8008d5a <pow+0x122>
 8008dc6:	4652      	mov	r2, sl
 8008dc8:	465b      	mov	r3, fp
 8008dca:	4650      	mov	r0, sl
 8008dcc:	4659      	mov	r1, fp
 8008dce:	f7f7 fca9 	bl	8000724 <__aeabi_ddiv>
 8008dd2:	2f02      	cmp	r7, #2
 8008dd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008dd8:	e7c7      	b.n	8008d6a <pow+0x132>
 8008dda:	2203      	movs	r2, #3
 8008ddc:	9305      	str	r3, [sp, #20]
 8008dde:	9204      	str	r2, [sp, #16]
 8008de0:	900c      	str	r0, [sp, #48]	; 0x30
 8008de2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008de6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008dea:	bb57      	cbnz	r7, 8008e42 <pow+0x20a>
 8008dec:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008df0:	4b3f      	ldr	r3, [pc, #252]	; (8008ef0 <pow+0x2b8>)
 8008df2:	4640      	mov	r0, r8
 8008df4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008df8:	4649      	mov	r1, r9
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	465b      	mov	r3, fp
 8008dfe:	f7f7 fdd9 	bl	80009b4 <__aeabi_dcmplt>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d064      	beq.n	8008ed0 <pow+0x298>
 8008e06:	2200      	movs	r2, #0
 8008e08:	4b3a      	ldr	r3, [pc, #232]	; (8008ef4 <pow+0x2bc>)
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7f7 fb5f 	bl	80004d0 <__aeabi_dmul>
 8008e12:	4604      	mov	r4, r0
 8008e14:	460d      	mov	r5, r1
 8008e16:	f001 fd51 	bl	800a8bc <rint>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 fdbd 	bl	80009a0 <__aeabi_dcmpeq>
 8008e26:	b920      	cbnz	r0, 8008e32 <pow+0x1fa>
 8008e28:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008e2c:	4b32      	ldr	r3, [pc, #200]	; (8008ef8 <pow+0x2c0>)
 8008e2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008e32:	f996 3000 	ldrsb.w	r3, [r6]
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d14a      	bne.n	8008ed0 <pow+0x298>
 8008e3a:	f001 ffad 	bl	800ad98 <__errno>
 8008e3e:	2322      	movs	r3, #34	; 0x22
 8008e40:	e797      	b.n	8008d72 <pow+0x13a>
 8008e42:	2200      	movs	r2, #0
 8008e44:	4b2d      	ldr	r3, [pc, #180]	; (8008efc <pow+0x2c4>)
 8008e46:	4640      	mov	r0, r8
 8008e48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	4652      	mov	r2, sl
 8008e50:	465b      	mov	r3, fp
 8008e52:	f7f7 fdaf 	bl	80009b4 <__aeabi_dcmplt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d0eb      	beq.n	8008e32 <pow+0x1fa>
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	4b25      	ldr	r3, [pc, #148]	; (8008ef4 <pow+0x2bc>)
 8008e5e:	4620      	mov	r0, r4
 8008e60:	4629      	mov	r1, r5
 8008e62:	f7f7 fb35 	bl	80004d0 <__aeabi_dmul>
 8008e66:	4604      	mov	r4, r0
 8008e68:	460d      	mov	r5, r1
 8008e6a:	f001 fd27 	bl	800a8bc <rint>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	4620      	mov	r0, r4
 8008e74:	4629      	mov	r1, r5
 8008e76:	f7f7 fd93 	bl	80009a0 <__aeabi_dcmpeq>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d1d9      	bne.n	8008e32 <pow+0x1fa>
 8008e7e:	2200      	movs	r2, #0
 8008e80:	4b1a      	ldr	r3, [pc, #104]	; (8008eec <pow+0x2b4>)
 8008e82:	e7d4      	b.n	8008e2e <pow+0x1f6>
 8008e84:	2200      	movs	r2, #0
 8008e86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f7f7 fd88 	bl	80009a0 <__aeabi_dcmpeq>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f43f af43 	beq.w	8008d1c <pow+0xe4>
 8008e96:	4640      	mov	r0, r8
 8008e98:	4649      	mov	r1, r9
 8008e9a:	f001 fd00 	bl	800a89e <finite>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	f43f af3c 	beq.w	8008d1c <pow+0xe4>
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	f001 fcf9 	bl	800a89e <finite>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	f43f af35 	beq.w	8008d1c <pow+0xe4>
 8008eb2:	2304      	movs	r3, #4
 8008eb4:	9304      	str	r3, [sp, #16]
 8008eb6:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <pow+0x2ac>)
 8008eb8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008ebc:	9305      	str	r3, [sp, #20]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2400      	movs	r4, #0
 8008ec2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008eca:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8008ece:	e7b0      	b.n	8008e32 <pow+0x1fa>
 8008ed0:	a804      	add	r0, sp, #16
 8008ed2:	f001 fcea 	bl	800a8aa <matherr>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f47f af16 	bne.w	8008d08 <pow+0xd0>
 8008edc:	e7ad      	b.n	8008e3a <pow+0x202>
 8008ede:	bf00      	nop
 8008ee0:	20000478 	.word	0x20000478
 8008ee4:	0800b688 	.word	0x0800b688
 8008ee8:	3ff00000 	.word	0x3ff00000
 8008eec:	fff00000 	.word	0xfff00000
 8008ef0:	47efffff 	.word	0x47efffff
 8008ef4:	3fe00000 	.word	0x3fe00000
 8008ef8:	c7efffff 	.word	0xc7efffff
 8008efc:	7ff00000 	.word	0x7ff00000

08008f00 <asinf>:
 8008f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f02:	b08b      	sub	sp, #44	; 0x2c
 8008f04:	4604      	mov	r4, r0
 8008f06:	f000 ff55 	bl	8009db4 <__ieee754_asinf>
 8008f0a:	4e21      	ldr	r6, [pc, #132]	; (8008f90 <asinf+0x90>)
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	f996 3000 	ldrsb.w	r3, [r6]
 8008f12:	3301      	adds	r3, #1
 8008f14:	d038      	beq.n	8008f88 <asinf+0x88>
 8008f16:	4621      	mov	r1, r4
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f7f8 f8ad 	bl	8001078 <__aeabi_fcmpun>
 8008f1e:	4607      	mov	r7, r0
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d131      	bne.n	8008f88 <asinf+0x88>
 8008f24:	4620      	mov	r0, r4
 8008f26:	f001 fed1 	bl	800accc <fabsf>
 8008f2a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008f2e:	f7f8 f899 	bl	8001064 <__aeabi_fcmpgt>
 8008f32:	b348      	cbz	r0, 8008f88 <asinf+0x88>
 8008f34:	2301      	movs	r3, #1
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	4b16      	ldr	r3, [pc, #88]	; (8008f94 <asinf+0x94>)
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	9708      	str	r7, [sp, #32]
 8008f40:	f7f7 fa72 	bl	8000428 <__aeabi_f2d>
 8008f44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f4c:	4812      	ldr	r0, [pc, #72]	; (8008f98 <asinf+0x98>)
 8008f4e:	f001 fcaf 	bl	800a8b0 <nan>
 8008f52:	f996 3000 	ldrsb.w	r3, [r6]
 8008f56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d104      	bne.n	8008f68 <asinf+0x68>
 8008f5e:	f001 ff1b 	bl	800ad98 <__errno>
 8008f62:	2321      	movs	r3, #33	; 0x21
 8008f64:	6003      	str	r3, [r0, #0]
 8008f66:	e004      	b.n	8008f72 <asinf+0x72>
 8008f68:	4668      	mov	r0, sp
 8008f6a:	f001 fc9e 	bl	800a8aa <matherr>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d0f5      	beq.n	8008f5e <asinf+0x5e>
 8008f72:	9b08      	ldr	r3, [sp, #32]
 8008f74:	b11b      	cbz	r3, 8008f7e <asinf+0x7e>
 8008f76:	f001 ff0f 	bl	800ad98 <__errno>
 8008f7a:	9b08      	ldr	r3, [sp, #32]
 8008f7c:	6003      	str	r3, [r0, #0]
 8008f7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f82:	f7f7 fd55 	bl	8000a30 <__aeabi_d2f>
 8008f86:	4605      	mov	r5, r0
 8008f88:	4628      	mov	r0, r5
 8008f8a:	b00b      	add	sp, #44	; 0x2c
 8008f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000478 	.word	0x20000478
 8008f94:	0800b68c 	.word	0x0800b68c
 8008f98:	0800b56a 	.word	0x0800b56a

08008f9c <atan2f>:
 8008f9c:	f001 b84e 	b.w	800a03c <__ieee754_atan2f>

08008fa0 <powf>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	b08b      	sub	sp, #44	; 0x2c
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	460c      	mov	r4, r1
 8008faa:	f001 f8d7 	bl	800a15c <__ieee754_powf>
 8008fae:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8009274 <powf+0x2d4>
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	f998 9000 	ldrsb.w	r9, [r8]
 8008fb8:	4647      	mov	r7, r8
 8008fba:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008fbe:	d060      	beq.n	8009082 <powf+0xe2>
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7f8 f858 	bl	8001078 <__aeabi_fcmpun>
 8008fc8:	4683      	mov	fp, r0
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d159      	bne.n	8009082 <powf+0xe2>
 8008fce:	4629      	mov	r1, r5
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f7f8 f851 	bl	8001078 <__aeabi_fcmpun>
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	4682      	mov	sl, r0
 8008fda:	b300      	cbz	r0, 800901e <powf+0x7e>
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f7f8 f819 	bl	8001014 <__aeabi_fcmpeq>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d04d      	beq.n	8009082 <powf+0xe2>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	4b9c      	ldr	r3, [pc, #624]	; (800925c <powf+0x2bc>)
 8008fec:	4628      	mov	r0, r5
 8008fee:	9301      	str	r3, [sp, #4]
 8008ff0:	f8cd b020 	str.w	fp, [sp, #32]
 8008ff4:	f7f7 fa18 	bl	8000428 <__aeabi_f2d>
 8008ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f7f7 fa13 	bl	8000428 <__aeabi_f2d>
 8009002:	2200      	movs	r2, #0
 8009004:	4b96      	ldr	r3, [pc, #600]	; (8009260 <powf+0x2c0>)
 8009006:	f1b9 0f02 	cmp.w	r9, #2
 800900a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800900e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009012:	d031      	beq.n	8009078 <powf+0xd8>
 8009014:	4668      	mov	r0, sp
 8009016:	f001 fc48 	bl	800a8aa <matherr>
 800901a:	bb38      	cbnz	r0, 800906c <powf+0xcc>
 800901c:	e05d      	b.n	80090da <powf+0x13a>
 800901e:	4628      	mov	r0, r5
 8009020:	f7f7 fff8 	bl	8001014 <__aeabi_fcmpeq>
 8009024:	2800      	cmp	r0, #0
 8009026:	d05d      	beq.n	80090e4 <powf+0x144>
 8009028:	2100      	movs	r1, #0
 800902a:	4620      	mov	r0, r4
 800902c:	f7f7 fff2 	bl	8001014 <__aeabi_fcmpeq>
 8009030:	4607      	mov	r7, r0
 8009032:	2800      	cmp	r0, #0
 8009034:	d029      	beq.n	800908a <powf+0xea>
 8009036:	2301      	movs	r3, #1
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	4b88      	ldr	r3, [pc, #544]	; (800925c <powf+0x2bc>)
 800903c:	4628      	mov	r0, r5
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	f8cd a020 	str.w	sl, [sp, #32]
 8009044:	f7f7 f9f0 	bl	8000428 <__aeabi_f2d>
 8009048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800904c:	4620      	mov	r0, r4
 800904e:	f7f7 f9eb 	bl	8000428 <__aeabi_f2d>
 8009052:	2200      	movs	r2, #0
 8009054:	2300      	movs	r3, #0
 8009056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800905a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800905e:	f1b9 0f00 	cmp.w	r9, #0
 8009062:	d0d7      	beq.n	8009014 <powf+0x74>
 8009064:	2200      	movs	r2, #0
 8009066:	4b7e      	ldr	r3, [pc, #504]	; (8009260 <powf+0x2c0>)
 8009068:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800906c:	9b08      	ldr	r3, [sp, #32]
 800906e:	b11b      	cbz	r3, 8009078 <powf+0xd8>
 8009070:	f001 fe92 	bl	800ad98 <__errno>
 8009074:	9b08      	ldr	r3, [sp, #32]
 8009076:	6003      	str	r3, [r0, #0]
 8009078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800907c:	f7f7 fcd8 	bl	8000a30 <__aeabi_d2f>
 8009080:	4606      	mov	r6, r0
 8009082:	4630      	mov	r0, r6
 8009084:	b00b      	add	sp, #44	; 0x2c
 8009086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908a:	4620      	mov	r0, r4
 800908c:	f001 fe21 	bl	800acd2 <finitef>
 8009090:	2800      	cmp	r0, #0
 8009092:	d0f6      	beq.n	8009082 <powf+0xe2>
 8009094:	2100      	movs	r1, #0
 8009096:	4620      	mov	r0, r4
 8009098:	f7f7 ffc6 	bl	8001028 <__aeabi_fcmplt>
 800909c:	2800      	cmp	r0, #0
 800909e:	d0f0      	beq.n	8009082 <powf+0xe2>
 80090a0:	2301      	movs	r3, #1
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	4b6d      	ldr	r3, [pc, #436]	; (800925c <powf+0x2bc>)
 80090a6:	4628      	mov	r0, r5
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	9708      	str	r7, [sp, #32]
 80090ac:	f7f7 f9bc 	bl	8000428 <__aeabi_f2d>
 80090b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090b4:	4620      	mov	r0, r4
 80090b6:	f7f7 f9b7 	bl	8000428 <__aeabi_f2d>
 80090ba:	f998 3000 	ldrsb.w	r3, [r8]
 80090be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090c2:	b923      	cbnz	r3, 80090ce <powf+0x12e>
 80090c4:	2200      	movs	r2, #0
 80090c6:	2300      	movs	r3, #0
 80090c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80090cc:	e7a2      	b.n	8009014 <powf+0x74>
 80090ce:	2000      	movs	r0, #0
 80090d0:	4964      	ldr	r1, [pc, #400]	; (8009264 <powf+0x2c4>)
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090d8:	d19c      	bne.n	8009014 <powf+0x74>
 80090da:	f001 fe5d 	bl	800ad98 <__errno>
 80090de:	2321      	movs	r3, #33	; 0x21
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	e7c3      	b.n	800906c <powf+0xcc>
 80090e4:	4630      	mov	r0, r6
 80090e6:	f001 fdf4 	bl	800acd2 <finitef>
 80090ea:	4680      	mov	r8, r0
 80090ec:	2800      	cmp	r0, #0
 80090ee:	f040 8087 	bne.w	8009200 <powf+0x260>
 80090f2:	4628      	mov	r0, r5
 80090f4:	f001 fded 	bl	800acd2 <finitef>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	f000 8081 	beq.w	8009200 <powf+0x260>
 80090fe:	4620      	mov	r0, r4
 8009100:	f001 fde7 	bl	800acd2 <finitef>
 8009104:	2800      	cmp	r0, #0
 8009106:	d07b      	beq.n	8009200 <powf+0x260>
 8009108:	4631      	mov	r1, r6
 800910a:	4630      	mov	r0, r6
 800910c:	f7f7 ffb4 	bl	8001078 <__aeabi_fcmpun>
 8009110:	f997 6000 	ldrsb.w	r6, [r7]
 8009114:	4b51      	ldr	r3, [pc, #324]	; (800925c <powf+0x2bc>)
 8009116:	b1d0      	cbz	r0, 800914e <powf+0x1ae>
 8009118:	2201      	movs	r2, #1
 800911a:	4628      	mov	r0, r5
 800911c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009120:	f8cd 8020 	str.w	r8, [sp, #32]
 8009124:	f7f7 f980 	bl	8000428 <__aeabi_f2d>
 8009128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800912c:	4620      	mov	r0, r4
 800912e:	f7f7 f97b 	bl	8000428 <__aeabi_f2d>
 8009132:	2200      	movs	r2, #0
 8009134:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009138:	2300      	movs	r3, #0
 800913a:	2e00      	cmp	r6, #0
 800913c:	d0c4      	beq.n	80090c8 <powf+0x128>
 800913e:	4610      	mov	r0, r2
 8009140:	4619      	mov	r1, r3
 8009142:	f7f7 faef 	bl	8000724 <__aeabi_ddiv>
 8009146:	2e02      	cmp	r6, #2
 8009148:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800914c:	e7c4      	b.n	80090d8 <powf+0x138>
 800914e:	2203      	movs	r2, #3
 8009150:	9008      	str	r0, [sp, #32]
 8009152:	4628      	mov	r0, r5
 8009154:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009158:	f7f7 f966 	bl	8000428 <__aeabi_f2d>
 800915c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009160:	4620      	mov	r0, r4
 8009162:	f7f7 f961 	bl	8000428 <__aeabi_f2d>
 8009166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800916a:	bb4e      	cbnz	r6, 80091c0 <powf+0x220>
 800916c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009170:	4b3d      	ldr	r3, [pc, #244]	; (8009268 <powf+0x2c8>)
 8009172:	2100      	movs	r1, #0
 8009174:	4628      	mov	r0, r5
 8009176:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800917a:	f7f7 ff55 	bl	8001028 <__aeabi_fcmplt>
 800917e:	2800      	cmp	r0, #0
 8009180:	d064      	beq.n	800924c <powf+0x2ac>
 8009182:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009186:	4620      	mov	r0, r4
 8009188:	f7f7 fdb0 	bl	8000cec <__aeabi_fmul>
 800918c:	f7f7 f94c 	bl	8000428 <__aeabi_f2d>
 8009190:	4604      	mov	r4, r0
 8009192:	460d      	mov	r5, r1
 8009194:	f001 fb92 	bl	800a8bc <rint>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4620      	mov	r0, r4
 800919e:	4629      	mov	r1, r5
 80091a0:	f7f7 fbfe 	bl	80009a0 <__aeabi_dcmpeq>
 80091a4:	b920      	cbnz	r0, 80091b0 <powf+0x210>
 80091a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80091aa:	4b30      	ldr	r3, [pc, #192]	; (800926c <powf+0x2cc>)
 80091ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80091b0:	f997 3000 	ldrsb.w	r3, [r7]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d149      	bne.n	800924c <powf+0x2ac>
 80091b8:	f001 fdee 	bl	800ad98 <__errno>
 80091bc:	2322      	movs	r3, #34	; 0x22
 80091be:	e78f      	b.n	80090e0 <powf+0x140>
 80091c0:	2200      	movs	r2, #0
 80091c2:	4b2b      	ldr	r3, [pc, #172]	; (8009270 <powf+0x2d0>)
 80091c4:	2100      	movs	r1, #0
 80091c6:	4628      	mov	r0, r5
 80091c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80091cc:	f7f7 ff2c 	bl	8001028 <__aeabi_fcmplt>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d0ed      	beq.n	80091b0 <powf+0x210>
 80091d4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80091d8:	4620      	mov	r0, r4
 80091da:	f7f7 fd87 	bl	8000cec <__aeabi_fmul>
 80091de:	f7f7 f923 	bl	8000428 <__aeabi_f2d>
 80091e2:	4604      	mov	r4, r0
 80091e4:	460d      	mov	r5, r1
 80091e6:	f001 fb69 	bl	800a8bc <rint>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	4620      	mov	r0, r4
 80091f0:	4629      	mov	r1, r5
 80091f2:	f7f7 fbd5 	bl	80009a0 <__aeabi_dcmpeq>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d1da      	bne.n	80091b0 <powf+0x210>
 80091fa:	2200      	movs	r2, #0
 80091fc:	4b19      	ldr	r3, [pc, #100]	; (8009264 <powf+0x2c4>)
 80091fe:	e7d5      	b.n	80091ac <powf+0x20c>
 8009200:	2100      	movs	r1, #0
 8009202:	4630      	mov	r0, r6
 8009204:	f7f7 ff06 	bl	8001014 <__aeabi_fcmpeq>
 8009208:	2800      	cmp	r0, #0
 800920a:	f43f af3a 	beq.w	8009082 <powf+0xe2>
 800920e:	4628      	mov	r0, r5
 8009210:	f001 fd5f 	bl	800acd2 <finitef>
 8009214:	2800      	cmp	r0, #0
 8009216:	f43f af34 	beq.w	8009082 <powf+0xe2>
 800921a:	4620      	mov	r0, r4
 800921c:	f001 fd59 	bl	800acd2 <finitef>
 8009220:	2800      	cmp	r0, #0
 8009222:	f43f af2e 	beq.w	8009082 <powf+0xe2>
 8009226:	2304      	movs	r3, #4
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	4b0c      	ldr	r3, [pc, #48]	; (800925c <powf+0x2bc>)
 800922c:	4628      	mov	r0, r5
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	2300      	movs	r3, #0
 8009232:	9308      	str	r3, [sp, #32]
 8009234:	f7f7 f8f8 	bl	8000428 <__aeabi_f2d>
 8009238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800923c:	4620      	mov	r0, r4
 800923e:	f7f7 f8f3 	bl	8000428 <__aeabi_f2d>
 8009242:	2200      	movs	r2, #0
 8009244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009248:	2300      	movs	r3, #0
 800924a:	e7af      	b.n	80091ac <powf+0x20c>
 800924c:	4668      	mov	r0, sp
 800924e:	f001 fb2c 	bl	800a8aa <matherr>
 8009252:	2800      	cmp	r0, #0
 8009254:	f47f af0a 	bne.w	800906c <powf+0xcc>
 8009258:	e7ae      	b.n	80091b8 <powf+0x218>
 800925a:	bf00      	nop
 800925c:	0800b692 	.word	0x0800b692
 8009260:	3ff00000 	.word	0x3ff00000
 8009264:	fff00000 	.word	0xfff00000
 8009268:	47efffff 	.word	0x47efffff
 800926c:	c7efffff 	.word	0xc7efffff
 8009270:	7ff00000 	.word	0x7ff00000
 8009274:	20000478 	.word	0x20000478

08009278 <__ieee754_pow>:
 8009278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	b093      	sub	sp, #76	; 0x4c
 800927e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009282:	9e03      	ldr	r6, [sp, #12]
 8009284:	9a02      	ldr	r2, [sp, #8]
 8009286:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800928a:	ea55 0302 	orrs.w	r3, r5, r2
 800928e:	4607      	mov	r7, r0
 8009290:	4688      	mov	r8, r1
 8009292:	4682      	mov	sl, r0
 8009294:	4689      	mov	r9, r1
 8009296:	f000 849e 	beq.w	8009bd6 <__ieee754_pow+0x95e>
 800929a:	4b77      	ldr	r3, [pc, #476]	; (8009478 <__ieee754_pow+0x200>)
 800929c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80092a0:	429c      	cmp	r4, r3
 80092a2:	dc09      	bgt.n	80092b8 <__ieee754_pow+0x40>
 80092a4:	d103      	bne.n	80092ae <__ieee754_pow+0x36>
 80092a6:	b938      	cbnz	r0, 80092b8 <__ieee754_pow+0x40>
 80092a8:	42a5      	cmp	r5, r4
 80092aa:	dc0d      	bgt.n	80092c8 <__ieee754_pow+0x50>
 80092ac:	e001      	b.n	80092b2 <__ieee754_pow+0x3a>
 80092ae:	429d      	cmp	r5, r3
 80092b0:	dc02      	bgt.n	80092b8 <__ieee754_pow+0x40>
 80092b2:	429d      	cmp	r5, r3
 80092b4:	d10e      	bne.n	80092d4 <__ieee754_pow+0x5c>
 80092b6:	b16a      	cbz	r2, 80092d4 <__ieee754_pow+0x5c>
 80092b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80092bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80092c0:	ea54 030a 	orrs.w	r3, r4, sl
 80092c4:	f000 8487 	beq.w	8009bd6 <__ieee754_pow+0x95e>
 80092c8:	486c      	ldr	r0, [pc, #432]	; (800947c <__ieee754_pow+0x204>)
 80092ca:	b013      	add	sp, #76	; 0x4c
 80092cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	f001 baee 	b.w	800a8b0 <nan>
 80092d4:	f1b9 0f00 	cmp.w	r9, #0
 80092d8:	da4f      	bge.n	800937a <__ieee754_pow+0x102>
 80092da:	4b69      	ldr	r3, [pc, #420]	; (8009480 <__ieee754_pow+0x208>)
 80092dc:	429d      	cmp	r5, r3
 80092de:	dc4a      	bgt.n	8009376 <__ieee754_pow+0xfe>
 80092e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80092e4:	429d      	cmp	r5, r3
 80092e6:	dd48      	ble.n	800937a <__ieee754_pow+0x102>
 80092e8:	152b      	asrs	r3, r5, #20
 80092ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80092ee:	2b14      	cmp	r3, #20
 80092f0:	dd24      	ble.n	800933c <__ieee754_pow+0xc4>
 80092f2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80092f6:	fa22 f103 	lsr.w	r1, r2, r3
 80092fa:	fa01 f303 	lsl.w	r3, r1, r3
 80092fe:	429a      	cmp	r2, r3
 8009300:	d13b      	bne.n	800937a <__ieee754_pow+0x102>
 8009302:	f001 0101 	and.w	r1, r1, #1
 8009306:	f1c1 0302 	rsb	r3, r1, #2
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	2a00      	cmp	r2, #0
 800930e:	d156      	bne.n	80093be <__ieee754_pow+0x146>
 8009310:	4b59      	ldr	r3, [pc, #356]	; (8009478 <__ieee754_pow+0x200>)
 8009312:	429d      	cmp	r5, r3
 8009314:	d122      	bne.n	800935c <__ieee754_pow+0xe4>
 8009316:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800931a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800931e:	ea53 030a 	orrs.w	r3, r3, sl
 8009322:	f000 8458 	beq.w	8009bd6 <__ieee754_pow+0x95e>
 8009326:	4b57      	ldr	r3, [pc, #348]	; (8009484 <__ieee754_pow+0x20c>)
 8009328:	429c      	cmp	r4, r3
 800932a:	dd28      	ble.n	800937e <__ieee754_pow+0x106>
 800932c:	2e00      	cmp	r6, #0
 800932e:	f280 8456 	bge.w	8009bde <__ieee754_pow+0x966>
 8009332:	2000      	movs	r0, #0
 8009334:	2100      	movs	r1, #0
 8009336:	b013      	add	sp, #76	; 0x4c
 8009338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933c:	2a00      	cmp	r2, #0
 800933e:	d13c      	bne.n	80093ba <__ieee754_pow+0x142>
 8009340:	f1c3 0314 	rsb	r3, r3, #20
 8009344:	fa45 f103 	asr.w	r1, r5, r3
 8009348:	fa01 f303 	lsl.w	r3, r1, r3
 800934c:	429d      	cmp	r5, r3
 800934e:	f040 844e 	bne.w	8009bee <__ieee754_pow+0x976>
 8009352:	f001 0101 	and.w	r1, r1, #1
 8009356:	f1c1 0302 	rsb	r3, r1, #2
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	4b4a      	ldr	r3, [pc, #296]	; (8009488 <__ieee754_pow+0x210>)
 800935e:	429d      	cmp	r5, r3
 8009360:	d114      	bne.n	800938c <__ieee754_pow+0x114>
 8009362:	2e00      	cmp	r6, #0
 8009364:	f280 843f 	bge.w	8009be6 <__ieee754_pow+0x96e>
 8009368:	463a      	mov	r2, r7
 800936a:	4643      	mov	r3, r8
 800936c:	2000      	movs	r0, #0
 800936e:	4946      	ldr	r1, [pc, #280]	; (8009488 <__ieee754_pow+0x210>)
 8009370:	f7f7 f9d8 	bl	8000724 <__aeabi_ddiv>
 8009374:	e7df      	b.n	8009336 <__ieee754_pow+0xbe>
 8009376:	2302      	movs	r3, #2
 8009378:	e7c7      	b.n	800930a <__ieee754_pow+0x92>
 800937a:	2300      	movs	r3, #0
 800937c:	e7c5      	b.n	800930a <__ieee754_pow+0x92>
 800937e:	2e00      	cmp	r6, #0
 8009380:	dad7      	bge.n	8009332 <__ieee754_pow+0xba>
 8009382:	9b03      	ldr	r3, [sp, #12]
 8009384:	9802      	ldr	r0, [sp, #8]
 8009386:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800938a:	e7d4      	b.n	8009336 <__ieee754_pow+0xbe>
 800938c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009390:	d106      	bne.n	80093a0 <__ieee754_pow+0x128>
 8009392:	463a      	mov	r2, r7
 8009394:	4643      	mov	r3, r8
 8009396:	4638      	mov	r0, r7
 8009398:	4641      	mov	r1, r8
 800939a:	f7f7 f899 	bl	80004d0 <__aeabi_dmul>
 800939e:	e7ca      	b.n	8009336 <__ieee754_pow+0xbe>
 80093a0:	4b3a      	ldr	r3, [pc, #232]	; (800948c <__ieee754_pow+0x214>)
 80093a2:	429e      	cmp	r6, r3
 80093a4:	d10b      	bne.n	80093be <__ieee754_pow+0x146>
 80093a6:	f1b9 0f00 	cmp.w	r9, #0
 80093aa:	db08      	blt.n	80093be <__ieee754_pow+0x146>
 80093ac:	4638      	mov	r0, r7
 80093ae:	4641      	mov	r1, r8
 80093b0:	b013      	add	sp, #76	; 0x4c
 80093b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b6:	f000 bc51 	b.w	8009c5c <__ieee754_sqrt>
 80093ba:	2300      	movs	r3, #0
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	4638      	mov	r0, r7
 80093c0:	4641      	mov	r1, r8
 80093c2:	f001 fa69 	bl	800a898 <fabs>
 80093c6:	f1ba 0f00 	cmp.w	sl, #0
 80093ca:	d125      	bne.n	8009418 <__ieee754_pow+0x1a0>
 80093cc:	b124      	cbz	r4, 80093d8 <__ieee754_pow+0x160>
 80093ce:	4b2e      	ldr	r3, [pc, #184]	; (8009488 <__ieee754_pow+0x210>)
 80093d0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d11f      	bne.n	8009418 <__ieee754_pow+0x1a0>
 80093d8:	2e00      	cmp	r6, #0
 80093da:	da05      	bge.n	80093e8 <__ieee754_pow+0x170>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	2000      	movs	r0, #0
 80093e2:	4929      	ldr	r1, [pc, #164]	; (8009488 <__ieee754_pow+0x210>)
 80093e4:	f7f7 f99e 	bl	8000724 <__aeabi_ddiv>
 80093e8:	f1b9 0f00 	cmp.w	r9, #0
 80093ec:	daa3      	bge.n	8009336 <__ieee754_pow+0xbe>
 80093ee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80093f2:	9b00      	ldr	r3, [sp, #0]
 80093f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80093f8:	4323      	orrs	r3, r4
 80093fa:	d106      	bne.n	800940a <__ieee754_pow+0x192>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	f7f6 feb2 	bl	8000168 <__aeabi_dsub>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	e7b2      	b.n	8009370 <__ieee754_pow+0xf8>
 800940a:	9b00      	ldr	r3, [sp, #0]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d192      	bne.n	8009336 <__ieee754_pow+0xbe>
 8009410:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009414:	4619      	mov	r1, r3
 8009416:	e78e      	b.n	8009336 <__ieee754_pow+0xbe>
 8009418:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800941c:	f109 33ff 	add.w	r3, r9, #4294967295
 8009420:	930c      	str	r3, [sp, #48]	; 0x30
 8009422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009424:	9b00      	ldr	r3, [sp, #0]
 8009426:	4313      	orrs	r3, r2
 8009428:	d104      	bne.n	8009434 <__ieee754_pow+0x1bc>
 800942a:	463a      	mov	r2, r7
 800942c:	4643      	mov	r3, r8
 800942e:	4638      	mov	r0, r7
 8009430:	4641      	mov	r1, r8
 8009432:	e7e5      	b.n	8009400 <__ieee754_pow+0x188>
 8009434:	4b16      	ldr	r3, [pc, #88]	; (8009490 <__ieee754_pow+0x218>)
 8009436:	429d      	cmp	r5, r3
 8009438:	f340 80fc 	ble.w	8009634 <__ieee754_pow+0x3bc>
 800943c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009440:	429d      	cmp	r5, r3
 8009442:	dd0b      	ble.n	800945c <__ieee754_pow+0x1e4>
 8009444:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <__ieee754_pow+0x20c>)
 8009446:	429c      	cmp	r4, r3
 8009448:	dc0e      	bgt.n	8009468 <__ieee754_pow+0x1f0>
 800944a:	2e00      	cmp	r6, #0
 800944c:	f6bf af71 	bge.w	8009332 <__ieee754_pow+0xba>
 8009450:	a307      	add	r3, pc, #28	; (adr r3, 8009470 <__ieee754_pow+0x1f8>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	4610      	mov	r0, r2
 8009458:	4619      	mov	r1, r3
 800945a:	e79e      	b.n	800939a <__ieee754_pow+0x122>
 800945c:	4b0d      	ldr	r3, [pc, #52]	; (8009494 <__ieee754_pow+0x21c>)
 800945e:	429c      	cmp	r4, r3
 8009460:	ddf3      	ble.n	800944a <__ieee754_pow+0x1d2>
 8009462:	4b09      	ldr	r3, [pc, #36]	; (8009488 <__ieee754_pow+0x210>)
 8009464:	429c      	cmp	r4, r3
 8009466:	dd17      	ble.n	8009498 <__ieee754_pow+0x220>
 8009468:	2e00      	cmp	r6, #0
 800946a:	dcf1      	bgt.n	8009450 <__ieee754_pow+0x1d8>
 800946c:	e761      	b.n	8009332 <__ieee754_pow+0xba>
 800946e:	bf00      	nop
 8009470:	8800759c 	.word	0x8800759c
 8009474:	7e37e43c 	.word	0x7e37e43c
 8009478:	7ff00000 	.word	0x7ff00000
 800947c:	0800b56a 	.word	0x0800b56a
 8009480:	433fffff 	.word	0x433fffff
 8009484:	3fefffff 	.word	0x3fefffff
 8009488:	3ff00000 	.word	0x3ff00000
 800948c:	3fe00000 	.word	0x3fe00000
 8009490:	41e00000 	.word	0x41e00000
 8009494:	3feffffe 	.word	0x3feffffe
 8009498:	2200      	movs	r2, #0
 800949a:	4b61      	ldr	r3, [pc, #388]	; (8009620 <__ieee754_pow+0x3a8>)
 800949c:	f7f6 fe64 	bl	8000168 <__aeabi_dsub>
 80094a0:	a355      	add	r3, pc, #340	; (adr r3, 80095f8 <__ieee754_pow+0x380>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	4604      	mov	r4, r0
 80094a8:	460d      	mov	r5, r1
 80094aa:	f7f7 f811 	bl	80004d0 <__aeabi_dmul>
 80094ae:	a354      	add	r3, pc, #336	; (adr r3, 8009600 <__ieee754_pow+0x388>)
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	4606      	mov	r6, r0
 80094b6:	460f      	mov	r7, r1
 80094b8:	4620      	mov	r0, r4
 80094ba:	4629      	mov	r1, r5
 80094bc:	f7f7 f808 	bl	80004d0 <__aeabi_dmul>
 80094c0:	2200      	movs	r2, #0
 80094c2:	4682      	mov	sl, r0
 80094c4:	468b      	mov	fp, r1
 80094c6:	4b57      	ldr	r3, [pc, #348]	; (8009624 <__ieee754_pow+0x3ac>)
 80094c8:	4620      	mov	r0, r4
 80094ca:	4629      	mov	r1, r5
 80094cc:	f7f7 f800 	bl	80004d0 <__aeabi_dmul>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	a14c      	add	r1, pc, #304	; (adr r1, 8009608 <__ieee754_pow+0x390>)
 80094d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094da:	f7f6 fe45 	bl	8000168 <__aeabi_dsub>
 80094de:	4622      	mov	r2, r4
 80094e0:	462b      	mov	r3, r5
 80094e2:	f7f6 fff5 	bl	80004d0 <__aeabi_dmul>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	2000      	movs	r0, #0
 80094ec:	494e      	ldr	r1, [pc, #312]	; (8009628 <__ieee754_pow+0x3b0>)
 80094ee:	f7f6 fe3b 	bl	8000168 <__aeabi_dsub>
 80094f2:	4622      	mov	r2, r4
 80094f4:	462b      	mov	r3, r5
 80094f6:	4680      	mov	r8, r0
 80094f8:	4689      	mov	r9, r1
 80094fa:	4620      	mov	r0, r4
 80094fc:	4629      	mov	r1, r5
 80094fe:	f7f6 ffe7 	bl	80004d0 <__aeabi_dmul>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	4640      	mov	r0, r8
 8009508:	4649      	mov	r1, r9
 800950a:	f7f6 ffe1 	bl	80004d0 <__aeabi_dmul>
 800950e:	a340      	add	r3, pc, #256	; (adr r3, 8009610 <__ieee754_pow+0x398>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	f7f6 ffdc 	bl	80004d0 <__aeabi_dmul>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4650      	mov	r0, sl
 800951e:	4659      	mov	r1, fp
 8009520:	f7f6 fe22 	bl	8000168 <__aeabi_dsub>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4604      	mov	r4, r0
 800952a:	460d      	mov	r5, r1
 800952c:	4630      	mov	r0, r6
 800952e:	4639      	mov	r1, r7
 8009530:	f7f6 fe1c 	bl	800016c <__adddf3>
 8009534:	2000      	movs	r0, #0
 8009536:	468b      	mov	fp, r1
 8009538:	4682      	mov	sl, r0
 800953a:	4632      	mov	r2, r6
 800953c:	463b      	mov	r3, r7
 800953e:	f7f6 fe13 	bl	8000168 <__aeabi_dsub>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4620      	mov	r0, r4
 8009548:	4629      	mov	r1, r5
 800954a:	f7f6 fe0d 	bl	8000168 <__aeabi_dsub>
 800954e:	9b00      	ldr	r3, [sp, #0]
 8009550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009552:	3b01      	subs	r3, #1
 8009554:	4313      	orrs	r3, r2
 8009556:	f04f 0300 	mov.w	r3, #0
 800955a:	bf0c      	ite	eq
 800955c:	4c33      	ldreq	r4, [pc, #204]	; (800962c <__ieee754_pow+0x3b4>)
 800955e:	4c30      	ldrne	r4, [pc, #192]	; (8009620 <__ieee754_pow+0x3a8>)
 8009560:	4606      	mov	r6, r0
 8009562:	e88d 0018 	stmia.w	sp, {r3, r4}
 8009566:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800956a:	2400      	movs	r4, #0
 800956c:	460f      	mov	r7, r1
 800956e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009572:	4622      	mov	r2, r4
 8009574:	462b      	mov	r3, r5
 8009576:	f7f6 fdf7 	bl	8000168 <__aeabi_dsub>
 800957a:	4652      	mov	r2, sl
 800957c:	465b      	mov	r3, fp
 800957e:	f7f6 ffa7 	bl	80004d0 <__aeabi_dmul>
 8009582:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009586:	4680      	mov	r8, r0
 8009588:	4689      	mov	r9, r1
 800958a:	4630      	mov	r0, r6
 800958c:	4639      	mov	r1, r7
 800958e:	f7f6 ff9f 	bl	80004d0 <__aeabi_dmul>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	4640      	mov	r0, r8
 8009598:	4649      	mov	r1, r9
 800959a:	f7f6 fde7 	bl	800016c <__adddf3>
 800959e:	4622      	mov	r2, r4
 80095a0:	462b      	mov	r3, r5
 80095a2:	4680      	mov	r8, r0
 80095a4:	4689      	mov	r9, r1
 80095a6:	4650      	mov	r0, sl
 80095a8:	4659      	mov	r1, fp
 80095aa:	f7f6 ff91 	bl	80004d0 <__aeabi_dmul>
 80095ae:	4604      	mov	r4, r0
 80095b0:	460d      	mov	r5, r1
 80095b2:	460b      	mov	r3, r1
 80095b4:	4602      	mov	r2, r0
 80095b6:	4649      	mov	r1, r9
 80095b8:	4640      	mov	r0, r8
 80095ba:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80095be:	f7f6 fdd5 	bl	800016c <__adddf3>
 80095c2:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <__ieee754_pow+0x3b8>)
 80095c4:	4682      	mov	sl, r0
 80095c6:	4299      	cmp	r1, r3
 80095c8:	460f      	mov	r7, r1
 80095ca:	460e      	mov	r6, r1
 80095cc:	f340 82da 	ble.w	8009b84 <__ieee754_pow+0x90c>
 80095d0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80095d4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80095d8:	4303      	orrs	r3, r0
 80095da:	f000 81d5 	beq.w	8009988 <__ieee754_pow+0x710>
 80095de:	a30e      	add	r3, pc, #56	; (adr r3, 8009618 <__ieee754_pow+0x3a0>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095e8:	f7f6 ff72 	bl	80004d0 <__aeabi_dmul>
 80095ec:	a30a      	add	r3, pc, #40	; (adr r3, 8009618 <__ieee754_pow+0x3a0>)
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	e6d2      	b.n	800939a <__ieee754_pow+0x122>
 80095f4:	f3af 8000 	nop.w
 80095f8:	60000000 	.word	0x60000000
 80095fc:	3ff71547 	.word	0x3ff71547
 8009600:	f85ddf44 	.word	0xf85ddf44
 8009604:	3e54ae0b 	.word	0x3e54ae0b
 8009608:	55555555 	.word	0x55555555
 800960c:	3fd55555 	.word	0x3fd55555
 8009610:	652b82fe 	.word	0x652b82fe
 8009614:	3ff71547 	.word	0x3ff71547
 8009618:	8800759c 	.word	0x8800759c
 800961c:	7e37e43c 	.word	0x7e37e43c
 8009620:	3ff00000 	.word	0x3ff00000
 8009624:	3fd00000 	.word	0x3fd00000
 8009628:	3fe00000 	.word	0x3fe00000
 800962c:	bff00000 	.word	0xbff00000
 8009630:	408fffff 	.word	0x408fffff
 8009634:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009638:	f04f 0200 	mov.w	r2, #0
 800963c:	da05      	bge.n	800964a <__ieee754_pow+0x3d2>
 800963e:	4bca      	ldr	r3, [pc, #808]	; (8009968 <__ieee754_pow+0x6f0>)
 8009640:	f7f6 ff46 	bl	80004d0 <__aeabi_dmul>
 8009644:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009648:	460c      	mov	r4, r1
 800964a:	1523      	asrs	r3, r4, #20
 800964c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009650:	4413      	add	r3, r2
 8009652:	9307      	str	r3, [sp, #28]
 8009654:	4bc5      	ldr	r3, [pc, #788]	; (800996c <__ieee754_pow+0x6f4>)
 8009656:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800965a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800965e:	429c      	cmp	r4, r3
 8009660:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009664:	dd08      	ble.n	8009678 <__ieee754_pow+0x400>
 8009666:	4bc2      	ldr	r3, [pc, #776]	; (8009970 <__ieee754_pow+0x6f8>)
 8009668:	429c      	cmp	r4, r3
 800966a:	f340 8154 	ble.w	8009916 <__ieee754_pow+0x69e>
 800966e:	9b07      	ldr	r3, [sp, #28]
 8009670:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009674:	3301      	adds	r3, #1
 8009676:	9307      	str	r3, [sp, #28]
 8009678:	2600      	movs	r6, #0
 800967a:	4629      	mov	r1, r5
 800967c:	00f3      	lsls	r3, r6, #3
 800967e:	930d      	str	r3, [sp, #52]	; 0x34
 8009680:	4bbc      	ldr	r3, [pc, #752]	; (8009974 <__ieee754_pow+0x6fc>)
 8009682:	00f2      	lsls	r2, r6, #3
 8009684:	4413      	add	r3, r2
 8009686:	cb18      	ldmia	r3, {r3, r4}
 8009688:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800968c:	461a      	mov	r2, r3
 800968e:	4623      	mov	r3, r4
 8009690:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009694:	f7f6 fd68 	bl	8000168 <__aeabi_dsub>
 8009698:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800969c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80096a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80096a4:	f7f6 fd62 	bl	800016c <__adddf3>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	2000      	movs	r0, #0
 80096ae:	49b2      	ldr	r1, [pc, #712]	; (8009978 <__ieee754_pow+0x700>)
 80096b0:	f7f7 f838 	bl	8000724 <__aeabi_ddiv>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80096bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80096c0:	f7f6 ff06 	bl	80004d0 <__aeabi_dmul>
 80096c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096c8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80096cc:	f04f 0a00 	mov.w	sl, #0
 80096d0:	2200      	movs	r2, #0
 80096d2:	106d      	asrs	r5, r5, #1
 80096d4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80096d8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80096dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80096e0:	4659      	mov	r1, fp
 80096e2:	4650      	mov	r0, sl
 80096e4:	4614      	mov	r4, r2
 80096e6:	461d      	mov	r5, r3
 80096e8:	f7f6 fef2 	bl	80004d0 <__aeabi_dmul>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80096f4:	f7f6 fd38 	bl	8000168 <__aeabi_dsub>
 80096f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80096fc:	4606      	mov	r6, r0
 80096fe:	460f      	mov	r7, r1
 8009700:	4620      	mov	r0, r4
 8009702:	4629      	mov	r1, r5
 8009704:	f7f6 fd30 	bl	8000168 <__aeabi_dsub>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009710:	f7f6 fd2a 	bl	8000168 <__aeabi_dsub>
 8009714:	465b      	mov	r3, fp
 8009716:	4652      	mov	r2, sl
 8009718:	f7f6 feda 	bl	80004d0 <__aeabi_dmul>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4630      	mov	r0, r6
 8009722:	4639      	mov	r1, r7
 8009724:	f7f6 fd20 	bl	8000168 <__aeabi_dsub>
 8009728:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800972c:	f7f6 fed0 	bl	80004d0 <__aeabi_dmul>
 8009730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009734:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009738:	4610      	mov	r0, r2
 800973a:	4619      	mov	r1, r3
 800973c:	f7f6 fec8 	bl	80004d0 <__aeabi_dmul>
 8009740:	a377      	add	r3, pc, #476	; (adr r3, 8009920 <__ieee754_pow+0x6a8>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	4604      	mov	r4, r0
 8009748:	460d      	mov	r5, r1
 800974a:	f7f6 fec1 	bl	80004d0 <__aeabi_dmul>
 800974e:	a376      	add	r3, pc, #472	; (adr r3, 8009928 <__ieee754_pow+0x6b0>)
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	f7f6 fd0a 	bl	800016c <__adddf3>
 8009758:	4622      	mov	r2, r4
 800975a:	462b      	mov	r3, r5
 800975c:	f7f6 feb8 	bl	80004d0 <__aeabi_dmul>
 8009760:	a373      	add	r3, pc, #460	; (adr r3, 8009930 <__ieee754_pow+0x6b8>)
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	f7f6 fd01 	bl	800016c <__adddf3>
 800976a:	4622      	mov	r2, r4
 800976c:	462b      	mov	r3, r5
 800976e:	f7f6 feaf 	bl	80004d0 <__aeabi_dmul>
 8009772:	a371      	add	r3, pc, #452	; (adr r3, 8009938 <__ieee754_pow+0x6c0>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	f7f6 fcf8 	bl	800016c <__adddf3>
 800977c:	4622      	mov	r2, r4
 800977e:	462b      	mov	r3, r5
 8009780:	f7f6 fea6 	bl	80004d0 <__aeabi_dmul>
 8009784:	a36e      	add	r3, pc, #440	; (adr r3, 8009940 <__ieee754_pow+0x6c8>)
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	f7f6 fcef 	bl	800016c <__adddf3>
 800978e:	4622      	mov	r2, r4
 8009790:	462b      	mov	r3, r5
 8009792:	f7f6 fe9d 	bl	80004d0 <__aeabi_dmul>
 8009796:	a36c      	add	r3, pc, #432	; (adr r3, 8009948 <__ieee754_pow+0x6d0>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7f6 fce6 	bl	800016c <__adddf3>
 80097a0:	4622      	mov	r2, r4
 80097a2:	4606      	mov	r6, r0
 80097a4:	460f      	mov	r7, r1
 80097a6:	462b      	mov	r3, r5
 80097a8:	4620      	mov	r0, r4
 80097aa:	4629      	mov	r1, r5
 80097ac:	f7f6 fe90 	bl	80004d0 <__aeabi_dmul>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4630      	mov	r0, r6
 80097b6:	4639      	mov	r1, r7
 80097b8:	f7f6 fe8a 	bl	80004d0 <__aeabi_dmul>
 80097bc:	4604      	mov	r4, r0
 80097be:	460d      	mov	r5, r1
 80097c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097c4:	465b      	mov	r3, fp
 80097c6:	4652      	mov	r2, sl
 80097c8:	f7f6 fcd0 	bl	800016c <__adddf3>
 80097cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80097d0:	f7f6 fe7e 	bl	80004d0 <__aeabi_dmul>
 80097d4:	4622      	mov	r2, r4
 80097d6:	462b      	mov	r3, r5
 80097d8:	f7f6 fcc8 	bl	800016c <__adddf3>
 80097dc:	465b      	mov	r3, fp
 80097de:	4606      	mov	r6, r0
 80097e0:	460f      	mov	r7, r1
 80097e2:	4652      	mov	r2, sl
 80097e4:	4659      	mov	r1, fp
 80097e6:	4650      	mov	r0, sl
 80097e8:	f7f6 fe72 	bl	80004d0 <__aeabi_dmul>
 80097ec:	2200      	movs	r2, #0
 80097ee:	4b63      	ldr	r3, [pc, #396]	; (800997c <__ieee754_pow+0x704>)
 80097f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80097f4:	f7f6 fcba 	bl	800016c <__adddf3>
 80097f8:	4632      	mov	r2, r6
 80097fa:	463b      	mov	r3, r7
 80097fc:	f7f6 fcb6 	bl	800016c <__adddf3>
 8009800:	4650      	mov	r0, sl
 8009802:	460d      	mov	r5, r1
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	4650      	mov	r0, sl
 800980a:	4659      	mov	r1, fp
 800980c:	f7f6 fe60 	bl	80004d0 <__aeabi_dmul>
 8009810:	2200      	movs	r2, #0
 8009812:	4680      	mov	r8, r0
 8009814:	4689      	mov	r9, r1
 8009816:	4b59      	ldr	r3, [pc, #356]	; (800997c <__ieee754_pow+0x704>)
 8009818:	4629      	mov	r1, r5
 800981a:	4650      	mov	r0, sl
 800981c:	f7f6 fca4 	bl	8000168 <__aeabi_dsub>
 8009820:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009824:	f7f6 fca0 	bl	8000168 <__aeabi_dsub>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	4630      	mov	r0, r6
 800982e:	4639      	mov	r1, r7
 8009830:	f7f6 fc9a 	bl	8000168 <__aeabi_dsub>
 8009834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009838:	f7f6 fe4a 	bl	80004d0 <__aeabi_dmul>
 800983c:	462b      	mov	r3, r5
 800983e:	4606      	mov	r6, r0
 8009840:	460f      	mov	r7, r1
 8009842:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009846:	4652      	mov	r2, sl
 8009848:	f7f6 fe42 	bl	80004d0 <__aeabi_dmul>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4630      	mov	r0, r6
 8009852:	4639      	mov	r1, r7
 8009854:	f7f6 fc8a 	bl	800016c <__adddf3>
 8009858:	4606      	mov	r6, r0
 800985a:	460f      	mov	r7, r1
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4640      	mov	r0, r8
 8009862:	4649      	mov	r1, r9
 8009864:	f7f6 fc82 	bl	800016c <__adddf3>
 8009868:	a339      	add	r3, pc, #228	; (adr r3, 8009950 <__ieee754_pow+0x6d8>)
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	4650      	mov	r0, sl
 8009870:	460d      	mov	r5, r1
 8009872:	f7f6 fe2d 	bl	80004d0 <__aeabi_dmul>
 8009876:	4642      	mov	r2, r8
 8009878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800987c:	464b      	mov	r3, r9
 800987e:	4629      	mov	r1, r5
 8009880:	4650      	mov	r0, sl
 8009882:	f7f6 fc71 	bl	8000168 <__aeabi_dsub>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	4630      	mov	r0, r6
 800988c:	4639      	mov	r1, r7
 800988e:	f7f6 fc6b 	bl	8000168 <__aeabi_dsub>
 8009892:	a331      	add	r3, pc, #196	; (adr r3, 8009958 <__ieee754_pow+0x6e0>)
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	f7f6 fe1a 	bl	80004d0 <__aeabi_dmul>
 800989c:	a330      	add	r3, pc, #192	; (adr r3, 8009960 <__ieee754_pow+0x6e8>)
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	4606      	mov	r6, r0
 80098a4:	460f      	mov	r7, r1
 80098a6:	4650      	mov	r0, sl
 80098a8:	4629      	mov	r1, r5
 80098aa:	f7f6 fe11 	bl	80004d0 <__aeabi_dmul>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4630      	mov	r0, r6
 80098b4:	4639      	mov	r1, r7
 80098b6:	f7f6 fc59 	bl	800016c <__adddf3>
 80098ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098bc:	4b30      	ldr	r3, [pc, #192]	; (8009980 <__ieee754_pow+0x708>)
 80098be:	4413      	add	r3, r2
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	f7f6 fc52 	bl	800016c <__adddf3>
 80098c8:	4604      	mov	r4, r0
 80098ca:	9807      	ldr	r0, [sp, #28]
 80098cc:	460d      	mov	r5, r1
 80098ce:	f7f6 fd99 	bl	8000404 <__aeabi_i2d>
 80098d2:	4606      	mov	r6, r0
 80098d4:	460f      	mov	r7, r1
 80098d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098d8:	4b2a      	ldr	r3, [pc, #168]	; (8009984 <__ieee754_pow+0x70c>)
 80098da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098de:	4413      	add	r3, r2
 80098e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098e4:	4622      	mov	r2, r4
 80098e6:	462b      	mov	r3, r5
 80098e8:	f7f6 fc40 	bl	800016c <__adddf3>
 80098ec:	4642      	mov	r2, r8
 80098ee:	464b      	mov	r3, r9
 80098f0:	f7f6 fc3c 	bl	800016c <__adddf3>
 80098f4:	4632      	mov	r2, r6
 80098f6:	463b      	mov	r3, r7
 80098f8:	f7f6 fc38 	bl	800016c <__adddf3>
 80098fc:	4632      	mov	r2, r6
 80098fe:	463b      	mov	r3, r7
 8009900:	4650      	mov	r0, sl
 8009902:	468b      	mov	fp, r1
 8009904:	f7f6 fc30 	bl	8000168 <__aeabi_dsub>
 8009908:	4642      	mov	r2, r8
 800990a:	464b      	mov	r3, r9
 800990c:	f7f6 fc2c 	bl	8000168 <__aeabi_dsub>
 8009910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009914:	e613      	b.n	800953e <__ieee754_pow+0x2c6>
 8009916:	2601      	movs	r6, #1
 8009918:	e6af      	b.n	800967a <__ieee754_pow+0x402>
 800991a:	bf00      	nop
 800991c:	f3af 8000 	nop.w
 8009920:	4a454eef 	.word	0x4a454eef
 8009924:	3fca7e28 	.word	0x3fca7e28
 8009928:	93c9db65 	.word	0x93c9db65
 800992c:	3fcd864a 	.word	0x3fcd864a
 8009930:	a91d4101 	.word	0xa91d4101
 8009934:	3fd17460 	.word	0x3fd17460
 8009938:	518f264d 	.word	0x518f264d
 800993c:	3fd55555 	.word	0x3fd55555
 8009940:	db6fabff 	.word	0xdb6fabff
 8009944:	3fdb6db6 	.word	0x3fdb6db6
 8009948:	33333303 	.word	0x33333303
 800994c:	3fe33333 	.word	0x3fe33333
 8009950:	e0000000 	.word	0xe0000000
 8009954:	3feec709 	.word	0x3feec709
 8009958:	dc3a03fd 	.word	0xdc3a03fd
 800995c:	3feec709 	.word	0x3feec709
 8009960:	145b01f5 	.word	0x145b01f5
 8009964:	be3e2fe0 	.word	0xbe3e2fe0
 8009968:	43400000 	.word	0x43400000
 800996c:	0003988e 	.word	0x0003988e
 8009970:	000bb679 	.word	0x000bb679
 8009974:	0800b698 	.word	0x0800b698
 8009978:	3ff00000 	.word	0x3ff00000
 800997c:	40080000 	.word	0x40080000
 8009980:	0800b6b8 	.word	0x0800b6b8
 8009984:	0800b6a8 	.word	0x0800b6a8
 8009988:	a39b      	add	r3, pc, #620	; (adr r3, 8009bf8 <__ieee754_pow+0x980>)
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	4640      	mov	r0, r8
 8009990:	4649      	mov	r1, r9
 8009992:	f7f6 fbeb 	bl	800016c <__adddf3>
 8009996:	4622      	mov	r2, r4
 8009998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800999c:	462b      	mov	r3, r5
 800999e:	4650      	mov	r0, sl
 80099a0:	4639      	mov	r1, r7
 80099a2:	f7f6 fbe1 	bl	8000168 <__aeabi_dsub>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099ae:	f7f7 f81f 	bl	80009f0 <__aeabi_dcmpgt>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f47f ae13 	bne.w	80095de <__ieee754_pow+0x366>
 80099b8:	4aa3      	ldr	r2, [pc, #652]	; (8009c48 <__ieee754_pow+0x9d0>)
 80099ba:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80099be:	4293      	cmp	r3, r2
 80099c0:	f340 8104 	ble.w	8009bcc <__ieee754_pow+0x954>
 80099c4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80099c8:	2000      	movs	r0, #0
 80099ca:	151b      	asrs	r3, r3, #20
 80099cc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80099d0:	fa4a f303 	asr.w	r3, sl, r3
 80099d4:	4433      	add	r3, r6
 80099d6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80099da:	4f9c      	ldr	r7, [pc, #624]	; (8009c4c <__ieee754_pow+0x9d4>)
 80099dc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80099e0:	4117      	asrs	r7, r2
 80099e2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80099e6:	ea23 0107 	bic.w	r1, r3, r7
 80099ea:	f1c2 0214 	rsb	r2, r2, #20
 80099ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80099f2:	fa4a fa02 	asr.w	sl, sl, r2
 80099f6:	2e00      	cmp	r6, #0
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4620      	mov	r0, r4
 80099fe:	4629      	mov	r1, r5
 8009a00:	bfb8      	it	lt
 8009a02:	f1ca 0a00 	rsblt	sl, sl, #0
 8009a06:	f7f6 fbaf 	bl	8000168 <__aeabi_dsub>
 8009a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a12:	4642      	mov	r2, r8
 8009a14:	464b      	mov	r3, r9
 8009a16:	f7f6 fba9 	bl	800016c <__adddf3>
 8009a1a:	a379      	add	r3, pc, #484	; (adr r3, 8009c00 <__ieee754_pow+0x988>)
 8009a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a20:	2000      	movs	r0, #0
 8009a22:	460d      	mov	r5, r1
 8009a24:	4604      	mov	r4, r0
 8009a26:	f7f6 fd53 	bl	80004d0 <__aeabi_dmul>
 8009a2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a2e:	4606      	mov	r6, r0
 8009a30:	460f      	mov	r7, r1
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f7f6 fb97 	bl	8000168 <__aeabi_dsub>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4640      	mov	r0, r8
 8009a40:	4649      	mov	r1, r9
 8009a42:	f7f6 fb91 	bl	8000168 <__aeabi_dsub>
 8009a46:	a370      	add	r3, pc, #448	; (adr r3, 8009c08 <__ieee754_pow+0x990>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f6 fd40 	bl	80004d0 <__aeabi_dmul>
 8009a50:	a36f      	add	r3, pc, #444	; (adr r3, 8009c10 <__ieee754_pow+0x998>)
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	4680      	mov	r8, r0
 8009a58:	4689      	mov	r9, r1
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	f7f6 fd37 	bl	80004d0 <__aeabi_dmul>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4640      	mov	r0, r8
 8009a68:	4649      	mov	r1, r9
 8009a6a:	f7f6 fb7f 	bl	800016c <__adddf3>
 8009a6e:	4604      	mov	r4, r0
 8009a70:	460d      	mov	r5, r1
 8009a72:	4602      	mov	r2, r0
 8009a74:	460b      	mov	r3, r1
 8009a76:	4630      	mov	r0, r6
 8009a78:	4639      	mov	r1, r7
 8009a7a:	f7f6 fb77 	bl	800016c <__adddf3>
 8009a7e:	4632      	mov	r2, r6
 8009a80:	463b      	mov	r3, r7
 8009a82:	4680      	mov	r8, r0
 8009a84:	4689      	mov	r9, r1
 8009a86:	f7f6 fb6f 	bl	8000168 <__aeabi_dsub>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4620      	mov	r0, r4
 8009a90:	4629      	mov	r1, r5
 8009a92:	f7f6 fb69 	bl	8000168 <__aeabi_dsub>
 8009a96:	4642      	mov	r2, r8
 8009a98:	4606      	mov	r6, r0
 8009a9a:	460f      	mov	r7, r1
 8009a9c:	464b      	mov	r3, r9
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	f7f6 fd15 	bl	80004d0 <__aeabi_dmul>
 8009aa6:	a35c      	add	r3, pc, #368	; (adr r3, 8009c18 <__ieee754_pow+0x9a0>)
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	4604      	mov	r4, r0
 8009aae:	460d      	mov	r5, r1
 8009ab0:	f7f6 fd0e 	bl	80004d0 <__aeabi_dmul>
 8009ab4:	a35a      	add	r3, pc, #360	; (adr r3, 8009c20 <__ieee754_pow+0x9a8>)
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	f7f6 fb55 	bl	8000168 <__aeabi_dsub>
 8009abe:	4622      	mov	r2, r4
 8009ac0:	462b      	mov	r3, r5
 8009ac2:	f7f6 fd05 	bl	80004d0 <__aeabi_dmul>
 8009ac6:	a358      	add	r3, pc, #352	; (adr r3, 8009c28 <__ieee754_pow+0x9b0>)
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	f7f6 fb4e 	bl	800016c <__adddf3>
 8009ad0:	4622      	mov	r2, r4
 8009ad2:	462b      	mov	r3, r5
 8009ad4:	f7f6 fcfc 	bl	80004d0 <__aeabi_dmul>
 8009ad8:	a355      	add	r3, pc, #340	; (adr r3, 8009c30 <__ieee754_pow+0x9b8>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f7f6 fb43 	bl	8000168 <__aeabi_dsub>
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	462b      	mov	r3, r5
 8009ae6:	f7f6 fcf3 	bl	80004d0 <__aeabi_dmul>
 8009aea:	a353      	add	r3, pc, #332	; (adr r3, 8009c38 <__ieee754_pow+0x9c0>)
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f7f6 fb3c 	bl	800016c <__adddf3>
 8009af4:	4622      	mov	r2, r4
 8009af6:	462b      	mov	r3, r5
 8009af8:	f7f6 fcea 	bl	80004d0 <__aeabi_dmul>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4640      	mov	r0, r8
 8009b02:	4649      	mov	r1, r9
 8009b04:	f7f6 fb30 	bl	8000168 <__aeabi_dsub>
 8009b08:	4604      	mov	r4, r0
 8009b0a:	460d      	mov	r5, r1
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4640      	mov	r0, r8
 8009b12:	4649      	mov	r1, r9
 8009b14:	f7f6 fcdc 	bl	80004d0 <__aeabi_dmul>
 8009b18:	2200      	movs	r2, #0
 8009b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b22:	4620      	mov	r0, r4
 8009b24:	4629      	mov	r1, r5
 8009b26:	f7f6 fb1f 	bl	8000168 <__aeabi_dsub>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b32:	f7f6 fdf7 	bl	8000724 <__aeabi_ddiv>
 8009b36:	4632      	mov	r2, r6
 8009b38:	4604      	mov	r4, r0
 8009b3a:	460d      	mov	r5, r1
 8009b3c:	463b      	mov	r3, r7
 8009b3e:	4640      	mov	r0, r8
 8009b40:	4649      	mov	r1, r9
 8009b42:	f7f6 fcc5 	bl	80004d0 <__aeabi_dmul>
 8009b46:	4632      	mov	r2, r6
 8009b48:	463b      	mov	r3, r7
 8009b4a:	f7f6 fb0f 	bl	800016c <__adddf3>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	4620      	mov	r0, r4
 8009b54:	4629      	mov	r1, r5
 8009b56:	f7f6 fb07 	bl	8000168 <__aeabi_dsub>
 8009b5a:	4642      	mov	r2, r8
 8009b5c:	464b      	mov	r3, r9
 8009b5e:	f7f6 fb03 	bl	8000168 <__aeabi_dsub>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	2000      	movs	r0, #0
 8009b68:	4939      	ldr	r1, [pc, #228]	; (8009c50 <__ieee754_pow+0x9d8>)
 8009b6a:	f7f6 fafd 	bl	8000168 <__aeabi_dsub>
 8009b6e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009b72:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009b76:	da2c      	bge.n	8009bd2 <__ieee754_pow+0x95a>
 8009b78:	4652      	mov	r2, sl
 8009b7a:	f000 ff29 	bl	800a9d0 <scalbn>
 8009b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b82:	e40a      	b.n	800939a <__ieee754_pow+0x122>
 8009b84:	4b33      	ldr	r3, [pc, #204]	; (8009c54 <__ieee754_pow+0x9dc>)
 8009b86:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009b8a:	429f      	cmp	r7, r3
 8009b8c:	f77f af14 	ble.w	80099b8 <__ieee754_pow+0x740>
 8009b90:	4b31      	ldr	r3, [pc, #196]	; (8009c58 <__ieee754_pow+0x9e0>)
 8009b92:	440b      	add	r3, r1
 8009b94:	4303      	orrs	r3, r0
 8009b96:	d00b      	beq.n	8009bb0 <__ieee754_pow+0x938>
 8009b98:	a329      	add	r3, pc, #164	; (adr r3, 8009c40 <__ieee754_pow+0x9c8>)
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ba2:	f7f6 fc95 	bl	80004d0 <__aeabi_dmul>
 8009ba6:	a326      	add	r3, pc, #152	; (adr r3, 8009c40 <__ieee754_pow+0x9c8>)
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f7ff bbf5 	b.w	800939a <__ieee754_pow+0x122>
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	462b      	mov	r3, r5
 8009bb4:	f7f6 fad8 	bl	8000168 <__aeabi_dsub>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4640      	mov	r0, r8
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	f7f6 ff02 	bl	80009c8 <__aeabi_dcmple>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	f43f aef7 	beq.w	80099b8 <__ieee754_pow+0x740>
 8009bca:	e7e5      	b.n	8009b98 <__ieee754_pow+0x920>
 8009bcc:	f04f 0a00 	mov.w	sl, #0
 8009bd0:	e71d      	b.n	8009a0e <__ieee754_pow+0x796>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	e7d3      	b.n	8009b7e <__ieee754_pow+0x906>
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	491d      	ldr	r1, [pc, #116]	; (8009c50 <__ieee754_pow+0x9d8>)
 8009bda:	f7ff bbac 	b.w	8009336 <__ieee754_pow+0xbe>
 8009bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009be2:	f7ff bba8 	b.w	8009336 <__ieee754_pow+0xbe>
 8009be6:	4638      	mov	r0, r7
 8009be8:	4641      	mov	r1, r8
 8009bea:	f7ff bba4 	b.w	8009336 <__ieee754_pow+0xbe>
 8009bee:	9200      	str	r2, [sp, #0]
 8009bf0:	f7ff bbb4 	b.w	800935c <__ieee754_pow+0xe4>
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	652b82fe 	.word	0x652b82fe
 8009bfc:	3c971547 	.word	0x3c971547
 8009c00:	00000000 	.word	0x00000000
 8009c04:	3fe62e43 	.word	0x3fe62e43
 8009c08:	fefa39ef 	.word	0xfefa39ef
 8009c0c:	3fe62e42 	.word	0x3fe62e42
 8009c10:	0ca86c39 	.word	0x0ca86c39
 8009c14:	be205c61 	.word	0xbe205c61
 8009c18:	72bea4d0 	.word	0x72bea4d0
 8009c1c:	3e663769 	.word	0x3e663769
 8009c20:	c5d26bf1 	.word	0xc5d26bf1
 8009c24:	3ebbbd41 	.word	0x3ebbbd41
 8009c28:	af25de2c 	.word	0xaf25de2c
 8009c2c:	3f11566a 	.word	0x3f11566a
 8009c30:	16bebd93 	.word	0x16bebd93
 8009c34:	3f66c16c 	.word	0x3f66c16c
 8009c38:	5555553e 	.word	0x5555553e
 8009c3c:	3fc55555 	.word	0x3fc55555
 8009c40:	c2f8f359 	.word	0xc2f8f359
 8009c44:	01a56e1f 	.word	0x01a56e1f
 8009c48:	3fe00000 	.word	0x3fe00000
 8009c4c:	000fffff 	.word	0x000fffff
 8009c50:	3ff00000 	.word	0x3ff00000
 8009c54:	4090cbff 	.word	0x4090cbff
 8009c58:	3f6f3400 	.word	0x3f6f3400

08009c5c <__ieee754_sqrt>:
 8009c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c60:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8009db0 <__ieee754_sqrt+0x154>
 8009c64:	4606      	mov	r6, r0
 8009c66:	ea3e 0e01 	bics.w	lr, lr, r1
 8009c6a:	460d      	mov	r5, r1
 8009c6c:	4607      	mov	r7, r0
 8009c6e:	460a      	mov	r2, r1
 8009c70:	460c      	mov	r4, r1
 8009c72:	4603      	mov	r3, r0
 8009c74:	d10f      	bne.n	8009c96 <__ieee754_sqrt+0x3a>
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	f7f6 fc29 	bl	80004d0 <__aeabi_dmul>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	460b      	mov	r3, r1
 8009c82:	4630      	mov	r0, r6
 8009c84:	4629      	mov	r1, r5
 8009c86:	f7f6 fa71 	bl	800016c <__adddf3>
 8009c8a:	4606      	mov	r6, r0
 8009c8c:	460d      	mov	r5, r1
 8009c8e:	4630      	mov	r0, r6
 8009c90:	4629      	mov	r1, r5
 8009c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c96:	2900      	cmp	r1, #0
 8009c98:	dc0e      	bgt.n	8009cb8 <__ieee754_sqrt+0x5c>
 8009c9a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8009c9e:	ea5e 0707 	orrs.w	r7, lr, r7
 8009ca2:	d0f4      	beq.n	8009c8e <__ieee754_sqrt+0x32>
 8009ca4:	b141      	cbz	r1, 8009cb8 <__ieee754_sqrt+0x5c>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	f7f6 fa5d 	bl	8000168 <__aeabi_dsub>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	f7f6 fd37 	bl	8000724 <__aeabi_ddiv>
 8009cb6:	e7e8      	b.n	8009c8a <__ieee754_sqrt+0x2e>
 8009cb8:	1512      	asrs	r2, r2, #20
 8009cba:	d10c      	bne.n	8009cd6 <__ieee754_sqrt+0x7a>
 8009cbc:	2c00      	cmp	r4, #0
 8009cbe:	d06e      	beq.n	8009d9e <__ieee754_sqrt+0x142>
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	02e6      	lsls	r6, r4, #11
 8009cc4:	d56f      	bpl.n	8009da6 <__ieee754_sqrt+0x14a>
 8009cc6:	1e48      	subs	r0, r1, #1
 8009cc8:	1a12      	subs	r2, r2, r0
 8009cca:	f1c1 0020 	rsb	r0, r1, #32
 8009cce:	fa23 f000 	lsr.w	r0, r3, r0
 8009cd2:	4304      	orrs	r4, r0
 8009cd4:	408b      	lsls	r3, r1
 8009cd6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009cda:	07d5      	lsls	r5, r2, #31
 8009cdc:	f04f 0500 	mov.w	r5, #0
 8009ce0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009ce4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009ce8:	bf42      	ittt	mi
 8009cea:	0064      	lslmi	r4, r4, #1
 8009cec:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8009cf0:	005b      	lslmi	r3, r3, #1
 8009cf2:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8009cf6:	1050      	asrs	r0, r2, #1
 8009cf8:	4421      	add	r1, r4
 8009cfa:	2216      	movs	r2, #22
 8009cfc:	462c      	mov	r4, r5
 8009cfe:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	19a7      	adds	r7, r4, r6
 8009d06:	428f      	cmp	r7, r1
 8009d08:	bfde      	ittt	le
 8009d0a:	1bc9      	suble	r1, r1, r7
 8009d0c:	19bc      	addle	r4, r7, r6
 8009d0e:	19ad      	addle	r5, r5, r6
 8009d10:	0049      	lsls	r1, r1, #1
 8009d12:	3a01      	subs	r2, #1
 8009d14:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009d18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d20:	d1f0      	bne.n	8009d04 <__ieee754_sqrt+0xa8>
 8009d22:	f04f 0e20 	mov.w	lr, #32
 8009d26:	4694      	mov	ip, r2
 8009d28:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009d2c:	42a1      	cmp	r1, r4
 8009d2e:	eb06 070c 	add.w	r7, r6, ip
 8009d32:	dc02      	bgt.n	8009d3a <__ieee754_sqrt+0xde>
 8009d34:	d112      	bne.n	8009d5c <__ieee754_sqrt+0x100>
 8009d36:	429f      	cmp	r7, r3
 8009d38:	d810      	bhi.n	8009d5c <__ieee754_sqrt+0x100>
 8009d3a:	2f00      	cmp	r7, #0
 8009d3c:	eb07 0c06 	add.w	ip, r7, r6
 8009d40:	da34      	bge.n	8009dac <__ieee754_sqrt+0x150>
 8009d42:	f1bc 0f00 	cmp.w	ip, #0
 8009d46:	db31      	blt.n	8009dac <__ieee754_sqrt+0x150>
 8009d48:	f104 0801 	add.w	r8, r4, #1
 8009d4c:	1b09      	subs	r1, r1, r4
 8009d4e:	4644      	mov	r4, r8
 8009d50:	429f      	cmp	r7, r3
 8009d52:	bf88      	it	hi
 8009d54:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009d58:	1bdb      	subs	r3, r3, r7
 8009d5a:	4432      	add	r2, r6
 8009d5c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8009d60:	f1be 0e01 	subs.w	lr, lr, #1
 8009d64:	4439      	add	r1, r7
 8009d66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d6a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009d6e:	d1dd      	bne.n	8009d2c <__ieee754_sqrt+0xd0>
 8009d70:	430b      	orrs	r3, r1
 8009d72:	d006      	beq.n	8009d82 <__ieee754_sqrt+0x126>
 8009d74:	1c54      	adds	r4, r2, #1
 8009d76:	bf0b      	itete	eq
 8009d78:	4672      	moveq	r2, lr
 8009d7a:	3201      	addne	r2, #1
 8009d7c:	3501      	addeq	r5, #1
 8009d7e:	f022 0201 	bicne.w	r2, r2, #1
 8009d82:	106b      	asrs	r3, r5, #1
 8009d84:	0852      	lsrs	r2, r2, #1
 8009d86:	07e9      	lsls	r1, r5, #31
 8009d88:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009d8c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009d90:	bf48      	it	mi
 8009d92:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009d96:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8009d9a:	4616      	mov	r6, r2
 8009d9c:	e777      	b.n	8009c8e <__ieee754_sqrt+0x32>
 8009d9e:	0adc      	lsrs	r4, r3, #11
 8009da0:	3a15      	subs	r2, #21
 8009da2:	055b      	lsls	r3, r3, #21
 8009da4:	e78a      	b.n	8009cbc <__ieee754_sqrt+0x60>
 8009da6:	0064      	lsls	r4, r4, #1
 8009da8:	3101      	adds	r1, #1
 8009daa:	e78a      	b.n	8009cc2 <__ieee754_sqrt+0x66>
 8009dac:	46a0      	mov	r8, r4
 8009dae:	e7cd      	b.n	8009d4c <__ieee754_sqrt+0xf0>
 8009db0:	7ff00000 	.word	0x7ff00000

08009db4 <__ieee754_asinf>:
 8009db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8009dbc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	d10c      	bne.n	8009de0 <__ieee754_asinf+0x2c>
 8009dc6:	498d      	ldr	r1, [pc, #564]	; (8009ffc <__ieee754_asinf+0x248>)
 8009dc8:	f7f6 ff90 	bl	8000cec <__aeabi_fmul>
 8009dcc:	498c      	ldr	r1, [pc, #560]	; (800a000 <__ieee754_asinf+0x24c>)
 8009dce:	4605      	mov	r5, r0
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f7f6 ff8b 	bl	8000cec <__aeabi_fmul>
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f7f6 fe7f 	bl	8000adc <__addsf3>
 8009dde:	e006      	b.n	8009dee <__ieee754_asinf+0x3a>
 8009de0:	dd09      	ble.n	8009df6 <__ieee754_asinf+0x42>
 8009de2:	4601      	mov	r1, r0
 8009de4:	f7f6 fe78 	bl	8000ad8 <__aeabi_fsub>
 8009de8:	4601      	mov	r1, r0
 8009dea:	f7f7 f833 	bl	8000e54 <__aeabi_fdiv>
 8009dee:	4604      	mov	r4, r0
 8009df0:	4620      	mov	r0, r4
 8009df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009df6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8009dfa:	da0b      	bge.n	8009e14 <__ieee754_asinf+0x60>
 8009dfc:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 8009e00:	da73      	bge.n	8009eea <__ieee754_asinf+0x136>
 8009e02:	4980      	ldr	r1, [pc, #512]	; (800a004 <__ieee754_asinf+0x250>)
 8009e04:	f7f6 fe6a 	bl	8000adc <__addsf3>
 8009e08:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009e0c:	f7f7 f92a 	bl	8001064 <__aeabi_fcmpgt>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d1ed      	bne.n	8009df0 <__ieee754_asinf+0x3c>
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 ff59 	bl	800accc <fabsf>
 8009e1a:	4601      	mov	r1, r0
 8009e1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009e20:	f7f6 fe5a 	bl	8000ad8 <__aeabi_fsub>
 8009e24:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009e28:	f7f6 ff60 	bl	8000cec <__aeabi_fmul>
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	4976      	ldr	r1, [pc, #472]	; (800a008 <__ieee754_asinf+0x254>)
 8009e30:	f7f6 ff5c 	bl	8000cec <__aeabi_fmul>
 8009e34:	4975      	ldr	r1, [pc, #468]	; (800a00c <__ieee754_asinf+0x258>)
 8009e36:	f7f6 fe51 	bl	8000adc <__addsf3>
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	f7f6 ff56 	bl	8000cec <__aeabi_fmul>
 8009e40:	4973      	ldr	r1, [pc, #460]	; (800a010 <__ieee754_asinf+0x25c>)
 8009e42:	f7f6 fe49 	bl	8000ad8 <__aeabi_fsub>
 8009e46:	4621      	mov	r1, r4
 8009e48:	f7f6 ff50 	bl	8000cec <__aeabi_fmul>
 8009e4c:	4971      	ldr	r1, [pc, #452]	; (800a014 <__ieee754_asinf+0x260>)
 8009e4e:	f7f6 fe45 	bl	8000adc <__addsf3>
 8009e52:	4621      	mov	r1, r4
 8009e54:	f7f6 ff4a 	bl	8000cec <__aeabi_fmul>
 8009e58:	496f      	ldr	r1, [pc, #444]	; (800a018 <__ieee754_asinf+0x264>)
 8009e5a:	f7f6 fe3d 	bl	8000ad8 <__aeabi_fsub>
 8009e5e:	4621      	mov	r1, r4
 8009e60:	f7f6 ff44 	bl	8000cec <__aeabi_fmul>
 8009e64:	496d      	ldr	r1, [pc, #436]	; (800a01c <__ieee754_asinf+0x268>)
 8009e66:	f7f6 fe39 	bl	8000adc <__addsf3>
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	f7f6 ff3e 	bl	8000cec <__aeabi_fmul>
 8009e70:	496b      	ldr	r1, [pc, #428]	; (800a020 <__ieee754_asinf+0x26c>)
 8009e72:	4680      	mov	r8, r0
 8009e74:	4620      	mov	r0, r4
 8009e76:	f7f6 ff39 	bl	8000cec <__aeabi_fmul>
 8009e7a:	496a      	ldr	r1, [pc, #424]	; (800a024 <__ieee754_asinf+0x270>)
 8009e7c:	f7f6 fe2c 	bl	8000ad8 <__aeabi_fsub>
 8009e80:	4621      	mov	r1, r4
 8009e82:	f7f6 ff33 	bl	8000cec <__aeabi_fmul>
 8009e86:	4968      	ldr	r1, [pc, #416]	; (800a028 <__ieee754_asinf+0x274>)
 8009e88:	f7f6 fe28 	bl	8000adc <__addsf3>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	f7f6 ff2d 	bl	8000cec <__aeabi_fmul>
 8009e92:	4966      	ldr	r1, [pc, #408]	; (800a02c <__ieee754_asinf+0x278>)
 8009e94:	f7f6 fe20 	bl	8000ad8 <__aeabi_fsub>
 8009e98:	4621      	mov	r1, r4
 8009e9a:	f7f6 ff27 	bl	8000cec <__aeabi_fmul>
 8009e9e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009ea2:	f7f6 fe1b 	bl	8000adc <__addsf3>
 8009ea6:	4681      	mov	r9, r0
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 fca3 	bl	800a7f4 <__ieee754_sqrtf>
 8009eae:	4b60      	ldr	r3, [pc, #384]	; (800a030 <__ieee754_asinf+0x27c>)
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	429d      	cmp	r5, r3
 8009eb4:	dd63      	ble.n	8009f7e <__ieee754_asinf+0x1ca>
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	4640      	mov	r0, r8
 8009eba:	f7f6 ffcb 	bl	8000e54 <__aeabi_fdiv>
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	f7f6 ff14 	bl	8000cec <__aeabi_fmul>
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	f7f6 fe09 	bl	8000adc <__addsf3>
 8009eca:	4601      	mov	r1, r0
 8009ecc:	f7f6 fe06 	bl	8000adc <__addsf3>
 8009ed0:	4958      	ldr	r1, [pc, #352]	; (800a034 <__ieee754_asinf+0x280>)
 8009ed2:	f7f6 fe03 	bl	8000adc <__addsf3>
 8009ed6:	4601      	mov	r1, r0
 8009ed8:	4848      	ldr	r0, [pc, #288]	; (8009ffc <__ieee754_asinf+0x248>)
 8009eda:	f7f6 fdfd 	bl	8000ad8 <__aeabi_fsub>
 8009ede:	2f00      	cmp	r7, #0
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	bfd8      	it	le
 8009ee4:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 8009ee8:	e782      	b.n	8009df0 <__ieee754_asinf+0x3c>
 8009eea:	4601      	mov	r1, r0
 8009eec:	f7f6 fefe 	bl	8000cec <__aeabi_fmul>
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	4945      	ldr	r1, [pc, #276]	; (800a008 <__ieee754_asinf+0x254>)
 8009ef4:	f7f6 fefa 	bl	8000cec <__aeabi_fmul>
 8009ef8:	4944      	ldr	r1, [pc, #272]	; (800a00c <__ieee754_asinf+0x258>)
 8009efa:	f7f6 fdef 	bl	8000adc <__addsf3>
 8009efe:	4629      	mov	r1, r5
 8009f00:	f7f6 fef4 	bl	8000cec <__aeabi_fmul>
 8009f04:	4942      	ldr	r1, [pc, #264]	; (800a010 <__ieee754_asinf+0x25c>)
 8009f06:	f7f6 fde7 	bl	8000ad8 <__aeabi_fsub>
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	f7f6 feee 	bl	8000cec <__aeabi_fmul>
 8009f10:	4940      	ldr	r1, [pc, #256]	; (800a014 <__ieee754_asinf+0x260>)
 8009f12:	f7f6 fde3 	bl	8000adc <__addsf3>
 8009f16:	4629      	mov	r1, r5
 8009f18:	f7f6 fee8 	bl	8000cec <__aeabi_fmul>
 8009f1c:	493e      	ldr	r1, [pc, #248]	; (800a018 <__ieee754_asinf+0x264>)
 8009f1e:	f7f6 fddb 	bl	8000ad8 <__aeabi_fsub>
 8009f22:	4629      	mov	r1, r5
 8009f24:	f7f6 fee2 	bl	8000cec <__aeabi_fmul>
 8009f28:	493c      	ldr	r1, [pc, #240]	; (800a01c <__ieee754_asinf+0x268>)
 8009f2a:	f7f6 fdd7 	bl	8000adc <__addsf3>
 8009f2e:	4629      	mov	r1, r5
 8009f30:	f7f6 fedc 	bl	8000cec <__aeabi_fmul>
 8009f34:	493a      	ldr	r1, [pc, #232]	; (800a020 <__ieee754_asinf+0x26c>)
 8009f36:	4606      	mov	r6, r0
 8009f38:	4628      	mov	r0, r5
 8009f3a:	f7f6 fed7 	bl	8000cec <__aeabi_fmul>
 8009f3e:	4939      	ldr	r1, [pc, #228]	; (800a024 <__ieee754_asinf+0x270>)
 8009f40:	f7f6 fdca 	bl	8000ad8 <__aeabi_fsub>
 8009f44:	4629      	mov	r1, r5
 8009f46:	f7f6 fed1 	bl	8000cec <__aeabi_fmul>
 8009f4a:	4937      	ldr	r1, [pc, #220]	; (800a028 <__ieee754_asinf+0x274>)
 8009f4c:	f7f6 fdc6 	bl	8000adc <__addsf3>
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7f6 fecb 	bl	8000cec <__aeabi_fmul>
 8009f56:	4935      	ldr	r1, [pc, #212]	; (800a02c <__ieee754_asinf+0x278>)
 8009f58:	f7f6 fdbe 	bl	8000ad8 <__aeabi_fsub>
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	f7f6 fec5 	bl	8000cec <__aeabi_fmul>
 8009f62:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009f66:	f7f6 fdb9 	bl	8000adc <__addsf3>
 8009f6a:	4601      	mov	r1, r0
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f7f6 ff71 	bl	8000e54 <__aeabi_fdiv>
 8009f72:	4621      	mov	r1, r4
 8009f74:	f7f6 feba 	bl	8000cec <__aeabi_fmul>
 8009f78:	4601      	mov	r1, r0
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	e72d      	b.n	8009dda <__ieee754_asinf+0x26>
 8009f7e:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8009f82:	4649      	mov	r1, r9
 8009f84:	4640      	mov	r0, r8
 8009f86:	f7f6 ff65 	bl	8000e54 <__aeabi_fdiv>
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4680      	mov	r8, r0
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f7f6 fda4 	bl	8000adc <__addsf3>
 8009f94:	4601      	mov	r1, r0
 8009f96:	4640      	mov	r0, r8
 8009f98:	f7f6 fea8 	bl	8000cec <__aeabi_fmul>
 8009f9c:	f025 050f 	bic.w	r5, r5, #15
 8009fa0:	4680      	mov	r8, r0
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	f7f6 fea1 	bl	8000cec <__aeabi_fmul>
 8009faa:	4601      	mov	r1, r0
 8009fac:	4620      	mov	r0, r4
 8009fae:	f7f6 fd93 	bl	8000ad8 <__aeabi_fsub>
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f7f6 fd90 	bl	8000adc <__addsf3>
 8009fbc:	4601      	mov	r1, r0
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f7f6 ff48 	bl	8000e54 <__aeabi_fdiv>
 8009fc4:	4601      	mov	r1, r0
 8009fc6:	f7f6 fd89 	bl	8000adc <__addsf3>
 8009fca:	4601      	mov	r1, r0
 8009fcc:	480c      	ldr	r0, [pc, #48]	; (800a000 <__ieee754_asinf+0x24c>)
 8009fce:	f7f6 fd83 	bl	8000ad8 <__aeabi_fsub>
 8009fd2:	4601      	mov	r1, r0
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	f7f6 fd7f 	bl	8000ad8 <__aeabi_fsub>
 8009fda:	4629      	mov	r1, r5
 8009fdc:	4604      	mov	r4, r0
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f7f6 fd7c 	bl	8000adc <__addsf3>
 8009fe4:	4601      	mov	r1, r0
 8009fe6:	4814      	ldr	r0, [pc, #80]	; (800a038 <__ieee754_asinf+0x284>)
 8009fe8:	f7f6 fd76 	bl	8000ad8 <__aeabi_fsub>
 8009fec:	4601      	mov	r1, r0
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f7f6 fd72 	bl	8000ad8 <__aeabi_fsub>
 8009ff4:	4601      	mov	r1, r0
 8009ff6:	4810      	ldr	r0, [pc, #64]	; (800a038 <__ieee754_asinf+0x284>)
 8009ff8:	e76f      	b.n	8009eda <__ieee754_asinf+0x126>
 8009ffa:	bf00      	nop
 8009ffc:	3fc90fdb 	.word	0x3fc90fdb
 800a000:	b33bbd2e 	.word	0xb33bbd2e
 800a004:	7149f2ca 	.word	0x7149f2ca
 800a008:	3811ef08 	.word	0x3811ef08
 800a00c:	3a4f7f04 	.word	0x3a4f7f04
 800a010:	3d241146 	.word	0x3d241146
 800a014:	3e4e0aa8 	.word	0x3e4e0aa8
 800a018:	3ea6b090 	.word	0x3ea6b090
 800a01c:	3e2aaaab 	.word	0x3e2aaaab
 800a020:	3d9dc62e 	.word	0x3d9dc62e
 800a024:	3f303361 	.word	0x3f303361
 800a028:	4001572d 	.word	0x4001572d
 800a02c:	4019d139 	.word	0x4019d139
 800a030:	3f799999 	.word	0x3f799999
 800a034:	333bbd2e 	.word	0x333bbd2e
 800a038:	3f490fdb 	.word	0x3f490fdb

0800a03c <__ieee754_atan2f>:
 800a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a042:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a046:	4603      	mov	r3, r0
 800a048:	dc05      	bgt.n	800a056 <__ieee754_atan2f+0x1a>
 800a04a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a04e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a052:	4607      	mov	r7, r0
 800a054:	dd04      	ble.n	800a060 <__ieee754_atan2f+0x24>
 800a056:	4618      	mov	r0, r3
 800a058:	f7f6 fd40 	bl	8000adc <__addsf3>
 800a05c:	4603      	mov	r3, r0
 800a05e:	e010      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a060:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800a064:	d103      	bne.n	800a06e <__ieee754_atan2f+0x32>
 800a066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a06a:	f000 bd1f 	b.w	800aaac <atanf>
 800a06e:	178c      	asrs	r4, r1, #30
 800a070:	f004 0402 	and.w	r4, r4, #2
 800a074:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a078:	b92a      	cbnz	r2, 800a086 <__ieee754_atan2f+0x4a>
 800a07a:	2c02      	cmp	r4, #2
 800a07c:	d023      	beq.n	800a0c6 <__ieee754_atan2f+0x8a>
 800a07e:	2c03      	cmp	r4, #3
 800a080:	d023      	beq.n	800a0ca <__ieee754_atan2f+0x8e>
 800a082:	4618      	mov	r0, r3
 800a084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a086:	b91e      	cbnz	r6, 800a090 <__ieee754_atan2f+0x54>
 800a088:	2f00      	cmp	r7, #0
 800a08a:	da53      	bge.n	800a134 <__ieee754_atan2f+0xf8>
 800a08c:	4b2a      	ldr	r3, [pc, #168]	; (800a138 <__ieee754_atan2f+0xfc>)
 800a08e:	e7f8      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a090:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a094:	d11b      	bne.n	800a0ce <__ieee754_atan2f+0x92>
 800a096:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a09a:	d10b      	bne.n	800a0b4 <__ieee754_atan2f+0x78>
 800a09c:	2c02      	cmp	r4, #2
 800a09e:	d005      	beq.n	800a0ac <__ieee754_atan2f+0x70>
 800a0a0:	2c03      	cmp	r4, #3
 800a0a2:	d005      	beq.n	800a0b0 <__ieee754_atan2f+0x74>
 800a0a4:	2c01      	cmp	r4, #1
 800a0a6:	d141      	bne.n	800a12c <__ieee754_atan2f+0xf0>
 800a0a8:	4b24      	ldr	r3, [pc, #144]	; (800a13c <__ieee754_atan2f+0x100>)
 800a0aa:	e7ea      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a0ac:	4b24      	ldr	r3, [pc, #144]	; (800a140 <__ieee754_atan2f+0x104>)
 800a0ae:	e7e8      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a0b0:	4b24      	ldr	r3, [pc, #144]	; (800a144 <__ieee754_atan2f+0x108>)
 800a0b2:	e7e6      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a0b4:	2c02      	cmp	r4, #2
 800a0b6:	d006      	beq.n	800a0c6 <__ieee754_atan2f+0x8a>
 800a0b8:	2c03      	cmp	r4, #3
 800a0ba:	d006      	beq.n	800a0ca <__ieee754_atan2f+0x8e>
 800a0bc:	2c01      	cmp	r4, #1
 800a0be:	d137      	bne.n	800a130 <__ieee754_atan2f+0xf4>
 800a0c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0c4:	e7dd      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a0c6:	4b20      	ldr	r3, [pc, #128]	; (800a148 <__ieee754_atan2f+0x10c>)
 800a0c8:	e7db      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a0ca:	4b20      	ldr	r3, [pc, #128]	; (800a14c <__ieee754_atan2f+0x110>)
 800a0cc:	e7d9      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a0ce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a0d2:	d0d9      	beq.n	800a088 <__ieee754_atan2f+0x4c>
 800a0d4:	1b92      	subs	r2, r2, r6
 800a0d6:	15d2      	asrs	r2, r2, #23
 800a0d8:	2a3c      	cmp	r2, #60	; 0x3c
 800a0da:	dc17      	bgt.n	800a10c <__ieee754_atan2f+0xd0>
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	da01      	bge.n	800a0e4 <__ieee754_atan2f+0xa8>
 800a0e0:	323c      	adds	r2, #60	; 0x3c
 800a0e2:	db15      	blt.n	800a110 <__ieee754_atan2f+0xd4>
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7f6 feb5 	bl	8000e54 <__aeabi_fdiv>
 800a0ea:	f000 fdef 	bl	800accc <fabsf>
 800a0ee:	f000 fcdd 	bl	800aaac <atanf>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2c01      	cmp	r4, #1
 800a0f6:	d00d      	beq.n	800a114 <__ieee754_atan2f+0xd8>
 800a0f8:	2c02      	cmp	r4, #2
 800a0fa:	d00e      	beq.n	800a11a <__ieee754_atan2f+0xde>
 800a0fc:	2c00      	cmp	r4, #0
 800a0fe:	d0c0      	beq.n	800a082 <__ieee754_atan2f+0x46>
 800a100:	4913      	ldr	r1, [pc, #76]	; (800a150 <__ieee754_atan2f+0x114>)
 800a102:	4618      	mov	r0, r3
 800a104:	f7f6 fcea 	bl	8000adc <__addsf3>
 800a108:	490f      	ldr	r1, [pc, #60]	; (800a148 <__ieee754_atan2f+0x10c>)
 800a10a:	e00c      	b.n	800a126 <__ieee754_atan2f+0xea>
 800a10c:	4b11      	ldr	r3, [pc, #68]	; (800a154 <__ieee754_atan2f+0x118>)
 800a10e:	e7f1      	b.n	800a0f4 <__ieee754_atan2f+0xb8>
 800a110:	2300      	movs	r3, #0
 800a112:	e7ef      	b.n	800a0f4 <__ieee754_atan2f+0xb8>
 800a114:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a118:	e7b3      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a11a:	490d      	ldr	r1, [pc, #52]	; (800a150 <__ieee754_atan2f+0x114>)
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7f6 fcdd 	bl	8000adc <__addsf3>
 800a122:	4601      	mov	r1, r0
 800a124:	4808      	ldr	r0, [pc, #32]	; (800a148 <__ieee754_atan2f+0x10c>)
 800a126:	f7f6 fcd7 	bl	8000ad8 <__aeabi_fsub>
 800a12a:	e797      	b.n	800a05c <__ieee754_atan2f+0x20>
 800a12c:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <__ieee754_atan2f+0x11c>)
 800a12e:	e7a8      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a130:	2300      	movs	r3, #0
 800a132:	e7a6      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a134:	4b07      	ldr	r3, [pc, #28]	; (800a154 <__ieee754_atan2f+0x118>)
 800a136:	e7a4      	b.n	800a082 <__ieee754_atan2f+0x46>
 800a138:	bfc90fdb 	.word	0xbfc90fdb
 800a13c:	bf490fdb 	.word	0xbf490fdb
 800a140:	4016cbe4 	.word	0x4016cbe4
 800a144:	c016cbe4 	.word	0xc016cbe4
 800a148:	40490fdb 	.word	0x40490fdb
 800a14c:	c0490fdb 	.word	0xc0490fdb
 800a150:	33bbbd2e 	.word	0x33bbbd2e
 800a154:	3fc90fdb 	.word	0x3fc90fdb
 800a158:	3f490fdb 	.word	0x3f490fdb

0800a15c <__ieee754_powf>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	b087      	sub	sp, #28
 800a162:	9101      	str	r1, [sp, #4]
 800a164:	9c01      	ldr	r4, [sp, #4]
 800a166:	4681      	mov	r9, r0
 800a168:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 800a16c:	f000 8325 	beq.w	800a7ba <__ieee754_powf+0x65e>
 800a170:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a174:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a178:	4680      	mov	r8, r0
 800a17a:	dc06      	bgt.n	800a18a <__ieee754_powf+0x2e>
 800a17c:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a180:	dd09      	ble.n	800a196 <__ieee754_powf+0x3a>
 800a182:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800a186:	f000 8318 	beq.w	800a7ba <__ieee754_powf+0x65e>
 800a18a:	4885      	ldr	r0, [pc, #532]	; (800a3a0 <__ieee754_powf+0x244>)
 800a18c:	b007      	add	sp, #28
 800a18e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a192:	f7fe bc35 	b.w	8008a00 <nanf>
 800a196:	2800      	cmp	r0, #0
 800a198:	da1d      	bge.n	800a1d6 <__ieee754_powf+0x7a>
 800a19a:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800a19e:	da2b      	bge.n	800a1f8 <__ieee754_powf+0x9c>
 800a1a0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a1a4:	db30      	blt.n	800a208 <__ieee754_powf+0xac>
 800a1a6:	15fb      	asrs	r3, r7, #23
 800a1a8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a1ac:	fa47 f503 	asr.w	r5, r7, r3
 800a1b0:	fa05 f303 	lsl.w	r3, r5, r3
 800a1b4:	429f      	cmp	r7, r3
 800a1b6:	d127      	bne.n	800a208 <__ieee754_powf+0xac>
 800a1b8:	f005 0501 	and.w	r5, r5, #1
 800a1bc:	f1c5 0502 	rsb	r5, r5, #2
 800a1c0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a1c4:	d122      	bne.n	800a20c <__ieee754_powf+0xb0>
 800a1c6:	2c00      	cmp	r4, #0
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	da11      	bge.n	800a1f0 <__ieee754_powf+0x94>
 800a1cc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a1d0:	f7f6 fe40 	bl	8000e54 <__aeabi_fdiv>
 800a1d4:	e021      	b.n	800a21a <__ieee754_powf+0xbe>
 800a1d6:	2500      	movs	r5, #0
 800a1d8:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a1dc:	d1f0      	bne.n	800a1c0 <__ieee754_powf+0x64>
 800a1de:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800a1e2:	f000 82ea 	beq.w	800a7ba <__ieee754_powf+0x65e>
 800a1e6:	dd09      	ble.n	800a1fc <__ieee754_powf+0xa0>
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	f280 82e9 	bge.w	800a7c0 <__ieee754_powf+0x664>
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	b007      	add	sp, #28
 800a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f8:	2502      	movs	r5, #2
 800a1fa:	e7ed      	b.n	800a1d8 <__ieee754_powf+0x7c>
 800a1fc:	2c00      	cmp	r4, #0
 800a1fe:	daf6      	bge.n	800a1ee <__ieee754_powf+0x92>
 800a200:	9b01      	ldr	r3, [sp, #4]
 800a202:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a206:	e7f3      	b.n	800a1f0 <__ieee754_powf+0x94>
 800a208:	2500      	movs	r5, #0
 800a20a:	e7d9      	b.n	800a1c0 <__ieee754_powf+0x64>
 800a20c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a210:	d105      	bne.n	800a21e <__ieee754_powf+0xc2>
 800a212:	4649      	mov	r1, r9
 800a214:	4608      	mov	r0, r1
 800a216:	f7f6 fd69 	bl	8000cec <__aeabi_fmul>
 800a21a:	4601      	mov	r1, r0
 800a21c:	e7e8      	b.n	800a1f0 <__ieee754_powf+0x94>
 800a21e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a222:	4648      	mov	r0, r9
 800a224:	d107      	bne.n	800a236 <__ieee754_powf+0xda>
 800a226:	f1b8 0f00 	cmp.w	r8, #0
 800a22a:	db04      	blt.n	800a236 <__ieee754_powf+0xda>
 800a22c:	b007      	add	sp, #28
 800a22e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a232:	f000 badf 	b.w	800a7f4 <__ieee754_sqrtf>
 800a236:	f000 fd49 	bl	800accc <fabsf>
 800a23a:	4601      	mov	r1, r0
 800a23c:	b126      	cbz	r6, 800a248 <__ieee754_powf+0xec>
 800a23e:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800a242:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a246:	d118      	bne.n	800a27a <__ieee754_powf+0x11e>
 800a248:	2c00      	cmp	r4, #0
 800a24a:	da04      	bge.n	800a256 <__ieee754_powf+0xfa>
 800a24c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a250:	f7f6 fe00 	bl	8000e54 <__aeabi_fdiv>
 800a254:	4601      	mov	r1, r0
 800a256:	f1b8 0f00 	cmp.w	r8, #0
 800a25a:	dac9      	bge.n	800a1f0 <__ieee754_powf+0x94>
 800a25c:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 800a260:	ea50 0305 	orrs.w	r3, r0, r5
 800a264:	d104      	bne.n	800a270 <__ieee754_powf+0x114>
 800a266:	4608      	mov	r0, r1
 800a268:	f7f6 fc36 	bl	8000ad8 <__aeabi_fsub>
 800a26c:	4601      	mov	r1, r0
 800a26e:	e7af      	b.n	800a1d0 <__ieee754_powf+0x74>
 800a270:	2d01      	cmp	r5, #1
 800a272:	d1bd      	bne.n	800a1f0 <__ieee754_powf+0x94>
 800a274:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a278:	e7ba      	b.n	800a1f0 <__ieee754_powf+0x94>
 800a27a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800a27e:	f108 33ff 	add.w	r3, r8, #4294967295
 800a282:	9303      	str	r3, [sp, #12]
 800a284:	432b      	orrs	r3, r5
 800a286:	d101      	bne.n	800a28c <__ieee754_powf+0x130>
 800a288:	4649      	mov	r1, r9
 800a28a:	e7ec      	b.n	800a266 <__ieee754_powf+0x10a>
 800a28c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800a290:	f340 8098 	ble.w	800a3c4 <__ieee754_powf+0x268>
 800a294:	4b43      	ldr	r3, [pc, #268]	; (800a3a4 <__ieee754_powf+0x248>)
 800a296:	429e      	cmp	r6, r3
 800a298:	dc03      	bgt.n	800a2a2 <__ieee754_powf+0x146>
 800a29a:	2c00      	cmp	r4, #0
 800a29c:	daa7      	bge.n	800a1ee <__ieee754_powf+0x92>
 800a29e:	4942      	ldr	r1, [pc, #264]	; (800a3a8 <__ieee754_powf+0x24c>)
 800a2a0:	e7b8      	b.n	800a214 <__ieee754_powf+0xb8>
 800a2a2:	4b42      	ldr	r3, [pc, #264]	; (800a3ac <__ieee754_powf+0x250>)
 800a2a4:	429e      	cmp	r6, r3
 800a2a6:	dd02      	ble.n	800a2ae <__ieee754_powf+0x152>
 800a2a8:	2c00      	cmp	r4, #0
 800a2aa:	dcf8      	bgt.n	800a29e <__ieee754_powf+0x142>
 800a2ac:	e79f      	b.n	800a1ee <__ieee754_powf+0x92>
 800a2ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a2b2:	f7f6 fc11 	bl	8000ad8 <__aeabi_fsub>
 800a2b6:	493e      	ldr	r1, [pc, #248]	; (800a3b0 <__ieee754_powf+0x254>)
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	f7f6 fd17 	bl	8000cec <__aeabi_fmul>
 800a2be:	493d      	ldr	r1, [pc, #244]	; (800a3b4 <__ieee754_powf+0x258>)
 800a2c0:	4607      	mov	r7, r0
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f7f6 fd12 	bl	8000cec <__aeabi_fmul>
 800a2c8:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800a2cc:	4680      	mov	r8, r0
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f7f6 fd0c 	bl	8000cec <__aeabi_fmul>
 800a2d4:	4601      	mov	r1, r0
 800a2d6:	4838      	ldr	r0, [pc, #224]	; (800a3b8 <__ieee754_powf+0x25c>)
 800a2d8:	f7f6 fbfe 	bl	8000ad8 <__aeabi_fsub>
 800a2dc:	4631      	mov	r1, r6
 800a2de:	f7f6 fd05 	bl	8000cec <__aeabi_fmul>
 800a2e2:	4601      	mov	r1, r0
 800a2e4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800a2e8:	f7f6 fbf6 	bl	8000ad8 <__aeabi_fsub>
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4681      	mov	r9, r0
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f7f6 fcfb 	bl	8000cec <__aeabi_fmul>
 800a2f6:	4601      	mov	r1, r0
 800a2f8:	4648      	mov	r0, r9
 800a2fa:	f7f6 fcf7 	bl	8000cec <__aeabi_fmul>
 800a2fe:	492f      	ldr	r1, [pc, #188]	; (800a3bc <__ieee754_powf+0x260>)
 800a300:	f7f6 fcf4 	bl	8000cec <__aeabi_fmul>
 800a304:	4601      	mov	r1, r0
 800a306:	4640      	mov	r0, r8
 800a308:	f7f6 fbe6 	bl	8000ad8 <__aeabi_fsub>
 800a30c:	4601      	mov	r1, r0
 800a30e:	4606      	mov	r6, r0
 800a310:	4638      	mov	r0, r7
 800a312:	f7f6 fbe3 	bl	8000adc <__addsf3>
 800a316:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800a31a:	f02a 0a0f 	bic.w	sl, sl, #15
 800a31e:	4639      	mov	r1, r7
 800a320:	4650      	mov	r0, sl
 800a322:	f7f6 fbd9 	bl	8000ad8 <__aeabi_fsub>
 800a326:	4601      	mov	r1, r0
 800a328:	4630      	mov	r0, r6
 800a32a:	f7f6 fbd5 	bl	8000ad8 <__aeabi_fsub>
 800a32e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800a332:	9b03      	ldr	r3, [sp, #12]
 800a334:	3d01      	subs	r5, #1
 800a336:	f024 040f 	bic.w	r4, r4, #15
 800a33a:	432b      	orrs	r3, r5
 800a33c:	4606      	mov	r6, r0
 800a33e:	4621      	mov	r1, r4
 800a340:	9801      	ldr	r0, [sp, #4]
 800a342:	bf0c      	ite	eq
 800a344:	4d1e      	ldreq	r5, [pc, #120]	; (800a3c0 <__ieee754_powf+0x264>)
 800a346:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 800a34a:	f7f6 fbc5 	bl	8000ad8 <__aeabi_fsub>
 800a34e:	4651      	mov	r1, sl
 800a350:	f7f6 fccc 	bl	8000cec <__aeabi_fmul>
 800a354:	9901      	ldr	r1, [sp, #4]
 800a356:	4607      	mov	r7, r0
 800a358:	4630      	mov	r0, r6
 800a35a:	f7f6 fcc7 	bl	8000cec <__aeabi_fmul>
 800a35e:	4601      	mov	r1, r0
 800a360:	4638      	mov	r0, r7
 800a362:	f7f6 fbbb 	bl	8000adc <__addsf3>
 800a366:	4621      	mov	r1, r4
 800a368:	4606      	mov	r6, r0
 800a36a:	4650      	mov	r0, sl
 800a36c:	f7f6 fcbe 	bl	8000cec <__aeabi_fmul>
 800a370:	4601      	mov	r1, r0
 800a372:	4607      	mov	r7, r0
 800a374:	4681      	mov	r9, r0
 800a376:	4630      	mov	r0, r6
 800a378:	f7f6 fbb0 	bl	8000adc <__addsf3>
 800a37c:	2800      	cmp	r0, #0
 800a37e:	4682      	mov	sl, r0
 800a380:	4680      	mov	r8, r0
 800a382:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800a386:	f340 81fb 	ble.w	800a780 <__ieee754_powf+0x624>
 800a38a:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800a38e:	f340 8149 	ble.w	800a624 <__ieee754_powf+0x4c8>
 800a392:	4905      	ldr	r1, [pc, #20]	; (800a3a8 <__ieee754_powf+0x24c>)
 800a394:	4628      	mov	r0, r5
 800a396:	f7f6 fca9 	bl	8000cec <__aeabi_fmul>
 800a39a:	4903      	ldr	r1, [pc, #12]	; (800a3a8 <__ieee754_powf+0x24c>)
 800a39c:	e73b      	b.n	800a216 <__ieee754_powf+0xba>
 800a39e:	bf00      	nop
 800a3a0:	0800b56a 	.word	0x0800b56a
 800a3a4:	3f7ffff7 	.word	0x3f7ffff7
 800a3a8:	7149f2ca 	.word	0x7149f2ca
 800a3ac:	3f800007 	.word	0x3f800007
 800a3b0:	3fb8aa00 	.word	0x3fb8aa00
 800a3b4:	36eca570 	.word	0x36eca570
 800a3b8:	3eaaaaab 	.word	0x3eaaaaab
 800a3bc:	3fb8aa3b 	.word	0x3fb8aa3b
 800a3c0:	bf800000 	.word	0xbf800000
 800a3c4:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 800a3c8:	f280 810a 	bge.w	800a5e0 <__ieee754_powf+0x484>
 800a3cc:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 800a3d0:	f7f6 fc8c 	bl	8000cec <__aeabi_fmul>
 800a3d4:	f06f 0217 	mvn.w	r2, #23
 800a3d8:	4606      	mov	r6, r0
 800a3da:	15f3      	asrs	r3, r6, #23
 800a3dc:	3b7f      	subs	r3, #127	; 0x7f
 800a3de:	441a      	add	r2, r3
 800a3e0:	4b81      	ldr	r3, [pc, #516]	; (800a5e8 <__ieee754_powf+0x48c>)
 800a3e2:	f3c6 0016 	ubfx	r0, r6, #0, #23
 800a3e6:	4298      	cmp	r0, r3
 800a3e8:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 800a3ec:	dd06      	ble.n	800a3fc <__ieee754_powf+0x2a0>
 800a3ee:	4b7f      	ldr	r3, [pc, #508]	; (800a5ec <__ieee754_powf+0x490>)
 800a3f0:	4298      	cmp	r0, r3
 800a3f2:	f340 80f7 	ble.w	800a5e4 <__ieee754_powf+0x488>
 800a3f6:	3201      	adds	r2, #1
 800a3f8:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 800a3fc:	2700      	movs	r7, #0
 800a3fe:	4b7c      	ldr	r3, [pc, #496]	; (800a5f0 <__ieee754_powf+0x494>)
 800a400:	4630      	mov	r0, r6
 800a402:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800a406:	9205      	str	r2, [sp, #20]
 800a408:	4619      	mov	r1, r3
 800a40a:	9302      	str	r3, [sp, #8]
 800a40c:	f7f6 fb64 	bl	8000ad8 <__aeabi_fsub>
 800a410:	9902      	ldr	r1, [sp, #8]
 800a412:	4683      	mov	fp, r0
 800a414:	4630      	mov	r0, r6
 800a416:	f7f6 fb61 	bl	8000adc <__addsf3>
 800a41a:	4601      	mov	r1, r0
 800a41c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a420:	f7f6 fd18 	bl	8000e54 <__aeabi_fdiv>
 800a424:	4601      	mov	r1, r0
 800a426:	9004      	str	r0, [sp, #16]
 800a428:	4658      	mov	r0, fp
 800a42a:	f7f6 fc5f 	bl	8000cec <__aeabi_fmul>
 800a42e:	46b2      	mov	sl, r6
 800a430:	1076      	asrs	r6, r6, #1
 800a432:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800a436:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800a43a:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 800a43e:	f028 080f 	bic.w	r8, r8, #15
 800a442:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 800a446:	4681      	mov	r9, r0
 800a448:	4631      	mov	r1, r6
 800a44a:	4640      	mov	r0, r8
 800a44c:	f7f6 fc4e 	bl	8000cec <__aeabi_fmul>
 800a450:	4601      	mov	r1, r0
 800a452:	4658      	mov	r0, fp
 800a454:	f7f6 fb40 	bl	8000ad8 <__aeabi_fsub>
 800a458:	9902      	ldr	r1, [sp, #8]
 800a45a:	4683      	mov	fp, r0
 800a45c:	4630      	mov	r0, r6
 800a45e:	f7f6 fb3b 	bl	8000ad8 <__aeabi_fsub>
 800a462:	4601      	mov	r1, r0
 800a464:	4650      	mov	r0, sl
 800a466:	f7f6 fb37 	bl	8000ad8 <__aeabi_fsub>
 800a46a:	4641      	mov	r1, r8
 800a46c:	f7f6 fc3e 	bl	8000cec <__aeabi_fmul>
 800a470:	4601      	mov	r1, r0
 800a472:	4658      	mov	r0, fp
 800a474:	f7f6 fb30 	bl	8000ad8 <__aeabi_fsub>
 800a478:	9b04      	ldr	r3, [sp, #16]
 800a47a:	4619      	mov	r1, r3
 800a47c:	f7f6 fc36 	bl	8000cec <__aeabi_fmul>
 800a480:	4649      	mov	r1, r9
 800a482:	4683      	mov	fp, r0
 800a484:	4648      	mov	r0, r9
 800a486:	f7f6 fc31 	bl	8000cec <__aeabi_fmul>
 800a48a:	4606      	mov	r6, r0
 800a48c:	4959      	ldr	r1, [pc, #356]	; (800a5f4 <__ieee754_powf+0x498>)
 800a48e:	f7f6 fc2d 	bl	8000cec <__aeabi_fmul>
 800a492:	4959      	ldr	r1, [pc, #356]	; (800a5f8 <__ieee754_powf+0x49c>)
 800a494:	f7f6 fb22 	bl	8000adc <__addsf3>
 800a498:	4631      	mov	r1, r6
 800a49a:	f7f6 fc27 	bl	8000cec <__aeabi_fmul>
 800a49e:	4957      	ldr	r1, [pc, #348]	; (800a5fc <__ieee754_powf+0x4a0>)
 800a4a0:	f7f6 fb1c 	bl	8000adc <__addsf3>
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	f7f6 fc21 	bl	8000cec <__aeabi_fmul>
 800a4aa:	4955      	ldr	r1, [pc, #340]	; (800a600 <__ieee754_powf+0x4a4>)
 800a4ac:	f7f6 fb16 	bl	8000adc <__addsf3>
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	f7f6 fc1b 	bl	8000cec <__aeabi_fmul>
 800a4b6:	4953      	ldr	r1, [pc, #332]	; (800a604 <__ieee754_powf+0x4a8>)
 800a4b8:	f7f6 fb10 	bl	8000adc <__addsf3>
 800a4bc:	4631      	mov	r1, r6
 800a4be:	f7f6 fc15 	bl	8000cec <__aeabi_fmul>
 800a4c2:	4951      	ldr	r1, [pc, #324]	; (800a608 <__ieee754_powf+0x4ac>)
 800a4c4:	f7f6 fb0a 	bl	8000adc <__addsf3>
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	4682      	mov	sl, r0
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f7f6 fc0d 	bl	8000cec <__aeabi_fmul>
 800a4d2:	4601      	mov	r1, r0
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	f7f6 fc09 	bl	8000cec <__aeabi_fmul>
 800a4da:	4606      	mov	r6, r0
 800a4dc:	4649      	mov	r1, r9
 800a4de:	4640      	mov	r0, r8
 800a4e0:	f7f6 fafc 	bl	8000adc <__addsf3>
 800a4e4:	4659      	mov	r1, fp
 800a4e6:	f7f6 fc01 	bl	8000cec <__aeabi_fmul>
 800a4ea:	4631      	mov	r1, r6
 800a4ec:	f7f6 faf6 	bl	8000adc <__addsf3>
 800a4f0:	4641      	mov	r1, r8
 800a4f2:	4682      	mov	sl, r0
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	f7f6 fbf9 	bl	8000cec <__aeabi_fmul>
 800a4fa:	4944      	ldr	r1, [pc, #272]	; (800a60c <__ieee754_powf+0x4b0>)
 800a4fc:	9002      	str	r0, [sp, #8]
 800a4fe:	f7f6 faed 	bl	8000adc <__addsf3>
 800a502:	4651      	mov	r1, sl
 800a504:	f7f6 faea 	bl	8000adc <__addsf3>
 800a508:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 800a50c:	f026 060f 	bic.w	r6, r6, #15
 800a510:	4631      	mov	r1, r6
 800a512:	4640      	mov	r0, r8
 800a514:	f7f6 fbea 	bl	8000cec <__aeabi_fmul>
 800a518:	493c      	ldr	r1, [pc, #240]	; (800a60c <__ieee754_powf+0x4b0>)
 800a51a:	4680      	mov	r8, r0
 800a51c:	4630      	mov	r0, r6
 800a51e:	f7f6 fadb 	bl	8000ad8 <__aeabi_fsub>
 800a522:	9b02      	ldr	r3, [sp, #8]
 800a524:	4619      	mov	r1, r3
 800a526:	f7f6 fad7 	bl	8000ad8 <__aeabi_fsub>
 800a52a:	4601      	mov	r1, r0
 800a52c:	4650      	mov	r0, sl
 800a52e:	f7f6 fad3 	bl	8000ad8 <__aeabi_fsub>
 800a532:	4649      	mov	r1, r9
 800a534:	f7f6 fbda 	bl	8000cec <__aeabi_fmul>
 800a538:	4659      	mov	r1, fp
 800a53a:	4681      	mov	r9, r0
 800a53c:	4630      	mov	r0, r6
 800a53e:	f7f6 fbd5 	bl	8000cec <__aeabi_fmul>
 800a542:	4601      	mov	r1, r0
 800a544:	4648      	mov	r0, r9
 800a546:	f7f6 fac9 	bl	8000adc <__addsf3>
 800a54a:	4682      	mov	sl, r0
 800a54c:	4601      	mov	r1, r0
 800a54e:	4640      	mov	r0, r8
 800a550:	f7f6 fac4 	bl	8000adc <__addsf3>
 800a554:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800a558:	f029 090f 	bic.w	r9, r9, #15
 800a55c:	492c      	ldr	r1, [pc, #176]	; (800a610 <__ieee754_powf+0x4b4>)
 800a55e:	4648      	mov	r0, r9
 800a560:	f7f6 fbc4 	bl	8000cec <__aeabi_fmul>
 800a564:	4641      	mov	r1, r8
 800a566:	4606      	mov	r6, r0
 800a568:	4648      	mov	r0, r9
 800a56a:	f7f6 fab5 	bl	8000ad8 <__aeabi_fsub>
 800a56e:	4601      	mov	r1, r0
 800a570:	4650      	mov	r0, sl
 800a572:	f7f6 fab1 	bl	8000ad8 <__aeabi_fsub>
 800a576:	4927      	ldr	r1, [pc, #156]	; (800a614 <__ieee754_powf+0x4b8>)
 800a578:	f7f6 fbb8 	bl	8000cec <__aeabi_fmul>
 800a57c:	4926      	ldr	r1, [pc, #152]	; (800a618 <__ieee754_powf+0x4bc>)
 800a57e:	4680      	mov	r8, r0
 800a580:	4648      	mov	r0, r9
 800a582:	f7f6 fbb3 	bl	8000cec <__aeabi_fmul>
 800a586:	4601      	mov	r1, r0
 800a588:	4640      	mov	r0, r8
 800a58a:	f7f6 faa7 	bl	8000adc <__addsf3>
 800a58e:	4b23      	ldr	r3, [pc, #140]	; (800a61c <__ieee754_powf+0x4c0>)
 800a590:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800a594:	f7f6 faa2 	bl	8000adc <__addsf3>
 800a598:	9a05      	ldr	r2, [sp, #20]
 800a59a:	4680      	mov	r8, r0
 800a59c:	4610      	mov	r0, r2
 800a59e:	f7f6 fb51 	bl	8000c44 <__aeabi_i2f>
 800a5a2:	4681      	mov	r9, r0
 800a5a4:	4b1e      	ldr	r3, [pc, #120]	; (800a620 <__ieee754_powf+0x4c4>)
 800a5a6:	4641      	mov	r1, r8
 800a5a8:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f7f6 fa95 	bl	8000adc <__addsf3>
 800a5b2:	4639      	mov	r1, r7
 800a5b4:	f7f6 fa92 	bl	8000adc <__addsf3>
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	f7f6 fa8f 	bl	8000adc <__addsf3>
 800a5be:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800a5c2:	f02a 0a0f 	bic.w	sl, sl, #15
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	4650      	mov	r0, sl
 800a5ca:	f7f6 fa85 	bl	8000ad8 <__aeabi_fsub>
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	f7f6 fa82 	bl	8000ad8 <__aeabi_fsub>
 800a5d4:	4631      	mov	r1, r6
 800a5d6:	f7f6 fa7f 	bl	8000ad8 <__aeabi_fsub>
 800a5da:	4601      	mov	r1, r0
 800a5dc:	4640      	mov	r0, r8
 800a5de:	e6a4      	b.n	800a32a <__ieee754_powf+0x1ce>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	e6fa      	b.n	800a3da <__ieee754_powf+0x27e>
 800a5e4:	2701      	movs	r7, #1
 800a5e6:	e70a      	b.n	800a3fe <__ieee754_powf+0x2a2>
 800a5e8:	001cc471 	.word	0x001cc471
 800a5ec:	005db3d6 	.word	0x005db3d6
 800a5f0:	0800b6c8 	.word	0x0800b6c8
 800a5f4:	3e53f142 	.word	0x3e53f142
 800a5f8:	3e6c3255 	.word	0x3e6c3255
 800a5fc:	3e8ba305 	.word	0x3e8ba305
 800a600:	3eaaaaab 	.word	0x3eaaaaab
 800a604:	3edb6db7 	.word	0x3edb6db7
 800a608:	3f19999a 	.word	0x3f19999a
 800a60c:	40400000 	.word	0x40400000
 800a610:	3f763800 	.word	0x3f763800
 800a614:	3f76384f 	.word	0x3f76384f
 800a618:	369dc3a0 	.word	0x369dc3a0
 800a61c:	0800b6d8 	.word	0x0800b6d8
 800a620:	0800b6d0 	.word	0x0800b6d0
 800a624:	f040 80c1 	bne.w	800a7aa <__ieee754_powf+0x64e>
 800a628:	4966      	ldr	r1, [pc, #408]	; (800a7c4 <__ieee754_powf+0x668>)
 800a62a:	4630      	mov	r0, r6
 800a62c:	f7f6 fa56 	bl	8000adc <__addsf3>
 800a630:	4639      	mov	r1, r7
 800a632:	4681      	mov	r9, r0
 800a634:	4650      	mov	r0, sl
 800a636:	f7f6 fa4f 	bl	8000ad8 <__aeabi_fsub>
 800a63a:	4601      	mov	r1, r0
 800a63c:	4648      	mov	r0, r9
 800a63e:	f7f6 fd11 	bl	8001064 <__aeabi_fcmpgt>
 800a642:	2800      	cmp	r0, #0
 800a644:	f47f aea5 	bne.w	800a392 <__ieee754_powf+0x236>
 800a648:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a64c:	15e4      	asrs	r4, r4, #23
 800a64e:	3c7e      	subs	r4, #126	; 0x7e
 800a650:	4123      	asrs	r3, r4
 800a652:	4443      	add	r3, r8
 800a654:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a658:	495b      	ldr	r1, [pc, #364]	; (800a7c8 <__ieee754_powf+0x66c>)
 800a65a:	3a7f      	subs	r2, #127	; 0x7f
 800a65c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800a660:	4111      	asrs	r1, r2
 800a662:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800a666:	f1c2 0217 	rsb	r2, r2, #23
 800a66a:	4114      	asrs	r4, r2
 800a66c:	f1b8 0f00 	cmp.w	r8, #0
 800a670:	ea23 0101 	bic.w	r1, r3, r1
 800a674:	4638      	mov	r0, r7
 800a676:	bfb8      	it	lt
 800a678:	4264      	neglt	r4, r4
 800a67a:	f7f6 fa2d 	bl	8000ad8 <__aeabi_fsub>
 800a67e:	4681      	mov	r9, r0
 800a680:	4631      	mov	r1, r6
 800a682:	4648      	mov	r0, r9
 800a684:	f7f6 fa2a 	bl	8000adc <__addsf3>
 800a688:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800a68c:	f027 070f 	bic.w	r7, r7, #15
 800a690:	494e      	ldr	r1, [pc, #312]	; (800a7cc <__ieee754_powf+0x670>)
 800a692:	4638      	mov	r0, r7
 800a694:	f7f6 fb2a 	bl	8000cec <__aeabi_fmul>
 800a698:	4649      	mov	r1, r9
 800a69a:	4680      	mov	r8, r0
 800a69c:	4638      	mov	r0, r7
 800a69e:	f7f6 fa1b 	bl	8000ad8 <__aeabi_fsub>
 800a6a2:	4601      	mov	r1, r0
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7f6 fa17 	bl	8000ad8 <__aeabi_fsub>
 800a6aa:	4949      	ldr	r1, [pc, #292]	; (800a7d0 <__ieee754_powf+0x674>)
 800a6ac:	f7f6 fb1e 	bl	8000cec <__aeabi_fmul>
 800a6b0:	4948      	ldr	r1, [pc, #288]	; (800a7d4 <__ieee754_powf+0x678>)
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	4638      	mov	r0, r7
 800a6b6:	f7f6 fb19 	bl	8000cec <__aeabi_fmul>
 800a6ba:	4601      	mov	r1, r0
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7f6 fa0d 	bl	8000adc <__addsf3>
 800a6c2:	4607      	mov	r7, r0
 800a6c4:	4601      	mov	r1, r0
 800a6c6:	4640      	mov	r0, r8
 800a6c8:	f7f6 fa08 	bl	8000adc <__addsf3>
 800a6cc:	4641      	mov	r1, r8
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	f7f6 fa02 	bl	8000ad8 <__aeabi_fsub>
 800a6d4:	4601      	mov	r1, r0
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	f7f6 f9fe 	bl	8000ad8 <__aeabi_fsub>
 800a6dc:	4631      	mov	r1, r6
 800a6de:	4680      	mov	r8, r0
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	f7f6 fb03 	bl	8000cec <__aeabi_fmul>
 800a6e6:	4607      	mov	r7, r0
 800a6e8:	493b      	ldr	r1, [pc, #236]	; (800a7d8 <__ieee754_powf+0x67c>)
 800a6ea:	f7f6 faff 	bl	8000cec <__aeabi_fmul>
 800a6ee:	493b      	ldr	r1, [pc, #236]	; (800a7dc <__ieee754_powf+0x680>)
 800a6f0:	f7f6 f9f2 	bl	8000ad8 <__aeabi_fsub>
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	f7f6 faf9 	bl	8000cec <__aeabi_fmul>
 800a6fa:	4939      	ldr	r1, [pc, #228]	; (800a7e0 <__ieee754_powf+0x684>)
 800a6fc:	f7f6 f9ee 	bl	8000adc <__addsf3>
 800a700:	4639      	mov	r1, r7
 800a702:	f7f6 faf3 	bl	8000cec <__aeabi_fmul>
 800a706:	4937      	ldr	r1, [pc, #220]	; (800a7e4 <__ieee754_powf+0x688>)
 800a708:	f7f6 f9e6 	bl	8000ad8 <__aeabi_fsub>
 800a70c:	4639      	mov	r1, r7
 800a70e:	f7f6 faed 	bl	8000cec <__aeabi_fmul>
 800a712:	4935      	ldr	r1, [pc, #212]	; (800a7e8 <__ieee754_powf+0x68c>)
 800a714:	f7f6 f9e2 	bl	8000adc <__addsf3>
 800a718:	4639      	mov	r1, r7
 800a71a:	f7f6 fae7 	bl	8000cec <__aeabi_fmul>
 800a71e:	4601      	mov	r1, r0
 800a720:	4630      	mov	r0, r6
 800a722:	f7f6 f9d9 	bl	8000ad8 <__aeabi_fsub>
 800a726:	4607      	mov	r7, r0
 800a728:	4601      	mov	r1, r0
 800a72a:	4630      	mov	r0, r6
 800a72c:	f7f6 fade 	bl	8000cec <__aeabi_fmul>
 800a730:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a734:	4681      	mov	r9, r0
 800a736:	4638      	mov	r0, r7
 800a738:	f7f6 f9ce 	bl	8000ad8 <__aeabi_fsub>
 800a73c:	4601      	mov	r1, r0
 800a73e:	4648      	mov	r0, r9
 800a740:	f7f6 fb88 	bl	8000e54 <__aeabi_fdiv>
 800a744:	4641      	mov	r1, r8
 800a746:	4607      	mov	r7, r0
 800a748:	4630      	mov	r0, r6
 800a74a:	f7f6 facf 	bl	8000cec <__aeabi_fmul>
 800a74e:	4641      	mov	r1, r8
 800a750:	f7f6 f9c4 	bl	8000adc <__addsf3>
 800a754:	4601      	mov	r1, r0
 800a756:	4638      	mov	r0, r7
 800a758:	f7f6 f9be 	bl	8000ad8 <__aeabi_fsub>
 800a75c:	4631      	mov	r1, r6
 800a75e:	f7f6 f9bb 	bl	8000ad8 <__aeabi_fsub>
 800a762:	4601      	mov	r1, r0
 800a764:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a768:	f7f6 f9b6 	bl	8000ad8 <__aeabi_fsub>
 800a76c:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800a770:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a774:	da1f      	bge.n	800a7b6 <__ieee754_powf+0x65a>
 800a776:	4621      	mov	r1, r4
 800a778:	f000 fab4 	bl	800ace4 <scalbnf>
 800a77c:	4629      	mov	r1, r5
 800a77e:	e54a      	b.n	800a216 <__ieee754_powf+0xba>
 800a780:	4b1a      	ldr	r3, [pc, #104]	; (800a7ec <__ieee754_powf+0x690>)
 800a782:	429c      	cmp	r4, r3
 800a784:	dd05      	ble.n	800a792 <__ieee754_powf+0x636>
 800a786:	491a      	ldr	r1, [pc, #104]	; (800a7f0 <__ieee754_powf+0x694>)
 800a788:	4628      	mov	r0, r5
 800a78a:	f7f6 faaf 	bl	8000cec <__aeabi_fmul>
 800a78e:	4918      	ldr	r1, [pc, #96]	; (800a7f0 <__ieee754_powf+0x694>)
 800a790:	e541      	b.n	800a216 <__ieee754_powf+0xba>
 800a792:	d10a      	bne.n	800a7aa <__ieee754_powf+0x64e>
 800a794:	4639      	mov	r1, r7
 800a796:	f7f6 f99f 	bl	8000ad8 <__aeabi_fsub>
 800a79a:	4601      	mov	r1, r0
 800a79c:	4630      	mov	r0, r6
 800a79e:	f7f6 fc4d 	bl	800103c <__aeabi_fcmple>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	f43f af50 	beq.w	800a648 <__ieee754_powf+0x4ec>
 800a7a8:	e7ed      	b.n	800a786 <__ieee754_powf+0x62a>
 800a7aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a7ae:	f73f af4b 	bgt.w	800a648 <__ieee754_powf+0x4ec>
 800a7b2:	2400      	movs	r4, #0
 800a7b4:	e764      	b.n	800a680 <__ieee754_powf+0x524>
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	e7e0      	b.n	800a77c <__ieee754_powf+0x620>
 800a7ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a7be:	e517      	b.n	800a1f0 <__ieee754_powf+0x94>
 800a7c0:	9901      	ldr	r1, [sp, #4]
 800a7c2:	e515      	b.n	800a1f0 <__ieee754_powf+0x94>
 800a7c4:	3338aa3c 	.word	0x3338aa3c
 800a7c8:	007fffff 	.word	0x007fffff
 800a7cc:	3f317200 	.word	0x3f317200
 800a7d0:	3f317218 	.word	0x3f317218
 800a7d4:	35bfbe8c 	.word	0x35bfbe8c
 800a7d8:	3331bb4c 	.word	0x3331bb4c
 800a7dc:	35ddea0e 	.word	0x35ddea0e
 800a7e0:	388ab355 	.word	0x388ab355
 800a7e4:	3b360b61 	.word	0x3b360b61
 800a7e8:	3e2aaaab 	.word	0x3e2aaaab
 800a7ec:	43160000 	.word	0x43160000
 800a7f0:	0da24260 	.word	0x0da24260

0800a7f4 <__ieee754_sqrtf>:
 800a7f4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a7f8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	4603      	mov	r3, r0
 800a800:	4604      	mov	r4, r0
 800a802:	d309      	bcc.n	800a818 <__ieee754_sqrtf+0x24>
 800a804:	4601      	mov	r1, r0
 800a806:	f7f6 fa71 	bl	8000cec <__aeabi_fmul>
 800a80a:	4601      	mov	r1, r0
 800a80c:	4620      	mov	r0, r4
 800a80e:	f7f6 f965 	bl	8000adc <__addsf3>
 800a812:	4604      	mov	r4, r0
 800a814:	4620      	mov	r0, r4
 800a816:	bd70      	pop	{r4, r5, r6, pc}
 800a818:	2a00      	cmp	r2, #0
 800a81a:	d0fb      	beq.n	800a814 <__ieee754_sqrtf+0x20>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	da06      	bge.n	800a82e <__ieee754_sqrtf+0x3a>
 800a820:	4601      	mov	r1, r0
 800a822:	f7f6 f959 	bl	8000ad8 <__aeabi_fsub>
 800a826:	4601      	mov	r1, r0
 800a828:	f7f6 fb14 	bl	8000e54 <__aeabi_fdiv>
 800a82c:	e7f1      	b.n	800a812 <__ieee754_sqrtf+0x1e>
 800a82e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800a832:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800a836:	d204      	bcs.n	800a842 <__ieee754_sqrtf+0x4e>
 800a838:	2200      	movs	r2, #0
 800a83a:	0219      	lsls	r1, r3, #8
 800a83c:	d529      	bpl.n	800a892 <__ieee754_sqrtf+0x9e>
 800a83e:	3a01      	subs	r2, #1
 800a840:	1aa4      	subs	r4, r4, r2
 800a842:	3c7f      	subs	r4, #127	; 0x7f
 800a844:	07e2      	lsls	r2, r4, #31
 800a846:	f04f 0200 	mov.w	r2, #0
 800a84a:	ea4f 0164 	mov.w	r1, r4, asr #1
 800a84e:	4616      	mov	r6, r2
 800a850:	f04f 0419 	mov.w	r4, #25
 800a854:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a858:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a85c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a860:	bf48      	it	mi
 800a862:	005b      	lslmi	r3, r3, #1
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	1835      	adds	r5, r6, r0
 800a868:	429d      	cmp	r5, r3
 800a86a:	bfde      	ittt	le
 800a86c:	182e      	addle	r6, r5, r0
 800a86e:	1b5b      	suble	r3, r3, r5
 800a870:	1812      	addle	r2, r2, r0
 800a872:	3c01      	subs	r4, #1
 800a874:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a878:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a87c:	d1f3      	bne.n	800a866 <__ieee754_sqrtf+0x72>
 800a87e:	b113      	cbz	r3, 800a886 <__ieee754_sqrtf+0x92>
 800a880:	3201      	adds	r2, #1
 800a882:	f022 0201 	bic.w	r2, r2, #1
 800a886:	1054      	asrs	r4, r2, #1
 800a888:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800a88c:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800a890:	e7c0      	b.n	800a814 <__ieee754_sqrtf+0x20>
 800a892:	005b      	lsls	r3, r3, #1
 800a894:	3201      	adds	r2, #1
 800a896:	e7d0      	b.n	800a83a <__ieee754_sqrtf+0x46>

0800a898 <fabs>:
 800a898:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a89c:	4770      	bx	lr

0800a89e <finite>:
 800a89e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a8a2:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800a8a6:	0fc0      	lsrs	r0, r0, #31
 800a8a8:	4770      	bx	lr

0800a8aa <matherr>:
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	4770      	bx	lr
	...

0800a8b0 <nan>:
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	4901      	ldr	r1, [pc, #4]	; (800a8b8 <nan+0x8>)
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	7ff80000 	.word	0x7ff80000

0800a8bc <rint>:
 800a8bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8be:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 800a8c2:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 800a8c6:	2f13      	cmp	r7, #19
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4684      	mov	ip, r0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800a8d6:	dc56      	bgt.n	800a986 <rint+0xca>
 800a8d8:	2f00      	cmp	r7, #0
 800a8da:	da29      	bge.n	800a930 <rint+0x74>
 800a8dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a8e0:	4301      	orrs	r1, r0
 800a8e2:	d021      	beq.n	800a928 <rint+0x6c>
 800a8e4:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800a8e8:	4305      	orrs	r5, r0
 800a8ea:	426b      	negs	r3, r5
 800a8ec:	432b      	orrs	r3, r5
 800a8ee:	0b1b      	lsrs	r3, r3, #12
 800a8f0:	0c64      	lsrs	r4, r4, #17
 800a8f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a8f6:	0464      	lsls	r4, r4, #17
 800a8f8:	ea43 0104 	orr.w	r1, r3, r4
 800a8fc:	4b31      	ldr	r3, [pc, #196]	; (800a9c4 <rint+0x108>)
 800a8fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a902:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a906:	4622      	mov	r2, r4
 800a908:	462b      	mov	r3, r5
 800a90a:	f7f5 fc2f 	bl	800016c <__adddf3>
 800a90e:	e9cd 0100 	strd	r0, r1, [sp]
 800a912:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a916:	4622      	mov	r2, r4
 800a918:	462b      	mov	r3, r5
 800a91a:	f7f5 fc25 	bl	8000168 <__aeabi_dsub>
 800a91e:	4602      	mov	r2, r0
 800a920:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a924:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 800a928:	4610      	mov	r0, r2
 800a92a:	4619      	mov	r1, r3
 800a92c:	b003      	add	sp, #12
 800a92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a930:	4925      	ldr	r1, [pc, #148]	; (800a9c8 <rint+0x10c>)
 800a932:	4139      	asrs	r1, r7
 800a934:	ea03 0001 	and.w	r0, r3, r1
 800a938:	4310      	orrs	r0, r2
 800a93a:	d0f5      	beq.n	800a928 <rint+0x6c>
 800a93c:	084b      	lsrs	r3, r1, #1
 800a93e:	ea04 0203 	and.w	r2, r4, r3
 800a942:	ea52 050c 	orrs.w	r5, r2, ip
 800a946:	d00a      	beq.n	800a95e <rint+0xa2>
 800a948:	ea24 0303 	bic.w	r3, r4, r3
 800a94c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800a950:	2f13      	cmp	r7, #19
 800a952:	bf0c      	ite	eq
 800a954:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800a958:	2500      	movne	r5, #0
 800a95a:	413c      	asrs	r4, r7
 800a95c:	431c      	orrs	r4, r3
 800a95e:	4b19      	ldr	r3, [pc, #100]	; (800a9c4 <rint+0x108>)
 800a960:	4621      	mov	r1, r4
 800a962:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a966:	4628      	mov	r0, r5
 800a968:	e9d6 4500 	ldrd	r4, r5, [r6]
 800a96c:	4622      	mov	r2, r4
 800a96e:	462b      	mov	r3, r5
 800a970:	f7f5 fbfc 	bl	800016c <__adddf3>
 800a974:	e9cd 0100 	strd	r0, r1, [sp]
 800a978:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a97c:	4622      	mov	r2, r4
 800a97e:	462b      	mov	r3, r5
 800a980:	f7f5 fbf2 	bl	8000168 <__aeabi_dsub>
 800a984:	e006      	b.n	800a994 <rint+0xd8>
 800a986:	2f33      	cmp	r7, #51	; 0x33
 800a988:	dd07      	ble.n	800a99a <rint+0xde>
 800a98a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800a98e:	d1cb      	bne.n	800a928 <rint+0x6c>
 800a990:	f7f5 fbec 	bl	800016c <__adddf3>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	e7c6      	b.n	800a928 <rint+0x6c>
 800a99a:	f04f 31ff 	mov.w	r1, #4294967295
 800a99e:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 800a9a2:	fa21 f10e 	lsr.w	r1, r1, lr
 800a9a6:	4208      	tst	r0, r1
 800a9a8:	d0be      	beq.n	800a928 <rint+0x6c>
 800a9aa:	084b      	lsrs	r3, r1, #1
 800a9ac:	4218      	tst	r0, r3
 800a9ae:	bf1f      	itttt	ne
 800a9b0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800a9b4:	ea20 0303 	bicne.w	r3, r0, r3
 800a9b8:	fa45 fe0e 	asrne.w	lr, r5, lr
 800a9bc:	ea4e 0503 	orrne.w	r5, lr, r3
 800a9c0:	e7cd      	b.n	800a95e <rint+0xa2>
 800a9c2:	bf00      	nop
 800a9c4:	0800b6e0 	.word	0x0800b6e0
 800a9c8:	000fffff 	.word	0x000fffff
 800a9cc:	00000000 	.word	0x00000000

0800a9d0 <scalbn>:
 800a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d2:	4616      	mov	r6, r2
 800a9d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a9d8:	4604      	mov	r4, r0
 800a9da:	460d      	mov	r5, r1
 800a9dc:	460b      	mov	r3, r1
 800a9de:	b98a      	cbnz	r2, 800aa04 <scalbn+0x34>
 800a9e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a9e4:	4303      	orrs	r3, r0
 800a9e6:	d035      	beq.n	800aa54 <scalbn+0x84>
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	4b2d      	ldr	r3, [pc, #180]	; (800aaa0 <scalbn+0xd0>)
 800a9ec:	f7f5 fd70 	bl	80004d0 <__aeabi_dmul>
 800a9f0:	4a2c      	ldr	r2, [pc, #176]	; (800aaa4 <scalbn+0xd4>)
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	4296      	cmp	r6, r2
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	da0e      	bge.n	800aa1a <scalbn+0x4a>
 800a9fc:	a324      	add	r3, pc, #144	; (adr r3, 800aa90 <scalbn+0xc0>)
 800a9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa02:	e01c      	b.n	800aa3e <scalbn+0x6e>
 800aa04:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800aa08:	42ba      	cmp	r2, r7
 800aa0a:	d109      	bne.n	800aa20 <scalbn+0x50>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	f7f5 fbac 	bl	800016c <__adddf3>
 800aa14:	4604      	mov	r4, r0
 800aa16:	460d      	mov	r5, r1
 800aa18:	e01c      	b.n	800aa54 <scalbn+0x84>
 800aa1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa1e:	3a36      	subs	r2, #54	; 0x36
 800aa20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aa24:	4432      	add	r2, r6
 800aa26:	428a      	cmp	r2, r1
 800aa28:	dd0c      	ble.n	800aa44 <scalbn+0x74>
 800aa2a:	4622      	mov	r2, r4
 800aa2c:	462b      	mov	r3, r5
 800aa2e:	a11a      	add	r1, pc, #104	; (adr r1, 800aa98 <scalbn+0xc8>)
 800aa30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa34:	f000 f9a2 	bl	800ad7c <copysign>
 800aa38:	a317      	add	r3, pc, #92	; (adr r3, 800aa98 <scalbn+0xc8>)
 800aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3e:	f7f5 fd47 	bl	80004d0 <__aeabi_dmul>
 800aa42:	e7e7      	b.n	800aa14 <scalbn+0x44>
 800aa44:	2a00      	cmp	r2, #0
 800aa46:	dd08      	ble.n	800aa5a <scalbn+0x8a>
 800aa48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa54:	4620      	mov	r0, r4
 800aa56:	4629      	mov	r1, r5
 800aa58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa5a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa5e:	da0b      	bge.n	800aa78 <scalbn+0xa8>
 800aa60:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa64:	429e      	cmp	r6, r3
 800aa66:	4622      	mov	r2, r4
 800aa68:	462b      	mov	r3, r5
 800aa6a:	dce0      	bgt.n	800aa2e <scalbn+0x5e>
 800aa6c:	a108      	add	r1, pc, #32	; (adr r1, 800aa90 <scalbn+0xc0>)
 800aa6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa72:	f000 f983 	bl	800ad7c <copysign>
 800aa76:	e7c1      	b.n	800a9fc <scalbn+0x2c>
 800aa78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa7c:	3236      	adds	r2, #54	; 0x36
 800aa7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa86:	4620      	mov	r0, r4
 800aa88:	4629      	mov	r1, r5
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <scalbn+0xd8>)
 800aa8e:	e7d6      	b.n	800aa3e <scalbn+0x6e>
 800aa90:	c2f8f359 	.word	0xc2f8f359
 800aa94:	01a56e1f 	.word	0x01a56e1f
 800aa98:	8800759c 	.word	0x8800759c
 800aa9c:	7e37e43c 	.word	0x7e37e43c
 800aaa0:	43500000 	.word	0x43500000
 800aaa4:	ffff3cb0 	.word	0xffff3cb0
 800aaa8:	3c900000 	.word	0x3c900000

0800aaac <atanf>:
 800aaac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800aab4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800aab8:	4604      	mov	r4, r0
 800aaba:	4607      	mov	r7, r0
 800aabc:	db0e      	blt.n	800aadc <atanf+0x30>
 800aabe:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800aac2:	dd04      	ble.n	800aace <atanf+0x22>
 800aac4:	4601      	mov	r1, r0
 800aac6:	f7f6 f809 	bl	8000adc <__addsf3>
 800aaca:	4604      	mov	r4, r0
 800aacc:	e003      	b.n	800aad6 <atanf+0x2a>
 800aace:	2800      	cmp	r0, #0
 800aad0:	f300 80d2 	bgt.w	800ac78 <atanf+0x1cc>
 800aad4:	4c69      	ldr	r4, [pc, #420]	; (800ac7c <atanf+0x1d0>)
 800aad6:	4620      	mov	r0, r4
 800aad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aadc:	4b68      	ldr	r3, [pc, #416]	; (800ac80 <atanf+0x1d4>)
 800aade:	429d      	cmp	r5, r3
 800aae0:	dc0e      	bgt.n	800ab00 <atanf+0x54>
 800aae2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800aae6:	da08      	bge.n	800aafa <atanf+0x4e>
 800aae8:	4966      	ldr	r1, [pc, #408]	; (800ac84 <atanf+0x1d8>)
 800aaea:	f7f5 fff7 	bl	8000adc <__addsf3>
 800aaee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aaf2:	f7f6 fab7 	bl	8001064 <__aeabi_fcmpgt>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d1ed      	bne.n	800aad6 <atanf+0x2a>
 800aafa:	f04f 36ff 	mov.w	r6, #4294967295
 800aafe:	e01c      	b.n	800ab3a <atanf+0x8e>
 800ab00:	f000 f8e4 	bl	800accc <fabsf>
 800ab04:	4b60      	ldr	r3, [pc, #384]	; (800ac88 <atanf+0x1dc>)
 800ab06:	4604      	mov	r4, r0
 800ab08:	429d      	cmp	r5, r3
 800ab0a:	dc7c      	bgt.n	800ac06 <atanf+0x15a>
 800ab0c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ab10:	429d      	cmp	r5, r3
 800ab12:	dc67      	bgt.n	800abe4 <atanf+0x138>
 800ab14:	4601      	mov	r1, r0
 800ab16:	f7f5 ffe1 	bl	8000adc <__addsf3>
 800ab1a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ab1e:	f7f5 ffdb 	bl	8000ad8 <__aeabi_fsub>
 800ab22:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ab26:	4605      	mov	r5, r0
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f7f5 ffd7 	bl	8000adc <__addsf3>
 800ab2e:	4601      	mov	r1, r0
 800ab30:	4628      	mov	r0, r5
 800ab32:	f7f6 f98f 	bl	8000e54 <__aeabi_fdiv>
 800ab36:	2600      	movs	r6, #0
 800ab38:	4604      	mov	r4, r0
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f7f6 f8d5 	bl	8000cec <__aeabi_fmul>
 800ab42:	4601      	mov	r1, r0
 800ab44:	4680      	mov	r8, r0
 800ab46:	f7f6 f8d1 	bl	8000cec <__aeabi_fmul>
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	494f      	ldr	r1, [pc, #316]	; (800ac8c <atanf+0x1e0>)
 800ab4e:	f7f6 f8cd 	bl	8000cec <__aeabi_fmul>
 800ab52:	494f      	ldr	r1, [pc, #316]	; (800ac90 <atanf+0x1e4>)
 800ab54:	f7f5 ffc2 	bl	8000adc <__addsf3>
 800ab58:	4629      	mov	r1, r5
 800ab5a:	f7f6 f8c7 	bl	8000cec <__aeabi_fmul>
 800ab5e:	494d      	ldr	r1, [pc, #308]	; (800ac94 <atanf+0x1e8>)
 800ab60:	f7f5 ffbc 	bl	8000adc <__addsf3>
 800ab64:	4629      	mov	r1, r5
 800ab66:	f7f6 f8c1 	bl	8000cec <__aeabi_fmul>
 800ab6a:	494b      	ldr	r1, [pc, #300]	; (800ac98 <atanf+0x1ec>)
 800ab6c:	f7f5 ffb6 	bl	8000adc <__addsf3>
 800ab70:	4629      	mov	r1, r5
 800ab72:	f7f6 f8bb 	bl	8000cec <__aeabi_fmul>
 800ab76:	4949      	ldr	r1, [pc, #292]	; (800ac9c <atanf+0x1f0>)
 800ab78:	f7f5 ffb0 	bl	8000adc <__addsf3>
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	f7f6 f8b5 	bl	8000cec <__aeabi_fmul>
 800ab82:	4947      	ldr	r1, [pc, #284]	; (800aca0 <atanf+0x1f4>)
 800ab84:	f7f5 ffaa 	bl	8000adc <__addsf3>
 800ab88:	4641      	mov	r1, r8
 800ab8a:	f7f6 f8af 	bl	8000cec <__aeabi_fmul>
 800ab8e:	4945      	ldr	r1, [pc, #276]	; (800aca4 <atanf+0x1f8>)
 800ab90:	4680      	mov	r8, r0
 800ab92:	4628      	mov	r0, r5
 800ab94:	f7f6 f8aa 	bl	8000cec <__aeabi_fmul>
 800ab98:	4943      	ldr	r1, [pc, #268]	; (800aca8 <atanf+0x1fc>)
 800ab9a:	f7f5 ff9d 	bl	8000ad8 <__aeabi_fsub>
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f7f6 f8a4 	bl	8000cec <__aeabi_fmul>
 800aba4:	4941      	ldr	r1, [pc, #260]	; (800acac <atanf+0x200>)
 800aba6:	f7f5 ff97 	bl	8000ad8 <__aeabi_fsub>
 800abaa:	4629      	mov	r1, r5
 800abac:	f7f6 f89e 	bl	8000cec <__aeabi_fmul>
 800abb0:	493f      	ldr	r1, [pc, #252]	; (800acb0 <atanf+0x204>)
 800abb2:	f7f5 ff91 	bl	8000ad8 <__aeabi_fsub>
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f6 f898 	bl	8000cec <__aeabi_fmul>
 800abbc:	493d      	ldr	r1, [pc, #244]	; (800acb4 <atanf+0x208>)
 800abbe:	f7f5 ff8b 	bl	8000ad8 <__aeabi_fsub>
 800abc2:	4629      	mov	r1, r5
 800abc4:	f7f6 f892 	bl	8000cec <__aeabi_fmul>
 800abc8:	1c73      	adds	r3, r6, #1
 800abca:	4601      	mov	r1, r0
 800abcc:	4640      	mov	r0, r8
 800abce:	d139      	bne.n	800ac44 <atanf+0x198>
 800abd0:	f7f5 ff84 	bl	8000adc <__addsf3>
 800abd4:	4621      	mov	r1, r4
 800abd6:	f7f6 f889 	bl	8000cec <__aeabi_fmul>
 800abda:	4601      	mov	r1, r0
 800abdc:	4620      	mov	r0, r4
 800abde:	f7f5 ff7b 	bl	8000ad8 <__aeabi_fsub>
 800abe2:	e772      	b.n	800aaca <atanf+0x1e>
 800abe4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800abe8:	f7f5 ff76 	bl	8000ad8 <__aeabi_fsub>
 800abec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800abf0:	4605      	mov	r5, r0
 800abf2:	4620      	mov	r0, r4
 800abf4:	f7f5 ff72 	bl	8000adc <__addsf3>
 800abf8:	4601      	mov	r1, r0
 800abfa:	4628      	mov	r0, r5
 800abfc:	f7f6 f92a 	bl	8000e54 <__aeabi_fdiv>
 800ac00:	2601      	movs	r6, #1
 800ac02:	4604      	mov	r4, r0
 800ac04:	e799      	b.n	800ab3a <atanf+0x8e>
 800ac06:	4b2c      	ldr	r3, [pc, #176]	; (800acb8 <atanf+0x20c>)
 800ac08:	429d      	cmp	r5, r3
 800ac0a:	dc14      	bgt.n	800ac36 <atanf+0x18a>
 800ac0c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800ac10:	f7f5 ff62 	bl	8000ad8 <__aeabi_fsub>
 800ac14:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800ac18:	4605      	mov	r5, r0
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f7f6 f866 	bl	8000cec <__aeabi_fmul>
 800ac20:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ac24:	f7f5 ff5a 	bl	8000adc <__addsf3>
 800ac28:	4601      	mov	r1, r0
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f7f6 f912 	bl	8000e54 <__aeabi_fdiv>
 800ac30:	2602      	movs	r6, #2
 800ac32:	4604      	mov	r4, r0
 800ac34:	e781      	b.n	800ab3a <atanf+0x8e>
 800ac36:	4601      	mov	r1, r0
 800ac38:	4820      	ldr	r0, [pc, #128]	; (800acbc <atanf+0x210>)
 800ac3a:	f7f6 f90b 	bl	8000e54 <__aeabi_fdiv>
 800ac3e:	2603      	movs	r6, #3
 800ac40:	4604      	mov	r4, r0
 800ac42:	e77a      	b.n	800ab3a <atanf+0x8e>
 800ac44:	f7f5 ff4a 	bl	8000adc <__addsf3>
 800ac48:	4621      	mov	r1, r4
 800ac4a:	f7f6 f84f 	bl	8000cec <__aeabi_fmul>
 800ac4e:	4b1c      	ldr	r3, [pc, #112]	; (800acc0 <atanf+0x214>)
 800ac50:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800ac54:	f7f5 ff40 	bl	8000ad8 <__aeabi_fsub>
 800ac58:	4621      	mov	r1, r4
 800ac5a:	f7f5 ff3d 	bl	8000ad8 <__aeabi_fsub>
 800ac5e:	4b19      	ldr	r3, [pc, #100]	; (800acc4 <atanf+0x218>)
 800ac60:	4601      	mov	r1, r0
 800ac62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ac66:	f7f5 ff37 	bl	8000ad8 <__aeabi_fsub>
 800ac6a:	2f00      	cmp	r7, #0
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	f6bf af32 	bge.w	800aad6 <atanf+0x2a>
 800ac72:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800ac76:	e72e      	b.n	800aad6 <atanf+0x2a>
 800ac78:	4c13      	ldr	r4, [pc, #76]	; (800acc8 <atanf+0x21c>)
 800ac7a:	e72c      	b.n	800aad6 <atanf+0x2a>
 800ac7c:	bfc90fdb 	.word	0xbfc90fdb
 800ac80:	3edfffff 	.word	0x3edfffff
 800ac84:	7149f2ca 	.word	0x7149f2ca
 800ac88:	3f97ffff 	.word	0x3f97ffff
 800ac8c:	3c8569d7 	.word	0x3c8569d7
 800ac90:	3d4bda59 	.word	0x3d4bda59
 800ac94:	3d886b35 	.word	0x3d886b35
 800ac98:	3dba2e6e 	.word	0x3dba2e6e
 800ac9c:	3e124925 	.word	0x3e124925
 800aca0:	3eaaaaab 	.word	0x3eaaaaab
 800aca4:	bd15a221 	.word	0xbd15a221
 800aca8:	3d6ef16b 	.word	0x3d6ef16b
 800acac:	3d9d8795 	.word	0x3d9d8795
 800acb0:	3de38e38 	.word	0x3de38e38
 800acb4:	3e4ccccd 	.word	0x3e4ccccd
 800acb8:	401bffff 	.word	0x401bffff
 800acbc:	bf800000 	.word	0xbf800000
 800acc0:	0800b700 	.word	0x0800b700
 800acc4:	0800b6f0 	.word	0x0800b6f0
 800acc8:	3fc90fdb 	.word	0x3fc90fdb

0800accc <fabsf>:
 800accc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800acd0:	4770      	bx	lr

0800acd2 <finitef>:
 800acd2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800acd6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800acda:	bfac      	ite	ge
 800acdc:	2000      	movge	r0, #0
 800acde:	2001      	movlt	r0, #1
 800ace0:	4770      	bx	lr
	...

0800ace4 <scalbnf>:
 800ace4:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800ace8:	b510      	push	{r4, lr}
 800acea:	4602      	mov	r2, r0
 800acec:	460c      	mov	r4, r1
 800acee:	d028      	beq.n	800ad42 <scalbnf+0x5e>
 800acf0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800acf4:	d304      	bcc.n	800ad00 <scalbnf+0x1c>
 800acf6:	4601      	mov	r1, r0
 800acf8:	f7f5 fef0 	bl	8000adc <__addsf3>
 800acfc:	4602      	mov	r2, r0
 800acfe:	e020      	b.n	800ad42 <scalbnf+0x5e>
 800ad00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad04:	d215      	bcs.n	800ad32 <scalbnf+0x4e>
 800ad06:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800ad0a:	f7f5 ffef 	bl	8000cec <__aeabi_fmul>
 800ad0e:	4b18      	ldr	r3, [pc, #96]	; (800ad70 <scalbnf+0x8c>)
 800ad10:	4602      	mov	r2, r0
 800ad12:	429c      	cmp	r4, r3
 800ad14:	db22      	blt.n	800ad5c <scalbnf+0x78>
 800ad16:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ad1a:	3b19      	subs	r3, #25
 800ad1c:	4423      	add	r3, r4
 800ad1e:	2bfe      	cmp	r3, #254	; 0xfe
 800ad20:	dd09      	ble.n	800ad36 <scalbnf+0x52>
 800ad22:	4611      	mov	r1, r2
 800ad24:	4813      	ldr	r0, [pc, #76]	; (800ad74 <scalbnf+0x90>)
 800ad26:	f000 f830 	bl	800ad8a <copysignf>
 800ad2a:	4912      	ldr	r1, [pc, #72]	; (800ad74 <scalbnf+0x90>)
 800ad2c:	f7f5 ffde 	bl	8000cec <__aeabi_fmul>
 800ad30:	e7e4      	b.n	800acfc <scalbnf+0x18>
 800ad32:	0ddb      	lsrs	r3, r3, #23
 800ad34:	e7f2      	b.n	800ad1c <scalbnf+0x38>
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	dd05      	ble.n	800ad46 <scalbnf+0x62>
 800ad3a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800ad3e:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800ad42:	4610      	mov	r0, r2
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	f113 0f16 	cmn.w	r3, #22
 800ad4a:	da09      	bge.n	800ad60 <scalbnf+0x7c>
 800ad4c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ad50:	429c      	cmp	r4, r3
 800ad52:	4611      	mov	r1, r2
 800ad54:	dce6      	bgt.n	800ad24 <scalbnf+0x40>
 800ad56:	4808      	ldr	r0, [pc, #32]	; (800ad78 <scalbnf+0x94>)
 800ad58:	f000 f817 	bl	800ad8a <copysignf>
 800ad5c:	4906      	ldr	r1, [pc, #24]	; (800ad78 <scalbnf+0x94>)
 800ad5e:	e7e5      	b.n	800ad2c <scalbnf+0x48>
 800ad60:	3319      	adds	r3, #25
 800ad62:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800ad66:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800ad6a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ad6e:	e7dd      	b.n	800ad2c <scalbnf+0x48>
 800ad70:	ffff3cb0 	.word	0xffff3cb0
 800ad74:	7149f2ca 	.word	0x7149f2ca
 800ad78:	0da24260 	.word	0x0da24260

0800ad7c <copysign>:
 800ad7c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ad80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad84:	ea42 0103 	orr.w	r1, r2, r3
 800ad88:	4770      	bx	lr

0800ad8a <copysignf>:
 800ad8a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ad8e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ad92:	4308      	orrs	r0, r1
 800ad94:	4770      	bx	lr
	...

0800ad98 <__errno>:
 800ad98:	4b01      	ldr	r3, [pc, #4]	; (800ada0 <__errno+0x8>)
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	20000414 	.word	0x20000414

0800ada4 <_sbrk>:
 800ada4:	4b04      	ldr	r3, [pc, #16]	; (800adb8 <_sbrk+0x14>)
 800ada6:	4602      	mov	r2, r0
 800ada8:	6819      	ldr	r1, [r3, #0]
 800adaa:	b909      	cbnz	r1, 800adb0 <_sbrk+0xc>
 800adac:	4903      	ldr	r1, [pc, #12]	; (800adbc <_sbrk+0x18>)
 800adae:	6019      	str	r1, [r3, #0]
 800adb0:	6818      	ldr	r0, [r3, #0]
 800adb2:	4402      	add	r2, r0
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	4770      	bx	lr
 800adb8:	20000748 	.word	0x20000748
 800adbc:	2000112c 	.word	0x2000112c

0800adc0 <_init>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	bf00      	nop
 800adc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc6:	bc08      	pop	{r3}
 800adc8:	469e      	mov	lr, r3
 800adca:	4770      	bx	lr

0800adcc <_fini>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	bf00      	nop
 800add0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add2:	bc08      	pop	{r3}
 800add4:	469e      	mov	lr, r3
 800add6:	4770      	bx	lr
