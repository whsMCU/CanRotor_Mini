
CanRotor_Mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a368  0800db60  0800db60  0001db60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017ec8  08017ec8  00027ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017ed0  08017ed0  00027ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017ed4  08017ed4  00027ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000a88  20000000  08017ed8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cec  20000a88  08018960  00030a88  2**3
                  ALLOC
  8 ._user_heap_stack 00000100  20001774  08018960  00031774  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00030a88  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003d313  00000000  00000000  00030ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005dba  00000000  00000000  0006ddc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e394  00000000  00000000  00073b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010f0  00000000  00000000  00081f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000017b8  00000000  00000000  00083008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000cdd9  00000000  00000000  000847c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005ba4  00000000  00000000  00091599  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009713d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000469c  00000000  00000000  000971bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  0009b858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000a88 	.word	0x20000a88
 800012c:	00000000 	.word	0x00000000
 8000130:	0800db48 	.word	0x0800db48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000a8c 	.word	0x20000a8c
 800014c:	0800db48 	.word	0x0800db48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	; 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	d1ed      	bne.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_fmul>:
 8000d3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d44:	bf1e      	ittt	ne
 8000d46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4a:	ea92 0f0c 	teqne	r2, ip
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d06f      	beq.n	8000e34 <__aeabi_fmul+0xf8>
 8000d54:	441a      	add	r2, r3
 8000d56:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5a:	0240      	lsls	r0, r0, #9
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d62:	d01e      	beq.n	8000da2 <__aeabi_fmul+0x66>
 8000d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d70:	fba0 3101 	umull	r3, r1, r0, r1
 8000d74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d7c:	bf3e      	ittt	cc
 8000d7e:	0049      	lslcc	r1, r1, #1
 8000d80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d84:	005b      	lslcc	r3, r3, #1
 8000d86:	ea40 0001 	orr.w	r0, r0, r1
 8000d8a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d8e:	2afd      	cmp	r2, #253	; 0xfd
 8000d90:	d81d      	bhi.n	8000dce <__aeabi_fmul+0x92>
 8000d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9a:	bf08      	it	eq
 8000d9c:	f020 0001 	biceq.w	r0, r0, #1
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000daa:	bf08      	it	eq
 8000dac:	0249      	lsleq	r1, r1, #9
 8000dae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db6:	3a7f      	subs	r2, #127	; 0x7f
 8000db8:	bfc2      	ittt	gt
 8000dba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc2:	4770      	bxgt	lr
 8000dc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	dc5d      	bgt.n	8000e8c <__aeabi_fmul+0x150>
 8000dd0:	f112 0f19 	cmn.w	r2, #25
 8000dd4:	bfdc      	itt	le
 8000dd6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dda:	4770      	bxle	lr
 8000ddc:	f1c2 0200 	rsb	r2, r2, #0
 8000de0:	0041      	lsls	r1, r0, #1
 8000de2:	fa21 f102 	lsr.w	r1, r1, r2
 8000de6:	f1c2 0220 	rsb	r2, r2, #32
 8000dea:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dee:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df2:	f140 0000 	adc.w	r0, r0, #0
 8000df6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfa:	bf08      	it	eq
 8000dfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e00:	4770      	bx	lr
 8000e02:	f092 0f00 	teq	r2, #0
 8000e06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0040      	lsleq	r0, r0, #1
 8000e0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e12:	3a01      	subeq	r2, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xce>
 8000e16:	ea40 000c 	orr.w	r0, r0, ip
 8000e1a:	f093 0f00 	teq	r3, #0
 8000e1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0049      	lsleq	r1, r1, #1
 8000e26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2a:	3b01      	subeq	r3, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xe6>
 8000e2e:	ea41 010c 	orr.w	r1, r1, ip
 8000e32:	e78f      	b.n	8000d54 <__aeabi_fmul+0x18>
 8000e34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	bf18      	it	ne
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d00a      	beq.n	8000e5a <__aeabi_fmul+0x11e>
 8000e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e48:	bf18      	it	ne
 8000e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	d1d8      	bne.n	8000e02 <__aeabi_fmul+0xc6>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	bf17      	itett	ne
 8000e60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e64:	4608      	moveq	r0, r1
 8000e66:	f091 0f00 	teqne	r1, #0
 8000e6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e6e:	d014      	beq.n	8000e9a <__aeabi_fmul+0x15e>
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d101      	bne.n	8000e7a <__aeabi_fmul+0x13e>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d10f      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e7a:	ea93 0f0c 	teq	r3, ip
 8000e7e:	d103      	bne.n	8000e88 <__aeabi_fmul+0x14c>
 8000e80:	024b      	lsls	r3, r1, #9
 8000e82:	bf18      	it	ne
 8000e84:	4608      	movne	r0, r1
 8000e86:	d108      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e98:	4770      	bx	lr
 8000e9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fdiv>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d069      	beq.n	8000f90 <__aeabi_fdiv+0xec>
 8000ebc:	eba2 0203 	sub.w	r2, r2, r3
 8000ec0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eca:	d037      	beq.n	8000f3c <__aeabi_fdiv+0x98>
 8000ecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000edc:	428b      	cmp	r3, r1
 8000ede:	bf38      	it	cc
 8000ee0:	005b      	lslcc	r3, r3, #1
 8000ee2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ee6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eea:	428b      	cmp	r3, r1
 8000eec:	bf24      	itt	cs
 8000eee:	1a5b      	subcs	r3, r3, r1
 8000ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f06:	bf24      	itt	cs
 8000f08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	bf18      	it	ne
 8000f22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f26:	d1e0      	bne.n	8000eea <__aeabi_fdiv+0x46>
 8000f28:	2afd      	cmp	r2, #253	; 0xfd
 8000f2a:	f63f af50 	bhi.w	8000dce <__aeabi_fmul+0x92>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f34:	bf08      	it	eq
 8000f36:	f020 0001 	biceq.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f44:	327f      	adds	r2, #127	; 0x7f
 8000f46:	bfc2      	ittt	gt
 8000f48:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f50:	4770      	bxgt	lr
 8000f52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	e737      	b.n	8000dce <__aeabi_fmul+0x92>
 8000f5e:	f092 0f00 	teq	r2, #0
 8000f62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0040      	lsleq	r0, r0, #1
 8000f6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f6e:	3a01      	subeq	r2, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xc2>
 8000f72:	ea40 000c 	orr.w	r0, r0, ip
 8000f76:	f093 0f00 	teq	r3, #0
 8000f7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0049      	lsleq	r1, r1, #1
 8000f82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f86:	3b01      	subeq	r3, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xda>
 8000f8a:	ea41 010c 	orr.w	r1, r1, ip
 8000f8e:	e795      	b.n	8000ebc <__aeabi_fdiv+0x18>
 8000f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f94:	ea92 0f0c 	teq	r2, ip
 8000f98:	d108      	bne.n	8000fac <__aeabi_fdiv+0x108>
 8000f9a:	0242      	lsls	r2, r0, #9
 8000f9c:	f47f af7d 	bne.w	8000e9a <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	f47f af70 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e776      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	d104      	bne.n	8000fbc <__aeabi_fdiv+0x118>
 8000fb2:	024b      	lsls	r3, r1, #9
 8000fb4:	f43f af4c 	beq.w	8000e50 <__aeabi_fmul+0x114>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e76e      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1ca      	bne.n	8000f5e <__aeabi_fdiv+0xba>
 8000fc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fcc:	f47f af5c 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fd0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd4:	f47f af3c 	bne.w	8000e50 <__aeabi_fmul+0x114>
 8000fd8:	e75f      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fda:	bf00      	nop

08000fdc <__gesf2>:
 8000fdc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe0:	e006      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__lesf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	e002      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__cmpsf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ffc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001000:	bf18      	it	ne
 8001002:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001006:	d011      	beq.n	800102c <__cmpsf2+0x40>
 8001008:	b001      	add	sp, #4
 800100a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100e:	bf18      	it	ne
 8001010:	ea90 0f01 	teqne	r0, r1
 8001014:	bf58      	it	pl
 8001016:	ebb2 0003 	subspl.w	r0, r2, r3
 800101a:	bf88      	it	hi
 800101c:	17c8      	asrhi	r0, r1, #31
 800101e:	bf38      	it	cc
 8001020:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001024:	bf18      	it	ne
 8001026:	f040 0001 	orrne.w	r0, r0, #1
 800102a:	4770      	bx	lr
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	d102      	bne.n	8001038 <__cmpsf2+0x4c>
 8001032:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001036:	d105      	bne.n	8001044 <__cmpsf2+0x58>
 8001038:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800103c:	d1e4      	bne.n	8001008 <__cmpsf2+0x1c>
 800103e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001042:	d0e1      	beq.n	8001008 <__cmpsf2+0x1c>
 8001044:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__aeabi_cfrcmple>:
 800104c:	4684      	mov	ip, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4661      	mov	r1, ip
 8001052:	e7ff      	b.n	8001054 <__aeabi_cfcmpeq>

08001054 <__aeabi_cfcmpeq>:
 8001054:	b50f      	push	{r0, r1, r2, r3, lr}
 8001056:	f7ff ffc9 	bl	8000fec <__cmpsf2>
 800105a:	2800      	cmp	r0, #0
 800105c:	bf48      	it	mi
 800105e:	f110 0f00 	cmnmi.w	r0, #0
 8001062:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001064 <__aeabi_fcmpeq>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff fff4 	bl	8001054 <__aeabi_cfcmpeq>
 800106c:	bf0c      	ite	eq
 800106e:	2001      	moveq	r0, #1
 8001070:	2000      	movne	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmplt>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffea 	bl	8001054 <__aeabi_cfcmpeq>
 8001080:	bf34      	ite	cc
 8001082:	2001      	movcc	r0, #1
 8001084:	2000      	movcs	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmple>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffe0 	bl	8001054 <__aeabi_cfcmpeq>
 8001094:	bf94      	ite	ls
 8001096:	2001      	movls	r0, #1
 8001098:	2000      	movhi	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmpge>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffd2 	bl	800104c <__aeabi_cfrcmple>
 80010a8:	bf94      	ite	ls
 80010aa:	2001      	movls	r0, #1
 80010ac:	2000      	movhi	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmpgt>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffc8 	bl	800104c <__aeabi_cfrcmple>
 80010bc:	bf34      	ite	cc
 80010be:	2001      	movcc	r0, #1
 80010c0:	2000      	movcs	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpun>:
 80010c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__aeabi_fcmpun+0x14>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d108      	bne.n	80010ee <__aeabi_fcmpun+0x26>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d102      	bne.n	80010e8 <__aeabi_fcmpun+0x20>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d102      	bne.n	80010ee <__aeabi_fcmpun+0x26>
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0001 	mov.w	r0, #1
 80010f2:	4770      	bx	lr

080010f4 <__aeabi_f2iz>:
 80010f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010fc:	d30f      	bcc.n	800111e <__aeabi_f2iz+0x2a>
 80010fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001102:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001106:	d90d      	bls.n	8001124 <__aeabi_f2iz+0x30>
 8001108:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800110c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001110:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001114:	fa23 f002 	lsr.w	r0, r3, r2
 8001118:	bf18      	it	ne
 800111a:	4240      	negne	r0, r0
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2iz+0x3a>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d105      	bne.n	800113a <__aeabi_f2iz+0x46>
 800112e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001132:	bf08      	it	eq
 8001134:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr

08001140 <__aeabi_uldivmod>:
 8001140:	b953      	cbnz	r3, 8001158 <__aeabi_uldivmod+0x18>
 8001142:	b94a      	cbnz	r2, 8001158 <__aeabi_uldivmod+0x18>
 8001144:	2900      	cmp	r1, #0
 8001146:	bf08      	it	eq
 8001148:	2800      	cmpeq	r0, #0
 800114a:	bf1c      	itt	ne
 800114c:	f04f 31ff 	movne.w	r1, #4294967295
 8001150:	f04f 30ff 	movne.w	r0, #4294967295
 8001154:	f000 b97a 	b.w	800144c <__aeabi_idiv0>
 8001158:	f1ad 0c08 	sub.w	ip, sp, #8
 800115c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001160:	f000 f806 	bl	8001170 <__udivmoddi4>
 8001164:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800116c:	b004      	add	sp, #16
 800116e:	4770      	bx	lr

08001170 <__udivmoddi4>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	468c      	mov	ip, r1
 8001176:	460e      	mov	r6, r1
 8001178:	4604      	mov	r4, r0
 800117a:	9d08      	ldr	r5, [sp, #32]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d150      	bne.n	8001222 <__udivmoddi4+0xb2>
 8001180:	428a      	cmp	r2, r1
 8001182:	4617      	mov	r7, r2
 8001184:	d96c      	bls.n	8001260 <__udivmoddi4+0xf0>
 8001186:	fab2 fe82 	clz	lr, r2
 800118a:	f1be 0f00 	cmp.w	lr, #0
 800118e:	d00b      	beq.n	80011a8 <__udivmoddi4+0x38>
 8001190:	f1ce 0c20 	rsb	ip, lr, #32
 8001194:	fa01 f60e 	lsl.w	r6, r1, lr
 8001198:	fa20 fc0c 	lsr.w	ip, r0, ip
 800119c:	fa02 f70e 	lsl.w	r7, r2, lr
 80011a0:	ea4c 0c06 	orr.w	ip, ip, r6
 80011a4:	fa00 f40e 	lsl.w	r4, r0, lr
 80011a8:	0c3a      	lsrs	r2, r7, #16
 80011aa:	fbbc f9f2 	udiv	r9, ip, r2
 80011ae:	b2bb      	uxth	r3, r7
 80011b0:	fb02 cc19 	mls	ip, r2, r9, ip
 80011b4:	fb09 fa03 	mul.w	sl, r9, r3
 80011b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80011bc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80011c0:	45b2      	cmp	sl, r6
 80011c2:	d90a      	bls.n	80011da <__udivmoddi4+0x6a>
 80011c4:	19f6      	adds	r6, r6, r7
 80011c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80011ca:	f080 8125 	bcs.w	8001418 <__udivmoddi4+0x2a8>
 80011ce:	45b2      	cmp	sl, r6
 80011d0:	f240 8122 	bls.w	8001418 <__udivmoddi4+0x2a8>
 80011d4:	f1a9 0902 	sub.w	r9, r9, #2
 80011d8:	443e      	add	r6, r7
 80011da:	eba6 060a 	sub.w	r6, r6, sl
 80011de:	fbb6 f0f2 	udiv	r0, r6, r2
 80011e2:	fb02 6610 	mls	r6, r2, r0, r6
 80011e6:	fb00 f303 	mul.w	r3, r0, r3
 80011ea:	b2a4      	uxth	r4, r4
 80011ec:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80011f0:	42a3      	cmp	r3, r4
 80011f2:	d909      	bls.n	8001208 <__udivmoddi4+0x98>
 80011f4:	19e4      	adds	r4, r4, r7
 80011f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80011fa:	f080 810b 	bcs.w	8001414 <__udivmoddi4+0x2a4>
 80011fe:	42a3      	cmp	r3, r4
 8001200:	f240 8108 	bls.w	8001414 <__udivmoddi4+0x2a4>
 8001204:	3802      	subs	r0, #2
 8001206:	443c      	add	r4, r7
 8001208:	2100      	movs	r1, #0
 800120a:	1ae4      	subs	r4, r4, r3
 800120c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001210:	2d00      	cmp	r5, #0
 8001212:	d062      	beq.n	80012da <__udivmoddi4+0x16a>
 8001214:	2300      	movs	r3, #0
 8001216:	fa24 f40e 	lsr.w	r4, r4, lr
 800121a:	602c      	str	r4, [r5, #0]
 800121c:	606b      	str	r3, [r5, #4]
 800121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001222:	428b      	cmp	r3, r1
 8001224:	d907      	bls.n	8001236 <__udivmoddi4+0xc6>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d055      	beq.n	80012d6 <__udivmoddi4+0x166>
 800122a:	2100      	movs	r1, #0
 800122c:	e885 0041 	stmia.w	r5, {r0, r6}
 8001230:	4608      	mov	r0, r1
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001236:	fab3 f183 	clz	r1, r3
 800123a:	2900      	cmp	r1, #0
 800123c:	f040 808f 	bne.w	800135e <__udivmoddi4+0x1ee>
 8001240:	42b3      	cmp	r3, r6
 8001242:	d302      	bcc.n	800124a <__udivmoddi4+0xda>
 8001244:	4282      	cmp	r2, r0
 8001246:	f200 80fc 	bhi.w	8001442 <__udivmoddi4+0x2d2>
 800124a:	1a84      	subs	r4, r0, r2
 800124c:	eb66 0603 	sbc.w	r6, r6, r3
 8001250:	2001      	movs	r0, #1
 8001252:	46b4      	mov	ip, r6
 8001254:	2d00      	cmp	r5, #0
 8001256:	d040      	beq.n	80012da <__udivmoddi4+0x16a>
 8001258:	e885 1010 	stmia.w	r5, {r4, ip}
 800125c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001260:	b912      	cbnz	r2, 8001268 <__udivmoddi4+0xf8>
 8001262:	2701      	movs	r7, #1
 8001264:	fbb7 f7f2 	udiv	r7, r7, r2
 8001268:	fab7 fe87 	clz	lr, r7
 800126c:	f1be 0f00 	cmp.w	lr, #0
 8001270:	d135      	bne.n	80012de <__udivmoddi4+0x16e>
 8001272:	2101      	movs	r1, #1
 8001274:	1bf6      	subs	r6, r6, r7
 8001276:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800127a:	fa1f f887 	uxth.w	r8, r7
 800127e:	fbb6 f2fc 	udiv	r2, r6, ip
 8001282:	fb0c 6612 	mls	r6, ip, r2, r6
 8001286:	fb08 f002 	mul.w	r0, r8, r2
 800128a:	0c23      	lsrs	r3, r4, #16
 800128c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8001290:	42b0      	cmp	r0, r6
 8001292:	d907      	bls.n	80012a4 <__udivmoddi4+0x134>
 8001294:	19f6      	adds	r6, r6, r7
 8001296:	f102 33ff 	add.w	r3, r2, #4294967295
 800129a:	d202      	bcs.n	80012a2 <__udivmoddi4+0x132>
 800129c:	42b0      	cmp	r0, r6
 800129e:	f200 80d2 	bhi.w	8001446 <__udivmoddi4+0x2d6>
 80012a2:	461a      	mov	r2, r3
 80012a4:	1a36      	subs	r6, r6, r0
 80012a6:	fbb6 f0fc 	udiv	r0, r6, ip
 80012aa:	fb0c 6610 	mls	r6, ip, r0, r6
 80012ae:	fb08 f800 	mul.w	r8, r8, r0
 80012b2:	b2a3      	uxth	r3, r4
 80012b4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80012b8:	45a0      	cmp	r8, r4
 80012ba:	d907      	bls.n	80012cc <__udivmoddi4+0x15c>
 80012bc:	19e4      	adds	r4, r4, r7
 80012be:	f100 33ff 	add.w	r3, r0, #4294967295
 80012c2:	d202      	bcs.n	80012ca <__udivmoddi4+0x15a>
 80012c4:	45a0      	cmp	r8, r4
 80012c6:	f200 80b9 	bhi.w	800143c <__udivmoddi4+0x2cc>
 80012ca:	4618      	mov	r0, r3
 80012cc:	eba4 0408 	sub.w	r4, r4, r8
 80012d0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80012d4:	e79c      	b.n	8001210 <__udivmoddi4+0xa0>
 80012d6:	4629      	mov	r1, r5
 80012d8:	4628      	mov	r0, r5
 80012da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012de:	fa07 f70e 	lsl.w	r7, r7, lr
 80012e2:	f1ce 0320 	rsb	r3, lr, #32
 80012e6:	fa26 f203 	lsr.w	r2, r6, r3
 80012ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80012ee:	fbb2 f1fc 	udiv	r1, r2, ip
 80012f2:	fa1f f887 	uxth.w	r8, r7
 80012f6:	fb0c 2211 	mls	r2, ip, r1, r2
 80012fa:	fa06 f60e 	lsl.w	r6, r6, lr
 80012fe:	fa20 f303 	lsr.w	r3, r0, r3
 8001302:	fb01 f908 	mul.w	r9, r1, r8
 8001306:	4333      	orrs	r3, r6
 8001308:	0c1e      	lsrs	r6, r3, #16
 800130a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800130e:	45b1      	cmp	r9, r6
 8001310:	fa00 f40e 	lsl.w	r4, r0, lr
 8001314:	d909      	bls.n	800132a <__udivmoddi4+0x1ba>
 8001316:	19f6      	adds	r6, r6, r7
 8001318:	f101 32ff 	add.w	r2, r1, #4294967295
 800131c:	f080 808c 	bcs.w	8001438 <__udivmoddi4+0x2c8>
 8001320:	45b1      	cmp	r9, r6
 8001322:	f240 8089 	bls.w	8001438 <__udivmoddi4+0x2c8>
 8001326:	3902      	subs	r1, #2
 8001328:	443e      	add	r6, r7
 800132a:	eba6 0609 	sub.w	r6, r6, r9
 800132e:	fbb6 f0fc 	udiv	r0, r6, ip
 8001332:	fb0c 6210 	mls	r2, ip, r0, r6
 8001336:	fb00 f908 	mul.w	r9, r0, r8
 800133a:	b29e      	uxth	r6, r3
 800133c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001340:	45b1      	cmp	r9, r6
 8001342:	d907      	bls.n	8001354 <__udivmoddi4+0x1e4>
 8001344:	19f6      	adds	r6, r6, r7
 8001346:	f100 33ff 	add.w	r3, r0, #4294967295
 800134a:	d271      	bcs.n	8001430 <__udivmoddi4+0x2c0>
 800134c:	45b1      	cmp	r9, r6
 800134e:	d96f      	bls.n	8001430 <__udivmoddi4+0x2c0>
 8001350:	3802      	subs	r0, #2
 8001352:	443e      	add	r6, r7
 8001354:	eba6 0609 	sub.w	r6, r6, r9
 8001358:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800135c:	e78f      	b.n	800127e <__udivmoddi4+0x10e>
 800135e:	f1c1 0720 	rsb	r7, r1, #32
 8001362:	fa22 f807 	lsr.w	r8, r2, r7
 8001366:	408b      	lsls	r3, r1
 8001368:	ea48 0303 	orr.w	r3, r8, r3
 800136c:	fa26 f407 	lsr.w	r4, r6, r7
 8001370:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001374:	fbb4 f9fe 	udiv	r9, r4, lr
 8001378:	fa1f fc83 	uxth.w	ip, r3
 800137c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001380:	408e      	lsls	r6, r1
 8001382:	fa20 f807 	lsr.w	r8, r0, r7
 8001386:	fb09 fa0c 	mul.w	sl, r9, ip
 800138a:	ea48 0806 	orr.w	r8, r8, r6
 800138e:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8001392:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8001396:	45a2      	cmp	sl, r4
 8001398:	fa02 f201 	lsl.w	r2, r2, r1
 800139c:	fa00 f601 	lsl.w	r6, r0, r1
 80013a0:	d908      	bls.n	80013b4 <__udivmoddi4+0x244>
 80013a2:	18e4      	adds	r4, r4, r3
 80013a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80013a8:	d244      	bcs.n	8001434 <__udivmoddi4+0x2c4>
 80013aa:	45a2      	cmp	sl, r4
 80013ac:	d942      	bls.n	8001434 <__udivmoddi4+0x2c4>
 80013ae:	f1a9 0902 	sub.w	r9, r9, #2
 80013b2:	441c      	add	r4, r3
 80013b4:	eba4 040a 	sub.w	r4, r4, sl
 80013b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80013bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80013c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80013c4:	fa1f f888 	uxth.w	r8, r8
 80013c8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80013cc:	45a4      	cmp	ip, r4
 80013ce:	d907      	bls.n	80013e0 <__udivmoddi4+0x270>
 80013d0:	18e4      	adds	r4, r4, r3
 80013d2:	f100 3eff 	add.w	lr, r0, #4294967295
 80013d6:	d229      	bcs.n	800142c <__udivmoddi4+0x2bc>
 80013d8:	45a4      	cmp	ip, r4
 80013da:	d927      	bls.n	800142c <__udivmoddi4+0x2bc>
 80013dc:	3802      	subs	r0, #2
 80013de:	441c      	add	r4, r3
 80013e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013e4:	fba0 8902 	umull	r8, r9, r0, r2
 80013e8:	eba4 0c0c 	sub.w	ip, r4, ip
 80013ec:	45cc      	cmp	ip, r9
 80013ee:	46c2      	mov	sl, r8
 80013f0:	46ce      	mov	lr, r9
 80013f2:	d315      	bcc.n	8001420 <__udivmoddi4+0x2b0>
 80013f4:	d012      	beq.n	800141c <__udivmoddi4+0x2ac>
 80013f6:	b155      	cbz	r5, 800140e <__udivmoddi4+0x29e>
 80013f8:	ebb6 030a 	subs.w	r3, r6, sl
 80013fc:	eb6c 060e 	sbc.w	r6, ip, lr
 8001400:	fa06 f707 	lsl.w	r7, r6, r7
 8001404:	40cb      	lsrs	r3, r1
 8001406:	431f      	orrs	r7, r3
 8001408:	40ce      	lsrs	r6, r1
 800140a:	602f      	str	r7, [r5, #0]
 800140c:	606e      	str	r6, [r5, #4]
 800140e:	2100      	movs	r1, #0
 8001410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001414:	4610      	mov	r0, r2
 8001416:	e6f7      	b.n	8001208 <__udivmoddi4+0x98>
 8001418:	4689      	mov	r9, r1
 800141a:	e6de      	b.n	80011da <__udivmoddi4+0x6a>
 800141c:	4546      	cmp	r6, r8
 800141e:	d2ea      	bcs.n	80013f6 <__udivmoddi4+0x286>
 8001420:	ebb8 0a02 	subs.w	sl, r8, r2
 8001424:	eb69 0e03 	sbc.w	lr, r9, r3
 8001428:	3801      	subs	r0, #1
 800142a:	e7e4      	b.n	80013f6 <__udivmoddi4+0x286>
 800142c:	4670      	mov	r0, lr
 800142e:	e7d7      	b.n	80013e0 <__udivmoddi4+0x270>
 8001430:	4618      	mov	r0, r3
 8001432:	e78f      	b.n	8001354 <__udivmoddi4+0x1e4>
 8001434:	4681      	mov	r9, r0
 8001436:	e7bd      	b.n	80013b4 <__udivmoddi4+0x244>
 8001438:	4611      	mov	r1, r2
 800143a:	e776      	b.n	800132a <__udivmoddi4+0x1ba>
 800143c:	3802      	subs	r0, #2
 800143e:	443c      	add	r4, r7
 8001440:	e744      	b.n	80012cc <__udivmoddi4+0x15c>
 8001442:	4608      	mov	r0, r1
 8001444:	e706      	b.n	8001254 <__udivmoddi4+0xe4>
 8001446:	3a02      	subs	r2, #2
 8001448:	443e      	add	r6, r7
 800144a:	e72b      	b.n	80012a4 <__udivmoddi4+0x134>

0800144c <__aeabi_idiv0>:
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_InitTick+0x3c>)
{
 8001454:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001456:	7818      	ldrb	r0, [r3, #0]
 8001458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <HAL_InitTick+0x40>)
 8001462:	6810      	ldr	r0, [r2, #0]
 8001464:	fbb0 f0f3 	udiv	r0, r0, r3
 8001468:	f000 fb00 	bl	8001a6c <HAL_SYSTICK_Config>
 800146c:	4604      	mov	r4, r0
 800146e:	b958      	cbnz	r0, 8001488 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001470:	2d0f      	cmp	r5, #15
 8001472:	d809      	bhi.n	8001488 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	4602      	mov	r2, r0
 8001476:	4629      	mov	r1, r5
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 fab6 	bl	80019ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <HAL_InitTick+0x44>)
 8001482:	4620      	mov	r0, r4
 8001484:	601d      	str	r5, [r3, #0]
 8001486:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001488:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800148a:	bd38      	pop	{r3, r4, r5, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	20000410 	.word	0x20000410
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_Init+0x20>)
{
 800149a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a6:	f000 fa8f 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff ffd0 	bl	8001450 <HAL_InitTick>
  HAL_MspInit();
 80014b0:	f006 ffd8 	bl	8008464 <HAL_MspInit>
}
 80014b4:	2000      	movs	r0, #0
 80014b6:	bd08      	pop	{r3, pc}
 80014b8:	40022000 	.word	0x40022000

080014bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <HAL_IncTick+0x10>)
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <HAL_IncTick+0x14>)
 80014c0:	6811      	ldr	r1, [r2, #0]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	440b      	add	r3, r1
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000d80 	.word	0x20000d80
 80014d0:	20000000 	.word	0x20000000

080014d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014d4:	4b01      	ldr	r3, [pc, #4]	; (80014dc <HAL_GetTick+0x8>)
 80014d6:	6818      	ldr	r0, [r3, #0]
}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000d80 	.word	0x20000d80

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff fff6 	bl	80014d4 <HAL_GetTick>
 80014e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80014ec:	bf1e      	ittt	ne
 80014ee:	4b04      	ldrne	r3, [pc, #16]	; (8001500 <HAL_Delay+0x20>)
 80014f0:	781b      	ldrbne	r3, [r3, #0]
 80014f2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	1b40      	subs	r0, r0, r5
 80014fa:	4284      	cmp	r4, r0
 80014fc:	d8fa      	bhi.n	80014f4 <HAL_Delay+0x14>
  {
  }
}
 80014fe:	bd38      	pop	{r3, r4, r5, pc}
 8001500:	20000000 	.word	0x20000000

08001504 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001506:	2600      	movs	r6, #0
{
 8001508:	4604      	mov	r4, r0
 800150a:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800150c:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800150e:	f7ff ffe1 	bl	80014d4 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001512:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001514:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	05d2      	lsls	r2, r2, #23
 800151a:	d508      	bpl.n	800152e <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 800151c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8001520:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001524:	f043 0320 	orr.w	r3, r3, #32
 8001528:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800152a:	b003      	add	sp, #12
 800152c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	05d6      	lsls	r6, r2, #23
 8001532:	d403      	bmi.n	800153c <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001536:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800153a:	d03b      	beq.n	80015b4 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800153c:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <HAL_ADC_PollForConversion+0x124>)
 800153e:	2002      	movs	r0, #2
 8001540:	681e      	ldr	r6, [r3, #0]
 8001542:	f001 fe55 	bl	80031f0 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	4a38      	ldr	r2, [pc, #224]	; (800162c <HAL_ADC_PollForConversion+0x128>)
 800154a:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800154c:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001550:	4211      	tst	r1, r2
 8001552:	4a37      	ldr	r2, [pc, #220]	; (8001630 <HAL_ADC_PollForConversion+0x12c>)
 8001554:	d14f      	bne.n	80015f6 <HAL_ADC_PollForConversion+0xf2>
 8001556:	68de      	ldr	r6, [r3, #12]
 8001558:	4936      	ldr	r1, [pc, #216]	; (8001634 <HAL_ADC_PollForConversion+0x130>)
 800155a:	420e      	tst	r6, r1
 800155c:	d14b      	bne.n	80015f6 <HAL_ADC_PollForConversion+0xf2>
 800155e:	6919      	ldr	r1, [r3, #16]
 8001560:	4211      	tst	r1, r2
 8001562:	d159      	bne.n	8001618 <HAL_ADC_PollForConversion+0x114>
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_ADC_PollForConversion+0x134>)
 8001568:	421a      	tst	r2, r3
 800156a:	bf14      	ite	ne
 800156c:	2329      	movne	r3, #41	; 0x29
 800156e:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001570:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001574:	9b01      	ldr	r3, [sp, #4]
 8001576:	429e      	cmp	r6, r3
 8001578:	d920      	bls.n	80015bc <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 800157a:	1c6b      	adds	r3, r5, #1
 800157c:	d005      	beq.n	800158a <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800157e:	b15d      	cbz	r5, 8001598 <HAL_ADC_PollForConversion+0x94>
 8001580:	f7ff ffa8 	bl	80014d4 <HAL_GetTick>
 8001584:	1bc0      	subs	r0, r0, r7
 8001586:	4285      	cmp	r5, r0
 8001588:	d306      	bcc.n	8001598 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 800158a:	9b01      	ldr	r3, [sp, #4]
 800158c:	3301      	adds	r3, #1
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	e7f0      	b.n	8001574 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8001592:	1c68      	adds	r0, r5, #1
 8001594:	d00f      	beq.n	80015b6 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001596:	b945      	cbnz	r5, 80015aa <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001598:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 800159a:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80015a2:	2300      	movs	r3, #0
 80015a4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 80015a8:	e7bf      	b.n	800152a <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015aa:	f7ff ff93 	bl	80014d4 <HAL_GetTick>
 80015ae:	1bc0      	subs	r0, r0, r7
 80015b0:	4285      	cmp	r5, r0
 80015b2:	d3f1      	bcc.n	8001598 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015b4:	6822      	ldr	r2, [r4, #0]
 80015b6:	6813      	ldr	r3, [r2, #0]
 80015b8:	0799      	lsls	r1, r3, #30
 80015ba:	d5ea      	bpl.n	8001592 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015bc:	f06f 0312 	mvn.w	r3, #18
 80015c0:	6822      	ldr	r2, [r4, #0]
 80015c2:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ca:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015cc:	6893      	ldr	r3, [r2, #8]
 80015ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015d6:	d125      	bne.n	8001624 <HAL_ADC_PollForConversion+0x120>
 80015d8:	68e3      	ldr	r3, [r4, #12]
 80015da:	bb1b      	cbnz	r3, 8001624 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80015e6:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80015ea:	d11b      	bne.n	8001624 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80015f4:	e799      	b.n	800152a <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015f6:	6919      	ldr	r1, [r3, #16]
 80015f8:	4211      	tst	r1, r2
 80015fa:	d103      	bne.n	8001604 <HAL_ADC_PollForConversion+0x100>
 80015fc:	68d9      	ldr	r1, [r3, #12]
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_ADC_PollForConversion+0x134>)
 8001600:	4211      	tst	r1, r2
 8001602:	d00b      	beq.n	800161c <HAL_ADC_PollForConversion+0x118>
 8001604:	6919      	ldr	r1, [r3, #16]
 8001606:	4a0d      	ldr	r2, [pc, #52]	; (800163c <HAL_ADC_PollForConversion+0x138>)
 8001608:	4211      	tst	r1, r2
 800160a:	d109      	bne.n	8001620 <HAL_ADC_PollForConversion+0x11c>
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	4213      	tst	r3, r2
 8001610:	bf14      	ite	ne
 8001612:	23fc      	movne	r3, #252	; 0xfc
 8001614:	2354      	moveq	r3, #84	; 0x54
 8001616:	e7ab      	b.n	8001570 <HAL_ADC_PollForConversion+0x6c>
 8001618:	2329      	movs	r3, #41	; 0x29
 800161a:	e7a9      	b.n	8001570 <HAL_ADC_PollForConversion+0x6c>
 800161c:	2354      	movs	r3, #84	; 0x54
 800161e:	e7a7      	b.n	8001570 <HAL_ADC_PollForConversion+0x6c>
 8001620:	23fc      	movs	r3, #252	; 0xfc
 8001622:	e7a5      	b.n	8001570 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 8001624:	2000      	movs	r0, #0
 8001626:	e780      	b.n	800152a <HAL_ADC_PollForConversion+0x26>
 8001628:	20000410 	.word	0x20000410
 800162c:	24924924 	.word	0x24924924
 8001630:	12492492 	.word	0x12492492
 8001634:	00924924 	.word	0x00924924
 8001638:	00492492 	.word	0x00492492
 800163c:	00249249 	.word	0x00249249

08001640 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001640:	6803      	ldr	r3, [r0, #0]
 8001642:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001644:	4770      	bx	lr
	...

08001648 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001648:	2300      	movs	r3, #0
{ 
 800164a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800164c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800164e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001652:	2b01      	cmp	r3, #1
 8001654:	d074      	beq.n	8001740 <HAL_ADC_ConfigChannel+0xf8>
 8001656:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001658:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800165a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800165e:	2d06      	cmp	r5, #6
 8001660:	6802      	ldr	r2, [r0, #0]
 8001662:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001666:	680c      	ldr	r4, [r1, #0]
 8001668:	d825      	bhi.n	80016b6 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800166a:	442b      	add	r3, r5
 800166c:	251f      	movs	r5, #31
 800166e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001670:	3b05      	subs	r3, #5
 8001672:	409d      	lsls	r5, r3
 8001674:	ea26 0505 	bic.w	r5, r6, r5
 8001678:	fa04 f303 	lsl.w	r3, r4, r3
 800167c:	432b      	orrs	r3, r5
 800167e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001680:	2c09      	cmp	r4, #9
 8001682:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001686:	688d      	ldr	r5, [r1, #8]
 8001688:	d92f      	bls.n	80016ea <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800168a:	2607      	movs	r6, #7
 800168c:	4423      	add	r3, r4
 800168e:	68d1      	ldr	r1, [r2, #12]
 8001690:	3b1e      	subs	r3, #30
 8001692:	409e      	lsls	r6, r3
 8001694:	ea21 0106 	bic.w	r1, r1, r6
 8001698:	fa05 f303 	lsl.w	r3, r5, r3
 800169c:	430b      	orrs	r3, r1
 800169e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016a0:	f1a4 0310 	sub.w	r3, r4, #16
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d92b      	bls.n	8001700 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	b002      	add	sp, #8
 80016b4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80016b6:	2d0c      	cmp	r5, #12
 80016b8:	d80b      	bhi.n	80016d2 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016ba:	442b      	add	r3, r5
 80016bc:	251f      	movs	r5, #31
 80016be:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80016c0:	3b23      	subs	r3, #35	; 0x23
 80016c2:	409d      	lsls	r5, r3
 80016c4:	ea26 0505 	bic.w	r5, r6, r5
 80016c8:	fa04 f303 	lsl.w	r3, r4, r3
 80016cc:	432b      	orrs	r3, r5
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	e7d6      	b.n	8001680 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016d2:	442b      	add	r3, r5
 80016d4:	251f      	movs	r5, #31
 80016d6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80016d8:	3b41      	subs	r3, #65	; 0x41
 80016da:	409d      	lsls	r5, r3
 80016dc:	ea26 0505 	bic.w	r5, r6, r5
 80016e0:	fa04 f303 	lsl.w	r3, r4, r3
 80016e4:	432b      	orrs	r3, r5
 80016e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016e8:	e7ca      	b.n	8001680 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016ea:	2607      	movs	r6, #7
 80016ec:	6911      	ldr	r1, [r2, #16]
 80016ee:	4423      	add	r3, r4
 80016f0:	409e      	lsls	r6, r3
 80016f2:	ea21 0106 	bic.w	r1, r1, r6
 80016f6:	fa05 f303 	lsl.w	r3, r5, r3
 80016fa:	430b      	orrs	r3, r1
 80016fc:	6113      	str	r3, [r2, #16]
 80016fe:	e7cf      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_ADC_ConfigChannel+0xfc>)
 8001702:	429a      	cmp	r2, r3
 8001704:	d116      	bne.n	8001734 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001706:	6893      	ldr	r3, [r2, #8]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	d4cd      	bmi.n	80016a8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800170c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800170e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001710:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001714:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001716:	d1c7      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_ADC_ConfigChannel+0x100>)
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_ADC_ConfigChannel+0x104>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001722:	230a      	movs	r3, #10
 8001724:	4353      	muls	r3, r2
            wait_loop_index--;
 8001726:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001728:	9b01      	ldr	r3, [sp, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0bc      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800172e:	9b01      	ldr	r3, [sp, #4]
 8001730:	3b01      	subs	r3, #1
 8001732:	e7f8      	b.n	8001726 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001734:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001736:	f043 0320 	orr.w	r3, r3, #32
 800173a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e7b4      	b.n	80016aa <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001740:	2302      	movs	r3, #2
 8001742:	e7b5      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x68>
 8001744:	40012400 	.word	0x40012400
 8001748:	20000410 	.word	0x20000410
 800174c:	000f4240 	.word	0x000f4240

08001750 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001750:	2300      	movs	r3, #0
{
 8001752:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001754:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001756:	6803      	ldr	r3, [r0, #0]
{
 8001758:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	07d2      	lsls	r2, r2, #31
 800175e:	d502      	bpl.n	8001766 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001760:	2000      	movs	r0, #0
}
 8001762:	b002      	add	sp, #8
 8001764:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <ADC_Enable+0x68>)
 8001770:	4a12      	ldr	r2, [pc, #72]	; (80017bc <ADC_Enable+0x6c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001778:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800177a:	9b01      	ldr	r3, [sp, #4]
 800177c:	b9c3      	cbnz	r3, 80017b0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800177e:	f7ff fea9 	bl	80014d4 <HAL_GetTick>
 8001782:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	689d      	ldr	r5, [r3, #8]
 8001788:	f015 0501 	ands.w	r5, r5, #1
 800178c:	d1e8      	bne.n	8001760 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800178e:	f7ff fea1 	bl	80014d4 <HAL_GetTick>
 8001792:	1b80      	subs	r0, r0, r6
 8001794:	2802      	cmp	r0, #2
 8001796:	d9f5      	bls.n	8001784 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800179a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80017a6:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017ae:	e7d8      	b.n	8001762 <ADC_Enable+0x12>
      wait_loop_index--;
 80017b0:	9b01      	ldr	r3, [sp, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	e7e0      	b.n	8001778 <ADC_Enable+0x28>
 80017b6:	bf00      	nop
 80017b8:	20000410 	.word	0x20000410
 80017bc:	000f4240 	.word	0x000f4240

080017c0 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80017c0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80017c4:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80017c6:	2b01      	cmp	r3, #1
{
 80017c8:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80017ca:	d054      	beq.n	8001876 <HAL_ADC_Start+0xb6>
 80017cc:	2301      	movs	r3, #1
 80017ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80017d2:	f7ff ffbd 	bl	8001750 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d149      	bne.n	800186e <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80017da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d104      	bne.n	80017fc <HAL_ADC_Start+0x3c>
 80017f2:	4923      	ldr	r1, [pc, #140]	; (8001880 <HAL_ADC_Start+0xc0>)
 80017f4:	684a      	ldr	r2, [r1, #4]
 80017f6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80017fa:	d12e      	bne.n	800185a <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80017fe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001802:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001804:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001806:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001808:	bf41      	itttt	mi
 800180a:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 800180c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001810:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001814:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001816:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800181c:	bf1c      	itt	ne
 800181e:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8001820:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001824:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8001826:	2200      	movs	r2, #0
 8001828:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800182c:	f06f 0202 	mvn.w	r2, #2
 8001830:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001838:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800183c:	d113      	bne.n	8001866 <HAL_ADC_Start+0xa6>
 800183e:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_ADC_Start+0xbc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d105      	bne.n	8001850 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001844:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001848:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800184a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800184e:	d10a      	bne.n	8001866 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800185a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800185c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001860:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001862:	684a      	ldr	r2, [r1, #4]
 8001864:	e7cf      	b.n	8001806 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800186c:	e7f3      	b.n	8001856 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800186e:	2300      	movs	r3, #0
 8001870:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001874:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001876:	2002      	movs	r0, #2
}
 8001878:	bd10      	pop	{r4, pc}
 800187a:	bf00      	nop
 800187c:	40012800 	.word	0x40012800
 8001880:	40012400 	.word	0x40012400

08001884 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001884:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001886:	6803      	ldr	r3, [r0, #0]
{
 8001888:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	07d2      	lsls	r2, r2, #31
 800188e:	d401      	bmi.n	8001894 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001890:	2000      	movs	r0, #0
 8001892:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800189c:	f7ff fe1a 	bl	80014d4 <HAL_GetTick>
 80018a0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	07db      	lsls	r3, r3, #31
 80018a8:	d5f2      	bpl.n	8001890 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018aa:	f7ff fe13 	bl	80014d4 <HAL_GetTick>
 80018ae:	1b40      	subs	r0, r0, r5
 80018b0:	2802      	cmp	r0, #2
 80018b2:	d9f6      	bls.n	80018a2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b8:	f043 0310 	orr.w	r3, r3, #16
 80018bc:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018c6:	bd38      	pop	{r3, r4, r5, pc}

080018c8 <HAL_ADC_Init>:
{
 80018c8:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80018ca:	4604      	mov	r4, r0
 80018cc:	2800      	cmp	r0, #0
 80018ce:	d071      	beq.n	80019b4 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80018d2:	b923      	cbnz	r3, 80018de <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80018d4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80018d6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80018da:	f006 fde5 	bl	80084a8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff ffd0 	bl	8001884 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018e6:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80018ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018ec:	d164      	bne.n	80019b8 <HAL_ADC_Init+0xf0>
 80018ee:	2800      	cmp	r0, #0
 80018f0:	d162      	bne.n	80019b8 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80018f2:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80018f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80018f8:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80018fa:	f023 0302 	bic.w	r3, r3, #2
 80018fe:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001902:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001904:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001906:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001908:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800190a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800190e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001912:	d038      	beq.n	8001986 <HAL_ADC_Init+0xbe>
 8001914:	2901      	cmp	r1, #1
 8001916:	bf14      	ite	ne
 8001918:	4606      	movne	r6, r0
 800191a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800191e:	6965      	ldr	r5, [r4, #20]
 8001920:	2d01      	cmp	r5, #1
 8001922:	d107      	bne.n	8001934 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001924:	2b00      	cmp	r3, #0
 8001926:	d130      	bne.n	800198a <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001928:	69a3      	ldr	r3, [r4, #24]
 800192a:	3b01      	subs	r3, #1
 800192c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001930:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001934:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001936:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800193a:	685d      	ldr	r5, [r3, #4]
 800193c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001940:	ea45 0506 	orr.w	r5, r5, r6
 8001944:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001946:	689e      	ldr	r6, [r3, #8]
 8001948:	4d1d      	ldr	r5, [pc, #116]	; (80019c0 <HAL_ADC_Init+0xf8>)
 800194a:	ea05 0506 	and.w	r5, r5, r6
 800194e:	ea45 0502 	orr.w	r5, r5, r2
 8001952:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001954:	d001      	beq.n	800195a <HAL_ADC_Init+0x92>
 8001956:	2901      	cmp	r1, #1
 8001958:	d120      	bne.n	800199c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800195a:	6921      	ldr	r1, [r4, #16]
 800195c:	3901      	subs	r1, #1
 800195e:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001960:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001962:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001966:	4329      	orrs	r1, r5
 8001968:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800196a:	6899      	ldr	r1, [r3, #8]
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_ADC_Init+0xfc>)
 800196e:	400b      	ands	r3, r1
 8001970:	429a      	cmp	r2, r3
 8001972:	d115      	bne.n	80019a0 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8001974:	2300      	movs	r3, #0
 8001976:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001978:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	62a3      	str	r3, [r4, #40]	; 0x28
 8001984:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001986:	460e      	mov	r6, r1
 8001988:	e7c9      	b.n	800191e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800198c:	f043 0320 	orr.w	r3, r3, #32
 8001990:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001992:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800199a:	e7cb      	b.n	8001934 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 800199c:	2100      	movs	r1, #0
 800199e:	e7df      	b.n	8001960 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80019a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019a2:	f023 0312 	bic.w	r3, r3, #18
 80019a6:	f043 0310 	orr.w	r3, r3, #16
 80019aa:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80019b4:	2001      	movs	r0, #1
}
 80019b6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80019be:	e7f9      	b.n	80019b4 <HAL_ADC_Init+0xec>
 80019c0:	ffe1f7fd 	.word	0xffe1f7fd
 80019c4:	ff1f0efe 	.word	0xff1f0efe

080019c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80019ca:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80019ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	0c1b      	lsrs	r3, r3, #16
 80019da:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80019e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80019e4:	60d3      	str	r3, [r2, #12]
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b530      	push	{r4, r5, lr}
 80019f0:	68dc      	ldr	r4, [r3, #12]
 80019f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	bf28      	it	cs
 8001a00:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a08:	bf98      	it	ls
 8001a0a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	fa05 f303 	lsl.w	r3, r5, r3
 8001a10:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a14:	bf88      	it	hi
 8001a16:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4019      	ands	r1, r3
 8001a1a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	fa05 f404 	lsl.w	r4, r5, r4
 8001a20:	3c01      	subs	r4, #1
 8001a22:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001a24:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a26:	ea42 0201 	orr.w	r2, r2, r1
 8001a2a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	bfaf      	iteee	ge
 8001a30:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	4b06      	ldrlt	r3, [pc, #24]	; (8001a50 <HAL_NVIC_SetPriority+0x64>)
 8001a36:	f000 000f 	andlt.w	r0, r0, #15
 8001a3a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	bfa5      	ittet	ge
 8001a3e:	b2d2      	uxtbge	r2, r2
 8001a40:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001a4a:	bd30      	pop	{r4, r5, pc}
 8001a4c:	e000ed00 	.word	0xe000ed00
 8001a50:	e000ed14 	.word	0xe000ed14

08001a54 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a54:	2301      	movs	r3, #1
 8001a56:	0942      	lsrs	r2, r0, #5
 8001a58:	f000 001f 	and.w	r0, r0, #31
 8001a5c:	fa03 f000 	lsl.w	r0, r3, r0
 8001a60:	4b01      	ldr	r3, [pc, #4]	; (8001a68 <HAL_NVIC_EnableIRQ+0x14>)
 8001a62:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	3801      	subs	r0, #1
 8001a6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a72:	d20a      	bcs.n	8001a8a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a9a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	bf0c      	ite	eq
 8001aa0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001aa4:	f022 0204 	bicne.w	r2, r2, #4
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	4770      	bx	lr
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001ab0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001ab2:	f005 fee1 	bl	8007878 <HAL_SYSTICK_Callback>
 8001ab6:	bd08      	pop	{r3, pc}

08001ab8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001aba:	b350      	cbz	r0, 8001b12 <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001abc:	2214      	movs	r2, #20
 8001abe:	6801      	ldr	r1, [r0, #0]
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ac2:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ac4:	440b      	add	r3, r1
 8001ac6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8001ad0:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001ad2:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001ad4:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ad6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8001ada:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001adc:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ade:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	4323      	orrs	r3, r4
 8001ae4:	6904      	ldr	r4, [r0, #16]
 8001ae6:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae8:	6944      	ldr	r4, [r0, #20]
 8001aea:	4323      	orrs	r3, r4
 8001aec:	6984      	ldr	r4, [r0, #24]
 8001aee:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af0:	69c4      	ldr	r4, [r0, #28]
 8001af2:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001af4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001af6:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001af8:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8001afa:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001afc:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8001b00:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001b02:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001b04:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001b06:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b08:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b0a:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8001b0e:	4618      	mov	r0, r3
 8001b10:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b12:	2001      	movs	r0, #1
}
 8001b14:	bd10      	pop	{r4, pc}
 8001b16:	bf00      	nop
 8001b18:	bffdfff8 	.word	0xbffdfff8
 8001b1c:	40020000 	.word	0x40020000

08001b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b20:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b22:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001b26:	2c01      	cmp	r4, #1
 8001b28:	d035      	beq.n	8001b96 <HAL_DMA_Start_IT+0x76>
 8001b2a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b2c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001b30:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b34:	42a5      	cmp	r5, r4
 8001b36:	f04f 0600 	mov.w	r6, #0
 8001b3a:	f04f 0402 	mov.w	r4, #2
 8001b3e:	d128      	bne.n	8001b92 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b40:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b44:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b46:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001b48:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b4a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001b4c:	f026 0601 	bic.w	r6, r6, #1
 8001b50:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b52:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001b54:	40bd      	lsls	r5, r7
 8001b56:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b58:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b5a:	6843      	ldr	r3, [r0, #4]
 8001b5c:	6805      	ldr	r5, [r0, #0]
 8001b5e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001b60:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b62:	bf0b      	itete	eq
 8001b64:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001b66:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001b68:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001b6a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001b6c:	b14b      	cbz	r3, 8001b82 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b74:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b76:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b78:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	602b      	str	r3, [r5, #0]
 8001b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	f043 030a 	orr.w	r3, r3, #10
 8001b90:	e7f0      	b.n	8001b74 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001b92:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001b96:	2002      	movs	r0, #2
}
 8001b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b9c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b9c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001ba0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d003      	beq.n	8001bae <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001baa:	2001      	movs	r0, #1
 8001bac:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bae:	6803      	ldr	r3, [r0, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	f022 020e 	bic.w	r2, r2, #14
 8001bb6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bc0:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <HAL_DMA_Abort_IT+0x88>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01f      	beq.n	8001c06 <HAL_DMA_Abort_IT+0x6a>
 8001bc6:	3214      	adds	r2, #20
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d01e      	beq.n	8001c0a <HAL_DMA_Abort_IT+0x6e>
 8001bcc:	3214      	adds	r2, #20
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d01d      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x72>
 8001bd2:	3214      	adds	r2, #20
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d01d      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x78>
 8001bd8:	3214      	adds	r2, #20
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01d      	beq.n	8001c1a <HAL_DMA_Abort_IT+0x7e>
 8001bde:	3214      	adds	r2, #20
 8001be0:	4293      	cmp	r3, r2
 8001be2:	bf0c      	ite	eq
 8001be4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001be8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001bec:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8001bee:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bf0:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001bf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001bfa:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001bfe:	b17b      	cbz	r3, 8001c20 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001c00:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	4620      	mov	r0, r4
 8001c04:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c06:	2301      	movs	r3, #1
 8001c08:	e7f0      	b.n	8001bec <HAL_DMA_Abort_IT+0x50>
 8001c0a:	2310      	movs	r3, #16
 8001c0c:	e7ee      	b.n	8001bec <HAL_DMA_Abort_IT+0x50>
 8001c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c12:	e7eb      	b.n	8001bec <HAL_DMA_Abort_IT+0x50>
 8001c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c18:	e7e8      	b.n	8001bec <HAL_DMA_Abort_IT+0x50>
 8001c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c1e:	e7e5      	b.n	8001bec <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001c20:	4618      	mov	r0, r3
}
 8001c22:	bd10      	pop	{r4, pc}
 8001c24:	40020008 	.word	0x40020008
 8001c28:	40020000 	.word	0x40020000

08001c2c <HAL_DMA_IRQHandler>:
{
 8001c2c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c2e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c30:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c32:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c34:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001c36:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c38:	4095      	lsls	r5, r2
 8001c3a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001c3c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c3e:	d032      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x7a>
 8001c40:	074d      	lsls	r5, r1, #29
 8001c42:	d530      	bpl.n	8001ca6 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c48:	bf5e      	ittt	pl
 8001c4a:	681a      	ldrpl	r2, [r3, #0]
 8001c4c:	f022 0204 	bicpl.w	r2, r2, #4
 8001c50:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c52:	4a3e      	ldr	r2, [pc, #248]	; (8001d4c <HAL_DMA_IRQHandler+0x120>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d019      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x60>
 8001c58:	3214      	adds	r2, #20
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d018      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x64>
 8001c5e:	3214      	adds	r2, #20
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d017      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x68>
 8001c64:	3214      	adds	r2, #20
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d017      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x6e>
 8001c6a:	3214      	adds	r2, #20
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d017      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x74>
 8001c70:	3214      	adds	r2, #20
 8001c72:	4293      	cmp	r3, r2
 8001c74:	bf0c      	ite	eq
 8001c76:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001c7a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001c7e:	4a34      	ldr	r2, [pc, #208]	; (8001d50 <HAL_DMA_IRQHandler+0x124>)
 8001c80:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001c82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d05e      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x11a>
}
 8001c88:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001c8a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	e7f6      	b.n	8001c7e <HAL_DMA_IRQHandler+0x52>
 8001c90:	2340      	movs	r3, #64	; 0x40
 8001c92:	e7f4      	b.n	8001c7e <HAL_DMA_IRQHandler+0x52>
 8001c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c98:	e7f1      	b.n	8001c7e <HAL_DMA_IRQHandler+0x52>
 8001c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c9e:	e7ee      	b.n	8001c7e <HAL_DMA_IRQHandler+0x52>
 8001ca0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ca4:	e7eb      	b.n	8001c7e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ca6:	2502      	movs	r5, #2
 8001ca8:	4095      	lsls	r5, r2
 8001caa:	4225      	tst	r5, r4
 8001cac:	d035      	beq.n	8001d1a <HAL_DMA_IRQHandler+0xee>
 8001cae:	078d      	lsls	r5, r1, #30
 8001cb0:	d533      	bpl.n	8001d1a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	0694      	lsls	r4, r2, #26
 8001cb6:	d406      	bmi.n	8001cc6 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	f022 020a 	bic.w	r2, r2, #10
 8001cbe:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001cc6:	4a21      	ldr	r2, [pc, #132]	; (8001d4c <HAL_DMA_IRQHandler+0x120>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d019      	beq.n	8001d00 <HAL_DMA_IRQHandler+0xd4>
 8001ccc:	3214      	adds	r2, #20
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d018      	beq.n	8001d04 <HAL_DMA_IRQHandler+0xd8>
 8001cd2:	3214      	adds	r2, #20
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d017      	beq.n	8001d08 <HAL_DMA_IRQHandler+0xdc>
 8001cd8:	3214      	adds	r2, #20
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d017      	beq.n	8001d0e <HAL_DMA_IRQHandler+0xe2>
 8001cde:	3214      	adds	r2, #20
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d017      	beq.n	8001d14 <HAL_DMA_IRQHandler+0xe8>
 8001ce4:	3214      	adds	r2, #20
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	bf0c      	ite	eq
 8001cea:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001cee:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001cf2:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_DMA_IRQHandler+0x124>)
 8001cf4:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001cfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001cfe:	e7c1      	b.n	8001c84 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d00:	2302      	movs	r3, #2
 8001d02:	e7f6      	b.n	8001cf2 <HAL_DMA_IRQHandler+0xc6>
 8001d04:	2320      	movs	r3, #32
 8001d06:	e7f4      	b.n	8001cf2 <HAL_DMA_IRQHandler+0xc6>
 8001d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0c:	e7f1      	b.n	8001cf2 <HAL_DMA_IRQHandler+0xc6>
 8001d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d12:	e7ee      	b.n	8001cf2 <HAL_DMA_IRQHandler+0xc6>
 8001d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d18:	e7eb      	b.n	8001cf2 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d1a:	2508      	movs	r5, #8
 8001d1c:	4095      	lsls	r5, r2
 8001d1e:	4225      	tst	r5, r4
 8001d20:	d011      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x11a>
 8001d22:	0709      	lsls	r1, r1, #28
 8001d24:	d50f      	bpl.n	8001d46 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d26:	6819      	ldr	r1, [r3, #0]
 8001d28:	f021 010e 	bic.w	r1, r1, #14
 8001d2c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d2e:	2301      	movs	r3, #1
 8001d30:	fa03 f202 	lsl.w	r2, r3, r2
 8001d34:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d36:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001d38:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001d42:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d44:	e79e      	b.n	8001c84 <HAL_DMA_IRQHandler+0x58>
}
 8001d46:	bc70      	pop	{r4, r5, r6}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40020008 	.word	0x40020008
 8001d50:	40020000 	.word	0x40020000

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001d58:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001d5a:	4616      	mov	r6, r2
 8001d5c:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d5e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001f04 <HAL_GPIO_Init+0x1b0>
 8001d62:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001f08 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001d66:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001d6c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d70:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001d74:	45a0      	cmp	r8, r4
 8001d76:	d17f      	bne.n	8001e78 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001d78:	684d      	ldr	r5, [r1, #4]
 8001d7a:	2d12      	cmp	r5, #18
 8001d7c:	f000 80af 	beq.w	8001ede <HAL_GPIO_Init+0x18a>
 8001d80:	f200 8088 	bhi.w	8001e94 <HAL_GPIO_Init+0x140>
 8001d84:	2d02      	cmp	r5, #2
 8001d86:	f000 80a7 	beq.w	8001ed8 <HAL_GPIO_Init+0x184>
 8001d8a:	d87c      	bhi.n	8001e86 <HAL_GPIO_Init+0x132>
 8001d8c:	2d00      	cmp	r5, #0
 8001d8e:	f000 808e 	beq.w	8001eae <HAL_GPIO_Init+0x15a>
 8001d92:	2d01      	cmp	r5, #1
 8001d94:	f000 809e 	beq.w	8001ed4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d98:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d9c:	2cff      	cmp	r4, #255	; 0xff
 8001d9e:	bf93      	iteet	ls
 8001da0:	4682      	movls	sl, r0
 8001da2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001da6:	3d08      	subhi	r5, #8
 8001da8:	f8d0 b000 	ldrls.w	fp, [r0]
 8001dac:	bf92      	itee	ls
 8001dae:	00b5      	lslls	r5, r6, #2
 8001db0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001db4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001db6:	fa09 f805 	lsl.w	r8, r9, r5
 8001dba:	ea2b 0808 	bic.w	r8, fp, r8
 8001dbe:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dc2:	bf88      	it	hi
 8001dc4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dc8:	ea48 0505 	orr.w	r5, r8, r5
 8001dcc:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001dd4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001dd8:	d04e      	beq.n	8001e78 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dda:	4d47      	ldr	r5, [pc, #284]	; (8001ef8 <HAL_GPIO_Init+0x1a4>)
 8001ddc:	4f46      	ldr	r7, [pc, #280]	; (8001ef8 <HAL_GPIO_Init+0x1a4>)
 8001dde:	69ad      	ldr	r5, [r5, #24]
 8001de0:	f026 0803 	bic.w	r8, r6, #3
 8001de4:	f045 0501 	orr.w	r5, r5, #1
 8001de8:	61bd      	str	r5, [r7, #24]
 8001dea:	69bd      	ldr	r5, [r7, #24]
 8001dec:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001df0:	f005 0501 	and.w	r5, r5, #1
 8001df4:	9501      	str	r5, [sp, #4]
 8001df6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001dfa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dfe:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e00:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001e04:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e08:	fa09 f90b 	lsl.w	r9, r9, fp
 8001e0c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e10:	4d3a      	ldr	r5, [pc, #232]	; (8001efc <HAL_GPIO_Init+0x1a8>)
 8001e12:	42a8      	cmp	r0, r5
 8001e14:	d068      	beq.n	8001ee8 <HAL_GPIO_Init+0x194>
 8001e16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e1a:	42a8      	cmp	r0, r5
 8001e1c:	d066      	beq.n	8001eec <HAL_GPIO_Init+0x198>
 8001e1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e22:	42a8      	cmp	r0, r5
 8001e24:	d064      	beq.n	8001ef0 <HAL_GPIO_Init+0x19c>
 8001e26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e2a:	42a8      	cmp	r0, r5
 8001e2c:	bf0c      	ite	eq
 8001e2e:	2503      	moveq	r5, #3
 8001e30:	2504      	movne	r5, #4
 8001e32:	fa05 f50b 	lsl.w	r5, r5, fp
 8001e36:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001e3a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e3e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e40:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001e44:	bf14      	ite	ne
 8001e46:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e48:	43a5      	biceq	r5, r4
 8001e4a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e4c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e4e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001e52:	bf14      	ite	ne
 8001e54:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e56:	43a5      	biceq	r5, r4
 8001e58:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e5a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e5c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e60:	bf14      	ite	ne
 8001e62:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e64:	43a5      	biceq	r5, r4
 8001e66:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e68:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e6a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e6e:	bf14      	ite	ne
 8001e70:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e72:	ea25 0404 	biceq.w	r4, r5, r4
 8001e76:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001e78:	3601      	adds	r6, #1
 8001e7a:	2e10      	cmp	r6, #16
 8001e7c:	f47f af73 	bne.w	8001d66 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001e80:	b003      	add	sp, #12
 8001e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001e86:	2d03      	cmp	r5, #3
 8001e88:	d022      	beq.n	8001ed0 <HAL_GPIO_Init+0x17c>
 8001e8a:	2d11      	cmp	r5, #17
 8001e8c:	d184      	bne.n	8001d98 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e8e:	68ca      	ldr	r2, [r1, #12]
 8001e90:	3204      	adds	r2, #4
          break;
 8001e92:	e781      	b.n	8001d98 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001e94:	4f1a      	ldr	r7, [pc, #104]	; (8001f00 <HAL_GPIO_Init+0x1ac>)
 8001e96:	42bd      	cmp	r5, r7
 8001e98:	d009      	beq.n	8001eae <HAL_GPIO_Init+0x15a>
 8001e9a:	d812      	bhi.n	8001ec2 <HAL_GPIO_Init+0x16e>
 8001e9c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001f0c <HAL_GPIO_Init+0x1b8>
 8001ea0:	454d      	cmp	r5, r9
 8001ea2:	d004      	beq.n	8001eae <HAL_GPIO_Init+0x15a>
 8001ea4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001ea8:	454d      	cmp	r5, r9
 8001eaa:	f47f af75 	bne.w	8001d98 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eae:	688a      	ldr	r2, [r1, #8]
 8001eb0:	b1c2      	cbz	r2, 8001ee4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001eb4:	bf0c      	ite	eq
 8001eb6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001eba:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	e76a      	b.n	8001d98 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001ec2:	4575      	cmp	r5, lr
 8001ec4:	d0f3      	beq.n	8001eae <HAL_GPIO_Init+0x15a>
 8001ec6:	4565      	cmp	r5, ip
 8001ec8:	d0f1      	beq.n	8001eae <HAL_GPIO_Init+0x15a>
 8001eca:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001f10 <HAL_GPIO_Init+0x1bc>
 8001ece:	e7eb      	b.n	8001ea8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	e761      	b.n	8001d98 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed4:	68ca      	ldr	r2, [r1, #12]
          break;
 8001ed6:	e75f      	b.n	8001d98 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ed8:	68ca      	ldr	r2, [r1, #12]
 8001eda:	3208      	adds	r2, #8
          break;
 8001edc:	e75c      	b.n	8001d98 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ede:	68ca      	ldr	r2, [r1, #12]
 8001ee0:	320c      	adds	r2, #12
          break;
 8001ee2:	e759      	b.n	8001d98 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	e757      	b.n	8001d98 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee8:	2500      	movs	r5, #0
 8001eea:	e7a2      	b.n	8001e32 <HAL_GPIO_Init+0xde>
 8001eec:	2501      	movs	r5, #1
 8001eee:	e7a0      	b.n	8001e32 <HAL_GPIO_Init+0xde>
 8001ef0:	2502      	movs	r5, #2
 8001ef2:	e79e      	b.n	8001e32 <HAL_GPIO_Init+0xde>
 8001ef4:	40010400 	.word	0x40010400
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010800 	.word	0x40010800
 8001f00:	10210000 	.word	0x10210000
 8001f04:	10310000 	.word	0x10310000
 8001f08:	10320000 	.word	0x10320000
 8001f0c:	10110000 	.word	0x10110000
 8001f10:	10220000 	.word	0x10220000

08001f14 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f14:	b10a      	cbz	r2, 8001f1a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f16:	6101      	str	r1, [r0, #16]
 8001f18:	4770      	bx	lr
 8001f1a:	0409      	lsls	r1, r1, #16
 8001f1c:	e7fb      	b.n	8001f16 <HAL_GPIO_WritePin+0x2>

08001f1e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001f1e:	68c3      	ldr	r3, [r0, #12]
 8001f20:	4059      	eors	r1, r3
 8001f22:	60c1      	str	r1, [r0, #12]
 8001f24:	4770      	bx	lr

08001f26 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f26:	6802      	ldr	r2, [r0, #0]
 8001f28:	6953      	ldr	r3, [r2, #20]
 8001f2a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001f2e:	d00d      	beq.n	8001f4c <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f30:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001f34:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f36:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001f38:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f3a:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001f44:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001f48:	2001      	movs	r0, #1
 8001f4a:	4770      	bx	lr
  }
  return HAL_OK;
 8001f4c:	4618      	mov	r0, r3
}
 8001f4e:	4770      	bx	lr

08001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f54:	4604      	mov	r4, r0
 8001f56:	4617      	mov	r7, r2
 8001f58:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f5a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001f5e:	b28e      	uxth	r6, r1
 8001f60:	6825      	ldr	r5, [r4, #0]
 8001f62:	f1b8 0f01 	cmp.w	r8, #1
 8001f66:	bf0c      	ite	eq
 8001f68:	696b      	ldreq	r3, [r5, #20]
 8001f6a:	69ab      	ldrne	r3, [r5, #24]
 8001f6c:	ea36 0303 	bics.w	r3, r6, r3
 8001f70:	bf14      	ite	ne
 8001f72:	2001      	movne	r0, #1
 8001f74:	2000      	moveq	r0, #0
 8001f76:	b908      	cbnz	r0, 8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f7c:	696b      	ldr	r3, [r5, #20]
 8001f7e:	055a      	lsls	r2, r3, #21
 8001f80:	d512      	bpl.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f82:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001f84:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f8c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001f90:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f92:	2304      	movs	r3, #4
 8001f94:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f96:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001f98:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f9a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001f9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001fa0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001fa8:	1c7b      	adds	r3, r7, #1
 8001faa:	d0d9      	beq.n	8001f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001fac:	b94f      	cbnz	r7, 8001fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fae:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001fb0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fb2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001fb4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001fb8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001fc2:	f7ff fa87 	bl	80014d4 <HAL_GetTick>
 8001fc6:	eba0 0009 	sub.w	r0, r0, r9
 8001fca:	4287      	cmp	r7, r0
 8001fcc:	d2c8      	bcs.n	8001f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001fce:	e7ee      	b.n	8001fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001fd0 <I2C_WaitOnFlagUntilTimeout>:
{
 8001fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	4690      	mov	r8, r2
 8001fd8:	461f      	mov	r7, r3
 8001fda:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001fdc:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001fe0:	b28d      	uxth	r5, r1
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	f1b9 0f01 	cmp.w	r9, #1
 8001fe8:	bf0c      	ite	eq
 8001fea:	695b      	ldreq	r3, [r3, #20]
 8001fec:	699b      	ldrne	r3, [r3, #24]
 8001fee:	ea35 0303 	bics.w	r3, r5, r3
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2301      	moveq	r3, #1
 8001ff6:	2300      	movne	r3, #0
 8001ff8:	4543      	cmp	r3, r8
 8001ffa:	d002      	beq.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001ffc:	2000      	movs	r0, #0
}
 8001ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002002:	1c7b      	adds	r3, r7, #1
 8002004:	d0ed      	beq.n	8001fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002006:	b95f      	cbnz	r7, 8002020 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002008:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800200a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800200c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800200e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002012:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002016:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800201c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002020:	f7ff fa58 	bl	80014d4 <HAL_GetTick>
 8002024:	1b80      	subs	r0, r0, r6
 8002026:	4287      	cmp	r7, r0
 8002028:	d2db      	bcs.n	8001fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
 800202a:	e7ed      	b.n	8002008 <I2C_WaitOnFlagUntilTimeout+0x38>

0800202c <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	4604      	mov	r4, r0
 8002030:	460d      	mov	r5, r1
 8002032:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	061b      	lsls	r3, r3, #24
 800203a:	d501      	bpl.n	8002040 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800203c:	2000      	movs	r0, #0
 800203e:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002040:	4620      	mov	r0, r4
 8002042:	f7ff ff70 	bl	8001f26 <I2C_IsAcknowledgeFailed>
 8002046:	b9a8      	cbnz	r0, 8002074 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8002048:	1c6a      	adds	r2, r5, #1
 800204a:	d0f3      	beq.n	8002034 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800204c:	b965      	cbnz	r5, 8002068 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800204e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8002050:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002052:	f043 0320 	orr.w	r3, r3, #32
 8002056:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002058:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800205a:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800205c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800205e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002062:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8002066:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002068:	f7ff fa34 	bl	80014d4 <HAL_GetTick>
 800206c:	1b80      	subs	r0, r0, r6
 800206e:	4285      	cmp	r5, r0
 8002070:	d2e0      	bcs.n	8002034 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8002072:	e7ec      	b.n	800204e <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8002074:	2001      	movs	r0, #1
}
 8002076:	bd70      	pop	{r4, r5, r6, pc}

08002078 <I2C_RequestMemoryWrite>:
{
 8002078:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800207c:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800207e:	6802      	ldr	r2, [r0, #0]
{
 8002080:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002082:	6813      	ldr	r3, [r2, #0]
{
 8002084:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]
{
 800208c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800208e:	9600      	str	r6, [sp, #0]
 8002090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002092:	2200      	movs	r2, #0
 8002094:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002098:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800209a:	f7ff ff99 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 800209e:	b968      	cbnz	r0, 80020bc <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80020a6:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80020aa:	4633      	mov	r3, r6
 80020ac:	491a      	ldr	r1, [pc, #104]	; (8002118 <I2C_RequestMemoryWrite+0xa0>)
 80020ae:	4620      	mov	r0, r4
 80020b0:	f7ff ff4e 	bl	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b4:	b130      	cbz	r0, 80020c4 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d018      	beq.n	80020ee <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 80020bc:	2003      	movs	r0, #3
}
 80020be:	b004      	add	sp, #16
 80020c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	9003      	str	r0, [sp, #12]
 80020c8:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020cc:	9203      	str	r2, [sp, #12]
 80020ce:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d0:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d2:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d6:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d8:	f7ff ffa8 	bl	800202c <I2C_WaitOnTXEFlagUntilTimeout>
 80020dc:	b148      	cbz	r0, 80020f2 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d1eb      	bne.n	80020bc <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80020e4:	6822      	ldr	r2, [r4, #0]
 80020e6:	6813      	ldr	r3, [r2, #0]
 80020e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ec:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80020ee:	2001      	movs	r0, #1
 80020f0:	e7e5      	b.n	80020be <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020f2:	f1b8 0f01 	cmp.w	r8, #1
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	d102      	bne.n	8002100 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020fa:	b2ed      	uxtb	r5, r5
 80020fc:	611d      	str	r5, [r3, #16]
 80020fe:	e7de      	b.n	80020be <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002100:	0a2a      	lsrs	r2, r5, #8
 8002102:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002104:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002106:	4632      	mov	r2, r6
 8002108:	4620      	mov	r0, r4
 800210a:	f7ff ff8f 	bl	800202c <I2C_WaitOnTXEFlagUntilTimeout>
 800210e:	2800      	cmp	r0, #0
 8002110:	d1e5      	bne.n	80020de <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	e7f1      	b.n	80020fa <I2C_RequestMemoryWrite+0x82>
 8002116:	bf00      	nop
 8002118:	00010002 	.word	0x00010002

0800211c <I2C_RequestMemoryRead>:
{
 800211c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002120:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002122:	6803      	ldr	r3, [r0, #0]
{
 8002124:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002126:	681a      	ldr	r2, [r3, #0]
{
 8002128:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800212a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800212e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002130:	681a      	ldr	r2, [r3, #0]
{
 8002132:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002138:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800213a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800213e:	9500      	str	r5, [sp, #0]
 8002140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002142:	2200      	movs	r2, #0
{
 8002144:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002146:	f7ff ff43 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 800214a:	b980      	cbnz	r0, 800216e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	b2ff      	uxtb	r7, r7
 8002150:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8002154:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002156:	492d      	ldr	r1, [pc, #180]	; (800220c <I2C_RequestMemoryRead+0xf0>)
 8002158:	462b      	mov	r3, r5
 800215a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800215c:	4620      	mov	r0, r4
 800215e:	f7ff fef7 	bl	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002162:	b140      	cbz	r0, 8002176 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002166:	2b04      	cmp	r3, #4
 8002168:	d101      	bne.n	800216e <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 800216a:	2001      	movs	r0, #1
 800216c:	e000      	b.n	8002170 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 800216e:	2003      	movs	r0, #3
}
 8002170:	b004      	add	sp, #16
 8002172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	9003      	str	r0, [sp, #12]
 800217a:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800217c:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217e:	9203      	str	r2, [sp, #12]
 8002180:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002182:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002184:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002186:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002188:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800218a:	f7ff ff4f 	bl	800202c <I2C_WaitOnTXEFlagUntilTimeout>
 800218e:	b140      	cbz	r0, 80021a2 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002192:	2b04      	cmp	r3, #4
 8002194:	d1eb      	bne.n	800216e <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	6813      	ldr	r3, [r2, #0]
 800219a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e7e3      	b.n	800216a <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021a2:	f1b8 0f01 	cmp.w	r8, #1
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	d124      	bne.n	80021f4 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021aa:	b2f6      	uxtb	r6, r6
 80021ac:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ae:	462a      	mov	r2, r5
 80021b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80021b2:	4620      	mov	r0, r4
 80021b4:	f7ff ff3a 	bl	800202c <I2C_WaitOnTXEFlagUntilTimeout>
 80021b8:	4602      	mov	r2, r0
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d1e8      	bne.n	8002190 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80021be:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021c0:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80021c2:	680b      	ldr	r3, [r1, #0]
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ca:	9500      	str	r5, [sp, #0]
 80021cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021d2:	f7ff fefd 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 80021d6:	2800      	cmp	r0, #0
 80021d8:	d1c9      	bne.n	800216e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	f047 0701 	orr.w	r7, r7, #1
 80021e0:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021e4:	462b      	mov	r3, r5
 80021e6:	4909      	ldr	r1, [pc, #36]	; (800220c <I2C_RequestMemoryRead+0xf0>)
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7ff feb1 	bl	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d1b8      	bne.n	8002164 <I2C_RequestMemoryRead+0x48>
 80021f2:	e7bd      	b.n	8002170 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021f4:	0a32      	lsrs	r2, r6, #8
 80021f6:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80021fa:	462a      	mov	r2, r5
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7ff ff15 	bl	800202c <I2C_WaitOnTXEFlagUntilTimeout>
 8002202:	2800      	cmp	r0, #0
 8002204:	d1c4      	bne.n	8002190 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	e7cf      	b.n	80021aa <I2C_RequestMemoryRead+0x8e>
 800220a:	bf00      	nop
 800220c:	00010002 	.word	0x00010002

08002210 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	4604      	mov	r4, r0
 8002214:	460d      	mov	r5, r1
 8002216:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002218:	6820      	ldr	r0, [r4, #0]
 800221a:	6943      	ldr	r3, [r0, #20]
 800221c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002220:	d001      	beq.n	8002226 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002222:	2000      	movs	r0, #0
}
 8002224:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002226:	6942      	ldr	r2, [r0, #20]
 8002228:	06d2      	lsls	r2, r2, #27
 800222a:	d50b      	bpl.n	8002244 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222c:	f06f 0210 	mvn.w	r2, #16
 8002230:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8002232:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002236:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 800223e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8002242:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002244:	b95d      	cbnz	r5, 800225e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002246:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002248:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800224a:	f043 0320 	orr.w	r3, r3, #32
 800224e:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002250:	2320      	movs	r3, #32
 8002252:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8002256:	2300      	movs	r3, #0
 8002258:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800225c:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800225e:	f7ff f939 	bl	80014d4 <HAL_GetTick>
 8002262:	1b80      	subs	r0, r0, r6
 8002264:	4285      	cmp	r5, r0
 8002266:	d2d7      	bcs.n	8002218 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8002268:	e7ed      	b.n	8002246 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800226a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800226a:	b570      	push	{r4, r5, r6, lr}
 800226c:	4604      	mov	r4, r0
 800226e:	460d      	mov	r5, r1
 8002270:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	075b      	lsls	r3, r3, #29
 8002278:	d501      	bpl.n	800227e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800227a:	2000      	movs	r0, #0
 800227c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800227e:	4620      	mov	r0, r4
 8002280:	f7ff fe51 	bl	8001f26 <I2C_IsAcknowledgeFailed>
 8002284:	b9a8      	cbnz	r0, 80022b2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8002286:	1c6a      	adds	r2, r5, #1
 8002288:	d0f3      	beq.n	8002272 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800228a:	b965      	cbnz	r5, 80022a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800228c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800228e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002290:	f043 0320 	orr.w	r3, r3, #32
 8002294:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002296:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8002298:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800229a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800229c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80022a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80022a4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80022a6:	f7ff f915 	bl	80014d4 <HAL_GetTick>
 80022aa:	1b80      	subs	r0, r0, r6
 80022ac:	4285      	cmp	r5, r0
 80022ae:	d2e0      	bcs.n	8002272 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80022b0:	e7ec      	b.n	800228c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80022b2:	2001      	movs	r0, #1
}
 80022b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080022b8 <HAL_I2C_Init>:
{
 80022b8:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 80022ba:	4604      	mov	r4, r0
 80022bc:	b908      	cbnz	r0, 80022c2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80022be:	2001      	movs	r0, #1
 80022c0:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80022c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022ca:	b91b      	cbnz	r3, 80022d4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80022cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80022d0:	f006 f918 	bl	8008504 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d4:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80022d6:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80022dc:	6813      	ldr	r3, [r2, #0]
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022e4:	f000 feec 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022e8:	6863      	ldr	r3, [r4, #4]
 80022ea:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <HAL_I2C_Init+0xf0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d830      	bhi.n	8002352 <HAL_I2C_Init+0x9a>
 80022f0:	4a2e      	ldr	r2, [pc, #184]	; (80023ac <HAL_I2C_Init+0xf4>)
 80022f2:	4290      	cmp	r0, r2
 80022f4:	d9e3      	bls.n	80022be <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80022f6:	4a2e      	ldr	r2, [pc, #184]	; (80023b0 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 80022f8:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80022fa:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80022fe:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002300:	3201      	adds	r2, #1
 8002302:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002304:	4a28      	ldr	r2, [pc, #160]	; (80023a8 <HAL_I2C_Init+0xf0>)
 8002306:	3801      	subs	r0, #1
 8002308:	4293      	cmp	r3, r2
 800230a:	d832      	bhi.n	8002372 <HAL_I2C_Init+0xba>
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002312:	1c43      	adds	r3, r0, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	2b04      	cmp	r3, #4
 800231a:	bf38      	it	cc
 800231c:	2304      	movcc	r3, #4
 800231e:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002320:	6a22      	ldr	r2, [r4, #32]
 8002322:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002324:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800232a:	68e2      	ldr	r2, [r4, #12]
 800232c:	6923      	ldr	r3, [r4, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002332:	69a2      	ldr	r2, [r4, #24]
 8002334:	6963      	ldr	r3, [r4, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800233a:	680b      	ldr	r3, [r1, #0]
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002342:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002344:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002346:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800234a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002350:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <HAL_I2C_Init+0xfc>)
 8002354:	4290      	cmp	r0, r2
 8002356:	d9b2      	bls.n	80022be <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8002358:	4d15      	ldr	r5, [pc, #84]	; (80023b0 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800235a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800235e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8002362:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002364:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8002366:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002368:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800236c:	fbb2 f2f5 	udiv	r2, r2, r5
 8002370:	e7c6      	b.n	8002300 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002372:	68a2      	ldr	r2, [r4, #8]
 8002374:	b952      	cbnz	r2, 800238c <HAL_I2C_Init+0xd4>
 8002376:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800237a:	fbb0 f0f3 	udiv	r0, r0, r3
 800237e:	1c43      	adds	r3, r0, #1
 8002380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002384:	b16b      	cbz	r3, 80023a2 <HAL_I2C_Init+0xea>
 8002386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800238a:	e7c8      	b.n	800231e <HAL_I2C_Init+0x66>
 800238c:	2219      	movs	r2, #25
 800238e:	4353      	muls	r3, r2
 8002390:	fbb0 f0f3 	udiv	r0, r0, r3
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239a:	b113      	cbz	r3, 80023a2 <HAL_I2C_Init+0xea>
 800239c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023a0:	e7bd      	b.n	800231e <HAL_I2C_Init+0x66>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e7bb      	b.n	800231e <HAL_I2C_Init+0x66>
 80023a6:	bf00      	nop
 80023a8:	000186a0 	.word	0x000186a0
 80023ac:	001e847f 	.word	0x001e847f
 80023b0:	000f4240 	.word	0x000f4240
 80023b4:	003d08ff 	.word	0x003d08ff

080023b8 <HAL_I2C_Master_Transmit>:
{
 80023b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80023bc:	4604      	mov	r4, r0
 80023be:	461f      	mov	r7, r3
 80023c0:	460d      	mov	r5, r1
 80023c2:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80023c4:	f7ff f886 	bl	80014d4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80023c8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80023cc:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d004      	beq.n	80023dc <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80023d2:	2502      	movs	r5, #2
}
 80023d4:	4628      	mov	r0, r5
 80023d6:	b004      	add	sp, #16
 80023d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023dc:	9000      	str	r0, [sp, #0]
 80023de:	2319      	movs	r3, #25
 80023e0:	2201      	movs	r2, #1
 80023e2:	495d      	ldr	r1, [pc, #372]	; (8002558 <HAL_I2C_Master_Transmit+0x1a0>)
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7ff fdf3 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 80023ea:	2800      	cmp	r0, #0
 80023ec:	d1f1      	bne.n	80023d2 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80023ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d0ed      	beq.n	80023d2 <HAL_I2C_Master_Transmit+0x1a>
 80023f6:	2301      	movs	r3, #1
 80023f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002402:	bf5e      	ittt	pl
 8002404:	681a      	ldrpl	r2, [r3, #0]
 8002406:	f042 0201 	orrpl.w	r2, r2, #1
 800240a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002412:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002414:	2221      	movs	r2, #33	; 0x21
 8002416:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800241a:	2210      	movs	r2, #16
 800241c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002420:	2200      	movs	r2, #0
 8002422:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002424:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8002428:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800242a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800242c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800242e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002432:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002434:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002436:	2a04      	cmp	r2, #4
 8002438:	d004      	beq.n	8002444 <HAL_I2C_Master_Transmit+0x8c>
 800243a:	2a01      	cmp	r2, #1
 800243c:	d002      	beq.n	8002444 <HAL_I2C_Master_Transmit+0x8c>
 800243e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002442:	d104      	bne.n	800244e <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e002      	b.n	8002454 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800244e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002450:	2a12      	cmp	r2, #18
 8002452:	d0f7      	beq.n	8002444 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002454:	9600      	str	r6, [sp, #0]
 8002456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002458:	2200      	movs	r2, #0
 800245a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800245e:	4620      	mov	r0, r4
 8002460:	f7ff fdb6 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 8002464:	bb28      	cbnz	r0, 80024b2 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002466:	6923      	ldr	r3, [r4, #16]
 8002468:	6822      	ldr	r2, [r4, #0]
 800246a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800246e:	d112      	bne.n	8002496 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002470:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002474:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002476:	4633      	mov	r3, r6
 8002478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800247a:	4938      	ldr	r1, [pc, #224]	; (800255c <HAL_I2C_Master_Transmit+0x1a4>)
 800247c:	4620      	mov	r0, r4
 800247e:	f7ff fd67 	bl	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002482:	4605      	mov	r5, r0
 8002484:	b9a0      	cbnz	r0, 80024b0 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	9003      	str	r0, [sp, #12]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	9203      	str	r2, [sp, #12]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	9303      	str	r3, [sp, #12]
 8002492:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8002494:	e050      	b.n	8002538 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002496:	11eb      	asrs	r3, r5, #7
 8002498:	f003 0306 	and.w	r3, r3, #6
 800249c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80024a0:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024a2:	492f      	ldr	r1, [pc, #188]	; (8002560 <HAL_I2C_Master_Transmit+0x1a8>)
 80024a4:	4633      	mov	r3, r6
 80024a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7ff fd51 	bl	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ae:	b148      	cbz	r0, 80024c4 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	d107      	bne.n	80024cc <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 80024bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80024c0:	2501      	movs	r5, #1
 80024c2:	e787      	b.n	80023d4 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	b2ed      	uxtb	r5, r5
 80024c8:	611d      	str	r5, [r3, #16]
 80024ca:	e7d4      	b.n	8002476 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 80024cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80024d0:	2503      	movs	r5, #3
 80024d2:	e77f      	b.n	80023d4 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d4:	4632      	mov	r2, r6
 80024d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80024d8:	4620      	mov	r0, r4
 80024da:	f7ff fda7 	bl	800202c <I2C_WaitOnTXEFlagUntilTimeout>
 80024de:	b140      	cbz	r0, 80024f2 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d1f4      	bne.n	80024d0 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80024e6:	6822      	ldr	r2, [r4, #0]
 80024e8:	6813      	ldr	r3, [r2, #0]
 80024ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e7e6      	b.n	80024c0 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80024f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80024f4:	6820      	ldr	r0, [r4, #0]
 80024f6:	1c4b      	adds	r3, r1, #1
 80024f8:	6263      	str	r3, [r4, #36]	; 0x24
 80024fa:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80024fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80024fe:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8002500:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002502:	3b01      	subs	r3, #1
 8002504:	b29b      	uxth	r3, r3
 8002506:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002508:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800250a:	1e53      	subs	r3, r2, #1
 800250c:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800250e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8002510:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002512:	d50a      	bpl.n	800252a <HAL_I2C_Master_Transmit+0x172>
 8002514:	b14b      	cbz	r3, 800252a <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002516:	1c8b      	adds	r3, r1, #2
 8002518:	6263      	str	r3, [r4, #36]	; 0x24
 800251a:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 800251c:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800251e:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8002520:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002522:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002524:	3b01      	subs	r3, #1
 8002526:	b29b      	uxth	r3, r3
 8002528:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252a:	4632      	mov	r2, r6
 800252c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff fe9b 	bl	800226a <I2C_WaitOnBTFFlagUntilTimeout>
 8002534:	2800      	cmp	r0, #0
 8002536:	d1d3      	bne.n	80024e0 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8002538:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ca      	bne.n	80024d4 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800253e:	6821      	ldr	r1, [r4, #0]
 8002540:	680a      	ldr	r2, [r1, #0]
 8002542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002546:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002548:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800254a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800254e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002556:	e73d      	b.n	80023d4 <HAL_I2C_Master_Transmit+0x1c>
 8002558:	00100002 	.word	0x00100002
 800255c:	00010002 	.word	0x00010002
 8002560:	00010008 	.word	0x00010008

08002564 <HAL_I2C_Master_Receive>:
{
 8002564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002568:	4604      	mov	r4, r0
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	4698      	mov	r8, r3
 800256e:	460d      	mov	r5, r1
 8002570:	4691      	mov	r9, r2
 8002572:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002574:	f7fe ffae 	bl	80014d4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002578:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800257c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800257e:	2b20      	cmp	r3, #32
 8002580:	d004      	beq.n	800258c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8002582:	2502      	movs	r5, #2
}
 8002584:	4628      	mov	r0, r5
 8002586:	b009      	add	sp, #36	; 0x24
 8002588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800258c:	9000      	str	r0, [sp, #0]
 800258e:	2319      	movs	r3, #25
 8002590:	2201      	movs	r2, #1
 8002592:	49a2      	ldr	r1, [pc, #648]	; (800281c <HAL_I2C_Master_Receive+0x2b8>)
 8002594:	4620      	mov	r0, r4
 8002596:	f7ff fd1b 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 800259a:	2800      	cmp	r0, #0
 800259c:	d1f1      	bne.n	8002582 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800259e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d0ed      	beq.n	8002582 <HAL_I2C_Master_Receive+0x1e>
 80025a6:	2301      	movs	r3, #1
 80025a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80025b2:	bf5e      	ittt	pl
 80025b4:	681a      	ldrpl	r2, [r3, #0]
 80025b6:	f042 0201 	orrpl.w	r2, r2, #1
 80025ba:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c2:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80025c4:	2222      	movs	r2, #34	; 0x22
 80025c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ca:	2210      	movs	r2, #16
 80025cc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025d0:	2200      	movs	r2, #0
 80025d2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80025d8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025dc:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80025de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80025e0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80025e4:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80025e8:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ea:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80025ec:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80025f0:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025f2:	d004      	beq.n	80025fe <HAL_I2C_Master_Receive+0x9a>
 80025f4:	2a01      	cmp	r2, #1
 80025f6:	d002      	beq.n	80025fe <HAL_I2C_Master_Receive+0x9a>
 80025f8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80025fc:	d104      	bne.n	8002608 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e002      	b.n	800260e <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002608:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800260a:	2a11      	cmp	r2, #17
 800260c:	d0f7      	beq.n	80025fe <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800260e:	9600      	str	r6, [sp, #0]
 8002610:	463b      	mov	r3, r7
 8002612:	2200      	movs	r2, #0
 8002614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002618:	4620      	mov	r0, r4
 800261a:	f7ff fcd9 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 800261e:	2800      	cmp	r0, #0
 8002620:	d14d      	bne.n	80026be <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002622:	6923      	ldr	r3, [r4, #16]
 8002624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	d139      	bne.n	80026a0 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800262c:	f045 0501 	orr.w	r5, r5, #1
 8002630:	b2ed      	uxtb	r5, r5
 8002632:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002634:	4633      	mov	r3, r6
 8002636:	463a      	mov	r2, r7
 8002638:	4979      	ldr	r1, [pc, #484]	; (8002820 <HAL_I2C_Master_Receive+0x2bc>)
 800263a:	4620      	mov	r0, r4
 800263c:	f7ff fc88 	bl	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002640:	4605      	mov	r5, r0
 8002642:	2800      	cmp	r0, #0
 8002644:	d13a      	bne.n	80026bc <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8002646:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	2a00      	cmp	r2, #0
 800264c:	d069      	beq.n	8002722 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 800264e:	2a01      	cmp	r2, #1
 8002650:	d17a      	bne.n	8002748 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002658:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800265a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	9504      	str	r5, [sp, #16]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	9204      	str	r2, [sp, #16]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	9204      	str	r2, [sp, #16]
 8002668:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002670:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002672:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002674:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002828 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8002678:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800267a:	2b00      	cmp	r3, #0
 800267c:	d05b      	beq.n	8002736 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 800267e:	2b03      	cmp	r3, #3
 8002680:	f200 80d4 	bhi.w	800282c <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8002684:	2b01      	cmp	r3, #1
 8002686:	d17b      	bne.n	8002780 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002688:	4632      	mov	r2, r6
 800268a:	4639      	mov	r1, r7
 800268c:	4620      	mov	r0, r4
 800268e:	f7ff fdbf 	bl	8002210 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002692:	2800      	cmp	r0, #0
 8002694:	f000 8093 	beq.w	80027be <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800269a:	2b20      	cmp	r3, #32
 800269c:	d116      	bne.n	80026cc <HAL_I2C_Master_Receive+0x168>
 800269e:	e03e      	b.n	800271e <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026a0:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80026a4:	f008 0806 	and.w	r8, r8, #6
 80026a8:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80026ac:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026ae:	495d      	ldr	r1, [pc, #372]	; (8002824 <HAL_I2C_Master_Receive+0x2c0>)
 80026b0:	4633      	mov	r3, r6
 80026b2:	463a      	mov	r2, r7
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff fc4b 	bl	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ba:	b148      	cbz	r0, 80026d0 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	d128      	bne.n	800271a <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 80026c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 80026cc:	2501      	movs	r5, #1
 80026ce:	e759      	b.n	8002584 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	b2ed      	uxtb	r5, r5
 80026d4:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026d6:	463a      	mov	r2, r7
 80026d8:	4633      	mov	r3, r6
 80026da:	4951      	ldr	r1, [pc, #324]	; (8002820 <HAL_I2C_Master_Receive+0x2bc>)
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff fc37 	bl	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e2:	4602      	mov	r2, r0
 80026e4:	2800      	cmp	r0, #0
 80026e6:	d1e9      	bne.n	80026bc <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	9007      	str	r0, [sp, #28]
 80026ec:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ee:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f0:	9107      	str	r1, [sp, #28]
 80026f2:	6999      	ldr	r1, [r3, #24]
 80026f4:	9107      	str	r1, [sp, #28]
 80026f6:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80026fe:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002700:	9600      	str	r6, [sp, #0]
 8002702:	463b      	mov	r3, r7
 8002704:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002708:	f7ff fc62 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 800270c:	2800      	cmp	r0, #0
 800270e:	d1d6      	bne.n	80026be <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002710:	6822      	ldr	r2, [r4, #0]
 8002712:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8002716:	6113      	str	r3, [r2, #16]
 8002718:	e78c      	b.n	8002634 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 800271a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 800271e:	2503      	movs	r5, #3
 8002720:	e730      	b.n	8002584 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002722:	9503      	str	r5, [sp, #12]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	9203      	str	r2, [sp, #12]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	9203      	str	r2, [sp, #12]
 800272c:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002734:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002736:	2320      	movs	r3, #32
 8002738:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800273c:	2300      	movs	r3, #0
 800273e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002742:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002746:	e71d      	b.n	8002584 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8002748:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800274a:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 800274c:	d10e      	bne.n	800276c <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800274e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002752:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002754:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	9505      	str	r5, [sp, #20]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	9205      	str	r2, [sp, #20]
 800275e:	699a      	ldr	r2, [r3, #24]
 8002760:	9205      	str	r2, [sp, #20]
 8002762:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276a:	e781      	b.n	8002670 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800276c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002770:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	9506      	str	r5, [sp, #24]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	9206      	str	r2, [sp, #24]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	9306      	str	r3, [sp, #24]
 800277c:	9b06      	ldr	r3, [sp, #24]
 800277e:	e779      	b.n	8002674 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8002780:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002782:	9600      	str	r6, [sp, #0]
 8002784:	463b      	mov	r3, r7
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	4641      	mov	r1, r8
 800278c:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 800278e:	d124      	bne.n	80027da <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002790:	f7ff fc1e 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 8002794:	2800      	cmp	r0, #0
 8002796:	d1c2      	bne.n	800271e <HAL_I2C_Master_Receive+0x1ba>
 8002798:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a2:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	1c51      	adds	r1, r2, #1
 80027aa:	6261      	str	r1, [r4, #36]	; 0x24
 80027ac:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 80027ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027b0:	3b01      	subs	r3, #1
 80027b2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80027b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027bc:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	6262      	str	r2, [r4, #36]	; 0x24
 80027c4:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027c6:	6912      	ldr	r2, [r2, #16]
 80027c8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80027ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027cc:	3b01      	subs	r3, #1
 80027ce:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80027d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80027d8:	e74e      	b.n	8002678 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027da:	f7ff fbf9 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 80027de:	4602      	mov	r2, r0
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d19c      	bne.n	800271e <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80027e4:	6821      	ldr	r1, [r4, #0]
 80027e6:	680b      	ldr	r3, [r1, #0]
 80027e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027ec:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027ee:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027f2:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027f4:	1c59      	adds	r1, r3, #1
 80027f6:	6261      	str	r1, [r4, #36]	; 0x24
 80027f8:	6821      	ldr	r1, [r4, #0]
 80027fa:	6909      	ldr	r1, [r1, #16]
 80027fc:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 80027fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002800:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8002802:	3b01      	subs	r3, #1
 8002804:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002806:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002808:	4641      	mov	r1, r8
          hi2c->XferCount--;
 800280a:	3b01      	subs	r3, #1
 800280c:	b29b      	uxth	r3, r3
 800280e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002810:	463b      	mov	r3, r7
 8002812:	f7ff fbdd 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 8002816:	2800      	cmp	r0, #0
 8002818:	d0bf      	beq.n	800279a <HAL_I2C_Master_Receive+0x236>
 800281a:	e780      	b.n	800271e <HAL_I2C_Master_Receive+0x1ba>
 800281c:	00100002 	.word	0x00100002
 8002820:	00010002 	.word	0x00010002
 8002824:	00010008 	.word	0x00010008
 8002828:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800282c:	4632      	mov	r2, r6
 800282e:	4639      	mov	r1, r7
 8002830:	4620      	mov	r0, r4
 8002832:	f7ff fced 	bl	8002210 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002836:	2800      	cmp	r0, #0
 8002838:	f47f af2e 	bne.w	8002698 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800283c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	6262      	str	r2, [r4, #36]	; 0x24
 8002842:	6822      	ldr	r2, [r4, #0]
 8002844:	6912      	ldr	r2, [r2, #16]
 8002846:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002848:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800284a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 800284c:	3b01      	subs	r3, #1
 800284e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002850:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002852:	3b01      	subs	r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002858:	6953      	ldr	r3, [r2, #20]
 800285a:	075b      	lsls	r3, r3, #29
 800285c:	f57f af0c 	bpl.w	8002678 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002862:	1c59      	adds	r1, r3, #1
 8002864:	6261      	str	r1, [r4, #36]	; 0x24
 8002866:	e7ae      	b.n	80027c6 <HAL_I2C_Master_Receive+0x262>

08002868 <HAL_I2C_Mem_Write>:
{
 8002868:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800286c:	4604      	mov	r4, r0
 800286e:	469a      	mov	sl, r3
 8002870:	4688      	mov	r8, r1
 8002872:	4691      	mov	r9, r2
 8002874:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8002876:	f7fe fe2d 	bl	80014d4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800287a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800287e:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002880:	2b20      	cmp	r3, #32
 8002882:	d003      	beq.n	800288c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8002884:	2002      	movs	r0, #2
}
 8002886:	b002      	add	sp, #8
 8002888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800288c:	9000      	str	r0, [sp, #0]
 800288e:	2319      	movs	r3, #25
 8002890:	2201      	movs	r2, #1
 8002892:	493e      	ldr	r1, [pc, #248]	; (800298c <HAL_I2C_Mem_Write+0x124>)
 8002894:	4620      	mov	r0, r4
 8002896:	f7ff fb9b 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 800289a:	2800      	cmp	r0, #0
 800289c:	d1f2      	bne.n	8002884 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800289e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d0ee      	beq.n	8002884 <HAL_I2C_Mem_Write+0x1c>
 80028a6:	2301      	movs	r3, #1
 80028a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ac:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ae:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028b0:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028b2:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028b4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80028b6:	bf58      	it	pl
 80028b8:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ba:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 80028bc:	bf5c      	itt	pl
 80028be:	f042 0201 	orrpl.w	r2, r2, #1
 80028c2:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ca:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028cc:	2321      	movs	r3, #33	; 0x21
 80028ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028d2:	2340      	movs	r3, #64	; 0x40
 80028d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80028d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028da:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80028dc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028de:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028e2:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 80028e4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e6:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028e8:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80028ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ee:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 80028f0:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f2:	4653      	mov	r3, sl
 80028f4:	f7ff fbc0 	bl	8002078 <I2C_RequestMemoryWrite>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d02a      	beq.n	8002952 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80028fe:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002902:	2b04      	cmp	r3, #4
 8002904:	d107      	bne.n	8002916 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8002906:	2001      	movs	r0, #1
 8002908:	e7bd      	b.n	8002886 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290a:	f7ff fb8f 	bl	800202c <I2C_WaitOnTXEFlagUntilTimeout>
 800290e:	b120      	cbz	r0, 800291a <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002910:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002912:	2b04      	cmp	r3, #4
 8002914:	d034      	beq.n	8002980 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8002916:	2003      	movs	r0, #3
 8002918:	e7b5      	b.n	8002886 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800291a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800291c:	6827      	ldr	r7, [r4, #0]
 800291e:	1c4b      	adds	r3, r1, #1
 8002920:	6263      	str	r3, [r4, #36]	; 0x24
 8002922:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8002924:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002926:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8002928:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800292a:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 800292c:	3b01      	subs	r3, #1
 800292e:	b29b      	uxth	r3, r3
 8002930:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002932:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8002934:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002936:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8002938:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800293a:	d50a      	bpl.n	8002952 <HAL_I2C_Mem_Write+0xea>
 800293c:	b148      	cbz	r0, 8002952 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800293e:	1c8b      	adds	r3, r1, #2
 8002940:	6263      	str	r3, [r4, #36]	; 0x24
 8002942:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8002944:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002946:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8002948:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800294a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800294c:	3b01      	subs	r3, #1
 800294e:	b29b      	uxth	r3, r3
 8002950:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002952:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002954:	462a      	mov	r2, r5
 8002956:	4631      	mov	r1, r6
 8002958:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1d5      	bne.n	800290a <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295e:	f7ff fc84 	bl	800226a <I2C_WaitOnBTFFlagUntilTimeout>
 8002962:	2800      	cmp	r0, #0
 8002964:	d1d4      	bne.n	8002910 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002966:	6822      	ldr	r2, [r4, #0]
 8002968:	6813      	ldr	r3, [r2, #0]
 800296a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800296e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002970:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002972:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002976:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800297e:	e782      	b.n	8002886 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002980:	6822      	ldr	r2, [r4, #0]
 8002982:	6813      	ldr	r3, [r2, #0]
 8002984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e7bc      	b.n	8002906 <HAL_I2C_Mem_Write+0x9e>
 800298c:	00100002 	.word	0x00100002
 8002990:	ffff0000 	.word	0xffff0000

08002994 <HAL_I2C_Mem_Read>:
{
 8002994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002998:	4604      	mov	r4, r0
 800299a:	b086      	sub	sp, #24
 800299c:	469a      	mov	sl, r3
 800299e:	460d      	mov	r5, r1
 80029a0:	4691      	mov	r9, r2
 80029a2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80029a4:	f7fe fd96 	bl	80014d4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80029a8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80029ac:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d004      	beq.n	80029bc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80029b2:	2502      	movs	r5, #2
}
 80029b4:	4628      	mov	r0, r5
 80029b6:	b006      	add	sp, #24
 80029b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029bc:	9000      	str	r0, [sp, #0]
 80029be:	2319      	movs	r3, #25
 80029c0:	2201      	movs	r2, #1
 80029c2:	4981      	ldr	r1, [pc, #516]	; (8002bc8 <HAL_I2C_Mem_Read+0x234>)
 80029c4:	4620      	mov	r0, r4
 80029c6:	f7ff fb03 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d1f1      	bne.n	80029b2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80029ce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d0ed      	beq.n	80029b2 <HAL_I2C_Mem_Read+0x1e>
 80029d6:	2301      	movs	r3, #1
 80029d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029dc:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029de:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e2:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029e4:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e6:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80029e8:	bf58      	it	pl
 80029ea:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029ec:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 80029ee:	bf5c      	itt	pl
 80029f0:	f042 0201 	orrpl.w	r2, r2, #1
 80029f4:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fc:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029fe:	2322      	movs	r3, #34	; 0x22
 8002a00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a04:	2340      	movs	r3, #64	; 0x40
 8002a06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8002a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002a10:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a12:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a16:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 8002a18:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a1a:	4b6c      	ldr	r3, [pc, #432]	; (8002bcc <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a1c:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a1e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002a20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a22:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8002a24:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a26:	4653      	mov	r3, sl
 8002a28:	f7ff fb78 	bl	800211c <I2C_RequestMemoryRead>
 8002a2c:	4605      	mov	r5, r0
 8002a2e:	b130      	cbz	r0, 8002a3e <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a30:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002a32:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d13d      	bne.n	8002ab6 <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 8002a3a:	2501      	movs	r5, #1
 8002a3c:	e7ba      	b.n	80029b4 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8002a3e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	b992      	cbnz	r2, 8002a6a <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a44:	9002      	str	r0, [sp, #8]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	9202      	str	r2, [sp, #8]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	9202      	str	r2, [sp, #8]
 8002a4e:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a56:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a58:	2320      	movs	r3, #32
 8002a5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002a64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002a68:	e7a4      	b.n	80029b4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8002a6a:	2a01      	cmp	r2, #1
 8002a6c:	d125      	bne.n	8002aba <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	9003      	str	r0, [sp, #12]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	9203      	str	r2, [sp, #12]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	9203      	str	r2, [sp, #12]
 8002a84:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002a8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a8e:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a90:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8002bd0 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8002a94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0de      	beq.n	8002a58 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d877      	bhi.n	8002b8e <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d127      	bne.n	8002af2 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002aa2:	4632      	mov	r2, r6
 8002aa4:	4639      	mov	r1, r7
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7ff fbb2 	bl	8002210 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d03f      	beq.n	8002b30 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d1c1      	bne.n	8002a3a <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8002ab6:	2503      	movs	r5, #3
 8002ab8:	e77c      	b.n	80029b4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8002aba:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002abc:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8002abe:	d10e      	bne.n	8002ade <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac8:	6823      	ldr	r3, [r4, #0]
 8002aca:	9004      	str	r0, [sp, #16]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	9204      	str	r2, [sp, #16]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	9204      	str	r2, [sp, #16]
 8002ad4:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002adc:	e7d6      	b.n	8002a8c <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ade:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae4:	9005      	str	r0, [sp, #20]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	9205      	str	r2, [sp, #20]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	9305      	str	r3, [sp, #20]
 8002aee:	9b05      	ldr	r3, [sp, #20]
 8002af0:	e7ce      	b.n	8002a90 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 8002af2:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002af4:	9600      	str	r6, [sp, #0]
 8002af6:	463b      	mov	r3, r7
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	4641      	mov	r1, r8
 8002afe:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8002b00:	d124      	bne.n	8002b4c <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b02:	f7ff fa65 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d1d5      	bne.n	8002ab6 <HAL_I2C_Mem_Read+0x122>
 8002b0a:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b14:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	1c51      	adds	r1, r2, #1
 8002b1c:	6261      	str	r1, [r4, #36]	; 0x24
 8002b1e:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8002b20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b22:	3b01      	subs	r3, #1
 8002b24:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b2e:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	6262      	str	r2, [r4, #36]	; 0x24
 8002b36:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b38:	6912      	ldr	r2, [r2, #16]
 8002b3a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002b3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002b4a:	e7a3      	b.n	8002a94 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b4c:	f7ff fa40 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 8002b50:	4602      	mov	r2, r0
 8002b52:	2800      	cmp	r0, #0
 8002b54:	d1af      	bne.n	8002ab6 <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002b56:	6821      	ldr	r1, [r4, #0]
 8002b58:	680b      	ldr	r3, [r1, #0]
 8002b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b5e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b60:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b64:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b66:	1c59      	adds	r1, r3, #1
 8002b68:	6261      	str	r1, [r4, #36]	; 0x24
 8002b6a:	6821      	ldr	r1, [r4, #0]
 8002b6c:	6909      	ldr	r1, [r1, #16]
 8002b6e:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8002b70:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b72:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8002b74:	3b01      	subs	r3, #1
 8002b76:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b7a:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b82:	463b      	mov	r3, r7
 8002b84:	f7ff fa24 	bl	8001fd0 <I2C_WaitOnFlagUntilTimeout>
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	d0bf      	beq.n	8002b0c <HAL_I2C_Mem_Read+0x178>
 8002b8c:	e793      	b.n	8002ab6 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8e:	4632      	mov	r2, r6
 8002b90:	4639      	mov	r1, r7
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7ff fb3c 	bl	8002210 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d189      	bne.n	8002ab0 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	6262      	str	r2, [r4, #36]	; 0x24
 8002ba2:	6822      	ldr	r2, [r4, #0]
 8002ba4:	6912      	ldr	r2, [r2, #16]
 8002ba6:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002ba8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002baa:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8002bac:	3b01      	subs	r3, #1
 8002bae:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002bb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bb8:	6953      	ldr	r3, [r2, #20]
 8002bba:	075b      	lsls	r3, r3, #29
 8002bbc:	f57f af6a 	bpl.w	8002a94 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bc2:	1c59      	adds	r1, r3, #1
 8002bc4:	6261      	str	r1, [r4, #36]	; 0x24
 8002bc6:	e7b7      	b.n	8002b38 <HAL_I2C_Mem_Read+0x1a4>
 8002bc8:	00100002 	.word	0x00100002
 8002bcc:	ffff0000 	.word	0xffff0000
 8002bd0:	00010004 	.word	0x00010004

08002bd4 <HAL_I2C_GetState>:
  return hi2c->State;
 8002bd4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bdc:	6803      	ldr	r3, [r0, #0]
{
 8002bde:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	07db      	lsls	r3, r3, #31
{
 8002be4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	d410      	bmi.n	8002c0a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be8:	682b      	ldr	r3, [r5, #0]
 8002bea:	079f      	lsls	r7, r3, #30
 8002bec:	d45e      	bmi.n	8002cac <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bee:	682b      	ldr	r3, [r5, #0]
 8002bf0:	0719      	lsls	r1, r3, #28
 8002bf2:	f100 8095 	bmi.w	8002d20 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf6:	682b      	ldr	r3, [r5, #0]
 8002bf8:	075a      	lsls	r2, r3, #29
 8002bfa:	f100 80bf 	bmi.w	8002d7c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfe:	69ea      	ldr	r2, [r5, #28]
 8002c00:	2a00      	cmp	r2, #0
 8002c02:	f040 812d 	bne.w	8002e60 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002c06:	2000      	movs	r0, #0
 8002c08:	e014      	b.n	8002c34 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c0a:	4c90      	ldr	r4, [pc, #576]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c0c:	6863      	ldr	r3, [r4, #4]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d007      	beq.n	8002c26 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c16:	6863      	ldr	r3, [r4, #4]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d10c      	bne.n	8002c3a <HAL_RCC_OscConfig+0x5e>
 8002c20:	6863      	ldr	r3, [r4, #4]
 8002c22:	03de      	lsls	r6, r3, #15
 8002c24:	d509      	bpl.n	8002c3a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	039c      	lsls	r4, r3, #14
 8002c2a:	d5dd      	bpl.n	8002be8 <HAL_RCC_OscConfig+0xc>
 8002c2c:	686b      	ldr	r3, [r5, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1da      	bne.n	8002be8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002c32:	2001      	movs	r0, #1
}
 8002c34:	b002      	add	sp, #8
 8002c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3a:	686b      	ldr	r3, [r5, #4]
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c40:	d110      	bne.n	8002c64 <HAL_RCC_OscConfig+0x88>
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fc43 	bl	80014d4 <HAL_GetTick>
 8002c4e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	0398      	lsls	r0, r3, #14
 8002c54:	d4c8      	bmi.n	8002be8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c56:	f7fe fc3d 	bl	80014d4 <HAL_GetTick>
 8002c5a:	1b80      	subs	r0, r0, r6
 8002c5c:	2864      	cmp	r0, #100	; 0x64
 8002c5e:	d9f7      	bls.n	8002c50 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002c60:	2003      	movs	r0, #3
 8002c62:	e7e7      	b.n	8002c34 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c64:	b99b      	cbnz	r3, 8002c8e <HAL_RCC_OscConfig+0xb2>
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6c:	6023      	str	r3, [r4, #0]
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c74:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c76:	f7fe fc2d 	bl	80014d4 <HAL_GetTick>
 8002c7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	0399      	lsls	r1, r3, #14
 8002c80:	d5b2      	bpl.n	8002be8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c82:	f7fe fc27 	bl	80014d4 <HAL_GetTick>
 8002c86:	1b80      	subs	r0, r0, r6
 8002c88:	2864      	cmp	r0, #100	; 0x64
 8002c8a:	d9f7      	bls.n	8002c7c <HAL_RCC_OscConfig+0xa0>
 8002c8c:	e7e8      	b.n	8002c60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	d103      	bne.n	8002c9e <HAL_RCC_OscConfig+0xc2>
 8002c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9a:	6023      	str	r3, [r4, #0]
 8002c9c:	e7d1      	b.n	8002c42 <HAL_RCC_OscConfig+0x66>
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	6023      	str	r3, [r4, #0]
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002caa:	e7cd      	b.n	8002c48 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cac:	4c67      	ldr	r4, [pc, #412]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cae:	6863      	ldr	r3, [r4, #4]
 8002cb0:	f013 0f0c 	tst.w	r3, #12
 8002cb4:	d007      	beq.n	8002cc6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cb6:	6863      	ldr	r3, [r4, #4]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d110      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x106>
 8002cc0:	6863      	ldr	r3, [r4, #4]
 8002cc2:	03da      	lsls	r2, r3, #15
 8002cc4:	d40d      	bmi.n	8002ce2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	079b      	lsls	r3, r3, #30
 8002cca:	d502      	bpl.n	8002cd2 <HAL_RCC_OscConfig+0xf6>
 8002ccc:	692b      	ldr	r3, [r5, #16]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d1af      	bne.n	8002c32 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	696a      	ldr	r2, [r5, #20]
 8002cd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002cde:	6023      	str	r3, [r4, #0]
 8002ce0:	e785      	b.n	8002bee <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce2:	692a      	ldr	r2, [r5, #16]
 8002ce4:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	b16a      	cbz	r2, 8002d04 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cec:	f7fe fbf2 	bl	80014d4 <HAL_GetTick>
 8002cf0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	079f      	lsls	r7, r3, #30
 8002cf6:	d4ec      	bmi.n	8002cd2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fbec 	bl	80014d4 <HAL_GetTick>
 8002cfc:	1b80      	subs	r0, r0, r6
 8002cfe:	2802      	cmp	r0, #2
 8002d00:	d9f7      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x116>
 8002d02:	e7ad      	b.n	8002c60 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002d04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d06:	f7fe fbe5 	bl	80014d4 <HAL_GetTick>
 8002d0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	0798      	lsls	r0, r3, #30
 8002d10:	f57f af6d 	bpl.w	8002bee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d14:	f7fe fbde 	bl	80014d4 <HAL_GetTick>
 8002d18:	1b80      	subs	r0, r0, r6
 8002d1a:	2802      	cmp	r0, #2
 8002d1c:	d9f6      	bls.n	8002d0c <HAL_RCC_OscConfig+0x130>
 8002d1e:	e79f      	b.n	8002c60 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d20:	69aa      	ldr	r2, [r5, #24]
 8002d22:	4c4a      	ldr	r4, [pc, #296]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d24:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <HAL_RCC_OscConfig+0x278>)
 8002d26:	b1da      	cbz	r2, 8002d60 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fbd2 	bl	80014d4 <HAL_GetTick>
 8002d30:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d34:	079b      	lsls	r3, r3, #30
 8002d36:	d50d      	bpl.n	8002d54 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d38:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002d3c:	4b46      	ldr	r3, [pc, #280]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d44:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002d46:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002d48:	9b01      	ldr	r3, [sp, #4]
 8002d4a:	1e5a      	subs	r2, r3, #1
 8002d4c:	9201      	str	r2, [sp, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f9      	bne.n	8002d46 <HAL_RCC_OscConfig+0x16a>
 8002d52:	e750      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d54:	f7fe fbbe 	bl	80014d4 <HAL_GetTick>
 8002d58:	1b80      	subs	r0, r0, r6
 8002d5a:	2802      	cmp	r0, #2
 8002d5c:	d9e9      	bls.n	8002d32 <HAL_RCC_OscConfig+0x156>
 8002d5e:	e77f      	b.n	8002c60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002d60:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002d62:	f7fe fbb7 	bl	80014d4 <HAL_GetTick>
 8002d66:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d6a:	079f      	lsls	r7, r3, #30
 8002d6c:	f57f af43 	bpl.w	8002bf6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d70:	f7fe fbb0 	bl	80014d4 <HAL_GetTick>
 8002d74:	1b80      	subs	r0, r0, r6
 8002d76:	2802      	cmp	r0, #2
 8002d78:	d9f6      	bls.n	8002d68 <HAL_RCC_OscConfig+0x18c>
 8002d7a:	e771      	b.n	8002c60 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7c:	4c33      	ldr	r4, [pc, #204]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d7e:	69e3      	ldr	r3, [r4, #28]
 8002d80:	00d8      	lsls	r0, r3, #3
 8002d82:	d424      	bmi.n	8002dce <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002d84:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	69e3      	ldr	r3, [r4, #28]
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	61e3      	str	r3, [r4, #28]
 8002d8e:	69e3      	ldr	r3, [r4, #28]
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4e30      	ldr	r6, [pc, #192]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d9a:	6833      	ldr	r3, [r6, #0]
 8002d9c:	05d9      	lsls	r1, r3, #23
 8002d9e:	d518      	bpl.n	8002dd2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da0:	68eb      	ldr	r3, [r5, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d126      	bne.n	8002df4 <HAL_RCC_OscConfig+0x218>
 8002da6:	6a23      	ldr	r3, [r4, #32]
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002dae:	f7fe fb91 	bl	80014d4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002db6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	6a23      	ldr	r3, [r4, #32]
 8002dba:	079b      	lsls	r3, r3, #30
 8002dbc:	d53f      	bpl.n	8002e3e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002dbe:	2f00      	cmp	r7, #0
 8002dc0:	f43f af1d 	beq.w	8002bfe <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc4:	69e3      	ldr	r3, [r4, #28]
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dca:	61e3      	str	r3, [r4, #28]
 8002dcc:	e717      	b.n	8002bfe <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002dce:	2700      	movs	r7, #0
 8002dd0:	e7e2      	b.n	8002d98 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd2:	6833      	ldr	r3, [r6, #0]
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002dda:	f7fe fb7b 	bl	80014d4 <HAL_GetTick>
 8002dde:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	6833      	ldr	r3, [r6, #0]
 8002de2:	05da      	lsls	r2, r3, #23
 8002de4:	d4dc      	bmi.n	8002da0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de6:	f7fe fb75 	bl	80014d4 <HAL_GetTick>
 8002dea:	eba0 0008 	sub.w	r0, r0, r8
 8002dee:	2864      	cmp	r0, #100	; 0x64
 8002df0:	d9f6      	bls.n	8002de0 <HAL_RCC_OscConfig+0x204>
 8002df2:	e735      	b.n	8002c60 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df4:	b9ab      	cbnz	r3, 8002e22 <HAL_RCC_OscConfig+0x246>
 8002df6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6223      	str	r3, [r4, #32]
 8002e02:	6a23      	ldr	r3, [r4, #32]
 8002e04:	f023 0304 	bic.w	r3, r3, #4
 8002e08:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002e0a:	f7fe fb63 	bl	80014d4 <HAL_GetTick>
 8002e0e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	6a23      	ldr	r3, [r4, #32]
 8002e12:	0798      	lsls	r0, r3, #30
 8002e14:	d5d3      	bpl.n	8002dbe <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe fb5d 	bl	80014d4 <HAL_GetTick>
 8002e1a:	1b80      	subs	r0, r0, r6
 8002e1c:	4540      	cmp	r0, r8
 8002e1e:	d9f7      	bls.n	8002e10 <HAL_RCC_OscConfig+0x234>
 8002e20:	e71e      	b.n	8002c60 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	6a23      	ldr	r3, [r4, #32]
 8002e26:	d103      	bne.n	8002e30 <HAL_RCC_OscConfig+0x254>
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	6223      	str	r3, [r4, #32]
 8002e2e:	e7ba      	b.n	8002da6 <HAL_RCC_OscConfig+0x1ca>
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	6223      	str	r3, [r4, #32]
 8002e36:	6a23      	ldr	r3, [r4, #32]
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	e7b6      	b.n	8002dac <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7fe fb49 	bl	80014d4 <HAL_GetTick>
 8002e42:	eba0 0008 	sub.w	r0, r0, r8
 8002e46:	42b0      	cmp	r0, r6
 8002e48:	d9b6      	bls.n	8002db8 <HAL_RCC_OscConfig+0x1dc>
 8002e4a:	e709      	b.n	8002c60 <HAL_RCC_OscConfig+0x84>
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	42420000 	.word	0x42420000
 8002e54:	42420480 	.word	0x42420480
 8002e58:	20000410 	.word	0x20000410
 8002e5c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e60:	4c22      	ldr	r4, [pc, #136]	; (8002eec <HAL_RCC_OscConfig+0x310>)
 8002e62:	6863      	ldr	r3, [r4, #4]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	f43f aee2 	beq.w	8002c32 <HAL_RCC_OscConfig+0x56>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	4e1f      	ldr	r6, [pc, #124]	; (8002ef0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e72:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002e74:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e76:	d12b      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002e78:	f7fe fb2c 	bl	80014d4 <HAL_GetTick>
 8002e7c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	0199      	lsls	r1, r3, #6
 8002e82:	d41f      	bmi.n	8002ec4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e84:	6a2b      	ldr	r3, [r5, #32]
 8002e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e8c:	6862      	ldr	r2, [r4, #4]
 8002e8e:	68a9      	ldr	r1, [r5, #8]
 8002e90:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002e94:	430a      	orrs	r2, r1
 8002e96:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e98:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002e9a:	6862      	ldr	r2, [r4, #4]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fb13 	bl	80014d4 <HAL_GetTick>
 8002eae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	019a      	lsls	r2, r3, #6
 8002eb4:	f53f aea7 	bmi.w	8002c06 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe fb0c 	bl	80014d4 <HAL_GetTick>
 8002ebc:	1b40      	subs	r0, r0, r5
 8002ebe:	2802      	cmp	r0, #2
 8002ec0:	d9f6      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x2d4>
 8002ec2:	e6cd      	b.n	8002c60 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fe fb06 	bl	80014d4 <HAL_GetTick>
 8002ec8:	1bc0      	subs	r0, r0, r7
 8002eca:	2802      	cmp	r0, #2
 8002ecc:	d9d7      	bls.n	8002e7e <HAL_RCC_OscConfig+0x2a2>
 8002ece:	e6c7      	b.n	8002c60 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fb00 	bl	80014d4 <HAL_GetTick>
 8002ed4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	019b      	lsls	r3, r3, #6
 8002eda:	f57f ae94 	bpl.w	8002c06 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ede:	f7fe faf9 	bl	80014d4 <HAL_GetTick>
 8002ee2:	1b40      	subs	r0, r0, r5
 8002ee4:	2802      	cmp	r0, #2
 8002ee6:	d9f6      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x2fa>
 8002ee8:	e6ba      	b.n	8002c60 <HAL_RCC_OscConfig+0x84>
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	42420060 	.word	0x42420060

08002ef4 <HAL_RCC_GetSysClockFreq>:
{
 8002ef4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ef6:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002ef8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002efa:	ac02      	add	r4, sp, #8
 8002efc:	f103 0510 	add.w	r5, r3, #16
 8002f00:	4622      	mov	r2, r4
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	3308      	adds	r3, #8
 8002f08:	c203      	stmia	r2!, {r0, r1}
 8002f0a:	42ab      	cmp	r3, r5
 8002f0c:	4614      	mov	r4, r2
 8002f0e:	d1f7      	bne.n	8002f00 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f10:	2301      	movs	r3, #1
 8002f12:	f88d 3004 	strb.w	r3, [sp, #4]
 8002f16:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002f18:	4911      	ldr	r1, [pc, #68]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f1a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002f1e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002f20:	f003 020c 	and.w	r2, r3, #12
 8002f24:	2a08      	cmp	r2, #8
 8002f26:	d117      	bne.n	8002f58 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f28:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002f2c:	a806      	add	r0, sp, #24
 8002f2e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f30:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f32:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f36:	d50c      	bpl.n	8002f52 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f38:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f3a:	480a      	ldr	r0, [pc, #40]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f3c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f40:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f42:	aa06      	add	r2, sp, #24
 8002f44:	4413      	add	r3, r2
 8002f46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002f4e:	b007      	add	sp, #28
 8002f50:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f52:	4805      	ldr	r0, [pc, #20]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x74>)
 8002f54:	4350      	muls	r0, r2
 8002f56:	e7fa      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002f58:	4802      	ldr	r0, [pc, #8]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002f5a:	e7f8      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x5a>
 8002f5c:	0800db60 	.word	0x0800db60
 8002f60:	40021000 	.word	0x40021000
 8002f64:	007a1200 	.word	0x007a1200
 8002f68:	003d0900 	.word	0x003d0900

08002f6c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002f6c:	4a4d      	ldr	r2, [pc, #308]	; (80030a4 <HAL_RCC_ClockConfig+0x138>)
{
 8002f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002f72:	6813      	ldr	r3, [r2, #0]
{
 8002f74:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	428b      	cmp	r3, r1
{
 8002f7c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002f7e:	d328      	bcc.n	8002fd2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f80:	682a      	ldr	r2, [r5, #0]
 8002f82:	0791      	lsls	r1, r2, #30
 8002f84:	d432      	bmi.n	8002fec <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f86:	07d2      	lsls	r2, r2, #31
 8002f88:	d438      	bmi.n	8002ffc <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002f8a:	4a46      	ldr	r2, [pc, #280]	; (80030a4 <HAL_RCC_ClockConfig+0x138>)
 8002f8c:	6813      	ldr	r3, [r2, #0]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	429e      	cmp	r6, r3
 8002f94:	d373      	bcc.n	800307e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f96:	682a      	ldr	r2, [r5, #0]
 8002f98:	4c43      	ldr	r4, [pc, #268]	; (80030a8 <HAL_RCC_ClockConfig+0x13c>)
 8002f9a:	f012 0f04 	tst.w	r2, #4
 8002f9e:	d179      	bne.n	8003094 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	0713      	lsls	r3, r2, #28
 8002fa2:	d506      	bpl.n	8002fb2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fa4:	6863      	ldr	r3, [r4, #4]
 8002fa6:	692a      	ldr	r2, [r5, #16]
 8002fa8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002fac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002fb0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fb2:	f7ff ff9f 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002fb6:	6863      	ldr	r3, [r4, #4]
 8002fb8:	4a3c      	ldr	r2, [pc, #240]	; (80030ac <HAL_RCC_ClockConfig+0x140>)
 8002fba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	40d8      	lsrs	r0, r3
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_ClockConfig+0x144>)
 8002fc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fe fa42 	bl	8001450 <HAL_InitTick>
  return HAL_OK;
 8002fcc:	2000      	movs	r0, #0
}
 8002fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	f023 0307 	bic.w	r3, r3, #7
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fdc:	6813      	ldr	r3, [r2, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	4299      	cmp	r1, r3
 8002fe4:	d0cc      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	492e      	ldr	r1, [pc, #184]	; (80030a8 <HAL_RCC_ClockConfig+0x13c>)
 8002fee:	68a8      	ldr	r0, [r5, #8]
 8002ff0:	684b      	ldr	r3, [r1, #4]
 8002ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ff6:	4303      	orrs	r3, r0
 8002ff8:	604b      	str	r3, [r1, #4]
 8002ffa:	e7c4      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffc:	686a      	ldr	r2, [r5, #4]
 8002ffe:	4c2a      	ldr	r4, [pc, #168]	; (80030a8 <HAL_RCC_ClockConfig+0x13c>)
 8003000:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003004:	d11c      	bne.n	8003040 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	d0ec      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003012:	f023 0303 	bic.w	r3, r3, #3
 8003016:	4313      	orrs	r3, r2
 8003018:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800301a:	f7fe fa5b 	bl	80014d4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003020:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003022:	2b01      	cmp	r3, #1
 8003024:	d114      	bne.n	8003050 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003026:	6863      	ldr	r3, [r4, #4]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b04      	cmp	r3, #4
 800302e:	d0ac      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7fe fa50 	bl	80014d4 <HAL_GetTick>
 8003034:	1bc0      	subs	r0, r0, r7
 8003036:	4540      	cmp	r0, r8
 8003038:	d9f5      	bls.n	8003026 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800303a:	2003      	movs	r0, #3
 800303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003040:	2a02      	cmp	r2, #2
 8003042:	d102      	bne.n	800304a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003044:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003048:	e7df      	b.n	800300a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	f013 0f02 	tst.w	r3, #2
 800304e:	e7dc      	b.n	800300a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003050:	2b02      	cmp	r3, #2
 8003052:	d10f      	bne.n	8003074 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003054:	6863      	ldr	r3, [r4, #4]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b08      	cmp	r3, #8
 800305c:	d095      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305e:	f7fe fa39 	bl	80014d4 <HAL_GetTick>
 8003062:	1bc0      	subs	r0, r0, r7
 8003064:	4540      	cmp	r0, r8
 8003066:	d9f5      	bls.n	8003054 <HAL_RCC_ClockConfig+0xe8>
 8003068:	e7e7      	b.n	800303a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306a:	f7fe fa33 	bl	80014d4 <HAL_GetTick>
 800306e:	1bc0      	subs	r0, r0, r7
 8003070:	4540      	cmp	r0, r8
 8003072:	d8e2      	bhi.n	800303a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003074:	6863      	ldr	r3, [r4, #4]
 8003076:	f013 0f0c 	tst.w	r3, #12
 800307a:	d1f6      	bne.n	800306a <HAL_RCC_ClockConfig+0xfe>
 800307c:	e785      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	6813      	ldr	r3, [r2, #0]
 8003080:	f023 0307 	bic.w	r3, r3, #7
 8003084:	4333      	orrs	r3, r6
 8003086:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003088:	6813      	ldr	r3, [r2, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	429e      	cmp	r6, r3
 8003090:	d1a9      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0x7a>
 8003092:	e780      	b.n	8002f96 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	6863      	ldr	r3, [r4, #4]
 8003096:	68e9      	ldr	r1, [r5, #12]
 8003098:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800309c:	430b      	orrs	r3, r1
 800309e:	6063      	str	r3, [r4, #4]
 80030a0:	e77e      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x34>
 80030a2:	bf00      	nop
 80030a4:	40022000 	.word	0x40022000
 80030a8:	40021000 	.word	0x40021000
 80030ac:	08017b58 	.word	0x08017b58
 80030b0:	20000410 	.word	0x20000410

080030b4 <HAL_RCC_GetHCLKFreq>:
}
 80030b4:	4b01      	ldr	r3, [pc, #4]	; (80030bc <HAL_RCC_GetHCLKFreq+0x8>)
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000410 	.word	0x20000410

080030c0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80030c2:	4a05      	ldr	r2, [pc, #20]	; (80030d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	4a03      	ldr	r2, [pc, #12]	; (80030dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80030ce:	6810      	ldr	r0, [r2, #0]
}    
 80030d0:	40d8      	lsrs	r0, r3
 80030d2:	4770      	bx	lr
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08017b68 	.word	0x08017b68
 80030dc:	20000410 	.word	0x20000410

080030e0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80030e2:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80030ea:	5cd3      	ldrb	r3, [r2, r3]
 80030ec:	4a03      	ldr	r2, [pc, #12]	; (80030fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80030ee:	6810      	ldr	r0, [r2, #0]
} 
 80030f0:	40d8      	lsrs	r0, r3
 80030f2:	4770      	bx	lr
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08017b68 	.word	0x08017b68
 80030fc:	20000410 	.word	0x20000410

08003100 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003100:	6803      	ldr	r3, [r0, #0]
{
 8003102:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003106:	07d9      	lsls	r1, r3, #31
{
 8003108:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800310a:	d520      	bpl.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310c:	4c35      	ldr	r4, [pc, #212]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800310e:	69e3      	ldr	r3, [r4, #28]
 8003110:	00da      	lsls	r2, r3, #3
 8003112:	d432      	bmi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003114:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	69e3      	ldr	r3, [r4, #28]
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	61e3      	str	r3, [r4, #28]
 800311e:	69e3      	ldr	r3, [r4, #28]
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	4e2f      	ldr	r6, [pc, #188]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800312a:	6833      	ldr	r3, [r6, #0]
 800312c:	05db      	lsls	r3, r3, #23
 800312e:	d526      	bpl.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003130:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003132:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003136:	d136      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003138:	6a23      	ldr	r3, [r4, #32]
 800313a:	686a      	ldr	r2, [r5, #4]
 800313c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003140:	4313      	orrs	r3, r2
 8003142:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003144:	b11f      	cbz	r7, 800314e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003146:	69e3      	ldr	r3, [r4, #28]
 8003148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800314e:	6828      	ldr	r0, [r5, #0]
 8003150:	0783      	lsls	r3, r0, #30
 8003152:	d506      	bpl.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003154:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003156:	68a9      	ldr	r1, [r5, #8]
 8003158:	6853      	ldr	r3, [r2, #4]
 800315a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800315e:	430b      	orrs	r3, r1
 8003160:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003162:	f010 0010 	ands.w	r0, r0, #16
 8003166:	d01b      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800316a:	68e9      	ldr	r1, [r5, #12]
 800316c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800316e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003170:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003174:	430b      	orrs	r3, r1
 8003176:	6053      	str	r3, [r2, #4]
 8003178:	e012      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800317a:	2700      	movs	r7, #0
 800317c:	e7d4      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317e:	6833      	ldr	r3, [r6, #0]
 8003180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003184:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003186:	f7fe f9a5 	bl	80014d4 <HAL_GetTick>
 800318a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	6833      	ldr	r3, [r6, #0]
 800318e:	05d8      	lsls	r0, r3, #23
 8003190:	d4ce      	bmi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003192:	f7fe f99f 	bl	80014d4 <HAL_GetTick>
 8003196:	eba0 0008 	sub.w	r0, r0, r8
 800319a:	2864      	cmp	r0, #100	; 0x64
 800319c:	d9f6      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800319e:	2003      	movs	r0, #3
}
 80031a0:	b002      	add	sp, #8
 80031a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031a6:	686a      	ldr	r2, [r5, #4]
 80031a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d0c3      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80031b0:	2001      	movs	r0, #1
 80031b2:	4a0e      	ldr	r2, [pc, #56]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031b4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80031b6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031be:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80031c0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031c2:	07d9      	lsls	r1, r3, #31
 80031c4:	d5b8      	bpl.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80031c6:	f7fe f985 	bl	80014d4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80031ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d0:	6a23      	ldr	r3, [r4, #32]
 80031d2:	079a      	lsls	r2, r3, #30
 80031d4:	d4b0      	bmi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fe f97d 	bl	80014d4 <HAL_GetTick>
 80031da:	1b80      	subs	r0, r0, r6
 80031dc:	4540      	cmp	r0, r8
 80031de:	d9f7      	bls.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80031e0:	e7dd      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
 80031ec:	42420440 	.word	0x42420440

080031f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031f4:	4b35      	ldr	r3, [pc, #212]	; (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 80031f6:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031f8:	ad02      	add	r5, sp, #8
 80031fa:	f103 0610 	add.w	r6, r3, #16
 80031fe:	462a      	mov	r2, r5
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	3308      	adds	r3, #8
 8003206:	c203      	stmia	r2!, {r0, r1}
 8003208:	42b3      	cmp	r3, r6
 800320a:	4615      	mov	r5, r2
 800320c:	d1f7      	bne.n	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800320e:	2301      	movs	r3, #1
 8003210:	f88d 3004 	strb.w	r3, [sp, #4]
 8003214:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8003216:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003218:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 800321c:	d047      	beq.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 800321e:	2c10      	cmp	r4, #16
 8003220:	d017      	beq.n	8003252 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8003222:	2c01      	cmp	r4, #1
 8003224:	d14f      	bne.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003226:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800322a:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800322c:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800322e:	4019      	ands	r1, r3
 8003230:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8003234:	d044      	beq.n	80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323e:	d12d      	bne.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8003240:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003244:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8003246:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 800324a:	bf08      	it	eq
 800324c:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 800324e:	b006      	add	sp, #24
 8003250:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8003254:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800325c:	d0f7      	beq.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800325e:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8003262:	a806      	add	r0, sp, #24
 8003264:	4402      	add	r2, r0
 8003266:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800326a:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800326c:	bf41      	itttt	mi
 800326e:	685a      	ldrmi	r2, [r3, #4]
 8003270:	a906      	addmi	r1, sp, #24
 8003272:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8003276:	1852      	addmi	r2, r2, r1
 8003278:	bf44      	itt	mi
 800327a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800327e:	4a15      	ldrmi	r2, [pc, #84]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003280:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003282:	bf4c      	ite	mi
 8003284:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003288:	4a13      	ldrpl	r2, [pc, #76]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800328a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800328c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003290:	d4dd      	bmi.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8003292:	2303      	movs	r3, #3
 8003294:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003296:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800329a:	e7d8      	b.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800329c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a0:	d111      	bne.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80032a2:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80032a4:	f24f 4024 	movw	r0, #62500	; 0xf424
 80032a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032ac:	e7cd      	b.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80032ae:	f7ff ff17 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80032ba:	3301      	adds	r3, #1
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	e7ea      	b.n	8003296 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 80032c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80032c4:	e7c3      	b.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 80032c6:	2000      	movs	r0, #0
 80032c8:	e7c1      	b.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80032ca:	bf00      	nop
 80032cc:	0800db70 	.word	0x0800db70
 80032d0:	40021000 	.word	0x40021000
 80032d4:	007a1200 	.word	0x007a1200
 80032d8:	003d0900 	.word	0x003d0900

080032dc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032dc:	6a03      	ldr	r3, [r0, #32]
{
 80032de:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ea:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032ee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80032f2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032f4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80032f6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80032fa:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032fc:	4d0a      	ldr	r5, [pc, #40]	; (8003328 <TIM_OC1_SetConfig+0x4c>)
 80032fe:	42a8      	cmp	r0, r5
 8003300:	d10b      	bne.n	800331a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003302:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003304:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003308:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800330a:	698e      	ldr	r6, [r1, #24]
 800330c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800330e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003312:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003314:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003318:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800331c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800331e:	684a      	ldr	r2, [r1, #4]
 8003320:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003322:	6203      	str	r3, [r0, #32]
 8003324:	bd70      	pop	{r4, r5, r6, pc}
 8003326:	bf00      	nop
 8003328:	40012c00 	.word	0x40012c00

0800332c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800332c:	6a03      	ldr	r3, [r0, #32]
{
 800332e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003334:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003336:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003338:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800333a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800333c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800333e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003342:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003344:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003346:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800334a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800334e:	4d0b      	ldr	r5, [pc, #44]	; (800337c <TIM_OC3_SetConfig+0x50>)
 8003350:	42a8      	cmp	r0, r5
 8003352:	d10d      	bne.n	8003370 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003354:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800335a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800335e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003360:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003362:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003366:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800336c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003370:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003372:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003374:	684a      	ldr	r2, [r1, #4]
 8003376:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003378:	6203      	str	r3, [r0, #32]
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	40012c00 	.word	0x40012c00

08003380 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003380:	6a03      	ldr	r3, [r0, #32]
{
 8003382:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003388:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800338e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003390:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003392:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003396:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800339a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800339c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033a0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80033a4:	4d06      	ldr	r5, [pc, #24]	; (80033c0 <TIM_OC4_SetConfig+0x40>)
 80033a6:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80033a8:	bf02      	ittt	eq
 80033aa:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033ac:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80033b0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b8:	684a      	ldr	r2, [r1, #4]
 80033ba:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033bc:	6203      	str	r3, [r0, #32]
 80033be:	bd30      	pop	{r4, r5, pc}
 80033c0:	40012c00 	.word	0x40012c00

080033c4 <HAL_TIM_PWM_MspInit>:
 80033c4:	4770      	bx	lr

080033c6 <HAL_TIM_IC_MspInit>:
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80033c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80033cc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f04f 0302 	mov.w	r3, #2
 80033d4:	d01c      	beq.n	8003410 <HAL_TIM_ConfigClockSource+0x48>
 80033d6:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80033d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80033dc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80033de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80033e2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80033e8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80033ec:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80033ee:	680a      	ldr	r2, [r1, #0]
 80033f0:	2a40      	cmp	r2, #64	; 0x40
 80033f2:	d079      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0x120>
 80033f4:	d819      	bhi.n	800342a <HAL_TIM_ConfigClockSource+0x62>
 80033f6:	2a10      	cmp	r2, #16
 80033f8:	f000 8093 	beq.w	8003522 <HAL_TIM_ConfigClockSource+0x15a>
 80033fc:	d80a      	bhi.n	8003414 <HAL_TIM_ConfigClockSource+0x4c>
 80033fe:	2a00      	cmp	r2, #0
 8003400:	f000 8089 	beq.w	8003516 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8003404:	2301      	movs	r3, #1
 8003406:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800340a:	2300      	movs	r3, #0
 800340c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003410:	4618      	mov	r0, r3
}
 8003412:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003414:	2a20      	cmp	r2, #32
 8003416:	f000 808a 	beq.w	800352e <HAL_TIM_ConfigClockSource+0x166>
 800341a:	2a30      	cmp	r2, #48	; 0x30
 800341c:	d1f2      	bne.n	8003404 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800341e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003420:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003424:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8003428:	e036      	b.n	8003498 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800342a:	2a70      	cmp	r2, #112	; 0x70
 800342c:	d036      	beq.n	800349c <HAL_TIM_ConfigClockSource+0xd4>
 800342e:	d81b      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0xa0>
 8003430:	2a50      	cmp	r2, #80	; 0x50
 8003432:	d042      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0xf2>
 8003434:	2a60      	cmp	r2, #96	; 0x60
 8003436:	d1e5      	bne.n	8003404 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003438:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800343a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800343c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003440:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003442:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003444:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003446:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003448:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800344c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003450:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003454:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003458:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800345a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800345c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800345e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003462:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8003466:	e017      	b.n	8003498 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8003468:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800346c:	d011      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0xca>
 800346e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003472:	d1c7      	bne.n	8003404 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003474:	688a      	ldr	r2, [r1, #8]
 8003476:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003478:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800347a:	68c9      	ldr	r1, [r1, #12]
 800347c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003482:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003486:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003488:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003490:	e002      	b.n	8003498 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	e7b3      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800349c:	688a      	ldr	r2, [r1, #8]
 800349e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80034a0:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034a2:	68c9      	ldr	r1, [r1, #12]
 80034a4:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80034ae:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80034b0:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80034b2:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034b4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80034b8:	e7ee      	b.n	8003498 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ba:	684c      	ldr	r4, [r1, #4]
 80034bc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80034be:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034c2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c6:	f025 0501 	bic.w	r5, r5, #1
 80034ca:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034cc:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80034ce:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80034d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034da:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80034dc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80034de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80034e2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80034e6:	e7d7      	b.n	8003498 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e8:	684c      	ldr	r4, [r1, #4]
 80034ea:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80034ec:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ee:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034f0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f4:	f025 0501 	bic.w	r5, r5, #1
 80034f8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fa:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80034fc:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003502:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003508:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800350a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800350c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003510:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8003514:	e7c0      	b.n	8003498 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003516:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003518:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800351c:	f042 0207 	orr.w	r2, r2, #7
 8003520:	e7ba      	b.n	8003498 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003522:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003524:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003528:	f042 0217 	orr.w	r2, r2, #23
 800352c:	e7b4      	b.n	8003498 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800352e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003530:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003534:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8003538:	e7ae      	b.n	8003498 <HAL_TIM_ConfigClockSource+0xd0>

0800353a <HAL_TIM_OC_DelayElapsedCallback>:
 800353a:	4770      	bx	lr

0800353c <HAL_TIM_PWM_PulseFinishedCallback>:
 800353c:	4770      	bx	lr

0800353e <HAL_TIM_TriggerCallback>:
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003540:	6803      	ldr	r3, [r0, #0]
{
 8003542:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003544:	691a      	ldr	r2, [r3, #16]
{
 8003546:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003548:	0791      	lsls	r1, r2, #30
 800354a:	d50e      	bpl.n	800356a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	0792      	lsls	r2, r2, #30
 8003550:	d50b      	bpl.n	800356a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003552:	f06f 0202 	mvn.w	r2, #2
 8003556:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003558:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800355a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800355c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800355e:	079b      	lsls	r3, r3, #30
 8003560:	d077      	beq.n	8003652 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003562:	f002 f8d1 	bl	8005708 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	2300      	movs	r3, #0
 8003568:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	0750      	lsls	r0, r2, #29
 8003570:	d510      	bpl.n	8003594 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	0751      	lsls	r1, r2, #29
 8003576:	d50d      	bpl.n	8003594 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003578:	f06f 0204 	mvn.w	r2, #4
 800357c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800357e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003580:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003582:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003584:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003588:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800358a:	d068      	beq.n	800365e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800358c:	f002 f8bc 	bl	8005708 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003590:	2300      	movs	r3, #0
 8003592:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	0712      	lsls	r2, r2, #28
 800359a:	d50f      	bpl.n	80035bc <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	0710      	lsls	r0, r2, #28
 80035a0:	d50c      	bpl.n	80035bc <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a2:	f06f 0208 	mvn.w	r2, #8
 80035a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035a8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035aa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ac:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ae:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80035b0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b2:	d05a      	beq.n	800366a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80035b4:	f002 f8a8 	bl	8005708 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b8:	2300      	movs	r3, #0
 80035ba:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	06d2      	lsls	r2, r2, #27
 80035c2:	d510      	bpl.n	80035e6 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	06d0      	lsls	r0, r2, #27
 80035c8:	d50d      	bpl.n	80035e6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035ca:	f06f 0210 	mvn.w	r2, #16
 80035ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d0:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035d6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035dc:	d04b      	beq.n	8003676 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	f002 f893 	bl	8005708 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	2300      	movs	r3, #0
 80035e4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	07d1      	lsls	r1, r2, #31
 80035ec:	d508      	bpl.n	8003600 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	07d2      	lsls	r2, r2, #31
 80035f2:	d505      	bpl.n	8003600 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035f4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80035f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80035fc:	f004 ff30 	bl	8008460 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	0610      	lsls	r0, r2, #24
 8003606:	d508      	bpl.n	800361a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	0611      	lsls	r1, r2, #24
 800360c:	d505      	bpl.n	800361a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800360e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003612:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003614:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003616:	f000 fa6c 	bl	8003af2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	0652      	lsls	r2, r2, #25
 8003620:	d508      	bpl.n	8003634 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	0650      	lsls	r0, r2, #25
 8003626:	d505      	bpl.n	8003634 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003628:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800362c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800362e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003630:	f7ff ff85 	bl	800353e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	0691      	lsls	r1, r2, #26
 800363a:	d522      	bpl.n	8003682 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	0692      	lsls	r2, r2, #26
 8003640:	d51f      	bpl.n	8003682 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003642:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003646:	4620      	mov	r0, r4
}
 8003648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800364c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800364e:	f000 ba4f 	b.w	8003af0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	f7ff ff72 	bl	800353a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003656:	4620      	mov	r0, r4
 8003658:	f7ff ff70 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
 800365c:	e783      	b.n	8003566 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365e:	f7ff ff6c 	bl	800353a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003662:	4620      	mov	r0, r4
 8003664:	f7ff ff6a 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
 8003668:	e792      	b.n	8003590 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	f7ff ff66 	bl	800353a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366e:	4620      	mov	r0, r4
 8003670:	f7ff ff64 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
 8003674:	e7a0      	b.n	80035b8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	f7ff ff60 	bl	800353a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367a:	4620      	mov	r0, r4
 800367c:	f7ff ff5e 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
 8003680:	e7af      	b.n	80035e2 <HAL_TIM_IRQHandler+0xa2>
 8003682:	bd10      	pop	{r4, pc}

08003684 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003684:	4a1a      	ldr	r2, [pc, #104]	; (80036f0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003686:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003688:	4290      	cmp	r0, r2
 800368a:	d00a      	beq.n	80036a2 <TIM_Base_SetConfig+0x1e>
 800368c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003690:	d007      	beq.n	80036a2 <TIM_Base_SetConfig+0x1e>
 8003692:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003696:	4290      	cmp	r0, r2
 8003698:	d003      	beq.n	80036a2 <TIM_Base_SetConfig+0x1e>
 800369a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800369e:	4290      	cmp	r0, r2
 80036a0:	d115      	bne.n	80036ce <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80036a2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036a8:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036aa:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <TIM_Base_SetConfig+0x6c>)
 80036ac:	4290      	cmp	r0, r2
 80036ae:	d00a      	beq.n	80036c6 <TIM_Base_SetConfig+0x42>
 80036b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036b4:	d007      	beq.n	80036c6 <TIM_Base_SetConfig+0x42>
 80036b6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80036ba:	4290      	cmp	r0, r2
 80036bc:	d003      	beq.n	80036c6 <TIM_Base_SetConfig+0x42>
 80036be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036c2:	4290      	cmp	r0, r2
 80036c4:	d103      	bne.n	80036ce <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80036c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036cc:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80036ce:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80036d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80036d4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80036d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036d8:	688b      	ldr	r3, [r1, #8]
 80036da:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80036dc:	680b      	ldr	r3, [r1, #0]
 80036de:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <TIM_Base_SetConfig+0x6c>)
 80036e2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80036e4:	bf04      	itt	eq
 80036e6:	690b      	ldreq	r3, [r1, #16]
 80036e8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80036ea:	2301      	movs	r3, #1
 80036ec:	6143      	str	r3, [r0, #20]
 80036ee:	4770      	bx	lr
 80036f0:	40012c00 	.word	0x40012c00

080036f4 <HAL_TIM_Base_Init>:
{
 80036f4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80036f6:	4604      	mov	r4, r0
 80036f8:	b1a0      	cbz	r0, 8003724 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80036fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003702:	b91b      	cbnz	r3, 800370c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003704:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003708:	f004 ff2e 	bl	8008568 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800370c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003710:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003714:	1d21      	adds	r1, r4, #4
 8003716:	f7ff ffb5 	bl	8003684 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800371a:	2301      	movs	r3, #1
  return HAL_OK;
 800371c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800371e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003722:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003724:	2001      	movs	r0, #1
}
 8003726:	bd10      	pop	{r4, pc}

08003728 <HAL_TIM_PWM_Init>:
{
 8003728:	b510      	push	{r4, lr}
  if(htim == NULL)
 800372a:	4604      	mov	r4, r0
 800372c:	b1a0      	cbz	r0, 8003758 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800372e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003732:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003736:	b91b      	cbnz	r3, 8003740 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003738:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800373c:	f7ff fe42 	bl	80033c4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003740:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003742:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003744:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003748:	1d21      	adds	r1, r4, #4
 800374a:	f7ff ff9b 	bl	8003684 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800374e:	2301      	movs	r3, #1
  return HAL_OK;
 8003750:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003752:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003756:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003758:	2001      	movs	r0, #1
}
 800375a:	bd10      	pop	{r4, pc}

0800375c <HAL_TIM_IC_Init>:
{
 800375c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800375e:	4604      	mov	r4, r0
 8003760:	b1a0      	cbz	r0, 800378c <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003762:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003766:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800376a:	b91b      	cbnz	r3, 8003774 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800376c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003770:	f7ff fe29 	bl	80033c6 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003774:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003776:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003778:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377c:	1d21      	adds	r1, r4, #4
 800377e:	f7ff ff81 	bl	8003684 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003782:	2301      	movs	r3, #1
  return HAL_OK;
 8003784:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003786:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800378a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800378c:	2001      	movs	r0, #1
}
 800378e:	bd10      	pop	{r4, pc}

08003790 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003790:	6a03      	ldr	r3, [r0, #32]
{
 8003792:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003794:	f023 0310 	bic.w	r3, r3, #16
 8003798:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800379a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800379c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800379e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037a2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037aa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80037ac:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037b4:	4d0b      	ldr	r5, [pc, #44]	; (80037e4 <TIM_OC2_SetConfig+0x54>)
 80037b6:	42a8      	cmp	r0, r5
 80037b8:	d10d      	bne.n	80037d6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037ba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80037bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80037c4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80037c6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037c8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80037cc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80037ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80037d2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80037d6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80037d8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80037da:	684a      	ldr	r2, [r1, #4]
 80037dc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80037de:	6203      	str	r3, [r0, #32]
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
 80037e2:	bf00      	nop
 80037e4:	40012c00 	.word	0x40012c00

080037e8 <HAL_TIM_PWM_ConfigChannel>:
{
 80037e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80037ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80037ee:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	f04f 0002 	mov.w	r0, #2
 80037f6:	d025      	beq.n	8003844 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80037f8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80037fa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80037fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8003802:	2a0c      	cmp	r2, #12
 8003804:	d818      	bhi.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x50>
 8003806:	e8df f002 	tbb	[pc, r2]
 800380a:	1707      	.short	0x1707
 800380c:	171e1717 	.word	0x171e1717
 8003810:	172f1717 	.word	0x172f1717
 8003814:	1717      	.short	0x1717
 8003816:	40          	.byte	0x40
 8003817:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003818:	6820      	ldr	r0, [r4, #0]
 800381a:	f7ff fd5f 	bl	80032dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800381e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003820:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	f042 0208 	orr.w	r2, r2, #8
 8003828:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800382a:	699a      	ldr	r2, [r3, #24]
 800382c:	f022 0204 	bic.w	r2, r2, #4
 8003830:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003836:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003838:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800383a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800383c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003840:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003844:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	f7ff ffa2 	bl	8003790 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800384c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800384e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003866:	e7e6      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003868:	6820      	ldr	r0, [r4, #0]
 800386a:	f7ff fd5f 	bl	800332c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800386e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003870:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	f042 0208 	orr.w	r2, r2, #8
 8003878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	f022 0204 	bic.w	r2, r2, #4
 8003880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003886:	61da      	str	r2, [r3, #28]
    break;
 8003888:	e7d6      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800388a:	6820      	ldr	r0, [r4, #0]
 800388c:	f7ff fd78 	bl	8003380 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003890:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003892:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800389c:	69da      	ldr	r2, [r3, #28]
 800389e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038aa:	e7ec      	b.n	8003886 <HAL_TIM_PWM_ConfigChannel+0x9e>

080038ac <TIM_TI1_SetConfig>:
{
 80038ac:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ae:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038b0:	4e12      	ldr	r6, [pc, #72]	; (80038fc <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b2:	f024 0401 	bic.w	r4, r4, #1
 80038b6:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038b8:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80038ba:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80038bc:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038be:	d00a      	beq.n	80038d6 <TIM_TI1_SetConfig+0x2a>
 80038c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038c4:	d007      	beq.n	80038d6 <TIM_TI1_SetConfig+0x2a>
 80038c6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80038ca:	42b0      	cmp	r0, r6
 80038cc:	d003      	beq.n	80038d6 <TIM_TI1_SetConfig+0x2a>
 80038ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80038d2:	42b0      	cmp	r0, r6
 80038d4:	d10f      	bne.n	80038f6 <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038d6:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80038da:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038dc:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038e2:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038e4:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038e8:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038ec:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038ee:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80038f0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80038f2:	6201      	str	r1, [r0, #32]
}
 80038f4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038f6:	f044 0201 	orr.w	r2, r4, #1
 80038fa:	e7ef      	b.n	80038dc <TIM_TI1_SetConfig+0x30>
 80038fc:	40012c00 	.word	0x40012c00

08003900 <HAL_TIM_IC_ConfigChannel>:
{
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003902:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003906:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003908:	2b01      	cmp	r3, #1
{
 800390a:	460d      	mov	r5, r1
 800390c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003910:	d019      	beq.n	8003946 <HAL_TIM_IC_ConfigChannel+0x46>
 8003912:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003918:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800391c:	b9a2      	cbnz	r2, 8003948 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 800391e:	68cb      	ldr	r3, [r1, #12]
 8003920:	6820      	ldr	r0, [r4, #0]
 8003922:	c906      	ldmia	r1, {r1, r2}
 8003924:	f7ff ffc2 	bl	80038ac <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003928:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800392a:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	f022 020c 	bic.w	r2, r2, #12
 8003932:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	430a      	orrs	r2, r1
 8003938:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800393a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800393c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800393e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003942:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8003948:	2a04      	cmp	r2, #4
 800394a:	688e      	ldr	r6, [r1, #8]
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	c982      	ldmia	r1, {r1, r7}
 8003950:	68e8      	ldr	r0, [r5, #12]
 8003952:	d11f      	bne.n	8003994 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003954:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003956:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003958:	f022 0210 	bic.w	r2, r2, #16
 800395c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395e:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8003960:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003962:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003966:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800396a:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800396c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003970:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003972:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003974:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003978:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800397c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800397e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003980:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003988:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8003990:	619e      	str	r6, [r3, #24]
 8003992:	e7d2      	b.n	800393a <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8003994:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003996:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8003998:	d11c      	bne.n	80039d4 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800399a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800399e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039a0:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039a2:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039a4:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 80039a8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 80039aa:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039ac:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039b2:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039b4:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039b6:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039ba:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039be:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 80039c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039c2:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	f022 020c 	bic.w	r2, r2, #12
 80039ca:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039d0:	61de      	str	r6, [r3, #28]
 80039d2:	e7b2      	b.n	800393a <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039da:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80039dc:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80039de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 80039e2:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80039e4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80039e8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80039ec:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80039ee:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80039f0:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80039f2:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 80039f6:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80039fa:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 80039fc:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80039fe:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a06:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8003a0e:	e7df      	b.n	80039d0 <HAL_TIM_IC_ConfigChannel+0xd0>

08003a10 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a10:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003a12:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a14:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8003a16:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003a18:	ea23 0304 	bic.w	r3, r3, r4
 8003a1c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003a1e:	6a03      	ldr	r3, [r0, #32]
 8003a20:	408a      	lsls	r2, r1
 8003a22:	431a      	orrs	r2, r3
 8003a24:	6202      	str	r2, [r0, #32]
 8003a26:	bd10      	pop	{r4, pc}

08003a28 <HAL_TIM_PWM_Start>:
{
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	6800      	ldr	r0, [r0, #0]
 8003a30:	f7ff ffee 	bl	8003a10 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	4a06      	ldr	r2, [pc, #24]	; (8003a50 <HAL_TIM_PWM_Start+0x28>)
}
 8003a38:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a3a:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8003a3c:	bf02      	ittt	eq
 8003a3e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8003a40:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8003a44:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
}
 8003a4e:	bd10      	pop	{r4, pc}
 8003a50:	40012c00 	.word	0x40012c00

08003a54 <HAL_TIM_IC_Start_IT>:
{
 8003a54:	b510      	push	{r4, lr}
 8003a56:	4604      	mov	r4, r0
  switch (Channel)
 8003a58:	290c      	cmp	r1, #12
 8003a5a:	d80d      	bhi.n	8003a78 <HAL_TIM_IC_Start_IT+0x24>
 8003a5c:	e8df f001 	tbb	[pc, r1]
 8003a60:	0c0c0c07 	.word	0x0c0c0c07
 8003a64:	0c0c0c17 	.word	0x0c0c0c17
 8003a68:	0c0c0c1c 	.word	0x0c0c0c1c
 8003a6c:	21          	.byte	0x21
 8003a6d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a6e:	6802      	ldr	r2, [r0, #0]
 8003a70:	68d3      	ldr	r3, [r2, #12]
 8003a72:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a76:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a78:	6820      	ldr	r0, [r4, #0]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f7ff ffc8 	bl	8003a10 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8003a80:	6822      	ldr	r2, [r4, #0]
}
 8003a82:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003a84:	6813      	ldr	r3, [r2, #0]
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	6013      	str	r3, [r2, #0]
}
 8003a8c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a8e:	6802      	ldr	r2, [r0, #0]
 8003a90:	68d3      	ldr	r3, [r2, #12]
 8003a92:	f043 0304 	orr.w	r3, r3, #4
 8003a96:	e7ee      	b.n	8003a76 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a98:	6802      	ldr	r2, [r0, #0]
 8003a9a:	68d3      	ldr	r3, [r2, #12]
 8003a9c:	f043 0308 	orr.w	r3, r3, #8
 8003aa0:	e7e9      	b.n	8003a76 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003aa2:	6802      	ldr	r2, [r0, #0]
 8003aa4:	68d3      	ldr	r3, [r2, #12]
 8003aa6:	f043 0310 	orr.w	r3, r3, #16
 8003aaa:	e7e4      	b.n	8003a76 <HAL_TIM_IC_Start_IT+0x22>

08003aac <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003aac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003ab0:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	f04f 0302 	mov.w	r3, #2
 8003ab8:	d018      	beq.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8003aba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003abe:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003ac2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003ac4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003ac6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003aca:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	4322      	orrs	r2, r4
 8003ad0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ad8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003aec:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003aee:	bd10      	pop	{r4, pc}

08003af0 <HAL_TIMEx_CommutationCallback>:
 8003af0:	4770      	bx	lr

08003af2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003af2:	4770      	bx	lr

08003af4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af4:	6803      	ldr	r3, [r0, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003afc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b06:	2320      	movs	r3, #32
 8003b08:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003b0c:	4770      	bx	lr
	...

08003b10 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b14:	6805      	ldr	r5, [r0, #0]
 8003b16:	68c2      	ldr	r2, [r0, #12]
 8003b18:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b1a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b20:	4313      	orrs	r3, r2
 8003b22:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b24:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8003b26:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8003b2c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003b30:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b34:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b3a:	696b      	ldr	r3, [r5, #20]
 8003b3c:	6982      	ldr	r2, [r0, #24]
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b42:	4313      	orrs	r3, r2
 8003b44:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003b46:	4b40      	ldr	r3, [pc, #256]	; (8003c48 <UART_SetConfig+0x138>)
{
 8003b48:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8003b4a:	429d      	cmp	r5, r3
 8003b4c:	f04f 0419 	mov.w	r4, #25
 8003b50:	d146      	bne.n	8003be0 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003b52:	f7ff fac5 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8003b56:	fb04 f300 	mul.w	r3, r4, r0
 8003b5a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003b5e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003b62:	00b6      	lsls	r6, r6, #2
 8003b64:	fbb3 f3f6 	udiv	r3, r3, r6
 8003b68:	fbb3 f3f8 	udiv	r3, r3, r8
 8003b6c:	011e      	lsls	r6, r3, #4
 8003b6e:	f7ff fab7 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8003b72:	4360      	muls	r0, r4
 8003b74:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	fbb0 f7f3 	udiv	r7, r0, r3
 8003b7e:	f7ff faaf 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8003b82:	4360      	muls	r0, r4
 8003b84:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003b92:	fb08 7313 	mls	r3, r8, r3, r7
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	3332      	adds	r3, #50	; 0x32
 8003b9a:	fbb3 f3f8 	udiv	r3, r3, r8
 8003b9e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003ba2:	f7ff fa9d 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8003ba6:	4360      	muls	r0, r4
 8003ba8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003bac:	0092      	lsls	r2, r2, #2
 8003bae:	fbb0 faf2 	udiv	sl, r0, r2
 8003bb2:	f7ff fa95 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003bb6:	4360      	muls	r0, r4
 8003bb8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc2:	fbb3 f3f8 	udiv	r3, r3, r8
 8003bc6:	fb08 a313 	mls	r3, r8, r3, sl
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	3332      	adds	r3, #50	; 0x32
 8003bce:	fbb3 f3f8 	udiv	r3, r3, r8
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	433b      	orrs	r3, r7
 8003bd8:	4433      	add	r3, r6
 8003bda:	60ab      	str	r3, [r5, #8]
 8003bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be0:	f7ff fa6e 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8003be4:	fb04 f300 	mul.w	r3, r4, r0
 8003be8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003bec:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003bf0:	00b6      	lsls	r6, r6, #2
 8003bf2:	fbb3 f3f6 	udiv	r3, r3, r6
 8003bf6:	fbb3 f3f8 	udiv	r3, r3, r8
 8003bfa:	011e      	lsls	r6, r3, #4
 8003bfc:	f7ff fa60 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8003c00:	4360      	muls	r0, r4
 8003c02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	fbb0 f7f3 	udiv	r7, r0, r3
 8003c0c:	f7ff fa58 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8003c10:	4360      	muls	r0, r4
 8003c12:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c20:	fb08 7313 	mls	r3, r8, r3, r7
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	3332      	adds	r3, #50	; 0x32
 8003c28:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c2c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003c30:	f7ff fa46 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8003c34:	4360      	muls	r0, r4
 8003c36:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003c3a:	0092      	lsls	r2, r2, #2
 8003c3c:	fbb0 faf2 	udiv	sl, r0, r2
 8003c40:	f7ff fa3e 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8003c44:	e7b7      	b.n	8003bb6 <UART_SetConfig+0xa6>
 8003c46:	bf00      	nop
 8003c48:	40013800 	.word	0x40013800

08003c4c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	4604      	mov	r4, r0
 8003c50:	460e      	mov	r6, r1
 8003c52:	4617      	mov	r7, r2
 8003c54:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003c56:	6821      	ldr	r1, [r4, #0]
 8003c58:	680b      	ldr	r3, [r1, #0]
 8003c5a:	ea36 0303 	bics.w	r3, r6, r3
 8003c5e:	d101      	bne.n	8003c64 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003c60:	2000      	movs	r0, #0
}
 8003c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003c64:	1c6b      	adds	r3, r5, #1
 8003c66:	d0f7      	beq.n	8003c58 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003c68:	b995      	cbnz	r5, 8003c90 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c6a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003c6c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c74:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	f022 0201 	bic.w	r2, r2, #1
 8003c7c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003c7e:	2320      	movs	r3, #32
 8003c80:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c84:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003c90:	f7fd fc20 	bl	80014d4 <HAL_GetTick>
 8003c94:	1bc0      	subs	r0, r0, r7
 8003c96:	4285      	cmp	r5, r0
 8003c98:	d2dd      	bcs.n	8003c56 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003c9a:	e7e6      	b.n	8003c6a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003c9c <HAL_UART_Init>:
{
 8003c9c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	b340      	cbz	r0, 8003cf4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003ca2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003ca6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003caa:	b91b      	cbnz	r3, 8003cb4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003cac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003cb0:	f004 fd00 	bl	80086b4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003cb4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003cb6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003cb8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003cbc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003cbe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cc4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003cc6:	f7ff ff23 	bl	8003b10 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cca:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cdc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce4:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8003ce6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003cea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003cee:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003cf2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003cf4:	2001      	movs	r0, #1
}
 8003cf6:	bd10      	pop	{r4, pc}

08003cf8 <HAL_UART_Transmit>:
{
 8003cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cfc:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003cfe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8003d02:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8003d04:	2b20      	cmp	r3, #32
{
 8003d06:	460d      	mov	r5, r1
 8003d08:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003d0a:	d14e      	bne.n	8003daa <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8003d0c:	2900      	cmp	r1, #0
 8003d0e:	d049      	beq.n	8003da4 <HAL_UART_Transmit+0xac>
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	d047      	beq.n	8003da4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8003d14:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d046      	beq.n	8003daa <HAL_UART_Transmit+0xb2>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d26:	2321      	movs	r3, #33	; 0x21
 8003d28:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003d2c:	f7fd fbd2 	bl	80014d4 <HAL_GetTick>
 8003d30:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8003d32:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d36:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003d3a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b96b      	cbnz	r3, 8003d5c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d40:	463b      	mov	r3, r7
 8003d42:	4632      	mov	r2, r6
 8003d44:	2140      	movs	r1, #64	; 0x40
 8003d46:	4620      	mov	r0, r4
 8003d48:	f7ff ff80 	bl	8003c4c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003d4c:	b9a8      	cbnz	r0, 8003d7a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8003d4e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003d50:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003d54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8003d5c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d66:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d68:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d6e:	4620      	mov	r0, r4
 8003d70:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d72:	d10e      	bne.n	8003d92 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d74:	f7ff ff6a 	bl	8003c4c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003d78:	b110      	cbz	r0, 8003d80 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8003d7a:	2003      	movs	r0, #3
 8003d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003d80:	882b      	ldrh	r3, [r5, #0]
 8003d82:	6822      	ldr	r2, [r4, #0]
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	b943      	cbnz	r3, 8003da0 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8003d8e:	3502      	adds	r5, #2
 8003d90:	e7d3      	b.n	8003d3a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d92:	f7ff ff5b 	bl	8003c4c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d1ef      	bne.n	8003d7a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	782a      	ldrb	r2, [r5, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	3501      	adds	r5, #1
 8003da2:	e7ca      	b.n	8003d3a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003da4:	2001      	movs	r0, #1
 8003da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003daa:	2002      	movs	r0, #2
}
 8003dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003db0 <HAL_UART_Transmit_DMA>:
{
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4604      	mov	r4, r0
 8003db4:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003db6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003dba:	2a20      	cmp	r2, #32
 8003dbc:	d12a      	bne.n	8003e14 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 8003dbe:	b339      	cbz	r1, 8003e10 <HAL_UART_Transmit_DMA+0x60>
 8003dc0:	b333      	cbz	r3, 8003e10 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8003dc2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8003dc6:	2a01      	cmp	r2, #1
 8003dc8:	d024      	beq.n	8003e14 <HAL_UART_Transmit_DMA+0x64>
 8003dca:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003dce:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd2:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8003dd4:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003dd6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dda:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003dde:	4a0e      	ldr	r2, [pc, #56]	; (8003e18 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8003de0:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8003de2:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003de4:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003de6:	4a0d      	ldr	r2, [pc, #52]	; (8003e1c <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8003de8:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003dea:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003dec:	4a0c      	ldr	r2, [pc, #48]	; (8003e20 <HAL_UART_Transmit_DMA+0x70>)
 8003dee:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	3204      	adds	r2, #4
 8003df4:	f7fd fe94 	bl	8001b20 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003df8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dfc:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8003dfe:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003e00:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e02:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8003e04:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e0c:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003e10:	2001      	movs	r0, #1
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8003e14:	2002      	movs	r0, #2
}
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	08003eb7 	.word	0x08003eb7
 8003e1c:	08003ee5 	.word	0x08003ee5
 8003e20:	08003fb1 	.word	0x08003fb1

08003e24 <HAL_UART_Receive_DMA>:
{
 8003e24:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003e26:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8003e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003e2c:	2a20      	cmp	r2, #32
{
 8003e2e:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003e30:	d138      	bne.n	8003ea4 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL) || (Size == 0U))
 8003e32:	2900      	cmp	r1, #0
 8003e34:	d034      	beq.n	8003ea0 <HAL_UART_Receive_DMA+0x7c>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d032      	beq.n	8003ea0 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8003e3a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8003e3e:	2a01      	cmp	r2, #1
 8003e40:	d030      	beq.n	8003ea4 <HAL_UART_Receive_DMA+0x80>
 8003e42:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8003e46:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e4a:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8003e4c:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8003e4e:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e50:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e52:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e56:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003e58:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003e5a:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e5c:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e5e:	4a13      	ldr	r2, [pc, #76]	; (8003eac <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 8003e60:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e62:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e64:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <HAL_UART_Receive_DMA+0x8c>)
 8003e66:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003e68:	460a      	mov	r2, r1
 8003e6a:	1d31      	adds	r1, r6, #4
 8003e6c:	f7fd fe58 	bl	8001b20 <HAL_DMA_Start_IT>
    return HAL_OK;
 8003e70:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003e72:	682b      	ldr	r3, [r5, #0]
 8003e74:	9401      	str	r4, [sp, #4]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	9201      	str	r2, [sp, #4]
 8003e7a:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8003e7c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003e80:	9201      	str	r2, [sp, #4]
 8003e82:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8a:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e9a:	615a      	str	r2, [r3, #20]
}
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	e7fb      	b.n	8003e9c <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8003ea4:	2002      	movs	r0, #2
 8003ea6:	e7f9      	b.n	8003e9c <HAL_UART_Receive_DMA+0x78>
 8003ea8:	08003eef 	.word	0x08003eef
 8003eac:	08003fa5 	.word	0x08003fa5
 8003eb0:	08003fb1 	.word	0x08003fb1

08003eb4 <HAL_UART_TxCpltCallback>:
 8003eb4:	4770      	bx	lr

08003eb6 <UART_DMATransmitCplt>:
{
 8003eb6:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb8:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003eba:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f013 0320 	ands.w	r3, r3, #32
 8003ec2:	d10a      	bne.n	8003eda <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 8003ec4:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ec6:	6813      	ldr	r3, [r2, #0]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ece:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed6:	60da      	str	r2, [r3, #12]
 8003ed8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003eda:	4610      	mov	r0, r2
 8003edc:	f7ff ffea 	bl	8003eb4 <HAL_UART_TxCpltCallback>
 8003ee0:	bd08      	pop	{r3, pc}

08003ee2 <HAL_UART_TxHalfCpltCallback>:
 8003ee2:	4770      	bx	lr

08003ee4 <UART_DMATxHalfCplt>:
{
 8003ee4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003ee6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003ee8:	f7ff fffb 	bl	8003ee2 <HAL_UART_TxHalfCpltCallback>
 8003eec:	bd08      	pop	{r3, pc}

08003eee <UART_DMAReceiveCplt>:
{
 8003eee:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ef0:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ef2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f013 0320 	ands.w	r3, r3, #32
 8003efa:	d110      	bne.n	8003f1e <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8003efc:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003efe:	6813      	ldr	r3, [r2, #0]
 8003f00:	68d9      	ldr	r1, [r3, #12]
 8003f02:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003f06:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f08:	6959      	ldr	r1, [r3, #20]
 8003f0a:	f021 0101 	bic.w	r1, r1, #1
 8003f0e:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f10:	6959      	ldr	r1, [r3, #20]
 8003f12:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003f16:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8003f18:	2320      	movs	r3, #32
 8003f1a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f003 f9c0 	bl	80072a4 <HAL_UART_RxCpltCallback>
 8003f24:	bd08      	pop	{r3, pc}

08003f26 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003f26:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8003f2a:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003f2c:	2b22      	cmp	r3, #34	; 0x22
 8003f2e:	d136      	bne.n	8003f9e <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f30:	6883      	ldr	r3, [r0, #8]
 8003f32:	6901      	ldr	r1, [r0, #16]
 8003f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f38:	6802      	ldr	r2, [r0, #0]
 8003f3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f3c:	d123      	bne.n	8003f86 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f3e:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003f40:	b9e9      	cbnz	r1, 8003f7e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f46:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003f4a:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8003f4c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003f4e:	3c01      	subs	r4, #1
 8003f50:	b2a4      	uxth	r4, r4
 8003f52:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003f54:	b98c      	cbnz	r4, 8003f7a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f56:	6803      	ldr	r3, [r0, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	f022 0220 	bic.w	r2, r2, #32
 8003f5e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f66:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003f70:	2320      	movs	r3, #32
 8003f72:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003f76:	f003 f995 	bl	80072a4 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8003f7a:	2000      	movs	r0, #0
}
 8003f7c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	f823 2b01 	strh.w	r2, [r3], #1
 8003f84:	e7e1      	b.n	8003f4a <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003f86:	b921      	cbnz	r1, 8003f92 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f88:	1c59      	adds	r1, r3, #1
 8003f8a:	6852      	ldr	r2, [r2, #4]
 8003f8c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e7dc      	b.n	8003f4c <UART_Receive_IT+0x26>
 8003f92:	6852      	ldr	r2, [r2, #4]
 8003f94:	1c59      	adds	r1, r3, #1
 8003f96:	6281      	str	r1, [r0, #40]	; 0x28
 8003f98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f9c:	e7f7      	b.n	8003f8e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8003f9e:	2002      	movs	r0, #2
 8003fa0:	bd10      	pop	{r4, pc}

08003fa2 <HAL_UART_RxHalfCpltCallback>:
 8003fa2:	4770      	bx	lr

08003fa4 <UART_DMARxHalfCplt>:
{
 8003fa4:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8003fa6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003fa8:	f7ff fffb 	bl	8003fa2 <HAL_UART_RxHalfCpltCallback>
 8003fac:	bd08      	pop	{r3, pc}

08003fae <HAL_UART_ErrorCallback>:
 8003fae:	4770      	bx	lr

08003fb0 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fb0:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8003fb2:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003fb4:	680b      	ldr	r3, [r1, #0]
 8003fb6:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003fb8:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8003fbc:	2821      	cmp	r0, #33	; 0x21
 8003fbe:	d10a      	bne.n	8003fd6 <UART_DMAError+0x26>
 8003fc0:	0612      	lsls	r2, r2, #24
 8003fc2:	d508      	bpl.n	8003fd6 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003fce:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8003fd6:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003fd8:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8003fdc:	2a22      	cmp	r2, #34	; 0x22
 8003fde:	d106      	bne.n	8003fee <UART_DMAError+0x3e>
 8003fe0:	065b      	lsls	r3, r3, #25
 8003fe2:	d504      	bpl.n	8003fee <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8003fe4:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8003fe6:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8003fe8:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003fea:	f7ff fd83 	bl	8003af4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003ff0:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ff2:	f043 0310 	orr.w	r3, r3, #16
 8003ff6:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003ff8:	f7ff ffd9 	bl	8003fae <HAL_UART_ErrorCallback>
 8003ffc:	bd08      	pop	{r3, pc}
	...

08004000 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004000:	6803      	ldr	r3, [r0, #0]
{
 8004002:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004004:	681a      	ldr	r2, [r3, #0]
{
 8004006:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8004008:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800400a:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800400c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800400e:	d107      	bne.n	8004020 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004010:	0696      	lsls	r6, r2, #26
 8004012:	d55a      	bpl.n	80040ca <HAL_UART_IRQHandler+0xca>
 8004014:	068d      	lsls	r5, r1, #26
 8004016:	d558      	bpl.n	80040ca <HAL_UART_IRQHandler+0xca>
}
 8004018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800401c:	f7ff bf83 	b.w	8003f26 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004020:	f015 0501 	ands.w	r5, r5, #1
 8004024:	d102      	bne.n	800402c <HAL_UART_IRQHandler+0x2c>
 8004026:	f411 7f90 	tst.w	r1, #288	; 0x120
 800402a:	d04e      	beq.n	80040ca <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800402c:	07d3      	lsls	r3, r2, #31
 800402e:	d505      	bpl.n	800403c <HAL_UART_IRQHandler+0x3c>
 8004030:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004032:	bf42      	ittt	mi
 8004034:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8004036:	f043 0301 	orrmi.w	r3, r3, #1
 800403a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800403c:	0750      	lsls	r0, r2, #29
 800403e:	d504      	bpl.n	800404a <HAL_UART_IRQHandler+0x4a>
 8004040:	b11d      	cbz	r5, 800404a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004042:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004044:	f043 0302 	orr.w	r3, r3, #2
 8004048:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800404a:	0793      	lsls	r3, r2, #30
 800404c:	d504      	bpl.n	8004058 <HAL_UART_IRQHandler+0x58>
 800404e:	b11d      	cbz	r5, 8004058 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004050:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004052:	f043 0304 	orr.w	r3, r3, #4
 8004056:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004058:	0716      	lsls	r6, r2, #28
 800405a:	d504      	bpl.n	8004066 <HAL_UART_IRQHandler+0x66>
 800405c:	b11d      	cbz	r5, 8004066 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800405e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004060:	f043 0308 	orr.w	r3, r3, #8
 8004064:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004066:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d066      	beq.n	800413a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800406c:	0695      	lsls	r5, r2, #26
 800406e:	d504      	bpl.n	800407a <HAL_UART_IRQHandler+0x7a>
 8004070:	0688      	lsls	r0, r1, #26
 8004072:	d502      	bpl.n	800407a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8004074:	4620      	mov	r0, r4
 8004076:	f7ff ff56 	bl	8003f26 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800407a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800407c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800407e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004080:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004082:	0711      	lsls	r1, r2, #28
 8004084:	d402      	bmi.n	800408c <HAL_UART_IRQHandler+0x8c>
 8004086:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800408a:	d01a      	beq.n	80040c2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800408c:	f7ff fd32 	bl	8003af4 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	0652      	lsls	r2, r2, #25
 8004096:	d510      	bpl.n	80040ba <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004098:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800409a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a0:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80040a2:	b150      	cbz	r0, 80040ba <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <HAL_UART_IRQHandler+0x13c>)
 80040a6:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040a8:	f7fd fd78 	bl	8001b9c <HAL_DMA_Abort_IT>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d044      	beq.n	800413a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80040b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80040b8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80040ba:	4620      	mov	r0, r4
 80040bc:	f7ff ff77 	bl	8003fae <HAL_UART_ErrorCallback>
 80040c0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80040c2:	f7ff ff74 	bl	8003fae <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040ca:	0616      	lsls	r6, r2, #24
 80040cc:	d527      	bpl.n	800411e <HAL_UART_IRQHandler+0x11e>
 80040ce:	060d      	lsls	r5, r1, #24
 80040d0:	d525      	bpl.n	800411e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80040d2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80040d6:	2a21      	cmp	r2, #33	; 0x21
 80040d8:	d12f      	bne.n	800413a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040da:	68a2      	ldr	r2, [r4, #8]
 80040dc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80040e0:	6a22      	ldr	r2, [r4, #32]
 80040e2:	d117      	bne.n	8004114 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040e4:	8811      	ldrh	r1, [r2, #0]
 80040e6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80040ea:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80040ec:	6921      	ldr	r1, [r4, #16]
 80040ee:	b979      	cbnz	r1, 8004110 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80040f0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80040f2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80040f4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80040f6:	3a01      	subs	r2, #1
 80040f8:	b292      	uxth	r2, r2
 80040fa:	84e2      	strh	r2, [r4, #38]	; 0x26
 80040fc:	b9ea      	cbnz	r2, 800413a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004104:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8004110:	3201      	adds	r2, #1
 8004112:	e7ee      	b.n	80040f2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004114:	1c51      	adds	r1, r2, #1
 8004116:	6221      	str	r1, [r4, #32]
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	e7ea      	b.n	80040f4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800411e:	0650      	lsls	r0, r2, #25
 8004120:	d50b      	bpl.n	800413a <HAL_UART_IRQHandler+0x13a>
 8004122:	064a      	lsls	r2, r1, #25
 8004124:	d509      	bpl.n	800413a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004126:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004128:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800412a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800412e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004130:	2320      	movs	r3, #32
 8004132:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004136:	f7ff febd 	bl	8003eb4 <HAL_UART_TxCpltCallback>
 800413a:	bd70      	pop	{r4, r5, r6, pc}
 800413c:	08004141 	.word	0x08004141

08004140 <UART_DMAAbortOnError>:
{
 8004140:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004142:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004144:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004146:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004148:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800414a:	f7ff ff30 	bl	8003fae <HAL_UART_ErrorCallback>
 800414e:	bd08      	pop	{r3, pc}

08004150 <write_2>:
}

/**
 * Write sequence of n bytes from offset
 */
void write_2(unsigned int address, uint8_t *data, int offset, int n) {
 8004150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t *adr = data+offset;
    HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n, 1000);
 8004152:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    uint8_t *adr = data+offset;
 8004156:	440a      	add	r2, r1
    HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n, 1000);
 8004158:	b29b      	uxth	r3, r3
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	9200      	str	r2, [sp, #0]
 800415e:	9402      	str	r4, [sp, #8]
 8004160:	b282      	uxth	r2, r0
 8004162:	2302      	movs	r3, #2
 8004164:	21a0      	movs	r1, #160	; 0xa0
 8004166:	4804      	ldr	r0, [pc, #16]	; (8004178 <write_2+0x28>)
 8004168:	f7fe fb7e 	bl	8002868 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 800416c:	200a      	movs	r0, #10
}
 800416e:	b004      	add	sp, #16
 8004170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(10);
 8004174:	f7fd b9b4 	b.w	80014e0 <HAL_Delay>
 8004178:	2000150c 	.word	0x2000150c

0800417c <write_1>:
void write_1(unsigned int address, uint8_t *data, int n) {
 800417c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004180:	4606      	mov	r6, r0
 8004182:	4688      	mov	r8, r1
 8004184:	4615      	mov	r5, r2
  int offD = 0;         // current offset in data pointer
 8004186:	2700      	movs	r7, #0
  while (c > 0) {
 8004188:	2d00      	cmp	r5, #0
 800418a:	dc01      	bgt.n	8004190 <write_1+0x14>
}
 800418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nc = min(min(c, 30), PAGE_SIZE - offP);
 8004190:	2d1e      	cmp	r5, #30
 8004192:	462b      	mov	r3, r5
 8004194:	bfa8      	it	ge
 8004196:	231e      	movge	r3, #30
    offP = address % PAGE_SIZE;
 8004198:	f006 043f 	and.w	r4, r6, #63	; 0x3f
    nc = min(min(c, 30), PAGE_SIZE - offP);
 800419c:	f1c4 0440 	rsb	r4, r4, #64	; 0x40
 80041a0:	429c      	cmp	r4, r3
 80041a2:	bfa8      	it	ge
 80041a4:	461c      	movge	r4, r3
    write_2(address, data, offD, nc);
 80041a6:	463a      	mov	r2, r7
 80041a8:	4630      	mov	r0, r6
 80041aa:	4623      	mov	r3, r4
 80041ac:	4641      	mov	r1, r8
 80041ae:	f7ff ffcf 	bl	8004150 <write_2>
    c-=nc;
 80041b2:	1b2d      	subs	r5, r5, r4
    offD+=nc;
 80041b4:	4427      	add	r7, r4
    address+=nc;
 80041b6:	4426      	add	r6, r4
 80041b8:	e7e6      	b.n	8004188 <write_1+0xc>

080041ba <writeFloat>:
void writeFloat(unsigned int address, float data) {
 80041ba:	b507      	push	{r0, r1, r2, lr}
 80041bc:	ab02      	add	r3, sp, #8
 80041be:	f843 1d04 	str.w	r1, [r3, #-4]!
  write_1(address, (uint8_t*)&data, 4);
 80041c2:	2204      	movs	r2, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	f7ff ffd9 	bl	800417c <write_1>
}
 80041ca:	b003      	add	sp, #12
 80041cc:	f85d fb04 	ldr.w	pc, [sp], #4

080041d0 <read_2>:


/**
 * Read sequence of n bytes to offset
 */
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 80041d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d4:	b098      	sub	sp, #96	; 0x60
  int r = 0;
  uint8_t pData[80];
  memset(&pData[0], n, sizeof(pData));
 80041d6:	ad04      	add	r5, sp, #16
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 80041d8:	4680      	mov	r8, r0
 80041da:	460e      	mov	r6, r1
 80041dc:	4617      	mov	r7, r2
  memset(&pData[0], n, sizeof(pData));
 80041de:	4619      	mov	r1, r3
 80041e0:	2250      	movs	r2, #80	; 0x50
 80041e2:	4628      	mov	r0, r5
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 80041e4:	461c      	mov	r4, r3
  memset(&pData[0], n, sizeof(pData));
 80041e6:	f004 fbf8 	bl	80089da <memset>
  HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, pData, n, 1000);
 80041ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ee:	9302      	str	r3, [sp, #8]
 80041f0:	b2a3      	uxth	r3, r4
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	9500      	str	r5, [sp, #0]
 80041f6:	2302      	movs	r3, #2
 80041f8:	fa1f f288 	uxth.w	r2, r8
 80041fc:	21a0      	movs	r1, #160	; 0xa0
 80041fe:	4807      	ldr	r0, [pc, #28]	; (800421c <read_2+0x4c>)
 8004200:	f7fe fbc8 	bl	8002994 <HAL_I2C_Mem_Read>
  int r = 0;
 8004204:	2300      	movs	r3, #0
  while (r<n) {
    data[offset+r] = pData[r];
 8004206:	443e      	add	r6, r7
  while (r<n) {
 8004208:	42a3      	cmp	r3, r4
 800420a:	db02      	blt.n	8004212 <read_2+0x42>
    r++;
  }
}
 800420c:	b018      	add	sp, #96	; 0x60
 800420e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    data[offset+r] = pData[r];
 8004212:	5cea      	ldrb	r2, [r5, r3]
 8004214:	54f2      	strb	r2, [r6, r3]
    r++;
 8004216:	3301      	adds	r3, #1
 8004218:	e7f6      	b.n	8004208 <read_2+0x38>
 800421a:	bf00      	nop
 800421c:	2000150c 	.word	0x2000150c

08004220 <read_1>:
void read_1(unsigned int address, uint8_t *data, int n) {
 8004220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004224:	4607      	mov	r7, r0
 8004226:	4688      	mov	r8, r1
 8004228:	4614      	mov	r4, r2
  int offD = 0;
 800422a:	2600      	movs	r6, #0
  while (c > 0) {
 800422c:	2c00      	cmp	r4, #0
 800422e:	dc01      	bgt.n	8004234 <read_1+0x14>
}
 8004230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004234:	2c20      	cmp	r4, #32
 8004236:	4625      	mov	r5, r4
 8004238:	bfa8      	it	ge
 800423a:	2520      	movge	r5, #32
    read_2(address, data, offD, nc);
 800423c:	4632      	mov	r2, r6
 800423e:	4638      	mov	r0, r7
 8004240:	462b      	mov	r3, r5
 8004242:	4641      	mov	r1, r8
 8004244:	f7ff ffc4 	bl	80041d0 <read_2>
    address+=nc;
 8004248:	442f      	add	r7, r5
    offD+=nc;
 800424a:	442e      	add	r6, r5
    c-=nc;
 800424c:	1b64      	subs	r4, r4, r5
 800424e:	e7ed      	b.n	800422c <read_1+0xc>

08004250 <readFloat>:
float readFloat(unsigned int address) {
 8004250:	b510      	push	{r4, lr}
  read_1(address, _b, 4);
 8004252:	4c03      	ldr	r4, [pc, #12]	; (8004260 <readFloat+0x10>)
 8004254:	2204      	movs	r2, #4
 8004256:	4621      	mov	r1, r4
 8004258:	f7ff ffe2 	bl	8004220 <read_1>
  return *(float*)&_b[0];
 800425c:	6820      	ldr	r0, [r4, #0]
}
 800425e:	bd10      	pop	{r4, pc}
 8004260:	20000d94 	.word	0x20000d94

08004264 <EEPROM_Init>:
{
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	2400      	movs	r4, #0
 8004268:	4d09      	ldr	r5, [pc, #36]	; (8004290 <EEPROM_Init+0x2c>)
     pid.kp[i] = readFloat( 0 + (4*i));
 800426a:	4620      	mov	r0, r4
 800426c:	f7ff fff0 	bl	8004250 <readFloat>
 8004270:	f845 0f04 	str.w	r0, [r5, #4]!
     pid.ki[i] = readFloat(12 + (4*i));
 8004274:	f104 000c 	add.w	r0, r4, #12
 8004278:	f7ff ffea 	bl	8004250 <readFloat>
 800427c:	6268      	str	r0, [r5, #36]	; 0x24
     pid.kd[i] = readFloat(24 + (4*i));
 800427e:	f104 0018 	add.w	r0, r4, #24
 8004282:	f7ff ffe5 	bl	8004250 <readFloat>
 8004286:	3404      	adds	r4, #4
   for(int i = 0; i < 3; i++){
 8004288:	2c0c      	cmp	r4, #12
     pid.kd[i] = readFloat(24 + (4*i));
 800428a:	64a8      	str	r0, [r5, #72]	; 0x48
   for(int i = 0; i < 3; i++){
 800428c:	d1ed      	bne.n	800426a <EEPROM_Init+0x6>
}
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20000ea8 	.word	0x20000ea8

08004294 <gps_Init>:

void USART2_TX(unsigned char data){while(!(USART2->SR&0x40)); USART2->DR=data;}
void USART2_TX_str(char *str){while(*str){USART2_TX(*str++);}}

void gps_Init(void)
{
 8004294:	4770      	bx	lr
	...

08004298 <I2C_ByteWrite>:
//#include "I2C.h"
#include "Board.h"

void I2C_ByteWrite(uint8_t DevAddress, uint8_t MemAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 8004298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t tmp;
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
 800429c:	2601      	movs	r6, #1
{
 800429e:	4692      	mov	sl, r2
 80042a0:	461c      	mov	r4, r3
 80042a2:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
 80042a4:	4f16      	ldr	r7, [pc, #88]	; (8004300 <I2C_ByteWrite+0x68>)
 80042a6:	f10d 0517 	add.w	r5, sp, #23
 80042aa:	4680      	mov	r8, r0
 80042ac:	4689      	mov	r9, r1
 80042ae:	4633      	mov	r3, r6
 80042b0:	460a      	mov	r2, r1
 80042b2:	9602      	str	r6, [sp, #8]
 80042b4:	4601      	mov	r1, r0
 80042b6:	9601      	str	r6, [sp, #4]
 80042b8:	9500      	str	r5, [sp, #0]
 80042ba:	4638      	mov	r0, r7
 80042bc:	f7fe fb6a 	bl	8002994 <HAL_I2C_Mem_Read>
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80042c0:	ebaa 0304 	sub.w	r3, sl, r4
 80042c4:	199a      	adds	r2, r3, r6
 80042c6:	fa06 f404 	lsl.w	r4, r6, r4
	data <<= (bitStart - length + 1); // shift data into correct position
 80042ca:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80042ce:	3c01      	subs	r4, #1
 80042d0:	4094      	lsls	r4, r2
	data <<= (bitStart - length + 1); // shift data into correct position
 80042d2:	4093      	lsls	r3, r2
	data &= mask; // zero all non-important bits in data
	tmp &= ~(mask); // zero all important bits in existing byte
 80042d4:	f89d 2017 	ldrb.w	r2, [sp, #23]
	data <<= (bitStart - length + 1); // shift data into correct position
 80042d8:	b2db      	uxtb	r3, r3
	tmp &= ~(mask); // zero all important bits in existing byte
 80042da:	ea22 0204 	bic.w	r2, r2, r4
	data &= mask; // zero all non-important bits in data
 80042de:	401c      	ands	r4, r3
	tmp |= data; // combine data with existing byte
	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 80042e0:	230a      	movs	r3, #10
	tmp |= data; // combine data with existing byte
 80042e2:	4314      	orrs	r4, r2
	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 80042e4:	9302      	str	r3, [sp, #8]
 80042e6:	e88d 0060 	stmia.w	sp, {r5, r6}
 80042ea:	4633      	mov	r3, r6
 80042ec:	464a      	mov	r2, r9
 80042ee:	4641      	mov	r1, r8
 80042f0:	4638      	mov	r0, r7
	tmp |= data; // combine data with existing byte
 80042f2:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 80042f6:	f7fe fab7 	bl	8002868 <HAL_I2C_Mem_Write>
}
 80042fa:	b006      	add	sp, #24
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	2000150c 	.word	0x2000150c

08004304 <I2C_ByteRead>:
//	tmp >>= (bitStart - length + 1);
//	*data = tmp;
//}

void I2C_ByteRead(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 8004306:	2401      	movs	r4, #1
 8004308:	9402      	str	r4, [sp, #8]
 800430a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800430e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8004312:	4613      	mov	r3, r2
 8004314:	460a      	mov	r2, r1
 8004316:	4601      	mov	r1, r0
 8004318:	4802      	ldr	r0, [pc, #8]	; (8004324 <I2C_ByteRead+0x20>)
 800431a:	f7fe fb3b 	bl	8002994 <HAL_I2C_Mem_Read>
}
 800431e:	b004      	add	sp, #16
 8004320:	bd10      	pop	{r4, pc}
 8004322:	bf00      	nop
 8004324:	2000150c 	.word	0x2000150c

08004328 <I2C_Write>:
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
	*data = tmp & (1 << bitNum);
}

void I2C_Write(uint16_t DevAddress, uint8_t data, uint16_t Size)
{
 8004328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 800432c:	4c1e      	ldr	r4, [pc, #120]	; (80043a8 <I2C_Write+0x80>)
{
 800432e:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004330:	4620      	mov	r0, r4
{
 8004332:	4616      	mov	r6, r2
 8004334:	f88d 100f 	strb.w	r1, [sp, #15]
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004338:	f7fe fc4c 	bl	8002bd4 <HAL_I2C_GetState>
 800433c:	2820      	cmp	r0, #32
 800433e:	d111      	bne.n	8004364 <I2C_Write+0x3c>

  state = HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1000);
 8004340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004344:	4629      	mov	r1, r5
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	4620      	mov	r0, r4
 800434a:	4633      	mov	r3, r6
 800434c:	f10d 020f 	add.w	r2, sp, #15
 8004350:	f7fe f832 	bl	80023b8 <HAL_I2C_Master_Transmit>
 8004354:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 8004356:	6c27      	ldr	r7, [r4, #64]	; 0x40
   while(state)
   {
     sprintf(Buf, "MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 8004358:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80043b4 <I2C_Write+0x8c>
 800435c:	4c13      	ldr	r4, [pc, #76]	; (80043ac <I2C_Write+0x84>)
     HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800435e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80043b8 <I2C_Write+0x90>
   while(state)
 8004362:	b915      	cbnz	r5, 800436a <I2C_Write+0x42>
       HAL_Delay(4);
     }
   }
  }
  //while(HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1) != HAL_OK);
}
 8004364:	b004      	add	sp, #16
 8004366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     sprintf(Buf, "MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 800436a:	463b      	mov	r3, r7
 800436c:	462a      	mov	r2, r5
 800436e:	4641      	mov	r1, r8
 8004370:	4620      	mov	r0, r4
 8004372:	f004 fb3b 	bl	80089ec <sprintf>
     HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8004376:	4620      	mov	r0, r4
 8004378:	f7fb feea 	bl	8000150 <strlen>
 800437c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004380:	b282      	uxth	r2, r0
 8004382:	4621      	mov	r1, r4
 8004384:	4648      	mov	r0, r9
 8004386:	f7ff fcb7 	bl	8003cf8 <HAL_UART_Transmit>
       Error.error = 2;
 800438a:	f04f 0a02 	mov.w	sl, #2
     while (Error.error !=0)
 800438e:	4e08      	ldr	r6, [pc, #32]	; (80043b0 <I2C_Write+0x88>)
 8004390:	7833      	ldrb	r3, [r6, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0e5      	beq.n	8004362 <I2C_Write+0x3a>
       Error.error = 2;
 8004396:	f886 a000 	strb.w	sl, [r6]
       error_signal();
 800439a:	f000 fcc7 	bl	8004d2c <error_signal>
       HAL_Delay(4);
 800439e:	2004      	movs	r0, #4
 80043a0:	f7fd f89e 	bl	80014e0 <HAL_Delay>
 80043a4:	e7f4      	b.n	8004390 <I2C_Write+0x68>
 80043a6:	bf00      	nop
 80043a8:	2000150c 	.word	0x2000150c
 80043ac:	200013e0 	.word	0x200013e0
 80043b0:	200016dc 	.word	0x200016dc
 80043b4:	0800db9c 	.word	0x0800db9c
 80043b8:	20001724 	.word	0x20001724

080043bc <I2C_Read>:

void I2C_Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80043bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 80043c0:	4c1d      	ldr	r4, [pc, #116]	; (8004438 <I2C_Read+0x7c>)
{
 80043c2:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 80043c4:	4620      	mov	r0, r4
{
 80043c6:	460e      	mov	r6, r1
 80043c8:	4617      	mov	r7, r2
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 80043ca:	f7fe fc03 	bl	8002bd4 <HAL_I2C_GetState>
 80043ce:	2820      	cmp	r0, #32
 80043d0:	d110      	bne.n	80043f4 <I2C_Read+0x38>

  state = HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1000);
 80043d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043d6:	4629      	mov	r1, r5
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	4620      	mov	r0, r4
 80043dc:	463b      	mov	r3, r7
 80043de:	4632      	mov	r2, r6
 80043e0:	f7fe f8c0 	bl	8002564 <HAL_I2C_Master_Receive>
 80043e4:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 80043e6:	6c27      	ldr	r7, [r4, #64]	; 0x40
    while(state)
    {
      sprintf(Buf, "MS5611_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 80043e8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004444 <I2C_Read+0x88>
 80043ec:	4c13      	ldr	r4, [pc, #76]	; (800443c <I2C_Read+0x80>)
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80043ee:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004448 <I2C_Read+0x8c>
    while(state)
 80043f2:	b915      	cbnz	r5, 80043fa <I2C_Read+0x3e>
        HAL_Delay(4);
      }
    }
  }
  //while(HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1) != HAL_OK);
}
 80043f4:	b002      	add	sp, #8
 80043f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sprintf(Buf, "MS5611_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 80043fa:	463b      	mov	r3, r7
 80043fc:	462a      	mov	r2, r5
 80043fe:	4641      	mov	r1, r8
 8004400:	4620      	mov	r0, r4
 8004402:	f004 faf3 	bl	80089ec <sprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8004406:	4620      	mov	r0, r4
 8004408:	f7fb fea2 	bl	8000150 <strlen>
 800440c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004410:	b282      	uxth	r2, r0
 8004412:	4621      	mov	r1, r4
 8004414:	4648      	mov	r0, r9
 8004416:	f7ff fc6f 	bl	8003cf8 <HAL_UART_Transmit>
        Error.error = 3;
 800441a:	f04f 0a03 	mov.w	sl, #3
      while (Error.error !=0)
 800441e:	4e08      	ldr	r6, [pc, #32]	; (8004440 <I2C_Read+0x84>)
 8004420:	7833      	ldrb	r3, [r6, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0e5      	beq.n	80043f2 <I2C_Read+0x36>
        Error.error = 3;
 8004426:	f886 a000 	strb.w	sl, [r6]
        error_signal();
 800442a:	f000 fc7f 	bl	8004d2c <error_signal>
        HAL_Delay(4);
 800442e:	2004      	movs	r0, #4
 8004430:	f7fd f856 	bl	80014e0 <HAL_Delay>
 8004434:	e7f4      	b.n	8004420 <I2C_Read+0x64>
 8004436:	bf00      	nop
 8004438:	2000150c 	.word	0x2000150c
 800443c:	200013e0 	.word	0x200013e0
 8004440:	200016dc 	.word	0x200016dc
 8004444:	0800db80 	.word	0x0800db80
 8004448:	20001724 	.word	0x20001724

0800444c <invSqrt>:
/* Calculate 1/sqrt(x) with magic number support */
//static float oneOverSqrt(float x) {
//    return 1.0f / (float) sqrt(x);
//}

float invSqrt(float x) {
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	4606      	mov	r6, r0
	float halfx = 0.5f * x;
 8004450:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004454:	f7fc fc72 	bl	8000d3c <__aeabi_fmul>
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
 8004458:	4c11      	ldr	r4, [pc, #68]	; (80044a0 <invSqrt+0x54>)
	float halfx = 0.5f * x;
 800445a:	4605      	mov	r5, r0
	y = *(float*)&i;
 800445c:	eba4 0466 	sub.w	r4, r4, r6, asr #1
	y = y * (1.5f - (halfx * y * y));
 8004460:	4621      	mov	r1, r4
 8004462:	f7fc fc6b 	bl	8000d3c <__aeabi_fmul>
 8004466:	4621      	mov	r1, r4
 8004468:	f7fc fc68 	bl	8000d3c <__aeabi_fmul>
 800446c:	4601      	mov	r1, r0
 800446e:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8004472:	f7fc fb59 	bl	8000b28 <__aeabi_fsub>
 8004476:	4621      	mov	r1, r4
 8004478:	f7fc fc60 	bl	8000d3c <__aeabi_fmul>
 800447c:	4604      	mov	r4, r0
	y = y * (1.5f - (halfx * y * y));
 800447e:	4601      	mov	r1, r0
 8004480:	4628      	mov	r0, r5
 8004482:	f7fc fc5b 	bl	8000d3c <__aeabi_fmul>
 8004486:	4621      	mov	r1, r4
 8004488:	f7fc fc58 	bl	8000d3c <__aeabi_fmul>
 800448c:	4601      	mov	r1, r0
 800448e:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8004492:	f7fc fb49 	bl	8000b28 <__aeabi_fsub>
 8004496:	4621      	mov	r1, r4
 8004498:	f7fc fc50 	bl	8000d3c <__aeabi_fmul>
	return y;
}
 800449c:	bd70      	pop	{r4, r5, r6, pc}
 800449e:	bf00      	nop
 80044a0:	5f3759df 	.word	0x5f3759df
 80044a4:	00000000 	.word	0x00000000

080044a8 <calculateAngles>:
//   float tmp = *(float*)&i;
//   return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
//}


void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 80044a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AHRSIMU->Roll = (float) atan2f(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 80044ac:	6986      	ldr	r6, [r0, #24]
void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 80044ae:	4604      	mov	r4, r0
    AHRSIMU->Roll = (float) atan2f(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 80044b0:	69c5      	ldr	r5, [r0, #28]
 80044b2:	4631      	mov	r1, r6
 80044b4:	4630      	mov	r0, r6
 80044b6:	f7fc fc41 	bl	8000d3c <__aeabi_fmul>
 80044ba:	4601      	mov	r1, r0
 80044bc:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80044c0:	f7fc fb32 	bl	8000b28 <__aeabi_fsub>
 80044c4:	4629      	mov	r1, r5
 80044c6:	4607      	mov	r7, r0
 80044c8:	4628      	mov	r0, r5
 80044ca:	f7fc fc37 	bl	8000d3c <__aeabi_fmul>
 80044ce:	4601      	mov	r1, r0
 80044d0:	4638      	mov	r0, r7
 80044d2:	f7fc fb29 	bl	8000b28 <__aeabi_fsub>
 80044d6:	6961      	ldr	r1, [r4, #20]
 80044d8:	4607      	mov	r7, r0
 80044da:	4630      	mov	r0, r6
 80044dc:	f7fc fc2e 	bl	8000d3c <__aeabi_fmul>
 80044e0:	6a21      	ldr	r1, [r4, #32]
 80044e2:	4606      	mov	r6, r0
 80044e4:	4628      	mov	r0, r5
 80044e6:	f7fc fc29 	bl	8000d3c <__aeabi_fmul>
 80044ea:	4601      	mov	r1, r0
 80044ec:	4630      	mov	r0, r6
 80044ee:	f7fc fb1d 	bl	8000b2c <__addsf3>
 80044f2:	4639      	mov	r1, r7
 80044f4:	f007 fc16 	bl	800bd24 <atan2f>
    AHRSIMU->Pitch = (float) asinf(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 80044f8:	6a21      	ldr	r1, [r4, #32]
    AHRSIMU->Roll = (float) atan2f(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 80044fa:	6020      	str	r0, [r4, #0]
    AHRSIMU->Pitch = (float) asinf(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 80044fc:	69a0      	ldr	r0, [r4, #24]
 80044fe:	f7fc fc1d 	bl	8000d3c <__aeabi_fmul>
 8004502:	69e1      	ldr	r1, [r4, #28]
 8004504:	4605      	mov	r5, r0
 8004506:	6960      	ldr	r0, [r4, #20]
 8004508:	f7fc fc18 	bl	8000d3c <__aeabi_fmul>
 800450c:	4601      	mov	r1, r0
 800450e:	4628      	mov	r0, r5
 8004510:	f7fc fb0a 	bl	8000b28 <__aeabi_fsub>
 8004514:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004518:	f7fc fc10 	bl	8000d3c <__aeabi_fmul>
 800451c:	f007 fbb4 	bl	800bc88 <asinf>
    AHRSIMU->Yaw = (float) atan2f(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 8004520:	69e6      	ldr	r6, [r4, #28]
    AHRSIMU->Pitch = (float) asinf(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 8004522:	6060      	str	r0, [r4, #4]
    AHRSIMU->Yaw = (float) atan2f(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 8004524:	4631      	mov	r1, r6
 8004526:	4630      	mov	r0, r6
 8004528:	f7fc fc08 	bl	8000d3c <__aeabi_fmul>
 800452c:	4601      	mov	r1, r0
 800452e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004532:	f7fc faf9 	bl	8000b28 <__aeabi_fsub>
 8004536:	6a25      	ldr	r5, [r4, #32]
 8004538:	4607      	mov	r7, r0
 800453a:	4629      	mov	r1, r5
 800453c:	4628      	mov	r0, r5
 800453e:	f7fc fbfd 	bl	8000d3c <__aeabi_fmul>
 8004542:	4601      	mov	r1, r0
 8004544:	4638      	mov	r0, r7
 8004546:	f7fc faef 	bl	8000b28 <__aeabi_fsub>
 800454a:	69a1      	ldr	r1, [r4, #24]
 800454c:	4607      	mov	r7, r0
 800454e:	4630      	mov	r0, r6
 8004550:	f7fc fbf4 	bl	8000d3c <__aeabi_fmul>
 8004554:	6961      	ldr	r1, [r4, #20]
 8004556:	4606      	mov	r6, r0
 8004558:	4628      	mov	r0, r5
 800455a:	f7fc fbef 	bl	8000d3c <__aeabi_fmul>
 800455e:	4601      	mov	r1, r0
 8004560:	4630      	mov	r0, r6
 8004562:	f7fc fae3 	bl	8000b2c <__addsf3>
 8004566:	4639      	mov	r1, r7
 8004568:	f007 fbdc 	bl	800bd24 <atan2f>

    /* Calculate degrees and remove inclination */
    AHRSIMU->Roll *= R2D;
 800456c:	4980      	ldr	r1, [pc, #512]	; (8004770 <calculateAngles+0x2c8>)
    AHRSIMU->Yaw = (float) atan2f(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 800456e:	4605      	mov	r5, r0
    AHRSIMU->Roll *= R2D;
 8004570:	6820      	ldr	r0, [r4, #0]
 8004572:	f7fc fbe3 	bl	8000d3c <__aeabi_fmul>
    AHRSIMU->Pitch *= R2D;
 8004576:	497e      	ldr	r1, [pc, #504]	; (8004770 <calculateAngles+0x2c8>)
    AHRSIMU->Roll *= R2D;
 8004578:	6020      	str	r0, [r4, #0]
 800457a:	4682      	mov	sl, r0
    AHRSIMU->Pitch *= R2D;
 800457c:	6860      	ldr	r0, [r4, #4]
 800457e:	f7fc fbdd 	bl	8000d3c <__aeabi_fmul>
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 8004582:	497b      	ldr	r1, [pc, #492]	; (8004770 <calculateAngles+0x2c8>)
    AHRSIMU->Pitch *= R2D;
 8004584:	6060      	str	r0, [r4, #4]
 8004586:	4607      	mov	r7, r0
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 8004588:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 800458c:	f7fc fbd6 	bl	8000d3c <__aeabi_fmul>
 8004590:	68e1      	ldr	r1, [r4, #12]
 8004592:	f7fc fac9 	bl	8000b28 <__aeabi_fsub>

    /* Check values because of inclination */
    if (AHRSIMU->Yaw < -180) {
 8004596:	4977      	ldr	r1, [pc, #476]	; (8004774 <calculateAngles+0x2cc>)
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 8004598:	4605      	mov	r5, r0
    if (AHRSIMU->Yaw < -180) {
 800459a:	f7fc fd6d 	bl	8001078 <__aeabi_fcmplt>
 800459e:	b148      	cbz	r0, 80045b4 <calculateAngles+0x10c>
        AHRSIMU->Yaw = 180.0f - (-180.0f - AHRSIMU->Yaw);
 80045a0:	4629      	mov	r1, r5
 80045a2:	4874      	ldr	r0, [pc, #464]	; (8004774 <calculateAngles+0x2cc>)
 80045a4:	f7fc fac0 	bl	8000b28 <__aeabi_fsub>
 80045a8:	4601      	mov	r1, r0
 80045aa:	4873      	ldr	r0, [pc, #460]	; (8004778 <calculateAngles+0x2d0>)
    } else if (AHRSIMU->Yaw > 180) {
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 80045ac:	f7fc fabc 	bl	8000b28 <__aeabi_fsub>
 80045b0:	60a0      	str	r0, [r4, #8]
 80045b2:	e007      	b.n	80045c4 <calculateAngles+0x11c>
    } else if (AHRSIMU->Yaw > 180) {
 80045b4:	4970      	ldr	r1, [pc, #448]	; (8004778 <calculateAngles+0x2d0>)
 80045b6:	4628      	mov	r0, r5
 80045b8:	f7fc fd7c 	bl	80010b4 <__aeabi_fcmpgt>
 80045bc:	2800      	cmp	r0, #0
 80045be:	f040 80c4 	bne.w	800474a <calculateAngles+0x2a2>
    AHRSIMU->Yaw = -(AHRSIMU->Yaw) * R2D - AHRSIMU->Inclination;
 80045c2:	60a5      	str	r5, [r4, #8]
//  AHRSIMU->Roll  = (0.96 * Pre_IMU[ROLL]  ) + ((0.04) * AHRSIMU->Roll);
//	AHRSIMU->Pitch = (0.96 * Pre_IMU[PITCH] ) + ((0.04) * AHRSIMU->Pitch);
//	AHRSIMU->Yaw   = (0.96 * Pre_IMU[YAW]   ) + ((0.04) * AHRSIMU->Yaw);
		

  AHRSIMU->Roll  = (0.95 * (Pre_IMU[ROLL]  + (imu.gyroRaw[ROLL] * 0.004)))  + (0.05 * AHRSIMU->Roll);
 80045c4:	4d6d      	ldr	r5, [pc, #436]	; (800477c <calculateAngles+0x2d4>)
 80045c6:	4e6e      	ldr	r6, [pc, #440]	; (8004780 <calculateAngles+0x2d8>)
 80045c8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80045ca:	f7fb ff2d 	bl	8000428 <__aeabi_f2d>
 80045ce:	a362      	add	r3, pc, #392	; (adr r3, 8004758 <calculateAngles+0x2b0>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f7fb ff7c 	bl	80004d0 <__aeabi_dmul>
 80045d8:	4680      	mov	r8, r0
 80045da:	6830      	ldr	r0, [r6, #0]
 80045dc:	4689      	mov	r9, r1
 80045de:	f7fb ff23 	bl	8000428 <__aeabi_f2d>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4640      	mov	r0, r8
 80045e8:	4649      	mov	r1, r9
 80045ea:	f7fb fdbf 	bl	800016c <__adddf3>
 80045ee:	a35c      	add	r3, pc, #368	; (adr r3, 8004760 <calculateAngles+0x2b8>)
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f7fb ff6c 	bl	80004d0 <__aeabi_dmul>
 80045f8:	4680      	mov	r8, r0
 80045fa:	4650      	mov	r0, sl
 80045fc:	4689      	mov	r9, r1
 80045fe:	f7fb ff13 	bl	8000428 <__aeabi_f2d>
 8004602:	a359      	add	r3, pc, #356	; (adr r3, 8004768 <calculateAngles+0x2c0>)
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f7fb ff62 	bl	80004d0 <__aeabi_dmul>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4640      	mov	r0, r8
 8004612:	4649      	mov	r1, r9
 8004614:	f7fb fdaa 	bl	800016c <__adddf3>
 8004618:	f7fc fa32 	bl	8000a80 <__aeabi_d2f>
 800461c:	4682      	mov	sl, r0
 800461e:	6020      	str	r0, [r4, #0]
  AHRSIMU->Pitch = (0.95 * (Pre_IMU[PITCH] + (imu.gyroRaw[PITCH] * 0.004))) + (0.05 * AHRSIMU->Pitch);
 8004620:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004622:	f7fb ff01 	bl	8000428 <__aeabi_f2d>
 8004626:	a34c      	add	r3, pc, #304	; (adr r3, 8004758 <calculateAngles+0x2b0>)
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f7fb ff50 	bl	80004d0 <__aeabi_dmul>
 8004630:	4680      	mov	r8, r0
 8004632:	6870      	ldr	r0, [r6, #4]
 8004634:	4689      	mov	r9, r1
 8004636:	f7fb fef7 	bl	8000428 <__aeabi_f2d>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4640      	mov	r0, r8
 8004640:	4649      	mov	r1, r9
 8004642:	f7fb fd93 	bl	800016c <__adddf3>
 8004646:	a346      	add	r3, pc, #280	; (adr r3, 8004760 <calculateAngles+0x2b8>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fb ff40 	bl	80004d0 <__aeabi_dmul>
 8004650:	4680      	mov	r8, r0
 8004652:	4638      	mov	r0, r7
 8004654:	4689      	mov	r9, r1
 8004656:	f7fb fee7 	bl	8000428 <__aeabi_f2d>
 800465a:	a343      	add	r3, pc, #268	; (adr r3, 8004768 <calculateAngles+0x2c0>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fb ff36 	bl	80004d0 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4640      	mov	r0, r8
 800466a:	4649      	mov	r1, r9
 800466c:	f7fb fd7e 	bl	800016c <__adddf3>
 8004670:	f7fc fa06 	bl	8000a80 <__aeabi_d2f>
 8004674:	4683      	mov	fp, r0
 8004676:	6060      	str	r0, [r4, #4]
  AHRSIMU->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRSIMU->Yaw);
 8004678:	68b0      	ldr	r0, [r6, #8]
 800467a:	f7fb fed5 	bl	8000428 <__aeabi_f2d>
 800467e:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 8004680:	4680      	mov	r8, r0
 8004682:	4638      	mov	r0, r7
 8004684:	4689      	mov	r9, r1
 8004686:	f7fb fecf 	bl	8000428 <__aeabi_f2d>
 800468a:	a333      	add	r3, pc, #204	; (adr r3, 8004758 <calculateAngles+0x2b0>)
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f7fb ff1e 	bl	80004d0 <__aeabi_dmul>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4640      	mov	r0, r8
 800469a:	4649      	mov	r1, r9
 800469c:	f7fb fd66 	bl	800016c <__adddf3>
 80046a0:	a32f      	add	r3, pc, #188	; (adr r3, 8004760 <calculateAngles+0x2b8>)
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f7fb ff13 	bl	80004d0 <__aeabi_dmul>
 80046aa:	4680      	mov	r8, r0
 80046ac:	68a0      	ldr	r0, [r4, #8]
 80046ae:	4689      	mov	r9, r1
 80046b0:	f7fb feba 	bl	8000428 <__aeabi_f2d>
 80046b4:	a32c      	add	r3, pc, #176	; (adr r3, 8004768 <calculateAngles+0x2c0>)
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f7fb ff09 	bl	80004d0 <__aeabi_dmul>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4640      	mov	r0, r8
 80046c4:	4649      	mov	r1, r9
 80046c6:	f7fb fd51 	bl	800016c <__adddf3>
 80046ca:	f7fc f9d9 	bl	8000a80 <__aeabi_d2f>
 80046ce:	60a0      	str	r0, [r4, #8]

  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 80046d0:	4c2c      	ldr	r4, [pc, #176]	; (8004784 <calculateAngles+0x2dc>)
  AHRSIMU->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRSIMU->Yaw);
 80046d2:	4680      	mov	r8, r0
  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 80046d4:	6820      	ldr	r0, [r4, #0]
 80046d6:	f7fb fea7 	bl	8000428 <__aeabi_f2d>
 80046da:	a321      	add	r3, pc, #132	; (adr r3, 8004760 <calculateAngles+0x2b8>)
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f7fb fef6 	bl	80004d0 <__aeabi_dmul>
 80046e4:	e9cd 0100 	strd	r0, r1, [sp]
 80046e8:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 80046ec:	f7fb fe9c 	bl	8000428 <__aeabi_f2d>
 80046f0:	a31d      	add	r3, pc, #116	; (adr r3, 8004768 <calculateAngles+0x2c0>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f7fb feeb 	bl	80004d0 <__aeabi_dmul>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004702:	f7fb fd33 	bl	800016c <__adddf3>
 8004706:	f7fc f9bb 	bl	8000a80 <__aeabi_d2f>
		
		imu.Roll = AHRSIMU->Roll + 0.0f;
 800470a:	2100      	movs	r1, #0
  imu.gyroYaw    = (0.95 * Pre_gyro) + (0.05 * -imu.gyroRaw[YAW]);
 800470c:	4607      	mov	r7, r0
 800470e:	f8c5 0084 	str.w	r0, [r5, #132]	; 0x84
		imu.Roll = AHRSIMU->Roll + 0.0f;
 8004712:	4650      	mov	r0, sl
 8004714:	f7fc fa0a 	bl	8000b2c <__addsf3>
		imu.Pitch = AHRSIMU->Pitch + 0.0f;
 8004718:	2100      	movs	r1, #0
		imu.Roll = AHRSIMU->Roll + 0.0f;
 800471a:	4681      	mov	r9, r0
 800471c:	67a8      	str	r0, [r5, #120]	; 0x78
		imu.Pitch = AHRSIMU->Pitch + 0.0f;
 800471e:	4658      	mov	r0, fp
 8004720:	f7fc fa04 	bl	8000b2c <__addsf3>
		imu.Yaw = AHRSIMU->Yaw;
 8004724:	f8c5 8080 	str.w	r8, [r5, #128]	; 0x80
		imu.Pitch = AHRSIMU->Pitch + 0.0f;
 8004728:	67e8      	str	r0, [r5, #124]	; 0x7c
		
		imu.AHRS[ROLL] = AHRSIMU->Roll + 0.0f;
 800472a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
		imu.AHRS[PITCH] = AHRSIMU->Pitch + 0.0f;
 800472e:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
		imu.AHRS[YAW] = AHRSIMU->Yaw;
 8004732:	f8c5 8090 	str.w	r8, [r5, #144]	; 0x90
		
	Pre_IMU[ROLL]  = AHRSIMU->Roll;
 8004736:	f8c6 a000 	str.w	sl, [r6]
	Pre_IMU[PITCH] = AHRSIMU->Pitch;
 800473a:	f8c6 b004 	str.w	fp, [r6, #4]
	Pre_IMU[YAW]   = AHRSIMU->Yaw;
 800473e:	f8c6 8008 	str.w	r8, [r6, #8]
	Pre_gyro = imu.gyroYaw;
 8004742:	6027      	str	r7, [r4, #0]
	}
 8004744:	b003      	add	sp, #12
 8004746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 800474a:	4629      	mov	r1, r5
 800474c:	480a      	ldr	r0, [pc, #40]	; (8004778 <calculateAngles+0x2d0>)
 800474e:	f7fc f9eb 	bl	8000b28 <__aeabi_fsub>
 8004752:	4601      	mov	r1, r0
 8004754:	4807      	ldr	r0, [pc, #28]	; (8004774 <calculateAngles+0x2cc>)
 8004756:	e729      	b.n	80045ac <calculateAngles+0x104>
 8004758:	d2f1a9fc 	.word	0xd2f1a9fc
 800475c:	3f70624d 	.word	0x3f70624d
 8004760:	66666666 	.word	0x66666666
 8004764:	3fee6666 	.word	0x3fee6666
 8004768:	9999999a 	.word	0x9999999a
 800476c:	3fa99999 	.word	0x3fa99999
 8004770:	42652ee0 	.word	0x42652ee0
 8004774:	c3340000 	.word	0xc3340000
 8004778:	43340000 	.word	0x43340000
 800477c:	20001328 	.word	0x20001328
 8004780:	20000aa4 	.word	0x20000aa4
 8004784:	20000ab0 	.word	0x20000ab0

08004788 <TM_AHRSIMU_Init>:

void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRSIMU, float sampleRate, float beta, float inclination) {
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4604      	mov	r4, r0
    AHRSIMU->_beta = beta;
 800478c:	6102      	str	r2, [r0, #16]
    AHRSIMU->_sampleRate = 1 / sampleRate;
 800478e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRSIMU, float sampleRate, float beta, float inclination) {
 8004792:	461d      	mov	r5, r3
    AHRSIMU->_sampleRate = 1 / sampleRate;
 8004794:	f7fc fb86 	bl	8000ea4 <__aeabi_fdiv>
    AHRSIMU->Inclination = inclination;

    AHRSIMU->_q0 = 1.0f;
 8004798:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800479c:	6163      	str	r3, [r4, #20]
    AHRSIMU->_q1 = 0.0f;
 800479e:	2300      	movs	r3, #0
    AHRSIMU->_sampleRate = 1 / sampleRate;
 80047a0:	6260      	str	r0, [r4, #36]	; 0x24
    AHRSIMU->Inclination = inclination;
 80047a2:	60e5      	str	r5, [r4, #12]
    AHRSIMU->_q1 = 0.0f;
 80047a4:	61a3      	str	r3, [r4, #24]
    AHRSIMU->_q2 = 0.0f;
 80047a6:	61e3      	str	r3, [r4, #28]
    AHRSIMU->_q3 = 0.0f;
 80047a8:	6223      	str	r3, [r4, #32]
 80047aa:	bd38      	pop	{r3, r4, r5, pc}

080047ac <TM_AHRSIMU_UpdateIMU>:

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 80047ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b0:	4683      	mov	fp, r0
 80047b2:	b093      	sub	sp, #76	; 0x4c
 80047b4:	4608      	mov	r0, r1
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	
		// Convert gyroscope degrees/sec to radians/sec
	  gx = AHRSIMU_DEG2RAD(gx);
 80047b6:	4952      	ldr	r1, [pc, #328]	; (8004900 <TM_AHRSIMU_UpdateIMU+0x154>)
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 80047b8:	4615      	mov	r5, r2
 80047ba:	461c      	mov	r4, r3
	  gx = AHRSIMU_DEG2RAD(gx);
 80047bc:	f7fc fabe 	bl	8000d3c <__aeabi_fmul>
	  gy = AHRSIMU_DEG2RAD(gy);
 80047c0:	494f      	ldr	r1, [pc, #316]	; (8004900 <TM_AHRSIMU_UpdateIMU+0x154>)
	  gx = AHRSIMU_DEG2RAD(gx);
 80047c2:	4681      	mov	r9, r0
	  gy = AHRSIMU_DEG2RAD(gy);
 80047c4:	4628      	mov	r0, r5
 80047c6:	f7fc fab9 	bl	8000d3c <__aeabi_fmul>
	  gz = AHRSIMU_DEG2RAD(gz);
 80047ca:	494d      	ldr	r1, [pc, #308]	; (8004900 <TM_AHRSIMU_UpdateIMU+0x154>)
	  gy = AHRSIMU_DEG2RAD(gy);
 80047cc:	4682      	mov	sl, r0
	  gz = AHRSIMU_DEG2RAD(gz);
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7fc fab4 	bl	8000d3c <__aeabi_fmul>

    /* Rate of change of quaternion from gyroscope */
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 80047d4:	f8db 5018 	ldr.w	r5, [fp, #24]
 80047d8:	f8db 3020 	ldr.w	r3, [fp, #32]
	  gz = AHRSIMU_DEG2RAD(gz);
 80047dc:	9002      	str	r0, [sp, #8]
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 80047de:	4649      	mov	r1, r9
 80047e0:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	f7fc faa9 	bl	8000d3c <__aeabi_fmul>
 80047ea:	f8db 401c 	ldr.w	r4, [fp, #28]
 80047ee:	9001      	str	r0, [sp, #4]
 80047f0:	4621      	mov	r1, r4
 80047f2:	4650      	mov	r0, sl
 80047f4:	f7fc faa2 	bl	8000d3c <__aeabi_fmul>
 80047f8:	9b01      	ldr	r3, [sp, #4]
 80047fa:	4601      	mov	r1, r0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fc f993 	bl	8000b28 <__aeabi_fsub>
 8004802:	9900      	ldr	r1, [sp, #0]
 8004804:	9001      	str	r0, [sp, #4]
 8004806:	9802      	ldr	r0, [sp, #8]
 8004808:	f7fc fa98 	bl	8000d3c <__aeabi_fmul>
 800480c:	9b01      	ldr	r3, [sp, #4]
 800480e:	4601      	mov	r1, r0
 8004810:	4618      	mov	r0, r3
 8004812:	f7fc f989 	bl	8000b28 <__aeabi_fsub>
 8004816:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800481a:	f7fc fa8f 	bl	8000d3c <__aeabi_fmul>
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 800481e:	f8db 3014 	ldr.w	r3, [fp, #20]
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8004822:	9004      	str	r0, [sp, #16]
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8004824:	4619      	mov	r1, r3
 8004826:	4648      	mov	r0, r9
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	f7fc fa87 	bl	8000d3c <__aeabi_fmul>
 800482e:	4621      	mov	r1, r4
 8004830:	9003      	str	r0, [sp, #12]
 8004832:	9802      	ldr	r0, [sp, #8]
 8004834:	f7fc fa82 	bl	8000d3c <__aeabi_fmul>
 8004838:	9b03      	ldr	r3, [sp, #12]
 800483a:	4601      	mov	r1, r0
 800483c:	4618      	mov	r0, r3
 800483e:	f7fc f975 	bl	8000b2c <__addsf3>
 8004842:	9900      	ldr	r1, [sp, #0]
 8004844:	9003      	str	r0, [sp, #12]
 8004846:	4650      	mov	r0, sl
 8004848:	f7fc fa78 	bl	8000d3c <__aeabi_fmul>
 800484c:	9b03      	ldr	r3, [sp, #12]
 800484e:	4601      	mov	r1, r0
 8004850:	4618      	mov	r0, r3
 8004852:	f7fc f969 	bl	8000b28 <__aeabi_fsub>
 8004856:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800485a:	f7fc fa6f 	bl	8000d3c <__aeabi_fmul>
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 800485e:	9901      	ldr	r1, [sp, #4]
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8004860:	9005      	str	r0, [sp, #20]
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8004862:	4650      	mov	r0, sl
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8004864:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004868:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800486a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 800486c:	f7fc fa66 	bl	8000d3c <__aeabi_fmul>
 8004870:	4629      	mov	r1, r5
 8004872:	9003      	str	r0, [sp, #12]
 8004874:	9802      	ldr	r0, [sp, #8]
 8004876:	f7fc fa61 	bl	8000d3c <__aeabi_fmul>
 800487a:	9b03      	ldr	r3, [sp, #12]
 800487c:	4601      	mov	r1, r0
 800487e:	4618      	mov	r0, r3
 8004880:	f7fc f952 	bl	8000b28 <__aeabi_fsub>
 8004884:	9900      	ldr	r1, [sp, #0]
 8004886:	9003      	str	r0, [sp, #12]
 8004888:	4648      	mov	r0, r9
 800488a:	f7fc fa57 	bl	8000d3c <__aeabi_fmul>
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	4601      	mov	r1, r0
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc f94a 	bl	8000b2c <__addsf3>
 8004898:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800489c:	f7fc fa4e 	bl	8000d3c <__aeabi_fmul>
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 80048a0:	9901      	ldr	r1, [sp, #4]
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 80048a2:	9006      	str	r0, [sp, #24]
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 80048a4:	9802      	ldr	r0, [sp, #8]
 80048a6:	f7fc fa49 	bl	8000d3c <__aeabi_fmul>
 80048aa:	4629      	mov	r1, r5
 80048ac:	9002      	str	r0, [sp, #8]
 80048ae:	4650      	mov	r0, sl
 80048b0:	f7fc fa44 	bl	8000d3c <__aeabi_fmul>
 80048b4:	9b02      	ldr	r3, [sp, #8]
 80048b6:	4601      	mov	r1, r0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fc f937 	bl	8000b2c <__addsf3>
 80048be:	4621      	mov	r1, r4
 80048c0:	4682      	mov	sl, r0
 80048c2:	4648      	mov	r0, r9
 80048c4:	f7fc fa3a 	bl	8000d3c <__aeabi_fmul>
 80048c8:	4601      	mov	r1, r0
 80048ca:	4650      	mov	r0, sl
 80048cc:	f7fc f92c 	bl	8000b28 <__aeabi_fsub>
 80048d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80048d4:	f7fc fa32 	bl	8000d3c <__aeabi_fmul>

    /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 80048d8:	2100      	movs	r1, #0
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 80048da:	9007      	str	r0, [sp, #28]
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 80048dc:	4640      	mov	r0, r8
 80048de:	f7fc fbc1 	bl	8001064 <__aeabi_fcmpeq>
 80048e2:	b178      	cbz	r0, 8004904 <TM_AHRSIMU_UpdateIMU+0x158>
 80048e4:	2100      	movs	r1, #0
 80048e6:	4638      	mov	r0, r7
 80048e8:	f7fc fbbc 	bl	8001064 <__aeabi_fcmpeq>
 80048ec:	b150      	cbz	r0, 8004904 <TM_AHRSIMU_UpdateIMU+0x158>
 80048ee:	2100      	movs	r1, #0
 80048f0:	4630      	mov	r0, r6
 80048f2:	f7fc fbb7 	bl	8001064 <__aeabi_fcmpeq>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f040 8198 	bne.w	8004c2c <TM_AHRSIMU_UpdateIMU+0x480>
 80048fc:	e002      	b.n	8004904 <TM_AHRSIMU_UpdateIMU+0x158>
 80048fe:	bf00      	nop
 8004900:	3c8efa35 	.word	0x3c8efa35

        /* Normalise accelerometer measurement */
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8004904:	4641      	mov	r1, r8
 8004906:	4640      	mov	r0, r8
 8004908:	f7fc fa18 	bl	8000d3c <__aeabi_fmul>
 800490c:	4639      	mov	r1, r7
 800490e:	4681      	mov	r9, r0
 8004910:	4638      	mov	r0, r7
 8004912:	f7fc fa13 	bl	8000d3c <__aeabi_fmul>
 8004916:	4601      	mov	r1, r0
 8004918:	4648      	mov	r0, r9
 800491a:	f7fc f907 	bl	8000b2c <__addsf3>
 800491e:	4631      	mov	r1, r6
 8004920:	4681      	mov	r9, r0
 8004922:	4630      	mov	r0, r6
 8004924:	f7fc fa0a 	bl	8000d3c <__aeabi_fmul>
 8004928:	4601      	mov	r1, r0
 800492a:	4648      	mov	r0, r9
 800492c:	f7fc f8fe 	bl	8000b2c <__addsf3>
 8004930:	f7ff fd8c 	bl	800444c <invSqrt>
 8004934:	4681      	mov	r9, r0
        ax *= recipNorm;
 8004936:	4601      	mov	r1, r0
 8004938:	4640      	mov	r0, r8
 800493a:	f7fc f9ff 	bl	8000d3c <__aeabi_fmul>
        ay *= recipNorm;
 800493e:	4649      	mov	r1, r9
        ax *= recipNorm;
 8004940:	9002      	str	r0, [sp, #8]
        ay *= recipNorm;
 8004942:	4638      	mov	r0, r7
 8004944:	f7fc f9fa 	bl	8000d3c <__aeabi_fmul>
        az *= recipNorm;
 8004948:	4649      	mov	r1, r9
        ay *= recipNorm;
 800494a:	9003      	str	r0, [sp, #12]
        az *= recipNorm;
 800494c:	4630      	mov	r0, r6
 800494e:	f7fc f9f5 	bl	8000d3c <__aeabi_fmul>

        /* Auxiliary variables to avoid repeated arithmetic */
        _2q0 = 2.0f * AHRSIMU->_q0;
 8004952:	9901      	ldr	r1, [sp, #4]
        az *= recipNorm;
 8004954:	9009      	str	r0, [sp, #36]	; 0x24
        _2q0 = 2.0f * AHRSIMU->_q0;
 8004956:	4608      	mov	r0, r1
 8004958:	f7fc f8e8 	bl	8000b2c <__addsf3>
        _2q1 = 2.0f * AHRSIMU->_q1;
 800495c:	4629      	mov	r1, r5
        _2q0 = 2.0f * AHRSIMU->_q0;
 800495e:	900a      	str	r0, [sp, #40]	; 0x28
        _2q1 = 2.0f * AHRSIMU->_q1;
 8004960:	4628      	mov	r0, r5
 8004962:	f7fc f8e3 	bl	8000b2c <__addsf3>
        _2q2 = 2.0f * AHRSIMU->_q2;
 8004966:	4621      	mov	r1, r4
        _2q1 = 2.0f * AHRSIMU->_q1;
 8004968:	900b      	str	r0, [sp, #44]	; 0x2c
        _2q2 = 2.0f * AHRSIMU->_q2;
 800496a:	4620      	mov	r0, r4
 800496c:	f7fc f8de 	bl	8000b2c <__addsf3>
        _2q3 = 2.0f * AHRSIMU->_q3;
 8004970:	9900      	ldr	r1, [sp, #0]
        _2q2 = 2.0f * AHRSIMU->_q2;
 8004972:	900c      	str	r0, [sp, #48]	; 0x30
        _2q3 = 2.0f * AHRSIMU->_q3;
 8004974:	4608      	mov	r0, r1
 8004976:	f7fc f8d9 	bl	8000b2c <__addsf3>
        _4q0 = 4.0f * AHRSIMU->_q0;
 800497a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _2q3 = 2.0f * AHRSIMU->_q3;
 800497e:	900d      	str	r0, [sp, #52]	; 0x34
        _4q0 = 4.0f * AHRSIMU->_q0;
 8004980:	9801      	ldr	r0, [sp, #4]
 8004982:	f7fc f9db 	bl	8000d3c <__aeabi_fmul>
        _4q1 = 4.0f * AHRSIMU->_q1;
 8004986:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _4q0 = 4.0f * AHRSIMU->_q0;
 800498a:	4680      	mov	r8, r0
        _4q1 = 4.0f * AHRSIMU->_q1;
 800498c:	4628      	mov	r0, r5
 800498e:	f7fc f9d5 	bl	8000d3c <__aeabi_fmul>
        _4q2 = 4.0f * AHRSIMU->_q2;
 8004992:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _4q1 = 4.0f * AHRSIMU->_q1;
 8004996:	4607      	mov	r7, r0
        _4q2 = 4.0f * AHRSIMU->_q2;
 8004998:	4620      	mov	r0, r4
 800499a:	f7fc f9cf 	bl	8000d3c <__aeabi_fmul>
        _8q1 = 8.0f * AHRSIMU->_q1;
 800499e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
        _4q2 = 4.0f * AHRSIMU->_q2;
 80049a2:	9008      	str	r0, [sp, #32]
        _8q1 = 8.0f * AHRSIMU->_q1;
 80049a4:	4628      	mov	r0, r5
 80049a6:	f7fc f9c9 	bl	8000d3c <__aeabi_fmul>
        _8q2 = 8.0f * AHRSIMU->_q2;
 80049aa:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
        _8q1 = 8.0f * AHRSIMU->_q1;
 80049ae:	4681      	mov	r9, r0
        _8q2 = 8.0f * AHRSIMU->_q2;
 80049b0:	4620      	mov	r0, r4
 80049b2:	f7fc f9c3 	bl	8000d3c <__aeabi_fmul>
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 80049b6:	4629      	mov	r1, r5
        _8q2 = 8.0f * AHRSIMU->_q2;
 80049b8:	900e      	str	r0, [sp, #56]	; 0x38
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 80049ba:	4628      	mov	r0, r5
 80049bc:	f7fc f9be 	bl	8000d3c <__aeabi_fmul>
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 80049c0:	4621      	mov	r1, r4
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 80049c2:	4606      	mov	r6, r0
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7fc f9b9 	bl	8000d3c <__aeabi_fmul>
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 80049ca:	9900      	ldr	r1, [sp, #0]
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 80049cc:	4682      	mov	sl, r0
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 80049ce:	4608      	mov	r0, r1
 80049d0:	f7fc f9b4 	bl	8000d3c <__aeabi_fmul>

        /* Gradient decent algorithm corrective step */
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80049d4:	4651      	mov	r1, sl
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 80049d6:	900f      	str	r0, [sp, #60]	; 0x3c
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80049d8:	4640      	mov	r0, r8
 80049da:	f7fc f9af 	bl	8000d3c <__aeabi_fmul>
 80049de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049e0:	9010      	str	r0, [sp, #64]	; 0x40
 80049e2:	9802      	ldr	r0, [sp, #8]
 80049e4:	f7fc f9aa 	bl	8000d3c <__aeabi_fmul>
 80049e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049ea:	4601      	mov	r1, r0
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fc f89d 	bl	8000b2c <__addsf3>
 80049f2:	4631      	mov	r1, r6
 80049f4:	9010      	str	r0, [sp, #64]	; 0x40
 80049f6:	4640      	mov	r0, r8
 80049f8:	f7fc f9a0 	bl	8000d3c <__aeabi_fmul>
 80049fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049fe:	4601      	mov	r1, r0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fc f893 	bl	8000b2c <__addsf3>
 8004a06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a08:	4680      	mov	r8, r0
 8004a0a:	9803      	ldr	r0, [sp, #12]
 8004a0c:	f7fc f996 	bl	8000d3c <__aeabi_fmul>
 8004a10:	4601      	mov	r1, r0
 8004a12:	4640      	mov	r0, r8
 8004a14:	f7fc f888 	bl	8000b28 <__aeabi_fsub>
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
 8004a18:	9901      	ldr	r1, [sp, #4]
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004a1a:	9011      	str	r0, [sp, #68]	; 0x44
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	f7fc f98d 	bl	8000d3c <__aeabi_fmul>
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004a22:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004a26:	f7fc f989 	bl	8000d3c <__aeabi_fmul>
 8004a2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a2c:	4680      	mov	r8, r0
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f7fc f984 	bl	8000d3c <__aeabi_fmul>
 8004a34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a36:	9010      	str	r0, [sp, #64]	; 0x40
 8004a38:	9802      	ldr	r0, [sp, #8]
 8004a3a:	f7fc f97f 	bl	8000d3c <__aeabi_fmul>
 8004a3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a40:	4601      	mov	r1, r0
 8004a42:	4610      	mov	r0, r2
 8004a44:	f7fc f870 	bl	8000b28 <__aeabi_fsub>
 8004a48:	4641      	mov	r1, r8
 8004a4a:	9010      	str	r0, [sp, #64]	; 0x40
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f7fc f975 	bl	8000d3c <__aeabi_fmul>
 8004a52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a54:	4601      	mov	r1, r0
 8004a56:	4610      	mov	r0, r2
 8004a58:	f7fc f868 	bl	8000b2c <__addsf3>
 8004a5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004a5e:	9010      	str	r0, [sp, #64]	; 0x40
 8004a60:	9803      	ldr	r0, [sp, #12]
 8004a62:	f7fc f96b 	bl	8000d3c <__aeabi_fmul>
 8004a66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a68:	4601      	mov	r1, r0
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f7fc f85c 	bl	8000b28 <__aeabi_fsub>
 8004a70:	4639      	mov	r1, r7
 8004a72:	f7fc f859 	bl	8000b28 <__aeabi_fsub>
 8004a76:	4631      	mov	r1, r6
 8004a78:	9010      	str	r0, [sp, #64]	; 0x40
 8004a7a:	4648      	mov	r0, r9
 8004a7c:	f7fc f95e 	bl	8000d3c <__aeabi_fmul>
 8004a80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a82:	4601      	mov	r1, r0
 8004a84:	4610      	mov	r0, r2
 8004a86:	f7fc f851 	bl	8000b2c <__addsf3>
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	9010      	str	r0, [sp, #64]	; 0x40
 8004a8e:	4648      	mov	r0, r9
 8004a90:	f7fc f954 	bl	8000d3c <__aeabi_fmul>
 8004a94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a96:	4601      	mov	r1, r0
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f7fc f847 	bl	8000b2c <__addsf3>
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	4681      	mov	r9, r0
 8004aa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aa4:	f7fc f94a 	bl	8000d3c <__aeabi_fmul>
 8004aa8:	4601      	mov	r1, r0
 8004aaa:	4648      	mov	r0, r9
 8004aac:	f7fc f83e 	bl	8000b2c <__addsf3>
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004ab0:	4641      	mov	r1, r8
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004ab2:	4681      	mov	r9, r0
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f7fc f941 	bl	8000d3c <__aeabi_fmul>
 8004aba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004abc:	4607      	mov	r7, r0
 8004abe:	9802      	ldr	r0, [sp, #8]
 8004ac0:	f7fc f93c 	bl	8000d3c <__aeabi_fmul>
 8004ac4:	4601      	mov	r1, r0
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	f7fc f830 	bl	8000b2c <__addsf3>
 8004acc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ace:	4607      	mov	r7, r0
 8004ad0:	9808      	ldr	r0, [sp, #32]
 8004ad2:	f7fc f933 	bl	8000d3c <__aeabi_fmul>
 8004ad6:	4601      	mov	r1, r0
 8004ad8:	4638      	mov	r0, r7
 8004ada:	f7fc f827 	bl	8000b2c <__addsf3>
 8004ade:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ae0:	4607      	mov	r7, r0
 8004ae2:	9803      	ldr	r0, [sp, #12]
 8004ae4:	f7fc f92a 	bl	8000d3c <__aeabi_fmul>
 8004ae8:	4601      	mov	r1, r0
 8004aea:	4638      	mov	r0, r7
 8004aec:	f7fc f81c 	bl	8000b28 <__aeabi_fsub>
 8004af0:	9908      	ldr	r1, [sp, #32]
 8004af2:	f7fc f819 	bl	8000b28 <__aeabi_fsub>
 8004af6:	4631      	mov	r1, r6
 8004af8:	4607      	mov	r7, r0
 8004afa:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004afc:	f7fc f91e 	bl	8000d3c <__aeabi_fmul>
 8004b00:	4601      	mov	r1, r0
 8004b02:	4638      	mov	r0, r7
 8004b04:	f7fc f812 	bl	8000b2c <__addsf3>
 8004b08:	4651      	mov	r1, sl
 8004b0a:	4607      	mov	r7, r0
 8004b0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004b0e:	f7fc f915 	bl	8000d3c <__aeabi_fmul>
 8004b12:	4601      	mov	r1, r0
 8004b14:	4638      	mov	r0, r7
 8004b16:	f7fc f809 	bl	8000b2c <__addsf3>
 8004b1a:	9908      	ldr	r1, [sp, #32]
 8004b1c:	4607      	mov	r7, r0
 8004b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b20:	f7fc f90c 	bl	8000d3c <__aeabi_fmul>
 8004b24:	4601      	mov	r1, r0
 8004b26:	4638      	mov	r0, r7
 8004b28:	f7fc f800 	bl	8000b2c <__addsf3>
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8004b2c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004b30:	4680      	mov	r8, r0
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7fc f902 	bl	8000d3c <__aeabi_fmul>
 8004b38:	9900      	ldr	r1, [sp, #0]
 8004b3a:	f7fc f8ff 	bl	8000d3c <__aeabi_fmul>
 8004b3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b40:	4606      	mov	r6, r0
 8004b42:	9802      	ldr	r0, [sp, #8]
 8004b44:	f7fc f8fa 	bl	8000d3c <__aeabi_fmul>
 8004b48:	4601      	mov	r1, r0
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f7fb ffec 	bl	8000b28 <__aeabi_fsub>
 8004b50:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004b54:	4606      	mov	r6, r0
 8004b56:	4650      	mov	r0, sl
 8004b58:	f7fc f8f0 	bl	8000d3c <__aeabi_fmul>
 8004b5c:	9900      	ldr	r1, [sp, #0]
 8004b5e:	f7fc f8ed 	bl	8000d3c <__aeabi_fmul>
 8004b62:	4601      	mov	r1, r0
 8004b64:	4630      	mov	r0, r6
 8004b66:	f7fb ffe1 	bl	8000b2c <__addsf3>
 8004b6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	9803      	ldr	r0, [sp, #12]
 8004b70:	f7fc f8e4 	bl	8000d3c <__aeabi_fmul>
 8004b74:	4601      	mov	r1, r0
 8004b76:	4630      	mov	r0, r6
 8004b78:	f7fb ffd6 	bl	8000b28 <__aeabi_fsub>

        /* Normalise step magnitude */
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004b7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8004b7e:	4682      	mov	sl, r0
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004b80:	4619      	mov	r1, r3
 8004b82:	4618      	mov	r0, r3
 8004b84:	9302      	str	r3, [sp, #8]
 8004b86:	f7fc f8d9 	bl	8000d3c <__aeabi_fmul>
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	4606      	mov	r6, r0
 8004b8e:	4648      	mov	r0, r9
 8004b90:	f7fc f8d4 	bl	8000d3c <__aeabi_fmul>
 8004b94:	4601      	mov	r1, r0
 8004b96:	4630      	mov	r0, r6
 8004b98:	f7fb ffc8 	bl	8000b2c <__addsf3>
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	f7fc f8cb 	bl	8000d3c <__aeabi_fmul>
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f7fb ffbf 	bl	8000b2c <__addsf3>
 8004bae:	4651      	mov	r1, sl
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	4650      	mov	r0, sl
 8004bb4:	f7fc f8c2 	bl	8000d3c <__aeabi_fmul>
 8004bb8:	4601      	mov	r1, r0
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f7fb ffb6 	bl	8000b2c <__addsf3>
 8004bc0:	f7ff fc44 	bl	800444c <invSqrt>
        s0 *= recipNorm;
 8004bc4:	9b02      	ldr	r3, [sp, #8]
        s1 *= recipNorm;
        s2 *= recipNorm;
        s3 *= recipNorm;

        /* Apply feedback step */
        qDot1 -= AHRSIMU->_beta * s0;
 8004bc6:	f8db 6010 	ldr.w	r6, [fp, #16]
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004bca:	4607      	mov	r7, r0
        s0 *= recipNorm;
 8004bcc:	4601      	mov	r1, r0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc f8b4 	bl	8000d3c <__aeabi_fmul>
        qDot1 -= AHRSIMU->_beta * s0;
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	f7fc f8b1 	bl	8000d3c <__aeabi_fmul>
 8004bda:	4601      	mov	r1, r0
 8004bdc:	9804      	ldr	r0, [sp, #16]
 8004bde:	f7fb ffa3 	bl	8000b28 <__aeabi_fsub>
        s1 *= recipNorm;
 8004be2:	4639      	mov	r1, r7
        qDot1 -= AHRSIMU->_beta * s0;
 8004be4:	9004      	str	r0, [sp, #16]
        s1 *= recipNorm;
 8004be6:	4648      	mov	r0, r9
 8004be8:	f7fc f8a8 	bl	8000d3c <__aeabi_fmul>
        qDot2 -= AHRSIMU->_beta * s1;
 8004bec:	4631      	mov	r1, r6
 8004bee:	f7fc f8a5 	bl	8000d3c <__aeabi_fmul>
 8004bf2:	4601      	mov	r1, r0
 8004bf4:	9805      	ldr	r0, [sp, #20]
 8004bf6:	f7fb ff97 	bl	8000b28 <__aeabi_fsub>
        s2 *= recipNorm;
 8004bfa:	4639      	mov	r1, r7
        qDot2 -= AHRSIMU->_beta * s1;
 8004bfc:	9005      	str	r0, [sp, #20]
        s2 *= recipNorm;
 8004bfe:	4640      	mov	r0, r8
 8004c00:	f7fc f89c 	bl	8000d3c <__aeabi_fmul>
        qDot3 -= AHRSIMU->_beta * s2;
 8004c04:	4631      	mov	r1, r6
 8004c06:	f7fc f899 	bl	8000d3c <__aeabi_fmul>
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	9806      	ldr	r0, [sp, #24]
 8004c0e:	f7fb ff8b 	bl	8000b28 <__aeabi_fsub>
        s3 *= recipNorm;
 8004c12:	4639      	mov	r1, r7
        qDot3 -= AHRSIMU->_beta * s2;
 8004c14:	9006      	str	r0, [sp, #24]
        s3 *= recipNorm;
 8004c16:	4650      	mov	r0, sl
 8004c18:	f7fc f890 	bl	8000d3c <__aeabi_fmul>
        qDot4 -= AHRSIMU->_beta * s3;
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	f7fc f88d 	bl	8000d3c <__aeabi_fmul>
 8004c22:	4601      	mov	r1, r0
 8004c24:	9807      	ldr	r0, [sp, #28]
 8004c26:	f7fb ff7f 	bl	8000b28 <__aeabi_fsub>
 8004c2a:	9007      	str	r0, [sp, #28]
    }

    /* Integrate rate of change of quaternion to yield quaternion */
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8004c2c:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8004c30:	9804      	ldr	r0, [sp, #16]
 8004c32:	4631      	mov	r1, r6
 8004c34:	f7fc f882 	bl	8000d3c <__aeabi_fmul>
 8004c38:	9901      	ldr	r1, [sp, #4]
 8004c3a:	f7fb ff77 	bl	8000b2c <__addsf3>
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8004c3e:	4631      	mov	r1, r6
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8004c40:	4607      	mov	r7, r0
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8004c42:	9805      	ldr	r0, [sp, #20]
 8004c44:	f7fc f87a 	bl	8000d3c <__aeabi_fmul>
 8004c48:	4629      	mov	r1, r5
 8004c4a:	f7fb ff6f 	bl	8000b2c <__addsf3>
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8004c4e:	4631      	mov	r1, r6
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8004c50:	4680      	mov	r8, r0
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8004c52:	9806      	ldr	r0, [sp, #24]
 8004c54:	f7fc f872 	bl	8000d3c <__aeabi_fmul>
 8004c58:	4621      	mov	r1, r4
 8004c5a:	f7fb ff67 	bl	8000b2c <__addsf3>
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8004c5e:	4631      	mov	r1, r6
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8004c60:	4681      	mov	r9, r0
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8004c62:	9807      	ldr	r0, [sp, #28]
 8004c64:	f7fc f86a 	bl	8000d3c <__aeabi_fmul>
 8004c68:	9900      	ldr	r1, [sp, #0]
 8004c6a:	f7fb ff5f 	bl	8000b2c <__addsf3>

    /* Normalise quaternion */
    recipNorm = invSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8004c6e:	4639      	mov	r1, r7
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8004c70:	4605      	mov	r5, r0
    recipNorm = invSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8004c72:	4638      	mov	r0, r7
 8004c74:	f7fc f862 	bl	8000d3c <__aeabi_fmul>
 8004c78:	4641      	mov	r1, r8
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4640      	mov	r0, r8
 8004c7e:	f7fc f85d 	bl	8000d3c <__aeabi_fmul>
 8004c82:	4601      	mov	r1, r0
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7fb ff51 	bl	8000b2c <__addsf3>
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	4648      	mov	r0, r9
 8004c90:	f7fc f854 	bl	8000d3c <__aeabi_fmul>
 8004c94:	4601      	mov	r1, r0
 8004c96:	4620      	mov	r0, r4
 8004c98:	f7fb ff48 	bl	8000b2c <__addsf3>
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f7fc f84b 	bl	8000d3c <__aeabi_fmul>
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7fb ff3f 	bl	8000b2c <__addsf3>
 8004cae:	f7ff fbcd 	bl	800444c <invSqrt>
 8004cb2:	4604      	mov	r4, r0
    AHRSIMU->_q0 *= recipNorm;
 8004cb4:	4601      	mov	r1, r0
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	f7fc f840 	bl	8000d3c <__aeabi_fmul>
    AHRSIMU->_q1 *= recipNorm;
 8004cbc:	4621      	mov	r1, r4
    AHRSIMU->_q0 *= recipNorm;
 8004cbe:	f8cb 0014 	str.w	r0, [fp, #20]
    AHRSIMU->_q1 *= recipNorm;
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	f7fc f83a 	bl	8000d3c <__aeabi_fmul>
    AHRSIMU->_q2 *= recipNorm;
 8004cc8:	4621      	mov	r1, r4
    AHRSIMU->_q1 *= recipNorm;
 8004cca:	f8cb 0018 	str.w	r0, [fp, #24]
    AHRSIMU->_q2 *= recipNorm;
 8004cce:	4648      	mov	r0, r9
 8004cd0:	f7fc f834 	bl	8000d3c <__aeabi_fmul>
    AHRSIMU->_q3 *= recipNorm;
 8004cd4:	4621      	mov	r1, r4
    AHRSIMU->_q2 *= recipNorm;
 8004cd6:	f8cb 001c 	str.w	r0, [fp, #28]
    AHRSIMU->_q3 *= recipNorm;
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f7fc f82e 	bl	8000d3c <__aeabi_fmul>
 8004ce0:	f8cb 0020 	str.w	r0, [fp, #32]

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
 8004ce4:	4658      	mov	r0, fp
}
 8004ce6:	b013      	add	sp, #76	; 0x4c
 8004ce8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    calculateAngles(AHRSIMU);
 8004cec:	f7ff bbdc 	b.w	80044a8 <calculateAngles>

08004cf0 <computeIMU>:
            imu.AHRS[ROLL]  *= 180.0f / AHRSIMU_PI;

        }

void computeIMU(void)
{
 8004cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
//  uint8_t DATA[0];
//  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_STATUS, 1, DATA, 1);
//  if(DATA[0] & 0x01){
	Gyro_getADC();
 8004cf2:	f000 fe53 	bl	800599c <Gyro_getADC>
  ACC_getADC();
 8004cf6:	f000 fedd 	bl	8005ab4 <ACC_getADC>
  Mag_getADC();                                               //Read the raw acc and gyro data from the MPU-6050
 8004cfa:	f000 ff2b 	bl	8005b54 <Mag_getADC>
	Temp_getADC();
 8004cfe:	f000 ffbf 	bl	8005c80 <Temp_getADC>
		#endif
	
#ifdef IMU_AHRS
    /* Call update function */
    /* This function must be called periodically in inteervals set by sample rate on initialization process */
	TM_AHRSIMU_UpdateIMU(&AHRSIMU, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW]);
 8004d02:	4908      	ldr	r1, [pc, #32]	; (8004d24 <computeIMU+0x34>)
 8004d04:	4808      	ldr	r0, [pc, #32]	; (8004d28 <computeIMU+0x38>)
 8004d06:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004d08:	9302      	str	r3, [sp, #8]
 8004d0a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8004d14:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8004d16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004d18:	f7ff fd48 	bl	80047ac <TM_AHRSIMU_UpdateIMU>
	 // MadgwickQuaternionUpdate(imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.gyroRaw[ROLL]*AHRSIMU_PI/180.0f, imu.gyroRaw[PITCH]*AHRSIMU_PI/180.0f, imu.gyroRaw[YAW]*AHRSIMU_PI/180.0f,  imu.magRaw[PITCH], imu.magRaw[ROLL], imu.magRaw[YAW]);
	//TM_AHRSIMU_UpdateAHRS(&AHRSIMU, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.magRaw[PITCH], imu.magRaw[ROLL], imu.magRaw[YAW]);
	
  //TM_AHRSIMU_UpdateAHRS(&AHRSIMU, AHRSIMU_DEG2RAD(imu.gyroRaw[ROLL]), AHRSIMU_DEG2RAD(imu.gyroRaw[PITCH]), AHRSIMU_DEG2RAD(imu.gyroRaw[YAW]), imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.magRaw[PITCH], imu.magRaw[ROLL], imu.magRaw[YAW]);
	#endif
}
 8004d1c:	b005      	add	sp, #20
 8004d1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d22:	bf00      	nop
 8004d24:	20001328 	.word	0x20001328
 8004d28:	20000e6c 	.word	0x20000e6c

08004d2c <error_signal>:
uint32_t flight_mode_timer;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the error LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void error_signal(void) {
 8004d2c:	b538      	push	{r3, r4, r5, lr}
  if (Error.error >= 100) {RGB_R_ON;}                                                         //When the error is 100 the LED is always on.
 8004d2e:	4c1b      	ldr	r4, [pc, #108]	; (8004d9c <error_signal+0x70>)
 8004d30:	7823      	ldrb	r3, [r4, #0]
 8004d32:	2b63      	cmp	r3, #99	; 0x63
 8004d34:	d907      	bls.n	8004d46 <error_signal+0x1a>
      RGB_R_OFF;                                                                        //Turn the LED off.
      Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
    }
  }
}
 8004d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (Error.error >= 100) {RGB_R_ON;}                                                         //When the error is 100 the LED is always on.
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d40:	4817      	ldr	r0, [pc, #92]	; (8004da0 <error_signal+0x74>)
 8004d42:	f7fd b8e7 	b.w	8001f14 <HAL_GPIO_WritePin>
  else if (Error.error_timer < millis()) {                                                       //If the error_timer value is smaller that the millis() function.
 8004d46:	6865      	ldr	r5, [r4, #4]
 8004d48:	f002 fdb6 	bl	80078b8 <millis>
 8004d4c:	4285      	cmp	r5, r0
 8004d4e:	d218      	bcs.n	8004d82 <error_signal+0x56>
    Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 8004d50:	f002 fdb2 	bl	80078b8 <millis>
    if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 8004d54:	7823      	ldrb	r3, [r4, #0]
    Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 8004d56:	30fa      	adds	r0, #250	; 0xfa
 8004d58:	6060      	str	r0, [r4, #4]
    if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 8004d5a:	b12b      	cbz	r3, 8004d68 <error_signal+0x3c>
 8004d5c:	7861      	ldrb	r1, [r4, #1]
 8004d5e:	1cda      	adds	r2, r3, #3
 8004d60:	4291      	cmp	r1, r2
 8004d62:	bfc4      	itt	gt
 8004d64:	2200      	movgt	r2, #0
 8004d66:	7062      	strbgt	r2, [r4, #1]
    if (Error.error_counter < Error.error && Error.error_led == 0 && Error.error > 0) {                            //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8004d68:	7862      	ldrb	r2, [r4, #1]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d20a      	bcs.n	8004d84 <error_signal+0x58>
 8004d6e:	78a2      	ldrb	r2, [r4, #2]
 8004d70:	b942      	cbnz	r2, 8004d84 <error_signal+0x58>
 8004d72:	b13b      	cbz	r3, 8004d84 <error_signal+0x58>
      RGB_R_ON;                                                                       //Turn the LED on.
 8004d74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d78:	4809      	ldr	r0, [pc, #36]	; (8004da0 <error_signal+0x74>)
 8004d7a:	f7fd f8cb 	bl	8001f14 <HAL_GPIO_WritePin>
      Error.error_led = 1;                                                                       //Set the LED flag to indicate that the LED is on.
 8004d7e:	2301      	movs	r3, #1
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 8004d80:	70a3      	strb	r3, [r4, #2]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
      RGB_R_OFF;                                                                        //Turn the LED off.
 8004d84:	2201      	movs	r2, #1
 8004d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d8a:	4805      	ldr	r0, [pc, #20]	; (8004da0 <error_signal+0x74>)
 8004d8c:	f7fd f8c2 	bl	8001f14 <HAL_GPIO_WritePin>
      Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
 8004d90:	7863      	ldrb	r3, [r4, #1]
 8004d92:	3301      	adds	r3, #1
 8004d94:	7063      	strb	r3, [r4, #1]
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 8004d96:	2300      	movs	r3, #0
 8004d98:	e7f2      	b.n	8004d80 <error_signal+0x54>
 8004d9a:	bf00      	nop
 8004d9c:	200016dc 	.word	0x200016dc
 8004da0:	40010c00 	.word	0x40010c00

08004da4 <flight_mode_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the flight mode LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void flight_mode_signal(void) {
 8004da4:	b538      	push	{r3, r4, r5, lr}
  if (flight_mode_timer < millis()) {                                                      //If the error_timer value is smaller that the millis() function.
 8004da6:	f002 fd87 	bl	80078b8 <millis>
 8004daa:	4c17      	ldr	r4, [pc, #92]	; (8004e08 <flight_mode_signal+0x64>)
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	4298      	cmp	r0, r3
 8004db0:	d91d      	bls.n	8004dee <flight_mode_signal+0x4a>
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004db2:	f002 fd81 	bl	80078b8 <millis>
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004db6:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <flight_mode_signal+0x68>)
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004db8:	30fa      	adds	r0, #250	; 0xfa
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004dba:	785b      	ldrb	r3, [r3, #1]
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8004dbc:	6020      	str	r0, [r4, #0]
 8004dbe:	4c14      	ldr	r4, [pc, #80]	; (8004e10 <flight_mode_signal+0x6c>)
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8004dc0:	b13b      	cbz	r3, 8004dd2 <flight_mode_signal+0x2e>
 8004dc2:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <flight_mode_signal+0x70>)
 8004dc4:	7821      	ldrb	r1, [r4, #0]
 8004dc6:	7812      	ldrb	r2, [r2, #0]
 8004dc8:	3203      	adds	r2, #3
 8004dca:	4291      	cmp	r1, r2
 8004dcc:	bfc4      	itt	gt
 8004dce:	2200      	movgt	r2, #0
 8004dd0:	7022      	strbgt	r2, [r4, #0]
    if (flight_mode_counter < f.ARMED && flight_mode_led == 0 && f.ARMED > 0) {    //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8004dd2:	7822      	ldrb	r2, [r4, #0]
 8004dd4:	4d10      	ldr	r5, [pc, #64]	; (8004e18 <flight_mode_signal+0x74>)
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d20a      	bcs.n	8004df0 <flight_mode_signal+0x4c>
 8004dda:	782a      	ldrb	r2, [r5, #0]
 8004ddc:	b942      	cbnz	r2, 8004df0 <flight_mode_signal+0x4c>
 8004dde:	b13b      	cbz	r3, 8004df0 <flight_mode_signal+0x4c>
      RGB_R_ON;                                                                     //Turn the LED on.
 8004de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004de4:	480d      	ldr	r0, [pc, #52]	; (8004e1c <flight_mode_signal+0x78>)
 8004de6:	f7fd f895 	bl	8001f14 <HAL_GPIO_WritePin>
      flight_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8004dea:	2301      	movs	r3, #1
    }
    else {                                                                                 //If the error flash sequence isn't finisched (error_counter < error) and the LED is on.
      RGB_R_OFF;                                                                      //Turn the LED off.
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8004dec:	702b      	strb	r3, [r5, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
      RGB_R_OFF;                                                                      //Turn the LED off.
 8004df0:	2201      	movs	r2, #1
 8004df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004df6:	4809      	ldr	r0, [pc, #36]	; (8004e1c <flight_mode_signal+0x78>)
 8004df8:	f7fd f88c 	bl	8001f14 <HAL_GPIO_WritePin>
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8004dfc:	7823      	ldrb	r3, [r4, #0]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	7023      	strb	r3, [r4, #0]
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8004e02:	2300      	movs	r3, #0
 8004e04:	e7f2      	b.n	8004dec <flight_mode_signal+0x48>
 8004e06:	bf00      	nop
 8004e08:	20000e98 	.word	0x20000e98
 8004e0c:	200010b0 	.word	0x200010b0
 8004e10:	20000e95 	.word	0x20000e95
 8004e14:	20000e9c 	.word	0x20000e9c
 8004e18:	20000e94 	.word	0x20000e94
 8004e1c:	40010c00 	.word	0x40010c00

08004e20 <mixerInit>:
    { 4, 0, mixerQuadP },          // MULTITYPE_QUADP
    { 4, 0, mixerQuadX },          // MULTITYPE_QUADX
};

void mixerInit(void)
{
 8004e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e22:	2400      	movs	r4, #0
	int i;
    for (i = 0; i < 4; i++)
	  {
			#ifdef QUAD_X
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 8004e24:	4f05      	ldr	r7, [pc, #20]	; (8004e3c <mixerInit+0x1c>)
 8004e26:	4e06      	ldr	r6, [pc, #24]	; (8004e40 <mixerInit+0x20>)
 8004e28:	193d      	adds	r5, r7, r4
 8004e2a:	1933      	adds	r3, r6, r4
 8004e2c:	3410      	adds	r4, #16
    for (i = 0; i < 4; i++)
 8004e2e:	2c40      	cmp	r4, #64	; 0x40
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 8004e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e32:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for (i = 0; i < 4; i++)
 8004e36:	d1f7      	bne.n	8004e28 <mixerInit+0x8>
			#endif
			#ifdef QUAD_P
      currentMixer[i] = mixers[QuadP].motor[i];   //0 = QuadP, 1 = QuadX
			#endif
		}
}
 8004e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000ab4 	.word	0x20000ab4
 8004e40:	0800dbb8 	.word	0x0800dbb8

08004e44 <mixTable>:

void mixTable(void)
{
	uint8_t i = 0;
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 8004e44:	4b35      	ldr	r3, [pc, #212]	; (8004f1c <mixTable+0xd8>)
{
 8004e46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 8004e4a:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
{
 8004e4e:	b085      	sub	sp, #20
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 8004e50:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
 8004e54:	bfc4      	itt	gt
 8004e56:	f44f 62e1 	movgt.w	r2, #1800	; 0x708
 8004e5a:	f8a3 2056 	strhgt.w	r2, [r3, #86]	; 0x56
			for (i = 0; i < 4; i++){
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004e5e:	f9b3 9056 	ldrsh.w	r9, [r3, #86]	; 0x56
				
				if(motor[i]<0) motor[i] = 0;
 8004e62:	f04f 0a00 	mov.w	sl, #0
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004e66:	4648      	mov	r0, r9
 8004e68:	f7fb ff14 	bl	8000c94 <__aeabi_i2f>
				if(motor[i] > 2000) motor[i] = 2000;
	
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004e6c:	4b2c      	ldr	r3, [pc, #176]	; (8004f20 <mixTable+0xdc>)
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004e6e:	4683      	mov	fp, r0
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004e70:	785b      	ldrb	r3, [r3, #1]
				{
					motor[i] = 0;
					pid.output1[i] = 0;
 8004e72:	2700      	movs	r7, #0
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004e74:	9301      	str	r3, [sp, #4]
				if(motor[i] > 2000) motor[i] = 2000;
 8004e76:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e7a:	4d2a      	ldr	r5, [pc, #168]	; (8004f24 <mixTable+0xe0>)
 8004e7c:	4c2a      	ldr	r4, [pc, #168]	; (8004f28 <mixTable+0xe4>)
 8004e7e:	4e2b      	ldr	r6, [pc, #172]	; (8004f2c <mixTable+0xe8>)
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004e80:	f1a5 087c 	sub.w	r8, r5, #124	; 0x7c
 8004e84:	6861      	ldr	r1, [r4, #4]
 8004e86:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
 8004e8a:	9303      	str	r3, [sp, #12]
 8004e8c:	f7fb ff56 	bl	8000d3c <__aeabi_fmul>
 8004e90:	6821      	ldr	r1, [r4, #0]
 8004e92:	9002      	str	r0, [sp, #8]
 8004e94:	4658      	mov	r0, fp
 8004e96:	f7fb ff51 	bl	8000d3c <__aeabi_fmul>
 8004e9a:	9a02      	ldr	r2, [sp, #8]
 8004e9c:	4601      	mov	r1, r0
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f7fb fe44 	bl	8000b2c <__addsf3>
 8004ea4:	68a1      	ldr	r1, [r4, #8]
 8004ea6:	9002      	str	r0, [sp, #8]
 8004ea8:	f8d8 00ec 	ldr.w	r0, [r8, #236]	; 0xec
 8004eac:	f7fb ff46 	bl	8000d3c <__aeabi_fmul>
 8004eb0:	9a02      	ldr	r2, [sp, #8]
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7fb fe39 	bl	8000b2c <__addsf3>
 8004eba:	68e1      	ldr	r1, [r4, #12]
 8004ebc:	9002      	str	r0, [sp, #8]
 8004ebe:	f8d8 00f0 	ldr.w	r0, [r8, #240]	; 0xf0
 8004ec2:	f7fb ff3b 	bl	8000d3c <__aeabi_fmul>
 8004ec6:	9a02      	ldr	r2, [sp, #8]
 8004ec8:	4601      	mov	r1, r0
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f7fb fe2e 	bl	8000b2c <__addsf3>
 8004ed0:	f7fc f910 	bl	80010f4 <__aeabi_f2iz>
 8004ed4:	b200      	sxth	r0, r0
				if(motor[i]<0) motor[i] = 0;
 8004ed6:	2800      	cmp	r0, #0
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8004ed8:	bfac      	ite	ge
 8004eda:	8030      	strhge	r0, [r6, #0]
				if(motor[i]<0) motor[i] = 0;
 8004edc:	f8a6 a000 	strhlt.w	sl, [r6]
				if(motor[i] > 2000) motor[i] = 2000;
 8004ee0:	f9b6 2000 	ldrsh.w	r2, [r6]
				if(motor[i]<0) motor[i] = 0;
 8004ee4:	9b03      	ldr	r3, [sp, #12]
				if(motor[i] > 2000) motor[i] = 2000;
 8004ee6:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8004eea:	bfc8      	it	gt
 8004eec:	8033      	strhgt	r3, [r6, #0]
				if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0)
 8004eee:	f1b9 0fc7 	cmp.w	r9, #199	; 0xc7
 8004ef2:	dd01      	ble.n	8004ef8 <mixTable+0xb4>
 8004ef4:	9a01      	ldr	r2, [sp, #4]
 8004ef6:	b932      	cbnz	r2, 8004f06 <mixTable+0xc2>
					motor[i] = 0;
 8004ef8:	f8a6 a000 	strh.w	sl, [r6]
					pid.output1[i] = 0;
 8004efc:	662f      	str	r7, [r5, #96]	; 0x60
					pid.output2[i] = 0;
 8004efe:	66ef      	str	r7, [r5, #108]	; 0x6c
					pid.Iterm[i] = 0;
 8004f00:	602f      	str	r7, [r5, #0]
					pid.Iterm1[i] = 0;
 8004f02:	60ef      	str	r7, [r5, #12]
					pid.Iterm2[i] = 0;
 8004f04:	61af      	str	r7, [r5, #24]
			for (i = 0; i < 4; i++){
 8004f06:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <mixTable+0xec>)
 8004f08:	3410      	adds	r4, #16
 8004f0a:	42a2      	cmp	r2, r4
 8004f0c:	f106 0602 	add.w	r6, r6, #2
 8004f10:	f105 0504 	add.w	r5, r5, #4
 8004f14:	d1b6      	bne.n	8004e84 <mixTable+0x40>
				}
			}
}
 8004f16:	b005      	add	sp, #20
 8004f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1c:	20001128 	.word	0x20001128
 8004f20:	200010b0 	.word	0x200010b0
 8004f24:	20000f24 	.word	0x20000f24
 8004f28:	20000ab4 	.word	0x20000ab4
 8004f2c:	20000e9e 	.word	0x20000e9e
 8004f30:	20000af4 	.word	0x20000af4

08004f34 <PIDControlInit>:

	pid->ki[ROLL]  = 5.0f;
	pid->ki[PITCH] = pid->ki[ROLL];
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5

	pid->kd[ROLL]  = 4.0f;
 8004f34:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004f38:	64c2      	str	r2, [r0, #76]	; 0x4c
	pid->kd[PITCH] = pid->kd[ROLL];
 8004f3a:	6502      	str	r2, [r0, #80]	; 0x50
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
///////////////////////////////////	
	pid->kp1[ROLL] = 1.0f;
 8004f3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	pid->ts = 0.004f;
 8004f40:	4b31      	ldr	r3, [pc, #196]	; (8005008 <PIDControlInit+0xd4>)
	pid->kp1[ROLL] = 1.0f;
 8004f42:	6102      	str	r2, [r0, #16]
	pid->ts = 0.004f;
 8004f44:	6003      	str	r3, [r0, #0]
	pid->kp[ROLL]  = 15.0f;
 8004f46:	4b31      	ldr	r3, [pc, #196]	; (800500c <PIDControlInit+0xd8>)
	pid->kp1[PITCH] = 1.0f;
 8004f48:	6142      	str	r2, [r0, #20]
	pid->kp[ROLL]  = 15.0f;
 8004f4a:	6043      	str	r3, [r0, #4]
	pid->kp[PITCH] = pid->kp[ROLL];
 8004f4c:	6083      	str	r3, [r0, #8]
	pid->ki[ROLL]  = 5.0f;
 8004f4e:	4b30      	ldr	r3, [pc, #192]	; (8005010 <PIDControlInit+0xdc>)
	pid->kp1[YAW] = 1.0f;
 8004f50:	6182      	str	r2, [r0, #24]
	pid->ki[ROLL]  = 5.0f;
 8004f52:	6283      	str	r3, [r0, #40]	; 0x28
	pid->ki[PITCH] = pid->ki[ROLL];
 8004f54:	62c3      	str	r3, [r0, #44]	; 0x2c
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5
 8004f56:	6303      	str	r3, [r0, #48]	; 0x30

	pid->ki1[ROLL] = 2.0f;
	pid->ki1[PITCH] = 2.0f;
	pid->ki1[YAW] = 2.0f;
/////////////////////////////////
	pid->kp2[ROLL] = 5.0f;
 8004f58:	61c3      	str	r3, [r0, #28]
	pid->kp2[PITCH] = 5.0f;
 8004f5a:	6203      	str	r3, [r0, #32]
	pid->kp2[YAW] = 5.0f;
 8004f5c:	6243      	str	r3, [r0, #36]	; 0x24

	pid->kd2[ROLL] = 3.0f;
	pid->kd2[PITCH] = 3.0f;
	pid->kd2[YAW] = 3.0f;
////////////////////////////////////////
  pid->i1_limit[ROLL] = 5.0f;
 8004f5e:	6643      	str	r3, [r0, #100]	; 0x64
	pid->i1_limit[PITCH] = 5.0f;
 8004f60:	6683      	str	r3, [r0, #104]	; 0x68
	pid->i1_limit[YAW] = 10.0f;

  pid->i2_limit[ROLL] = 500.0f;
 8004f62:	4b2c      	ldr	r3, [pc, #176]	; (8005014 <PIDControlInit+0xe0>)
	pid->ki1[ROLL] = 2.0f;
 8004f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  pid->i2_limit[ROLL] = 500.0f;
 8004f68:	6703      	str	r3, [r0, #112]	; 0x70
	pid->i2_limit[PITCH] = 500.0f;
 8004f6a:	6743      	str	r3, [r0, #116]	; 0x74
	pid->i2_limit[YAW] = 500.0f;
 8004f6c:	6783      	str	r3, [r0, #120]	; 0x78

	pid->Iterm[ROLL] = 0.0f ;
 8004f6e:	2300      	movs	r3, #0
{
 8004f70:	b510      	push	{r4, lr}
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 8004f72:	4929      	ldr	r1, [pc, #164]	; (8005018 <PIDControlInit+0xe4>)
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 8004f74:	4c29      	ldr	r4, [pc, #164]	; (800501c <PIDControlInit+0xe8>)
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 8004f76:	6541      	str	r1, [r0, #84]	; 0x54
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 8004f78:	60c4      	str	r4, [r0, #12]
	pid->ki1[ROLL] = 2.0f;
 8004f7a:	6342      	str	r2, [r0, #52]	; 0x34
	pid->ki1[PITCH] = 2.0f;
 8004f7c:	6382      	str	r2, [r0, #56]	; 0x38
	pid->ki1[YAW] = 2.0f;
 8004f7e:	63c2      	str	r2, [r0, #60]	; 0x3c
  pid->ki2[ROLL] = 2.0f;
 8004f80:	6402      	str	r2, [r0, #64]	; 0x40
	pid->ki2[PITCH] = 2.0f;
 8004f82:	6442      	str	r2, [r0, #68]	; 0x44
	pid->ki2[YAW] = 2.0f;
 8004f84:	6482      	str	r2, [r0, #72]	; 0x48
	pid->kd2[ROLL] = 3.0f;
 8004f86:	6581      	str	r1, [r0, #88]	; 0x58
	pid->kd2[PITCH] = 3.0f;
 8004f88:	65c1      	str	r1, [r0, #92]	; 0x5c
	pid->kd2[YAW] = 3.0f;
 8004f8a:	6601      	str	r1, [r0, #96]	; 0x60
	pid->i1_limit[YAW] = 10.0f;
 8004f8c:	66c4      	str	r4, [r0, #108]	; 0x6c
	pid->Iterm[ROLL] = 0.0f ;
 8004f8e:	67c3      	str	r3, [r0, #124]	; 0x7c
	pid->Iterm[PITCH] = 0.0f;
 8004f90:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	pid->Iterm[YAW] = 0.0f;
 8004f94:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

	pid->Iterm1[ROLL] = 0.0f ;
 8004f98:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	pid->Iterm1[PITCH] = 0.0f;
 8004f9c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
	pid->Iterm1[YAW] = 0.0f;
 8004fa0:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90

	pid->Iterm2[ROLL] = 0.0f ;
 8004fa4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	pid->Iterm2[PITCH] = 0.0f;
 8004fa8:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	pid->Iterm2[YAW] = 0.0f;
 8004fac:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c

	pid->dInput[ROLL] = 0.0f ;
 8004fb0:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	pid->dInput[PITCH] = 0.0f;
 8004fb4:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	pid->dInput[YAW] = 0.0f;
 8004fb8:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8

	pid->error[ROLL] = 0.0f ;
 8004fbc:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
	pid->error[PITCH] = 0.0f;
 8004fc0:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	pid->error[YAW] = 0.0f;
 8004fc4:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	pid->pre_error[ROLL] = 0.0f ;
 8004fc8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	pid->pre_error[PITCH] = 0.0f;
 8004fcc:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	pid->pre_error[YAW] = 0.0f;
 8004fd0:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0

	pid->pre_deriv[ROLL] = 0.0f ;
 8004fd4:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	pid->pre_deriv[PITCH] = 0.0f;
 8004fd8:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	pid->pre_deriv[YAW] = 0.0f;
 8004fdc:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc

	pid->lastInput[ROLL] = 0.0f ;
 8004fe0:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	pid->lastInput[PITCH] = 0.0f;
 8004fe4:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	pid->lastInput[YAW] = 0.0f;
 8004fe8:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	pid->output1[ROLL] = 0.0f ;
 8004fec:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	pid->output1[PITCH] = 0.0f;
 8004ff0:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
	pid->output1[YAW] = 0.0f;
 8004ff4:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

	pid->output2[ROLL] = 0.0f ;
 8004ff8:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
	pid->output2[PITCH] = 0.0f;
 8004ffc:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
	pid->output2[YAW] = 0.0f;
 8005000:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 8005004:	bd10      	pop	{r4, pc}
 8005006:	bf00      	nop
 8005008:	3b83126f 	.word	0x3b83126f
 800500c:	41700000 	.word	0x41700000
 8005010:	40a00000 	.word	0x40a00000
 8005014:	43fa0000 	.word	0x43fa0000
 8005018:	40400000 	.word	0x40400000
 800501c:	41200000 	.word	0x41200000

08005020 <Control>:
}

void Control(void)
{
 8005020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int axis;
	float error, deriv;
	dt_recip = 1/pid.ts;
 8005024:	4cba      	ldr	r4, [pc, #744]	; (8005310 <Control+0x2f0>)
 8005026:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800502a:	6826      	ldr	r6, [r4, #0]
		if(pid.output2[axis] < -OUT_MAX) pid.output2[axis] = -OUT_MAX;
		}
		#endif
		
#ifdef PID_NORMAL
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 800502c:	f8df b304 	ldr.w	fp, [pc, #772]	; 8005334 <Control+0x314>
	dt_recip = 1/pid.ts;
 8005030:	4631      	mov	r1, r6
 8005032:	f7fb ff37 	bl	8000ea4 <__aeabi_fdiv>
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 8005036:	4db7      	ldr	r5, [pc, #732]	; (8005314 <Control+0x2f4>)
	dt_recip = 1/pid.ts;
 8005038:	4bb7      	ldr	r3, [pc, #732]	; (8005318 <Control+0x2f8>)
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 800503a:	f8db 9078 	ldr.w	r9, [fp, #120]	; 0x78
	dt_recip = 1/pid.ts;
 800503e:	6018      	str	r0, [r3, #0]
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 8005040:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
 8005044:	f7fb fe26 	bl	8000c94 <__aeabi_i2f>
 8005048:	4649      	mov	r1, r9
 800504a:	f7fb fd6d 	bl	8000b28 <__aeabi_fsub>
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 800504e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	  pid.error[ROLL] = RC.rcCommand[ROLL] - imu.Roll;
 8005050:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
 8005054:	4607      	mov	r7, r0
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 8005056:	f7fb fe71 	bl	8000d3c <__aeabi_fmul>
 800505a:	4631      	mov	r1, r6
 800505c:	f7fb fe6e 	bl	8000d3c <__aeabi_fmul>
 8005060:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005062:	f7fb fd63 	bl	8000b2c <__addsf3>
	  if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 8005066:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8005320 <Control+0x300>
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 800506a:	4682      	mov	sl, r0
	  if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 800506c:	4641      	mov	r1, r8
 800506e:	f7fc f821 	bl	80010b4 <__aeabi_fcmpgt>
 8005072:	f8cd b000 	str.w	fp, [sp]
 8005076:	2800      	cmp	r0, #0
 8005078:	f000 808d 	beq.w	8005196 <Control+0x176>
 800507c:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
	  pid.dInput[ROLL] = (imu.Roll - pid.lastInput[ROLL])  / pid.ts;
 8005080:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8005084:	4648      	mov	r0, r9
 8005086:	f7fb fd4f 	bl	8000b28 <__aeabi_fsub>
 800508a:	4631      	mov	r1, r6
 800508c:	f7fb ff0a 	bl	8000ea4 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8005090:	6861      	ldr	r1, [r4, #4]
	  pid.dInput[ROLL] = (imu.Roll - pid.lastInput[ROLL])  / pid.ts;
 8005092:	4682      	mov	sl, r0
 8005094:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8005098:	4638      	mov	r0, r7
 800509a:	f7fb fe4f 	bl	8000d3c <__aeabi_fmul>
 800509e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80050a0:	f7fb fd44 	bl	8000b2c <__addsf3>
 80050a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80050a6:	4607      	mov	r7, r0
 80050a8:	4650      	mov	r0, sl
 80050aa:	f7fb fe47 	bl	8000d3c <__aeabi_fmul>
 80050ae:	4601      	mov	r1, r0
 80050b0:	4638      	mov	r0, r7
 80050b2:	f7fb fd39 	bl	8000b28 <__aeabi_fsub>

	  if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 80050b6:	4f99      	ldr	r7, [pc, #612]	; (800531c <Control+0x2fc>)
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 80050b8:	4682      	mov	sl, r0
	  if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 80050ba:	4639      	mov	r1, r7
 80050bc:	f7fb fffa 	bl	80010b4 <__aeabi_fcmpgt>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d075      	beq.n	80051b0 <Control+0x190>
 80050c4:	f8c4 70e8 	str.w	r7, [r4, #232]	; 0xe8
	  pid.lastInput[ROLL] = imu.Roll;

/////////////////////////////////////////////////////////////////////////////////////////////////

	  /*Compute all the working error variables*/
	  pid.error[PITCH] = RC.rcCommand[PITCH] - imu.Pitch;
 80050c8:	9b00      	ldr	r3, [sp, #0]
	  pid.lastInput[ROLL] = imu.Roll;
 80050ca:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	  pid.error[PITCH] = RC.rcCommand[PITCH] - imu.Pitch;
 80050ce:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 80050d2:	f9b5 0052 	ldrsh.w	r0, [r5, #82]	; 0x52
 80050d6:	f7fb fddd 	bl	8000c94 <__aeabi_i2f>
 80050da:	4649      	mov	r1, r9
 80050dc:	f7fb fd24 	bl	8000b28 <__aeabi_fsub>
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 80050e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	  pid.error[PITCH] = RC.rcCommand[PITCH] - imu.Pitch;
 80050e2:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
 80050e6:	4682      	mov	sl, r0
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 80050e8:	f7fb fe28 	bl	8000d3c <__aeabi_fmul>
 80050ec:	4631      	mov	r1, r6
 80050ee:	f7fb fe25 	bl	8000d3c <__aeabi_fmul>
 80050f2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80050f6:	f7fb fd19 	bl	8000b2c <__addsf3>
	  if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 80050fa:	4989      	ldr	r1, [pc, #548]	; (8005320 <Control+0x300>)
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 80050fc:	4683      	mov	fp, r0
	  if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 80050fe:	f7fb ffd9 	bl	80010b4 <__aeabi_fcmpgt>
 8005102:	2800      	cmp	r0, #0
 8005104:	d061      	beq.n	80051ca <Control+0x1aa>
 8005106:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
	  pid.dInput[PITCH] = (imu.Pitch - pid.lastInput[PITCH]) / pid.ts;
 800510a:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
 800510e:	4648      	mov	r0, r9
 8005110:	f7fb fd0a 	bl	8000b28 <__aeabi_fsub>
 8005114:	4631      	mov	r1, r6
 8005116:	f7fb fec5 	bl	8000ea4 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 800511a:	68a1      	ldr	r1, [r4, #8]
	  pid.dInput[PITCH] = (imu.Pitch - pid.lastInput[PITCH]) / pid.ts;
 800511c:	4683      	mov	fp, r0
 800511e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 8005122:	4650      	mov	r0, sl
 8005124:	f7fb fe0a 	bl	8000d3c <__aeabi_fmul>
 8005128:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800512c:	f7fb fcfe 	bl	8000b2c <__addsf3>
 8005130:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005132:	4682      	mov	sl, r0
 8005134:	4658      	mov	r0, fp
 8005136:	f7fb fe01 	bl	8000d3c <__aeabi_fmul>
 800513a:	4601      	mov	r1, r0
 800513c:	4650      	mov	r0, sl
 800513e:	f7fb fcf3 	bl	8000b28 <__aeabi_fsub>

	  if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 8005142:	4976      	ldr	r1, [pc, #472]	; (800531c <Control+0x2fc>)
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 8005144:	4682      	mov	sl, r0
	  if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 8005146:	f7fb ffb5 	bl	80010b4 <__aeabi_fcmpgt>
 800514a:	2800      	cmp	r0, #0
 800514c:	d04b      	beq.n	80051e6 <Control+0x1c6>
 800514e:	f8c4 70ec 	str.w	r7, [r4, #236]	; 0xec
	  pid.lastInput[PITCH] = imu.Pitch;

//////////////////////////////////////////////////////////////////////////////////////////////////

	  /*Compute all the working error variables*/
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 8005152:	9b00      	ldr	r3, [sp, #0]
	  pid.lastInput[PITCH] = imu.Pitch;
 8005154:	f8c4 90d4 	str.w	r9, [r4, #212]	; 0xd4
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 8005158:	f8d3 9084 	ldr.w	r9, [r3, #132]	; 0x84
 800515c:	f9b5 0054 	ldrsh.w	r0, [r5, #84]	; 0x54
 8005160:	f7fb fd98 	bl	8000c94 <__aeabi_i2f>
 8005164:	4649      	mov	r1, r9
 8005166:	f7fb fcdf 	bl	8000b28 <__aeabi_fsub>
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 800516a:	6b21      	ldr	r1, [r4, #48]	; 0x30
	  pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroYaw;//imu.Yaw
 800516c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 8005170:	4682      	mov	sl, r0
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 8005172:	f7fb fde3 	bl	8000d3c <__aeabi_fmul>
 8005176:	4631      	mov	r1, r6
 8005178:	f7fb fde0 	bl	8000d3c <__aeabi_fmul>
 800517c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005180:	f7fb fcd4 	bl	8000b2c <__addsf3>
	  if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 8005184:	4966      	ldr	r1, [pc, #408]	; (8005320 <Control+0x300>)
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 8005186:	4683      	mov	fp, r0
	  if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 8005188:	f7fb ff94 	bl	80010b4 <__aeabi_fcmpgt>
 800518c:	2800      	cmp	r0, #0
 800518e:	d037      	beq.n	8005200 <Control+0x1e0>
	  else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 8005190:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
 8005194:	e03e      	b.n	8005214 <Control+0x1f4>
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 8005196:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8005324 <Control+0x304>
 800519a:	4650      	mov	r0, sl
 800519c:	4659      	mov	r1, fp
 800519e:	f7fb ff6b 	bl	8001078 <__aeabi_fcmplt>
 80051a2:	b910      	cbnz	r0, 80051aa <Control+0x18a>
	  pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 80051a4:	f8c4 a07c 	str.w	sl, [r4, #124]	; 0x7c
 80051a8:	e76a      	b.n	8005080 <Control+0x60>
	  else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 80051aa:	f8c4 b07c 	str.w	fp, [r4, #124]	; 0x7c
 80051ae:	e767      	b.n	8005080 <Control+0x60>
	  else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 80051b0:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8005330 <Control+0x310>
 80051b4:	4650      	mov	r0, sl
 80051b6:	4659      	mov	r1, fp
 80051b8:	f7fb ff5e 	bl	8001078 <__aeabi_fcmplt>
 80051bc:	b910      	cbnz	r0, 80051c4 <Control+0x1a4>
	  pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 80051be:	f8c4 a0e8 	str.w	sl, [r4, #232]	; 0xe8
 80051c2:	e781      	b.n	80050c8 <Control+0xa8>
	  else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 80051c4:	f8c4 b0e8 	str.w	fp, [r4, #232]	; 0xe8
 80051c8:	e77e      	b.n	80050c8 <Control+0xa8>
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 80051ca:	4b56      	ldr	r3, [pc, #344]	; (8005324 <Control+0x304>)
 80051cc:	4658      	mov	r0, fp
 80051ce:	4619      	mov	r1, r3
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	f7fb ff51 	bl	8001078 <__aeabi_fcmplt>
 80051d6:	9b01      	ldr	r3, [sp, #4]
 80051d8:	b910      	cbnz	r0, 80051e0 <Control+0x1c0>
	  pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 80051da:	f8c4 b080 	str.w	fp, [r4, #128]	; 0x80
 80051de:	e794      	b.n	800510a <Control+0xea>
	  else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 80051e0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80051e4:	e791      	b.n	800510a <Control+0xea>
	  else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 80051e6:	f8df b148 	ldr.w	fp, [pc, #328]	; 8005330 <Control+0x310>
 80051ea:	4650      	mov	r0, sl
 80051ec:	4659      	mov	r1, fp
 80051ee:	f7fb ff43 	bl	8001078 <__aeabi_fcmplt>
 80051f2:	b910      	cbnz	r0, 80051fa <Control+0x1da>
	  pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 80051f4:	f8c4 a0ec 	str.w	sl, [r4, #236]	; 0xec
 80051f8:	e7ab      	b.n	8005152 <Control+0x132>
	  else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 80051fa:	f8c4 b0ec 	str.w	fp, [r4, #236]	; 0xec
 80051fe:	e7a8      	b.n	8005152 <Control+0x132>
	  else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 8005200:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8005324 <Control+0x304>
 8005204:	4658      	mov	r0, fp
 8005206:	4641      	mov	r1, r8
 8005208:	f7fb ff36 	bl	8001078 <__aeabi_fcmplt>
 800520c:	2800      	cmp	r0, #0
 800520e:	d1bf      	bne.n	8005190 <Control+0x170>
	  pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 8005210:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
	  pid.dInput[YAW] = (imu.gyroYaw - pid.lastInput[YAW]) / pid.ts; //imu.Yaw
 8005214:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 8005218:	4648      	mov	r0, r9
 800521a:	f7fb fc85 	bl	8000b28 <__aeabi_fsub>
 800521e:	4631      	mov	r1, r6
 8005220:	f7fb fe40 	bl	8000ea4 <__aeabi_fdiv>

	  /*Compute PID Output*/
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 8005224:	68e1      	ldr	r1, [r4, #12]
	  pid.dInput[YAW] = (imu.gyroYaw - pid.lastInput[YAW]) / pid.ts; //imu.Yaw
 8005226:	4606      	mov	r6, r0
 8005228:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 800522c:	4650      	mov	r0, sl
 800522e:	f7fb fd85 	bl	8000d3c <__aeabi_fmul>
 8005232:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005236:	f7fb fc79 	bl	8000b2c <__addsf3>
 800523a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800523c:	4680      	mov	r8, r0
 800523e:	4630      	mov	r0, r6
 8005240:	f7fb fd7c 	bl	8000d3c <__aeabi_fmul>
 8005244:	4601      	mov	r1, r0
 8005246:	4640      	mov	r0, r8
 8005248:	f7fb fc6e 	bl	8000b28 <__aeabi_fsub>

	  if(pid.output2[YAW] > OUT_MAX) pid.output2[YAW] = OUT_MAX;
 800524c:	4933      	ldr	r1, [pc, #204]	; (800531c <Control+0x2fc>)
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 800524e:	4680      	mov	r8, r0
	  if(pid.output2[YAW] > OUT_MAX) pid.output2[YAW] = OUT_MAX;
 8005250:	f7fb ff30 	bl	80010b4 <__aeabi_fcmpgt>
 8005254:	b350      	cbz	r0, 80052ac <Control+0x28c>
 8005256:	f8c4 70f0 	str.w	r7, [r4, #240]	; 0xf0
	  else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;

	  /*Remember some variables for next time*/
	  pid.lastInput[YAW] = imu.gyroYaw;//imu.Yaw
		#endif
	  if(f.Tuning_MODE == 1){
 800525a:	4e33      	ldr	r6, [pc, #204]	; (8005328 <Control+0x308>)
	  pid.lastInput[YAW] = imu.gyroYaw;//imu.Yaw
 800525c:	f8c4 90d8 	str.w	r9, [r4, #216]	; 0xd8
	  if(f.Tuning_MODE == 1){
 8005260:	78b7      	ldrb	r7, [r6, #2]
 8005262:	2f01      	cmp	r7, #1
 8005264:	f040 8185 	bne.w	8005572 <Control+0x552>
	    RGB_G_TOGGLE;
 8005268:	4830      	ldr	r0, [pc, #192]	; (800532c <Control+0x30c>)
 800526a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800526e:	f7fc fe56 	bl	8001f1e <HAL_GPIO_TogglePin>
	    f.Write_MODE = 1;
	    if(RC.rcCommand[ROLL]  >  10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 8005272:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
	    f.Write_MODE = 1;
 8005276:	70f7      	strb	r7, [r6, #3]
	    if(RC.rcCommand[ROLL]  >  10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 8005278:	280a      	cmp	r0, #10
 800527a:	dd23      	ble.n	80052c4 <Control+0x2a4>
	    if(RC.rcCommand[ROLL]  < -10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 800527c:	f7fb fd0a 	bl	8000c94 <__aeabi_i2f>
 8005280:	f7fb f8d2 	bl	8000428 <__aeabi_f2d>
 8005284:	a320      	add	r3, pc, #128	; (adr r3, 8005308 <Control+0x2e8>)
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f7fb f921 	bl	80004d0 <__aeabi_dmul>
 800528e:	4680      	mov	r8, r0
 8005290:	6860      	ldr	r0, [r4, #4]
 8005292:	4689      	mov	r9, r1
 8005294:	f7fb f8c8 	bl	8000428 <__aeabi_f2d>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4640      	mov	r0, r8
 800529e:	4649      	mov	r1, r9
 80052a0:	f7fa ff64 	bl	800016c <__adddf3>
 80052a4:	f7fb fbec 	bl	8000a80 <__aeabi_d2f>
 80052a8:	6060      	str	r0, [r4, #4]
 80052aa:	e00e      	b.n	80052ca <Control+0x2aa>
	  else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;
 80052ac:	4e20      	ldr	r6, [pc, #128]	; (8005330 <Control+0x310>)
 80052ae:	4640      	mov	r0, r8
 80052b0:	4631      	mov	r1, r6
 80052b2:	f7fb fee1 	bl	8001078 <__aeabi_fcmplt>
 80052b6:	b910      	cbnz	r0, 80052be <Control+0x29e>
	  pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 80052b8:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
 80052bc:	e7cd      	b.n	800525a <Control+0x23a>
	  else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;
 80052be:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
 80052c2:	e7ca      	b.n	800525a <Control+0x23a>
	    if(RC.rcCommand[ROLL]  < -10) pid.kp[ROLL] += (float)RC.rcCommand[ROLL]  * 0.0005;
 80052c4:	f110 0f0a 	cmn.w	r0, #10
 80052c8:	dbd8      	blt.n	800527c <Control+0x25c>
	    if(RC.rcCommand[PITCH] >  10) pid.ki[ROLL] += (float)RC.rcCommand[PITCH] * 0.0005;
 80052ca:	f9b5 0052 	ldrsh.w	r0, [r5, #82]	; 0x52
 80052ce:	280a      	cmp	r0, #10
 80052d0:	dd32      	ble.n	8005338 <Control+0x318>
	    if(RC.rcCommand[PITCH] < -10) pid.ki[ROLL] += (float)RC.rcCommand[PITCH] * 0.0005;
 80052d2:	f7fb fcdf 	bl	8000c94 <__aeabi_i2f>
 80052d6:	f7fb f8a7 	bl	8000428 <__aeabi_f2d>
 80052da:	a30b      	add	r3, pc, #44	; (adr r3, 8005308 <Control+0x2e8>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	f7fb f8f6 	bl	80004d0 <__aeabi_dmul>
 80052e4:	4680      	mov	r8, r0
 80052e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80052e8:	4689      	mov	r9, r1
 80052ea:	f7fb f89d 	bl	8000428 <__aeabi_f2d>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4640      	mov	r0, r8
 80052f4:	4649      	mov	r1, r9
 80052f6:	f7fa ff39 	bl	800016c <__adddf3>
 80052fa:	f7fb fbc1 	bl	8000a80 <__aeabi_d2f>
 80052fe:	62a0      	str	r0, [r4, #40]	; 0x28
 8005300:	e01d      	b.n	800533e <Control+0x31e>
 8005302:	bf00      	nop
 8005304:	f3af 8000 	nop.w
 8005308:	d2f1a9fc 	.word	0xd2f1a9fc
 800530c:	3f40624d 	.word	0x3f40624d
 8005310:	20000ea8 	.word	0x20000ea8
 8005314:	20001128 	.word	0x20001128
 8005318:	20000f9c 	.word	0x20000f9c
 800531c:	44480000 	.word	0x44480000
 8005320:	43480000 	.word	0x43480000
 8005324:	c3480000 	.word	0xc3480000
 8005328:	200010b0 	.word	0x200010b0
 800532c:	40010c00 	.word	0x40010c00
 8005330:	c4480000 	.word	0xc4480000
 8005334:	20001328 	.word	0x20001328
 8005338:	f110 0f0a 	cmn.w	r0, #10
 800533c:	dbc9      	blt.n	80052d2 <Control+0x2b2>
	    if(RC.rcCommand[YAW]   >  10) pid.kd[ROLL] += (float)RC.rcCommand[YAW]   * 0.00005;
 800533e:	f9b5 0054 	ldrsh.w	r0, [r5, #84]	; 0x54
 8005342:	280a      	cmp	r0, #10
 8005344:	dd17      	ble.n	8005376 <Control+0x356>
	    if(RC.rcCommand[YAW]   < -10) pid.kd[ROLL] += (float)RC.rcCommand[YAW]   * 0.00005;
 8005346:	f7fb fca5 	bl	8000c94 <__aeabi_i2f>
 800534a:	f7fb f86d 	bl	8000428 <__aeabi_f2d>
 800534e:	a3c0      	add	r3, pc, #768	; (adr r3, 8005650 <Control+0x630>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fb f8bc 	bl	80004d0 <__aeabi_dmul>
 8005358:	4680      	mov	r8, r0
 800535a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800535c:	4689      	mov	r9, r1
 800535e:	f7fb f863 	bl	8000428 <__aeabi_f2d>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4640      	mov	r0, r8
 8005368:	4649      	mov	r1, r9
 800536a:	f7fa feff 	bl	800016c <__adddf3>
 800536e:	f7fb fb87 	bl	8000a80 <__aeabi_d2f>
 8005372:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005374:	e002      	b.n	800537c <Control+0x35c>
 8005376:	f110 0f0a 	cmn.w	r0, #10
 800537a:	dbe4      	blt.n	8005346 <Control+0x326>

	    pid.kp[PITCH] = pid.kp[ROLL];
 800537c:	6863      	ldr	r3, [r4, #4]
 800537e:	60a3      	str	r3, [r4, #8]
	    pid.ki[PITCH] = pid.ki[ROLL];
 8005380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005382:	62e3      	str	r3, [r4, #44]	; 0x2c
	    pid.kd[PITCH] = pid.kd[ROLL];
 8005384:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005386:	6523      	str	r3, [r4, #80]	; 0x50
      if(RC.rcCommand[PITCH] >  10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
      if(RC.rcCommand[PITCH] < -10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
      if(RC.rcCommand[YAW]   >  10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
      if(RC.rcCommand[YAW]   < -10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
    }
	  if(f.Tuning_MODE == 0 && f.Write_MODE == 1){
 8005388:	78b5      	ldrb	r5, [r6, #2]
 800538a:	2d00      	cmp	r5, #0
 800538c:	f040 80ee 	bne.w	800556c <Control+0x54c>
 8005390:	78f7      	ldrb	r7, [r6, #3]
 8005392:	2f01      	cmp	r7, #1
 8005394:	f040 80ea 	bne.w	800556c <Control+0x54c>
	    f.Write_MODE = 0;
      RGB_G_OFF;
 8005398:	463a      	mov	r2, r7
 800539a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800539e:	48b0      	ldr	r0, [pc, #704]	; (8005660 <Control+0x640>)
	    f.Write_MODE = 0;
 80053a0:	70f5      	strb	r5, [r6, #3]
      RGB_G_OFF;
 80053a2:	f7fc fdb7 	bl	8001f14 <HAL_GPIO_WritePin>
	    RGB_R_OFF;
 80053a6:	463a      	mov	r2, r7
 80053a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053ac:	48ac      	ldr	r0, [pc, #688]	; (8005660 <Control+0x640>)
 80053ae:	f7fc fdb1 	bl	8001f14 <HAL_GPIO_WritePin>
	    pid.kp[ROLL] = ROUND(pid.kp[ROLL], 1);
 80053b2:	6860      	ldr	r0, [r4, #4]
 80053b4:	f7fb f838 	bl	8000428 <__aeabi_f2d>
 80053b8:	2200      	movs	r2, #0
 80053ba:	4baa      	ldr	r3, [pc, #680]	; (8005664 <Control+0x644>)
 80053bc:	f7fb f888 	bl	80004d0 <__aeabi_dmul>
 80053c0:	2200      	movs	r2, #0
 80053c2:	4ba9      	ldr	r3, [pc, #676]	; (8005668 <Control+0x648>)
 80053c4:	f7fa fed2 	bl	800016c <__adddf3>
 80053c8:	f006 fa3e 	bl	800b848 <floor>
 80053cc:	2200      	movs	r2, #0
 80053ce:	4ba5      	ldr	r3, [pc, #660]	; (8005664 <Control+0x644>)
 80053d0:	f7fb f9a8 	bl	8000724 <__aeabi_ddiv>
 80053d4:	f7fb fb54 	bl	8000a80 <__aeabi_d2f>
 80053d8:	6060      	str	r0, [r4, #4]
	    pid.ki[ROLL] = ROUND(pid.ki[ROLL], 1);
 80053da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80053dc:	f7fb f824 	bl	8000428 <__aeabi_f2d>
 80053e0:	2200      	movs	r2, #0
 80053e2:	4ba0      	ldr	r3, [pc, #640]	; (8005664 <Control+0x644>)
 80053e4:	f7fb f874 	bl	80004d0 <__aeabi_dmul>
 80053e8:	2200      	movs	r2, #0
 80053ea:	4b9f      	ldr	r3, [pc, #636]	; (8005668 <Control+0x648>)
 80053ec:	f7fa febe 	bl	800016c <__adddf3>
 80053f0:	f006 fa2a 	bl	800b848 <floor>
 80053f4:	2200      	movs	r2, #0
 80053f6:	4b9b      	ldr	r3, [pc, #620]	; (8005664 <Control+0x644>)
 80053f8:	f7fb f994 	bl	8000724 <__aeabi_ddiv>
 80053fc:	f7fb fb40 	bl	8000a80 <__aeabi_d2f>
 8005400:	62a0      	str	r0, [r4, #40]	; 0x28
	    pid.kd[ROLL] = ROUND(pid.kd[ROLL], 1);
 8005402:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005404:	f7fb f810 	bl	8000428 <__aeabi_f2d>
 8005408:	2200      	movs	r2, #0
 800540a:	4b96      	ldr	r3, [pc, #600]	; (8005664 <Control+0x644>)
 800540c:	f7fb f860 	bl	80004d0 <__aeabi_dmul>
 8005410:	2200      	movs	r2, #0
 8005412:	4b95      	ldr	r3, [pc, #596]	; (8005668 <Control+0x648>)
 8005414:	f7fa feaa 	bl	800016c <__adddf3>
 8005418:	f006 fa16 	bl	800b848 <floor>
 800541c:	2200      	movs	r2, #0
 800541e:	4b91      	ldr	r3, [pc, #580]	; (8005664 <Control+0x644>)
 8005420:	f7fb f980 	bl	8000724 <__aeabi_ddiv>
 8005424:	f7fb fb2c 	bl	8000a80 <__aeabi_d2f>
 8005428:	64e0      	str	r0, [r4, #76]	; 0x4c
      pid.kp[PITCH] = ROUND(pid.kp[PITCH], 1);
 800542a:	68a0      	ldr	r0, [r4, #8]
 800542c:	f7fa fffc 	bl	8000428 <__aeabi_f2d>
 8005430:	2200      	movs	r2, #0
 8005432:	4b8c      	ldr	r3, [pc, #560]	; (8005664 <Control+0x644>)
 8005434:	f7fb f84c 	bl	80004d0 <__aeabi_dmul>
 8005438:	2200      	movs	r2, #0
 800543a:	4b8b      	ldr	r3, [pc, #556]	; (8005668 <Control+0x648>)
 800543c:	f7fa fe96 	bl	800016c <__adddf3>
 8005440:	f006 fa02 	bl	800b848 <floor>
 8005444:	2200      	movs	r2, #0
 8005446:	4b87      	ldr	r3, [pc, #540]	; (8005664 <Control+0x644>)
 8005448:	f7fb f96c 	bl	8000724 <__aeabi_ddiv>
 800544c:	f7fb fb18 	bl	8000a80 <__aeabi_d2f>
 8005450:	60a0      	str	r0, [r4, #8]
      pid.ki[PITCH] = ROUND(pid.ki[PITCH], 1);
 8005452:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005454:	f7fa ffe8 	bl	8000428 <__aeabi_f2d>
 8005458:	2200      	movs	r2, #0
 800545a:	4b82      	ldr	r3, [pc, #520]	; (8005664 <Control+0x644>)
 800545c:	f7fb f838 	bl	80004d0 <__aeabi_dmul>
 8005460:	2200      	movs	r2, #0
 8005462:	4b81      	ldr	r3, [pc, #516]	; (8005668 <Control+0x648>)
 8005464:	f7fa fe82 	bl	800016c <__adddf3>
 8005468:	f006 f9ee 	bl	800b848 <floor>
 800546c:	2200      	movs	r2, #0
 800546e:	4b7d      	ldr	r3, [pc, #500]	; (8005664 <Control+0x644>)
 8005470:	f7fb f958 	bl	8000724 <__aeabi_ddiv>
 8005474:	f7fb fb04 	bl	8000a80 <__aeabi_d2f>
 8005478:	62e0      	str	r0, [r4, #44]	; 0x2c
      pid.kd[PITCH] = ROUND(pid.kd[PITCH], 1);
 800547a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800547c:	f7fa ffd4 	bl	8000428 <__aeabi_f2d>
 8005480:	2200      	movs	r2, #0
 8005482:	4b78      	ldr	r3, [pc, #480]	; (8005664 <Control+0x644>)
 8005484:	f7fb f824 	bl	80004d0 <__aeabi_dmul>
 8005488:	2200      	movs	r2, #0
 800548a:	4b77      	ldr	r3, [pc, #476]	; (8005668 <Control+0x648>)
 800548c:	f7fa fe6e 	bl	800016c <__adddf3>
 8005490:	f006 f9da 	bl	800b848 <floor>
 8005494:	2200      	movs	r2, #0
 8005496:	4b73      	ldr	r3, [pc, #460]	; (8005664 <Control+0x644>)
 8005498:	f7fb f944 	bl	8000724 <__aeabi_ddiv>
 800549c:	f7fb faf0 	bl	8000a80 <__aeabi_d2f>
 80054a0:	6520      	str	r0, [r4, #80]	; 0x50
	    pid.kp[YAW] = ROUND(pid.kp[YAW], 1);
 80054a2:	68e0      	ldr	r0, [r4, #12]
 80054a4:	f7fa ffc0 	bl	8000428 <__aeabi_f2d>
 80054a8:	2200      	movs	r2, #0
 80054aa:	4b6e      	ldr	r3, [pc, #440]	; (8005664 <Control+0x644>)
 80054ac:	f7fb f810 	bl	80004d0 <__aeabi_dmul>
 80054b0:	2200      	movs	r2, #0
 80054b2:	4b6d      	ldr	r3, [pc, #436]	; (8005668 <Control+0x648>)
 80054b4:	f7fa fe5a 	bl	800016c <__adddf3>
 80054b8:	f006 f9c6 	bl	800b848 <floor>
 80054bc:	2200      	movs	r2, #0
 80054be:	4b69      	ldr	r3, [pc, #420]	; (8005664 <Control+0x644>)
 80054c0:	f7fb f930 	bl	8000724 <__aeabi_ddiv>
 80054c4:	f7fb fadc 	bl	8000a80 <__aeabi_d2f>
 80054c8:	60e0      	str	r0, [r4, #12]
	    pid.ki[YAW] = ROUND(pid.ki[YAW], 1);
 80054ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80054cc:	f7fa ffac 	bl	8000428 <__aeabi_f2d>
 80054d0:	2200      	movs	r2, #0
 80054d2:	4b64      	ldr	r3, [pc, #400]	; (8005664 <Control+0x644>)
 80054d4:	f7fa fffc 	bl	80004d0 <__aeabi_dmul>
 80054d8:	2200      	movs	r2, #0
 80054da:	4b63      	ldr	r3, [pc, #396]	; (8005668 <Control+0x648>)
 80054dc:	f7fa fe46 	bl	800016c <__adddf3>
 80054e0:	f006 f9b2 	bl	800b848 <floor>
 80054e4:	2200      	movs	r2, #0
 80054e6:	4b5f      	ldr	r3, [pc, #380]	; (8005664 <Control+0x644>)
 80054e8:	f7fb f91c 	bl	8000724 <__aeabi_ddiv>
 80054ec:	f7fb fac8 	bl	8000a80 <__aeabi_d2f>
 80054f0:	6320      	str	r0, [r4, #48]	; 0x30
	    pid.kd[YAW] = ROUND(pid.kd[YAW], 1);
 80054f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054f4:	f7fa ff98 	bl	8000428 <__aeabi_f2d>
 80054f8:	2200      	movs	r2, #0
 80054fa:	4b5a      	ldr	r3, [pc, #360]	; (8005664 <Control+0x644>)
 80054fc:	f7fa ffe8 	bl	80004d0 <__aeabi_dmul>
 8005500:	2200      	movs	r2, #0
 8005502:	4b59      	ldr	r3, [pc, #356]	; (8005668 <Control+0x648>)
 8005504:	f7fa fe32 	bl	800016c <__adddf3>
 8005508:	f006 f99e 	bl	800b848 <floor>
 800550c:	2200      	movs	r2, #0
 800550e:	4b55      	ldr	r3, [pc, #340]	; (8005664 <Control+0x644>)
 8005510:	f7fb f908 	bl	8000724 <__aeabi_ddiv>
 8005514:	f7fb fab4 	bl	8000a80 <__aeabi_d2f>
 8005518:	4e54      	ldr	r6, [pc, #336]	; (800566c <Control+0x64c>)
 800551a:	6560      	str	r0, [r4, #84]	; 0x54

      for(int i = 0; i < 3; i++){
        writeFloat( 0+(4*i), pid.kp[i]);
 800551c:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8005520:	4628      	mov	r0, r5
 8005522:	f7fe fe4a 	bl	80041ba <writeFloat>
        writeFloat(12+(4*i), pid.ki[i]);
 8005526:	f105 000c 	add.w	r0, r5, #12
 800552a:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800552c:	f7fe fe45 	bl	80041ba <writeFloat>
        writeFloat(24+(4*i), pid.kd[i]);
 8005530:	f105 0018 	add.w	r0, r5, #24
 8005534:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8005536:	3504      	adds	r5, #4
 8005538:	f7fe fe3f 	bl	80041ba <writeFloat>
      for(int i = 0; i < 3; i++){
 800553c:	2d0c      	cmp	r5, #12
 800553e:	d1ed      	bne.n	800551c <Control+0x4fc>
 8005540:	240a      	movs	r4, #10
      }

	    for(int i = 0; i < 10; i++) {
	      HAL_Delay(25);
	      //BEEP_ON;
	      RGB_B_ON;
 8005542:	4d47      	ldr	r5, [pc, #284]	; (8005660 <Control+0x640>)
	      HAL_Delay(25);
 8005544:	2019      	movs	r0, #25
 8005546:	f7fb ffcb 	bl	80014e0 <HAL_Delay>
	      RGB_B_ON;
 800554a:	2200      	movs	r2, #0
 800554c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005550:	4628      	mov	r0, r5
 8005552:	f7fc fcdf 	bl	8001f14 <HAL_GPIO_WritePin>
	      HAL_Delay(25);
 8005556:	2019      	movs	r0, #25
 8005558:	f7fb ffc2 	bl	80014e0 <HAL_Delay>
	      //BEEP_OFF;
	      RGB_B_OFF;
 800555c:	2201      	movs	r2, #1
 800555e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005562:	4628      	mov	r0, r5
 8005564:	f7fc fcd6 	bl	8001f14 <HAL_GPIO_WritePin>
	    for(int i = 0; i < 10; i++) {
 8005568:	3c01      	subs	r4, #1
 800556a:	d1eb      	bne.n	8005544 <Control+0x524>
	    }
	  }
}
 800556c:	b003      	add	sp, #12
 800556e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  }else if(f.Tuning_MODE == 2){
 8005572:	2f02      	cmp	r7, #2
 8005574:	f47f af08 	bne.w	8005388 <Control+0x368>
	    RGB_G_OFF;
 8005578:	2201      	movs	r2, #1
 800557a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800557e:	4838      	ldr	r0, [pc, #224]	; (8005660 <Control+0x640>)
 8005580:	f7fc fcc8 	bl	8001f14 <HAL_GPIO_WritePin>
	    RGB_R_TOGGLE;
 8005584:	4836      	ldr	r0, [pc, #216]	; (8005660 <Control+0x640>)
 8005586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800558a:	f7fc fcc8 	bl	8001f1e <HAL_GPIO_TogglePin>
      if(RC.rcCommand[ROLL]  >  10) pid.kp[YAW] += (float)RC.rcCommand[ROLL]  * 0.0005;
 800558e:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
 8005592:	280a      	cmp	r0, #10
 8005594:	dd17      	ble.n	80055c6 <Control+0x5a6>
      if(RC.rcCommand[ROLL]  < -10) pid.kp[YAW] += (float)RC.rcCommand[ROLL]  * 0.0005;
 8005596:	f7fb fb7d 	bl	8000c94 <__aeabi_i2f>
 800559a:	f7fa ff45 	bl	8000428 <__aeabi_f2d>
 800559e:	a32e      	add	r3, pc, #184	; (adr r3, 8005658 <Control+0x638>)
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f7fa ff94 	bl	80004d0 <__aeabi_dmul>
 80055a8:	4680      	mov	r8, r0
 80055aa:	68e0      	ldr	r0, [r4, #12]
 80055ac:	4689      	mov	r9, r1
 80055ae:	f7fa ff3b 	bl	8000428 <__aeabi_f2d>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4640      	mov	r0, r8
 80055b8:	4649      	mov	r1, r9
 80055ba:	f7fa fdd7 	bl	800016c <__adddf3>
 80055be:	f7fb fa5f 	bl	8000a80 <__aeabi_d2f>
 80055c2:	60e0      	str	r0, [r4, #12]
 80055c4:	e002      	b.n	80055cc <Control+0x5ac>
 80055c6:	f110 0f0a 	cmn.w	r0, #10
 80055ca:	dbe4      	blt.n	8005596 <Control+0x576>
      if(RC.rcCommand[PITCH] >  10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
 80055cc:	f9b5 0052 	ldrsh.w	r0, [r5, #82]	; 0x52
 80055d0:	280a      	cmp	r0, #10
 80055d2:	dd17      	ble.n	8005604 <Control+0x5e4>
      if(RC.rcCommand[PITCH] < -10) pid.ki[YAW] += (float)RC.rcCommand[PITCH] * 0.0005;
 80055d4:	f7fb fb5e 	bl	8000c94 <__aeabi_i2f>
 80055d8:	f7fa ff26 	bl	8000428 <__aeabi_f2d>
 80055dc:	a31e      	add	r3, pc, #120	; (adr r3, 8005658 <Control+0x638>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f7fa ff75 	bl	80004d0 <__aeabi_dmul>
 80055e6:	4680      	mov	r8, r0
 80055e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80055ea:	4689      	mov	r9, r1
 80055ec:	f7fa ff1c 	bl	8000428 <__aeabi_f2d>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4640      	mov	r0, r8
 80055f6:	4649      	mov	r1, r9
 80055f8:	f7fa fdb8 	bl	800016c <__adddf3>
 80055fc:	f7fb fa40 	bl	8000a80 <__aeabi_d2f>
 8005600:	6320      	str	r0, [r4, #48]	; 0x30
 8005602:	e002      	b.n	800560a <Control+0x5ea>
 8005604:	f110 0f0a 	cmn.w	r0, #10
 8005608:	dbe4      	blt.n	80055d4 <Control+0x5b4>
      if(RC.rcCommand[YAW]   >  10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
 800560a:	f9b5 0054 	ldrsh.w	r0, [r5, #84]	; 0x54
 800560e:	280a      	cmp	r0, #10
 8005610:	dd17      	ble.n	8005642 <Control+0x622>
      if(RC.rcCommand[YAW]   < -10) pid.kd[YAW] += (float)RC.rcCommand[YAW]   * 0.00005;
 8005612:	f7fb fb3f 	bl	8000c94 <__aeabi_i2f>
 8005616:	f7fa ff07 	bl	8000428 <__aeabi_f2d>
 800561a:	a30d      	add	r3, pc, #52	; (adr r3, 8005650 <Control+0x630>)
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f7fa ff56 	bl	80004d0 <__aeabi_dmul>
 8005624:	4680      	mov	r8, r0
 8005626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005628:	4689      	mov	r9, r1
 800562a:	f7fa fefd 	bl	8000428 <__aeabi_f2d>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4640      	mov	r0, r8
 8005634:	4649      	mov	r1, r9
 8005636:	f7fa fd99 	bl	800016c <__adddf3>
 800563a:	f7fb fa21 	bl	8000a80 <__aeabi_d2f>
 800563e:	6560      	str	r0, [r4, #84]	; 0x54
 8005640:	e6a2      	b.n	8005388 <Control+0x368>
 8005642:	f110 0f0a 	cmn.w	r0, #10
 8005646:	dbe4      	blt.n	8005612 <Control+0x5f2>
 8005648:	e69e      	b.n	8005388 <Control+0x368>
 800564a:	bf00      	nop
 800564c:	f3af 8000 	nop.w
 8005650:	eb1c432d 	.word	0xeb1c432d
 8005654:	3f0a36e2 	.word	0x3f0a36e2
 8005658:	d2f1a9fc 	.word	0xd2f1a9fc
 800565c:	3f40624d 	.word	0x3f40624d
 8005660:	40010c00 	.word	0x40010c00
 8005664:	40240000 	.word	0x40240000
 8005668:	3fe00000 	.word	0x3fe00000
 800566c:	20000ea8 	.word	0x20000ea8

08005670 <PwmWriteMotor>:
//#include "PWM.h"
#include "Board.h"
void PwmWriteMotor(void)
{
  TIM4->CCR1 = motor[0];  // Actual : REAR_L
 8005670:	4a07      	ldr	r2, [pc, #28]	; (8005690 <PwmWriteMotor+0x20>)
 8005672:	4b08      	ldr	r3, [pc, #32]	; (8005694 <PwmWriteMotor+0x24>)
 8005674:	f9b2 1000 	ldrsh.w	r1, [r2]
 8005678:	6359      	str	r1, [r3, #52]	; 0x34
  TIM4->CCR2 = motor[1];  // Actual : FRONT_R
 800567a:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800567e:	6399      	str	r1, [r3, #56]	; 0x38
  TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8005680:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
  TIM4->CCR4 = motor[3];  // Actual : REAR_R
 8005684:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8005688:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIM4->CCR4 = motor[3];  // Actual : REAR_R
 800568a:	641a      	str	r2, [r3, #64]	; 0x40
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20000e9e 	.word	0x20000e9e
 8005694:	40000800 	.word	0x40000800

08005698 <Init_Buffer>:
	Queue_t *p_uart;
	p_uart = &Q_buffer[channel];
	Init_Buffer(p_uart);
}

bool Init_Buffer(Queue_t *Q){
 8005698:	2300      	movs	r3, #0
	bool result = true;
		uint8_t count;
	for(count = 0; count<MAX; count++){
		Q->Ring_Buffer[count]= 0;
 800569a:	461a      	mov	r2, r3
 800569c:	54c2      	strb	r2, [r0, r3]
 800569e:	3301      	adds	r3, #1
	for(count = 0; count<MAX; count++){
 80056a0:	2b80      	cmp	r3, #128	; 0x80
 80056a2:	d1fb      	bne.n	800569c <Init_Buffer+0x4>
	}
	Q->head = 0;
 80056a4:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
	Q->tail = 0;
 80056a8:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
	Q->size = MAX;
 80056ac:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
	Q->temp = 0;
 80056b0:	f880 2083 	strb.w	r2, [r0, #131]	; 0x83
	
	return result;
}
 80056b4:	2001      	movs	r0, #1
 80056b6:	4770      	bx	lr

080056b8 <QueueCreate>:
	Init_Buffer(p_uart);
 80056b8:	2288      	movs	r2, #136	; 0x88
 80056ba:	4b02      	ldr	r3, [pc, #8]	; (80056c4 <QueueCreate+0xc>)
 80056bc:	fb02 3000 	mla	r0, r2, r0, r3
 80056c0:	f7ff bfea 	b.w	8005698 <Init_Buffer>
 80056c4:	20000fa0 	.word	0x20000fa0

080056c8 <Q_full>:

uint8_t Q_full(Queue_t *Q){
	if((Q->head+1)%MAX == Q->tail){
 80056c8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80056cc:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
 80056d0:	3301      	adds	r3, #1
 80056d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	   return TRUE;
	} return FALSE;
}
 80056d6:	1a1b      	subs	r3, r3, r0
 80056d8:	4258      	negs	r0, r3
 80056da:	4158      	adcs	r0, r3
 80056dc:	4770      	bx	lr

080056de <write_Q>:
	if(Q->head == Q->tail){
		return TRUE;
	} return FALSE;
}

uint8_t write_Q(Queue_t *Q, char data){
 80056de:	b508      	push	{r3, lr}
 80056e0:	4602      	mov	r2, r0
	if(Q_full(Q)){
 80056e2:	f7ff fff1 	bl	80056c8 <Q_full>
 80056e6:	b960      	cbnz	r0, 8005702 <write_Q+0x24>
		return FALSE;
	}
  Q->Ring_Buffer[Q->head] = data;
 80056e8:	f892 3080 	ldrb.w	r3, [r2, #128]	; 0x80
  Q->head = (Q->head+1) % MAX;
	return TRUE;
 80056ec:	2001      	movs	r0, #1
  Q->Ring_Buffer[Q->head] = data;
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	54d1      	strb	r1, [r2, r3]
  Q->head = (Q->head+1) % MAX;
 80056f2:	f892 3080 	ldrb.w	r3, [r2, #128]	; 0x80
 80056f6:	3301      	adds	r3, #1
 80056f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056fc:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
	return TRUE;
 8005700:	bd08      	pop	{r3, pc}
		return FALSE;
 8005702:	2000      	movs	r0, #0
}
 8005704:	bd08      	pop	{r3, pc}
	...

08005708 <HAL_TIM_IC_CaptureCallback>:
rc RC;
rc RC_Raw;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM2){
 8005708:	7f03      	ldrb	r3, [r0, #28]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d11d      	bne.n	800574a <HAL_TIM_IC_CaptureCallback+0x42>
 800570e:	6803      	ldr	r3, [r0, #0]
 8005710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005714:	f040 8095 	bne.w	8005842 <HAL_TIM_IC_CaptureCallback+0x13a>
	        if(Ch1_PIN){  // Timer2 Ch1 pin(PA0) is High
 8005718:	4a52      	ldr	r2, [pc, #328]	; (8005864 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800571a:	6892      	ldr	r2, [r2, #8]
 800571c:	f012 0f01 	tst.w	r2, #1
 8005720:	4a51      	ldr	r2, [pc, #324]	; (8005868 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005722:	d008      	beq.n	8005736 <HAL_TIM_IC_CaptureCallback+0x2e>
	            TIM2->CCR1 = 0;
 8005724:	2100      	movs	r1, #0
 8005726:	6359      	str	r1, [r3, #52]	; 0x34
	            RC.capture_rise[0] = TIM2->CCR1; // read capture data
 8005728:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800572a:	6011      	str	r1, [r2, #0]

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3){
	        if(Ch3_PIN){  // Timer3 Ch1 pin(PA6) is High
	            TIM3->CCR1 = 0;
	        	RC.capture_rise[2] = TIM3->CCR1; // read capture data
	            Ch3_POL_FALLING;  // to falling edge
 800572c:	6a1a      	ldr	r2, [r3, #32]
 800572e:	f042 0202 	orr.w	r2, r2, #2
	            Ch6_POL_FALLING;  // to falling edge
	        }
	        else{   // Timer3 Ch4 pin(PB1) is Low
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
	            Ch6_POL_RISING;   // to rising edge
 8005732:	621a      	str	r2, [r3, #32]
//	        	RC.capture_fall[7] = TIM3->CCR4; // read capture data
//	            RC.rcADC[7] = RC.capture_fall[7] - RC.capture_rise[7];
//	            Ch8_POL_RISING;   // to rising edge
//	        }
//	    }
}
 8005734:	4770      	bx	lr
	            RC.capture_fall[0] = TIM2->CCR1; // read capture data
 8005736:	6b59      	ldr	r1, [r3, #52]	; 0x34
	            RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 8005738:	6810      	ldr	r0, [r2, #0]
	            RC.capture_fall[0] = TIM2->CCR1; // read capture data
 800573a:	6211      	str	r1, [r2, #32]
	            RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 800573c:	1a09      	subs	r1, r1, r0
 800573e:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
	            Ch3_POL_RISING;   // to rising edge
 8005742:	6a1a      	ldr	r2, [r3, #32]
 8005744:	f022 0202 	bic.w	r2, r2, #2
 8005748:	e7f3      	b.n	8005732 <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM2){
 800574a:	2b02      	cmp	r3, #2
 800574c:	d13d      	bne.n	80057ca <HAL_TIM_IC_CaptureCallback+0xc2>
 800574e:	6803      	ldr	r3, [r0, #0]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005754:	d10d      	bne.n	8005772 <HAL_TIM_IC_CaptureCallback+0x6a>
	        if(Ch2_PIN){  // Timer2 Ch2 pin(PA1) is High
 8005756:	4a43      	ldr	r2, [pc, #268]	; (8005864 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8005758:	6892      	ldr	r2, [r2, #8]
 800575a:	f012 0f02 	tst.w	r2, #2
 800575e:	4a42      	ldr	r2, [pc, #264]	; (8005868 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005760:	d018      	beq.n	8005794 <HAL_TIM_IC_CaptureCallback+0x8c>
	            TIM2->CCR2 = 0;
 8005762:	2100      	movs	r1, #0
 8005764:	6399      	str	r1, [r3, #56]	; 0x38
	        	RC.capture_rise[1] = TIM2->CCR2; // read capture data
 8005766:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005768:	6051      	str	r1, [r2, #4]
	            Ch2_POL_FALLING;  // to falling edge
 800576a:	6a1a      	ldr	r2, [r3, #32]
 800576c:	f042 0220 	orr.w	r2, r2, #32
	            Ch2_POL_RISING;   // to rising edge
 8005770:	621a      	str	r2, [r3, #32]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM3){
 8005772:	4a3e      	ldr	r2, [pc, #248]	; (800586c <HAL_TIM_IC_CaptureCallback+0x164>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d174      	bne.n	8005862 <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch4_PIN){  // Timer3 Ch2 pin(PA7) is High
 8005778:	4a3a      	ldr	r2, [pc, #232]	; (8005864 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800577a:	6892      	ldr	r2, [r2, #8]
 800577c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005780:	4a39      	ldr	r2, [pc, #228]	; (8005868 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005782:	d018      	beq.n	80057b6 <HAL_TIM_IC_CaptureCallback+0xae>
	            TIM3->CCR2 = 0;
 8005784:	2100      	movs	r1, #0
 8005786:	6399      	str	r1, [r3, #56]	; 0x38
	        	RC.capture_rise[3] = TIM3->CCR2; // read capture data
 8005788:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800578a:	60d1      	str	r1, [r2, #12]
	            Ch4_POL_FALLING;  // to falling edge
 800578c:	6a1a      	ldr	r2, [r3, #32]
 800578e:	f042 0220 	orr.w	r2, r2, #32
 8005792:	e7ce      	b.n	8005732 <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[1] = TIM2->CCR2; // read capture data
 8005794:	6b99      	ldr	r1, [r3, #56]	; 0x38
	        	RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 8005796:	6850      	ldr	r0, [r2, #4]
	        	RC.capture_fall[1] = TIM2->CCR2; // read capture data
 8005798:	6251      	str	r1, [r2, #36]	; 0x24
	        	RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 800579a:	1a09      	subs	r1, r1, r0
 800579c:	f8a2 1042 	strh.w	r1, [r2, #66]	; 0x42
	            Ch2_POL_RISING;   // to rising edge
 80057a0:	6a1a      	ldr	r2, [r3, #32]
 80057a2:	f022 0220 	bic.w	r2, r2, #32
 80057a6:	e7e3      	b.n	8005770 <HAL_TIM_IC_CaptureCallback+0x68>
	        	RC.capture_fall[2] = TIM3->CCR1; // read capture data
 80057a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
	        	RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 80057aa:	6890      	ldr	r0, [r2, #8]
	        	RC.capture_fall[2] = TIM3->CCR1; // read capture data
 80057ac:	6291      	str	r1, [r2, #40]	; 0x28
	        	RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 80057ae:	1a09      	subs	r1, r1, r0
 80057b0:	f8a2 1044 	strh.w	r1, [r2, #68]	; 0x44
 80057b4:	e7c5      	b.n	8005742 <HAL_TIM_IC_CaptureCallback+0x3a>
	        	RC.capture_fall[3] = TIM3->CCR2; // read capture data
 80057b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
	            RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 80057b8:	68d0      	ldr	r0, [r2, #12]
	        	RC.capture_fall[3] = TIM3->CCR2; // read capture data
 80057ba:	62d1      	str	r1, [r2, #44]	; 0x2c
	            RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 80057bc:	1a09      	subs	r1, r1, r0
 80057be:	f8a2 1046 	strh.w	r1, [r2, #70]	; 0x46
	            Ch4_POL_RISING;   // to rising edge
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	f022 0220 	bic.w	r2, r2, #32
 80057c8:	e7b3      	b.n	8005732 <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 && htim->Instance == TIM3){
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d147      	bne.n	800585e <HAL_TIM_IC_CaptureCallback+0x156>
 80057ce:	6803      	ldr	r3, [r0, #0]
 80057d0:	4a26      	ldr	r2, [pc, #152]	; (800586c <HAL_TIM_IC_CaptureCallback+0x164>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d145      	bne.n	8005862 <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch5_PIN){  // Timer3 Ch3 pin(PB0) is High
 80057d6:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 80057da:	6892      	ldr	r2, [r2, #8]
 80057dc:	f012 0f01 	tst.w	r2, #1
 80057e0:	4a21      	ldr	r2, [pc, #132]	; (8005868 <HAL_TIM_IC_CaptureCallback+0x160>)
 80057e2:	d007      	beq.n	80057f4 <HAL_TIM_IC_CaptureCallback+0xec>
	            TIM3->CCR3 = 0;
 80057e4:	2100      	movs	r1, #0
 80057e6:	63d9      	str	r1, [r3, #60]	; 0x3c
	        	RC.capture_rise[4] = TIM3->CCR3; // read capture data
 80057e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80057ea:	6111      	str	r1, [r2, #16]
	            Ch5_POL_FALLING;  // to falling edge
 80057ec:	6a1a      	ldr	r2, [r3, #32]
 80057ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f2:	e79e      	b.n	8005732 <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[4] = TIM3->CCR3; // read capture data
 80057f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	            RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 80057f6:	6910      	ldr	r0, [r2, #16]
	        	RC.capture_fall[4] = TIM3->CCR3; // read capture data
 80057f8:	6311      	str	r1, [r2, #48]	; 0x30
	            RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 80057fa:	1a09      	subs	r1, r1, r0
 80057fc:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
	            Ch5_POL_RISING;   // to rising edge
 8005800:	6a1a      	ldr	r2, [r3, #32]
 8005802:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005806:	e794      	b.n	8005732 <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3){
 8005808:	6803      	ldr	r3, [r0, #0]
 800580a:	4a18      	ldr	r2, [pc, #96]	; (800586c <HAL_TIM_IC_CaptureCallback+0x164>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d128      	bne.n	8005862 <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch6_PIN){  // Timer3 Ch4 pin(PB1) is High
 8005810:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8005814:	6892      	ldr	r2, [r2, #8]
 8005816:	f012 0f02 	tst.w	r2, #2
 800581a:	4a13      	ldr	r2, [pc, #76]	; (8005868 <HAL_TIM_IC_CaptureCallback+0x160>)
 800581c:	d007      	beq.n	800582e <HAL_TIM_IC_CaptureCallback+0x126>
	            TIM3->CCR4 = 0;
 800581e:	2100      	movs	r1, #0
 8005820:	6419      	str	r1, [r3, #64]	; 0x40
	        	RC.capture_rise[5] = TIM3->CCR4; // read capture data
 8005822:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005824:	6151      	str	r1, [r2, #20]
	            Ch6_POL_FALLING;  // to falling edge
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800582c:	e781      	b.n	8005732 <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
 800582e:	6c19      	ldr	r1, [r3, #64]	; 0x40
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 8005830:	6950      	ldr	r0, [r2, #20]
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
 8005832:	6351      	str	r1, [r2, #52]	; 0x34
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 8005834:	1a09      	subs	r1, r1, r0
 8005836:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
	            Ch6_POL_RISING;   // to rising edge
 800583a:	6a1a      	ldr	r2, [r3, #32]
 800583c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005840:	e777      	b.n	8005732 <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3){
 8005842:	4a0a      	ldr	r2, [pc, #40]	; (800586c <HAL_TIM_IC_CaptureCallback+0x164>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d10c      	bne.n	8005862 <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch3_PIN){  // Timer3 Ch1 pin(PA6) is High
 8005848:	4a06      	ldr	r2, [pc, #24]	; (8005864 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800584a:	6892      	ldr	r2, [r2, #8]
 800584c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005850:	4a05      	ldr	r2, [pc, #20]	; (8005868 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005852:	d0a9      	beq.n	80057a8 <HAL_TIM_IC_CaptureCallback+0xa0>
	            TIM3->CCR1 = 0;
 8005854:	2100      	movs	r1, #0
 8005856:	6359      	str	r1, [r3, #52]	; 0x34
	        	RC.capture_rise[2] = TIM3->CCR1; // read capture data
 8005858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800585a:	6091      	str	r1, [r2, #8]
 800585c:	e766      	b.n	800572c <HAL_TIM_IC_CaptureCallback+0x24>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3){
 800585e:	2b08      	cmp	r3, #8
 8005860:	d0d2      	beq.n	8005808 <HAL_TIM_IC_CaptureCallback+0x100>
 8005862:	4770      	bx	lr
 8005864:	40010800 	.word	0x40010800
 8005868:	20001128 	.word	0x20001128
 800586c:	40000400 	.word	0x40000400

08005870 <getMres>:
// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
uint8_t Mmode = M_100HZ;

void getMres()
{
  switch (Mscale)
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <getMres+0x18>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	b113      	cbz	r3, 800587c <getMres+0xc>
 8005876:	2b01      	cmp	r3, #1
 8005878:	d004      	beq.n	8005884 <getMres+0x14>
 800587a:	4770      	bx	lr
  {
    // Possible magnetometer scales (and their register bit settings) are:
    // 14 bit resolution (0) and 16 bit resolution (1)
    case MFS_14BITS:
      mRes = 10.0f * 4912.0f / 8190.0f; // Proper scale to return milliGauss
 800587c:	4a03      	ldr	r2, [pc, #12]	; (800588c <getMres+0x1c>)
      break;
    case MFS_16BITS:
      mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
 800587e:	4b04      	ldr	r3, [pc, #16]	; (8005890 <getMres+0x20>)
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	4770      	bx	lr
 8005884:	4a03      	ldr	r2, [pc, #12]	; (8005894 <getMres+0x24>)
 8005886:	e7fa      	b.n	800587e <getMres+0xe>
 8005888:	20000009 	.word	0x20000009
 800588c:	40bfebff 	.word	0x40bfebff
 8005890:	20000da8 	.word	0x20000da8
 8005894:	3fbfebff 	.word	0x3fbfebff

08005898 <getGres>:
  }
}

void getGres()
{
  switch (Gscale)
 8005898:	4b08      	ldr	r3, [pc, #32]	; (80058bc <getGres+0x24>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d806      	bhi.n	80058ae <getGres+0x16>
 80058a0:	e8df f003 	tbb	[pc, r3]
 80058a4:	0a080602 	.word	0x0a080602
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case GFS_250DPS:
      gRes = 250.0f / 32768.0f;
 80058a8:	4a05      	ldr	r2, [pc, #20]	; (80058c0 <getGres+0x28>)
      break;
    case GFS_1000DPS:
      gRes = 1000.0f / 32768.0f;
      break;
    case GFS_2000DPS:
      gRes = 2000.0f / 32768.0f;
 80058aa:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <getGres+0x2c>)
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	4770      	bx	lr
      gRes = 500.0f / 32768.0f;
 80058b0:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <getGres+0x30>)
 80058b2:	e7fa      	b.n	80058aa <getGres+0x12>
      gRes = 1000.0f / 32768.0f;
 80058b4:	4a05      	ldr	r2, [pc, #20]	; (80058cc <getGres+0x34>)
 80058b6:	e7f8      	b.n	80058aa <getGres+0x12>
      gRes = 2000.0f / 32768.0f;
 80058b8:	4a05      	ldr	r2, [pc, #20]	; (80058d0 <getGres+0x38>)
 80058ba:	e7f6      	b.n	80058aa <getGres+0x12>
 80058bc:	20000af5 	.word	0x20000af5
 80058c0:	3bfa0000 	.word	0x3bfa0000
 80058c4:	20000da0 	.word	0x20000da0
 80058c8:	3c7a0000 	.word	0x3c7a0000
 80058cc:	3cfa0000 	.word	0x3cfa0000
 80058d0:	3d7a0000 	.word	0x3d7a0000

080058d4 <getAres>:
  }
}

void getAres()
{
  switch (Ascale)
 80058d4:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <getAres+0x2c>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d807      	bhi.n	80058ec <getAres+0x18>
 80058dc:	e8df f003 	tbb	[pc, r3]
 80058e0:	0d0a0702 	.word	0x0d0a0702
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case AFS_2G:
      aRes = 2.0f / 32768.0f;
 80058e4:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
      break;
    case AFS_8G:
      aRes = 8.0f / 32768.0f;
      break;
    case AFS_16G:
      aRes = 16.0f / 32768.0f;
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <getAres+0x30>)
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	4770      	bx	lr
      aRes = 4.0f / 32768.0f;
 80058ee:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80058f2:	e7f9      	b.n	80058e8 <getAres+0x14>
      aRes = 8.0f / 32768.0f;
 80058f4:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80058f8:	e7f6      	b.n	80058e8 <getAres+0x14>
      aRes = 16.0f / 32768.0f;
 80058fa:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80058fe:	e7f3      	b.n	80058e8 <getAres+0x14>
 8005900:	20000af4 	.word	0x20000af4
 8005904:	20000d90 	.word	0x20000d90

08005908 <GYRO_Common>:
	
	if(1) GYRO_Common(); //Flight_Status >= 1
}

void GYRO_Common(void)
{
 8005908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t axis =0;
  for(axis=0; axis<3; axis++)
  {
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 800590c:	f04f 0900 	mov.w	r9, #0

    if(abs(imu.gyroRaw[axis]) <= 5)
 8005910:	2600      	movs	r6, #0
 8005912:	f04f 0701 	mov.w	r7, #1
 8005916:	46c8      	mov	r8, r9
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005918:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <GYRO_Common+0x80>)
 800591a:	4c1c      	ldr	r4, [pc, #112]	; (800598c <GYRO_Common+0x84>)
 800591c:	681b      	ldr	r3, [r3, #0]
    if(abs(imu.gyroRaw[axis]) <= 5)
 800591e:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005994 <GYRO_Common+0x8c>
 8005922:	f8df b074 	ldr.w	fp, [pc, #116]	; 8005998 <GYRO_Common+0x90>
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	4b19      	ldr	r3, [pc, #100]	; (8005990 <GYRO_Common+0x88>)
 800592a:	444b      	add	r3, r9
 800592c:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8005930:	f7fb f9b0 	bl	8000c94 <__aeabi_i2f>
 8005934:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8005938:	f7fb f8f6 	bl	8000b28 <__aeabi_fsub>
 800593c:	9900      	ldr	r1, [sp, #0]
 800593e:	f7fb f9fd 	bl	8000d3c <__aeabi_fmul>
    if(abs(imu.gyroRaw[axis]) <= 5)
 8005942:	4631      	mov	r1, r6
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005944:	4605      	mov	r5, r0
    if(abs(imu.gyroRaw[axis]) <= 5)
 8005946:	f7fb fbb5 	bl	80010b4 <__aeabi_fcmpgt>
 800594a:	463b      	mov	r3, r7
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	b190      	cbz	r0, 8005976 <GYRO_Common+0x6e>
 8005950:	4659      	mov	r1, fp
 8005952:	4628      	mov	r0, r5
 8005954:	f7fb fb9a 	bl	800108c <__aeabi_fcmple>
 8005958:	9b01      	ldr	r3, [sp, #4]
 800595a:	b900      	cbnz	r0, 800595e <GYRO_Common+0x56>
 800595c:	4643      	mov	r3, r8
 800595e:	b2db      	uxtb	r3, r3
 8005960:	b973      	cbnz	r3, 8005980 <GYRO_Common+0x78>
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8005962:	f844 5c2c 	str.w	r5, [r4, #-44]
 8005966:	f109 0902 	add.w	r9, r9, #2
  for(axis=0; axis<3; axis++)
 800596a:	f1b9 0f06 	cmp.w	r9, #6
 800596e:	d1db      	bne.n	8005928 <GYRO_Common+0x20>
      {
        imu.gyroRaw[axis] = 0;
      }
  }
}
 8005970:	b003      	add	sp, #12
 8005972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(abs(imu.gyroRaw[axis]) <= 5)
 8005976:	4651      	mov	r1, sl
 8005978:	4628      	mov	r0, r5
 800597a:	f7fb fb91 	bl	80010a0 <__aeabi_fcmpge>
 800597e:	e7eb      	b.n	8005958 <GYRO_Common+0x50>
        imu.gyroRaw[axis] = 0;
 8005980:	f844 6c2c 	str.w	r6, [r4, #-44]
 8005984:	e7ef      	b.n	8005966 <GYRO_Common+0x5e>
 8005986:	bf00      	nop
 8005988:	20000da0 	.word	0x20000da0
 800598c:	20001384 	.word	0x20001384
 8005990:	20001328 	.word	0x20001328
 8005994:	c0a00000 	.word	0xc0a00000
 8005998:	40a00000 	.word	0x40a00000

0800599c <Gyro_getADC>:
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 800599c:	2306      	movs	r3, #6
{
 800599e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 80059a0:	4c0e      	ldr	r4, [pc, #56]	; (80059dc <Gyro_getADC+0x40>)
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2201      	movs	r2, #1
 80059a6:	4623      	mov	r3, r4
 80059a8:	2143      	movs	r1, #67	; 0x43
 80059aa:	20d2      	movs	r0, #210	; 0xd2
 80059ac:	f7fe fcaa 	bl	8004304 <I2C_ByteRead>
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 80059b0:	78a3      	ldrb	r3, [r4, #2]
 80059b2:	78e1      	ldrb	r1, [r4, #3]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 80059b4:	7962      	ldrb	r2, [r4, #5]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 80059b6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 80059ba:	7923      	ldrb	r3, [r4, #4]
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 80059bc:	7825      	ldrb	r5, [r4, #0]
 80059be:	7860      	ldrb	r0, [r4, #1]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 80059c0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	GYRO_ORIENTATION(x, y, z);
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <Gyro_getADC+0x44>)
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 80059c6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	GYRO_ORIENTATION(x, y, z);
 80059ca:	8298      	strh	r0, [r3, #20]
 80059cc:	82d9      	strh	r1, [r3, #22]
 80059ce:	831a      	strh	r2, [r3, #24]
}
 80059d0:	b003      	add	sp, #12
 80059d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(1) GYRO_Common(); //Flight_Status >= 1
 80059d6:	f7ff bf97 	b.w	8005908 <GYRO_Common>
 80059da:	bf00      	nop
 80059dc:	200013d4 	.word	0x200013d4
 80059e0:	20001328 	.word	0x20001328

080059e4 <ACC_Common>:
	
	if(1) ACC_Common(); //Flight_Status >= 1
}

void ACC_Common(void)
{
 80059e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t axis = 0;
  static int32_t a[3];

  if(calibratingA>0){
 80059e8:	4e2a      	ldr	r6, [pc, #168]	; (8005a94 <ACC_Common+0xb0>)
 80059ea:	4c2b      	ldr	r4, [pc, #172]	; (8005a98 <ACC_Common+0xb4>)
 80059ec:	8830      	ldrh	r0, [r6, #0]
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d03c      	beq.n	8005a6c <ACC_Common+0x88>
 80059f2:	2300      	movs	r3, #0
 80059f4:	4a29      	ldr	r2, [pc, #164]	; (8005a9c <ACC_Common+0xb8>)
    for(axis=0; axis <3; axis++){
    // Reset a[axis] at start of calibration
      if (calibratingA == 512) a[axis]=0;
 80059f6:	461d      	mov	r5, r3
 80059f8:	4611      	mov	r1, r2
 80059fa:	f104 0e18 	add.w	lr, r4, #24
 80059fe:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005a02:	bf08      	it	eq
 8005a04:	6015      	streq	r5, [r2, #0]
      // Sum up 512 readings
      a[axis] +=imu.accADC[axis];
 8005a06:	f9be c002 	ldrsh.w	ip, [lr, #2]
 8005a0a:	6817      	ldr	r7, [r2, #0]
      // Clear global variables for next reading
      imu.accADC[axis]=0;
 8005a0c:	f82e 5f02 	strh.w	r5, [lr, #2]!
      a[axis] +=imu.accADC[axis];
 8005a10:	4467      	add	r7, ip
 8005a12:	f842 7b04 	str.w	r7, [r2], #4
      imu.acc_cal[axis]=0;
 8005a16:	18e7      	adds	r7, r4, r3
 8005a18:	3304      	adds	r3, #4
    for(axis=0; axis <3; axis++){
 8005a1a:	2b0c      	cmp	r3, #12
      imu.acc_cal[axis]=0;
 8005a1c:	657d      	str	r5, [r7, #84]	; 0x54
    for(axis=0; axis <3; axis++){
 8005a1e:	d1ee      	bne.n	80059fe <ACC_Common+0x1a>
  }
     // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
  if (calibratingA == 1) {
 8005a20:	2801      	cmp	r0, #1
 8005a22:	d120      	bne.n	8005a66 <ACC_Common+0x82>
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 8005a24:	684b      	ldr	r3, [r1, #4]
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 8005a26:	680f      	ldr	r7, [r1, #0]
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 8005a28:	ea4f 2863 	mov.w	r8, r3, asr #9
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005a2c:	4b1c      	ldr	r3, [pc, #112]	; (8005aa0 <ACC_Common+0xbc>)
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 8005a2e:	127f      	asrs	r7, r7, #9
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005a30:	6818      	ldr	r0, [r3, #0]
    imu.acc_cal[ROLL]  = a[ROLL]>>9;
 8005a32:	6567      	str	r7, [r4, #84]	; 0x54
    imu.acc_cal[PITCH] = a[PITCH]>>9;
 8005a34:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005a38:	688d      	ldr	r5, [r1, #8]
 8005a3a:	f7fb fb5b 	bl	80010f4 <__aeabi_f2iz>
 8005a3e:	126d      	asrs	r5, r5, #9
 8005a40:	1a28      	subs	r0, r5, r0
    sprintf(Buf, "ACC_CALI_DONE : %ld, %ld, %ld\r\n ", imu.acc_cal[ROLL], imu.acc_cal[PITCH], imu.acc_cal[YAW]);
 8005a42:	4643      	mov	r3, r8
 8005a44:	463a      	mov	r2, r7
 8005a46:	4917      	ldr	r1, [pc, #92]	; (8005aa4 <ACC_Common+0xc0>)
    imu.acc_cal[YAW]   = (a[YAW]>>9)-(int32_t)aRes;
 8005a48:	65e0      	str	r0, [r4, #92]	; 0x5c
    sprintf(Buf, "ACC_CALI_DONE : %ld, %ld, %ld\r\n ", imu.acc_cal[ROLL], imu.acc_cal[PITCH], imu.acc_cal[YAW]);
 8005a4a:	9000      	str	r0, [sp, #0]
 8005a4c:	4816      	ldr	r0, [pc, #88]	; (8005aa8 <ACC_Common+0xc4>)
 8005a4e:	f002 ffcd 	bl	80089ec <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf),1000);
 8005a52:	4815      	ldr	r0, [pc, #84]	; (8005aa8 <ACC_Common+0xc4>)
 8005a54:	f7fa fb7c 	bl	8000150 <strlen>
 8005a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a5c:	b282      	uxth	r2, r0
 8005a5e:	4912      	ldr	r1, [pc, #72]	; (8005aa8 <ACC_Common+0xc4>)
 8005a60:	4812      	ldr	r0, [pc, #72]	; (8005aac <ACC_Common+0xc8>)
 8005a62:	f7fe f949 	bl	8003cf8 <HAL_UART_Transmit>
  }
  calibratingA--;
 8005a66:	8833      	ldrh	r3, [r6, #0]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	8033      	strh	r3, [r6, #0]
}

  for(axis=0;axis<3;axis++)
  {
    imu.accRaw[axis] = (float)imu.accADC[axis] * aRes;// - accBias[axis];
 8005a6c:	2500      	movs	r5, #0
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <ACC_Common+0xbc>)
 8005a70:	4e0f      	ldr	r6, [pc, #60]	; (8005ab0 <ACC_Common+0xcc>)
 8005a72:	f8d3 8000 	ldr.w	r8, [r3]
 8005a76:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
 8005a7a:	f7fb f90b 	bl	8000c94 <__aeabi_i2f>
 8005a7e:	4641      	mov	r1, r8
 8005a80:	f7fb f95c 	bl	8000d3c <__aeabi_fmul>
 8005a84:	1967      	adds	r7, r4, r5
 8005a86:	3504      	adds	r5, #4
  for(axis=0;axis<3;axis++)
 8005a88:	2d0c      	cmp	r5, #12
    imu.accRaw[axis] = (float)imu.accADC[axis] * aRes;// - accBias[axis];
 8005a8a:	62b8      	str	r0, [r7, #40]	; 0x28
  for(axis=0;axis<3;axis++)
 8005a8c:	d1f3      	bne.n	8005a76 <ACC_Common+0x92>
    //imu.accRaw[axis] = ((float)imu.accADC[axis]-(float)imu.acc_cal[axis]) * AMult;// - accelBias[axis];
  }
}
 8005a8e:	b002      	add	sp, #8
 8005a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a94:	20000bfc 	.word	0x20000bfc
 8005a98:	20001328 	.word	0x20001328
 8005a9c:	20000b10 	.word	0x20000b10
 8005aa0:	20000d90 	.word	0x20000d90
 8005aa4:	0800dbf8 	.word	0x0800dbf8
 8005aa8:	200013e0 	.word	0x200013e0
 8005aac:	20001724 	.word	0x20001724
 8005ab0:	20001340 	.word	0x20001340

08005ab4 <ACC_getADC>:
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 8005ab4:	2306      	movs	r3, #6
{
 8005ab6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 8005ab8:	4c0e      	ldr	r4, [pc, #56]	; (8005af4 <ACC_getADC+0x40>)
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	2201      	movs	r2, #1
 8005abe:	4623      	mov	r3, r4
 8005ac0:	213b      	movs	r1, #59	; 0x3b
 8005ac2:	20d2      	movs	r0, #210	; 0xd2
 8005ac4:	f7fe fc1e 	bl	8004304 <I2C_ByteRead>
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005ac8:	78a3      	ldrb	r3, [r4, #2]
 8005aca:	78e1      	ldrb	r1, [r4, #3]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005acc:	7962      	ldrb	r2, [r4, #5]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8005ace:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005ad2:	7923      	ldrb	r3, [r4, #4]
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005ad4:	7825      	ldrb	r5, [r4, #0]
 8005ad6:	7860      	ldrb	r0, [r4, #1]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8005ad8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	ACC_ORIENTATION( x, y, z);
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <ACC_getADC+0x44>)
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005ade:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	ACC_ORIENTATION( x, y, z);
 8005ae2:	8358      	strh	r0, [r3, #26]
 8005ae4:	8399      	strh	r1, [r3, #28]
 8005ae6:	83da      	strh	r2, [r3, #30]
}
 8005ae8:	b003      	add	sp, #12
 8005aea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(1) ACC_Common(); //Flight_Status >= 1
 8005aee:	f7ff bf79 	b.w	80059e4 <ACC_Common>
 8005af2:	bf00      	nop
 8005af4:	200013d4 	.word	0x200013d4
 8005af8:	20001328 	.word	0x20001328

08005afc <MAG_Common>:
		}
	}
}

void MAG_Common(void)
{
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t axis = 0;
  for(axis=0;axis<3;axis++)
  {
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 8005b00:	2400      	movs	r4, #0
 8005b02:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <MAG_Common+0x48>)
 8005b04:	4d10      	ldr	r5, [pc, #64]	; (8005b48 <MAG_Common+0x4c>)
 8005b06:	f8d3 8000 	ldr.w	r8, [r3]
 8005b0a:	4f10      	ldr	r7, [pc, #64]	; (8005b4c <MAG_Common+0x50>)
 8005b0c:	4e10      	ldr	r6, [pc, #64]	; (8005b50 <MAG_Common+0x54>)
 8005b0e:	f1a5 093c 	sub.w	r9, r5, #60	; 0x3c
 8005b12:	eb04 0309 	add.w	r3, r4, r9
 8005b16:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8005b1a:	f7fb f8bb 	bl	8000c94 <__aeabi_i2f>
 8005b1e:	4641      	mov	r1, r8
 8005b20:	f7fb f90c 	bl	8000d3c <__aeabi_fmul>
 8005b24:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
 8005b28:	f7fb f908 	bl	8000d3c <__aeabi_fmul>
 8005b2c:	f856 1014 	ldr.w	r1, [r6, r4, lsl #1]
 8005b30:	f7fa fffa 	bl	8000b28 <__aeabi_fsub>
 8005b34:	3402      	adds	r4, #2
  for(axis=0;axis<3;axis++)
 8005b36:	2c06      	cmp	r4, #6
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 8005b38:	f845 0f04 	str.w	r0, [r5, #4]!
  for(axis=0;axis<3;axis++)
 8005b3c:	d1e9      	bne.n	8005b12 <MAG_Common+0x16>
  }
}
 8005b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b42:	bf00      	nop
 8005b44:	20000da8 	.word	0x20000da8
 8005b48:	20001364 	.word	0x20001364
 8005b4c:	20000c18 	.word	0x20000c18
 8005b50:	20000c0c 	.word	0x20000c0c

08005b54 <Mag_getADC>:
{
 8005b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x02, 1, rawADC, 1);
 8005b56:	2501      	movs	r5, #1
 8005b58:	4c16      	ldr	r4, [pc, #88]	; (8005bb4 <Mag_getADC+0x60>)
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	9500      	str	r5, [sp, #0]
 8005b60:	2102      	movs	r1, #2
 8005b62:	2018      	movs	r0, #24
 8005b64:	f7fe fbce 	bl	8004304 <I2C_ByteRead>
	if( rawADC[0] & 0x01)
 8005b68:	7823      	ldrb	r3, [r4, #0]
 8005b6a:	07da      	lsls	r2, r3, #31
 8005b6c:	d51f      	bpl.n	8005bae <Mag_getADC+0x5a>
	I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x03, 1, rawADC, 7);
 8005b6e:	2307      	movs	r3, #7
 8005b70:	462a      	mov	r2, r5
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	2103      	movs	r1, #3
 8005b76:	4623      	mov	r3, r4
 8005b78:	2018      	movs	r0, #24
 8005b7a:	f7fe fbc3 	bl	8004304 <I2C_ByteRead>
	if(!(c & 0x08)){
 8005b7e:	79a3      	ldrb	r3, [r4, #6]
 8005b80:	071b      	lsls	r3, r3, #28
 8005b82:	d414      	bmi.n	8005bae <Mag_getADC+0x5a>
	y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 8005b84:	78e3      	ldrb	r3, [r4, #3]
 8005b86:	78a1      	ldrb	r1, [r4, #2]
	z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8005b88:	7922      	ldrb	r2, [r4, #4]
	y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 8005b8a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8005b8e:	7963      	ldrb	r3, [r4, #5]
	x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 8005b90:	7865      	ldrb	r5, [r4, #1]
 8005b92:	7820      	ldrb	r0, [r4, #0]
	z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8005b94:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	MAG_ORIENTATION( x, y, z);
 8005b98:	4b07      	ldr	r3, [pc, #28]	; (8005bb8 <Mag_getADC+0x64>)
	x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 8005b9a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	MAG_ORIENTATION( x, y, z);
 8005b9e:	8198      	strh	r0, [r3, #12]
 8005ba0:	81d9      	strh	r1, [r3, #14]
 8005ba2:	821a      	strh	r2, [r3, #16]
}
 8005ba4:	b003      	add	sp, #12
 8005ba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(1) MAG_Common();//Flight_Status >= 1
 8005baa:	f7ff bfa7 	b.w	8005afc <MAG_Common>
}
 8005bae:	b003      	add	sp, #12
 8005bb0:	bd30      	pop	{r4, r5, pc}
 8005bb2:	bf00      	nop
 8005bb4:	200013d4 	.word	0x200013d4
 8005bb8:	20001328 	.word	0x20001328

08005bbc <Calibrate_gyro>:
{
 8005bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (cal_int = 0; cal_int < 2000; cal_int ++){
 8005bc0:	2500      	movs	r5, #0
      RGB_G_TOGGLE;                                         //Change the led status to indicate calibration.
 8005bc2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005c74 <Calibrate_gyro+0xb8>
      sprintf(Buf, ".");
 8005bc6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8005c78 <Calibrate_gyro+0xbc>
 8005bca:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8005c7c <Calibrate_gyro+0xc0>
    if (cal_int % 125 == 0) {
 8005bce:	227d      	movs	r2, #125	; 0x7d
 8005bd0:	fb95 f3f2 	sdiv	r3, r5, r2
 8005bd4:	fb02 5313 	mls	r3, r2, r3, r5
 8005bd8:	b993      	cbnz	r3, 8005c00 <Calibrate_gyro+0x44>
      RGB_G_TOGGLE;                                         //Change the led status to indicate calibration.
 8005bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bde:	4648      	mov	r0, r9
 8005be0:	f7fc f99d 	bl	8001f1e <HAL_GPIO_TogglePin>
      sprintf(Buf, ".");
 8005be4:	4651      	mov	r1, sl
 8005be6:	4640      	mov	r0, r8
 8005be8:	f002 ff24 	bl	8008a34 <strcpy>
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8005bec:	4640      	mov	r0, r8
 8005bee:	f7fa faaf 	bl	8000150 <strlen>
 8005bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bf6:	b282      	uxth	r2, r0
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	481b      	ldr	r0, [pc, #108]	; (8005c68 <Calibrate_gyro+0xac>)
 8005bfc:	f7fe f87c 	bl	8003cf8 <HAL_UART_Transmit>
		Gyro_getADC();
 8005c00:	f7ff fecc 	bl	800599c <Gyro_getADC>
		Mag_getADC();
 8005c04:	2600      	movs	r6, #0
 8005c06:	f7ff ffa5 	bl	8005b54 <Mag_getADC>
 8005c0a:	4f18      	ldr	r7, [pc, #96]	; (8005c6c <Calibrate_gyro+0xb0>)
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 8005c0c:	f1a7 045c 	sub.w	r4, r7, #92	; 0x5c
 8005c10:	1933      	adds	r3, r6, r4
 8005c12:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8005c16:	f7fb f83d 	bl	8000c94 <__aeabi_i2f>
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	f7fa ff86 	bl	8000b2c <__addsf3>
 8005c20:	3602      	adds	r6, #2
		for(axis=0; axis<3; axis++)
 8005c22:	2e06      	cmp	r6, #6
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 8005c24:	f847 0f04 	str.w	r0, [r7, #4]!
		for(axis=0; axis<3; axis++)
 8005c28:	d1f2      	bne.n	8005c10 <Calibrate_gyro+0x54>
	for (cal_int = 0; cal_int < 2000; cal_int ++){
 8005c2a:	3501      	adds	r5, #1
 8005c2c:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8005c30:	d1cd      	bne.n	8005bce <Calibrate_gyro+0x12>
	PrintData(2);
 8005c32:	2002      	movs	r0, #2
 8005c34:	f001 fb9a 	bl	800736c <PrintData>
		imu.gyro_cal[axis] /= 2000.0f;
 8005c38:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005c3a:	490d      	ldr	r1, [pc, #52]	; (8005c70 <Calibrate_gyro+0xb4>)
 8005c3c:	f7fb f932 	bl	8000ea4 <__aeabi_fdiv>
 8005c40:	490b      	ldr	r1, [pc, #44]	; (8005c70 <Calibrate_gyro+0xb4>)
 8005c42:	6620      	str	r0, [r4, #96]	; 0x60
 8005c44:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005c46:	f7fb f92d 	bl	8000ea4 <__aeabi_fdiv>
 8005c4a:	4909      	ldr	r1, [pc, #36]	; (8005c70 <Calibrate_gyro+0xb4>)
 8005c4c:	6660      	str	r0, [r4, #100]	; 0x64
 8005c4e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005c50:	f7fb f928 	bl	8000ea4 <__aeabi_fdiv>
 8005c54:	66a0      	str	r0, [r4, #104]	; 0x68
	HAL_Delay(100);
 8005c56:	2064      	movs	r0, #100	; 0x64
 8005c58:	f7fb fc42 	bl	80014e0 <HAL_Delay>
}
 8005c5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PrintData(2);
 8005c60:	2002      	movs	r0, #2
 8005c62:	f001 bb83 	b.w	800736c <PrintData>
 8005c66:	bf00      	nop
 8005c68:	20001724 	.word	0x20001724
 8005c6c:	20001384 	.word	0x20001384
 8005c70:	44fa0000 	.word	0x44fa0000
 8005c74:	40010c00 	.word	0x40010c00
 8005c78:	0800dc19 	.word	0x0800dc19
 8005c7c:	200013e0 	.word	0x200013e0

08005c80 <Temp_getADC>:

void Temp_getADC(void)
{
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 8005c80:	2302      	movs	r3, #2
{
 8005c82:	b513      	push	{r0, r1, r4, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 8005c84:	4c0c      	ldr	r4, [pc, #48]	; (8005cb8 <Temp_getADC+0x38>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2141      	movs	r1, #65	; 0x41
 8005c8c:	4623      	mov	r3, r4
 8005c8e:	20d2      	movs	r0, #210	; 0xd2
 8005c90:	f7fe fb38 	bl	8004304 <I2C_ByteRead>
	/* Get acceleration */
	imu.rawTemp = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8005c94:	7823      	ldrb	r3, [r4, #0]
 8005c96:	7860      	ldrb	r0, [r4, #1]
 8005c98:	4c08      	ldr	r4, [pc, #32]	; (8005cbc <Temp_getADC+0x3c>)
 8005c9a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005c9e:	b200      	sxth	r0, r0
 8005ca0:	8260      	strh	r0, [r4, #18]
	imu.Temp = ((float)imu.rawTemp / 337.87f) + 21.0f;
 8005ca2:	f7fa fff7 	bl	8000c94 <__aeabi_i2f>
 8005ca6:	4906      	ldr	r1, [pc, #24]	; (8005cc0 <Temp_getADC+0x40>)
 8005ca8:	f7fb f8fc 	bl	8000ea4 <__aeabi_fdiv>
 8005cac:	4905      	ldr	r1, [pc, #20]	; (8005cc4 <Temp_getADC+0x44>)
 8005cae:	f7fa ff3d 	bl	8000b2c <__addsf3>
 8005cb2:	6520      	str	r0, [r4, #80]	; 0x50
}
 8005cb4:	b002      	add	sp, #8
 8005cb6:	bd10      	pop	{r4, pc}
 8005cb8:	200013d4 	.word	0x200013d4
 8005cbc:	20001328 	.word	0x20001328
 8005cc0:	43a8ef5c 	.word	0x43a8ef5c
 8005cc4:	41a80000 	.word	0x41a80000

08005cc8 <calibrateMPU9250>:
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

// reset device, reset all registers, clear gyro and accelerometer bias registers
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8005cc8:	2380      	movs	r3, #128	; 0x80
{
 8005cca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_Delay(100); // for stability
// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 8005cce:	2601      	movs	r6, #1
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 8005cd0:	2400      	movs	r4, #0
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 8005cd2:	f04f 0b0c 	mov.w	fp, #12
{
 8005cd6:	b087      	sub	sp, #28
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8005cd8:	2207      	movs	r2, #7
 8005cda:	9300      	str	r3, [sp, #0]
{
 8005cdc:	4682      	mov	sl, r0
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8005cde:	2308      	movs	r3, #8
 8005ce0:	20d2      	movs	r0, #210	; 0xd2
{
 8005ce2:	4689      	mov	r9, r1
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8005ce4:	216b      	movs	r1, #107	; 0x6b
 8005ce6:	f7fe fad7 	bl	8004298 <I2C_ByteWrite>
  HAL_Delay(100); // for stability
 8005cea:	2064      	movs	r0, #100	; 0x64
 8005cec:	f7fb fbf8 	bl	80014e0 <HAL_Delay>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 8005cf0:	9600      	str	r6, [sp, #0]
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	2207      	movs	r2, #7
 8005cf6:	216b      	movs	r1, #107	; 0x6b
 8005cf8:	20d2      	movs	r0, #210	; 0xd2
 8005cfa:	f7fe facd 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 8005cfe:	2308      	movs	r3, #8
 8005d00:	2207      	movs	r2, #7
 8005d02:	216c      	movs	r1, #108	; 0x6c
 8005d04:	20d2      	movs	r0, #210	; 0xd2
 8005d06:	9400      	str	r4, [sp, #0]
 8005d08:	f7fe fac6 	bl	8004298 <I2C_ByteWrite>
  HAL_Delay(200); // for stability
 8005d0c:	20c8      	movs	r0, #200	; 0xc8
 8005d0e:	f7fb fbe7 	bl	80014e0 <HAL_Delay>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
 8005d12:	2308      	movs	r3, #8
 8005d14:	2207      	movs	r2, #7
 8005d16:	2138      	movs	r1, #56	; 0x38
 8005d18:	20d2      	movs	r0, #210	; 0xd2
 8005d1a:	9400      	str	r4, [sp, #0]
 8005d1c:	f7fe fabc 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
 8005d20:	2308      	movs	r3, #8
 8005d22:	2207      	movs	r2, #7
 8005d24:	2123      	movs	r1, #35	; 0x23
 8005d26:	20d2      	movs	r0, #210	; 0xd2
 8005d28:	9400      	str	r4, [sp, #0]
 8005d2a:	f7fe fab5 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
 8005d2e:	2308      	movs	r3, #8
 8005d30:	2207      	movs	r2, #7
 8005d32:	216b      	movs	r1, #107	; 0x6b
 8005d34:	20d2      	movs	r0, #210	; 0xd2
 8005d36:	9400      	str	r4, [sp, #0]
 8005d38:	f7fe faae 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	2207      	movs	r2, #7
 8005d40:	2124      	movs	r1, #36	; 0x24
 8005d42:	20d2      	movs	r0, #210	; 0xd2
 8005d44:	9400      	str	r4, [sp, #0]
 8005d46:	f7fe faa7 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	2207      	movs	r2, #7
 8005d4e:	216a      	movs	r1, #106	; 0x6a
 8005d50:	20d2      	movs	r0, #210	; 0xd2
 8005d52:	9400      	str	r4, [sp, #0]
 8005d54:	f7fe faa0 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 8005d58:	2308      	movs	r3, #8
 8005d5a:	2207      	movs	r2, #7
 8005d5c:	216a      	movs	r1, #106	; 0x6a
 8005d5e:	20d2      	movs	r0, #210	; 0xd2
 8005d60:	f8cd b000 	str.w	fp, [sp]
 8005d64:	f7fe fa98 	bl	8004298 <I2C_ByteWrite>
  HAL_Delay(15); // for stability
 8005d68:	200f      	movs	r0, #15
 8005d6a:	f7fb fbb9 	bl	80014e0 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation.

  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x01); // Set low-pass filter to 188 Hz
 8005d6e:	9600      	str	r6, [sp, #0]
 8005d70:	2308      	movs	r3, #8
 8005d72:	2207      	movs	r2, #7
 8005d74:	211a      	movs	r1, #26
 8005d76:	20d2      	movs	r0, #210	; 0xd2
 8005d78:	f7fe fa8e 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set sample rate to 1 kHz
 8005d7c:	2308      	movs	r3, #8
 8005d7e:	2207      	movs	r2, #7
 8005d80:	2119      	movs	r1, #25
 8005d82:	20d2      	movs	r0, #210	; 0xd2
 8005d84:	9400      	str	r4, [sp, #0]
 8005d86:	f7fe fa87 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	2207      	movs	r2, #7
 8005d8e:	211b      	movs	r1, #27
 8005d90:	20d2      	movs	r0, #210	; 0xd2
 8005d92:	9400      	str	r4, [sp, #0]
 8005d94:	f7fe fa80 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8005d98:	2308      	movs	r3, #8
 8005d9a:	2207      	movs	r2, #7
 8005d9c:	211c      	movs	r1, #28
 8005d9e:	20d2      	movs	r0, #210	; 0xd2
 8005da0:	9400      	str	r4, [sp, #0]
 8005da2:	f7fe fa79 	bl	8004298 <I2C_ByteWrite>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x40); // Enable FIFO
 8005da6:	2340      	movs	r3, #64	; 0x40
 8005da8:	2207      	movs	r2, #7
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	216a      	movs	r1, #106	; 0x6a
 8005dae:	2308      	movs	r3, #8
 8005db0:	20d2      	movs	r0, #210	; 0xd2
 8005db2:	f7fe fa71 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8005db6:	2378      	movs	r3, #120	; 0x78
 8005db8:	2207      	movs	r2, #7
 8005dba:	2123      	movs	r1, #35	; 0x23
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	20d2      	movs	r0, #210	; 0xd2
 8005dc0:	2308      	movs	r3, #8
 8005dc2:	f7fe fa69 	bl	8004298 <I2C_ByteWrite>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8005dc6:	2028      	movs	r0, #40	; 0x28
 8005dc8:	f7fb fb8a 	bl	80014e0 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable gyro and accelerometer sensors for FIFO
 8005dcc:	2308      	movs	r3, #8
 8005dce:	2207      	movs	r2, #7
 8005dd0:	2123      	movs	r1, #35	; 0x23
 8005dd2:	20d2      	movs	r0, #210	; 0xd2
 8005dd4:	9400      	str	r4, [sp, #0]
 8005dd6:	f7fe fa5f 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_COUNTH, 1, rawADC, 2);// read FIFO sample count
 8005dda:	2302      	movs	r3, #2
 8005ddc:	4d56      	ldr	r5, [pc, #344]	; (8005f38 <calibrateMPU9250+0x270>)
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	4632      	mov	r2, r6
 8005de2:	462b      	mov	r3, r5
 8005de4:	2172      	movs	r1, #114	; 0x72
 8005de6:	20d2      	movs	r0, #210	; 0xd2
 8005de8:	f7fe fa8c 	bl	8004304 <I2C_ByteRead>
  fifo_count = ((uint16_t)rawADC[0] << 8) | rawADC[1];
 8005dec:	782b      	ldrb	r3, [r5, #0]
 8005dee:	786e      	ldrb	r6, [r5, #1]
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8005df0:	4627      	mov	r7, r4
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8005df2:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8005df6:	fbb6 f6fb 	udiv	r6, r6, fp
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8005dfa:	46a0      	mov	r8, r4
 8005dfc:	9402      	str	r4, [sp, #8]
 8005dfe:	9405      	str	r4, [sp, #20]
 8005e00:	9404      	str	r4, [sp, #16]
 8005e02:	9403      	str	r4, [sp, #12]

  for (ii = 0; ii < packet_count; ii++) {
 8005e04:	b2a3      	uxth	r3, r4
 8005e06:	429e      	cmp	r6, r3
 8005e08:	d860      	bhi.n	8005ecc <calibrateMPU9250+0x204>
    gyro_bias[2]  += (int32_t) gyro_temp[2];

}
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
    accel_bias[1] /= (int32_t) packet_count;
    accel_bias[2] /= (int32_t) packet_count;
 8005e0a:	9b02      	ldr	r3, [sp, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 8005e0c:	9a03      	ldr	r2, [sp, #12]
    accel_bias[2] /= (int32_t) packet_count;
 8005e0e:	fb93 f3f6 	sdiv	r3, r3, r6
    gyro_bias[0]  /= (int32_t) packet_count;
 8005e12:	fb92 f0f6 	sdiv	r0, r2, r6
    gyro_bias[1]  /= (int32_t) packet_count;
 8005e16:	9a04      	ldr	r2, [sp, #16]
    gyro_bias[2]  /= (int32_t) packet_count;

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8005e18:	2b00      	cmp	r3, #0
    gyro_bias[1]  /= (int32_t) packet_count;
 8005e1a:	fb92 f5f6 	sdiv	r5, r2, r6
    gyro_bias[2]  /= (int32_t) packet_count;
 8005e1e:	9a05      	ldr	r2, [sp, #20]
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8005e20:	bfcc      	ite	gt
 8005e22:	f5a3 4480 	subgt.w	r4, r3, #16384	; 0x4000
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8005e26:	f503 4480 	addle.w	r4, r3, #16384	; 0x4000
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8005e2a:	fb98 f8f6 	sdiv	r8, r8, r6
    accel_bias[1] /= (int32_t) packet_count;
 8005e2e:	fb97 f7f6 	sdiv	r7, r7, r6
    gyro_bias[2]  /= (int32_t) packet_count;
 8005e32:	fb92 f6f6 	sdiv	r6, r2, r6
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YG_OFFS_USRL, 7, 8, data[3]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRH, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRL, 7, 8, data[5]);
*/
	
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8005e36:	f7fa ff2d 	bl	8000c94 <__aeabi_i2f>
 8005e3a:	4940      	ldr	r1, [pc, #256]	; (8005f3c <calibrateMPU9250+0x274>)
 8005e3c:	f7fb f832 	bl	8000ea4 <__aeabi_fdiv>
 8005e40:	f8ca 0000 	str.w	r0, [sl]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8005e44:	4628      	mov	r0, r5
 8005e46:	f7fa ff25 	bl	8000c94 <__aeabi_i2f>
 8005e4a:	493c      	ldr	r1, [pc, #240]	; (8005f3c <calibrateMPU9250+0x274>)
 8005e4c:	f7fb f82a 	bl	8000ea4 <__aeabi_fdiv>
 8005e50:	f8ca 0004 	str.w	r0, [sl, #4]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8005e54:	4630      	mov	r0, r6
 8005e56:	f7fa ff1d 	bl	8000c94 <__aeabi_i2f>
 8005e5a:	4938      	ldr	r1, [pc, #224]	; (8005f3c <calibrateMPU9250+0x274>)
 8005e5c:	f7fb f822 	bl	8000ea4 <__aeabi_fdiv>
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 8005e60:	2502      	movs	r5, #2
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8005e62:	f8ca 0008 	str.w	r0, [sl, #8]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 8005e66:	9500      	str	r5, [sp, #0]
 8005e68:	4b33      	ldr	r3, [pc, #204]	; (8005f38 <calibrateMPU9250+0x270>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	2177      	movs	r1, #119	; 0x77
 8005e6e:	20d2      	movs	r0, #210	; 0xd2
 8005e70:	f7fe fa48 	bl	8004304 <I2C_ByteRead>
  accel_bias_reg[0] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YA_OFFSET_H, 1, rawADC, 2);
 8005e74:	9500      	str	r5, [sp, #0]
 8005e76:	4b30      	ldr	r3, [pc, #192]	; (8005f38 <calibrateMPU9250+0x270>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	217a      	movs	r1, #122	; 0x7a
 8005e7c:	20d2      	movs	r0, #210	; 0xd2
 8005e7e:	f7fe fa41 	bl	8004304 <I2C_ByteRead>
  accel_bias_reg[1] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 1, rawADC, 2);
 8005e82:	4b2d      	ldr	r3, [pc, #180]	; (8005f38 <calibrateMPU9250+0x270>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	217d      	movs	r1, #125	; 0x7d
 8005e88:	9500      	str	r5, [sp, #0]
 8005e8a:	20d2      	movs	r0, #210	; 0xd2
 8005e8c:	f7fe fa3a 	bl	8004304 <I2C_ByteRead>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_L, 7, 8, data[5]);*/


// Output scaled accelerometer biases for manual subtraction in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8005e90:	4640      	mov	r0, r8
 8005e92:	f7fa feff 	bl	8000c94 <__aeabi_i2f>
 8005e96:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8005e9a:	f7fa ff4f 	bl	8000d3c <__aeabi_fmul>
 8005e9e:	f8c9 0000 	str.w	r0, [r9]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f7fa fef6 	bl	8000c94 <__aeabi_i2f>
 8005ea8:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8005eac:	f7fa ff46 	bl	8000d3c <__aeabi_fmul>
 8005eb0:	f8c9 0004 	str.w	r0, [r9, #4]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7fa feed 	bl	8000c94 <__aeabi_i2f>
 8005eba:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8005ebe:	f7fa ff3d 	bl	8000d3c <__aeabi_fmul>
 8005ec2:	f8c9 0008 	str.w	r0, [r9, #8]
}
 8005ec6:	b007      	add	sp, #28
 8005ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_FIFO_R_W, 1, rawADC, 12);// read data for averaging
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	; (8005f38 <calibrateMPU9250+0x270>)
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f8cd b000 	str.w	fp, [sp]
 8005ed4:	2174      	movs	r1, #116	; 0x74
 8005ed6:	20d2      	movs	r0, #210	; 0xd2
 8005ed8:	f7fe fa14 	bl	8004304 <I2C_ByteRead>
    accel_temp[0] = (int16_t) (((int16_t)rawADC[0] << 8) | rawADC[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8005edc:	782a      	ldrb	r2, [r5, #0]
 8005ede:	786b      	ldrb	r3, [r5, #1]
 8005ee0:	3401      	adds	r4, #1
 8005ee2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8005ee6:	b21b      	sxth	r3, r3
    accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 8005ee8:	78aa      	ldrb	r2, [r5, #2]
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8005eea:	4498      	add	r8, r3
    accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 8005eec:	78eb      	ldrb	r3, [r5, #3]
 8005eee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[1] += (int32_t) accel_temp[1];
 8005ef2:	b21b      	sxth	r3, r3
    accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 8005ef4:	792a      	ldrb	r2, [r5, #4]
    accel_bias[1] += (int32_t) accel_temp[1];
 8005ef6:	441f      	add	r7, r3
    accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 8005ef8:	796b      	ldrb	r3, [r5, #5]
 8005efa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[2] += (int32_t) accel_temp[2];
 8005efe:	9a02      	ldr	r2, [sp, #8]
 8005f00:	b21b      	sxth	r3, r3
 8005f02:	441a      	add	r2, r3
 8005f04:	9202      	str	r2, [sp, #8]
    gyro_temp[0]  = (int16_t) (((int16_t)rawADC[6] << 8) | rawADC[7]  ) ;
 8005f06:	79eb      	ldrb	r3, [r5, #7]
 8005f08:	79aa      	ldrb	r2, [r5, #6]
 8005f0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8005f0e:	9a03      	ldr	r2, [sp, #12]
 8005f10:	b21b      	sxth	r3, r3
 8005f12:	441a      	add	r2, r3
 8005f14:	9203      	str	r2, [sp, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)rawADC[8] << 8) | rawADC[9]  ) ;
 8005f16:	7a6b      	ldrb	r3, [r5, #9]
 8005f18:	7a2a      	ldrb	r2, [r5, #8]
 8005f1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8005f1e:	9a04      	ldr	r2, [sp, #16]
 8005f20:	b21b      	sxth	r3, r3
 8005f22:	441a      	add	r2, r3
 8005f24:	9204      	str	r2, [sp, #16]
    gyro_temp[2]  = (int16_t) (((int16_t)rawADC[10] << 8) | rawADC[11]) ;
 8005f26:	7aeb      	ldrb	r3, [r5, #11]
 8005f28:	7aaa      	ldrb	r2, [r5, #10]
 8005f2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8005f2e:	9a05      	ldr	r2, [sp, #20]
 8005f30:	b21b      	sxth	r3, r3
 8005f32:	441a      	add	r2, r3
 8005f34:	9205      	str	r2, [sp, #20]
 8005f36:	e765      	b.n	8005e04 <calibrateMPU9250+0x13c>
 8005f38:	200013d4 	.word	0x200013d4
 8005f3c:	43030000 	.word	0x43030000

08005f40 <initAK8963>:
void initAK8963(float * destination)
{
 8005f40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// First extract the factory calibration for each magnetometer axis
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8005f42:	2600      	movs	r6, #0
{
 8005f44:	4605      	mov	r5, r0
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8005f46:	2308      	movs	r3, #8
 8005f48:	2207      	movs	r2, #7
 8005f4a:	210a      	movs	r1, #10
 8005f4c:	9600      	str	r6, [sp, #0]
 8005f4e:	2018      	movs	r0, #24
 8005f50:	f7fe f9a2 	bl	8004298 <I2C_ByteWrite>
	  HAL_Delay(10);
 8005f54:	200a      	movs	r0, #10
 8005f56:	f7fb fac3 	bl	80014e0 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x0F);// Enter Fuse ROM access mode
 8005f5a:	230f      	movs	r3, #15
 8005f5c:	2207      	movs	r2, #7
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	210a      	movs	r1, #10
 8005f62:	2308      	movs	r3, #8
 8005f64:	2018      	movs	r0, #24
 8005f66:	f7fe f997 	bl	8004298 <I2C_ByteWrite>
	  HAL_Delay(10);
 8005f6a:	200a      	movs	r0, #10
 8005f6c:	f7fb fab8 	bl	80014e0 <HAL_Delay>
	  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, AK8963_ASAX, 1, rawADC, 3);// Read the x-, y-, and z-axis calibration values
 8005f70:	2303      	movs	r3, #3
 8005f72:	4c26      	ldr	r4, [pc, #152]	; (800600c <initAK8963+0xcc>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	2110      	movs	r1, #16
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	2018      	movs	r0, #24
 8005f7e:	f7fe f9c1 	bl	8004304 <I2C_ByteRead>
	  destination[0] =  (float)(rawADC[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8005f82:	7820      	ldrb	r0, [r4, #0]
 8005f84:	3880      	subs	r0, #128	; 0x80
 8005f86:	f7fa fe85 	bl	8000c94 <__aeabi_i2f>
 8005f8a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005f8e:	f7fa fed5 	bl	8000d3c <__aeabi_fmul>
 8005f92:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005f96:	f7fa fdc9 	bl	8000b2c <__addsf3>
 8005f9a:	6028      	str	r0, [r5, #0]
	  destination[1] =  (float)(rawADC[1] - 128)/256.0f + 1.0f;
 8005f9c:	7860      	ldrb	r0, [r4, #1]
 8005f9e:	3880      	subs	r0, #128	; 0x80
 8005fa0:	f7fa fe78 	bl	8000c94 <__aeabi_i2f>
 8005fa4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005fa8:	f7fa fec8 	bl	8000d3c <__aeabi_fmul>
 8005fac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005fb0:	f7fa fdbc 	bl	8000b2c <__addsf3>
 8005fb4:	6068      	str	r0, [r5, #4]
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 8005fb6:	78a0      	ldrb	r0, [r4, #2]
 8005fb8:	3880      	subs	r0, #128	; 0x80
 8005fba:	f7fa fe6b 	bl	8000c94 <__aeabi_i2f>
 8005fbe:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005fc2:	f7fa febb 	bl	8000d3c <__aeabi_fmul>
 8005fc6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005fca:	f7fa fdaf 	bl	8000b2c <__addsf3>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8005fce:	2308      	movs	r3, #8
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 8005fd0:	60a8      	str	r0, [r5, #8]
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8005fd2:	2207      	movs	r2, #7
 8005fd4:	210a      	movs	r1, #10
 8005fd6:	9600      	str	r6, [sp, #0]
 8005fd8:	2018      	movs	r0, #24
 8005fda:	f7fe f95d 	bl	8004298 <I2C_ByteWrite>
	  HAL_Delay(10);
 8005fde:	200a      	movs	r0, #10
 8005fe0:	f7fb fa7e 	bl	80014e0 <HAL_Delay>
	  // Configure the magnetometer for continuous read and highest resolution
	  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <initAK8963+0xd0>)
 8005fe6:	210a      	movs	r1, #10
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <initAK8963+0xd4>)
 8005fec:	2018      	movs	r0, #24
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	2207      	movs	r2, #7
 8005ffa:	2308      	movs	r3, #8
 8005ffc:	f7fe f94c 	bl	8004298 <I2C_ByteWrite>
	  HAL_Delay(10);
 8006000:	200a      	movs	r0, #10
}
 8006002:	b002      	add	sp, #8
 8006004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  HAL_Delay(10);
 8006008:	f7fb ba6a 	b.w	80014e0 <HAL_Delay>
 800600c:	200013d4 	.word	0x200013d4
 8006010:	20000009 	.word	0x20000009
 8006014:	20000008 	.word	0x20000008

08006018 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 8006018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t selfTest[6] = {0, 0, 0, 0, 0, 0};
   uint16_t i, ii;
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 800601c:	2400      	movs	r4, #0
   float factoryTrim[6];
   uint8_t FS = GFS_250DPS;

   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800601e:	2502      	movs	r5, #2
{
 8006020:	b097      	sub	sp, #92	; 0x5c
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8006022:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8006026:	ae0c      	add	r6, sp, #48	; 0x30
 8006028:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 800602c:	f8aa 4004 	strh.w	r4, [sl, #4]
 8006030:	80b4      	strh	r4, [r6, #4]
 8006032:	f8ab 4004 	strh.w	r4, [fp, #4]
{
 8006036:	9007      	str	r0, [sp, #28]
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 8006038:	9400      	str	r4, [sp, #0]
 800603a:	2308      	movs	r3, #8
 800603c:	2207      	movs	r2, #7
 800603e:	2119      	movs	r1, #25
 8006040:	20d2      	movs	r0, #210	; 0xd2
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8006042:	9408      	str	r4, [sp, #32]
 8006044:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8006048:	940a      	str	r4, [sp, #40]	; 0x28
 800604a:	940c      	str	r4, [sp, #48]	; 0x30
 800604c:	940e      	str	r4, [sp, #56]	; 0x38
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 800604e:	f7fe f923 	bl	8004298 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8006052:	9500      	str	r5, [sp, #0]
 8006054:	2308      	movs	r3, #8
 8006056:	2207      	movs	r2, #7
 8006058:	211a      	movs	r1, #26
 800605a:	20d2      	movs	r0, #210	; 0xd2
 800605c:	f7fe f91c 	bl	8004298 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, FS<<3);// Set full scale range for the gyro to 250 dps
 8006060:	9400      	str	r4, [sp, #0]
 8006062:	2308      	movs	r3, #8
 8006064:	2207      	movs	r2, #7
 8006066:	211b      	movs	r1, #27
 8006068:	20d2      	movs	r0, #210	; 0xd2
 800606a:	f7fe f915 	bl	8004298 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, 0x1D, 7, 8, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800606e:	9500      	str	r5, [sp, #0]
 8006070:	2308      	movs	r3, #8
 8006072:	2207      	movs	r2, #7
 8006074:	211d      	movs	r1, #29
 8006076:	20d2      	movs	r0, #210	; 0xd2
 8006078:	f7fe f90e 	bl	8004298 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, FS<<3);// Set full scale range for the accelerometer to 2 g
 800607c:	9400      	str	r4, [sp, #0]
 800607e:	2308      	movs	r3, #8
 8006080:	2207      	movs	r2, #7
 8006082:	211c      	movs	r1, #28
 8006084:	20d2      	movs	r0, #210	; 0xd2
 8006086:	f7fe f907 	bl	8004298 <I2C_ByteWrite>
 800608a:	25c8      	movs	r5, #200	; 0xc8

  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);  // Read the six raw data registers into data array
 800608c:	4ccc      	ldr	r4, [pc, #816]	; (80063c0 <MPU9250SelfTest+0x3a8>)
 800608e:	2706      	movs	r7, #6
 8006090:	4bcb      	ldr	r3, [pc, #812]	; (80063c0 <MPU9250SelfTest+0x3a8>)
 8006092:	2201      	movs	r2, #1
 8006094:	213b      	movs	r1, #59	; 0x3b
 8006096:	20d2      	movs	r0, #210	; 0xd2
 8006098:	9700      	str	r7, [sp, #0]
 800609a:	f7fe f933 	bl	8004304 <I2C_ByteRead>
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800609e:	7822      	ldrb	r2, [r4, #0]
 80060a0:	7863      	ldrb	r3, [r4, #1]
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 80060a2:	2143      	movs	r1, #67	; 0x43
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80060a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060a8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 80060ac:	20d2      	movs	r0, #210	; 0xd2
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80060ae:	4413      	add	r3, r2
 80060b0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 80060b4:	78a2      	ldrb	r2, [r4, #2]
 80060b6:	78e3      	ldrb	r3, [r4, #3]
 80060b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060bc:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80060c0:	4413      	add	r3, r2
 80060c2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 80060c6:	7922      	ldrb	r2, [r4, #4]
 80060c8:	7963      	ldrb	r3, [r4, #5]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 80060ca:	9700      	str	r7, [sp, #0]
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 80060cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060d0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80060d4:	4413      	add	r3, r2
 80060d6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 80060da:	2201      	movs	r2, #1
 80060dc:	4bb8      	ldr	r3, [pc, #736]	; (80063c0 <MPU9250SelfTest+0x3a8>)
 80060de:	f7fe f911 	bl	8004304 <I2C_ByteRead>
  gAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80060e2:	7822      	ldrb	r2, [r4, #0]
 80060e4:	7863      	ldrb	r3, [r4, #1]
 80060e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060ea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80060ee:	4413      	add	r3, r2
 80060f0:	f8ad 3020 	strh.w	r3, [sp, #32]
  gAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 80060f4:	78a2      	ldrb	r2, [r4, #2]
 80060f6:	78e3      	ldrb	r3, [r4, #3]
 80060f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060fc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8006100:	4413      	add	r3, r2
 8006102:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  gAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006106:	7922      	ldrb	r2, [r4, #4]
 8006108:	7963      	ldrb	r3, [r4, #5]
 800610a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800610e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8006112:	4413      	add	r3, r2
 8006114:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8006118:	1e6b      	subs	r3, r5, #1
 800611a:	b29d      	uxth	r5, r3
  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800611c:	2d00      	cmp	r5, #0
 800611e:	d1b6      	bne.n	800608e <MPU9250SelfTest+0x76>
 8006120:	462b      	mov	r3, r5
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
  aAvg[ii] /= 200;
 8006122:	21c8      	movs	r1, #200	; 0xc8
 8006124:	f93a 2013 	ldrsh.w	r2, [sl, r3, lsl #1]
  gAvg[ii] /= 200;
 8006128:	a808      	add	r0, sp, #32
  aAvg[ii] /= 200;
 800612a:	fb92 f2f1 	sdiv	r2, r2, r1
 800612e:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
  gAvg[ii] /= 200;
 8006132:	aa08      	add	r2, sp, #32
 8006134:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8006138:	fb92 f2f1 	sdiv	r2, r2, r1
 800613c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8006140:	3301      	adds	r3, #1
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8006142:	2b03      	cmp	r3, #3
 8006144:	d1ee      	bne.n	8006124 <MPU9250SelfTest+0x10c>
  }

// Configure the accelerometer for self-test
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8006146:	25e0      	movs	r5, #224	; 0xe0
 8006148:	2308      	movs	r3, #8
 800614a:	9500      	str	r5, [sp, #0]
 800614c:	2207      	movs	r2, #7
 800614e:	211c      	movs	r1, #28
 8006150:	20d2      	movs	r0, #210	; 0xd2
 8006152:	f7fe f8a1 	bl	8004298 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8006156:	9500      	str	r5, [sp, #0]
 8006158:	2308      	movs	r3, #8
 800615a:	2207      	movs	r2, #7
 800615c:	211b      	movs	r1, #27
 800615e:	20d2      	movs	r0, #210	; 0xd2
 8006160:	f7fe f89a 	bl	8004298 <I2C_ByteWrite>
   HAL_Delay(25); // Delay a while to let the device stabilize
 8006164:	2019      	movs	r0, #25
 8006166:	f7fb f9bb 	bl	80014e0 <HAL_Delay>
 800616a:	25c8      	movs	r5, #200	; 0xc8

  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6); // Read the six raw data registers into data array
 800616c:	4f94      	ldr	r7, [pc, #592]	; (80063c0 <MPU9250SelfTest+0x3a8>)
 800616e:	f04f 0806 	mov.w	r8, #6
 8006172:	463b      	mov	r3, r7
 8006174:	2201      	movs	r2, #1
 8006176:	213b      	movs	r1, #59	; 0x3b
 8006178:	20d2      	movs	r0, #210	; 0xd2
 800617a:	f8cd 8000 	str.w	r8, [sp]
 800617e:	f7fe f8c1 	bl	8004304 <I2C_ByteRead>
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006182:	7822      	ldrb	r2, [r4, #0]
 8006184:	7863      	ldrb	r3, [r4, #1]
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006186:	2143      	movs	r1, #67	; 0x43
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006188:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800618c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006190:	20d2      	movs	r0, #210	; 0xd2
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006192:	4413      	add	r3, r2
 8006194:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8006198:	78a2      	ldrb	r2, [r4, #2]
 800619a:	78e3      	ldrb	r3, [r4, #3]
 800619c:	3d01      	subs	r5, #1
 800619e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061a2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80061a6:	b2ad      	uxth	r5, r5
 80061a8:	4413      	add	r3, r2
 80061aa:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 80061ae:	7922      	ldrb	r2, [r4, #4]
 80061b0:	7963      	ldrb	r3, [r4, #5]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 80061b2:	f8cd 8000 	str.w	r8, [sp]
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 80061b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061ba:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80061be:	4413      	add	r3, r2
 80061c0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 80061c4:	2201      	movs	r2, #1
 80061c6:	463b      	mov	r3, r7
 80061c8:	f7fe f89c 	bl	8004304 <I2C_ByteRead>
  gSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80061cc:	7822      	ldrb	r2, [r4, #0]
 80061ce:	7863      	ldrb	r3, [r4, #1]
 80061d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061d4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80061d8:	4413      	add	r3, r2
 80061da:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  gSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 80061de:	78a2      	ldrb	r2, [r4, #2]
 80061e0:	78e3      	ldrb	r3, [r4, #3]
 80061e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061e6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80061ea:	4413      	add	r3, r2
 80061ec:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
  gSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 80061f0:	7922      	ldrb	r2, [r4, #4]
 80061f2:	7963      	ldrb	r3, [r4, #5]
 80061f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061f8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80061fc:	4413      	add	r3, r2
 80061fe:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8006202:	2d00      	cmp	r5, #0
 8006204:	d1b3      	bne.n	800616e <MPU9250SelfTest+0x156>
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
  aSTAvg[ii] /= 200;
 8006206:	22c8      	movs	r2, #200	; 0xc8
 8006208:	f936 3015 	ldrsh.w	r3, [r6, r5, lsl #1]
 800620c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006210:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
  gSTAvg[ii] /= 200;
 8006214:	f93b 3015 	ldrsh.w	r3, [fp, r5, lsl #1]
 8006218:	fb93 f3f2 	sdiv	r3, r3, r2
 800621c:	f82b 3015 	strh.w	r3, [fp, r5, lsl #1]
 8006220:	3501      	adds	r5, #1
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8006222:	2d03      	cmp	r5, #3
 8006224:	d1f0      	bne.n	8006208 <MPU9250SelfTest+0x1f0>
  }

 // Configure the gyro and accelerometer for normal operation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 8006226:	2400      	movs	r4, #0
 8006228:	2308      	movs	r3, #8
 800622a:	2207      	movs	r2, #7
 800622c:	211c      	movs	r1, #28
 800622e:	20d2      	movs	r0, #210	; 0xd2
 8006230:	9400      	str	r4, [sp, #0]
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
  HAL_Delay(25); // Delay a while to let the device stabilize

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 8006232:	4f63      	ldr	r7, [pc, #396]	; (80063c0 <MPU9250SelfTest+0x3a8>)
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 8006234:	f7fe f830 	bl	8004298 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
 8006238:	2308      	movs	r3, #8
 800623a:	2207      	movs	r2, #7
 800623c:	211b      	movs	r1, #27
 800623e:	20d2      	movs	r0, #210	; 0xd2
 8006240:	9400      	str	r4, [sp, #0]
 8006242:	f7fe f829 	bl	8004298 <I2C_ByteWrite>
  HAL_Delay(25); // Delay a while to let the device stabilize
 8006246:	2019      	movs	r0, #25
 8006248:	f7fb f94a 	bl	80014e0 <HAL_Delay>
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 800624c:	463b      	mov	r3, r7
 800624e:	9500      	str	r5, [sp, #0]
 8006250:	2201      	movs	r2, #1
 8006252:	210d      	movs	r1, #13
 8006254:	20d2      	movs	r0, #210	; 0xd2
 8006256:	f7fe f855 	bl	8004304 <I2C_ByteRead>
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 800625a:	78bb      	ldrb	r3, [r7, #2]
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
 800625c:	f897 9000 	ldrb.w	r9, [r7]
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
 8006260:	f897 8001 	ldrb.w	r8, [r7, #1]
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 8006264:	2201      	movs	r2, #1
 8006266:	4621      	mov	r1, r4
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 8006268:	9302      	str	r3, [sp, #8]
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 800626a:	9500      	str	r5, [sp, #0]
 800626c:	463b      	mov	r3, r7
 800626e:	20d2      	movs	r0, #210	; 0xd2
 8006270:	f7fe f848 	bl	8004304 <I2C_ByteRead>
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 8006274:	783b      	ldrb	r3, [r7, #0]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8006276:	4648      	mov	r0, r9
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 8006278:	9305      	str	r3, [sp, #20]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 800627a:	787b      	ldrb	r3, [r7, #1]
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results
 800627c:	78bd      	ldrb	r5, [r7, #2]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 800627e:	9306      	str	r3, [sp, #24]
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8006280:	f7fa fd04 	bl	8000c8c <__aeabi_ui2f>
 8006284:	f7fa f8d0 	bl	8000428 <__aeabi_f2d>
 8006288:	2200      	movs	r2, #0
 800628a:	4b4e      	ldr	r3, [pc, #312]	; (80063c4 <MPU9250SelfTest+0x3ac>)
 800628c:	f7f9 ff6c 	bl	8000168 <__aeabi_dsub>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	a146      	add	r1, pc, #280	; (adr r1, 80063b0 <MPU9250SelfTest+0x398>)
 8006296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800629a:	f005 fb91 	bl	800b9c0 <pow>
 800629e:	a346      	add	r3, pc, #280	; (adr r3, 80063b8 <MPU9250SelfTest+0x3a0>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7fa f914 	bl	80004d0 <__aeabi_dmul>
 80062a8:	f7fa fbea 	bl	8000a80 <__aeabi_d2f>
 80062ac:	9010      	str	r0, [sp, #64]	; 0x40
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 80062ae:	4640      	mov	r0, r8
 80062b0:	f7fa fcec 	bl	8000c8c <__aeabi_ui2f>
 80062b4:	f7fa f8b8 	bl	8000428 <__aeabi_f2d>
 80062b8:	2200      	movs	r2, #0
 80062ba:	4b42      	ldr	r3, [pc, #264]	; (80063c4 <MPU9250SelfTest+0x3ac>)
 80062bc:	f7f9 ff54 	bl	8000168 <__aeabi_dsub>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	a13a      	add	r1, pc, #232	; (adr r1, 80063b0 <MPU9250SelfTest+0x398>)
 80062c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ca:	f005 fb79 	bl	800b9c0 <pow>
 80062ce:	a33a      	add	r3, pc, #232	; (adr r3, 80063b8 <MPU9250SelfTest+0x3a0>)
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f7fa f8fc 	bl	80004d0 <__aeabi_dmul>
 80062d8:	f7fa fbd2 	bl	8000a80 <__aeabi_d2f>
 80062dc:	9011      	str	r0, [sp, #68]	; 0x44
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 80062de:	9802      	ldr	r0, [sp, #8]
 80062e0:	f7fa fcd4 	bl	8000c8c <__aeabi_ui2f>
 80062e4:	f7fa f8a0 	bl	8000428 <__aeabi_f2d>
 80062e8:	2200      	movs	r2, #0
 80062ea:	4b36      	ldr	r3, [pc, #216]	; (80063c4 <MPU9250SelfTest+0x3ac>)
 80062ec:	f7f9 ff3c 	bl	8000168 <__aeabi_dsub>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	a12e      	add	r1, pc, #184	; (adr r1, 80063b0 <MPU9250SelfTest+0x398>)
 80062f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062fa:	f005 fb61 	bl	800b9c0 <pow>
 80062fe:	a32e      	add	r3, pc, #184	; (adr r3, 80063b8 <MPU9250SelfTest+0x3a0>)
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f7fa f8e4 	bl	80004d0 <__aeabi_dmul>
 8006308:	f7fa fbba 	bl	8000a80 <__aeabi_d2f>
 800630c:	9012      	str	r0, [sp, #72]	; 0x48
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 800630e:	9805      	ldr	r0, [sp, #20]
 8006310:	f7fa fcbc 	bl	8000c8c <__aeabi_ui2f>
 8006314:	f7fa f888 	bl	8000428 <__aeabi_f2d>
 8006318:	2200      	movs	r2, #0
 800631a:	4b2a      	ldr	r3, [pc, #168]	; (80063c4 <MPU9250SelfTest+0x3ac>)
 800631c:	f7f9 ff24 	bl	8000168 <__aeabi_dsub>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	a122      	add	r1, pc, #136	; (adr r1, 80063b0 <MPU9250SelfTest+0x398>)
 8006326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800632a:	f005 fb49 	bl	800b9c0 <pow>
 800632e:	a322      	add	r3, pc, #136	; (adr r3, 80063b8 <MPU9250SelfTest+0x3a0>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f7fa f8cc 	bl	80004d0 <__aeabi_dmul>
 8006338:	f7fa fba2 	bl	8000a80 <__aeabi_d2f>
 800633c:	9013      	str	r0, [sp, #76]	; 0x4c
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 800633e:	9806      	ldr	r0, [sp, #24]
 8006340:	f7fa fca4 	bl	8000c8c <__aeabi_ui2f>
 8006344:	f7fa f870 	bl	8000428 <__aeabi_f2d>
 8006348:	2200      	movs	r2, #0
 800634a:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <MPU9250SelfTest+0x3ac>)
 800634c:	f7f9 ff0c 	bl	8000168 <__aeabi_dsub>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	a116      	add	r1, pc, #88	; (adr r1, 80063b0 <MPU9250SelfTest+0x398>)
 8006356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800635a:	f005 fb31 	bl	800b9c0 <pow>
 800635e:	a316      	add	r3, pc, #88	; (adr r3, 80063b8 <MPU9250SelfTest+0x3a0>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f7fa f8b4 	bl	80004d0 <__aeabi_dmul>
 8006368:	f7fa fb8a 	bl	8000a80 <__aeabi_d2f>
 800636c:	9014      	str	r0, [sp, #80]	; 0x50
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 800636e:	4628      	mov	r0, r5
 8006370:	f7fa fc8c 	bl	8000c8c <__aeabi_ui2f>
 8006374:	f7fa f858 	bl	8000428 <__aeabi_f2d>
 8006378:	2200      	movs	r2, #0
 800637a:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <MPU9250SelfTest+0x3ac>)
 800637c:	f7f9 fef4 	bl	8000168 <__aeabi_dsub>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	a10a      	add	r1, pc, #40	; (adr r1, 80063b0 <MPU9250SelfTest+0x398>)
 8006386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800638a:	f005 fb19 	bl	800b9c0 <pow>
 800638e:	a30a      	add	r3, pc, #40	; (adr r3, 80063b8 <MPU9250SelfTest+0x3a0>)
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f7fa f89c 	bl	80004d0 <__aeabi_dmul>
 8006398:	f7fa fb72 	bl	8000a80 <__aeabi_d2f>

 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (i = 0; i < 3; i++) {
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.0; // Report percent differences
 800639c:	f04f 0800 	mov.w	r8, #0
 80063a0:	9b07      	ldr	r3, [sp, #28]
 80063a2:	f8df 9024 	ldr.w	r9, [pc, #36]	; 80063c8 <MPU9250SelfTest+0x3b0>
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 80063a6:	9015      	str	r0, [sp, #84]	; 0x54
 80063a8:	af0f      	add	r7, sp, #60	; 0x3c
 80063aa:	1f1d      	subs	r5, r3, #4
 80063ac:	e00e      	b.n	80063cc <MPU9250SelfTest+0x3b4>
 80063ae:	bf00      	nop
 80063b0:	c28f5c29 	.word	0xc28f5c29
 80063b4:	3ff028f5 	.word	0x3ff028f5
 80063b8:	00000000 	.word	0x00000000
 80063bc:	40a47800 	.word	0x40a47800
 80063c0:	200013d4 	.word	0x200013d4
 80063c4:	3ff00000 	.word	0x3ff00000
 80063c8:	40590000 	.word	0x40590000
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.0; // Report percent differences
 80063cc:	f93a 3014 	ldrsh.w	r3, [sl, r4, lsl #1]
 80063d0:	f936 0014 	ldrsh.w	r0, [r6, r4, lsl #1]
 80063d4:	1ac0      	subs	r0, r0, r3
 80063d6:	f7fa fc5d 	bl	8000c94 <__aeabi_i2f>
 80063da:	f7fa f825 	bl	8000428 <__aeabi_f2d>
 80063de:	4642      	mov	r2, r8
 80063e0:	464b      	mov	r3, r9
 80063e2:	f7fa f875 	bl	80004d0 <__aeabi_dmul>
 80063e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ea:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80063ee:	f7fa f81b 	bl	8000428 <__aeabi_f2d>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063fa:	f7fa f993 	bl	8000724 <__aeabi_ddiv>
 80063fe:	4642      	mov	r2, r8
 8006400:	464b      	mov	r3, r9
 8006402:	f7f9 feb1 	bl	8000168 <__aeabi_dsub>
 8006406:	f7fa fb3b 	bl	8000a80 <__aeabi_d2f>
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.0; // Report percent differences
 800640a:	ab08      	add	r3, sp, #32
 800640c:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.0; // Report percent differences
 8006410:	f845 0f04 	str.w	r0, [r5, #4]!
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.0; // Report percent differences
 8006414:	f93b 0014 	ldrsh.w	r0, [fp, r4, lsl #1]
 8006418:	3401      	adds	r4, #1
 800641a:	1ac0      	subs	r0, r0, r3
 800641c:	f7fa fc3a 	bl	8000c94 <__aeabi_i2f>
 8006420:	f7fa f802 	bl	8000428 <__aeabi_f2d>
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	f7fa f852 	bl	80004d0 <__aeabi_dmul>
 800642c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7f9 fff9 	bl	8000428 <__aeabi_f2d>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800643e:	f7fa f971 	bl	8000724 <__aeabi_ddiv>
 8006442:	4642      	mov	r2, r8
 8006444:	464b      	mov	r3, r9
 8006446:	f7f9 fe8f 	bl	8000168 <__aeabi_dsub>
 800644a:	f7fa fb19 	bl	8000a80 <__aeabi_d2f>
   for (i = 0; i < 3; i++) {
 800644e:	2c03      	cmp	r4, #3
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.0; // Report percent differences
 8006450:	60e8      	str	r0, [r5, #12]
   for (i = 0; i < 3; i++) {
 8006452:	d1bb      	bne.n	80063cc <MPU9250SelfTest+0x3b4>
   }
}
 8006454:	b017      	add	sp, #92	; 0x5c
 8006456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645a:	bf00      	nop

0800645c <MPU9250_Init>:
{
 800645c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 8006460:	2401      	movs	r4, #1
 8006462:	4dc0      	ldr	r5, [pc, #768]	; (8006764 <MPU9250_Init+0x308>)
{
 8006464:	b085      	sub	sp, #20
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 8006466:	462b      	mov	r3, r5
 8006468:	4622      	mov	r2, r4
 800646a:	2175      	movs	r1, #117	; 0x75
 800646c:	20d2      	movs	r0, #210	; 0xd2
 800646e:	9400      	str	r4, [sp, #0]
 8006470:	f7fd ff48 	bl	8004304 <I2C_ByteRead>
    whoami = rawADC[0];
 8006474:	782e      	ldrb	r6, [r5, #0]
    sprintf(Buf, "I AM 0x%x\r\n", whoami);
 8006476:	49bc      	ldr	r1, [pc, #752]	; (8006768 <MPU9250_Init+0x30c>)
 8006478:	4632      	mov	r2, r6
 800647a:	48bc      	ldr	r0, [pc, #752]	; (800676c <MPU9250_Init+0x310>)
 800647c:	f002 fab6 	bl	80089ec <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006480:	48ba      	ldr	r0, [pc, #744]	; (800676c <MPU9250_Init+0x310>)
 8006482:	f7f9 fe65 	bl	8000150 <strlen>
 8006486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800648a:	b282      	uxth	r2, r0
 800648c:	49b7      	ldr	r1, [pc, #732]	; (800676c <MPU9250_Init+0x310>)
 800648e:	48b8      	ldr	r0, [pc, #736]	; (8006770 <MPU9250_Init+0x314>)
 8006490:	f7fd fc32 	bl	8003cf8 <HAL_UART_Transmit>
    sprintf(Buf, "I SHOULD BE 0x71\r\n");
 8006494:	49b7      	ldr	r1, [pc, #732]	; (8006774 <MPU9250_Init+0x318>)
 8006496:	48b5      	ldr	r0, [pc, #724]	; (800676c <MPU9250_Init+0x310>)
 8006498:	f002 facc 	bl	8008a34 <strcpy>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800649c:	48b3      	ldr	r0, [pc, #716]	; (800676c <MPU9250_Init+0x310>)
 800649e:	f7f9 fe57 	bl	8000150 <strlen>
 80064a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064a6:	b282      	uxth	r2, r0
 80064a8:	49b0      	ldr	r1, [pc, #704]	; (800676c <MPU9250_Init+0x310>)
 80064aa:	48b1      	ldr	r0, [pc, #708]	; (8006770 <MPU9250_Init+0x314>)
 80064ac:	f7fd fc24 	bl	8003cf8 <HAL_UART_Transmit>
  if(whoami == 0x71)
 80064b0:	2e71      	cmp	r6, #113	; 0x71
 80064b2:	f040 82a8 	bne.w	8006a06 <MPU9250_Init+0x5aa>
		sprintf(Buf, "MPU-9250 Init Start (9-DOF 16-bit mortion sensor)\r\nMPU-9250 SelfTest Start\r\n");
 80064b6:	49b0      	ldr	r1, [pc, #704]	; (8006778 <MPU9250_Init+0x31c>)
 80064b8:	48ac      	ldr	r0, [pc, #688]	; (800676c <MPU9250_Init+0x310>)
 80064ba:	f002 fabb 	bl	8008a34 <strcpy>
	  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80064be:	48ab      	ldr	r0, [pc, #684]	; (800676c <MPU9250_Init+0x310>)
 80064c0:	f7f9 fe46 	bl	8000150 <strlen>
 80064c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064c8:	b282      	uxth	r2, r0
 80064ca:	49a8      	ldr	r1, [pc, #672]	; (800676c <MPU9250_Init+0x310>)
 80064cc:	48a8      	ldr	r0, [pc, #672]	; (8006770 <MPU9250_Init+0x314>)
 80064ce:	f7fd fc13 	bl	8003cf8 <HAL_UART_Transmit>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 80064d2:	2380      	movs	r3, #128	; 0x80
	  MPU9250SelfTest(SelfTest);
 80064d4:	4ea9      	ldr	r6, [pc, #676]	; (800677c <MPU9250_Init+0x320>)
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 80064d6:	2207      	movs	r2, #7
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	216b      	movs	r1, #107	; 0x6b
 80064dc:	2308      	movs	r3, #8
 80064de:	20d2      	movs	r0, #210	; 0xd2
 80064e0:	f7fd feda 	bl	8004298 <I2C_ByteWrite>
	  MPU9250SelfTest(SelfTest);
 80064e4:	4630      	mov	r0, r6
 80064e6:	f7ff fd97 	bl	8006018 <MPU9250SelfTest>
		sprintf(Buf, "Self Test Finish\r\n");
 80064ea:	49a5      	ldr	r1, [pc, #660]	; (8006780 <MPU9250_Init+0x324>)
 80064ec:	489f      	ldr	r0, [pc, #636]	; (800676c <MPU9250_Init+0x310>)
 80064ee:	f002 faa1 	bl	8008a34 <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80064f2:	489e      	ldr	r0, [pc, #632]	; (800676c <MPU9250_Init+0x310>)
 80064f4:	f7f9 fe2c 	bl	8000150 <strlen>
 80064f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064fc:	b282      	uxth	r2, r0
 80064fe:	499b      	ldr	r1, [pc, #620]	; (800676c <MPU9250_Init+0x310>)
 8006500:	489b      	ldr	r0, [pc, #620]	; (8006770 <MPU9250_Init+0x314>)
 8006502:	f7fd fbf9 	bl	8003cf8 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006506:	2064      	movs	r0, #100	; 0x64
 8006508:	f7fa ffea 	bl	80014e0 <HAL_Delay>
		sprintf(Buf, " x-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[0]);
 800650c:	6830      	ldr	r0, [r6, #0]
 800650e:	f7f9 ff8b 	bl	8000428 <__aeabi_f2d>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4895      	ldr	r0, [pc, #596]	; (800676c <MPU9250_Init+0x310>)
 8006518:	499a      	ldr	r1, [pc, #616]	; (8006784 <MPU9250_Init+0x328>)
 800651a:	f002 fa67 	bl	80089ec <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800651e:	4893      	ldr	r0, [pc, #588]	; (800676c <MPU9250_Init+0x310>)
 8006520:	f7f9 fe16 	bl	8000150 <strlen>
 8006524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006528:	b282      	uxth	r2, r0
 800652a:	4990      	ldr	r1, [pc, #576]	; (800676c <MPU9250_Init+0x310>)
 800652c:	4890      	ldr	r0, [pc, #576]	; (8006770 <MPU9250_Init+0x314>)
 800652e:	f7fd fbe3 	bl	8003cf8 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006532:	2064      	movs	r0, #100	; 0x64
 8006534:	f7fa ffd4 	bl	80014e0 <HAL_Delay>
		sprintf(Buf, " y-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[1]);
 8006538:	6870      	ldr	r0, [r6, #4]
 800653a:	f7f9 ff75 	bl	8000428 <__aeabi_f2d>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	488a      	ldr	r0, [pc, #552]	; (800676c <MPU9250_Init+0x310>)
 8006544:	4990      	ldr	r1, [pc, #576]	; (8006788 <MPU9250_Init+0x32c>)
 8006546:	f002 fa51 	bl	80089ec <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800654a:	4888      	ldr	r0, [pc, #544]	; (800676c <MPU9250_Init+0x310>)
 800654c:	f7f9 fe00 	bl	8000150 <strlen>
 8006550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006554:	b282      	uxth	r2, r0
 8006556:	4985      	ldr	r1, [pc, #532]	; (800676c <MPU9250_Init+0x310>)
 8006558:	4885      	ldr	r0, [pc, #532]	; (8006770 <MPU9250_Init+0x314>)
 800655a:	f7fd fbcd 	bl	8003cf8 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800655e:	2064      	movs	r0, #100	; 0x64
 8006560:	f7fa ffbe 	bl	80014e0 <HAL_Delay>
		sprintf(Buf, " z-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[2]);
 8006564:	68b0      	ldr	r0, [r6, #8]
 8006566:	f7f9 ff5f 	bl	8000428 <__aeabi_f2d>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	487f      	ldr	r0, [pc, #508]	; (800676c <MPU9250_Init+0x310>)
 8006570:	4986      	ldr	r1, [pc, #536]	; (800678c <MPU9250_Init+0x330>)
 8006572:	f002 fa3b 	bl	80089ec <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006576:	487d      	ldr	r0, [pc, #500]	; (800676c <MPU9250_Init+0x310>)
 8006578:	f7f9 fdea 	bl	8000150 <strlen>
 800657c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006580:	b282      	uxth	r2, r0
 8006582:	497a      	ldr	r1, [pc, #488]	; (800676c <MPU9250_Init+0x310>)
 8006584:	487a      	ldr	r0, [pc, #488]	; (8006770 <MPU9250_Init+0x314>)
 8006586:	f7fd fbb7 	bl	8003cf8 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800658a:	2064      	movs	r0, #100	; 0x64
 800658c:	f7fa ffa8 	bl	80014e0 <HAL_Delay>
		sprintf(Buf, " x-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[3]);
 8006590:	68f0      	ldr	r0, [r6, #12]
 8006592:	f7f9 ff49 	bl	8000428 <__aeabi_f2d>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4874      	ldr	r0, [pc, #464]	; (800676c <MPU9250_Init+0x310>)
 800659c:	497c      	ldr	r1, [pc, #496]	; (8006790 <MPU9250_Init+0x334>)
 800659e:	f002 fa25 	bl	80089ec <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80065a2:	4872      	ldr	r0, [pc, #456]	; (800676c <MPU9250_Init+0x310>)
 80065a4:	f7f9 fdd4 	bl	8000150 <strlen>
 80065a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065ac:	b282      	uxth	r2, r0
 80065ae:	496f      	ldr	r1, [pc, #444]	; (800676c <MPU9250_Init+0x310>)
 80065b0:	486f      	ldr	r0, [pc, #444]	; (8006770 <MPU9250_Init+0x314>)
 80065b2:	f7fd fba1 	bl	8003cf8 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80065b6:	2064      	movs	r0, #100	; 0x64
 80065b8:	f7fa ff92 	bl	80014e0 <HAL_Delay>
		sprintf(Buf, " y-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[4]);
 80065bc:	6930      	ldr	r0, [r6, #16]
 80065be:	f7f9 ff33 	bl	8000428 <__aeabi_f2d>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4869      	ldr	r0, [pc, #420]	; (800676c <MPU9250_Init+0x310>)
 80065c8:	4972      	ldr	r1, [pc, #456]	; (8006794 <MPU9250_Init+0x338>)
 80065ca:	f002 fa0f 	bl	80089ec <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80065ce:	4867      	ldr	r0, [pc, #412]	; (800676c <MPU9250_Init+0x310>)
 80065d0:	f7f9 fdbe 	bl	8000150 <strlen>
 80065d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065d8:	b282      	uxth	r2, r0
 80065da:	4964      	ldr	r1, [pc, #400]	; (800676c <MPU9250_Init+0x310>)
 80065dc:	4864      	ldr	r0, [pc, #400]	; (8006770 <MPU9250_Init+0x314>)
 80065de:	f7fd fb8b 	bl	8003cf8 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80065e2:	2064      	movs	r0, #100	; 0x64
 80065e4:	f7fa ff7c 	bl	80014e0 <HAL_Delay>
		sprintf(Buf, " z-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[5]);
 80065e8:	6970      	ldr	r0, [r6, #20]
 80065ea:	f7f9 ff1d 	bl	8000428 <__aeabi_f2d>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	485e      	ldr	r0, [pc, #376]	; (800676c <MPU9250_Init+0x310>)
 80065f4:	4968      	ldr	r1, [pc, #416]	; (8006798 <MPU9250_Init+0x33c>)
 80065f6:	f002 f9f9 	bl	80089ec <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80065fa:	485c      	ldr	r0, [pc, #368]	; (800676c <MPU9250_Init+0x310>)
 80065fc:	f7f9 fda8 	bl	8000150 <strlen>
 8006600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006604:	b282      	uxth	r2, r0
 8006606:	4959      	ldr	r1, [pc, #356]	; (800676c <MPU9250_Init+0x310>)
 8006608:	4859      	ldr	r0, [pc, #356]	; (8006770 <MPU9250_Init+0x314>)
 800660a:	f7fd fb75 	bl	8003cf8 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800660e:	2064      	movs	r0, #100	; 0x64
 8006610:	f7fa ff66 	bl	80014e0 <HAL_Delay>
		sprintf(Buf, "MPU-9250 Calibration Start\r\n");
 8006614:	4961      	ldr	r1, [pc, #388]	; (800679c <MPU9250_Init+0x340>)
 8006616:	4855      	ldr	r0, [pc, #340]	; (800676c <MPU9250_Init+0x310>)
 8006618:	f002 fa0c 	bl	8008a34 <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800661c:	4853      	ldr	r0, [pc, #332]	; (800676c <MPU9250_Init+0x310>)
 800661e:	f7f9 fd97 	bl	8000150 <strlen>
	  calibrateMPU9250(gyroBias, accBias);
 8006622:	4f5f      	ldr	r7, [pc, #380]	; (80067a0 <MPU9250_Init+0x344>)
 8006624:	4e5f      	ldr	r6, [pc, #380]	; (80067a4 <MPU9250_Init+0x348>)
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006626:	b282      	uxth	r2, r0
 8006628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800662c:	494f      	ldr	r1, [pc, #316]	; (800676c <MPU9250_Init+0x310>)
 800662e:	4850      	ldr	r0, [pc, #320]	; (8006770 <MPU9250_Init+0x314>)
 8006630:	f7fd fb62 	bl	8003cf8 <HAL_UART_Transmit>
	  calibrateMPU9250(gyroBias, accBias);
 8006634:	4639      	mov	r1, r7
 8006636:	4630      	mov	r0, r6
 8006638:	f7ff fb46 	bl	8005cc8 <calibrateMPU9250>
		sprintf(Buf, "Calibration Finish\r\n");
 800663c:	495a      	ldr	r1, [pc, #360]	; (80067a8 <MPU9250_Init+0x34c>)
 800663e:	484b      	ldr	r0, [pc, #300]	; (800676c <MPU9250_Init+0x310>)
 8006640:	f002 f9f8 	bl	8008a34 <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006644:	4849      	ldr	r0, [pc, #292]	; (800676c <MPU9250_Init+0x310>)
 8006646:	f7f9 fd83 	bl	8000150 <strlen>
 800664a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800664e:	b282      	uxth	r2, r0
 8006650:	4946      	ldr	r1, [pc, #280]	; (800676c <MPU9250_Init+0x310>)
 8006652:	4847      	ldr	r0, [pc, #284]	; (8006770 <MPU9250_Init+0x314>)
 8006654:	f7fd fb50 	bl	8003cf8 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006658:	2064      	movs	r0, #100	; 0x64
 800665a:	f7fa ff41 	bl	80014e0 <HAL_Delay>
		sprintf(Buf, "   x       y      z\r\n");
 800665e:	4953      	ldr	r1, [pc, #332]	; (80067ac <MPU9250_Init+0x350>)
 8006660:	4842      	ldr	r0, [pc, #264]	; (800676c <MPU9250_Init+0x310>)
 8006662:	f002 f9e7 	bl	8008a34 <strcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006666:	4841      	ldr	r0, [pc, #260]	; (800676c <MPU9250_Init+0x310>)
 8006668:	f7f9 fd72 	bl	8000150 <strlen>
 800666c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006670:	b282      	uxth	r2, r0
 8006672:	493e      	ldr	r1, [pc, #248]	; (800676c <MPU9250_Init+0x310>)
 8006674:	483e      	ldr	r0, [pc, #248]	; (8006770 <MPU9250_Init+0x314>)
 8006676:	f7fd fb3f 	bl	8003cf8 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800667a:	2064      	movs	r0, #100	; 0x64
 800667c:	f7fa ff30 	bl	80014e0 <HAL_Delay>
		sprintf(Buf, " %.2f   %.2f   %.2f mg\r\n", 1000*accBias[0], 1000*accBias[1], 1000*accBias[2]);
 8006680:	6838      	ldr	r0, [r7, #0]
 8006682:	494b      	ldr	r1, [pc, #300]	; (80067b0 <MPU9250_Init+0x354>)
 8006684:	f7fa fb5a 	bl	8000d3c <__aeabi_fmul>
 8006688:	f7f9 fece 	bl	8000428 <__aeabi_f2d>
 800668c:	4680      	mov	r8, r0
 800668e:	4689      	mov	r9, r1
 8006690:	68b8      	ldr	r0, [r7, #8]
 8006692:	4947      	ldr	r1, [pc, #284]	; (80067b0 <MPU9250_Init+0x354>)
 8006694:	f7fa fb52 	bl	8000d3c <__aeabi_fmul>
 8006698:	f7f9 fec6 	bl	8000428 <__aeabi_f2d>
 800669c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	4943      	ldr	r1, [pc, #268]	; (80067b0 <MPU9250_Init+0x354>)
 80066a4:	f7fa fb4a 	bl	8000d3c <__aeabi_fmul>
 80066a8:	f7f9 febe 	bl	8000428 <__aeabi_f2d>
 80066ac:	4642      	mov	r2, r8
 80066ae:	e9cd 0100 	strd	r0, r1, [sp]
 80066b2:	464b      	mov	r3, r9
 80066b4:	493f      	ldr	r1, [pc, #252]	; (80067b4 <MPU9250_Init+0x358>)
 80066b6:	482d      	ldr	r0, [pc, #180]	; (800676c <MPU9250_Init+0x310>)
 80066b8:	f002 f998 	bl	80089ec <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80066bc:	482b      	ldr	r0, [pc, #172]	; (800676c <MPU9250_Init+0x310>)
 80066be:	f7f9 fd47 	bl	8000150 <strlen>
 80066c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066c6:	b282      	uxth	r2, r0
 80066c8:	4928      	ldr	r1, [pc, #160]	; (800676c <MPU9250_Init+0x310>)
 80066ca:	4829      	ldr	r0, [pc, #164]	; (8006770 <MPU9250_Init+0x314>)
 80066cc:	f7fd fb14 	bl	8003cf8 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80066d0:	2064      	movs	r0, #100	; 0x64
 80066d2:	f7fa ff05 	bl	80014e0 <HAL_Delay>
		sprintf(Buf, " %.2f   %.2f   %.2f o/s\r\n", gyroBias[0], gyroBias[1], gyroBias[2]);
 80066d6:	6830      	ldr	r0, [r6, #0]
 80066d8:	f7f9 fea6 	bl	8000428 <__aeabi_f2d>
 80066dc:	4680      	mov	r8, r0
 80066de:	68b0      	ldr	r0, [r6, #8]
 80066e0:	4689      	mov	r9, r1
 80066e2:	f7f9 fea1 	bl	8000428 <__aeabi_f2d>
 80066e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ea:	6870      	ldr	r0, [r6, #4]
 80066ec:	f7f9 fe9c 	bl	8000428 <__aeabi_f2d>
 80066f0:	4642      	mov	r2, r8
 80066f2:	e9cd 0100 	strd	r0, r1, [sp]
 80066f6:	464b      	mov	r3, r9
 80066f8:	492f      	ldr	r1, [pc, #188]	; (80067b8 <MPU9250_Init+0x35c>)
 80066fa:	481c      	ldr	r0, [pc, #112]	; (800676c <MPU9250_Init+0x310>)
 80066fc:	f002 f976 	bl	80089ec <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006700:	481a      	ldr	r0, [pc, #104]	; (800676c <MPU9250_Init+0x310>)
 8006702:	f7f9 fd25 	bl	8000150 <strlen>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 8006706:	2700      	movs	r7, #0
		HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006708:	b282      	uxth	r2, r0
 800670a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800670e:	4917      	ldr	r1, [pc, #92]	; (800676c <MPU9250_Init+0x310>)
 8006710:	4817      	ldr	r0, [pc, #92]	; (8006770 <MPU9250_Init+0x314>)
 8006712:	f7fd faf1 	bl	8003cf8 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8006716:	2064      	movs	r0, #100	; 0x64
 8006718:	f7fa fee2 	bl	80014e0 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 800671c:	2308      	movs	r3, #8
 800671e:	2207      	movs	r2, #7
 8006720:	216b      	movs	r1, #107	; 0x6b
 8006722:	9700      	str	r7, [sp, #0]
 8006724:	20d2      	movs	r0, #210	; 0xd2
 8006726:	f7fd fdb7 	bl	8004298 <I2C_ByteWrite>
    HAL_Delay(100); // for stability
 800672a:	2064      	movs	r0, #100	; 0x64
 800672c:	f7fa fed8 	bl	80014e0 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001;
 8006730:	9400      	str	r4, [sp, #0]
 8006732:	2308      	movs	r3, #8
 8006734:	2207      	movs	r2, #7
 8006736:	216b      	movs	r1, #107	; 0x6b
 8006738:	20d2      	movs	r0, #210	; 0xd2
 800673a:	f7fd fdad 	bl	8004298 <I2C_ByteWrite>
    HAL_Delay(200); // for stability
 800673e:	20c8      	movs	r0, #200	; 0xc8
 8006740:	f7fa fece 	bl	80014e0 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, MPU9250_DLPF_BW_42); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 8006744:	2303      	movs	r3, #3
 8006746:	2207      	movs	r2, #7
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	211a      	movs	r1, #26
 800674c:	2308      	movs	r3, #8
 800674e:	20d2      	movs	r0, #210	; 0xd2
 8006750:	f7fd fda2 	bl	8004298 <I2C_ByteWrite>
	  HAL_Delay(100);
 8006754:	2064      	movs	r0, #100	; 0x64
 8006756:	f7fa fec3 	bl	80014e0 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x04);  //0x00 SMPLRT_DIV    -- SMPLRT_DIV = 0  Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
 800675a:	2304      	movs	r3, #4
 800675c:	2207      	movs	r2, #7
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	e02c      	b.n	80067bc <MPU9250_Init+0x360>
 8006762:	bf00      	nop
 8006764:	200013d4 	.word	0x200013d4
 8006768:	0800dc1b 	.word	0x0800dc1b
 800676c:	200013e0 	.word	0x200013e0
 8006770:	20001724 	.word	0x20001724
 8006774:	0800dc27 	.word	0x0800dc27
 8006778:	0800dc3a 	.word	0x0800dc3a
 800677c:	20000af8 	.word	0x20000af8
 8006780:	0800dc87 	.word	0x0800dc87
 8006784:	0800dc9a 	.word	0x0800dc9a
 8006788:	0800dce6 	.word	0x0800dce6
 800678c:	0800dd32 	.word	0x0800dd32
 8006790:	0800dd7e 	.word	0x0800dd7e
 8006794:	0800ddc6 	.word	0x0800ddc6
 8006798:	0800de0e 	.word	0x0800de0e
 800679c:	0800de56 	.word	0x0800de56
 80067a0:	20000b1c 	.word	0x20000b1c
 80067a4:	20000c00 	.word	0x20000c00
 80067a8:	0800de73 	.word	0x0800de73
 80067ac:	0800de88 	.word	0x0800de88
 80067b0:	447a0000 	.word	0x447a0000
 80067b4:	0800de9e 	.word	0x0800de9e
 80067b8:	0800deb7 	.word	0x0800deb7
 80067bc:	2119      	movs	r1, #25
 80067be:	2308      	movs	r3, #8
 80067c0:	20d2      	movs	r0, #210	; 0xd2
 80067c2:	f7fd fd69 	bl	8004298 <I2C_ByteWrite>
	  HAL_Delay(100);
 80067c6:	2064      	movs	r0, #100	; 0x64
 80067c8:	f7fa fe8a 	bl	80014e0 <HAL_Delay>
	  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 1, rawADC, 1);
 80067cc:	9400      	str	r4, [sp, #0]
 80067ce:	462b      	mov	r3, r5
 80067d0:	4622      	mov	r2, r4
 80067d2:	211b      	movs	r1, #27
 80067d4:	20d2      	movs	r0, #210	; 0xd2
 80067d6:	f7fd fd95 	bl	8004304 <I2C_ByteRead>
	  c = c | Gscale << 3; // Set full scale range for the gyro
 80067da:	4ba0      	ldr	r3, [pc, #640]	; (8006a5c <MPU9250_Init+0x600>)
	  uint8_t c = rawADC[0];
 80067dc:	782e      	ldrb	r6, [r5, #0]
	  c = c | Gscale << 3; // Set full scale range for the gyro
 80067de:	781b      	ldrb	r3, [r3, #0]
	  c = c & ~0x18; // Clear AFS bits [4:3]
 80067e0:	f026 061a 	bic.w	r6, r6, #26
	  c = c | Gscale << 3; // Set full scale range for the gyro
 80067e4:	ea46 06c3 	orr.w	r6, r6, r3, lsl #3
 80067e8:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
    sprintf(Buf, " GYRO : %d \r\n", c);
 80067ec:	4632      	mov	r2, r6
 80067ee:	499c      	ldr	r1, [pc, #624]	; (8006a60 <MPU9250_Init+0x604>)
 80067f0:	489c      	ldr	r0, [pc, #624]	; (8006a64 <MPU9250_Init+0x608>)
 80067f2:	f002 f8fb 	bl	80089ec <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80067f6:	489b      	ldr	r0, [pc, #620]	; (8006a64 <MPU9250_Init+0x608>)
 80067f8:	f7f9 fcaa 	bl	8000150 <strlen>
 80067fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006800:	b282      	uxth	r2, r0
 8006802:	4998      	ldr	r1, [pc, #608]	; (8006a64 <MPU9250_Init+0x608>)
 8006804:	4898      	ldr	r0, [pc, #608]	; (8006a68 <MPU9250_Init+0x60c>)
 8006806:	f7fd fa77 	bl	8003cf8 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, c);
 800680a:	9600      	str	r6, [sp, #0]
 800680c:	2308      	movs	r3, #8
 800680e:	2207      	movs	r2, #7
 8006810:	211b      	movs	r1, #27
 8006812:	20d2      	movs	r0, #210	; 0xd2
 8006814:	f7fd fd40 	bl	8004298 <I2C_ByteWrite>
	  HAL_Delay(100);
 8006818:	2064      	movs	r0, #100	; 0x64
 800681a:	f7fa fe61 	bl	80014e0 <HAL_Delay>
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 1, rawADC, 1);
 800681e:	9400      	str	r4, [sp, #0]
 8006820:	462b      	mov	r3, r5
 8006822:	4622      	mov	r2, r4
 8006824:	211c      	movs	r1, #28
 8006826:	20d2      	movs	r0, #210	; 0xd2
 8006828:	f7fd fd6c 	bl	8004304 <I2C_ByteRead>
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 800682c:	4b8f      	ldr	r3, [pc, #572]	; (8006a6c <MPU9250_Init+0x610>)
    c = rawADC[0];
 800682e:	782e      	ldrb	r6, [r5, #0]
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 8006830:	781b      	ldrb	r3, [r3, #0]
    c = c & ~0x18;  // Clear AFS bits [4:3]
 8006832:	f026 0618 	bic.w	r6, r6, #24
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 8006836:	ea46 06c3 	orr.w	r6, r6, r3, lsl #3
 800683a:	b2f6      	uxtb	r6, r6
    sprintf(Buf, " ACEL : %d \r\n", c);
 800683c:	4632      	mov	r2, r6
 800683e:	498c      	ldr	r1, [pc, #560]	; (8006a70 <MPU9250_Init+0x614>)
 8006840:	4888      	ldr	r0, [pc, #544]	; (8006a64 <MPU9250_Init+0x608>)
 8006842:	f002 f8d3 	bl	80089ec <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006846:	4887      	ldr	r0, [pc, #540]	; (8006a64 <MPU9250_Init+0x608>)
 8006848:	f7f9 fc82 	bl	8000150 <strlen>
 800684c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006850:	b282      	uxth	r2, r0
 8006852:	4984      	ldr	r1, [pc, #528]	; (8006a64 <MPU9250_Init+0x608>)
 8006854:	4884      	ldr	r0, [pc, #528]	; (8006a68 <MPU9250_Init+0x60c>)
 8006856:	f7fd fa4f 	bl	8003cf8 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, c);
 800685a:	9600      	str	r6, [sp, #0]
 800685c:	2308      	movs	r3, #8
 800685e:	2207      	movs	r2, #7
 8006860:	211c      	movs	r1, #28
 8006862:	20d2      	movs	r0, #210	; 0xd2
 8006864:	f7fd fd18 	bl	8004298 <I2C_ByteWrite>
	  HAL_Delay(100);
 8006868:	2064      	movs	r0, #100	; 0x64
 800686a:	f7fa fe39 	bl	80014e0 <HAL_Delay>
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 1, rawADC, 1);
 800686e:	462b      	mov	r3, r5
 8006870:	9400      	str	r4, [sp, #0]
 8006872:	4622      	mov	r2, r4
 8006874:	211d      	movs	r1, #29
 8006876:	20d2      	movs	r0, #210	; 0xd2
 8006878:	f7fd fd44 	bl	8004304 <I2C_ByteRead>
    c = rawADC[0];
 800687c:	782e      	ldrb	r6, [r5, #0]
    sprintf(Buf, " ACEL2 : %d \r\n", c);
 800687e:	497d      	ldr	r1, [pc, #500]	; (8006a74 <MPU9250_Init+0x618>)
    c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8006880:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8006884:	f046 0603 	orr.w	r6, r6, #3
    sprintf(Buf, " ACEL2 : %d \r\n", c);
 8006888:	4632      	mov	r2, r6
 800688a:	4876      	ldr	r0, [pc, #472]	; (8006a64 <MPU9250_Init+0x608>)
 800688c:	f002 f8ae 	bl	80089ec <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006890:	4874      	ldr	r0, [pc, #464]	; (8006a64 <MPU9250_Init+0x608>)
 8006892:	f7f9 fc5d 	bl	8000150 <strlen>
 8006896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800689a:	b282      	uxth	r2, r0
 800689c:	4971      	ldr	r1, [pc, #452]	; (8006a64 <MPU9250_Init+0x608>)
 800689e:	4872      	ldr	r0, [pc, #456]	; (8006a68 <MPU9250_Init+0x60c>)
 80068a0:	f7fd fa2a 	bl	8003cf8 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, c);
 80068a4:	2308      	movs	r3, #8
 80068a6:	2207      	movs	r2, #7
 80068a8:	211d      	movs	r1, #29
 80068aa:	9600      	str	r6, [sp, #0]
 80068ac:	20d2      	movs	r0, #210	; 0xd2
 80068ae:	f7fd fcf3 	bl	8004298 <I2C_ByteWrite>
		HAL_Delay(100);
 80068b2:	2064      	movs	r0, #100	; 0x64
 80068b4:	f7fa fe14 	bl	80014e0 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_PIN_CFG, 7, 8, 0x22);
 80068b8:	2322      	movs	r3, #34	; 0x22
 80068ba:	2207      	movs	r2, #7
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	2137      	movs	r1, #55	; 0x37
 80068c0:	2308      	movs	r3, #8
 80068c2:	20d2      	movs	r0, #210	; 0xd2
 80068c4:	f7fd fce8 	bl	8004298 <I2C_ByteWrite>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x01);
 80068c8:	2308      	movs	r3, #8
 80068ca:	2207      	movs	r2, #7
 80068cc:	9400      	str	r4, [sp, #0]
 80068ce:	2138      	movs	r1, #56	; 0x38
 80068d0:	20d2      	movs	r0, #210	; 0xd2
 80068d2:	f7fd fce1 	bl	8004298 <I2C_ByteWrite>
	HAL_Delay(100); // for stability
 80068d6:	2064      	movs	r0, #100	; 0x64
 80068d8:	f7fa fe02 	bl	80014e0 <HAL_Delay>
  sprintf(Buf, "AK8963 Init Start!\r\n");
 80068dc:	4966      	ldr	r1, [pc, #408]	; (8006a78 <MPU9250_Init+0x61c>)
 80068de:	4861      	ldr	r0, [pc, #388]	; (8006a64 <MPU9250_Init+0x608>)
 80068e0:	f002 f8a8 	bl	8008a34 <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80068e4:	485f      	ldr	r0, [pc, #380]	; (8006a64 <MPU9250_Init+0x608>)
 80068e6:	f7f9 fc33 	bl	8000150 <strlen>
 80068ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068ee:	b282      	uxth	r2, r0
 80068f0:	495c      	ldr	r1, [pc, #368]	; (8006a64 <MPU9250_Init+0x608>)
 80068f2:	485d      	ldr	r0, [pc, #372]	; (8006a68 <MPU9250_Init+0x60c>)
 80068f4:	f7fd fa00 	bl	8003cf8 <HAL_UART_Transmit>
  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, WHO_AM_I_AK8963, 1, rawADC, 1);
 80068f8:	462b      	mov	r3, r5
 80068fa:	9400      	str	r4, [sp, #0]
 80068fc:	4622      	mov	r2, r4
 80068fe:	4639      	mov	r1, r7
 8006900:	2018      	movs	r0, #24
 8006902:	f7fd fcff 	bl	8004304 <I2C_ByteRead>
  sprintf(Buf, "I AM 0x%x\r\n", whoami);
 8006906:	782a      	ldrb	r2, [r5, #0]
 8006908:	495c      	ldr	r1, [pc, #368]	; (8006a7c <MPU9250_Init+0x620>)
 800690a:	4856      	ldr	r0, [pc, #344]	; (8006a64 <MPU9250_Init+0x608>)
 800690c:	f002 f86e 	bl	80089ec <sprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006910:	4854      	ldr	r0, [pc, #336]	; (8006a64 <MPU9250_Init+0x608>)
 8006912:	f7f9 fc1d 	bl	8000150 <strlen>
 8006916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800691a:	b282      	uxth	r2, r0
 800691c:	4951      	ldr	r1, [pc, #324]	; (8006a64 <MPU9250_Init+0x608>)
 800691e:	4852      	ldr	r0, [pc, #328]	; (8006a68 <MPU9250_Init+0x60c>)
 8006920:	f7fd f9ea 	bl	8003cf8 <HAL_UART_Transmit>
  sprintf(Buf, "I SHOULD BE 0x48\r\n");
 8006924:	4956      	ldr	r1, [pc, #344]	; (8006a80 <MPU9250_Init+0x624>)
 8006926:	484f      	ldr	r0, [pc, #316]	; (8006a64 <MPU9250_Init+0x608>)
 8006928:	f002 f884 	bl	8008a34 <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800692c:	484d      	ldr	r0, [pc, #308]	; (8006a64 <MPU9250_Init+0x608>)
 800692e:	f7f9 fc0f 	bl	8000150 <strlen>
 8006932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006936:	b282      	uxth	r2, r0
 8006938:	494a      	ldr	r1, [pc, #296]	; (8006a64 <MPU9250_Init+0x608>)
 800693a:	484b      	ldr	r0, [pc, #300]	; (8006a68 <MPU9250_Init+0x60c>)
 800693c:	f7fd f9dc 	bl	8003cf8 <HAL_UART_Transmit>
	sprintf(Buf, "AK8963 Init (Compass sensor)\r\n");
 8006940:	4950      	ldr	r1, [pc, #320]	; (8006a84 <MPU9250_Init+0x628>)
 8006942:	4848      	ldr	r0, [pc, #288]	; (8006a64 <MPU9250_Init+0x608>)
 8006944:	f002 f876 	bl	8008a34 <strcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006948:	4846      	ldr	r0, [pc, #280]	; (8006a64 <MPU9250_Init+0x608>)
 800694a:	f7f9 fc01 	bl	8000150 <strlen>
	initAK8963(magCalibration);
 800694e:	4c4e      	ldr	r4, [pc, #312]	; (8006a88 <MPU9250_Init+0x62c>)
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006950:	b282      	uxth	r2, r0
 8006952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006956:	4943      	ldr	r1, [pc, #268]	; (8006a64 <MPU9250_Init+0x608>)
 8006958:	4843      	ldr	r0, [pc, #268]	; (8006a68 <MPU9250_Init+0x60c>)
 800695a:	f7fd f9cd 	bl	8003cf8 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 800695e:	2064      	movs	r0, #100	; 0x64
 8006960:	f7fa fdbe 	bl	80014e0 <HAL_Delay>
	initAK8963(magCalibration);
 8006964:	4620      	mov	r0, r4
 8006966:	f7ff faeb 	bl	8005f40 <initAK8963>
	HAL_Delay(100); // for stability
 800696a:	2064      	movs	r0, #100	; 0x64
 800696c:	f7fa fdb8 	bl	80014e0 <HAL_Delay>
  getAres();
 8006970:	f7fe ffb0 	bl	80058d4 <getAres>
  getGres();
 8006974:	f7fe ff90 	bl	8005898 <getGres>
  getMres();
 8006978:	f7fe ff7a 	bl	8005870 <getMres>
	sprintf(Buf, "ASAX : %.2f\r\n", magCalibration[0]);
 800697c:	6820      	ldr	r0, [r4, #0]
 800697e:	f7f9 fd53 	bl	8000428 <__aeabi_f2d>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4837      	ldr	r0, [pc, #220]	; (8006a64 <MPU9250_Init+0x608>)
 8006988:	4940      	ldr	r1, [pc, #256]	; (8006a8c <MPU9250_Init+0x630>)
 800698a:	f002 f82f 	bl	80089ec <sprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800698e:	4835      	ldr	r0, [pc, #212]	; (8006a64 <MPU9250_Init+0x608>)
 8006990:	f7f9 fbde 	bl	8000150 <strlen>
 8006994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006998:	b282      	uxth	r2, r0
 800699a:	4932      	ldr	r1, [pc, #200]	; (8006a64 <MPU9250_Init+0x608>)
 800699c:	4832      	ldr	r0, [pc, #200]	; (8006a68 <MPU9250_Init+0x60c>)
 800699e:	f7fd f9ab 	bl	8003cf8 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 80069a2:	2064      	movs	r0, #100	; 0x64
 80069a4:	f7fa fd9c 	bl	80014e0 <HAL_Delay>
	sprintf(Buf, "ASAY : %.2f\r\n", magCalibration[1]);
 80069a8:	6860      	ldr	r0, [r4, #4]
 80069aa:	f7f9 fd3d 	bl	8000428 <__aeabi_f2d>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	482c      	ldr	r0, [pc, #176]	; (8006a64 <MPU9250_Init+0x608>)
 80069b4:	4936      	ldr	r1, [pc, #216]	; (8006a90 <MPU9250_Init+0x634>)
 80069b6:	f002 f819 	bl	80089ec <sprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80069ba:	482a      	ldr	r0, [pc, #168]	; (8006a64 <MPU9250_Init+0x608>)
 80069bc:	f7f9 fbc8 	bl	8000150 <strlen>
 80069c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069c4:	b282      	uxth	r2, r0
 80069c6:	4927      	ldr	r1, [pc, #156]	; (8006a64 <MPU9250_Init+0x608>)
 80069c8:	4827      	ldr	r0, [pc, #156]	; (8006a68 <MPU9250_Init+0x60c>)
 80069ca:	f7fd f995 	bl	8003cf8 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 80069ce:	2064      	movs	r0, #100	; 0x64
 80069d0:	f7fa fd86 	bl	80014e0 <HAL_Delay>
	sprintf(Buf, "ASAZ : %.2f\r\n", magCalibration[2]);
 80069d4:	68a0      	ldr	r0, [r4, #8]
 80069d6:	f7f9 fd27 	bl	8000428 <__aeabi_f2d>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4821      	ldr	r0, [pc, #132]	; (8006a64 <MPU9250_Init+0x608>)
 80069e0:	492c      	ldr	r1, [pc, #176]	; (8006a94 <MPU9250_Init+0x638>)
 80069e2:	f002 f803 	bl	80089ec <sprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80069e6:	481f      	ldr	r0, [pc, #124]	; (8006a64 <MPU9250_Init+0x608>)
 80069e8:	f7f9 fbb2 	bl	8000150 <strlen>
 80069ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069f0:	b282      	uxth	r2, r0
 80069f2:	491c      	ldr	r1, [pc, #112]	; (8006a64 <MPU9250_Init+0x608>)
 80069f4:	481c      	ldr	r0, [pc, #112]	; (8006a68 <MPU9250_Init+0x60c>)
 80069f6:	f7fd f97f 	bl	8003cf8 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 80069fa:	2064      	movs	r0, #100	; 0x64
}
 80069fc:	b005      	add	sp, #20
 80069fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(100); // for stability
 8006a02:	f7fa bd6d 	b.w	80014e0 <HAL_Delay>
    sprintf(Buf, "Could not connect to MPU9250: %#x\r\n", whoami);
 8006a06:	4632      	mov	r2, r6
 8006a08:	4923      	ldr	r1, [pc, #140]	; (8006a98 <MPU9250_Init+0x63c>)
 8006a0a:	4816      	ldr	r0, [pc, #88]	; (8006a64 <MPU9250_Init+0x608>)
 8006a0c:	f001 ffee 	bl	80089ec <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006a10:	4814      	ldr	r0, [pc, #80]	; (8006a64 <MPU9250_Init+0x608>)
 8006a12:	f7f9 fb9d 	bl	8000150 <strlen>
 8006a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a1a:	b282      	uxth	r2, r0
 8006a1c:	4911      	ldr	r1, [pc, #68]	; (8006a64 <MPU9250_Init+0x608>)
 8006a1e:	4812      	ldr	r0, [pc, #72]	; (8006a68 <MPU9250_Init+0x60c>)
 8006a20:	f7fd f96a 	bl	8003cf8 <HAL_UART_Transmit>
    sprintf(Buf, "Communication failed, abort!\r\n");
 8006a24:	491d      	ldr	r1, [pc, #116]	; (8006a9c <MPU9250_Init+0x640>)
 8006a26:	480f      	ldr	r0, [pc, #60]	; (8006a64 <MPU9250_Init+0x608>)
 8006a28:	f002 f804 	bl	8008a34 <strcpy>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8006a2c:	480d      	ldr	r0, [pc, #52]	; (8006a64 <MPU9250_Init+0x608>)
 8006a2e:	f7f9 fb8f 	bl	8000150 <strlen>
 8006a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a36:	b282      	uxth	r2, r0
 8006a38:	490a      	ldr	r1, [pc, #40]	; (8006a64 <MPU9250_Init+0x608>)
 8006a3a:	480b      	ldr	r0, [pc, #44]	; (8006a68 <MPU9250_Init+0x60c>)
 8006a3c:	f7fd f95c 	bl	8003cf8 <HAL_UART_Transmit>
    while (Error.error !=0)
 8006a40:	4d17      	ldr	r5, [pc, #92]	; (8006aa0 <MPU9250_Init+0x644>)
 8006a42:	782b      	ldrb	r3, [r5, #0]
 8006a44:	b913      	cbnz	r3, 8006a4c <MPU9250_Init+0x5f0>
}
 8006a46:	b005      	add	sp, #20
 8006a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error.error = 1;
 8006a4c:	702c      	strb	r4, [r5, #0]
      error_signal();
 8006a4e:	f7fe f96d 	bl	8004d2c <error_signal>
      HAL_Delay(4);
 8006a52:	2004      	movs	r0, #4
 8006a54:	f7fa fd44 	bl	80014e0 <HAL_Delay>
 8006a58:	e7f3      	b.n	8006a42 <MPU9250_Init+0x5e6>
 8006a5a:	bf00      	nop
 8006a5c:	20000af5 	.word	0x20000af5
 8006a60:	0800ded1 	.word	0x0800ded1
 8006a64:	200013e0 	.word	0x200013e0
 8006a68:	20001724 	.word	0x20001724
 8006a6c:	20000af4 	.word	0x20000af4
 8006a70:	0800dedf 	.word	0x0800dedf
 8006a74:	0800deed 	.word	0x0800deed
 8006a78:	0800defc 	.word	0x0800defc
 8006a7c:	0800dc1b 	.word	0x0800dc1b
 8006a80:	0800df11 	.word	0x0800df11
 8006a84:	0800df24 	.word	0x0800df24
 8006a88:	20000c18 	.word	0x20000c18
 8006a8c:	0800df43 	.word	0x0800df43
 8006a90:	0800df51 	.word	0x0800df51
 8006a94:	0800df5f 	.word	0x0800df5f
 8006a98:	0800df6d 	.word	0x0800df6d
 8006a9c:	0800df91 	.word	0x0800df91
 8006aa0:	200016dc 	.word	0x200016dc

08006aa4 <Baro_Common>:
void Baro_Common(void)
{
  static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
  static int baroHistIdx = 0;
  int indexplus1;
   indexplus1 = (baroHistIdx + 1);
 8006aa4:	490a      	ldr	r1, [pc, #40]	; (8006ad0 <Baro_Common+0x2c>)
  if (indexplus1 == 21)
      indexplus1 = 0;
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <Baro_Common+0x30>)
   indexplus1 = (baroHistIdx + 1);
 8006aa8:	6808      	ldr	r0, [r1, #0]
{
 8006aaa:	b530      	push	{r4, r5, lr}
   indexplus1 = (baroHistIdx + 1);
 8006aac:	1c42      	adds	r2, r0, #1
  if (indexplus1 == 21)
 8006aae:	2a15      	cmp	r2, #21
      indexplus1 = 0;
 8006ab0:	bf08      	it	eq
 8006ab2:	2200      	moveq	r2, #0
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8006ab4:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8006ab8:	4c07      	ldr	r4, [pc, #28]	; (8006ad8 <Baro_Common+0x34>)
  baroPressureSum += baroHistTab[baroHistIdx];
  baroPressureSum -= baroHistTab[indexplus1];
  baroHistIdx = indexplus1;
 8006aba:	600a      	str	r2, [r1, #0]
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8006abc:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
  baroPressureSum -= baroHistTab[indexplus1];
 8006ac0:	4806      	ldr	r0, [pc, #24]	; (8006adc <Baro_Common+0x38>)
 8006ac2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
  baroPressureSum += baroHistTab[baroHistIdx];
 8006ac6:	6805      	ldr	r5, [r0, #0]
 8006ac8:	442b      	add	r3, r5
  baroPressureSum -= baroHistTab[indexplus1];
 8006aca:	1b1b      	subs	r3, r3, r4
 8006acc:	6003      	str	r3, [r0, #0]
  baroHistIdx = indexplus1;
 8006ace:	bd30      	pop	{r4, r5, pc}
 8006ad0:	20000b34 	.word	0x20000b34
 8006ad4:	20001188 	.word	0x20001188
 8006ad8:	20000b38 	.word	0x20000b38
 8006adc:	20000bf8 	.word	0x20000bf8

08006ae0 <getEstimatedAltitude>:
    }
    return 1;
}

int getEstimatedAltitude(void)
{
 8006ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int32_t BaroAlt_tmp;
  static int32_t baroGroundAltitude = 0;
  static int32_t baroGroundPressure = 0;

  if (calibratingB > 0) {
 8006ae4:	4d40      	ldr	r5, [pc, #256]	; (8006be8 <getEstimatedAltitude+0x108>)
 8006ae6:	4c41      	ldr	r4, [pc, #260]	; (8006bec <getEstimatedAltitude+0x10c>)
 8006ae8:	882b      	ldrh	r3, [r5, #0]
 8006aea:	4e41      	ldr	r6, [pc, #260]	; (8006bf0 <getEstimatedAltitude+0x110>)
 8006aec:	b31b      	cbz	r3, 8006b36 <getEstimatedAltitude+0x56>
      baroGroundPressure -= baroGroundPressure / 8;
      baroGroundPressure += baroPressureSum / (21 - 1);
 8006aee:	2314      	movs	r3, #20
 8006af0:	6820      	ldr	r0, [r4, #0]
      baroGroundPressure -= baroGroundPressure / 8;
 8006af2:	4940      	ldr	r1, [pc, #256]	; (8006bf4 <getEstimatedAltitude+0x114>)
      baroGroundPressure += baroPressureSum / (21 - 1);
 8006af4:	fbb0 f3f3 	udiv	r3, r0, r3
      baroGroundPressure -= baroGroundPressure / 8;
 8006af8:	2008      	movs	r0, #8
 8006afa:	680a      	ldr	r2, [r1, #0]
 8006afc:	fb92 f7f0 	sdiv	r7, r2, r0
 8006b00:	1bd2      	subs	r2, r2, r7
      baroGroundPressure += baroPressureSum / (21 - 1);
 8006b02:	4413      	add	r3, r2
 8006b04:	600b      	str	r3, [r1, #0]
      baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 8006b06:	fb93 f0f0 	sdiv	r0, r3, r0
 8006b0a:	f7fa f8c3 	bl	8000c94 <__aeabi_i2f>
 8006b0e:	493a      	ldr	r1, [pc, #232]	; (8006bf8 <getEstimatedAltitude+0x118>)
 8006b10:	f7fa f9c8 	bl	8000ea4 <__aeabi_fdiv>
 8006b14:	4939      	ldr	r1, [pc, #228]	; (8006bfc <getEstimatedAltitude+0x11c>)
 8006b16:	f005 f907 	bl	800bd28 <powf>
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006b20:	f7fa f802 	bl	8000b28 <__aeabi_fsub>
 8006b24:	4936      	ldr	r1, [pc, #216]	; (8006c00 <getEstimatedAltitude+0x120>)
 8006b26:	f7fa f909 	bl	8000d3c <__aeabi_fmul>
 8006b2a:	f7fa fae3 	bl	80010f4 <__aeabi_f2iz>

      calibratingB--;
 8006b2e:	882b      	ldrh	r3, [r5, #0]
      baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 8006b30:	6030      	str	r0, [r6, #0]
      calibratingB--;
 8006b32:	3b01      	subs	r3, #1
 8006b34:	802b      	strh	r3, [r5, #0]
  }

  BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (21 - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 8006b36:	2514      	movs	r5, #20
 8006b38:	6820      	ldr	r0, [r4, #0]
 8006b3a:	fbb0 f0f5 	udiv	r0, r0, r5
 8006b3e:	f7fa f8a5 	bl	8000c8c <__aeabi_ui2f>
 8006b42:	492d      	ldr	r1, [pc, #180]	; (8006bf8 <getEstimatedAltitude+0x118>)
 8006b44:	f7fa f9ae 	bl	8000ea4 <__aeabi_fdiv>
 8006b48:	492c      	ldr	r1, [pc, #176]	; (8006bfc <getEstimatedAltitude+0x11c>)
 8006b4a:	f005 f8ed 	bl	800bd28 <powf>
 8006b4e:	4601      	mov	r1, r0
 8006b50:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006b54:	f7f9 ffe8 	bl	8000b28 <__aeabi_fsub>
 8006b58:	4929      	ldr	r1, [pc, #164]	; (8006c00 <getEstimatedAltitude+0x120>)
 8006b5a:	f7fa f8ef 	bl	8000d3c <__aeabi_fmul>
 8006b5e:	f004 fef7 	bl	800b950 <lrintf>
  BaroAlt_tmp -= baroGroundAltitude;
 8006b62:	6833      	ldr	r3, [r6, #0]
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.8 + (float)BaroAlt_tmp * (1.0f - 0.8)); // additional LPF to reduce baro noise
 8006b64:	4e27      	ldr	r6, [pc, #156]	; (8006c04 <getEstimatedAltitude+0x124>)
 8006b66:	1ac0      	subs	r0, r0, r3
 8006b68:	f7fa f894 	bl	8000c94 <__aeabi_i2f>
 8006b6c:	f7f9 fc5c 	bl	8000428 <__aeabi_f2d>
 8006b70:	a319      	add	r3, pc, #100	; (adr r3, 8006bd8 <getEstimatedAltitude+0xf8>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fcab 	bl	80004d0 <__aeabi_dmul>
 8006b7a:	4680      	mov	r8, r0
 8006b7c:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 8006b80:	4689      	mov	r9, r1
 8006b82:	f7fa f887 	bl	8000c94 <__aeabi_i2f>
 8006b86:	f7f9 fc4f 	bl	8000428 <__aeabi_f2d>
 8006b8a:	a315      	add	r3, pc, #84	; (adr r3, 8006be0 <getEstimatedAltitude+0x100>)
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f7f9 fc9e 	bl	80004d0 <__aeabi_dmul>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	f7f9 fae6 	bl	800016c <__adddf3>
 8006ba0:	f7f9 ff6e 	bl	8000a80 <__aeabi_d2f>
 8006ba4:	f004 fed4 	bl	800b950 <lrintf>
  sprintf(Buf, "%ld pa, %ld cm \n ", baroPressureSum / (21 - 1), ms5611.BaroAlt);
 8006ba8:	6822      	ldr	r2, [r4, #0]
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.8 + (float)BaroAlt_tmp * (1.0f - 0.8)); // additional LPF to reduce baro noise
 8006baa:	4603      	mov	r3, r0
  sprintf(Buf, "%ld pa, %ld cm \n ", baroPressureSum / (21 - 1), ms5611.BaroAlt);
 8006bac:	fbb2 f2f5 	udiv	r2, r2, r5
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.8 + (float)BaroAlt_tmp * (1.0f - 0.8)); // additional LPF to reduce baro noise
 8006bb0:	f8c6 018c 	str.w	r0, [r6, #396]	; 0x18c
  sprintf(Buf, "%ld pa, %ld cm \n ", baroPressureSum / (21 - 1), ms5611.BaroAlt);
 8006bb4:	4914      	ldr	r1, [pc, #80]	; (8006c08 <getEstimatedAltitude+0x128>)
 8006bb6:	4815      	ldr	r0, [pc, #84]	; (8006c0c <getEstimatedAltitude+0x12c>)
 8006bb8:	f001 ff18 	bl	80089ec <sprintf>
  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
 8006bbc:	4813      	ldr	r0, [pc, #76]	; (8006c0c <getEstimatedAltitude+0x12c>)
 8006bbe:	f7f9 fac7 	bl	8000150 <strlen>
 8006bc2:	4912      	ldr	r1, [pc, #72]	; (8006c0c <getEstimatedAltitude+0x12c>)
 8006bc4:	b282      	uxth	r2, r0
 8006bc6:	4812      	ldr	r0, [pc, #72]	; (8006c10 <getEstimatedAltitude+0x130>)
 8006bc8:	f7fd f8f2 	bl	8003db0 <HAL_UART_Transmit_DMA>

  return 1;
}
 8006bcc:	2001      	movs	r0, #1
 8006bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd2:	bf00      	nop
 8006bd4:	f3af 8000 	nop.w
 8006bd8:	99999998 	.word	0x99999998
 8006bdc:	3fc99999 	.word	0x3fc99999
 8006be0:	9999999a 	.word	0x9999999a
 8006be4:	3fe99999 	.word	0x3fe99999
 8006be8:	2000000a 	.word	0x2000000a
 8006bec:	20000bf8 	.word	0x20000bf8
 8006bf0:	20000b2c 	.word	0x20000b2c
 8006bf4:	20000b30 	.word	0x20000b30
 8006bf8:	47c5e680 	.word	0x47c5e680
 8006bfc:	3e42dcb1 	.word	0x3e42dcb1
 8006c00:	4a8748d0 	.word	0x4a8748d0
 8006c04:	20001188 	.word	0x20001188
 8006c08:	0800dfdf 	.word	0x0800dfdf
 8006c0c:	200013e0 	.word	0x200013e0
 8006c10:	20001724 	.word	0x20001724

08006c14 <readPressure>:
    return readRegister24(MS5611_CMD_ADC_READ);
}

int32_t readPressure(bool compensation)
{
    uint32_t D1 = ms5611.rawPressure;
 8006c14:	4b55      	ldr	r3, [pc, #340]	; (8006d6c <readPressure+0x158>)
{
 8006c16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    uint32_t D2 = ms5611.rawTemp;
    int32_t dT = D2 - (uint32_t)ms5611.fc[4] * 256;
 8006c1a:	8919      	ldrh	r1, [r3, #8]
 8006c1c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
    uint32_t D1 = ms5611.rawPressure;
 8006c1e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    int32_t dT = D2 - (uint32_t)ms5611.fc[4] * 256;
 8006c22:	eba4 2101 	sub.w	r1, r4, r1, lsl #8

    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006c26:	88dc      	ldrh	r4, [r3, #6]
 8006c28:	fb84 4501 	smull	r4, r5, r4, r1
 8006c2c:	2c00      	cmp	r4, #0
 8006c2e:	f175 0600 	sbcs.w	r6, r5, #0
 8006c32:	da02      	bge.n	8006c3a <readPressure+0x26>
 8006c34:	347f      	adds	r4, #127	; 0x7f
 8006c36:	f145 0500 	adc.w	r5, r5, #0
 8006c3a:	09e6      	lsrs	r6, r4, #7
 8006c3c:	ea46 6645 	orr.w	r6, r6, r5, lsl #25
 8006c40:	11ef      	asrs	r7, r5, #7
 8006c42:	2500      	movs	r5, #0
 8006c44:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006c48:	f8b3 e000 	ldrh.w	lr, [r3]
    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006c4c:	ea4f 4408 	mov.w	r4, r8, lsl #16
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006c50:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006c54:	1936      	adds	r6, r6, r4
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006c56:	fb88 8901 	smull	r8, r9, r8, r1
    int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8006c5a:	416f      	adcs	r7, r5
    int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 8006c5c:	f1b8 0f00 	cmp.w	r8, #0
 8006c60:	f179 0400 	sbcs.w	r4, r9, #0
 8006c64:	da03      	bge.n	8006c6e <readPressure+0x5a>
 8006c66:	f118 08ff 	adds.w	r8, r8, #255	; 0xff
 8006c6a:	f149 0900 	adc.w	r9, r9, #0
 8006c6e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 8006c72:	ea4f 2418 	mov.w	r4, r8, lsr #8
 8006c76:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
 8006c7a:	ea4f 2529 	mov.w	r5, r9, asr #8
 8006c7e:	fbee 450c 	umlal	r4, r5, lr, ip

    if (compensation)
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d051      	beq.n	8006d2a <readPressure+0x116>
    {
  int32_t TEMP = 2000 + ((int64_t) dT * ms5611.fc[5]) / 8388608;
 8006c86:	8958      	ldrh	r0, [r3, #10]
 8006c88:	fb80 0101 	smull	r0, r1, r0, r1
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f171 0e00 	sbcs.w	lr, r1, #0
 8006c92:	da07      	bge.n	8006ca4 <readPressure+0x90>
 8006c94:	f04f 0900 	mov.w	r9, #0
 8006c98:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8006d74 <readPressure+0x160>
 8006c9c:	eb10 0008 	adds.w	r0, r0, r8
 8006ca0:	eb41 0109 	adc.w	r1, r1, r9
 8006ca4:	ea4f 5ed0 	mov.w	lr, r0, lsr #23
 8006ca8:	ea4e 2e41 	orr.w	lr, lr, r1, lsl #9

  ms5611.OFF2 = 0;
 8006cac:	2000      	movs	r0, #0
 8006cae:	2100      	movs	r1, #0
  int32_t TEMP = 2000 + ((int64_t) dT * ms5611.fc[5]) / 8388608;
 8006cb0:	f50e 6cfa 	add.w	ip, lr, #2000	; 0x7d0
  ms5611.SENS2 = 0;

  if (TEMP < 2000)
 8006cb4:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
  ms5611.OFF2 = 0;
 8006cb8:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
  ms5611.SENS2 = 0;
 8006cbc:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  if (TEMP < 2000)
 8006cc0:	da29      	bge.n	8006d16 <readPressure+0x102>
  {
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006cc2:	fb0e f00e 	mul.w	r0, lr, lr
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
  }

  if (TEMP < -1500)
 8006cc6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8006d78 <readPressure+0x164>
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006cca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006cce:	ea4f 0860 	mov.w	r8, r0, asr #1
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006cd2:	1080      	asrs	r0, r0, #2
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006cd4:	ea4f 79e8 	mov.w	r9, r8, asr #31
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006cd8:	17c1      	asrs	r1, r0, #31
  if (TEMP < -1500)
 8006cda:	45d4      	cmp	ip, sl
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006cdc:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006ce0:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  if (TEMP < -1500)
 8006ce4:	da17      	bge.n	8006d16 <readPressure+0x102>
  {
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8006ce6:	f60e 5eac 	addw	lr, lr, #3500	; 0xdac
 8006cea:	fb0e fe0e 	mul.w	lr, lr, lr
 8006cee:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 8006cf2:	eb18 080c 	adds.w	r8, r8, ip
 8006cf6:	eb49 79ec 	adc.w	r9, r9, ip, asr #31
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8006cfa:	f04f 0c0b 	mov.w	ip, #11
 8006cfe:	fb0c fe0e 	mul.w	lr, ip, lr
 8006d02:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8006d06:	eb10 000e 	adds.w	r0, r0, lr
 8006d0a:	eb41 71ee 	adc.w	r1, r1, lr, asr #31
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8006d0e:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8006d12:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  }

  OFF = OFF - ms5611.OFF2;
 8006d16:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006d1a:	1a36      	subs	r6, r6, r0
 8006d1c:	eb67 0701 	sbc.w	r7, r7, r1
  SENS = SENS - ms5611.SENS2;
 8006d20:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006d24:	1a24      	subs	r4, r4, r0
 8006d26:	eb65 0501 	sbc.w	r5, r5, r1
  }

    uint32_t P = (D1 * SENS / 2097152 - OFF) / 32768;
 8006d2a:	fba2 0104 	umull	r0, r1, r2, r4
 8006d2e:	fb02 1105 	mla	r1, r2, r5, r1
 8006d32:	2800      	cmp	r0, #0
 8006d34:	f171 0300 	sbcs.w	r3, r1, #0
 8006d38:	da03      	bge.n	8006d42 <readPressure+0x12e>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	4a0c      	ldr	r2, [pc, #48]	; (8006d70 <readPressure+0x15c>)
 8006d3e:	1880      	adds	r0, r0, r2
 8006d40:	4159      	adcs	r1, r3
 8006d42:	0d42      	lsrs	r2, r0, #21
 8006d44:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8006d48:	154b      	asrs	r3, r1, #21
 8006d4a:	1b96      	subs	r6, r2, r6
 8006d4c:	eb63 0707 	sbc.w	r7, r3, r7
 8006d50:	2e00      	cmp	r6, #0
 8006d52:	f177 0300 	sbcs.w	r3, r7, #0
 8006d56:	da04      	bge.n	8006d62 <readPressure+0x14e>
 8006d58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	18b6      	adds	r6, r6, r2
 8006d60:	415f      	adcs	r7, r3
 8006d62:	0bf0      	lsrs	r0, r6, #15

    return P;
}
 8006d64:	ea40 4047 	orr.w	r0, r0, r7, lsl #17
 8006d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6c:	20001188 	.word	0x20001188
 8006d70:	001fffff 	.word	0x001fffff
 8006d74:	007fffff 	.word	0x007fffff
 8006d78:	fffffa24 	.word	0xfffffa24

08006d7c <readRegister16>:
    return ((double)pressure / pow(1.0f - ((double)altitude / 44330.0f), 5.255f));
}

// Read 16-bit from register (oops MSB, LSB)
uint16_t readRegister16(uint8_t reg)
{
 8006d7c:	b510      	push	{r4, lr}
    uint16_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);

    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 8006d7e:	4c08      	ldr	r4, [pc, #32]	; (8006da0 <readRegister16+0x24>)
    I2C_Write(MS5611_ADDRESS, reg, 1);
 8006d80:	4601      	mov	r1, r0
 8006d82:	2201      	movs	r2, #1
 8006d84:	20ee      	movs	r0, #238	; 0xee
 8006d86:	f7fd facf 	bl	8004328 <I2C_Write>
    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	20ee      	movs	r0, #238	; 0xee
 8006d90:	f7fd fb14 	bl	80043bc <I2C_Read>

    uint8_t vha = rawADC[0];
    uint8_t vla = rawADC[1];

    value = vha << 8 | vla;
 8006d94:	7820      	ldrb	r0, [r4, #0]
 8006d96:	7863      	ldrb	r3, [r4, #1]

    return value;
}
 8006d98:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8006d9c:	bd10      	pop	{r4, pc}
 8006d9e:	bf00      	nop
 8006da0:	200013d4 	.word	0x200013d4

08006da4 <readRegister24>:

// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg)
{
 8006da4:	b510      	push	{r4, lr}
    uint32_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);

    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 8006da6:	4c09      	ldr	r4, [pc, #36]	; (8006dcc <readRegister24+0x28>)
    I2C_Write(MS5611_ADDRESS, reg, 1);
 8006da8:	4601      	mov	r1, r0
 8006daa:	2201      	movs	r2, #1
 8006dac:	20ee      	movs	r0, #238	; 0xee
 8006dae:	f7fd fabb 	bl	8004328 <I2C_Write>
    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 8006db2:	2203      	movs	r2, #3
 8006db4:	4621      	mov	r1, r4
 8006db6:	20ee      	movs	r0, #238	; 0xee
 8006db8:	f7fd fb00 	bl	80043bc <I2C_Read>

    uint8_t vxa = rawADC[0];
    uint8_t vha = rawADC[1];
    uint8_t vla = rawADC[2];

    value = ((int32_t)vxa << 16) | ((int32_t)vha << 8) | vla;
 8006dbc:	7863      	ldrb	r3, [r4, #1]
 8006dbe:	7820      	ldrb	r0, [r4, #0]
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006dc6:	78a0      	ldrb	r0, [r4, #2]

    return value;
}
 8006dc8:	4318      	orrs	r0, r3
 8006dca:	bd10      	pop	{r4, pc}
 8006dcc:	200013d4 	.word	0x200013d4

08006dd0 <read_barometer>:
{
 8006dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ms5611.barometer_counter ++;
 8006dd4:	4cc1      	ldr	r4, [pc, #772]	; (80070dc <read_barometer+0x30c>)
 8006dd6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8006dda:	3301      	adds	r3, #1
 8006ddc:	b2db      	uxtb	r3, r3
  if (ms5611.barometer_counter == 1) {                                                 //When the barometer_counter variable is 1.
 8006dde:	2b01      	cmp	r3, #1
  ms5611.barometer_counter ++;
 8006de0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  if (ms5611.barometer_counter == 1) {                                                 //When the barometer_counter variable is 1.
 8006de4:	d13c      	bne.n	8006e60 <read_barometer+0x90>
    if (ms5611.temperature_counter == 0) {                                             //And the temperature counter is 0.
 8006de6:	f894 5061 	ldrb.w	r5, [r4, #97]	; 0x61
 8006dea:	2d00      	cmp	r5, #0
 8006dec:	f040 816d 	bne.w	80070ca <read_barometer+0x2fa>
      ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8006df0:	4628      	mov	r0, r5
 8006df2:	f7ff ffd7 	bl	8006da4 <readRegister24>
      ms5611.raw_average_temperature_total -= ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006df6:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8006dfa:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006dfe:	f103 021a 	add.w	r2, r3, #26
      ms5611.average_temperature_mem_location++;
 8006e02:	3301      	adds	r3, #1
 8006e04:	b2db      	uxtb	r3, r3
      if (ms5611.average_temperature_mem_location == 5)ms5611.average_temperature_mem_location = 0;
 8006e06:	2b05      	cmp	r3, #5
      ms5611.average_temperature_mem_location++;
 8006e08:	bf18      	it	ne
 8006e0a:	f884 3068 	strbne.w	r3, [r4, #104]	; 0x68
      ms5611.T = ms5611.raw_average_temperature_total / 5;                      //Calculate the avarage temperature of the last 5 measurements.
 8006e0e:	f04f 0305 	mov.w	r3, #5
      ms5611.raw_average_temperature_total -= ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006e12:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006e16:	6856      	ldr	r6, [r2, #4]
      ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8006e18:	6660      	str	r0, [r4, #100]	; 0x64
      ms5611.raw_average_temperature_total -= ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006e1a:	eba1 0106 	sub.w	r1, r1, r6
      ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location] = ms5611.rawTemp;
 8006e1e:	6050      	str	r0, [r2, #4]
      ms5611.raw_average_temperature_total += ms5611.raw_temperature_rotating_memory[ms5611.average_temperature_mem_location];
 8006e20:	4408      	add	r0, r1
 8006e22:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      ms5611.T = ms5611.raw_average_temperature_total / 5;                      //Calculate the avarage temperature of the last 5 measurements.
 8006e26:	fbb0 f0f3 	udiv	r0, r0, r3
      if (ms5611.average_temperature_mem_location == 5)ms5611.average_temperature_mem_location = 0;
 8006e2a:	bf08      	it	eq
 8006e2c:	f884 5068 	strbeq.w	r5, [r4, #104]	; 0x68
      ms5611.T = ms5611.raw_average_temperature_total / 5;                      //Calculate the avarage temperature of the last 5 measurements.
 8006e30:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ms5611.temperature_counter ++;                                                     //Increase the temperature_counter variable.
 8006e34:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8006e38:	7b61      	ldrb	r1, [r4, #13]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b2db      	uxtb	r3, r3
    if (ms5611.temperature_counter == 20) {                                            //When the temperature counter equals 20.
 8006e3e:	2b14      	cmp	r3, #20
    ms5611.temperature_counter ++;                                                     //Increase the temperature_counter variable.
 8006e40:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      ms5611.temperature_counter = 0;                                                  //Reset the temperature_counter variable.
 8006e44:	bf06      	itte	eq
 8006e46:	2300      	moveq	r3, #0
      I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8006e48:	3150      	addeq	r1, #80	; 0x50
      I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8006e4a:	3140      	addne	r1, #64	; 0x40
 8006e4c:	f04f 0201 	mov.w	r2, #1
 8006e50:	b2c9      	uxtb	r1, r1
 8006e52:	f04f 00ee 	mov.w	r0, #238	; 0xee
      ms5611.temperature_counter = 0;                                                  //Reset the temperature_counter variable.
 8006e56:	bf08      	it	eq
 8006e58:	f884 3061 	strbeq.w	r3, [r4, #97]	; 0x61
      I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8006e5c:	f7fd fa64 	bl	8004328 <I2C_Write>
  if (ms5611.barometer_counter == 2) {                                                 //If the barometer_counter variable equals 2.
 8006e60:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	f040 8127 	bne.w	80070b8 <read_barometer+0x2e8>
    ms5611.dT = ms5611.fc[4];
 8006e6a:	8923      	ldrh	r3, [r4, #8]
    ms5611.dT += ms5611.T;
 8006e6c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006e70:	88e0      	ldrh	r0, [r4, #6]
    ms5611.dT += ms5611.T;
 8006e72:	eba2 2503 	sub.w	r5, r2, r3, lsl #8
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006e76:	fb80 0105 	smull	r0, r1, r0, r5
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	f171 0300 	sbcs.w	r3, r1, #0
    ms5611.dT += ms5611.T;
 8006e80:	6165      	str	r5, [r4, #20]
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006e82:	da02      	bge.n	8006e8a <read_barometer+0xba>
 8006e84:	307f      	adds	r0, #127	; 0x7f
 8006e86:	f141 0100 	adc.w	r1, r1, #0
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	09c6      	lsrs	r6, r0, #7
 8006e8e:	8860      	ldrh	r0, [r4, #2]
 8006e90:	ea46 6641 	orr.w	r6, r6, r1, lsl #25
 8006e94:	0402      	lsls	r2, r0, #16
 8006e96:	18b6      	adds	r6, r6, r2
    ms5611.SENS = (int64_t)ms5611.fc[0] * 32768 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[2]) / 256;
 8006e98:	88a2      	ldrh	r2, [r4, #4]
    ms5611.OFF = (int64_t)ms5611.fc[1] * 65536 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[3]) / 128;
 8006e9a:	ea4f 17e1 	mov.w	r7, r1, asr #7
 8006e9e:	415f      	adcs	r7, r3
    ms5611.SENS = (int64_t)ms5611.fc[0] * 32768 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[2]) / 256;
 8006ea0:	fb82 2305 	smull	r2, r3, r2, r5
 8006ea4:	2a00      	cmp	r2, #0
 8006ea6:	f173 0100 	sbcs.w	r1, r3, #0
 8006eaa:	f8b4 e000 	ldrh.w	lr, [r4]
 8006eae:	da02      	bge.n	8006eb6 <read_barometer+0xe6>
 8006eb0:	32ff      	adds	r2, #255	; 0xff
 8006eb2:	f143 0300 	adc.w	r3, r3, #0
 8006eb6:	0a10      	lsrs	r0, r2, #8
 8006eb8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8006ebc:	1219      	asrs	r1, r3, #8
 8006ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    int32_t TEMP = 2000 + ((int64_t) ms5611.dT * ms5611.fc[5]) / 8388608;
 8006ec2:	8962      	ldrh	r2, [r4, #10]
    ms5611.SENS = (int64_t)ms5611.fc[0] * 32768 + ((int64_t)ms5611.dT * (int64_t)ms5611.fc[2]) / 256;
 8006ec4:	fbee 0103 	umlal	r0, r1, lr, r3
    int32_t TEMP = 2000 + ((int64_t) ms5611.dT * ms5611.fc[5]) / 8388608;
 8006ec8:	fb82 2305 	smull	r2, r3, r2, r5
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	f173 0500 	sbcs.w	r5, r3, #0
 8006ed2:	da07      	bge.n	8006ee4 <read_barometer+0x114>
 8006ed4:	f04f 0900 	mov.w	r9, #0
 8006ed8:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8007108 <read_barometer+0x338>
 8006edc:	eb12 0208 	adds.w	r2, r2, r8
 8006ee0:	eb43 0309 	adc.w	r3, r3, r9
 8006ee4:	0dd5      	lsrs	r5, r2, #23
 8006ee6:	ea45 2543 	orr.w	r5, r5, r3, lsl #9
    ms5611.OFF2 = 0;
 8006eea:	2200      	movs	r2, #0
 8006eec:	2300      	movs	r3, #0
    int32_t TEMP = 2000 + ((int64_t) ms5611.dT * ms5611.fc[5]) / 8388608;
 8006eee:	f505 6efa 	add.w	lr, r5, #2000	; 0x7d0
    if(TEMP < 2000){
 8006ef2:	f5be 6ffa 	cmp.w	lr, #2000	; 0x7d0
    ms5611.OFF2 = 0;
 8006ef6:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    ms5611.SENS2 = 0;
 8006efa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if(TEMP < 2000){
 8006efe:	da26      	bge.n	8006f4e <read_barometer+0x17e>
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006f00:	fb05 f205 	mul.w	r2, r5, r5
    if (TEMP < -1500){
 8006f04:	f8df c204 	ldr.w	ip, [pc, #516]	; 800710c <read_barometer+0x33c>
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006f08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006f0c:	ea4f 0862 	mov.w	r8, r2, asr #1
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006f10:	1092      	asrs	r2, r2, #2
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006f12:	ea4f 79e8 	mov.w	r9, r8, asr #31
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006f16:	17d3      	asrs	r3, r2, #31
    if (TEMP < -1500){
 8006f18:	45e6      	cmp	lr, ip
      ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8006f1a:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
      ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8006f1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if (TEMP < -1500){
 8006f22:	da14      	bge.n	8006f4e <read_barometer+0x17e>
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8006f24:	f605 55ac 	addw	r5, r5, #3500	; 0xdac
 8006f28:	436d      	muls	r5, r5
 8006f2a:	ebc5 0ec5 	rsb	lr, r5, r5, lsl #3
 8006f2e:	eb18 080e 	adds.w	r8, r8, lr
 8006f32:	eb49 79ee 	adc.w	r9, r9, lr, asr #31
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8006f36:	f04f 0e0b 	mov.w	lr, #11
 8006f3a:	fb0e f505 	mul.w	r5, lr, r5
 8006f3e:	106d      	asrs	r5, r5, #1
 8006f40:	1952      	adds	r2, r2, r5
 8006f42:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
      ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8006f46:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
      ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8006f4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    ms5611.OFF = ms5611.OFF - ms5611.OFF2;
 8006f4e:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    ms5611.SENS = ms5611.SENS - ms5611.SENS2;
 8006f52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
    ms5611.OFF = ms5611.OFF - ms5611.OFF2;
 8006f56:	1ab6      	subs	r6, r6, r2
 8006f58:	eb67 0703 	sbc.w	r7, r7, r3
    ms5611.P = ((ms5611.rawPressure * ms5611.SENS) / 2097152 - ms5611.OFF) / 32768;
 8006f5c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    ms5611.SENS = ms5611.SENS - ms5611.SENS2;
 8006f60:	ebb0 0808 	subs.w	r8, r0, r8
 8006f64:	eb61 0909 	sbc.w	r9, r1, r9
    ms5611.P = ((ms5611.rawPressure * ms5611.SENS) / 2097152 - ms5611.OFF) / 32768;
 8006f68:	fba3 0108 	umull	r0, r1, r3, r8
 8006f6c:	fb03 1109 	mla	r1, r3, r9, r1
 8006f70:	2800      	cmp	r0, #0
 8006f72:	f171 0300 	sbcs.w	r3, r1, #0
    ms5611.OFF = ms5611.OFF - ms5611.OFF2;
 8006f76:	e9c4 6708 	strd	r6, r7, [r4, #32]
    ms5611.SENS = ms5611.SENS - ms5611.SENS2;
 8006f7a:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
    ms5611.P = ((ms5611.rawPressure * ms5611.SENS) / 2097152 - ms5611.OFF) / 32768;
 8006f7e:	da03      	bge.n	8006f88 <read_barometer+0x1b8>
 8006f80:	2300      	movs	r3, #0
 8006f82:	4a57      	ldr	r2, [pc, #348]	; (80070e0 <read_barometer+0x310>)
 8006f84:	1880      	adds	r0, r0, r2
 8006f86:	4159      	adcs	r1, r3
 8006f88:	0d42      	lsrs	r2, r0, #21
 8006f8a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8006f8e:	154b      	asrs	r3, r1, #21
 8006f90:	1b92      	subs	r2, r2, r6
 8006f92:	eb63 0307 	sbc.w	r3, r3, r7
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	f173 0100 	sbcs.w	r1, r3, #0
 8006f9c:	da04      	bge.n	8006fa8 <read_barometer+0x1d8>
 8006f9e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	1812      	adds	r2, r2, r0
 8006fa6:	414b      	adcs	r3, r1
 8006fa8:	0bd1      	lsrs	r1, r2, #15
 8006faa:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8006fae:	13da      	asrs	r2, r3, #15
 8006fb0:	4b4c      	ldr	r3, [pc, #304]	; (80070e4 <read_barometer+0x314>)
 8006fb2:	f8c4 1160 	str.w	r1, [r4, #352]	; 0x160
 8006fb6:	605a      	str	r2, [r3, #4]
    ms5611.pressure_total_avarage -= ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 8006fb8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8006fbc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8006fc0:	f103 0526 	add.w	r5, r3, #38	; 0x26
    ms5611.pressure_rotating_mem_location++;                                                                         //Increase the rotating memory location.
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	b2db      	uxtb	r3, r3
    if (ms5611.pressure_rotating_mem_location == 20)ms5611.pressure_rotating_mem_location = 0;                              //Start at 0 when the memory location 20 is reached.
 8006fc8:	2b14      	cmp	r3, #20
 8006fca:	bf08      	it	eq
 8006fcc:	2300      	moveq	r3, #0
    ms5611.pressure_total_avarage -= ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 8006fce:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    if (ms5611.pressure_rotating_mem_location == 20)ms5611.pressure_rotating_mem_location = 0;                              //Start at 0 when the memory location 20 is reached.
 8006fd2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    ms5611.pressure_total_avarage -= ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 8006fd6:	1a10      	subs	r0, r2, r0
    ms5611.pressure_total_avarage += ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Add the new value to the long term avarage value.
 8006fd8:	4408      	add	r0, r1
    ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location] = ms5611.P;                                                //Calculate the new change between the actual pressure and the previous measurement.
 8006fda:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    ms5611.pressure_total_avarage += ms5611.pressure_rotating_mem[ms5611.pressure_rotating_mem_location];                          //Add the new value to the long term avarage value.
 8006fde:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    ms5611.actual_pressure_fast = (float)ms5611.pressure_total_avarage / 20.0;                                              //Calculate the average pressure of the last 20 pressure readings.
 8006fe2:	f7f9 fe57 	bl	8000c94 <__aeabi_i2f>
 8006fe6:	4940      	ldr	r1, [pc, #256]	; (80070e8 <read_barometer+0x318>)
 8006fe8:	f7f9 ff5c 	bl	8000ea4 <__aeabi_fdiv>
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 8006fec:	493f      	ldr	r1, [pc, #252]	; (80070ec <read_barometer+0x31c>)
    ms5611.actual_pressure_fast = (float)ms5611.pressure_total_avarage / 20.0;                                              //Calculate the average pressure of the last 20 pressure readings.
 8006fee:	4605      	mov	r5, r0
 8006ff0:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 8006ff4:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
 8006ff8:	f7f9 fea0 	bl	8000d3c <__aeabi_fmul>
 8006ffc:	493c      	ldr	r1, [pc, #240]	; (80070f0 <read_barometer+0x320>)
 8006ffe:	4606      	mov	r6, r0
 8007000:	4628      	mov	r0, r5
 8007002:	f7f9 fe9b 	bl	8000d3c <__aeabi_fmul>
 8007006:	4601      	mov	r1, r0
 8007008:	4630      	mov	r0, r6
 800700a:	f7f9 fd8f 	bl	8000b2c <__addsf3>
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 800700e:	4629      	mov	r1, r5
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 8007010:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 8007014:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    ms5611.actual_pressure_slow = ms5611.actual_pressure_slow * (float)0.985 + ms5611.actual_pressure_fast * (float)0.015;
 8007018:	4606      	mov	r6, r0
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 800701a:	f7f9 fd85 	bl	8000b28 <__aeabi_fsub>
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 800701e:	4629      	mov	r1, r5
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 8007020:	4607      	mov	r7, r0
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 8007022:	f7fa f847 	bl	80010b4 <__aeabi_fcmpgt>
 8007026:	2800      	cmp	r0, #0
 8007028:	d155      	bne.n	80070d6 <read_barometer+0x306>
    ms5611.actual_pressure_diff = ms5611.actual_pressure_slow - ms5611.actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 800702a:	f8c4 7174 	str.w	r7, [r4, #372]	; 0x174
    if (ms5611.actual_pressure_diff < -8)ms5611.actual_pressure_diff = -8;                                                  //If the difference is smaller then -8 limit the difference to -8.
 800702e:	f04f 4541 	mov.w	r5, #3238002688	; 0xc1000000
 8007032:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
 8007036:	4629      	mov	r1, r5
 8007038:	f7fa f81e 	bl	8001078 <__aeabi_fcmplt>
 800703c:	b108      	cbz	r0, 8007042 <read_barometer+0x272>
 800703e:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
    if (ms5611.actual_pressure_diff > 1 || ms5611.actual_pressure_diff < -1)ms5611.actual_pressure_slow -= ms5611.actual_pressure_diff / 6.0;
 8007042:	f8d4 5174 	ldr.w	r5, [r4, #372]	; 0x174
 8007046:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800704a:	4628      	mov	r0, r5
 800704c:	f7fa f832 	bl	80010b4 <__aeabi_fcmpgt>
 8007050:	b920      	cbnz	r0, 800705c <read_barometer+0x28c>
 8007052:	4928      	ldr	r1, [pc, #160]	; (80070f4 <read_barometer+0x324>)
 8007054:	4628      	mov	r0, r5
 8007056:	f7fa f80f 	bl	8001078 <__aeabi_fcmplt>
 800705a:	b1a8      	cbz	r0, 8007088 <read_barometer+0x2b8>
 800705c:	4630      	mov	r0, r6
 800705e:	f7f9 f9e3 	bl	8000428 <__aeabi_f2d>
 8007062:	4606      	mov	r6, r0
 8007064:	4628      	mov	r0, r5
 8007066:	460f      	mov	r7, r1
 8007068:	f7f9 f9de 	bl	8000428 <__aeabi_f2d>
 800706c:	2200      	movs	r2, #0
 800706e:	4b22      	ldr	r3, [pc, #136]	; (80070f8 <read_barometer+0x328>)
 8007070:	f7f9 fb58 	bl	8000724 <__aeabi_ddiv>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 f874 	bl	8000168 <__aeabi_dsub>
 8007080:	f7f9 fcfe 	bl	8000a80 <__aeabi_d2f>
 8007084:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    ms5611.actual_pressure = ms5611.actual_pressure_slow;                                                                   //The actual_pressure is used in the program for altitude calculations.
 8007088:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    ms5611.GroundAltitude = lrintf((1.0f - powf((ms5611.actual_pressure) / 101325.0f, 0.190295f)) * 4433000.0f);
 800708c:	491b      	ldr	r1, [pc, #108]	; (80070fc <read_barometer+0x32c>)
    ms5611.actual_pressure = ms5611.actual_pressure_slow;                                                                   //The actual_pressure is used in the program for altitude calculations.
 800708e:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    ms5611.GroundAltitude = lrintf((1.0f - powf((ms5611.actual_pressure) / 101325.0f, 0.190295f)) * 4433000.0f);
 8007092:	f7f9 ff07 	bl	8000ea4 <__aeabi_fdiv>
 8007096:	491a      	ldr	r1, [pc, #104]	; (8007100 <read_barometer+0x330>)
 8007098:	f004 fe46 	bl	800bd28 <powf>
 800709c:	4601      	mov	r1, r0
 800709e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80070a2:	f7f9 fd41 	bl	8000b28 <__aeabi_fsub>
 80070a6:	4917      	ldr	r1, [pc, #92]	; (8007104 <read_barometer+0x334>)
 80070a8:	f7f9 fe48 	bl	8000d3c <__aeabi_fmul>
 80070ac:	f004 fc50 	bl	800b950 <lrintf>
 80070b0:	f7f9 fdf0 	bl	8000c94 <__aeabi_i2f>
 80070b4:	f8c4 0194 	str.w	r0, [r4, #404]	; 0x194
  if (ms5611.barometer_counter == 3) {                                                                               //When the barometer counter is 3
 80070b8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80070bc:	2b03      	cmp	r3, #3
    ms5611.barometer_counter = 0;                                                                                    //Set the barometer counter to 0 for the next measurements.
 80070be:	bf04      	itt	eq
 80070c0:	2300      	moveq	r3, #0
 80070c2:	f884 3060 	strbeq.w	r3, [r4, #96]	; 0x60
 80070c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 80070ca:	2000      	movs	r0, #0
 80070cc:	f7ff fe6a 	bl	8006da4 <readRegister24>
 80070d0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 80070d4:	e6ae      	b.n	8006e34 <read_barometer+0x64>
    if (ms5611.actual_pressure_diff > 8)ms5611.actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 80070d6:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
 80070da:	e7a8      	b.n	800702e <read_barometer+0x25e>
 80070dc:	20001188 	.word	0x20001188
 80070e0:	001fffff 	.word	0x001fffff
 80070e4:	200012e8 	.word	0x200012e8
 80070e8:	41a00000 	.word	0x41a00000
 80070ec:	3f7c28f6 	.word	0x3f7c28f6
 80070f0:	3c75c28f 	.word	0x3c75c28f
 80070f4:	bf800000 	.word	0xbf800000
 80070f8:	40180000 	.word	0x40180000
 80070fc:	47c5e680 	.word	0x47c5e680
 8007100:	3e42dcb1 	.word	0x3e42dcb1
 8007104:	4a8748d0 	.word	0x4a8748d0
 8007108:	007fffff 	.word	0x007fffff
 800710c:	fffffa24 	.word	0xfffffa24

08007110 <MS5611_Init>:
{
 8007110:	b538      	push	{r3, r4, r5, lr}
	sprintf(Buf, "Initialize MS-5611 Sensor\r\n");
 8007112:	492f      	ldr	r1, [pc, #188]	; (80071d0 <MS5611_Init+0xc0>)
{
 8007114:	4605      	mov	r5, r0
	sprintf(Buf, "Initialize MS-5611 Sensor\r\n");
 8007116:	482f      	ldr	r0, [pc, #188]	; (80071d4 <MS5611_Init+0xc4>)
 8007118:	f001 fc8c 	bl	8008a34 <strcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800711c:	482d      	ldr	r0, [pc, #180]	; (80071d4 <MS5611_Init+0xc4>)
 800711e:	f7f9 f817 	bl	8000150 <strlen>
 8007122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007126:	b282      	uxth	r2, r0
 8007128:	492a      	ldr	r1, [pc, #168]	; (80071d4 <MS5611_Init+0xc4>)
 800712a:	482b      	ldr	r0, [pc, #172]	; (80071d8 <MS5611_Init+0xc8>)
 800712c:	f7fc fde4 	bl	8003cf8 <HAL_UART_Transmit>
  I2C_Write(MS5611_ADDRESS, MS5611_CMD_RESET, 1);
 8007130:	2201      	movs	r2, #1
 8007132:	211e      	movs	r1, #30
 8007134:	20ee      	movs	r0, #238	; 0xee
 8007136:	f7fd f8f7 	bl	8004328 <I2C_Write>
  ms5611.seaLevelPressure = 101325;
 800713a:	a123      	add	r1, pc, #140	; (adr r1, 80071c8 <MS5611_Init+0xb8>)
 800713c:	e9d1 0100 	ldrd	r0, r1, [r1]
  ms5611.compensation = 1;
 8007140:	2301      	movs	r3, #1
 8007142:	4c26      	ldr	r4, [pc, #152]	; (80071dc <MS5611_Init+0xcc>)
  ms5611.seaLevelPressure = 101325;
 8007144:	f504 72bc 	add.w	r2, r4, #376	; 0x178
  ms5611.compensation = 1;
 8007148:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  ms5611.seaLevelPressure = 101325;
 800714c:	e9c2 0100 	strd	r0, r1, [r2]
  switch (osr)
 8007150:	2d08      	cmp	r5, #8
 8007152:	d808      	bhi.n	8007166 <MS5611_Init+0x56>
 8007154:	e8df f005 	tbb	[pc, r5]
 8007158:	07050706 	.word	0x07050706
 800715c:	07340732 	.word	0x07340732
 8007160:	36          	.byte	0x36
 8007161:	00          	.byte	0x00
      ms5611.ct = 2;
 8007162:	2302      	movs	r3, #2
      ms5611.ct = 10;
 8007164:	7323      	strb	r3, [r4, #12]
  HAL_Delay(100);
 8007166:	2064      	movs	r0, #100	; 0x64
  ms5611.uosr = osr;
 8007168:	7365      	strb	r5, [r4, #13]
  HAL_Delay(100);
 800716a:	f7fa f9b9 	bl	80014e0 <HAL_Delay>
 800716e:	2500      	movs	r5, #0
    ms5611.fc[offset] = readRegister16(MS5611_CMD_READ_PROM + (offset * 2));
 8007170:	f1a5 005e 	sub.w	r0, r5, #94	; 0x5e
 8007174:	b2c0      	uxtb	r0, r0
 8007176:	f7ff fe01 	bl	8006d7c <readRegister16>
 800717a:	5360      	strh	r0, [r4, r5]
 800717c:	3502      	adds	r5, #2
  for (uint8_t offset = 0; offset < 6; offset++)
 800717e:	2d0c      	cmp	r5, #12
 8007180:	d1f6      	bne.n	8007170 <MS5611_Init+0x60>
  sprintf(Buf, "Oversampling: %d\r\n", ms5611.uosr);
 8007182:	7b62      	ldrb	r2, [r4, #13]
 8007184:	4916      	ldr	r1, [pc, #88]	; (80071e0 <MS5611_Init+0xd0>)
 8007186:	4813      	ldr	r0, [pc, #76]	; (80071d4 <MS5611_Init+0xc4>)
 8007188:	f001 fc30 	bl	80089ec <sprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800718c:	4811      	ldr	r0, [pc, #68]	; (80071d4 <MS5611_Init+0xc4>)
 800718e:	f7f8 ffdf 	bl	8000150 <strlen>
 8007192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007196:	b282      	uxth	r2, r0
 8007198:	490e      	ldr	r1, [pc, #56]	; (80071d4 <MS5611_Init+0xc4>)
 800719a:	480f      	ldr	r0, [pc, #60]	; (80071d8 <MS5611_Init+0xc8>)
 800719c:	f7fc fdac 	bl	8003cf8 <HAL_UART_Transmit>
 80071a0:	25ff      	movs	r5, #255	; 0xff
    read_barometer();                                           //Read and calculate the barometer data.
 80071a2:	f7ff fe15 	bl	8006dd0 <read_barometer>
 80071a6:	3d01      	subs	r5, #1
    HAL_Delay(4);                                               //The main program loop also runs 250Hz (4ms per loop).
 80071a8:	2004      	movs	r0, #4
 80071aa:	f7fa f999 	bl	80014e0 <HAL_Delay>
  for (uint8_t start = 0; start < 255; start++) {                       //This loop runs 100 times.
 80071ae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80071b2:	d1f6      	bne.n	80071a2 <MS5611_Init+0x92>
  ms5611.actual_pressure = 0;                                          //Reset the pressure calculations.
 80071b4:	2300      	movs	r3, #0
 80071b6:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
      ms5611.ct = 3;
 80071bc:	2303      	movs	r3, #3
 80071be:	e7d1      	b.n	8007164 <MS5611_Init+0x54>
      ms5611.ct = 5;
 80071c0:	2305      	movs	r3, #5
 80071c2:	e7cf      	b.n	8007164 <MS5611_Init+0x54>
      ms5611.ct = 10;
 80071c4:	230a      	movs	r3, #10
 80071c6:	e7cd      	b.n	8007164 <MS5611_Init+0x54>
 80071c8:	00000000 	.word	0x00000000
 80071cc:	40f8bcd0 	.word	0x40f8bcd0
 80071d0:	0800dfb0 	.word	0x0800dfb0
 80071d4:	200013e0 	.word	0x200013e0
 80071d8:	20001724 	.word	0x20001724
 80071dc:	20001188 	.word	0x20001188
 80071e0:	0800dfcc 	.word	0x0800dfcc

080071e4 <Baro_update>:
    switch (taskOrder){
 80071e4:	4b2a      	ldr	r3, [pc, #168]	; (8007290 <Baro_update+0xac>)
{
 80071e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (taskOrder){
 80071ea:	681c      	ldr	r4, [r3, #0]
 80071ec:	2c01      	cmp	r4, #1
 80071ee:	d046      	beq.n	800727e <Baro_update+0x9a>
 80071f0:	2c02      	cmp	r4, #2
 80071f2:	f04f 0501 	mov.w	r5, #1
 80071f6:	d047      	beq.n	8007288 <Baro_update+0xa4>
 80071f8:	2c00      	cmp	r4, #0
 80071fa:	d13e      	bne.n	800727a <Baro_update+0x96>
       if ((int32_t)(loop_timer - baroDeadline) < 0)
 80071fc:	4a25      	ldr	r2, [pc, #148]	; (8007294 <Baro_update+0xb0>)
 80071fe:	4e26      	ldr	r6, [pc, #152]	; (8007298 <Baro_update+0xb4>)
       taskOrder++;
 8007200:	601d      	str	r5, [r3, #0]
       if ((int32_t)(loop_timer - baroDeadline) < 0)
 8007202:	6831      	ldr	r1, [r6, #0]
 8007204:	6813      	ldr	r3, [r2, #0]
 8007206:	1a5b      	subs	r3, r3, r1
 8007208:	2b00      	cmp	r3, #0
 800720a:	db20      	blt.n	800724e <Baro_update+0x6a>
       baroDeadline = loop_timer;
 800720c:	6813      	ldr	r3, [r2, #0]
       if (state) {
 800720e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80072a0 <Baro_update+0xbc>
       baroDeadline = loop_timer;
 8007212:	6033      	str	r3, [r6, #0]
       if (state) {
 8007214:	f8d8 3000 	ldr.w	r3, [r8]
 8007218:	4f20      	ldr	r7, [pc, #128]	; (800729c <Baro_update+0xb8>)
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 800721a:	4620      	mov	r0, r4
       if (state) {
 800721c:	b1d3      	cbz	r3, 8007254 <Baro_update+0x70>
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 800721e:	f7ff fdc1 	bl	8006da4 <readRegister24>
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8007222:	7b79      	ldrb	r1, [r7, #13]
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8007224:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8007228:	3150      	adds	r1, #80	; 0x50
 800722a:	462a      	mov	r2, r5
 800722c:	b2c9      	uxtb	r1, r1
 800722e:	20ee      	movs	r0, #238	; 0xee
 8007230:	f7fd f87a 	bl	8004328 <I2C_Write>
        baroDeadline += 10000;
 8007234:	6833      	ldr	r3, [r6, #0]
        ms5611.realPressure = readPressure(1);
 8007236:	4628      	mov	r0, r5
        baroDeadline += 10000;
 8007238:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800723c:	3310      	adds	r3, #16
 800723e:	6033      	str	r3, [r6, #0]
        ms5611.realPressure = readPressure(1);
 8007240:	f7ff fce8 	bl	8006c14 <readPressure>
        state = 0;
 8007244:	f8c8 4000 	str.w	r4, [r8]
        return 2;
 8007248:	2402      	movs	r4, #2
        ms5611.realPressure = readPressure(1);
 800724a:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
}
 800724e:	4620      	mov	r0, r4
 8007250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8007254:	f7ff fda6 	bl	8006da4 <readRegister24>
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8007258:	7b79      	ldrb	r1, [r7, #13]
        ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 800725a:	6678      	str	r0, [r7, #100]	; 0x64
        I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 800725c:	3140      	adds	r1, #64	; 0x40
 800725e:	462a      	mov	r2, r5
 8007260:	b2c9      	uxtb	r1, r1
 8007262:	20ee      	movs	r0, #238	; 0xee
 8007264:	f7fd f860 	bl	8004328 <I2C_Write>
        Baro_Common();
 8007268:	f7ff fc1c 	bl	8006aa4 <Baro_Common>
        baroDeadline += 10000;
 800726c:	6833      	ldr	r3, [r6, #0]
        state = 1;
 800726e:	f8c8 5000 	str.w	r5, [r8]
        baroDeadline += 10000;
 8007272:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007276:	3310      	adds	r3, #16
 8007278:	6033      	str	r3, [r6, #0]
    return 1;
 800727a:	462c      	mov	r4, r5
 800727c:	e7e7      	b.n	800724e <Baro_update+0x6a>
      taskOrder++;
 800727e:	2202      	movs	r2, #2
 8007280:	601a      	str	r2, [r3, #0]
       getEstimatedAltitude();
 8007282:	f7ff fc2d 	bl	8006ae0 <getEstimatedAltitude>
       break;
 8007286:	e7e2      	b.n	800724e <Baro_update+0x6a>
      taskOrder = 0;
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	e7f5      	b.n	800727a <Baro_update+0x96>
 800728e:	bf00      	nop
 8007290:	20000c28 	.word	0x20000c28
 8007294:	20000d44 	.word	0x20000d44
 8007298:	20000b28 	.word	0x20000b28
 800729c:	20001188 	.word	0x20001188
 80072a0:	20000c24 	.word	0x20000c24

080072a4 <HAL_UART_RxCpltCallback>:
   return(ch);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART1) //current USART
 80072a4:	6802      	ldr	r2, [r0, #0]
 80072a6:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <HAL_UART_RxCpltCallback+0x30>)
{
 80072a8:	b510      	push	{r4, lr}
	if(huart->Instance == USART1) //current USART
 80072aa:	429a      	cmp	r2, r3
{
 80072ac:	4604      	mov	r4, r0
	if(huart->Instance == USART1) //current USART
 80072ae:	d104      	bne.n	80072ba <HAL_UART_RxCpltCallback+0x16>
		{
			write_Q(&Q_buffer[UART1], rx1_buffer[0]);
 80072b0:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <HAL_UART_RxCpltCallback+0x34>)
 80072b2:	480a      	ldr	r0, [pc, #40]	; (80072dc <HAL_UART_RxCpltCallback+0x38>)
 80072b4:	7819      	ldrb	r1, [r3, #0]
 80072b6:	f7fe fa12 	bl	80056de <write_Q>
			//TX_CHR(rx1_buffer[0]);
		}
		
	if(huart->Instance == USART2) //current USART
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	4b08      	ldr	r3, [pc, #32]	; (80072e0 <HAL_UART_RxCpltCallback+0x3c>)
 80072be:	429a      	cmp	r2, r3
 80072c0:	d106      	bne.n	80072d0 <HAL_UART_RxCpltCallback+0x2c>
		{
			write_Q(&Q_buffer[UART2], rx2_buffer[0]);
		}
}
 80072c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			write_Q(&Q_buffer[UART2], rx2_buffer[0]);
 80072c6:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <HAL_UART_RxCpltCallback+0x40>)
 80072c8:	4807      	ldr	r0, [pc, #28]	; (80072e8 <HAL_UART_RxCpltCallback+0x44>)
 80072ca:	7819      	ldrb	r1, [r3, #0]
 80072cc:	f7fe ba07 	b.w	80056de <write_Q>
 80072d0:	bd10      	pop	{r4, pc}
 80072d2:	bf00      	nop
 80072d4:	40013800 	.word	0x40013800
 80072d8:	20001460 	.word	0x20001460
 80072dc:	20000fa0 	.word	0x20000fa0
 80072e0:	40004400 	.word	0x40004400
 80072e4:	20001470 	.word	0x20001470
 80072e8:	20001028 	.word	0x20001028

080072ec <TX_CHR>:

void TX_CHR(char ch){
	while(!(USART1->SR & 0x80));
 80072ec:	4b02      	ldr	r3, [pc, #8]	; (80072f8 <TX_CHR+0xc>)
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	0612      	lsls	r2, r2, #24
 80072f2:	d5fc      	bpl.n	80072ee <TX_CHR+0x2>
	USART1->DR = ch;
 80072f4:	6058      	str	r0, [r3, #4]
 80072f6:	4770      	bx	lr
 80072f8:	40013800 	.word	0x40013800

080072fc <serialize8>:
}

///////////////////////////////////////////////////
void serialize8(uint8_t a)
{
 80072fc:	b508      	push	{r3, lr}
 80072fe:	4601      	mov	r1, r0
    TX_CHR(a);
 8007300:	f7ff fff4 	bl	80072ec <TX_CHR>
    currentPortState->checksum ^= a;
 8007304:	4b02      	ldr	r3, [pc, #8]	; (8007310 <serialize8+0x14>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	781a      	ldrb	r2, [r3, #0]
 800730a:	4051      	eors	r1, r2
 800730c:	7019      	strb	r1, [r3, #0]
 800730e:	bd08      	pop	{r3, pc}
 8007310:	2000000c 	.word	0x2000000c

08007314 <headSerial>:
    t += (uint32_t)read16() << 16;
    return t;
}

void headSerial(uint8_t err, uint8_t s, uint8_t cmdMSP)
{
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	4606      	mov	r6, r0
    serialize8('$');
 8007318:	2024      	movs	r0, #36	; 0x24
{
 800731a:	460d      	mov	r5, r1
 800731c:	4614      	mov	r4, r2
    serialize8('$');
 800731e:	f7ff ffed 	bl	80072fc <serialize8>
    serialize8('M');
 8007322:	204d      	movs	r0, #77	; 0x4d
 8007324:	f7ff ffea 	bl	80072fc <serialize8>
    serialize8(err ? '!' : '>');
 8007328:	2e00      	cmp	r6, #0
 800732a:	bf14      	ite	ne
 800732c:	2021      	movne	r0, #33	; 0x21
 800732e:	203e      	moveq	r0, #62	; 0x3e
 8007330:	f7ff ffe4 	bl	80072fc <serialize8>
    currentPortState->checksum = 0;               // start calculating a new checksum
 8007334:	2200      	movs	r2, #0
 8007336:	4b05      	ldr	r3, [pc, #20]	; (800734c <headSerial+0x38>)
    serialize8(s);
 8007338:	4628      	mov	r0, r5
    currentPortState->checksum = 0;               // start calculating a new checksum
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	701a      	strb	r2, [r3, #0]
    serialize8(s);
 800733e:	f7ff ffdd 	bl	80072fc <serialize8>
    serialize8(cmdMSP);
 8007342:	4620      	mov	r0, r4
}
 8007344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serialize8(cmdMSP);
 8007348:	f7ff bfd8 	b.w	80072fc <serialize8>
 800734c:	2000000c 	.word	0x2000000c

08007350 <headSerialSend>:

void headSerialSend(uint8_t s, uint8_t cmdMSP)
{
    headSerial(0, s, cmdMSP);
 8007350:	460a      	mov	r2, r1
 8007352:	4601      	mov	r1, r0
 8007354:	2000      	movs	r0, #0
 8007356:	f7ff bfdd 	b.w	8007314 <headSerial>
	...

0800735c <tailSerialReply>:
    headSerialResponse(1, s);
}

void tailSerialReply(void)
{
    serialize8(currentPortState->checksum);
 800735c:	4b02      	ldr	r3, [pc, #8]	; (8007368 <tailSerialReply+0xc>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	7818      	ldrb	r0, [r3, #0]
 8007362:	f7ff bfcb 	b.w	80072fc <serialize8>
 8007366:	bf00      	nop
 8007368:	2000000c 	.word	0x2000000c

0800736c <PrintData>:
}
///////////////////////////////////////////////////

void PrintData(uint8_t command)
{
 800736c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Debug_TC++;
 800736e:	4a9c      	ldr	r2, [pc, #624]	; (80075e0 <PrintData+0x274>)
{
 8007370:	b099      	sub	sp, #100	; 0x64
  Debug_TC++;
 8007372:	7813      	ldrb	r3, [r2, #0]
{
 8007374:	4606      	mov	r6, r0
  Debug_TC++;
 8007376:	3301      	adds	r3, #1
 8007378:	b2db      	uxtb	r3, r3
  if(Debug_TC >= 12){ //12
 800737a:	2b0b      	cmp	r3, #11
 800737c:	d802      	bhi.n	8007384 <PrintData+0x18>
  Debug_TC++;
 800737e:	7013      	strb	r3, [r2, #0]
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw);
	     HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
		break;
	 }
  }
}
 8007380:	b019      	add	sp, #100	; 0x64
 8007382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Debug_TC = 0;
 8007384:	2500      	movs	r5, #0
    OLed_printf(0, 16, "ROLL : %2.1f 도", imu.AHRS[ROLL]);
 8007386:	4c97      	ldr	r4, [pc, #604]	; (80075e4 <PrintData+0x278>)
    LED1_TOGGLE;  //GREEN
 8007388:	2110      	movs	r1, #16
 800738a:	4897      	ldr	r0, [pc, #604]	; (80075e8 <PrintData+0x27c>)
    Debug_TC = 0;
 800738c:	7015      	strb	r5, [r2, #0]
    LED1_TOGGLE;  //GREEN
 800738e:	f7fa fdc6 	bl	8001f1e <HAL_GPIO_TogglePin>
    OLed_printf(0, 0, "CanRotor_Mini");
 8007392:	4a96      	ldr	r2, [pc, #600]	; (80075ec <PrintData+0x280>)
 8007394:	4629      	mov	r1, r5
 8007396:	4628      	mov	r0, r5
 8007398:	f000 fcf2 	bl	8007d80 <OLed_printf>
    OLed_printf(0, 16, "ROLL : %2.1f 도", imu.AHRS[ROLL]);
 800739c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80073a0:	f7f9 f842 	bl	8000428 <__aeabi_f2d>
 80073a4:	4a92      	ldr	r2, [pc, #584]	; (80075f0 <PrintData+0x284>)
 80073a6:	e9cd 0100 	strd	r0, r1, [sp]
 80073aa:	2110      	movs	r1, #16
 80073ac:	4628      	mov	r0, r5
 80073ae:	f000 fce7 	bl	8007d80 <OLed_printf>
    OLed_printf(0, 32, "PITCH: %2.1f 도", imu.AHRS[PITCH]);
 80073b2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80073b6:	f7f9 f837 	bl	8000428 <__aeabi_f2d>
 80073ba:	4a8e      	ldr	r2, [pc, #568]	; (80075f4 <PrintData+0x288>)
 80073bc:	e9cd 0100 	strd	r0, r1, [sp]
 80073c0:	2120      	movs	r1, #32
 80073c2:	4628      	mov	r0, r5
 80073c4:	f000 fcdc 	bl	8007d80 <OLed_printf>
    OLed_printf(0, 48, "YAW  : %2.1f 도", imu.AHRS[YAW]);
 80073c8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80073cc:	f7f9 f82c 	bl	8000428 <__aeabi_f2d>
 80073d0:	4a89      	ldr	r2, [pc, #548]	; (80075f8 <PrintData+0x28c>)
 80073d2:	e9cd 0100 	strd	r0, r1, [sp]
 80073d6:	2130      	movs	r1, #48	; 0x30
 80073d8:	4628      	mov	r0, r5
 80073da:	f000 fcd1 	bl	8007d80 <OLed_printf>
    display();
 80073de:	f000 fc3f 	bl	8007c60 <display>
	switch(command)
 80073e2:	2e0e      	cmp	r6, #14
 80073e4:	d8cc      	bhi.n	8007380 <PrintData+0x14>
 80073e6:	e8df f016 	tbh	[pc, r6, lsl #1]
 80073ea:	000f      	.short	0x000f
 80073ec:	005e001e 	.word	0x005e001e
 80073f0:	009e0074 	.word	0x009e0074
 80073f4:	012500ae 	.word	0x012500ae
 80073f8:	0169015f 	.word	0x0169015f
 80073fc:	019e0183 	.word	0x019e0183
 8007400:	01c501b1 	.word	0x01c501b1
 8007404:	01ed01d9 	.word	0x01ed01d9
		sprintf(Buf, "[1]9250 [3]Radio [4]Motor [5]Angle [6]PID [9]IMU [p]Kp [i]Ki [d]Kd [q,w,e] [z,x,c] \r\n ");
 8007408:	497c      	ldr	r1, [pc, #496]	; (80075fc <PrintData+0x290>)
 800740a:	487d      	ldr	r0, [pc, #500]	; (8007600 <PrintData+0x294>)
 800740c:	f001 fb12 	bl	8008a34 <strcpy>
	     HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
 8007410:	487b      	ldr	r0, [pc, #492]	; (8007600 <PrintData+0x294>)
 8007412:	f7f8 fe9d 	bl	8000150 <strlen>
 8007416:	497a      	ldr	r1, [pc, #488]	; (8007600 <PrintData+0x294>)
 8007418:	b282      	uxth	r2, r0
 800741a:	487a      	ldr	r0, [pc, #488]	; (8007604 <PrintData+0x298>)
}
 800741c:	b019      	add	sp, #100	; 0x64
 800741e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	     HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
 8007422:	f7fc bcc5 	b.w	8003db0 <HAL_UART_Transmit_DMA>
	     sprintf(Buf, " acc (%6.2f), (%6.2f), (%6.2f) / gyro (%6.2f), (%6.2f), (%6.2f) / mag (%6.f), (%6.f), (%6.f)\r\n",
 8007426:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007428:	f7f8 fffe 	bl	8000428 <__aeabi_f2d>
 800742c:	4606      	mov	r6, r0
 800742e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007430:	460f      	mov	r7, r1
 8007432:	f7f8 fff9 	bl	8000428 <__aeabi_f2d>
 8007436:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800743a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800743c:	f7f8 fff4 	bl	8000428 <__aeabi_f2d>
 8007440:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007444:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007446:	f7f8 ffef 	bl	8000428 <__aeabi_f2d>
 800744a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800744e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007450:	f7f8 ffea 	bl	8000428 <__aeabi_f2d>
 8007454:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007458:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800745a:	f7f8 ffe5 	bl	8000428 <__aeabi_f2d>
 800745e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007462:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007464:	f7f8 ffe0 	bl	8000428 <__aeabi_f2d>
 8007468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800746c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800746e:	f7f8 ffdb 	bl	8000428 <__aeabi_f2d>
 8007472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007476:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007478:	f7f8 ffd6 	bl	8000428 <__aeabi_f2d>
 800747c:	4632      	mov	r2, r6
 800747e:	e9cd 0100 	strd	r0, r1, [sp]
 8007482:	463b      	mov	r3, r7
 8007484:	4960      	ldr	r1, [pc, #384]	; (8007608 <PrintData+0x29c>)
 8007486:	485e      	ldr	r0, [pc, #376]	; (8007600 <PrintData+0x294>)
 8007488:	f001 fab0 	bl	80089ec <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800748c:	485c      	ldr	r0, [pc, #368]	; (8007600 <PrintData+0x294>)
 800748e:	f7f8 fe5f 	bl	8000150 <strlen>
 8007492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007496:	b282      	uxth	r2, r0
 8007498:	4959      	ldr	r1, [pc, #356]	; (8007600 <PrintData+0x294>)
 800749a:	485a      	ldr	r0, [pc, #360]	; (8007604 <PrintData+0x298>)
}
 800749c:	b019      	add	sp, #100	; 0x64
 800749e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80074a2:	f7fc bc29 	b.w	8003cf8 <HAL_UART_Transmit>
		sprintf(Buf, " gyroBias_x: (%3.2f), gyroBias_y: (%3.2f), gyroBias_z: (%3.2f)\r\n",
 80074a6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80074a8:	f7f8 ffbe 	bl	8000428 <__aeabi_f2d>
 80074ac:	4606      	mov	r6, r0
 80074ae:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80074b0:	460f      	mov	r7, r1
 80074b2:	f7f8 ffb9 	bl	8000428 <__aeabi_f2d>
 80074b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ba:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80074bc:	f7f8 ffb4 	bl	8000428 <__aeabi_f2d>
 80074c0:	4632      	mov	r2, r6
 80074c2:	e9cd 0100 	strd	r0, r1, [sp]
 80074c6:	463b      	mov	r3, r7
 80074c8:	4950      	ldr	r1, [pc, #320]	; (800760c <PrintData+0x2a0>)
 80074ca:	484d      	ldr	r0, [pc, #308]	; (8007600 <PrintData+0x294>)
 80074cc:	f001 fa8e 	bl	80089ec <sprintf>
 80074d0:	e7dc      	b.n	800748c <PrintData+0x120>
	          GPS.year, GPS.month, GPS.day, GPS.hour, GPS.minute, GPS.seconds, GPS.milliseconds, GPS.speed, GPS.angle, GPS.error);
 80074d2:	4c4f      	ldr	r4, [pc, #316]	; (8007610 <PrintData+0x2a4>)
	  sprintf(Buf, "Y : %2d, M : %2d, D : %2d, H: %2d, min : %2d, sec : %2d, mil : %3d, speed : %.2f, angle : %.2f, Error : %d\n",
 80074d4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80074d8:	f894 607c 	ldrb.w	r6, [r4, #124]	; 0x7c
 80074dc:	f894 507b 	ldrb.w	r5, [r4, #123]	; 0x7b
 80074e0:	930a      	str	r3, [sp, #40]	; 0x28
 80074e2:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80074e6:	f7f8 ff9f 	bl	8000428 <__aeabi_f2d>
 80074ea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80074ee:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80074f2:	f7f8 ff99 	bl	8000428 <__aeabi_f2d>
 80074f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80074fa:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 80074fe:	462a      	mov	r2, r5
 8007500:	9304      	str	r3, [sp, #16]
 8007502:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 8007506:	4943      	ldr	r1, [pc, #268]	; (8007614 <PrintData+0x2a8>)
 8007508:	9303      	str	r3, [sp, #12]
 800750a:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 800750e:	483c      	ldr	r0, [pc, #240]	; (8007600 <PrintData+0x294>)
 8007510:	9302      	str	r3, [sp, #8]
 8007512:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	4633      	mov	r3, r6
 8007520:	f001 fa64 	bl	80089ec <sprintf>
 8007524:	e774      	b.n	8007410 <PrintData+0xa4>
		sprintf(Buf, " %d %d %d %d\r\n", motor[0], motor[1], motor[2], motor[3]);
 8007526:	493c      	ldr	r1, [pc, #240]	; (8007618 <PrintData+0x2ac>)
 8007528:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 800752c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8007530:	f9b1 2000 	ldrsh.w	r2, [r1]
 8007534:	9001      	str	r0, [sp, #4]
 8007536:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800753a:	4831      	ldr	r0, [pc, #196]	; (8007600 <PrintData+0x294>)
 800753c:	9100      	str	r1, [sp, #0]
 800753e:	4937      	ldr	r1, [pc, #220]	; (800761c <PrintData+0x2b0>)
 8007540:	f001 fa54 	bl	80089ec <sprintf>
 8007544:	e7a2      	b.n	800748c <PrintData+0x120>
    sprintf(Buf, "Mag:(%5.f)(%5.f)(%5.f), AHRS:(%4.f)(%4.f)(%4.f), RC:(%4.d)(%4.d)(%4.d)(%4.d), (%4.d) (%4.2f), ARMED: (%2.1d), MS5611 : %.2f Pa , %.2f cm\r\n",
 8007546:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007548:	f7f8 ff6e 	bl	8000428 <__aeabi_f2d>
            imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW], imu.AHRS[ROLL], imu.AHRS[PITCH], imu.AHRS[YAW], RC.rcCommand[ROLL], RC.rcCommand[PITCH], RC.rcCommand[YAW], RC.rcCommand[THROTTLE], BAT.VBAT_Sense, BAT.VBAT, f.ARMED, ms5611.actual_pressure, ms5611.GroundAltitude);
 800754c:	4d34      	ldr	r5, [pc, #208]	; (8007620 <PrintData+0x2b4>)
    sprintf(Buf, "Mag:(%5.f)(%5.f)(%5.f), AHRS:(%4.f)(%4.f)(%4.f), RC:(%4.d)(%4.d)(%4.d)(%4.d), (%4.d) (%4.2f), ARMED: (%2.1d), MS5611 : %.2f Pa , %.2f cm\r\n",
 800754e:	4606      	mov	r6, r0
 8007550:	f8d5 0194 	ldr.w	r0, [r5, #404]	; 0x194
 8007554:	460f      	mov	r7, r1
 8007556:	f7f8 ff67 	bl	8000428 <__aeabi_f2d>
 800755a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800755e:	f8d5 0168 	ldr.w	r0, [r5, #360]	; 0x168
 8007562:	f7f8 ff61 	bl	8000428 <__aeabi_f2d>
 8007566:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
            imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW], imu.AHRS[ROLL], imu.AHRS[PITCH], imu.AHRS[YAW], RC.rcCommand[ROLL], RC.rcCommand[PITCH], RC.rcCommand[YAW], RC.rcCommand[THROTTLE], BAT.VBAT_Sense, BAT.VBAT, f.ARMED, ms5611.actual_pressure, ms5611.GroundAltitude);
 800756a:	4b2e      	ldr	r3, [pc, #184]	; (8007624 <PrintData+0x2b8>)
 800756c:	4d2e      	ldr	r5, [pc, #184]	; (8007628 <PrintData+0x2bc>)
    sprintf(Buf, "Mag:(%5.f)(%5.f)(%5.f), AHRS:(%4.f)(%4.f)(%4.f), RC:(%4.d)(%4.d)(%4.d)(%4.d), (%4.d) (%4.2f), ARMED: (%2.1d), MS5611 : %.2f Pa , %.2f cm\r\n",
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	9312      	str	r3, [sp, #72]	; 0x48
 8007572:	6868      	ldr	r0, [r5, #4]
 8007574:	f7f8 ff58 	bl	8000428 <__aeabi_f2d>
 8007578:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	930e      	str	r3, [sp, #56]	; 0x38
            imu.magRaw[ROLL], imu.magRaw[PITCH], imu.magRaw[YAW], imu.AHRS[ROLL], imu.AHRS[PITCH], imu.AHRS[YAW], RC.rcCommand[ROLL], RC.rcCommand[PITCH], RC.rcCommand[YAW], RC.rcCommand[THROTTLE], BAT.VBAT_Sense, BAT.VBAT, f.ARMED, ms5611.actual_pressure, ms5611.GroundAltitude);
 8007580:	4b2a      	ldr	r3, [pc, #168]	; (800762c <PrintData+0x2c0>)
    sprintf(Buf, "Mag:(%5.f)(%5.f)(%5.f), AHRS:(%4.f)(%4.f)(%4.f), RC:(%4.d)(%4.d)(%4.d)(%4.d), (%4.d) (%4.2f), ARMED: (%2.1d), MS5611 : %.2f Pa , %.2f cm\r\n",
 8007582:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 8007586:	920d      	str	r2, [sp, #52]	; 0x34
 8007588:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 800758c:	920c      	str	r2, [sp, #48]	; 0x30
 800758e:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 8007592:	920b      	str	r2, [sp, #44]	; 0x2c
 8007594:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8007598:	930a      	str	r3, [sp, #40]	; 0x28
 800759a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800759e:	f7f8 ff43 	bl	8000428 <__aeabi_f2d>
 80075a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075a6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80075aa:	f7f8 ff3d 	bl	8000428 <__aeabi_f2d>
 80075ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075b2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80075b6:	f7f8 ff37 	bl	8000428 <__aeabi_f2d>
 80075ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075be:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80075c0:	f7f8 ff32 	bl	8000428 <__aeabi_f2d>
 80075c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80075ca:	f7f8 ff2d 	bl	8000428 <__aeabi_f2d>
 80075ce:	4632      	mov	r2, r6
 80075d0:	e9cd 0100 	strd	r0, r1, [sp]
 80075d4:	463b      	mov	r3, r7
 80075d6:	4916      	ldr	r1, [pc, #88]	; (8007630 <PrintData+0x2c4>)
 80075d8:	4809      	ldr	r0, [pc, #36]	; (8007600 <PrintData+0x294>)
 80075da:	f001 fa07 	bl	80089ec <sprintf>
 80075de:	e717      	b.n	8007410 <PrintData+0xa4>
 80075e0:	20000c2c 	.word	0x20000c2c
 80075e4:	20001328 	.word	0x20001328
 80075e8:	40010c00 	.word	0x40010c00
 80075ec:	0800dff1 	.word	0x0800dff1
 80075f0:	0800dfff 	.word	0x0800dfff
 80075f4:	0800e010 	.word	0x0800e010
 80075f8:	0800e021 	.word	0x0800e021
 80075fc:	0800e032 	.word	0x0800e032
 8007600:	200013e0 	.word	0x200013e0
 8007604:	20001724 	.word	0x20001724
 8007608:	0800e089 	.word	0x0800e089
 800760c:	0800e0e8 	.word	0x0800e0e8
 8007610:	20000db0 	.word	0x20000db0
 8007614:	0800e129 	.word	0x0800e129
 8007618:	20000e9e 	.word	0x20000e9e
 800761c:	0800e195 	.word	0x0800e195
 8007620:	20001188 	.word	0x20001188
 8007624:	200010b0 	.word	0x200010b0
 8007628:	20001480 	.word	0x20001480
 800762c:	20001128 	.word	0x20001128
 8007630:	0800e1a4 	.word	0x0800e1a4
            pid.kp[ROLL], pid.kp[PITCH], pid.ki[ROLL], pid.ki[PITCH], pid.kd[ROLL], pid.kd[PITCH], pid.kp[YAW], pid.ki[YAW], pid.kd[YAW], f.ARMED, f.Tuning_MODE);
 8007634:	4c6d      	ldr	r4, [pc, #436]	; (80077ec <PrintData+0x480>)
    sprintf(Buf,"R[P]: %2.2f, P[P]: %2.2f, R[I]: %2.2f, P[I]: %2.2f, R[D]: %2.2f, P[D]: %2.2f, Y[P]: %2.2f, Y[I]: %2.2f, Y[D]: %2.2f, ARMED: (%d), Tuning : (%d)\r\n",
 8007636:	6860      	ldr	r0, [r4, #4]
 8007638:	f7f8 fef6 	bl	8000428 <__aeabi_f2d>
            pid.kp[ROLL], pid.kp[PITCH], pid.ki[ROLL], pid.ki[PITCH], pid.kd[ROLL], pid.kd[PITCH], pid.kp[YAW], pid.ki[YAW], pid.kd[YAW], f.ARMED, f.Tuning_MODE);
 800763c:	4b6c      	ldr	r3, [pc, #432]	; (80077f0 <PrintData+0x484>)
    sprintf(Buf,"R[P]: %2.2f, P[P]: %2.2f, R[I]: %2.2f, P[I]: %2.2f, R[D]: %2.2f, P[D]: %2.2f, Y[P]: %2.2f, Y[I]: %2.2f, Y[D]: %2.2f, ARMED: (%d), Tuning : (%d)\r\n",
 800763e:	4606      	mov	r6, r0
 8007640:	789a      	ldrb	r2, [r3, #2]
 8007642:	460f      	mov	r7, r1
 8007644:	9211      	str	r2, [sp, #68]	; 0x44
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	9310      	str	r3, [sp, #64]	; 0x40
 800764a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800764c:	f7f8 feec 	bl	8000428 <__aeabi_f2d>
 8007650:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007654:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007656:	f7f8 fee7 	bl	8000428 <__aeabi_f2d>
 800765a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800765e:	68e0      	ldr	r0, [r4, #12]
 8007660:	f7f8 fee2 	bl	8000428 <__aeabi_f2d>
 8007664:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007668:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800766a:	f7f8 fedd 	bl	8000428 <__aeabi_f2d>
 800766e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007672:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007674:	f7f8 fed8 	bl	8000428 <__aeabi_f2d>
 8007678:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800767c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800767e:	f7f8 fed3 	bl	8000428 <__aeabi_f2d>
 8007682:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007686:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007688:	f7f8 fece 	bl	8000428 <__aeabi_f2d>
 800768c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007690:	68a0      	ldr	r0, [r4, #8]
 8007692:	f7f8 fec9 	bl	8000428 <__aeabi_f2d>
 8007696:	4632      	mov	r2, r6
 8007698:	e9cd 0100 	strd	r0, r1, [sp]
 800769c:	463b      	mov	r3, r7
 800769e:	4955      	ldr	r1, [pc, #340]	; (80077f4 <PrintData+0x488>)
 80076a0:	4855      	ldr	r0, [pc, #340]	; (80077f8 <PrintData+0x48c>)
 80076a2:	f001 f9a3 	bl	80089ec <sprintf>
 80076a6:	e6b3      	b.n	8007410 <PrintData+0xa4>
		  sprintf(Buf, " state: %d, data: %d \n ", hdma_usart1_rx.State, rx1_buffer[0]);
 80076a8:	4b54      	ldr	r3, [pc, #336]	; (80077fc <PrintData+0x490>)
 80076aa:	4a55      	ldr	r2, [pc, #340]	; (8007800 <PrintData+0x494>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80076b2:	4954      	ldr	r1, [pc, #336]	; (8007804 <PrintData+0x498>)
 80076b4:	4850      	ldr	r0, [pc, #320]	; (80077f8 <PrintData+0x48c>)
 80076b6:	f001 f999 	bl	80089ec <sprintf>
 80076ba:	e6a9      	b.n	8007410 <PrintData+0xa4>
		sprintf(Buf, "%f %f %f\r\n",pid.output2[ROLL], pid.output2[PITCH], pid.output2[YAW]);
 80076bc:	4c4b      	ldr	r4, [pc, #300]	; (80077ec <PrintData+0x480>)
 80076be:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 80076c2:	f7f8 feb1 	bl	8000428 <__aeabi_f2d>
 80076c6:	4606      	mov	r6, r0
 80076c8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 80076cc:	460f      	mov	r7, r1
 80076ce:	f7f8 feab 	bl	8000428 <__aeabi_f2d>
 80076d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076d6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 80076da:	f7f8 fea5 	bl	8000428 <__aeabi_f2d>
 80076de:	4632      	mov	r2, r6
 80076e0:	463b      	mov	r3, r7
 80076e2:	e9cd 0100 	strd	r0, r1, [sp]
 80076e6:	4948      	ldr	r1, [pc, #288]	; (8007808 <PrintData+0x49c>)
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw);
 80076e8:	4843      	ldr	r0, [pc, #268]	; (80077f8 <PrintData+0x48c>)
 80076ea:	f001 f97f 	bl	80089ec <sprintf>
 80076ee:	e68f      	b.n	8007410 <PrintData+0xa4>
		sprintf(Buf, "Roll:(%.2f), Pitch:(%.2f), Yaw:(%.2f), rx_buffer:(%d)\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw, rx1_buffer[0]);
 80076f0:	4c46      	ldr	r4, [pc, #280]	; (800780c <PrintData+0x4a0>)
 80076f2:	4b42      	ldr	r3, [pc, #264]	; (80077fc <PrintData+0x490>)
 80076f4:	6820      	ldr	r0, [r4, #0]
 80076f6:	781d      	ldrb	r5, [r3, #0]
 80076f8:	f7f8 fe96 	bl	8000428 <__aeabi_f2d>
 80076fc:	b2ed      	uxtb	r5, r5
 80076fe:	9504      	str	r5, [sp, #16]
 8007700:	4606      	mov	r6, r0
 8007702:	68a0      	ldr	r0, [r4, #8]
 8007704:	460f      	mov	r7, r1
 8007706:	f7f8 fe8f 	bl	8000428 <__aeabi_f2d>
 800770a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800770e:	6860      	ldr	r0, [r4, #4]
 8007710:	f7f8 fe8a 	bl	8000428 <__aeabi_f2d>
 8007714:	4632      	mov	r2, r6
 8007716:	e9cd 0100 	strd	r0, r1, [sp]
 800771a:	463b      	mov	r3, r7
 800771c:	493c      	ldr	r1, [pc, #240]	; (8007810 <PrintData+0x4a4>)
 800771e:	4836      	ldr	r0, [pc, #216]	; (80077f8 <PrintData+0x48c>)
 8007720:	f001 f964 	bl	80089ec <sprintf>
 8007724:	e674      	b.n	8007410 <PrintData+0xa4>
    sprintf(Buf, "MS5611 : %.2f C, %d Pa, %.2f m\r\n\r\n",
 8007726:	4c3b      	ldr	r4, [pc, #236]	; (8007814 <PrintData+0x4a8>)
 8007728:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
 800772c:	f7f8 fe7c 	bl	8000428 <__aeabi_f2d>
 8007730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007734:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8007738:	f504 75c0 	add.w	r5, r4, #384	; 0x180
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007742:	4935      	ldr	r1, [pc, #212]	; (8007818 <PrintData+0x4ac>)
 8007744:	482c      	ldr	r0, [pc, #176]	; (80077f8 <PrintData+0x48c>)
 8007746:	f001 f951 	bl	80089ec <sprintf>
 800774a:	e661      	b.n	8007410 <PrintData+0xa4>
			sprintf(Buf, "\r\n [KP]: %.2f, %.2f, %.2f \r\n ", pid.kp[0], pid.kp[1], pid.kp[2]);
 800774c:	4c27      	ldr	r4, [pc, #156]	; (80077ec <PrintData+0x480>)
 800774e:	6860      	ldr	r0, [r4, #4]
 8007750:	f7f8 fe6a 	bl	8000428 <__aeabi_f2d>
 8007754:	4606      	mov	r6, r0
 8007756:	68e0      	ldr	r0, [r4, #12]
 8007758:	460f      	mov	r7, r1
 800775a:	f7f8 fe65 	bl	8000428 <__aeabi_f2d>
 800775e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007762:	68a0      	ldr	r0, [r4, #8]
 8007764:	f7f8 fe60 	bl	8000428 <__aeabi_f2d>
 8007768:	4632      	mov	r2, r6
 800776a:	e9cd 0100 	strd	r0, r1, [sp]
 800776e:	463b      	mov	r3, r7
 8007770:	492a      	ldr	r1, [pc, #168]	; (800781c <PrintData+0x4b0>)
 8007772:	e7b9      	b.n	80076e8 <PrintData+0x37c>
			sprintf(Buf, "\r\n [KI]: %.2f, %.2f, %.2f\r\n", pid.ki[0], pid.ki[1], pid.ki[2]);
 8007774:	4c1d      	ldr	r4, [pc, #116]	; (80077ec <PrintData+0x480>)
 8007776:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007778:	f7f8 fe56 	bl	8000428 <__aeabi_f2d>
 800777c:	4606      	mov	r6, r0
 800777e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007780:	460f      	mov	r7, r1
 8007782:	f7f8 fe51 	bl	8000428 <__aeabi_f2d>
 8007786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800778a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800778c:	f7f8 fe4c 	bl	8000428 <__aeabi_f2d>
 8007790:	4632      	mov	r2, r6
 8007792:	e9cd 0100 	strd	r0, r1, [sp]
 8007796:	463b      	mov	r3, r7
 8007798:	4921      	ldr	r1, [pc, #132]	; (8007820 <PrintData+0x4b4>)
 800779a:	e7a5      	b.n	80076e8 <PrintData+0x37c>
			sprintf(Buf, "\r\n [KD]: %.2f, %.2f, %.2f\r\n", pid.kd[0], pid.kd[1], pid.kd[2]);
 800779c:	4c13      	ldr	r4, [pc, #76]	; (80077ec <PrintData+0x480>)
 800779e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80077a0:	f7f8 fe42 	bl	8000428 <__aeabi_f2d>
 80077a4:	4606      	mov	r6, r0
 80077a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077a8:	460f      	mov	r7, r1
 80077aa:	f7f8 fe3d 	bl	8000428 <__aeabi_f2d>
 80077ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80077b4:	f7f8 fe38 	bl	8000428 <__aeabi_f2d>
 80077b8:	4632      	mov	r2, r6
 80077ba:	e9cd 0100 	strd	r0, r1, [sp]
 80077be:	463b      	mov	r3, r7
 80077c0:	4918      	ldr	r1, [pc, #96]	; (8007824 <PrintData+0x4b8>)
 80077c2:	e791      	b.n	80076e8 <PrintData+0x37c>
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRSIMU.Roll, AHRSIMU.Pitch, AHRSIMU.Yaw);
 80077c4:	4c11      	ldr	r4, [pc, #68]	; (800780c <PrintData+0x4a0>)
 80077c6:	6820      	ldr	r0, [r4, #0]
 80077c8:	f7f8 fe2e 	bl	8000428 <__aeabi_f2d>
 80077cc:	4606      	mov	r6, r0
 80077ce:	68a0      	ldr	r0, [r4, #8]
 80077d0:	460f      	mov	r7, r1
 80077d2:	f7f8 fe29 	bl	8000428 <__aeabi_f2d>
 80077d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077da:	6860      	ldr	r0, [r4, #4]
 80077dc:	f7f8 fe24 	bl	8000428 <__aeabi_f2d>
 80077e0:	4632      	mov	r2, r6
 80077e2:	e9cd 0100 	strd	r0, r1, [sp]
 80077e6:	463b      	mov	r3, r7
 80077e8:	490f      	ldr	r1, [pc, #60]	; (8007828 <PrintData+0x4bc>)
 80077ea:	e77d      	b.n	80076e8 <PrintData+0x37c>
 80077ec:	20000ea8 	.word	0x20000ea8
 80077f0:	200010b0 	.word	0x200010b0
 80077f4:	0800e22f 	.word	0x0800e22f
 80077f8:	200013e0 	.word	0x200013e0
 80077fc:	20001460 	.word	0x20001460
 8007800:	20001614 	.word	0x20001614
 8007804:	0800e2c1 	.word	0x0800e2c1
 8007808:	0800e391 	.word	0x0800e391
 800780c:	20000e6c 	.word	0x20000e6c
 8007810:	0800e2d9 	.word	0x0800e2d9
 8007814:	20001188 	.word	0x20001188
 8007818:	0800e311 	.word	0x0800e311
 800781c:	0800e334 	.word	0x0800e334
 8007820:	0800e352 	.word	0x0800e352
 8007824:	0800e36e 	.word	0x0800e36e
 8007828:	0800e38a 	.word	0x0800e38a

0800782c <SendTelemetry>:

 }

void SendTelemetry(void){
  static int x = 0;
  x++;
 800782c:	4a10      	ldr	r2, [pc, #64]	; (8007870 <SendTelemetry+0x44>)
void SendTelemetry(void){
 800782e:	b508      	push	{r3, lr}
  x++;
 8007830:	6813      	ldr	r3, [r2, #0]
 8007832:	3301      	adds	r3, #1
  if (x >= 1000){
 8007834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007838:	da01      	bge.n	800783e <SendTelemetry+0x12>
  x++;
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	bd08      	pop	{r3, pc}
    x = 0;
 800783e:	2300      	movs	r3, #0
    RGB_B_TOGGLE;
 8007840:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007844:	480b      	ldr	r0, [pc, #44]	; (8007874 <SendTelemetry+0x48>)
    x = 0;
 8007846:	6013      	str	r3, [r2, #0]
    RGB_B_TOGGLE;
 8007848:	f7fa fb69 	bl	8001f1e <HAL_GPIO_TogglePin>
    headSerialSend(3, MSP_PID);
 800784c:	2170      	movs	r1, #112	; 0x70
 800784e:	2003      	movs	r0, #3
 8007850:	f7ff fd7e 	bl	8007350 <headSerialSend>
    serialize8(10);
 8007854:	200a      	movs	r0, #10
 8007856:	f7ff fd51 	bl	80072fc <serialize8>
    serialize8(20);
 800785a:	2014      	movs	r0, #20
 800785c:	f7ff fd4e 	bl	80072fc <serialize8>
    serialize8(110);
 8007860:	206e      	movs	r0, #110	; 0x6e
 8007862:	f7ff fd4b 	bl	80072fc <serialize8>
    tailSerialReply();
  }
}
 8007866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tailSerialReply();
 800786a:	f7ff bd77 	b.w	800735c <tailSerialReply>
 800786e:	bf00      	nop
 8007870:	20000d3c 	.word	0x20000d3c
 8007874:	40010c00 	.word	0x40010c00

08007878 <HAL_SYSTICK_Callback>:
static volatile uint32_t msTicks = 0;


void HAL_SYSTICK_Callback(void)
{
	msTicks++;
 8007878:	4a02      	ldr	r2, [pc, #8]	; (8007884 <HAL_SYSTICK_Callback+0xc>)
 800787a:	6813      	ldr	r3, [r2, #0]
 800787c:	3301      	adds	r3, #1
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	20000d40 	.word	0x20000d40

08007888 <micros>:
}

uint32_t micros(void)
{
 8007888:	b510      	push	{r4, lr}
	 register uint32_t ms, cycle_cnt;
	    do {
	        ms = msTicks;
 800788a:	4909      	ldr	r1, [pc, #36]	; (80078b0 <micros+0x28>)
	        cycle_cnt = SysTick->VAL;
 800788c:	4c09      	ldr	r4, [pc, #36]	; (80078b4 <micros+0x2c>)
	        ms = msTicks;
 800788e:	680a      	ldr	r2, [r1, #0]
	        cycle_cnt = SysTick->VAL;
 8007890:	68a3      	ldr	r3, [r4, #8]
	    } while (ms != msTicks);
 8007892:	6808      	ldr	r0, [r1, #0]
 8007894:	4282      	cmp	r2, r0
 8007896:	d1fa      	bne.n	800788e <micros+0x6>
	    return (ms * 1000) + (72 * 1000 - cycle_cnt) / 72; //168
 8007898:	2048      	movs	r0, #72	; 0x48
 800789a:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
 800789e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80078a2:	fbb3 f3f0 	udiv	r3, r3, r0
}
 80078a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078aa:	fb00 3002 	mla	r0, r0, r2, r3
 80078ae:	bd10      	pop	{r4, pc}
 80078b0:	20000d40 	.word	0x20000d40
 80078b4:	e000e010 	.word	0xe000e010

080078b8 <millis>:

uint32_t millis(void)
{
  return HAL_GetTick();
 80078b8:	f7f9 be0c 	b.w	80014d4 <HAL_GetTick>

080078bc <PHan_CnvCodeWan2Johab>:
  hcode = (WanCode >> 8) & 0xFF;
  lcode = WanCode & 0x0ff;

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);

  return wWanToJohabTable[index];
 80078bc:	225e      	movs	r2, #94	; 0x5e
  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 80078be:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80078c2:	b2c0      	uxtb	r0, r0
 80078c4:	3bb0      	subs	r3, #176	; 0xb0
  return wWanToJohabTable[index];
 80078c6:	38a1      	subs	r0, #161	; 0xa1
 80078c8:	fb02 0003 	mla	r0, r2, r3, r0
}
 80078cc:	4b01      	ldr	r3, [pc, #4]	; (80078d4 <PHan_CnvCodeWan2Johab+0x18>)
 80078ce:	f933 0020 	ldrsh.w	r0, [r3, r0, lsl #2]
 80078d2:	4770      	bx	lr
 80078d4:	080156a0 	.word	0x080156a0

080078d8 <PHan_HanFontLoad>:
//
//          WORK  : 
//
//----------------------------------------------------------------------------
void PHan_HanFontLoad( char *HanCode, PHAN_FONT_OBJ *FontPtr )   /* 한글 일반 폰트 생성 */
{
 80078d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  U16 i;
  U16 wHanCode; 
  //static declaration 은 속도를 높이기 위한것임.
  static U16 uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (U16)HanCode[0]<<8  | (U16)HanCode[1] & 0x00FF;
 80078dc:	7803      	ldrb	r3, [r0, #0]
 80078de:	7840      	ldrb	r0, [r0, #1]
 80078e0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  
  //printf("%x %x %x\n", HanCode[0], HanCode[1], HanCode[2] );

  wHanCode = PHan_CnvCodeWan2Johab(wHanCode);
 80078e4:	b200      	sxth	r0, r0
 80078e6:	f7ff ffe9 	bl	80078bc <PHan_CnvCodeWan2Johab>
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
  uJongsung  = wHanCode & 0x001F;    //Jongsung code

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 80078ea:	4a2c      	ldr	r2, [pc, #176]	; (800799c <PHan_HanFontLoad+0xc4>)
 80078ec:	f3c0 2384 	ubfx	r3, r0, #10, #5
 80078f0:	5cd5      	ldrb	r5, [r2, r3]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 80078f2:	4a2b      	ldr	r2, [pc, #172]	; (80079a0 <PHan_HanFontLoad+0xc8>)
 80078f4:	f3c0 1344 	ubfx	r3, r0, #5, #5
 80078f8:	5cd4      	ldrb	r4, [r2, r3]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 80078fa:	4b2a      	ldr	r3, [pc, #168]	; (80079a4 <PHan_HanFontLoad+0xcc>)
 80078fc:	f000 001f 	and.w	r0, r0, #31
 8007900:	f813 e000 	ldrb.w	lr, [r3, r0]
 8007904:	fa0f f78e 	sxth.w	r7, lr

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8007908:	b3bf      	cbz	r7, 800797a <PHan_HanFontLoad+0xa2>
 800790a:	4b27      	ldr	r3, [pc, #156]	; (80079a8 <PHan_HanFontLoad+0xd0>)
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800790c:	2d01      	cmp	r5, #1
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 800790e:	5d18      	ldrb	r0, [r3, r4]
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8007910:	d837      	bhi.n	8007982 <PHan_HanFontLoad+0xaa>
 8007912:	f04f 0c00 	mov.w	ip, #0
 8007916:	2302      	movs	r3, #2
  uJonType = JonType[uJoongsung];

  for(i = 0; i<32; i++)
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8007918:	f04f 0814 	mov.w	r8, #20
  uJonType = JonType[uJoongsung];
 800791c:	4a23      	ldr	r2, [pc, #140]	; (80079ac <PHan_HanFontLoad+0xd4>)
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 800791e:	fb08 5000 	mla	r0, r8, r0, r5
  uJonType = JonType[uJoongsung];
 8007922:	5d16      	ldrb	r6, [r2, r4]
 8007924:	4a22      	ldr	r2, [pc, #136]	; (80079b0 <PHan_HanFontLoad+0xd8>)
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8007926:	4463      	add	r3, ip
 8007928:	eb02 1580 	add.w	r5, r2, r0, lsl #6
 800792c:	2016      	movs	r0, #22
 800792e:	3106      	adds	r1, #6
 8007930:	fb00 4303 	mla	r3, r0, r3, r4
 8007934:	468c      	mov	ip, r1
 8007936:	2000      	movs	r0, #0
 8007938:	33a0      	adds	r3, #160	; 0xa0
 800793a:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 800793e:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 8007942:	f813 8010 	ldrb.w	r8, [r3, r0, lsl #1]
 8007946:	3001      	adds	r0, #1
 8007948:	ea44 0408 	orr.w	r4, r4, r8
  for(i = 0; i<32; i++)
 800794c:	2820      	cmp	r0, #32
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 800794e:	f80c 4b01 	strb.w	r4, [ip], #1
  for(i = 0; i<32; i++)
 8007952:	d1f4      	bne.n	800793e <PHan_HanFontLoad+0x66>
  }

  //combine Jongsung
  if(uJongsung)
 8007954:	b17f      	cbz	r7, 8007976 <PHan_HanFontLoad+0x9e>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8007956:	231c      	movs	r3, #28
 8007958:	2000      	movs	r0, #0
 800795a:	fb03 e306 	mla	r3, r3, r6, lr
 800795e:	33f8      	adds	r3, #248	; 0xf8
 8007960:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 8007964:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
 8007968:	780c      	ldrb	r4, [r1, #0]
 800796a:	3001      	adds	r0, #1
 800796c:	4314      	orrs	r4, r2
 800796e:	2820      	cmp	r0, #32
 8007970:	f801 4b01 	strb.w	r4, [r1], #1
 8007974:	d1f6      	bne.n	8007964 <PHan_HanFontLoad+0x8c>
 8007976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 800797a:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <PHan_HanFontLoad+0xdc>)
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800797c:	2d01      	cmp	r5, #1
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 800797e:	5d18      	ldrb	r0, [r3, r4]
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8007980:	d909      	bls.n	8007996 <PHan_HanFontLoad+0xbe>
 8007982:	f1b5 0c10 	subs.w	ip, r5, #16
 8007986:	bf18      	it	ne
 8007988:	f04f 0c01 	movne.w	ip, #1
 800798c:	2f00      	cmp	r7, #0
 800798e:	bf14      	ite	ne
 8007990:	2302      	movne	r3, #2
 8007992:	2300      	moveq	r3, #0
 8007994:	e7c0      	b.n	8007918 <PHan_HanFontLoad+0x40>
 8007996:	46bc      	mov	ip, r7
 8007998:	463b      	mov	r3, r7
 800799a:	e7bd      	b.n	8007918 <PHan_HanFontLoad+0x40>
 800799c:	0800e39c 	.word	0x0800e39c
 80079a0:	0800e41e 	.word	0x0800e41e
 80079a4:	0800e3e8 	.word	0x0800e3e8
 80079a8:	0800e3d2 	.word	0x0800e3d2
 80079ac:	0800e408 	.word	0x0800e408
 80079b0:	0800e43e 	.word	0x0800e43e
 80079b4:	0800e3bc 	.word	0x0800e3bc

080079b8 <PHan_UniFontLoad>:
//
//          WORK  : 
//
//----------------------------------------------------------------------------
void PHan_UniFontLoad( char *HanCode, PHAN_FONT_OBJ *FontPtr )   /* 한글 일반 폰트 생성 */
{
 80079b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static U16 uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  
  

  utf16 = (HanCode[0] & 0x0f) << 12 | (HanCode[1] & 0x3f) << 6 | HanCode[2] & 0x3f;
 80079bc:	7883      	ldrb	r3, [r0, #2]
 80079be:	7802      	ldrb	r2, [r0, #0]
 80079c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079c4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80079c8:	7842      	ldrb	r2, [r0, #1]
  

  //seperate phoneme code
  utf16 -= 0xac00;
  uJongsung  = utf16 % 28;
  utf16 /= 28;
 80079ca:	241c      	movs	r4, #28
  utf16 = (HanCode[0] & 0x0f) << 12 | (HanCode[1] & 0x3f) << 6 | HanCode[2] & 0x3f;
 80079cc:	0192      	lsls	r2, r2, #6
 80079ce:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
 80079d2:	4313      	orrs	r3, r2
  uJoongsung = utf16 % 21;
  uChosung   = utf16 / 21;


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 80079d4:	f44f 7213 	mov.w	r2, #588	; 0x24c
  utf16 -= 0xac00;
 80079d8:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 80079dc:	b21b      	sxth	r3, r3
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 80079de:	fb93 f2f2 	sdiv	r2, r3, r2
 80079e2:	482f      	ldr	r0, [pc, #188]	; (8007aa0 <PHan_UniFontLoad+0xe8>)
 80079e4:	5c85      	ldrb	r5, [r0, r2]
  utf16 /= 28;
 80079e6:	fb93 f2f4 	sdiv	r2, r3, r4
  uJoongsung = utf16 % 21;
 80079ea:	2015      	movs	r0, #21
 80079ec:	fb92 f6f0 	sdiv	r6, r2, r0
 80079f0:	fb06 2010 	mls	r0, r6, r0, r2
  uJongsung  = utf16 % 28;
 80079f4:	fb04 3212 	mls	r2, r4, r2, r3
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 80079f8:	4b2a      	ldr	r3, [pc, #168]	; (8007aa4 <PHan_UniFontLoad+0xec>)
 80079fa:	b212      	sxth	r2, r2
 80079fc:	5c9f      	ldrb	r7, [r3, r2]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 80079fe:	4e2a      	ldr	r6, [pc, #168]	; (8007aa8 <PHan_UniFontLoad+0xf0>)
 8007a00:	b200      	sxth	r0, r0
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8007a02:	b23c      	sxth	r4, r7
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8007a04:	5c36      	ldrb	r6, [r6, r0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8007a06:	b3c4      	cbz	r4, 8007a7a <PHan_UniFontLoad+0xc2>
 8007a08:	4b28      	ldr	r3, [pc, #160]	; (8007aac <PHan_UniFontLoad+0xf4>)
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8007a0a:	2d01      	cmp	r5, #1
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8007a0c:	f813 e006 	ldrb.w	lr, [r3, r6]
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8007a10:	d838      	bhi.n	8007a84 <PHan_UniFontLoad+0xcc>
 8007a12:	f04f 0c00 	mov.w	ip, #0
 8007a16:	2302      	movs	r3, #2
  uJonType = JonType[uJoongsung];

  for(i = 0; i<32; i++)
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8007a18:	f04f 0814 	mov.w	r8, #20
 8007a1c:	fb08 5e0e 	mla	lr, r8, lr, r5
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8007a20:	2516      	movs	r5, #22
 8007a22:	4463      	add	r3, ip
 8007a24:	3106      	adds	r1, #6
 8007a26:	fb05 6303 	mla	r3, r5, r3, r6
 8007a2a:	468c      	mov	ip, r1
 8007a2c:	2500      	movs	r5, #0
  uJonType = JonType[uJoongsung];
 8007a2e:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <PHan_UniFontLoad+0xf8>)
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8007a30:	33a0      	adds	r3, #160	; 0xa0
  uJonType = JonType[uJoongsung];
 8007a32:	5d90      	ldrb	r0, [r2, r6]
 8007a34:	4a1f      	ldr	r2, [pc, #124]	; (8007ab4 <PHan_UniFontLoad+0xfc>)
 8007a36:	eb02 1e8e 	add.w	lr, r2, lr, lsl #6
 8007a3a:	eb02 1383 	add.w	r3, r2, r3, lsl #6
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8007a3e:	f81e 6015 	ldrb.w	r6, [lr, r5, lsl #1]
 8007a42:	f813 8015 	ldrb.w	r8, [r3, r5, lsl #1]
 8007a46:	3501      	adds	r5, #1
 8007a48:	ea46 0608 	orr.w	r6, r6, r8
  for(i = 0; i<32; i++)
 8007a4c:	2d20      	cmp	r5, #32
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8007a4e:	f80c 6b01 	strb.w	r6, [ip], #1
  for(i = 0; i<32; i++)
 8007a52:	d1f4      	bne.n	8007a3e <PHan_UniFontLoad+0x86>
  }

  //combine Jongsung
  if(uJongsung)
 8007a54:	b17c      	cbz	r4, 8007a76 <PHan_UniFontLoad+0xbe>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8007a56:	231c      	movs	r3, #28
 8007a58:	fb03 7300 	mla	r3, r3, r0, r7
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	33f8      	adds	r3, #248	; 0xf8
 8007a60:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 8007a64:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
 8007a68:	780c      	ldrb	r4, [r1, #0]
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	4314      	orrs	r4, r2
 8007a6e:	2820      	cmp	r0, #32
 8007a70:	f801 4b01 	strb.w	r4, [r1], #1
 8007a74:	d1f6      	bne.n	8007a64 <PHan_UniFontLoad+0xac>
 8007a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8007a7a:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <PHan_UniFontLoad+0x100>)
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8007a7c:	2d01      	cmp	r5, #1
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8007a7e:	f813 e006 	ldrb.w	lr, [r3, r6]
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8007a82:	d909      	bls.n	8007a98 <PHan_UniFontLoad+0xe0>
 8007a84:	f1b5 0c10 	subs.w	ip, r5, #16
 8007a88:	bf18      	it	ne
 8007a8a:	f04f 0c01 	movne.w	ip, #1
 8007a8e:	2c00      	cmp	r4, #0
 8007a90:	bf14      	ite	ne
 8007a92:	2302      	movne	r3, #2
 8007a94:	2300      	moveq	r3, #0
 8007a96:	e7bf      	b.n	8007a18 <PHan_UniFontLoad+0x60>
 8007a98:	46a4      	mov	ip, r4
 8007a9a:	4623      	mov	r3, r4
 8007a9c:	e7bc      	b.n	8007a18 <PHan_UniFontLoad+0x60>
 8007a9e:	bf00      	nop
 8007aa0:	08013e3e 	.word	0x08013e3e
 8007aa4:	08013e5e 	.word	0x08013e5e
 8007aa8:	08013e7e 	.word	0x08013e7e
 8007aac:	0800e3d2 	.word	0x0800e3d2
 8007ab0:	0800e408 	.word	0x0800e408
 8007ab4:	0800e43e 	.word	0x0800e43e
 8007ab8:	0800e3bc 	.word	0x0800e3bc

08007abc <PHan_EngFontLoad>:
void PHan_EngFontLoad( char *HanCode, PHAN_FONT_OBJ *FontPtr ) 
{
  U16 i;
  char EngCode;

  EngCode = *HanCode;
 8007abc:	7803      	ldrb	r3, [r0, #0]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8007abe:	3b20      	subs	r3, #32
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	4b06      	ldr	r3, [pc, #24]	; (8007adc <PHan_EngFontLoad+0x20>)
 8007ac4:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8007ac8:	3b04      	subs	r3, #4
 8007aca:	1d8a      	adds	r2, r1, #6
 8007acc:	3116      	adds	r1, #22

  for ( i = 0 ; i < 16 ; i++ )
  {
     FontPtr->FontBuffer[ i ] = wEngFon[EngCode][i];    
 8007ace:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8007ad2:	f802 0b01 	strb.w	r0, [r2], #1
  for ( i = 0 ; i < 16 ; i++ )
 8007ad6:	428a      	cmp	r2, r1
 8007ad8:	d1f9      	bne.n	8007ace <PHan_EngFontLoad+0x12>
  }
}
 8007ada:	4770      	bx	lr
 8007adc:	08013ea0 	.word	0x08013ea0

08007ae0 <PHan_FontLoad>:
{
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	460d      	mov	r5, r1
 8007ae4:	4606      	mov	r6, r0
  memset(FontPtr->FontBuffer, 0x00, 32);
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	2100      	movs	r1, #0
 8007aea:	1da8      	adds	r0, r5, #6
 8007aec:	f000 ff75 	bl	80089da <memset>
  FontPtr->Code_Type = PHAN_NULL_CODE;  
 8007af0:	2300      	movs	r3, #0
 8007af2:	80ab      	strh	r3, [r5, #4]
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 8007af4:	7833      	ldrb	r3, [r6, #0]
 8007af6:	b10b      	cbz	r3, 8007afc <PHan_FontLoad+0x1c>
 8007af8:	2b0a      	cmp	r3, #10
 8007afa:	d105      	bne.n	8007b08 <PHan_FontLoad+0x28>
    FontPtr->Code_Type = PHAN_END_CODE;
 8007afc:	2404      	movs	r4, #4
    FontPtr->Size_Char = 1;
 8007afe:	2301      	movs	r3, #1
    FontPtr->Code_Type = PHAN_END_CODE;
 8007b00:	80ac      	strh	r4, [r5, #4]
    FontPtr->Size_Char = 1;
 8007b02:	806b      	strh	r3, [r5, #2]
}
 8007b04:	4620      	mov	r0, r4
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우 
 8007b08:	061a      	lsls	r2, r3, #24
 8007b0a:	d51a      	bpl.n	8007b42 <PHan_FontLoad+0x62>
 8007b0c:	2401      	movs	r4, #1
    char_code = (HanCode[0]<<16) | (HanCode[1]<<8) | (HanCode[2]<<0);
 8007b0e:	7872      	ldrb	r2, [r6, #1]
 8007b10:	041b      	lsls	r3, r3, #16
 8007b12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b16:	78b2      	ldrb	r2, [r6, #2]
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8007b18:	80ac      	strh	r4, [r5, #4]
    char_code = (HanCode[0]<<16) | (HanCode[1]<<8) | (HanCode[2]<<0);
 8007b1a:	4313      	orrs	r3, r2
    if (char_code >= 0xEAB080 && char_code <= 0xED9FB0)
 8007b1c:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <PHan_FontLoad+0x74>)
 8007b1e:	441a      	add	r2, r3
 8007b20:	4b0d      	ldr	r3, [pc, #52]	; (8007b58 <PHan_FontLoad+0x78>)
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d806      	bhi.n	8007b34 <PHan_FontLoad+0x54>
      FontPtr->Size_Char = 3;
 8007b26:	2303      	movs	r3, #3
      PHan_UniFontLoad( HanCode, FontPtr );
 8007b28:	4629      	mov	r1, r5
      FontPtr->Size_Char = 3;
 8007b2a:	806b      	strh	r3, [r5, #2]
      PHan_UniFontLoad( HanCode, FontPtr );
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f7ff ff43 	bl	80079b8 <PHan_UniFontLoad>
 8007b32:	e7e7      	b.n	8007b04 <PHan_FontLoad+0x24>
      FontPtr->Size_Char = 2;
 8007b34:	2302      	movs	r3, #2
      PHan_HanFontLoad( HanCode, FontPtr );
 8007b36:	4629      	mov	r1, r5
      FontPtr->Size_Char = 2;
 8007b38:	806b      	strh	r3, [r5, #2]
      PHan_HanFontLoad( HanCode, FontPtr );
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7ff fecc 	bl	80078d8 <PHan_HanFontLoad>
 8007b40:	e7e0      	b.n	8007b04 <PHan_FontLoad+0x24>
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8007b42:	2402      	movs	r4, #2
    FontPtr->Size_Char = 1;
 8007b44:	2301      	movs	r3, #1
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8007b46:	80ac      	strh	r4, [r5, #4]
    FontPtr->Size_Char = 1;
 8007b48:	806b      	strh	r3, [r5, #2]
    PHan_EngFontLoad( HanCode, FontPtr );
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7ff ffb5 	bl	8007abc <PHan_EngFontLoad>
    return PHAN_ENG_CODE;
 8007b52:	e7d7      	b.n	8007b04 <PHan_FontLoad+0x24>
 8007b54:	ff154f80 	.word	0xff154f80
 8007b58:	0002ef30 	.word	0x0002ef30

08007b5c <ssd1306_command>:



#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }

void ssd1306_command(uint8_t command) {
 8007b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr, 0x00, 1, &command, 1, 10);
 8007b5e:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <ssd1306_command+0x28>)
void ssd1306_command(uint8_t command) {
 8007b60:	aa06      	add	r2, sp, #24
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr, 0x00, 1, &command, 1, 10);
 8007b62:	f993 1000 	ldrsb.w	r1, [r3]
 8007b66:	230a      	movs	r3, #10
void ssd1306_command(uint8_t command) {
 8007b68:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr, 0x00, 1, &command, 1, 10);
 8007b6c:	9302      	str	r3, [sp, #8]
 8007b6e:	2301      	movs	r3, #1
 8007b70:	b289      	uxth	r1, r1
 8007b72:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007b76:	4804      	ldr	r0, [pc, #16]	; (8007b88 <ssd1306_command+0x2c>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f7fa fe75 	bl	8002868 <HAL_I2C_Mem_Write>
}
 8007b7e:	b007      	add	sp, #28
 8007b80:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b84:	20000d8c 	.word	0x20000d8c
 8007b88:	2000150c 	.word	0x2000150c

08007b8c <ssd1306_begin>:

void ssd1306_begin(uint8_t vccstate, uint8_t i2caddr) {
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4604      	mov	r4, r0
 8007b90:	460d      	mov	r5, r1
	HAL_Delay(100);
 8007b92:	2064      	movs	r0, #100	; 0x64
 8007b94:	f7f9 fca4 	bl	80014e0 <HAL_Delay>
	_vccstate = vccstate;
 8007b98:	4b2d      	ldr	r3, [pc, #180]	; (8007c50 <ssd1306_begin+0xc4>)
	_i2caddr = i2caddr<<1;
	_width   = SSD1306_LCDWIDTH;
 8007b9a:	2280      	movs	r2, #128	; 0x80
	_vccstate = vccstate;
 8007b9c:	701c      	strb	r4, [r3, #0]
	_i2caddr = i2caddr<<1;
 8007b9e:	4b2d      	ldr	r3, [pc, #180]	; (8007c54 <ssd1306_begin+0xc8>)
 8007ba0:	006d      	lsls	r5, r5, #1
 8007ba2:	701d      	strb	r5, [r3, #0]
	_height  = SSD1306_LCDHEIGHT;
 8007ba4:	2540      	movs	r5, #64	; 0x40
	_width   = SSD1306_LCDWIDTH;
 8007ba6:	4b2c      	ldr	r3, [pc, #176]	; (8007c58 <ssd1306_begin+0xcc>)

	// Init sequence
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8007ba8:	20ae      	movs	r0, #174	; 0xae
	_width   = SSD1306_LCDWIDTH;
 8007baa:	701a      	strb	r2, [r3, #0]
	_height  = SSD1306_LCDHEIGHT;
 8007bac:	4b2b      	ldr	r3, [pc, #172]	; (8007c5c <ssd1306_begin+0xd0>)
 8007bae:	701d      	strb	r5, [r3, #0]
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8007bb0:	f7ff ffd4 	bl	8007b5c <ssd1306_command>
	//ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
	//ssd1306_command(0x80);                                  // the suggested ratio 0x80
	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8007bb4:	20a8      	movs	r0, #168	; 0xa8
 8007bb6:	f7ff ffd1 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_LCDHEIGHT - 1);
 8007bba:	203f      	movs	r0, #63	; 0x3f
 8007bbc:	f7ff ffce 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8007bc0:	20d3      	movs	r0, #211	; 0xd3
 8007bc2:	f7ff ffcb 	bl	8007b5c <ssd1306_command>
	ssd1306_command(0x0);                                   // no offset
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	f7ff ffc8 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f7ff ffc5 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8007bd2:	208d      	movs	r0, #141	; 0x8d
 8007bd4:	f7ff ffc2 	bl	8007b5c <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC) { ssd1306_command(0x10); }
 8007bd8:	2c01      	cmp	r4, #1
 8007bda:	bf0c      	ite	eq
 8007bdc:	2010      	moveq	r0, #16
	else { ssd1306_command(0x14); }
 8007bde:	2014      	movne	r0, #20
 8007be0:	f7ff ffbc 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8007be4:	2020      	movs	r0, #32
 8007be6:	f7ff ffb9 	bl	8007b5c <ssd1306_command>
	ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8007bea:	2000      	movs	r0, #0
 8007bec:	f7ff ffb6 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_SEGREMAP | 0x1);
 8007bf0:	20a1      	movs	r0, #161	; 0xa1
 8007bf2:	f7ff ffb3 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_COMSCANDEC);
 8007bf6:	20c8      	movs	r0, #200	; 0xc8
 8007bf8:	f7ff ffb0 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 8007bfc:	20da      	movs	r0, #218	; 0xda
 8007bfe:	f7ff ffad 	bl	8007b5c <ssd1306_command>
	ssd1306_command(0x12);
 8007c02:	2012      	movs	r0, #18
 8007c04:	f7ff ffaa 	bl	8007b5c <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC) { ssd1306_command(0x9F); }
 8007c08:	2c01      	cmp	r4, #1
 8007c0a:	bf0c      	ite	eq
 8007c0c:	209f      	moveq	r0, #159	; 0x9f
	else { ssd1306_command(0xCF); }
 8007c0e:	20cf      	movne	r0, #207	; 0xcf
 8007c10:	f7ff ffa4 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8007c14:	20d9      	movs	r0, #217	; 0xd9
 8007c16:	f7ff ffa1 	bl	8007b5c <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC) { ssd1306_command(0x22); }
 8007c1a:	2c01      	cmp	r4, #1
 8007c1c:	bf0c      	ite	eq
 8007c1e:	2022      	moveq	r0, #34	; 0x22
	else { ssd1306_command(0xF1); }
 8007c20:	20f1      	movne	r0, #241	; 0xf1
 8007c22:	f7ff ff9b 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8007c26:	20db      	movs	r0, #219	; 0xdb
 8007c28:	f7ff ff98 	bl	8007b5c <ssd1306_command>
	ssd1306_command(0x40);
 8007c2c:	2040      	movs	r0, #64	; 0x40
 8007c2e:	f7ff ff95 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 8007c32:	20a4      	movs	r0, #164	; 0xa4
 8007c34:	f7ff ff92 	bl	8007b5c <ssd1306_command>
	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8007c38:	20a6      	movs	r0, #166	; 0xa6
 8007c3a:	f7ff ff8f 	bl	8007b5c <ssd1306_command>

	ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 8007c3e:	202e      	movs	r0, #46	; 0x2e
 8007c40:	f7ff ff8c 	bl	8007b5c <ssd1306_command>

	ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
}
 8007c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8007c48:	20af      	movs	r0, #175	; 0xaf
 8007c4a:	f7ff bf87 	b.w	8007b5c <ssd1306_command>
 8007c4e:	bf00      	nop
 8007c50:	20000dac 	.word	0x20000dac
 8007c54:	20000d8c 	.word	0x20000d8c
 8007c58:	20000d9c 	.word	0x20000d9c
 8007c5c:	20000da4 	.word	0x20000da4

08007c60 <display>:

void display(void) {
 8007c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c62:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < 8; i++) {
		ssd1306_command(0xB0 + i); // Set Page Start Address for Page Addressing Mode (B0h~B7h)
		ssd1306_command(SSD1306_SETLOWCOLUMN);
		ssd1306_command(SSD1306_SETHIGHCOLUMN);

		HAL_I2C_Mem_Write(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, &buffer[SSD1306_LCDWIDTH * i], SSD1306_LCDWIDTH, 100);
 8007c64:	4f11      	ldr	r7, [pc, #68]	; (8007cac <display+0x4c>)
 8007c66:	4e12      	ldr	r6, [pc, #72]	; (8007cb0 <display+0x50>)
 8007c68:	4d12      	ldr	r5, [pc, #72]	; (8007cb4 <display+0x54>)
void display(void) {
 8007c6a:	b085      	sub	sp, #20
		ssd1306_command(0xB0 + i); // Set Page Start Address for Page Addressing Mode (B0h~B7h)
 8007c6c:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8007c70:	b2c0      	uxtb	r0, r0
 8007c72:	f7ff ff73 	bl	8007b5c <ssd1306_command>
		ssd1306_command(SSD1306_SETLOWCOLUMN);
 8007c76:	2000      	movs	r0, #0
 8007c78:	f7ff ff70 	bl	8007b5c <ssd1306_command>
		ssd1306_command(SSD1306_SETHIGHCOLUMN);
 8007c7c:	2010      	movs	r0, #16
 8007c7e:	f7ff ff6d 	bl	8007b5c <ssd1306_command>
		HAL_I2C_Mem_Write(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, &buffer[SSD1306_LCDWIDTH * i], SSD1306_LCDWIDTH, 100);
 8007c82:	2364      	movs	r3, #100	; 0x64
 8007c84:	f997 1000 	ldrsb.w	r1, [r7]
 8007c88:	9302      	str	r3, [sp, #8]
 8007c8a:	2380      	movs	r3, #128	; 0x80
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	eb06 13c4 	add.w	r3, r6, r4, lsl #7
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	2240      	movs	r2, #64	; 0x40
 8007c96:	2301      	movs	r3, #1
 8007c98:	b289      	uxth	r1, r1
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	3401      	adds	r4, #1
 8007c9e:	f7fa fde3 	bl	8002868 <HAL_I2C_Mem_Write>
	for (uint8_t i = 0; i < 8; i++) {
 8007ca2:	2c08      	cmp	r4, #8
 8007ca4:	d1e2      	bne.n	8007c6c <display+0xc>
		//HAL_I2C_Mem_Write(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, buffer, 1024, 100);
		//HAL_I2C_Mem_Write_DMA(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, &buffer[SSD1306_LCDWIDTH * i], SSD1306_LCDWIDTH);
	}
}
 8007ca6:	b005      	add	sp, #20
 8007ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000d8c 	.word	0x20000d8c
 8007cb0:	20000010 	.word	0x20000010
 8007cb4:	2000150c 	.word	0x2000150c

08007cb8 <clearDisplay>:
	ssd1306_command(SSD1306_SETHIGHCOLUMN);

	HAL_I2C_Mem_Write_DMA(&hi2c2, _i2caddr, SSD1306_SETSTARTLINE, 1, buffer, 1024);
}
*/
void clearDisplay(void) {
 8007cb8:	b508      	push	{r3, lr}
	memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
 8007cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4803      	ldr	r0, [pc, #12]	; (8007cd0 <clearDisplay+0x18>)
 8007cc2:	f000 fe8a 	bl	80089da <memset>
	display();
}
 8007cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	display();
 8007cca:	f7ff bfc9 	b.w	8007c60 <display>
 8007cce:	bf00      	nop
 8007cd0:	20000010 	.word	0x20000010

08007cd4 <drawPixel>:

void drawPixel(uint8_t x, uint8_t y, uint8_t color) {
	if (x >= SSD1306_LCDWIDTH || y >= SSD1306_LCDHEIGHT) return;
 8007cd4:	0603      	lsls	r3, r0, #24
void drawPixel(uint8_t x, uint8_t y, uint8_t color) {
 8007cd6:	b510      	push	{r4, lr}
	if (x >= SSD1306_LCDWIDTH || y >= SSD1306_LCDHEIGHT) return;
 8007cd8:	d415      	bmi.n	8007d06 <drawPixel+0x32>
 8007cda:	293f      	cmp	r1, #63	; 0x3f
 8007cdc:	d813      	bhi.n	8007d06 <drawPixel+0x32>

	//if (SSD1306.Inverted) color = (SSD1306_COLOR)!color;

	if (color == WHITE) buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= 1 << (y % 8);
 8007cde:	2a01      	cmp	r2, #1
	else                buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y % 8));
 8007ce0:	bf18      	it	ne
 8007ce2:	2201      	movne	r2, #1
 8007ce4:	4b08      	ldr	r3, [pc, #32]	; (8007d08 <drawPixel+0x34>)
 8007ce6:	ea4f 04d1 	mov.w	r4, r1, lsr #3
	if (color == WHITE) buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= 1 << (y % 8);
 8007cea:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 8007cee:	f001 0107 	and.w	r1, r1, #7
 8007cf2:	bf0b      	itete	eq
 8007cf4:	fa02 f101 	lsleq.w	r1, r2, r1
	else                buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y % 8));
 8007cf8:	408a      	lslne	r2, r1
	if (color == WHITE) buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= 1 << (y % 8);
 8007cfa:	5c1a      	ldrbeq	r2, [r3, r0]
	else                buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y % 8));
 8007cfc:	5c19      	ldrbne	r1, [r3, r0]
	if (color == WHITE) buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= 1 << (y % 8);
 8007cfe:	bf0c      	ite	eq
 8007d00:	4311      	orreq	r1, r2
	else                buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y % 8));
 8007d02:	4391      	bicne	r1, r2
 8007d04:	5419      	strb	r1, [r3, r0]
 8007d06:	bd10      	pop	{r4, pc}
 8007d08:	20000010 	.word	0x20000010

08007d0c <disHanFont>:
    if( FontBuf.Code_Type == PHAN_END_CODE ) break;
  }
}

void disHanFont(int x, int y, PHAN_FONT_OBJ *FontPtr)
{
 8007d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 8007d10:	f8b2 8002 	ldrh.w	r8, [r2, #2]
{
 8007d14:	4683      	mov	fp, r0
 8007d16:	f1b8 0f02 	cmp.w	r8, #2
 8007d1a:	bf28      	it	cs
 8007d1c:	f04f 0802 	movcs.w	r8, #2
 8007d20:	4615      	mov	r5, r2
  if (FontSize > 2)
  {
    FontSize = 2;
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8007d22:	2400      	movs	r4, #0
{
 8007d24:	9100      	str	r1, [sp, #0]
 8007d26:	9b00      	ldr	r3, [sp, #0]
  {
    index_x = 0;
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8007d28:	2600      	movs	r6, #0
 8007d2a:	191f      	adds	r7, r3, r4
        {
          drawPixel(x + index_x++, y + i, WHITE);
        }
        else
        {
          drawPixel(x + index_x++, y + i, BLACK);
 8007d2c:	b2ff      	uxtb	r7, r7
 8007d2e:	e013      	b.n	8007d58 <disHanFont+0x4c>
        if( FontPtr->FontBuffer[i*FontSize +j] & (0x80>>Loop))
 8007d30:	9b01      	ldr	r3, [sp, #4]
 8007d32:	eb09 000a 	add.w	r0, r9, sl
 8007d36:	799a      	ldrb	r2, [r3, #6]
 8007d38:	2380      	movs	r3, #128	; 0x80
 8007d3a:	fa43 f10a 	asr.w	r1, r3, sl
 8007d3e:	400a      	ands	r2, r1
          drawPixel(x + index_x++, y + i, WHITE);
 8007d40:	bf18      	it	ne
 8007d42:	2201      	movne	r2, #1
          drawPixel(x + index_x++, y + i, BLACK);
 8007d44:	4639      	mov	r1, r7
 8007d46:	b2c0      	uxtb	r0, r0
 8007d48:	f10a 0a01 	add.w	sl, sl, #1
 8007d4c:	f7ff ffc2 	bl	8007cd4 <drawPixel>
      for( Loop=0; Loop<8; Loop++ )
 8007d50:	f1ba 0f08 	cmp.w	sl, #8
 8007d54:	d1ec      	bne.n	8007d30 <disHanFont+0x24>
 8007d56:	3601      	adds	r6, #1
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8007d58:	b2b3      	uxth	r3, r6
 8007d5a:	4598      	cmp	r8, r3
 8007d5c:	d908      	bls.n	8007d70 <disHanFont+0x64>
 8007d5e:	eb0b 09c6 	add.w	r9, fp, r6, lsl #3
        if( FontPtr->FontBuffer[i*FontSize +j] & (0x80>>Loop))
 8007d62:	19ab      	adds	r3, r5, r6
 8007d64:	fa5f f989 	uxtb.w	r9, r9
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8007d68:	f04f 0a00 	mov.w	sl, #0
        if( FontPtr->FontBuffer[i*FontSize +j] & (0x80>>Loop))
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	e7df      	b.n	8007d30 <disHanFont+0x24>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8007d70:	3401      	adds	r4, #1
 8007d72:	b2a4      	uxth	r4, r4
 8007d74:	2c10      	cmp	r4, #16
 8007d76:	4445      	add	r5, r8
 8007d78:	d1d5      	bne.n	8007d26 <disHanFont+0x1a>
        }
      }
    }
  }
}
 8007d7a:	b003      	add	sp, #12
 8007d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d80 <OLed_printf>:
{
 8007d80:	b40c      	push	{r2, r3}
 8007d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d86:	b0cc      	sub	sp, #304	; 0x130
 8007d88:	ab52      	add	r3, sp, #328	; 0x148
 8007d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d8e:	4607      	mov	r7, r0
 8007d90:	460e      	mov	r6, r1
  len = vsnprintf(print_buffer, 255, fmt, arg);
 8007d92:	a80c      	add	r0, sp, #48	; 0x30
 8007d94:	21ff      	movs	r1, #255	; 0xff
  va_start (arg, fmt);
 8007d96:	9301      	str	r3, [sp, #4]
  len = vsnprintf(print_buffer, 255, fmt, arg);
 8007d98:	f001 fe50 	bl	8009a3c <vsnprintf>
  for( i=0; i<len; i+=Size_Char )
 8007d9c:	463c      	mov	r4, r7
  len = vsnprintf(print_buffer, 255, fmt, arg);
 8007d9e:	4680      	mov	r8, r0
  for( i=0; i<len; i+=Size_Char )
 8007da0:	2500      	movs	r5, #0
 8007da2:	4545      	cmp	r5, r8
 8007da4:	db04      	blt.n	8007db0 <OLed_printf+0x30>
}
 8007da6:	b04c      	add	sp, #304	; 0x130
 8007da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dac:	b002      	add	sp, #8
 8007dae:	4770      	bx	lr
    PHan_FontLoad( &print_buffer[i], &FontBuf );
 8007db0:	ab0c      	add	r3, sp, #48	; 0x30
 8007db2:	1958      	adds	r0, r3, r5
 8007db4:	a902      	add	r1, sp, #8
 8007db6:	f7ff fe93 	bl	8007ae0 <PHan_FontLoad>
    disHanFont( x, y, &FontBuf );
 8007dba:	4620      	mov	r0, r4
 8007dbc:	aa02      	add	r2, sp, #8
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	f7ff ffa4 	bl	8007d0c <disHanFont>
    Size_Char = FontBuf.Size_Char;
 8007dc4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
    if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8007dc8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
    if (Size_Char >= 2)
 8007dcc:	2b01      	cmp	r3, #1
        x += 2*8;
 8007dce:	bfcc      	ite	gt
 8007dd0:	3410      	addgt	r4, #16
        x += 1*8;
 8007dd2:	3408      	addle	r4, #8
    if( 128 < x )
 8007dd4:	2c80      	cmp	r4, #128	; 0x80
        y += 16;
 8007dd6:	bfc4      	itt	gt
 8007dd8:	3610      	addgt	r6, #16
        x  = x_Pre;
 8007dda:	463c      	movgt	r4, r7
    if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8007ddc:	2a04      	cmp	r2, #4
 8007dde:	d0e2      	beq.n	8007da6 <OLed_printf+0x26>
  for( i=0; i<len; i+=Size_Char )
 8007de0:	441d      	add	r5, r3
 8007de2:	e7de      	b.n	8007da2 <OLed_printf+0x22>

08007de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    RGB_R_TOGGLE;
 8007de6:	4c03      	ldr	r4, [pc, #12]	; (8007df4 <Error_Handler+0x10>)
 8007de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7fa f896 	bl	8001f1e <HAL_GPIO_TogglePin>
 8007df2:	e7f9      	b.n	8007de8 <Error_Handler+0x4>
 8007df4:	40010c00 	.word	0x40010c00

08007df8 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007df8:	2228      	movs	r2, #40	; 0x28
{
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007dfe:	2100      	movs	r1, #0
 8007e00:	eb0d 0002 	add.w	r0, sp, r2
 8007e04:	f000 fde9 	bl	80089da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e08:	2214      	movs	r2, #20
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	eb0d 0002 	add.w	r0, sp, r2
 8007e10:	f000 fde3 	bl	80089da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e14:	2210      	movs	r2, #16
 8007e16:	2100      	movs	r1, #0
 8007e18:	a801      	add	r0, sp, #4
 8007e1a:	f000 fdde 	bl	80089da <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007e22:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e24:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e26:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007e28:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007e2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e2e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007e30:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e32:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e34:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007e36:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e38:	f7fa fed0 	bl	8002bdc <HAL_RCC_OscConfig>
 8007e3c:	b108      	cbz	r0, 8007e42 <SystemClock_Config+0x4a>
    Error_Handler();
 8007e3e:	f7ff ffd1 	bl	8007de4 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e42:	230f      	movs	r3, #15
 8007e44:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e4a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007e4c:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007e4e:	4621      	mov	r1, r4
 8007e50:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e52:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007e54:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007e56:	f7fb f889 	bl	8002f6c <HAL_RCC_ClockConfig>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d1ef      	bne.n	8007e3e <SystemClock_Config+0x46>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8007e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e62:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007e64:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8007e66:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e68:	f7fb f94a 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d1e5      	bne.n	8007e3e <SystemClock_Config+0x46>
HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007e72:	f7fb f91f 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 8007e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8007e7e:	f7f9 fdf5 	bl	8001a6c <HAL_SYSTICK_Config>
HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007e82:	2004      	movs	r0, #4
 8007e84:	f7f9 fe08 	bl	8001a98 <HAL_SYSTICK_CLKSourceConfig>
HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007e88:	4622      	mov	r2, r4
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e90:	f7f9 fdac 	bl	80019ec <HAL_NVIC_SetPriority>
}
 8007e94:	b014      	add	sp, #80	; 0x50
 8007e96:	bd10      	pop	{r4, pc}

08007e98 <main>:
{
 8007e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e9c:	4d3d      	ldr	r5, [pc, #244]	; (8007f94 <main+0xfc>)
{
 8007e9e:	b0a8      	sub	sp, #160	; 0xa0
  HAL_Init();
 8007ea0:	f7f9 fafa 	bl	8001498 <HAL_Init>
  SystemClock_Config();
 8007ea4:	f7ff ffa8 	bl	8007df8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ea8:	2210      	movs	r2, #16
 8007eaa:	2100      	movs	r1, #0
 8007eac:	a821      	add	r0, sp, #132	; 0x84
 8007eae:	f000 fd94 	bl	80089da <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007eb2:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8007eb4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007eb6:	f043 0320 	orr.w	r3, r3, #32
 8007eba:	61ab      	str	r3, [r5, #24]
 8007ebc:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8007ebe:	2118      	movs	r1, #24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ec0:	f003 0320 	and.w	r3, r3, #32
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ec8:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8007eca:	4833      	ldr	r0, [pc, #204]	; (8007f98 <main+0x100>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ecc:	f043 0304 	orr.w	r3, r3, #4
 8007ed0:	61ab      	str	r3, [r5, #24]
 8007ed2:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ed6:	f003 0304 	and.w	r3, r3, #4
 8007eda:	9302      	str	r3, [sp, #8]
 8007edc:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ede:	69ab      	ldr	r3, [r5, #24]
 8007ee0:	f043 0308 	orr.w	r3, r3, #8
 8007ee4:	61ab      	str	r3, [r5, #24]
 8007ee6:	69ab      	ldr	r3, [r5, #24]
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	9303      	str	r3, [sp, #12]
 8007eee:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8007ef0:	f7fa f810 	bl	8001f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8007efa:	4827      	ldr	r0, [pc, #156]	; (8007f98 <main+0x100>)
 8007efc:	f7fa f80a 	bl	8001f14 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007f00:	f24e 0318 	movw	r3, #57368	; 0xe018
 8007f04:	9321      	str	r3, [sp, #132]	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f06:	2301      	movs	r3, #1
 8007f08:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f0a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f0c:	a921      	add	r1, sp, #132	; 0x84
 8007f0e:	4822      	ldr	r0, [pc, #136]	; (8007f98 <main+0x100>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f10:	9324      	str	r3, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f12:	9423      	str	r4, [sp, #140]	; 0x8c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f14:	f7f9 ff1e 	bl	8001d54 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f18:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007f1a:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f1c:	f043 0301 	orr.w	r3, r3, #1
 8007f20:	616b      	str	r3, [r5, #20]
 8007f22:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007f24:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007f2c:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f2e:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007f30:	f7f9 fd5c 	bl	80019ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007f34:	200e      	movs	r0, #14
 8007f36:	f7f9 fd8d 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	200f      	movs	r0, #15
 8007f40:	f7f9 fd54 	bl	80019ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8007f44:	200f      	movs	r0, #15
 8007f46:	f7f9 fd85 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	2010      	movs	r0, #16
 8007f50:	f7f9 fd4c 	bl	80019ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8007f54:	2010      	movs	r0, #16
 8007f56:	f7f9 fd7d 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8007f5a:	4622      	mov	r2, r4
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	2011      	movs	r0, #17
 8007f60:	f7f9 fd44 	bl	80019ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8007f64:	2011      	movs	r0, #17
 8007f66:	f7f9 fd75 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  hi2c2.Init.ClockSpeed = 400000;
 8007f6a:	4d0c      	ldr	r5, [pc, #48]	; (8007f9c <main+0x104>)
  hi2c2.Instance = I2C2;
 8007f6c:	480c      	ldr	r0, [pc, #48]	; (8007fa0 <main+0x108>)
  hi2c2.Init.ClockSpeed = 400000;
 8007f6e:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <main+0x10c>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007f70:	6084      	str	r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 400000;
 8007f72:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 8007f7a:	60c4      	str	r4, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f7c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f7e:	6144      	str	r4, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007f80:	6184      	str	r4, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f82:	61c4      	str	r4, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f84:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007f86:	f7fa f997 	bl	80022b8 <HAL_I2C_Init>
 8007f8a:	4605      	mov	r5, r0
 8007f8c:	b160      	cbz	r0, 8007fa8 <main+0x110>
    Error_Handler();
 8007f8e:	f7ff ff29 	bl	8007de4 <Error_Handler>
 8007f92:	bf00      	nop
 8007f94:	40021000 	.word	0x40021000
 8007f98:	40010c00 	.word	0x40010c00
 8007f9c:	00061a80 	.word	0x00061a80
 8007fa0:	2000150c 	.word	0x2000150c
 8007fa4:	40005800 	.word	0x40005800
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fa8:	4601      	mov	r1, r0
 8007faa:	2210      	movs	r2, #16
 8007fac:	a81d      	add	r0, sp, #116	; 0x74
 8007fae:	f000 fd14 	bl	80089da <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007fb2:	221c      	movs	r2, #28
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	a821      	add	r0, sp, #132	; 0x84
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fb8:	9508      	str	r5, [sp, #32]
 8007fba:	9509      	str	r5, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007fbc:	f000 fd0d 	bl	80089da <memset>
  htim4.Init.Prescaler = 72-1;
 8007fc0:	2347      	movs	r3, #71	; 0x47
  htim4.Instance = TIM4;
 8007fc2:	4cb5      	ldr	r4, [pc, #724]	; (8008298 <main+0x400>)
  htim4.Init.Prescaler = 72-1;
 8007fc4:	48b5      	ldr	r0, [pc, #724]	; (800829c <main+0x404>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fc6:	60a5      	str	r5, [r4, #8]
  htim4.Init.Prescaler = 72-1;
 8007fc8:	e884 0009 	stmia.w	r4, {r0, r3}
  htim4.Init.Period = 2000-1;
 8007fcc:	f240 73cf 	movw	r3, #1999	; 0x7cf
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007fd0:	4620      	mov	r0, r4
  htim4.Init.Period = 2000-1;
 8007fd2:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fd4:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fd6:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007fd8:	f7fb fb8c 	bl	80036f4 <HAL_TIM_Base_Init>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d1d6      	bne.n	8007f8e <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007fe4:	a91d      	add	r1, sp, #116	; 0x74
 8007fe6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fe8:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007fea:	f7fb f9ed 	bl	80033c8 <HAL_TIM_ConfigClockSource>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d1cd      	bne.n	8007f8e <main+0xf6>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f7fb fb98 	bl	8003728 <HAL_TIM_PWM_Init>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d1c8      	bne.n	8007f8e <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ffc:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ffe:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008000:	a908      	add	r1, sp, #32
 8008002:	4620      	mov	r0, r4
 8008004:	f7fb fd52 	bl	8003aac <HAL_TIMEx_MasterConfigSynchronization>
 8008008:	4602      	mov	r2, r0
 800800a:	2800      	cmp	r0, #0
 800800c:	d1bf      	bne.n	8007f8e <main+0xf6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800800e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8008010:	9022      	str	r0, [sp, #136]	; 0x88
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008012:	9023      	str	r0, [sp, #140]	; 0x8c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008014:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008016:	a921      	add	r1, sp, #132	; 0x84
 8008018:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800801a:	9321      	str	r3, [sp, #132]	; 0x84
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800801c:	f7fb fbe4 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 8008020:	2800      	cmp	r0, #0
 8008022:	d1b4      	bne.n	8007f8e <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008024:	2204      	movs	r2, #4
 8008026:	a921      	add	r1, sp, #132	; 0x84
 8008028:	4620      	mov	r0, r4
 800802a:	f7fb fbdd 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 800802e:	2800      	cmp	r0, #0
 8008030:	d1ad      	bne.n	8007f8e <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008032:	2208      	movs	r2, #8
 8008034:	a921      	add	r1, sp, #132	; 0x84
 8008036:	4620      	mov	r0, r4
 8008038:	f7fb fbd6 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 800803c:	2800      	cmp	r0, #0
 800803e:	d1a6      	bne.n	8007f8e <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008040:	220c      	movs	r2, #12
 8008042:	a921      	add	r1, sp, #132	; 0x84
 8008044:	4620      	mov	r0, r4
 8008046:	f7fb fbcf 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 800804a:	4605      	mov	r5, r0
 800804c:	2800      	cmp	r0, #0
 800804e:	d19e      	bne.n	8007f8e <main+0xf6>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8008050:	4601      	mov	r1, r0
 8008052:	4620      	mov	r0, r4
 8008054:	f7fb fce8 	bl	8003a28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8008058:	2104      	movs	r1, #4
 800805a:	4620      	mov	r0, r4
 800805c:	f7fb fce4 	bl	8003a28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8008060:	2108      	movs	r1, #8
 8008062:	4620      	mov	r0, r4
 8008064:	f7fb fce0 	bl	8003a28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8008068:	210c      	movs	r1, #12
 800806a:	4620      	mov	r0, r4
 800806c:	f7fb fcdc 	bl	8003a28 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim4);
 8008070:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 57600;//57600
 8008072:	f44f 4461 	mov.w	r4, #57600	; 0xe100
  HAL_TIM_MspPostInit(&htim4);
 8008076:	f000 faf5 	bl	8008664 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 800807a:	4889      	ldr	r0, [pc, #548]	; (80082a0 <main+0x408>)
  huart1.Init.BaudRate = 57600;//57600
 800807c:	4b89      	ldr	r3, [pc, #548]	; (80082a4 <main+0x40c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800807e:	6085      	str	r5, [r0, #8]
  huart1.Init.BaudRate = 57600;//57600
 8008080:	e880 0018 	stmia.w	r0, {r3, r4}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008084:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008086:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008088:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800808a:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800808c:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800808e:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008090:	f7fb fe04 	bl	8003c9c <HAL_UART_Init>
 8008094:	2800      	cmp	r0, #0
 8008096:	f47f af7a 	bne.w	8007f8e <main+0xf6>
  huart2.Instance = USART2;
 800809a:	4883      	ldr	r0, [pc, #524]	; (80082a8 <main+0x410>)
 800809c:	4b83      	ldr	r3, [pc, #524]	; (80082ac <main+0x414>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 800809e:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 57600;
 80080a0:	e880 0018 	stmia.w	r0, {r3, r4}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80080a4:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80080a6:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80080a8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80080aa:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80080ac:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80080ae:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80080b0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80080b2:	f7fb fdf3 	bl	8003c9c <HAL_UART_Init>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	f47f af69 	bne.w	8007f8e <main+0xf6>
  hadc1.Instance = ADC1;
 80080bc:	4c7c      	ldr	r4, [pc, #496]	; (80082b0 <main+0x418>)
 80080be:	4b7d      	ldr	r3, [pc, #500]	; (80082b4 <main+0x41c>)
  hadc1.Init.NbrOfConversion = 1;
 80080c0:	2601      	movs	r6, #1
  hadc1.Instance = ADC1;
 80080c2:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80080c4:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80080c8:	900a      	str	r0, [sp, #40]	; 0x28
 80080ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80080cc:	900c      	str	r0, [sp, #48]	; 0x30
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80080ce:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80080d0:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80080d2:	6160      	str	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80080d4:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80080d6:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80080d8:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 80080da:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80080dc:	f7f9 fbf4 	bl	80018c8 <HAL_ADC_Init>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f47f af54 	bne.w	8007f8e <main+0xf6>
  sConfig.Channel = ADC_CHANNEL_4;
 80080e6:	2704      	movs	r7, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80080e8:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080ea:	a90a      	add	r1, sp, #40	; 0x28
 80080ec:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 80080ee:	970a      	str	r7, [sp, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80080f0:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080f2:	f7f9 faa9 	bl	8001648 <HAL_ADC_ConfigChannel>
 80080f6:	4605      	mov	r5, r0
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f47f af48 	bne.w	8007f8e <main+0xf6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080fe:	4601      	mov	r1, r0
 8008100:	2210      	movs	r2, #16
 8008102:	a815      	add	r0, sp, #84	; 0x54
 8008104:	f000 fc69 	bl	80089da <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008108:	4629      	mov	r1, r5
 800810a:	2210      	movs	r2, #16
 800810c:	a819      	add	r0, sp, #100	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800810e:	9506      	str	r5, [sp, #24]
 8008110:	9507      	str	r5, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008112:	f000 fc62 	bl	80089da <memset>
  htim3.Init.Prescaler = 72-1;
 8008116:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 8008118:	4c67      	ldr	r4, [pc, #412]	; (80082b8 <main+0x420>)
  htim3.Init.Prescaler = 72-1;
 800811a:	4968      	ldr	r1, [pc, #416]	; (80082bc <main+0x424>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800811c:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 72-1;
 800811e:	e884 000a 	stmia.w	r4, {r1, r3}
  htim3.Init.Period = 0xFFFF;
 8008122:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008126:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0xFFFF;
 8008128:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800812a:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800812c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800812e:	f7fb fae1 	bl	80036f4 <HAL_TIM_Base_Init>
 8008132:	2800      	cmp	r0, #0
 8008134:	f47f af2b 	bne.w	8007f8e <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800813c:	a915      	add	r1, sp, #84	; 0x54
 800813e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008140:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008142:	f7fb f941 	bl	80033c8 <HAL_TIM_ConfigClockSource>
 8008146:	2800      	cmp	r0, #0
 8008148:	f47f af21 	bne.w	8007f8e <main+0xf6>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800814c:	4620      	mov	r0, r4
 800814e:	f7fb fb05 	bl	800375c <HAL_TIM_IC_Init>
 8008152:	2800      	cmp	r0, #0
 8008154:	f47f af1b 	bne.w	8007f8e <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008158:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800815a:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800815c:	a906      	add	r1, sp, #24
 800815e:	4620      	mov	r0, r4
 8008160:	f7fb fca4 	bl	8003aac <HAL_TIMEx_MasterConfigSynchronization>
 8008164:	4602      	mov	r2, r0
 8008166:	2800      	cmp	r0, #0
 8008168:	f47f af11 	bne.w	8007f8e <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800816c:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800816e:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigIC.ICFilter = 0;
 8008170:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008172:	a919      	add	r1, sp, #100	; 0x64
 8008174:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008176:	961a      	str	r6, [sp, #104]	; 0x68
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008178:	f7fb fbc2 	bl	8003900 <HAL_TIM_IC_ConfigChannel>
 800817c:	2800      	cmp	r0, #0
 800817e:	f47f af06 	bne.w	8007f8e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8008182:	463a      	mov	r2, r7
 8008184:	a919      	add	r1, sp, #100	; 0x64
 8008186:	4620      	mov	r0, r4
 8008188:	f7fb fbba 	bl	8003900 <HAL_TIM_IC_ConfigChannel>
 800818c:	2800      	cmp	r0, #0
 800818e:	f47f aefe 	bne.w	8007f8e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8008192:	2208      	movs	r2, #8
 8008194:	a919      	add	r1, sp, #100	; 0x64
 8008196:	4620      	mov	r0, r4
 8008198:	f7fb fbb2 	bl	8003900 <HAL_TIM_IC_ConfigChannel>
 800819c:	2800      	cmp	r0, #0
 800819e:	f47f aef6 	bne.w	8007f8e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80081a2:	220c      	movs	r2, #12
 80081a4:	a919      	add	r1, sp, #100	; 0x64
 80081a6:	4620      	mov	r0, r4
 80081a8:	f7fb fbaa 	bl	8003900 <HAL_TIM_IC_ConfigChannel>
 80081ac:	4605      	mov	r5, r0
 80081ae:	2800      	cmp	r0, #0
 80081b0:	f47f aeed 	bne.w	8007f8e <main+0xf6>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80081b4:	4601      	mov	r1, r0
 80081b6:	4620      	mov	r0, r4
 80081b8:	f7fb fc4c 	bl	8003a54 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80081bc:	4639      	mov	r1, r7
 80081be:	4620      	mov	r0, r4
 80081c0:	f7fb fc48 	bl	8003a54 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80081c4:	2108      	movs	r1, #8
 80081c6:	4620      	mov	r0, r4
 80081c8:	f7fb fc44 	bl	8003a54 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80081cc:	210c      	movs	r1, #12
 80081ce:	4620      	mov	r0, r4
 80081d0:	f7fb fc40 	bl	8003a54 <HAL_TIM_IC_Start_IT>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081d4:	2210      	movs	r2, #16
 80081d6:	4629      	mov	r1, r5
 80081d8:	a80d      	add	r0, sp, #52	; 0x34
 80081da:	f000 fbfe 	bl	80089da <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80081de:	2210      	movs	r2, #16
 80081e0:	4629      	mov	r1, r5
 80081e2:	a811      	add	r0, sp, #68	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081e4:	9504      	str	r5, [sp, #16]
 80081e6:	9505      	str	r5, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80081e8:	f000 fbf7 	bl	80089da <memset>
  htim2.Init.Prescaler = 72-1;
 80081ec:	2347      	movs	r3, #71	; 0x47
 80081ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80081f2:	4c33      	ldr	r4, [pc, #204]	; (80082c0 <main+0x428>)
  htim2.Init.Prescaler = 72-1;
 80081f4:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.Period = 0xFFFF;
 80081f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80081fc:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081fe:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 0xFFFF;
 8008200:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008202:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008204:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008206:	f7fb fa75 	bl	80036f4 <HAL_TIM_Base_Init>
 800820a:	2800      	cmp	r0, #0
 800820c:	f47f aebf 	bne.w	8007f8e <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008214:	a90d      	add	r1, sp, #52	; 0x34
 8008216:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008218:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800821a:	f7fb f8d5 	bl	80033c8 <HAL_TIM_ConfigClockSource>
 800821e:	2800      	cmp	r0, #0
 8008220:	f47f aeb5 	bne.w	8007f8e <main+0xf6>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008224:	4620      	mov	r0, r4
 8008226:	f7fb fa99 	bl	800375c <HAL_TIM_IC_Init>
 800822a:	2800      	cmp	r0, #0
 800822c:	f47f aeaf 	bne.w	8007f8e <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008230:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008232:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008234:	a904      	add	r1, sp, #16
 8008236:	4620      	mov	r0, r4
 8008238:	f7fb fc38 	bl	8003aac <HAL_TIMEx_MasterConfigSynchronization>
 800823c:	4602      	mov	r2, r0
 800823e:	2800      	cmp	r0, #0
 8008240:	f47f aea5 	bne.w	8007f8e <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008244:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008246:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigIC.ICFilter = 0;
 8008248:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800824a:	a911      	add	r1, sp, #68	; 0x44
 800824c:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800824e:	9612      	str	r6, [sp, #72]	; 0x48
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008250:	f7fb fb56 	bl	8003900 <HAL_TIM_IC_ConfigChannel>
 8008254:	2800      	cmp	r0, #0
 8008256:	f47f ae9a 	bne.w	8007f8e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800825a:	463a      	mov	r2, r7
 800825c:	a911      	add	r1, sp, #68	; 0x44
 800825e:	4620      	mov	r0, r4
 8008260:	f7fb fb4e 	bl	8003900 <HAL_TIM_IC_ConfigChannel>
 8008264:	4605      	mov	r5, r0
 8008266:	2800      	cmp	r0, #0
 8008268:	f47f ae91 	bne.w	8007f8e <main+0xf6>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800826c:	4601      	mov	r1, r0
 800826e:	4620      	mov	r0, r4
 8008270:	f7fb fbf0 	bl	8003a54 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8008274:	4639      	mov	r1, r7
 8008276:	4620      	mov	r0, r4
 8008278:	f7fb fbec 	bl	8003a54 <HAL_TIM_IC_Start_IT>
  LED1_ON;
 800827c:	4632      	mov	r2, r6
 800827e:	2110      	movs	r1, #16
 8008280:	4810      	ldr	r0, [pc, #64]	; (80082c4 <main+0x42c>)
 8008282:	f7f9 fe47 	bl	8001f14 <HAL_GPIO_WritePin>
   LED0_OFF;
 8008286:	462a      	mov	r2, r5
 8008288:	2108      	movs	r1, #8
 800828a:	480e      	ldr	r0, [pc, #56]	; (80082c4 <main+0x42c>)
 800828c:	f7f9 fe42 	bl	8001f14 <HAL_GPIO_WritePin>
 8008290:	240a      	movs	r4, #10
       LED1_TOGGLE;
 8008292:	4d0c      	ldr	r5, [pc, #48]	; (80082c4 <main+0x42c>)
 8008294:	e018      	b.n	80082c8 <main+0x430>
 8008296:	bf00      	nop
 8008298:	200014cc 	.word	0x200014cc
 800829c:	40000800 	.word	0x40000800
 80082a0:	2000169c 	.word	0x2000169c
 80082a4:	40013800 	.word	0x40013800
 80082a8:	20001724 	.word	0x20001724
 80082ac:	40004400 	.word	0x40004400
 80082b0:	200015e4 	.word	0x200015e4
 80082b4:	40012400 	.word	0x40012400
 80082b8:	20001560 	.word	0x20001560
 80082bc:	40000400 	.word	0x40000400
 80082c0:	200016e4 	.word	0x200016e4
 80082c4:	40010c00 	.word	0x40010c00
 80082c8:	2110      	movs	r1, #16
 80082ca:	4628      	mov	r0, r5
 80082cc:	f7f9 fe27 	bl	8001f1e <HAL_GPIO_TogglePin>
       LED0_TOGGLE;
 80082d0:	2108      	movs	r1, #8
 80082d2:	4628      	mov	r0, r5
 80082d4:	f7f9 fe23 	bl	8001f1e <HAL_GPIO_TogglePin>
       HAL_Delay(25);
 80082d8:	2019      	movs	r0, #25
 80082da:	f7f9 f901 	bl	80014e0 <HAL_Delay>
       HAL_Delay(25);
 80082de:	2019      	movs	r0, #25
 80082e0:	f7f9 f8fe 	bl	80014e0 <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 80082e4:	3c01      	subs	r4, #1
 80082e6:	d1ef      	bne.n	80082c8 <main+0x430>
   LED0_OFF;
 80082e8:	4622      	mov	r2, r4
         BAT.VBAT = (((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW;
 80082ea:	a749      	add	r7, pc, #292	; (adr r7, 8008410 <main+0x578>)
 80082ec:	e9d7 6700 	ldrd	r6, r7, [r7]
 80082f0:	f20f 1924 	addw	r9, pc, #292	; 0x124
 80082f4:	e9d9 8900 	ldrd	r8, r9, [r9]
   LED0_OFF;
 80082f8:	2108      	movs	r1, #8
 80082fa:	4849      	ldr	r0, [pc, #292]	; (8008420 <main+0x588>)
 80082fc:	f7f9 fe0a 	bl	8001f14 <HAL_GPIO_WritePin>
   LED1_OFF;
 8008300:	4622      	mov	r2, r4
 8008302:	2110      	movs	r1, #16
 8008304:	4846      	ldr	r0, [pc, #280]	; (8008420 <main+0x588>)
 8008306:	f7f9 fe05 	bl	8001f14 <HAL_GPIO_WritePin>
   MPU9250_Init();
 800830a:	f7fe f8a7 	bl	800645c <MPU9250_Init>
   MS5611_Init(MS5611_ULTRA_HIGH_RES);
 800830e:	2008      	movs	r0, #8
 8008310:	f7fe fefe 	bl	8007110 <MS5611_Init>
   gps_Init();
 8008314:	f7fb ffbe 	bl	8004294 <gps_Init>
  TM_AHRSIMU_Init(&AHRSIMU, 250, 0.1f, 0.0f);
 8008318:	2300      	movs	r3, #0
 800831a:	4a42      	ldr	r2, [pc, #264]	; (8008424 <main+0x58c>)
 800831c:	4942      	ldr	r1, [pc, #264]	; (8008428 <main+0x590>)
 800831e:	4843      	ldr	r0, [pc, #268]	; (800842c <main+0x594>)
 8008320:	f7fc fa32 	bl	8004788 <TM_AHRSIMU_Init>
  Calibrate_gyro();
 8008324:	f7fd fc4a 	bl	8005bbc <Calibrate_gyro>
  mixerInit();
 8008328:	f7fc fd7a 	bl	8004e20 <mixerInit>
   QueueCreate(UART1);
 800832c:	4620      	mov	r0, r4
 800832e:	f7fd f9c3 	bl	80056b8 <QueueCreate>
   QueueCreate(UART2);
 8008332:	2001      	movs	r0, #1
 8008334:	f7fd f9c0 	bl	80056b8 <QueueCreate>
   PIDControlInit(&pid);
 8008338:	483d      	ldr	r0, [pc, #244]	; (8008430 <main+0x598>)
 800833a:	f7fc fdfb 	bl	8004f34 <PIDControlInit>
   EEPROM_Init();
 800833e:	f7fb ff91 	bl	8004264 <EEPROM_Init>
   ssd1306_begin(SSD1306_SWITCHCAPVCC, 0x3C);
 8008342:	213c      	movs	r1, #60	; 0x3c
 8008344:	2002      	movs	r0, #2
 8008346:	f7ff fc21 	bl	8007b8c <ssd1306_begin>
   HAL_Delay(1000);
 800834a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800834e:	f7f9 f8c7 	bl	80014e0 <HAL_Delay>
   display();
 8008352:	f7ff fc85 	bl	8007c60 <display>
   clearDisplay();
 8008356:	f7ff fcaf 	bl	8007cb8 <clearDisplay>
   HAL_UART_Receive_DMA(&huart1, (uint8_t*)rx1_buffer, 1);
 800835a:	2201      	movs	r2, #1
 800835c:	4935      	ldr	r1, [pc, #212]	; (8008434 <main+0x59c>)
 800835e:	4836      	ldr	r0, [pc, #216]	; (8008438 <main+0x5a0>)
 8008360:	f7fb fd60 	bl	8003e24 <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx2_buffer, 1);
 8008364:	2201      	movs	r2, #1
 8008366:	4935      	ldr	r1, [pc, #212]	; (800843c <main+0x5a4>)
 8008368:	4835      	ldr	r0, [pc, #212]	; (8008440 <main+0x5a8>)
 800836a:	f7fb fd5b 	bl	8003e24 <HAL_UART_Receive_DMA>
      HAL_ADC_Start(&hadc1);
 800836e:	4d35      	ldr	r5, [pc, #212]	; (8008444 <main+0x5ac>)
    LED0_TOGGLE; //RED
 8008370:	2108      	movs	r1, #8
 8008372:	482b      	ldr	r0, [pc, #172]	; (8008420 <main+0x588>)
 8008374:	f7f9 fdd3 	bl	8001f1e <HAL_GPIO_TogglePin>
        Baro_update();
 8008378:	f7fe ff34 	bl	80071e4 <Baro_update>
        computeIMU();
 800837c:	f7fc fcb8 	bl	8004cf0 <computeIMU>
        Control();
 8008380:	f7fc fe4e 	bl	8005020 <Control>
        mixTable();
 8008384:	f7fc fd5e 	bl	8004e44 <mixTable>
        PwmWriteMotor();
 8008388:	f7fd f972 	bl	8005670 <PwmWriteMotor>
        PrintData(5);   //All Data Out Put
 800838c:	2005      	movs	r0, #5
 800838e:	f7fe ffed 	bl	800736c <PrintData>
      HAL_ADC_Start(&hadc1);
 8008392:	4628      	mov	r0, r5
 8008394:	f7f9 fa14 	bl	80017c0 <HAL_ADC_Start>
       if(HAL_ADC_PollForConversion(&hadc1,1000000) == HAL_OK)
 8008398:	492b      	ldr	r1, [pc, #172]	; (8008448 <main+0x5b0>)
 800839a:	4628      	mov	r0, r5
 800839c:	f7f9 f8b2 	bl	8001504 <HAL_ADC_PollForConversion>
 80083a0:	b9c8      	cbnz	r0, 80083d6 <main+0x53e>
         BAT.VBAT_Sense = HAL_ADC_GetValue(&hadc1);
 80083a2:	4628      	mov	r0, r5
 80083a4:	f7f9 f94c 	bl	8001640 <HAL_ADC_GetValue>
 80083a8:	4c28      	ldr	r4, [pc, #160]	; (800844c <main+0x5b4>)
 80083aa:	6020      	str	r0, [r4, #0]
         BAT.VBAT = (((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW;
 80083ac:	f7f8 f81a 	bl	80003e4 <__aeabi_ui2d>
 80083b0:	4632      	mov	r2, r6
 80083b2:	463b      	mov	r3, r7
 80083b4:	f7f8 f88c 	bl	80004d0 <__aeabi_dmul>
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	f7f8 f9b2 	bl	8000724 <__aeabi_ddiv>
 80083c0:	2200      	movs	r2, #0
 80083c2:	4b23      	ldr	r3, [pc, #140]	; (8008450 <main+0x5b8>)
 80083c4:	f7f8 f884 	bl	80004d0 <__aeabi_dmul>
 80083c8:	2200      	movs	r2, #0
 80083ca:	4b22      	ldr	r3, [pc, #136]	; (8008454 <main+0x5bc>)
 80083cc:	f7f8 f9aa 	bl	8000724 <__aeabi_ddiv>
 80083d0:	f7f8 fb56 	bl	8000a80 <__aeabi_d2f>
 80083d4:	6060      	str	r0, [r4, #4]
       flight_mode_signal();
 80083d6:	f7fc fce5 	bl	8004da4 <flight_mode_signal>
      SendTelemetry();
 80083da:	f7ff fa27 	bl	800782c <SendTelemetry>
      if (micros() - loop_timer > 4050)Error.error = 4;                                      //Output an error if the loop time exceeds 4050us.
 80083de:	f7ff fa53 	bl	8007888 <micros>
 80083e2:	4c1d      	ldr	r4, [pc, #116]	; (8008458 <main+0x5c0>)
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	46a2      	mov	sl, r4
 80083e8:	1ac0      	subs	r0, r0, r3
 80083ea:	f640 73d2 	movw	r3, #4050	; 0xfd2
 80083ee:	4298      	cmp	r0, r3
 80083f0:	bf82      	ittt	hi
 80083f2:	2204      	movhi	r2, #4
 80083f4:	4b19      	ldrhi	r3, [pc, #100]	; (800845c <main+0x5c4>)
 80083f6:	701a      	strbhi	r2, [r3, #0]
      while (micros() - loop_timer < 4000);                                            //We wait until 4000us are passed.
 80083f8:	f7ff fa46 	bl	8007888 <micros>
 80083fc:	f8da 3000 	ldr.w	r3, [sl]
 8008400:	1ac0      	subs	r0, r0, r3
 8008402:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8008406:	d3f7      	bcc.n	80083f8 <main+0x560>
      loop_timer = micros();
 8008408:	f7ff fa3e 	bl	8007888 <micros>
 800840c:	6020      	str	r0, [r4, #0]
    LED0_TOGGLE; //RED
 800840e:	e7af      	b.n	8008370 <main+0x4d8>
 8008410:	66666666 	.word	0x66666666
 8008414:	400a6666 	.word	0x400a6666
 8008418:	00000000 	.word	0x00000000
 800841c:	40affe00 	.word	0x40affe00
 8008420:	40010c00 	.word	0x40010c00
 8008424:	3dcccccd 	.word	0x3dcccccd
 8008428:	437a0000 	.word	0x437a0000
 800842c:	20000e6c 	.word	0x20000e6c
 8008430:	20000ea8 	.word	0x20000ea8
 8008434:	20001460 	.word	0x20001460
 8008438:	2000169c 	.word	0x2000169c
 800843c:	20001470 	.word	0x20001470
 8008440:	20001724 	.word	0x20001724
 8008444:	200015e4 	.word	0x200015e4
 8008448:	000f4240 	.word	0x000f4240
 800844c:	20001480 	.word	0x20001480
 8008450:	403e0000 	.word	0x403e0000
 8008454:	40340000 	.word	0x40340000
 8008458:	20000d44 	.word	0x20000d44
 800845c:	200016dc 	.word	0x200016dc

08008460 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008460:	4770      	bx	lr
	...

08008464 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008464:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <HAL_MspInit+0x3c>)
{
 8008466:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	f042 0201 	orr.w	r2, r2, #1
 800846e:	619a      	str	r2, [r3, #24]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	f002 0201 	and.w	r2, r2, #1
 8008476:	9200      	str	r2, [sp, #0]
 8008478:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800847a:	69da      	ldr	r2, [r3, #28]
 800847c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008480:	61da      	str	r2, [r3, #28]
 8008482:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008484:	4a07      	ldr	r2, [pc, #28]	; (80084a4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8008486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800848a:	9301      	str	r3, [sp, #4]
 800848c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800848e:	6853      	ldr	r3, [r2, #4]
 8008490:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008494:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800849a:	b002      	add	sp, #8
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	40021000 	.word	0x40021000
 80084a4:	40010000 	.word	0x40010000

080084a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80084a8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084aa:	2410      	movs	r4, #16
{
 80084ac:	4605      	mov	r5, r0
 80084ae:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084b0:	4622      	mov	r2, r4
 80084b2:	2100      	movs	r1, #0
 80084b4:	a802      	add	r0, sp, #8
 80084b6:	f000 fa90 	bl	80089da <memset>
  if(hadc->Instance==ADC1)
 80084ba:	682a      	ldr	r2, [r5, #0]
 80084bc:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <HAL_ADC_MspInit+0x54>)
 80084be:	429a      	cmp	r2, r3
 80084c0:	d11a      	bne.n	80084f8 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80084c2:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80084c6:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084c8:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80084ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084ce:	619a      	str	r2, [r3, #24]
 80084d0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084d2:	480b      	ldr	r0, [pc, #44]	; (8008500 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80084d4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80084d8:	9200      	str	r2, [sp, #0]
 80084da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084dc:	699a      	ldr	r2, [r3, #24]
 80084de:	f042 0204 	orr.w	r2, r2, #4
 80084e2:	619a      	str	r2, [r3, #24]
 80084e4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80084e6:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80084f0:	2303      	movs	r3, #3
 80084f2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084f4:	f7f9 fc2e 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80084f8:	b007      	add	sp, #28
 80084fa:	bd30      	pop	{r4, r5, pc}
 80084fc:	40012400 	.word	0x40012400
 8008500:	40010800 	.word	0x40010800

08008504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008504:	b510      	push	{r4, lr}
 8008506:	4604      	mov	r4, r0
 8008508:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800850a:	2210      	movs	r2, #16
 800850c:	2100      	movs	r1, #0
 800850e:	a802      	add	r0, sp, #8
 8008510:	f000 fa63 	bl	80089da <memset>
  if(hi2c->Instance==I2C2)
 8008514:	6822      	ldr	r2, [r4, #0]
 8008516:	4b11      	ldr	r3, [pc, #68]	; (800855c <HAL_I2C_MspInit+0x58>)
 8008518:	429a      	cmp	r2, r3
 800851a:	d11d      	bne.n	8008558 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800851c:	4c10      	ldr	r4, [pc, #64]	; (8008560 <HAL_I2C_MspInit+0x5c>)
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800851e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008520:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008522:	4810      	ldr	r0, [pc, #64]	; (8008564 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008524:	f043 0308 	orr.w	r3, r3, #8
 8008528:	61a3      	str	r3, [r4, #24]
 800852a:	69a3      	ldr	r3, [r4, #24]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008534:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008538:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800853a:	2312      	movs	r3, #18
 800853c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800853e:	2303      	movs	r3, #3
 8008540:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008542:	f7f9 fc07 	bl	8001d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008546:	69e3      	ldr	r3, [r4, #28]
 8008548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800854c:	61e3      	str	r3, [r4, #28]
 800854e:	69e3      	ldr	r3, [r4, #28]
 8008550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8008558:	b006      	add	sp, #24
 800855a:	bd10      	pop	{r4, pc}
 800855c:	40005800 	.word	0x40005800
 8008560:	40021000 	.word	0x40021000
 8008564:	40010c00 	.word	0x40010c00

08008568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008568:	b510      	push	{r4, lr}
 800856a:	4604      	mov	r4, r0
 800856c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800856e:	2210      	movs	r2, #16
 8008570:	2100      	movs	r1, #0
 8008572:	a806      	add	r0, sp, #24
 8008574:	f000 fa31 	bl	80089da <memset>
  if(htim_base->Instance==TIM2)
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800857e:	d122      	bne.n	80085c6 <HAL_TIM_Base_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008580:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008584:	69da      	ldr	r2, [r3, #28]
    PA3     ------> TIM2_CH4  //UART2 reserved
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008586:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008588:	f042 0201 	orr.w	r2, r2, #1
 800858c:	61da      	str	r2, [r3, #28]
 800858e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008590:	482f      	ldr	r0, [pc, #188]	; (8008650 <HAL_TIM_Base_MspInit+0xe8>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008592:	f002 0201 	and.w	r2, r2, #1
 8008596:	9200      	str	r2, [sp, #0]
 8008598:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800859a:	699a      	ldr	r2, [r3, #24]
 800859c:	f042 0204 	orr.w	r2, r2, #4
 80085a0:	619a      	str	r2, [r3, #24]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80085ac:	2303      	movs	r3, #3
 80085ae:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085b0:	f7f9 fbd0 	bl	8001d54 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80085b4:	2200      	movs	r2, #0
 80085b6:	201c      	movs	r0, #28
 80085b8:	4611      	mov	r1, r2
 80085ba:	f7f9 fa17 	bl	80019ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80085be:	201c      	movs	r0, #28
  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80085c0:	f7f9 fa48 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80085c4:	e02d      	b.n	8008622 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80085c6:	4a23      	ldr	r2, [pc, #140]	; (8008654 <HAL_TIM_Base_MspInit+0xec>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d12c      	bne.n	8008626 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80085cc:	4b22      	ldr	r3, [pc, #136]	; (8008658 <HAL_TIM_Base_MspInit+0xf0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ce:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM3_CLK_ENABLE();
 80085d0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085d2:	481f      	ldr	r0, [pc, #124]	; (8008650 <HAL_TIM_Base_MspInit+0xe8>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80085d4:	f042 0202 	orr.w	r2, r2, #2
 80085d8:	61da      	str	r2, [r3, #28]
 80085da:	69da      	ldr	r2, [r3, #28]
 80085dc:	f002 0202 	and.w	r2, r2, #2
 80085e0:	9202      	str	r2, [sp, #8]
 80085e2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085e4:	699a      	ldr	r2, [r3, #24]
 80085e6:	f042 0204 	orr.w	r2, r2, #4
 80085ea:	619a      	str	r2, [r3, #24]
 80085ec:	699a      	ldr	r2, [r3, #24]
 80085ee:	f002 0204 	and.w	r2, r2, #4
 80085f2:	9203      	str	r2, [sp, #12]
 80085f4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	f042 0208 	orr.w	r2, r2, #8
 80085fc:	619a      	str	r2, [r3, #24]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	f003 0308 	and.w	r3, r3, #8
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008608:	23c0      	movs	r3, #192	; 0xc0
 800860a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800860c:	f7f9 fba2 	bl	8001d54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008610:	2303      	movs	r3, #3
 8008612:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008614:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008616:	a906      	add	r1, sp, #24
 8008618:	4810      	ldr	r0, [pc, #64]	; (800865c <HAL_TIM_Base_MspInit+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800861a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800861c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800861e:	f7f9 fb99 	bl	8001d54 <HAL_GPIO_Init>
}
 8008622:	b00a      	add	sp, #40	; 0x28
 8008624:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM4)
 8008626:	4a0e      	ldr	r2, [pc, #56]	; (8008660 <HAL_TIM_Base_MspInit+0xf8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d1fa      	bne.n	8008622 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800862c:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <HAL_TIM_Base_MspInit+0xf0>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800862e:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008630:	69da      	ldr	r2, [r3, #28]
 8008632:	f042 0204 	orr.w	r2, r2, #4
 8008636:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008638:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 800863a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800863c:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	9305      	str	r3, [sp, #20]
 8008644:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008646:	f7f9 f9d1 	bl	80019ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800864a:	201e      	movs	r0, #30
 800864c:	e7b8      	b.n	80085c0 <HAL_TIM_Base_MspInit+0x58>
 800864e:	bf00      	nop
 8008650:	40010800 	.word	0x40010800
 8008654:	40000400 	.word	0x40000400
 8008658:	40021000 	.word	0x40021000
 800865c:	40010c00 	.word	0x40010c00
 8008660:	40000800 	.word	0x40000800

08008664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008664:	b510      	push	{r4, lr}
 8008666:	4604      	mov	r4, r0
 8008668:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800866a:	2210      	movs	r2, #16
 800866c:	2100      	movs	r1, #0
 800866e:	a802      	add	r0, sp, #8
 8008670:	f000 f9b3 	bl	80089da <memset>
  if(htim->Instance==TIM4)
 8008674:	6822      	ldr	r2, [r4, #0]
 8008676:	4b0d      	ldr	r3, [pc, #52]	; (80086ac <HAL_TIM_MspPostInit+0x48>)
 8008678:	429a      	cmp	r2, r3
 800867a:	d115      	bne.n	80086a8 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800867c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8008680:	699a      	ldr	r2, [r3, #24]
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008682:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008684:	f042 0208 	orr.w	r2, r2, #8
 8008688:	619a      	str	r2, [r3, #24]
 800868a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800868c:	4808      	ldr	r0, [pc, #32]	; (80086b0 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800868e:	f003 0308 	and.w	r3, r3, #8
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008696:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800869a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800869c:	2302      	movs	r3, #2
 800869e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80086a0:	2303      	movs	r3, #3
 80086a2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086a4:	f7f9 fb56 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80086a8:	b006      	add	sp, #24
 80086aa:	bd10      	pop	{r4, pc}
 80086ac:	40000800 	.word	0x40000800
 80086b0:	40010c00 	.word	0x40010c00

080086b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80086b4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086b6:	2710      	movs	r7, #16
{
 80086b8:	4605      	mov	r5, r0
 80086ba:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086bc:	463a      	mov	r2, r7
 80086be:	2100      	movs	r1, #0
 80086c0:	eb0d 0007 	add.w	r0, sp, r7
 80086c4:	f000 f989 	bl	80089da <memset>
  if(huart->Instance==USART1)
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	4a57      	ldr	r2, [pc, #348]	; (8008828 <HAL_UART_MspInit+0x174>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d15b      	bne.n	8008788 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80086d0:	4b56      	ldr	r3, [pc, #344]	; (800882c <HAL_UART_MspInit+0x178>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d2:	eb0d 0107 	add.w	r1, sp, r7
    __HAL_RCC_USART1_CLK_ENABLE();
 80086d6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d8:	4855      	ldr	r0, [pc, #340]	; (8008830 <HAL_UART_MspInit+0x17c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80086da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086de:	619a      	str	r2, [r3, #24]
 80086e0:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086e2:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80086e4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80086e8:	9201      	str	r2, [sp, #4]
 80086ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ec:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80086ee:	4c51      	ldr	r4, [pc, #324]	; (8008834 <HAL_UART_MspInit+0x180>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086f0:	f042 0204 	orr.w	r2, r2, #4
 80086f4:	619a      	str	r2, [r3, #24]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	9302      	str	r3, [sp, #8]
 80086fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008704:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008706:	2302      	movs	r3, #2
 8008708:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800870a:	2303      	movs	r3, #3
 800870c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800870e:	f7f9 fb21 	bl	8001d54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008712:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008716:	4846      	ldr	r0, [pc, #280]	; (8008830 <HAL_UART_MspInit+0x17c>)
 8008718:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800871c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800871e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008720:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008722:	f7f9 fb17 	bl	8001d54 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8008726:	4b44      	ldr	r3, [pc, #272]	; (8008838 <HAL_UART_MspInit+0x184>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008728:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800872a:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800872e:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008730:	60a6      	str	r6, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008732:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008734:	6126      	str	r6, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008736:	6166      	str	r6, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008738:	61a6      	str	r6, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800873a:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800873c:	f7f9 f9bc 	bl	8001ab8 <HAL_DMA_Init>
 8008740:	b108      	cbz	r0, 8008746 <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 8008742:	f7ff fb4f 	bl	8007de4 <Error_Handler>

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008746:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008748:	4b3c      	ldr	r3, [pc, #240]	; (800883c <HAL_UART_MspInit+0x188>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800874a:	632c      	str	r4, [r5, #48]	; 0x30
 800874c:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800874e:	4c3c      	ldr	r4, [pc, #240]	; (8008840 <HAL_UART_MspInit+0x18c>)
 8008750:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008752:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008754:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8008756:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008758:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800875a:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800875c:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800875e:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008760:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8008762:	61a2      	str	r2, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008764:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008766:	f7f9 f9a7 	bl	8001ab8 <HAL_DMA_Init>
 800876a:	b108      	cbz	r0, 8008770 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 800876c:	f7ff fb3a 	bl	8007de4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008770:	2200      	movs	r2, #0
 8008772:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008774:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008776:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008778:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800877a:	f7f9 f937 	bl	80019ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800877e:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008780:	f7f9 f968 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008784:	b009      	add	sp, #36	; 0x24
 8008786:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART2)
 8008788:	4a2e      	ldr	r2, [pc, #184]	; (8008844 <HAL_UART_MspInit+0x190>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d1fa      	bne.n	8008784 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800878e:	4b27      	ldr	r3, [pc, #156]	; (800882c <HAL_UART_MspInit+0x178>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008790:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8008792:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008794:	4826      	ldr	r0, [pc, #152]	; (8008830 <HAL_UART_MspInit+0x17c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8008796:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800879a:	61da      	str	r2, [r3, #28]
 800879c:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800879e:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80087a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a4:	9303      	str	r3, [sp, #12]
 80087a6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80087a8:	2304      	movs	r3, #4
 80087aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ac:	2302      	movs	r3, #2
 80087ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80087b0:	2303      	movs	r3, #3
 80087b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087b4:	f7f9 face 	bl	8001d54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80087b8:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087ba:	481d      	ldr	r0, [pc, #116]	; (8008830 <HAL_UART_MspInit+0x17c>)
 80087bc:	a904      	add	r1, sp, #16
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80087be:	4c22      	ldr	r4, [pc, #136]	; (8008848 <HAL_UART_MspInit+0x194>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80087c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087c2:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c4:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087c6:	f7f9 fac5 	bl	8001d54 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80087ca:	4b20      	ldr	r3, [pc, #128]	; (800884c <HAL_UART_MspInit+0x198>)
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80087cc:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80087ce:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80087d2:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087d4:	60a6      	str	r6, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80087d6:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80087d8:	6126      	str	r6, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80087da:	6166      	str	r6, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80087dc:	61a6      	str	r6, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80087de:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80087e0:	f7f9 f96a 	bl	8001ab8 <HAL_DMA_Init>
 80087e4:	b108      	cbz	r0, 80087ea <HAL_UART_MspInit+0x136>
      Error_Handler();
 80087e6:	f7ff fafd 	bl	8007de4 <Error_Handler>
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80087ea:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80087ec:	4b18      	ldr	r3, [pc, #96]	; (8008850 <HAL_UART_MspInit+0x19c>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80087ee:	632c      	str	r4, [r5, #48]	; 0x30
 80087f0:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80087f2:	4c18      	ldr	r4, [pc, #96]	; (8008854 <HAL_UART_MspInit+0x1a0>)
 80087f4:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80087f6:	60e2      	str	r2, [r4, #12]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087f8:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80087fa:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80087fc:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087fe:	6063      	str	r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008800:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008802:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008804:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008806:	61a2      	str	r2, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008808:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800880a:	f7f9 f955 	bl	8001ab8 <HAL_DMA_Init>
 800880e:	b108      	cbz	r0, 8008814 <HAL_UART_MspInit+0x160>
      Error_Handler();
 8008810:	f7ff fae8 	bl	8007de4 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008814:	2200      	movs	r2, #0
 8008816:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008818:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800881a:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800881c:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800881e:	f7f9 f8e5 	bl	80019ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008822:	2026      	movs	r0, #38	; 0x26
 8008824:	e7ac      	b.n	8008780 <HAL_UART_MspInit+0xcc>
 8008826:	bf00      	nop
 8008828:	40013800 	.word	0x40013800
 800882c:	40021000 	.word	0x40021000
 8008830:	40010800 	.word	0x40010800
 8008834:	200015a0 	.word	0x200015a0
 8008838:	40020044 	.word	0x40020044
 800883c:	40020058 	.word	0x40020058
 8008840:	20001614 	.word	0x20001614
 8008844:	40004400 	.word	0x40004400
 8008848:	20001658 	.word	0x20001658
 800884c:	40020080 	.word	0x40020080
 8008850:	4002006c 	.word	0x4002006c
 8008854:	20001488 	.word	0x20001488

08008858 <NMI_Handler>:
 8008858:	4770      	bx	lr

0800885a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800885a:	e7fe      	b.n	800885a <HardFault_Handler>

0800885c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800885c:	e7fe      	b.n	800885c <MemManage_Handler>

0800885e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800885e:	e7fe      	b.n	800885e <BusFault_Handler>

08008860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008860:	e7fe      	b.n	8008860 <UsageFault_Handler>

08008862 <SVC_Handler>:
 8008862:	4770      	bx	lr

08008864 <DebugMon_Handler>:
 8008864:	4770      	bx	lr

08008866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008866:	4770      	bx	lr

08008868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800886a:	f7f8 fe27 	bl	80014bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800886e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8008872:	f7f9 b91d 	b.w	8001ab0 <HAL_SYSTICK_IRQHandler>
	...

08008878 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008878:	4801      	ldr	r0, [pc, #4]	; (8008880 <DMA1_Channel4_IRQHandler+0x8>)
 800887a:	f7f9 b9d7 	b.w	8001c2c <HAL_DMA_IRQHandler>
 800887e:	bf00      	nop
 8008880:	200015a0 	.word	0x200015a0

08008884 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008884:	4801      	ldr	r0, [pc, #4]	; (800888c <DMA1_Channel5_IRQHandler+0x8>)
 8008886:	f7f9 b9d1 	b.w	8001c2c <HAL_DMA_IRQHandler>
 800888a:	bf00      	nop
 800888c:	20001614 	.word	0x20001614

08008890 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <DMA1_Channel6_IRQHandler+0x8>)
 8008892:	f7f9 b9cb 	b.w	8001c2c <HAL_DMA_IRQHandler>
 8008896:	bf00      	nop
 8008898:	20001488 	.word	0x20001488

0800889c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <DMA1_Channel7_IRQHandler+0x8>)
 800889e:	f7f9 b9c5 	b.w	8001c2c <HAL_DMA_IRQHandler>
 80088a2:	bf00      	nop
 80088a4:	20001658 	.word	0x20001658

080088a8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80088a8:	4801      	ldr	r0, [pc, #4]	; (80088b0 <TIM2_IRQHandler+0x8>)
 80088aa:	f7fa be49 	b.w	8003540 <HAL_TIM_IRQHandler>
 80088ae:	bf00      	nop
 80088b0:	200016e4 	.word	0x200016e4

080088b4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80088b4:	4801      	ldr	r0, [pc, #4]	; (80088bc <TIM3_IRQHandler+0x8>)
 80088b6:	f7fa be43 	b.w	8003540 <HAL_TIM_IRQHandler>
 80088ba:	bf00      	nop
 80088bc:	20001560 	.word	0x20001560

080088c0 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80088c0:	4801      	ldr	r0, [pc, #4]	; (80088c8 <TIM4_IRQHandler+0x8>)
 80088c2:	f7fa be3d 	b.w	8003540 <HAL_TIM_IRQHandler>
 80088c6:	bf00      	nop
 80088c8:	200014cc 	.word	0x200014cc

080088cc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80088cc:	4801      	ldr	r0, [pc, #4]	; (80088d4 <USART1_IRQHandler+0x8>)
 80088ce:	f7fb bb97 	b.w	8004000 <HAL_UART_IRQHandler>
 80088d2:	bf00      	nop
 80088d4:	2000169c 	.word	0x2000169c

080088d8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80088d8:	4801      	ldr	r0, [pc, #4]	; (80088e0 <USART2_IRQHandler+0x8>)
 80088da:	f7fb bb91 	b.w	8004000 <HAL_UART_IRQHandler>
 80088de:	bf00      	nop
 80088e0:	20001724 	.word	0x20001724

080088e4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80088e4:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <SystemInit+0x40>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	f042 0201 	orr.w	r2, r2, #1
 80088ec:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80088ee:	6859      	ldr	r1, [r3, #4]
 80088f0:	4a0d      	ldr	r2, [pc, #52]	; (8008928 <SystemInit+0x44>)
 80088f2:	400a      	ands	r2, r1
 80088f4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80088fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008900:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008908:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8008910:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8008912:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008916:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008918:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800891c:	4b03      	ldr	r3, [pc, #12]	; (800892c <SystemInit+0x48>)
 800891e:	609a      	str	r2, [r3, #8]
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	40021000 	.word	0x40021000
 8008928:	f8ff0000 	.word	0xf8ff0000
 800892c:	e000ed00 	.word	0xe000ed00

08008930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008930:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008932:	e003      	b.n	800893c <LoopCopyDataInit>

08008934 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008934:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8008936:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008938:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800893a:	3104      	adds	r1, #4

0800893c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800893c:	480a      	ldr	r0, [pc, #40]	; (8008968 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800893e:	4b0b      	ldr	r3, [pc, #44]	; (800896c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008940:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008942:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008944:	d3f6      	bcc.n	8008934 <CopyDataInit>
  ldr r2, =_sbss
 8008946:	4a0a      	ldr	r2, [pc, #40]	; (8008970 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008948:	e002      	b.n	8008950 <LoopFillZerobss>

0800894a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800894a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800894c:	f842 3b04 	str.w	r3, [r2], #4

08008950 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008950:	4b08      	ldr	r3, [pc, #32]	; (8008974 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008952:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008954:	d3f9      	bcc.n	800894a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008956:	f7ff ffc5 	bl	80088e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800895a:	f000 f80f 	bl	800897c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800895e:	f7ff fa9b 	bl	8007e98 <main>
  bx lr
 8008962:	4770      	bx	lr
  ldr r3, =_sidata
 8008964:	08017ed8 	.word	0x08017ed8
  ldr r0, =_sdata
 8008968:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800896c:	20000a88 	.word	0x20000a88
  ldr r2, =_sbss
 8008970:	20000a88 	.word	0x20000a88
  ldr r3, = _ebss
 8008974:	20001774 	.word	0x20001774

08008978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008978:	e7fe      	b.n	8008978 <ADC1_2_IRQHandler>
	...

0800897c <__libc_init_array>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	2500      	movs	r5, #0
 8008980:	4e0c      	ldr	r6, [pc, #48]	; (80089b4 <__libc_init_array+0x38>)
 8008982:	4c0d      	ldr	r4, [pc, #52]	; (80089b8 <__libc_init_array+0x3c>)
 8008984:	1ba4      	subs	r4, r4, r6
 8008986:	10a4      	asrs	r4, r4, #2
 8008988:	42a5      	cmp	r5, r4
 800898a:	d109      	bne.n	80089a0 <__libc_init_array+0x24>
 800898c:	f005 f8dc 	bl	800db48 <_init>
 8008990:	2500      	movs	r5, #0
 8008992:	4e0a      	ldr	r6, [pc, #40]	; (80089bc <__libc_init_array+0x40>)
 8008994:	4c0a      	ldr	r4, [pc, #40]	; (80089c0 <__libc_init_array+0x44>)
 8008996:	1ba4      	subs	r4, r4, r6
 8008998:	10a4      	asrs	r4, r4, #2
 800899a:	42a5      	cmp	r5, r4
 800899c:	d105      	bne.n	80089aa <__libc_init_array+0x2e>
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089a4:	4798      	blx	r3
 80089a6:	3501      	adds	r5, #1
 80089a8:	e7ee      	b.n	8008988 <__libc_init_array+0xc>
 80089aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089ae:	4798      	blx	r3
 80089b0:	3501      	adds	r5, #1
 80089b2:	e7f2      	b.n	800899a <__libc_init_array+0x1e>
 80089b4:	08017ed0 	.word	0x08017ed0
 80089b8:	08017ed0 	.word	0x08017ed0
 80089bc:	08017ed0 	.word	0x08017ed0
 80089c0:	08017ed4 	.word	0x08017ed4

080089c4 <memcpy>:
 80089c4:	b510      	push	{r4, lr}
 80089c6:	1e43      	subs	r3, r0, #1
 80089c8:	440a      	add	r2, r1
 80089ca:	4291      	cmp	r1, r2
 80089cc:	d100      	bne.n	80089d0 <memcpy+0xc>
 80089ce:	bd10      	pop	{r4, pc}
 80089d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089d8:	e7f7      	b.n	80089ca <memcpy+0x6>

080089da <memset>:
 80089da:	4603      	mov	r3, r0
 80089dc:	4402      	add	r2, r0
 80089de:	4293      	cmp	r3, r2
 80089e0:	d100      	bne.n	80089e4 <memset+0xa>
 80089e2:	4770      	bx	lr
 80089e4:	f803 1b01 	strb.w	r1, [r3], #1
 80089e8:	e7f9      	b.n	80089de <memset+0x4>
	...

080089ec <sprintf>:
 80089ec:	b40e      	push	{r1, r2, r3}
 80089ee:	f44f 7102 	mov.w	r1, #520	; 0x208
 80089f2:	b500      	push	{lr}
 80089f4:	b09c      	sub	sp, #112	; 0x70
 80089f6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80089fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089fe:	9104      	str	r1, [sp, #16]
 8008a00:	9107      	str	r1, [sp, #28]
 8008a02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008a06:	ab1d      	add	r3, sp, #116	; 0x74
 8008a08:	9002      	str	r0, [sp, #8]
 8008a0a:	9006      	str	r0, [sp, #24]
 8008a0c:	4808      	ldr	r0, [pc, #32]	; (8008a30 <sprintf+0x44>)
 8008a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a12:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008a16:	6800      	ldr	r0, [r0, #0]
 8008a18:	a902      	add	r1, sp, #8
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	f000 f812 	bl	8008a44 <_svfprintf_r>
 8008a20:	2200      	movs	r2, #0
 8008a22:	9b02      	ldr	r3, [sp, #8]
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	b01c      	add	sp, #112	; 0x70
 8008a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a2c:	b003      	add	sp, #12
 8008a2e:	4770      	bx	lr
 8008a30:	20000414 	.word	0x20000414

08008a34 <strcpy>:
 8008a34:	4603      	mov	r3, r0
 8008a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a3a:	f803 2b01 	strb.w	r2, [r3], #1
 8008a3e:	2a00      	cmp	r2, #0
 8008a40:	d1f9      	bne.n	8008a36 <strcpy+0x2>
 8008a42:	4770      	bx	lr

08008a44 <_svfprintf_r>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	b0bf      	sub	sp, #252	; 0xfc
 8008a4a:	4689      	mov	r9, r1
 8008a4c:	4615      	mov	r5, r2
 8008a4e:	461f      	mov	r7, r3
 8008a50:	4682      	mov	sl, r0
 8008a52:	f001 fe61 	bl	800a718 <_localeconv_r>
 8008a56:	6803      	ldr	r3, [r0, #0]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	9311      	str	r3, [sp, #68]	; 0x44
 8008a5c:	f7f7 fb78 	bl	8000150 <strlen>
 8008a60:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008a64:	900a      	str	r0, [sp, #40]	; 0x28
 8008a66:	061b      	lsls	r3, r3, #24
 8008a68:	d518      	bpl.n	8008a9c <_svfprintf_r+0x58>
 8008a6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a6e:	b9ab      	cbnz	r3, 8008a9c <_svfprintf_r+0x58>
 8008a70:	2140      	movs	r1, #64	; 0x40
 8008a72:	4650      	mov	r0, sl
 8008a74:	f001 fe68 	bl	800a748 <_malloc_r>
 8008a78:	f8c9 0000 	str.w	r0, [r9]
 8008a7c:	f8c9 0010 	str.w	r0, [r9, #16]
 8008a80:	b948      	cbnz	r0, 8008a96 <_svfprintf_r+0x52>
 8008a82:	230c      	movs	r3, #12
 8008a84:	f8ca 3000 	str.w	r3, [sl]
 8008a88:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a90:	b03f      	add	sp, #252	; 0xfc
 8008a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a96:	2340      	movs	r3, #64	; 0x40
 8008a98:	f8c9 3014 	str.w	r3, [r9, #20]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	ac2e      	add	r4, sp, #184	; 0xb8
 8008aa0:	9421      	str	r4, [sp, #132]	; 0x84
 8008aa2:	9323      	str	r3, [sp, #140]	; 0x8c
 8008aa4:	9322      	str	r3, [sp, #136]	; 0x88
 8008aa6:	9509      	str	r5, [sp, #36]	; 0x24
 8008aa8:	9307      	str	r3, [sp, #28]
 8008aaa:	930d      	str	r3, [sp, #52]	; 0x34
 8008aac:	930e      	str	r3, [sp, #56]	; 0x38
 8008aae:	9315      	str	r3, [sp, #84]	; 0x54
 8008ab0:	9314      	str	r3, [sp, #80]	; 0x50
 8008ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ab4:	9312      	str	r3, [sp, #72]	; 0x48
 8008ab6:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ab8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008aba:	462b      	mov	r3, r5
 8008abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac0:	b112      	cbz	r2, 8008ac8 <_svfprintf_r+0x84>
 8008ac2:	2a25      	cmp	r2, #37	; 0x25
 8008ac4:	f040 8083 	bne.w	8008bce <_svfprintf_r+0x18a>
 8008ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aca:	1aee      	subs	r6, r5, r3
 8008acc:	d00d      	beq.n	8008aea <_svfprintf_r+0xa6>
 8008ace:	e884 0048 	stmia.w	r4, {r3, r6}
 8008ad2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ad4:	4433      	add	r3, r6
 8008ad6:	9323      	str	r3, [sp, #140]	; 0x8c
 8008ad8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ada:	3301      	adds	r3, #1
 8008adc:	2b07      	cmp	r3, #7
 8008ade:	9322      	str	r3, [sp, #136]	; 0x88
 8008ae0:	dc77      	bgt.n	8008bd2 <_svfprintf_r+0x18e>
 8008ae2:	3408      	adds	r4, #8
 8008ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae6:	4433      	add	r3, r6
 8008ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aea:	782b      	ldrb	r3, [r5, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 8725 	beq.w	800993c <_svfprintf_r+0xef8>
 8008af2:	2300      	movs	r3, #0
 8008af4:	1c69      	adds	r1, r5, #1
 8008af6:	461a      	mov	r2, r3
 8008af8:	f04f 3bff 	mov.w	fp, #4294967295
 8008afc:	461d      	mov	r5, r3
 8008afe:	200a      	movs	r0, #10
 8008b00:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8008b04:	930c      	str	r3, [sp, #48]	; 0x30
 8008b06:	1c4e      	adds	r6, r1, #1
 8008b08:	7809      	ldrb	r1, [r1, #0]
 8008b0a:	9609      	str	r6, [sp, #36]	; 0x24
 8008b0c:	9106      	str	r1, [sp, #24]
 8008b0e:	9906      	ldr	r1, [sp, #24]
 8008b10:	3920      	subs	r1, #32
 8008b12:	2958      	cmp	r1, #88	; 0x58
 8008b14:	f200 8414 	bhi.w	8009340 <_svfprintf_r+0x8fc>
 8008b18:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008b1c:	041200a5 	.word	0x041200a5
 8008b20:	00aa0412 	.word	0x00aa0412
 8008b24:	04120412 	.word	0x04120412
 8008b28:	04120412 	.word	0x04120412
 8008b2c:	04120412 	.word	0x04120412
 8008b30:	006500ad 	.word	0x006500ad
 8008b34:	00b50412 	.word	0x00b50412
 8008b38:	041200b8 	.word	0x041200b8
 8008b3c:	00d800d5 	.word	0x00d800d5
 8008b40:	00d800d8 	.word	0x00d800d8
 8008b44:	00d800d8 	.word	0x00d800d8
 8008b48:	00d800d8 	.word	0x00d800d8
 8008b4c:	00d800d8 	.word	0x00d800d8
 8008b50:	04120412 	.word	0x04120412
 8008b54:	04120412 	.word	0x04120412
 8008b58:	04120412 	.word	0x04120412
 8008b5c:	04120412 	.word	0x04120412
 8008b60:	04120412 	.word	0x04120412
 8008b64:	0122010c 	.word	0x0122010c
 8008b68:	01220412 	.word	0x01220412
 8008b6c:	04120412 	.word	0x04120412
 8008b70:	04120412 	.word	0x04120412
 8008b74:	041200eb 	.word	0x041200eb
 8008b78:	033c0412 	.word	0x033c0412
 8008b7c:	04120412 	.word	0x04120412
 8008b80:	04120412 	.word	0x04120412
 8008b84:	03a40412 	.word	0x03a40412
 8008b88:	04120412 	.word	0x04120412
 8008b8c:	04120085 	.word	0x04120085
 8008b90:	04120412 	.word	0x04120412
 8008b94:	04120412 	.word	0x04120412
 8008b98:	04120412 	.word	0x04120412
 8008b9c:	04120412 	.word	0x04120412
 8008ba0:	00fe0412 	.word	0x00fe0412
 8008ba4:	0122006b 	.word	0x0122006b
 8008ba8:	01220122 	.word	0x01220122
 8008bac:	006b00ee 	.word	0x006b00ee
 8008bb0:	04120412 	.word	0x04120412
 8008bb4:	041200f1 	.word	0x041200f1
 8008bb8:	033e031e 	.word	0x033e031e
 8008bbc:	00f80372 	.word	0x00f80372
 8008bc0:	03830412 	.word	0x03830412
 8008bc4:	03a60412 	.word	0x03a60412
 8008bc8:	04120412 	.word	0x04120412
 8008bcc:	03be      	.short	0x03be
 8008bce:	461d      	mov	r5, r3
 8008bd0:	e773      	b.n	8008aba <_svfprintf_r+0x76>
 8008bd2:	aa21      	add	r2, sp, #132	; 0x84
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	4650      	mov	r0, sl
 8008bd8:	f002 fc70 	bl	800b4bc <__ssprint_r>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	f040 868e 	bne.w	80098fe <_svfprintf_r+0xeba>
 8008be2:	ac2e      	add	r4, sp, #184	; 0xb8
 8008be4:	e77e      	b.n	8008ae4 <_svfprintf_r+0xa0>
 8008be6:	2301      	movs	r3, #1
 8008be8:	222b      	movs	r2, #43	; 0x2b
 8008bea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bec:	e78b      	b.n	8008b06 <_svfprintf_r+0xc2>
 8008bee:	460f      	mov	r7, r1
 8008bf0:	e7fb      	b.n	8008bea <_svfprintf_r+0x1a6>
 8008bf2:	b10b      	cbz	r3, 8008bf8 <_svfprintf_r+0x1b4>
 8008bf4:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8008bf8:	06ae      	lsls	r6, r5, #26
 8008bfa:	f140 80a1 	bpl.w	8008d40 <_svfprintf_r+0x2fc>
 8008bfe:	3707      	adds	r7, #7
 8008c00:	f027 0707 	bic.w	r7, r7, #7
 8008c04:	f107 0308 	add.w	r3, r7, #8
 8008c08:	9308      	str	r3, [sp, #32]
 8008c0a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008c0e:	2e00      	cmp	r6, #0
 8008c10:	f177 0300 	sbcs.w	r3, r7, #0
 8008c14:	da05      	bge.n	8008c22 <_svfprintf_r+0x1de>
 8008c16:	232d      	movs	r3, #45	; 0x2d
 8008c18:	4276      	negs	r6, r6
 8008c1a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8008c1e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8008c22:	2301      	movs	r3, #1
 8008c24:	e2c7      	b.n	80091b6 <_svfprintf_r+0x772>
 8008c26:	b10b      	cbz	r3, 8008c2c <_svfprintf_r+0x1e8>
 8008c28:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8008c2c:	4ba0      	ldr	r3, [pc, #640]	; (8008eb0 <_svfprintf_r+0x46c>)
 8008c2e:	9315      	str	r3, [sp, #84]	; 0x54
 8008c30:	06ab      	lsls	r3, r5, #26
 8008c32:	f140 8336 	bpl.w	80092a2 <_svfprintf_r+0x85e>
 8008c36:	3707      	adds	r7, #7
 8008c38:	f027 0707 	bic.w	r7, r7, #7
 8008c3c:	f107 0308 	add.w	r3, r7, #8
 8008c40:	9308      	str	r3, [sp, #32]
 8008c42:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008c46:	07e8      	lsls	r0, r5, #31
 8008c48:	d50b      	bpl.n	8008c62 <_svfprintf_r+0x21e>
 8008c4a:	ea56 0307 	orrs.w	r3, r6, r7
 8008c4e:	d008      	beq.n	8008c62 <_svfprintf_r+0x21e>
 8008c50:	2330      	movs	r3, #48	; 0x30
 8008c52:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8008c56:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008c5a:	f045 0502 	orr.w	r5, r5, #2
 8008c5e:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8008c62:	2302      	movs	r3, #2
 8008c64:	e2a4      	b.n	80091b0 <_svfprintf_r+0x76c>
 8008c66:	2a00      	cmp	r2, #0
 8008c68:	d1bf      	bne.n	8008bea <_svfprintf_r+0x1a6>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	e7bc      	b.n	8008bea <_svfprintf_r+0x1a6>
 8008c70:	f045 0501 	orr.w	r5, r5, #1
 8008c74:	e7b9      	b.n	8008bea <_svfprintf_r+0x1a6>
 8008c76:	683e      	ldr	r6, [r7, #0]
 8008c78:	1d39      	adds	r1, r7, #4
 8008c7a:	2e00      	cmp	r6, #0
 8008c7c:	960c      	str	r6, [sp, #48]	; 0x30
 8008c7e:	dab6      	bge.n	8008bee <_svfprintf_r+0x1aa>
 8008c80:	460f      	mov	r7, r1
 8008c82:	4276      	negs	r6, r6
 8008c84:	960c      	str	r6, [sp, #48]	; 0x30
 8008c86:	f045 0504 	orr.w	r5, r5, #4
 8008c8a:	e7ae      	b.n	8008bea <_svfprintf_r+0x1a6>
 8008c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c8e:	1c4e      	adds	r6, r1, #1
 8008c90:	7809      	ldrb	r1, [r1, #0]
 8008c92:	292a      	cmp	r1, #42	; 0x2a
 8008c94:	9106      	str	r1, [sp, #24]
 8008c96:	d010      	beq.n	8008cba <_svfprintf_r+0x276>
 8008c98:	f04f 0b00 	mov.w	fp, #0
 8008c9c:	9609      	str	r6, [sp, #36]	; 0x24
 8008c9e:	9906      	ldr	r1, [sp, #24]
 8008ca0:	3930      	subs	r1, #48	; 0x30
 8008ca2:	2909      	cmp	r1, #9
 8008ca4:	f63f af33 	bhi.w	8008b0e <_svfprintf_r+0xca>
 8008ca8:	fb00 1b0b 	mla	fp, r0, fp, r1
 8008cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cae:	460e      	mov	r6, r1
 8008cb0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8008cb4:	9106      	str	r1, [sp, #24]
 8008cb6:	9609      	str	r6, [sp, #36]	; 0x24
 8008cb8:	e7f1      	b.n	8008c9e <_svfprintf_r+0x25a>
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	9609      	str	r6, [sp, #36]	; 0x24
 8008cbe:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8008cc2:	3704      	adds	r7, #4
 8008cc4:	e791      	b.n	8008bea <_svfprintf_r+0x1a6>
 8008cc6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8008cca:	e78e      	b.n	8008bea <_svfprintf_r+0x1a6>
 8008ccc:	2100      	movs	r1, #0
 8008cce:	910c      	str	r1, [sp, #48]	; 0x30
 8008cd0:	9906      	ldr	r1, [sp, #24]
 8008cd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008cd4:	3930      	subs	r1, #48	; 0x30
 8008cd6:	fb00 1106 	mla	r1, r0, r6, r1
 8008cda:	910c      	str	r1, [sp, #48]	; 0x30
 8008cdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cde:	460e      	mov	r6, r1
 8008ce0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8008ce4:	9106      	str	r1, [sp, #24]
 8008ce6:	9906      	ldr	r1, [sp, #24]
 8008ce8:	9609      	str	r6, [sp, #36]	; 0x24
 8008cea:	3930      	subs	r1, #48	; 0x30
 8008cec:	2909      	cmp	r1, #9
 8008cee:	d9ef      	bls.n	8008cd0 <_svfprintf_r+0x28c>
 8008cf0:	e70d      	b.n	8008b0e <_svfprintf_r+0xca>
 8008cf2:	f045 0508 	orr.w	r5, r5, #8
 8008cf6:	e778      	b.n	8008bea <_svfprintf_r+0x1a6>
 8008cf8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8008cfc:	e775      	b.n	8008bea <_svfprintf_r+0x1a6>
 8008cfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d00:	7809      	ldrb	r1, [r1, #0]
 8008d02:	296c      	cmp	r1, #108	; 0x6c
 8008d04:	d105      	bne.n	8008d12 <_svfprintf_r+0x2ce>
 8008d06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d08:	3101      	adds	r1, #1
 8008d0a:	9109      	str	r1, [sp, #36]	; 0x24
 8008d0c:	f045 0520 	orr.w	r5, r5, #32
 8008d10:	e76b      	b.n	8008bea <_svfprintf_r+0x1a6>
 8008d12:	f045 0510 	orr.w	r5, r5, #16
 8008d16:	e768      	b.n	8008bea <_svfprintf_r+0x1a6>
 8008d18:	2600      	movs	r6, #0
 8008d1a:	1d3b      	adds	r3, r7, #4
 8008d1c:	9308      	str	r3, [sp, #32]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8008d24:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8008d28:	f04f 0b01 	mov.w	fp, #1
 8008d2c:	4637      	mov	r7, r6
 8008d2e:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8008d32:	e11c      	b.n	8008f6e <_svfprintf_r+0x52a>
 8008d34:	b10b      	cbz	r3, 8008d3a <_svfprintf_r+0x2f6>
 8008d36:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8008d3a:	f045 0510 	orr.w	r5, r5, #16
 8008d3e:	e75b      	b.n	8008bf8 <_svfprintf_r+0x1b4>
 8008d40:	f015 0f10 	tst.w	r5, #16
 8008d44:	f107 0304 	add.w	r3, r7, #4
 8008d48:	d003      	beq.n	8008d52 <_svfprintf_r+0x30e>
 8008d4a:	683e      	ldr	r6, [r7, #0]
 8008d4c:	9308      	str	r3, [sp, #32]
 8008d4e:	17f7      	asrs	r7, r6, #31
 8008d50:	e75d      	b.n	8008c0e <_svfprintf_r+0x1ca>
 8008d52:	683e      	ldr	r6, [r7, #0]
 8008d54:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d58:	9308      	str	r3, [sp, #32]
 8008d5a:	bf18      	it	ne
 8008d5c:	b236      	sxthne	r6, r6
 8008d5e:	e7f6      	b.n	8008d4e <_svfprintf_r+0x30a>
 8008d60:	b10b      	cbz	r3, 8008d66 <_svfprintf_r+0x322>
 8008d62:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8008d66:	3707      	adds	r7, #7
 8008d68:	f027 0707 	bic.w	r7, r7, #7
 8008d6c:	f107 0308 	add.w	r3, r7, #8
 8008d70:	9308      	str	r3, [sp, #32]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	f04f 32ff 	mov.w	r2, #4294967295
 8008d78:	930d      	str	r3, [sp, #52]	; 0x34
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008d7e:	930e      	str	r3, [sp, #56]	; 0x38
 8008d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d82:	4638      	mov	r0, r7
 8008d84:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8008d88:	4631      	mov	r1, r6
 8008d8a:	4b4a      	ldr	r3, [pc, #296]	; (8008eb4 <_svfprintf_r+0x470>)
 8008d8c:	f7f7 fe3a 	bl	8000a04 <__aeabi_dcmpun>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	f040 85dc 	bne.w	800994e <_svfprintf_r+0xf0a>
 8008d96:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9a:	4b46      	ldr	r3, [pc, #280]	; (8008eb4 <_svfprintf_r+0x470>)
 8008d9c:	4638      	mov	r0, r7
 8008d9e:	4631      	mov	r1, r6
 8008da0:	f7f7 fe12 	bl	80009c8 <__aeabi_dcmple>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	f040 85d2 	bne.w	800994e <_svfprintf_r+0xf0a>
 8008daa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dae:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008db0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008db2:	f7f7 fdff 	bl	80009b4 <__aeabi_dcmplt>
 8008db6:	b110      	cbz	r0, 8008dbe <_svfprintf_r+0x37a>
 8008db8:	232d      	movs	r3, #45	; 0x2d
 8008dba:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8008dbe:	4b3e      	ldr	r3, [pc, #248]	; (8008eb8 <_svfprintf_r+0x474>)
 8008dc0:	4a3e      	ldr	r2, [pc, #248]	; (8008ebc <_svfprintf_r+0x478>)
 8008dc2:	9906      	ldr	r1, [sp, #24]
 8008dc4:	f04f 0b03 	mov.w	fp, #3
 8008dc8:	2947      	cmp	r1, #71	; 0x47
 8008dca:	bfcc      	ite	gt
 8008dcc:	4690      	movgt	r8, r2
 8008dce:	4698      	movle	r8, r3
 8008dd0:	2600      	movs	r6, #0
 8008dd2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8008dd6:	4637      	mov	r7, r6
 8008dd8:	e0c9      	b.n	8008f6e <_svfprintf_r+0x52a>
 8008dda:	f1bb 3fff 	cmp.w	fp, #4294967295
 8008dde:	d026      	beq.n	8008e2e <_svfprintf_r+0x3ea>
 8008de0:	9b06      	ldr	r3, [sp, #24]
 8008de2:	f023 0320 	bic.w	r3, r3, #32
 8008de6:	2b47      	cmp	r3, #71	; 0x47
 8008de8:	d104      	bne.n	8008df4 <_svfprintf_r+0x3b0>
 8008dea:	f1bb 0f00 	cmp.w	fp, #0
 8008dee:	bf08      	it	eq
 8008df0:	f04f 0b01 	moveq.w	fp, #1
 8008df4:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8008df8:	9317      	str	r3, [sp, #92]	; 0x5c
 8008dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dfc:	1e1f      	subs	r7, r3, #0
 8008dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e00:	bfa8      	it	ge
 8008e02:	9710      	strge	r7, [sp, #64]	; 0x40
 8008e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e06:	bfbd      	ittte	lt
 8008e08:	463b      	movlt	r3, r7
 8008e0a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008e0e:	9310      	strlt	r3, [sp, #64]	; 0x40
 8008e10:	2300      	movge	r3, #0
 8008e12:	bfb8      	it	lt
 8008e14:	232d      	movlt	r3, #45	; 0x2d
 8008e16:	9316      	str	r3, [sp, #88]	; 0x58
 8008e18:	9b06      	ldr	r3, [sp, #24]
 8008e1a:	f023 0720 	bic.w	r7, r3, #32
 8008e1e:	2f46      	cmp	r7, #70	; 0x46
 8008e20:	d008      	beq.n	8008e34 <_svfprintf_r+0x3f0>
 8008e22:	2f45      	cmp	r7, #69	; 0x45
 8008e24:	d142      	bne.n	8008eac <_svfprintf_r+0x468>
 8008e26:	f10b 0601 	add.w	r6, fp, #1
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e004      	b.n	8008e38 <_svfprintf_r+0x3f4>
 8008e2e:	f04f 0b06 	mov.w	fp, #6
 8008e32:	e7df      	b.n	8008df4 <_svfprintf_r+0x3b0>
 8008e34:	465e      	mov	r6, fp
 8008e36:	2303      	movs	r3, #3
 8008e38:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e3a:	9204      	str	r2, [sp, #16]
 8008e3c:	aa1c      	add	r2, sp, #112	; 0x70
 8008e3e:	9203      	str	r2, [sp, #12]
 8008e40:	aa1b      	add	r2, sp, #108	; 0x6c
 8008e42:	9202      	str	r2, [sp, #8]
 8008e44:	e88d 0048 	stmia.w	sp, {r3, r6}
 8008e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e4c:	4650      	mov	r0, sl
 8008e4e:	f000 fe8f 	bl	8009b70 <_dtoa_r>
 8008e52:	2f47      	cmp	r7, #71	; 0x47
 8008e54:	4680      	mov	r8, r0
 8008e56:	d102      	bne.n	8008e5e <_svfprintf_r+0x41a>
 8008e58:	07e8      	lsls	r0, r5, #31
 8008e5a:	f140 8585 	bpl.w	8009968 <_svfprintf_r+0xf24>
 8008e5e:	eb08 0306 	add.w	r3, r8, r6
 8008e62:	2f46      	cmp	r7, #70	; 0x46
 8008e64:	9307      	str	r3, [sp, #28]
 8008e66:	d111      	bne.n	8008e8c <_svfprintf_r+0x448>
 8008e68:	f898 3000 	ldrb.w	r3, [r8]
 8008e6c:	2b30      	cmp	r3, #48	; 0x30
 8008e6e:	d109      	bne.n	8008e84 <_svfprintf_r+0x440>
 8008e70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e74:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008e76:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008e78:	f7f7 fd92 	bl	80009a0 <__aeabi_dcmpeq>
 8008e7c:	b910      	cbnz	r0, 8008e84 <_svfprintf_r+0x440>
 8008e7e:	f1c6 0601 	rsb	r6, r6, #1
 8008e82:	961b      	str	r6, [sp, #108]	; 0x6c
 8008e84:	9a07      	ldr	r2, [sp, #28]
 8008e86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e88:	441a      	add	r2, r3
 8008e8a:	9207      	str	r2, [sp, #28]
 8008e8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e90:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008e92:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008e94:	f7f7 fd84 	bl	80009a0 <__aeabi_dcmpeq>
 8008e98:	b990      	cbnz	r0, 8008ec0 <_svfprintf_r+0x47c>
 8008e9a:	2230      	movs	r2, #48	; 0x30
 8008e9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e9e:	9907      	ldr	r1, [sp, #28]
 8008ea0:	4299      	cmp	r1, r3
 8008ea2:	d90f      	bls.n	8008ec4 <_svfprintf_r+0x480>
 8008ea4:	1c59      	adds	r1, r3, #1
 8008ea6:	911f      	str	r1, [sp, #124]	; 0x7c
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e7f7      	b.n	8008e9c <_svfprintf_r+0x458>
 8008eac:	465e      	mov	r6, fp
 8008eae:	e7bc      	b.n	8008e2a <_svfprintf_r+0x3e6>
 8008eb0:	08017b7c 	.word	0x08017b7c
 8008eb4:	7fefffff 	.word	0x7fefffff
 8008eb8:	08017b70 	.word	0x08017b70
 8008ebc:	08017e46 	.word	0x08017e46
 8008ec0:	9b07      	ldr	r3, [sp, #28]
 8008ec2:	931f      	str	r3, [sp, #124]	; 0x7c
 8008ec4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ec6:	2f47      	cmp	r7, #71	; 0x47
 8008ec8:	eba3 0308 	sub.w	r3, r3, r8
 8008ecc:	9307      	str	r3, [sp, #28]
 8008ece:	f040 8100 	bne.w	80090d2 <_svfprintf_r+0x68e>
 8008ed2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ed4:	1cd9      	adds	r1, r3, #3
 8008ed6:	db02      	blt.n	8008ede <_svfprintf_r+0x49a>
 8008ed8:	459b      	cmp	fp, r3
 8008eda:	f280 8126 	bge.w	800912a <_svfprintf_r+0x6e6>
 8008ede:	9b06      	ldr	r3, [sp, #24]
 8008ee0:	3b02      	subs	r3, #2
 8008ee2:	9306      	str	r3, [sp, #24]
 8008ee4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008ee6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8008eea:	1e53      	subs	r3, r2, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bfa8      	it	ge
 8008ef0:	222b      	movge	r2, #43	; 0x2b
 8008ef2:	931b      	str	r3, [sp, #108]	; 0x6c
 8008ef4:	bfbc      	itt	lt
 8008ef6:	f1c2 0301 	rsblt	r3, r2, #1
 8008efa:	222d      	movlt	r2, #45	; 0x2d
 8008efc:	2b09      	cmp	r3, #9
 8008efe:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 8008f02:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8008f06:	f340 8100 	ble.w	800910a <_svfprintf_r+0x6c6>
 8008f0a:	260a      	movs	r6, #10
 8008f0c:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8008f10:	fb93 f0f6 	sdiv	r0, r3, r6
 8008f14:	fb06 3310 	mls	r3, r6, r0, r3
 8008f18:	2809      	cmp	r0, #9
 8008f1a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8008f1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f22:	f102 31ff 	add.w	r1, r2, #4294967295
 8008f26:	4603      	mov	r3, r0
 8008f28:	f300 80e8 	bgt.w	80090fc <_svfprintf_r+0x6b8>
 8008f2c:	3330      	adds	r3, #48	; 0x30
 8008f2e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008f32:	3a02      	subs	r2, #2
 8008f34:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8008f38:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8008f3c:	4282      	cmp	r2, r0
 8008f3e:	4619      	mov	r1, r3
 8008f40:	f0c0 80de 	bcc.w	8009100 <_svfprintf_r+0x6bc>
 8008f44:	9a07      	ldr	r2, [sp, #28]
 8008f46:	ab1d      	add	r3, sp, #116	; 0x74
 8008f48:	1acb      	subs	r3, r1, r3
 8008f4a:	2a01      	cmp	r2, #1
 8008f4c:	9314      	str	r3, [sp, #80]	; 0x50
 8008f4e:	eb03 0b02 	add.w	fp, r3, r2
 8008f52:	dc02      	bgt.n	8008f5a <_svfprintf_r+0x516>
 8008f54:	f015 0701 	ands.w	r7, r5, #1
 8008f58:	d002      	beq.n	8008f60 <_svfprintf_r+0x51c>
 8008f5a:	2700      	movs	r7, #0
 8008f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5e:	449b      	add	fp, r3
 8008f60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f62:	b113      	cbz	r3, 8008f6a <_svfprintf_r+0x526>
 8008f64:	232d      	movs	r3, #45	; 0x2d
 8008f66:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8008f6a:	2600      	movs	r6, #0
 8008f6c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008f6e:	455e      	cmp	r6, fp
 8008f70:	4633      	mov	r3, r6
 8008f72:	bfb8      	it	lt
 8008f74:	465b      	movlt	r3, fp
 8008f76:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f78:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8008f7c:	b113      	cbz	r3, 8008f84 <_svfprintf_r+0x540>
 8008f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f80:	3301      	adds	r3, #1
 8008f82:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f84:	f015 0302 	ands.w	r3, r5, #2
 8008f88:	9316      	str	r3, [sp, #88]	; 0x58
 8008f8a:	bf1e      	ittt	ne
 8008f8c:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8008f8e:	3302      	addne	r3, #2
 8008f90:	930f      	strne	r3, [sp, #60]	; 0x3c
 8008f92:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8008f96:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f98:	d118      	bne.n	8008fcc <_svfprintf_r+0x588>
 8008f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	9310      	str	r3, [sp, #64]	; 0x40
 8008fa4:	dd12      	ble.n	8008fcc <_svfprintf_r+0x588>
 8008fa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fa8:	2b10      	cmp	r3, #16
 8008faa:	4bab      	ldr	r3, [pc, #684]	; (8009258 <_svfprintf_r+0x814>)
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	f300 81d9 	bgt.w	8009364 <_svfprintf_r+0x920>
 8008fb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fb6:	6063      	str	r3, [r4, #4]
 8008fb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fba:	4413      	add	r3, r2
 8008fbc:	9323      	str	r3, [sp, #140]	; 0x8c
 8008fbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	2b07      	cmp	r3, #7
 8008fc4:	9322      	str	r3, [sp, #136]	; 0x88
 8008fc6:	f300 81e6 	bgt.w	8009396 <_svfprintf_r+0x952>
 8008fca:	3408      	adds	r4, #8
 8008fcc:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8008fd0:	b173      	cbz	r3, 8008ff0 <_svfprintf_r+0x5ac>
 8008fd2:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8008fd6:	6023      	str	r3, [r4, #0]
 8008fd8:	2301      	movs	r3, #1
 8008fda:	6063      	str	r3, [r4, #4]
 8008fdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fde:	3301      	adds	r3, #1
 8008fe0:	9323      	str	r3, [sp, #140]	; 0x8c
 8008fe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	2b07      	cmp	r3, #7
 8008fe8:	9322      	str	r3, [sp, #136]	; 0x88
 8008fea:	f300 81de 	bgt.w	80093aa <_svfprintf_r+0x966>
 8008fee:	3408      	adds	r4, #8
 8008ff0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ff2:	b16b      	cbz	r3, 8009010 <_svfprintf_r+0x5cc>
 8008ff4:	ab1a      	add	r3, sp, #104	; 0x68
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	6063      	str	r3, [r4, #4]
 8008ffc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ffe:	3302      	adds	r3, #2
 8009000:	9323      	str	r3, [sp, #140]	; 0x8c
 8009002:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009004:	3301      	adds	r3, #1
 8009006:	2b07      	cmp	r3, #7
 8009008:	9322      	str	r3, [sp, #136]	; 0x88
 800900a:	f300 81d8 	bgt.w	80093be <_svfprintf_r+0x97a>
 800900e:	3408      	adds	r4, #8
 8009010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009012:	2b80      	cmp	r3, #128	; 0x80
 8009014:	d118      	bne.n	8009048 <_svfprintf_r+0x604>
 8009016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009018:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800901a:	1a9b      	subs	r3, r3, r2
 800901c:	2b00      	cmp	r3, #0
 800901e:	9310      	str	r3, [sp, #64]	; 0x40
 8009020:	dd12      	ble.n	8009048 <_svfprintf_r+0x604>
 8009022:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009024:	2b10      	cmp	r3, #16
 8009026:	4b8d      	ldr	r3, [pc, #564]	; (800925c <_svfprintf_r+0x818>)
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	f300 81d2 	bgt.w	80093d2 <_svfprintf_r+0x98e>
 800902e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009030:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009032:	6063      	str	r3, [r4, #4]
 8009034:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009036:	4413      	add	r3, r2
 8009038:	9323      	str	r3, [sp, #140]	; 0x8c
 800903a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800903c:	3301      	adds	r3, #1
 800903e:	2b07      	cmp	r3, #7
 8009040:	9322      	str	r3, [sp, #136]	; 0x88
 8009042:	f300 81df 	bgt.w	8009404 <_svfprintf_r+0x9c0>
 8009046:	3408      	adds	r4, #8
 8009048:	eba6 060b 	sub.w	r6, r6, fp
 800904c:	2e00      	cmp	r6, #0
 800904e:	dd0f      	ble.n	8009070 <_svfprintf_r+0x62c>
 8009050:	4b82      	ldr	r3, [pc, #520]	; (800925c <_svfprintf_r+0x818>)
 8009052:	2e10      	cmp	r6, #16
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	f300 81df 	bgt.w	8009418 <_svfprintf_r+0x9d4>
 800905a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800905c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800905e:	3301      	adds	r3, #1
 8009060:	6066      	str	r6, [r4, #4]
 8009062:	2b07      	cmp	r3, #7
 8009064:	4406      	add	r6, r0
 8009066:	9623      	str	r6, [sp, #140]	; 0x8c
 8009068:	9322      	str	r3, [sp, #136]	; 0x88
 800906a:	f300 81ec 	bgt.w	8009446 <_svfprintf_r+0xa02>
 800906e:	3408      	adds	r4, #8
 8009070:	05eb      	lsls	r3, r5, #23
 8009072:	f100 81f2 	bmi.w	800945a <_svfprintf_r+0xa16>
 8009076:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009078:	e884 0900 	stmia.w	r4, {r8, fp}
 800907c:	445b      	add	r3, fp
 800907e:	9323      	str	r3, [sp, #140]	; 0x8c
 8009080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009082:	3301      	adds	r3, #1
 8009084:	2b07      	cmp	r3, #7
 8009086:	9322      	str	r3, [sp, #136]	; 0x88
 8009088:	f340 8419 	ble.w	80098be <_svfprintf_r+0xe7a>
 800908c:	aa21      	add	r2, sp, #132	; 0x84
 800908e:	4649      	mov	r1, r9
 8009090:	4650      	mov	r0, sl
 8009092:	f002 fa13 	bl	800b4bc <__ssprint_r>
 8009096:	2800      	cmp	r0, #0
 8009098:	f040 8431 	bne.w	80098fe <_svfprintf_r+0xeba>
 800909c:	ac2e      	add	r4, sp, #184	; 0xb8
 800909e:	076b      	lsls	r3, r5, #29
 80090a0:	f100 8410 	bmi.w	80098c4 <_svfprintf_r+0xe80>
 80090a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80090aa:	428a      	cmp	r2, r1
 80090ac:	bfac      	ite	ge
 80090ae:	189b      	addge	r3, r3, r2
 80090b0:	185b      	addlt	r3, r3, r1
 80090b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80090b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090b6:	b13b      	cbz	r3, 80090c8 <_svfprintf_r+0x684>
 80090b8:	aa21      	add	r2, sp, #132	; 0x84
 80090ba:	4649      	mov	r1, r9
 80090bc:	4650      	mov	r0, sl
 80090be:	f002 f9fd 	bl	800b4bc <__ssprint_r>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	f040 841b 	bne.w	80098fe <_svfprintf_r+0xeba>
 80090c8:	2300      	movs	r3, #0
 80090ca:	9f08      	ldr	r7, [sp, #32]
 80090cc:	9322      	str	r3, [sp, #136]	; 0x88
 80090ce:	ac2e      	add	r4, sp, #184	; 0xb8
 80090d0:	e4f2      	b.n	8008ab8 <_svfprintf_r+0x74>
 80090d2:	9b06      	ldr	r3, [sp, #24]
 80090d4:	2b65      	cmp	r3, #101	; 0x65
 80090d6:	f77f af05 	ble.w	8008ee4 <_svfprintf_r+0x4a0>
 80090da:	9b06      	ldr	r3, [sp, #24]
 80090dc:	2b66      	cmp	r3, #102	; 0x66
 80090de:	d124      	bne.n	800912a <_svfprintf_r+0x6e6>
 80090e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	dd19      	ble.n	800911a <_svfprintf_r+0x6d6>
 80090e6:	f1bb 0f00 	cmp.w	fp, #0
 80090ea:	d101      	bne.n	80090f0 <_svfprintf_r+0x6ac>
 80090ec:	07ea      	lsls	r2, r5, #31
 80090ee:	d502      	bpl.n	80090f6 <_svfprintf_r+0x6b2>
 80090f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090f2:	4413      	add	r3, r2
 80090f4:	445b      	add	r3, fp
 80090f6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80090f8:	469b      	mov	fp, r3
 80090fa:	e731      	b.n	8008f60 <_svfprintf_r+0x51c>
 80090fc:	460a      	mov	r2, r1
 80090fe:	e707      	b.n	8008f10 <_svfprintf_r+0x4cc>
 8009100:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009104:	f803 1b01 	strb.w	r1, [r3], #1
 8009108:	e718      	b.n	8008f3c <_svfprintf_r+0x4f8>
 800910a:	2230      	movs	r2, #48	; 0x30
 800910c:	4413      	add	r3, r2
 800910e:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8009112:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8009116:	a91e      	add	r1, sp, #120	; 0x78
 8009118:	e714      	b.n	8008f44 <_svfprintf_r+0x500>
 800911a:	f1bb 0f00 	cmp.w	fp, #0
 800911e:	d101      	bne.n	8009124 <_svfprintf_r+0x6e0>
 8009120:	07eb      	lsls	r3, r5, #31
 8009122:	d515      	bpl.n	8009150 <_svfprintf_r+0x70c>
 8009124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009126:	3301      	adds	r3, #1
 8009128:	e7e4      	b.n	80090f4 <_svfprintf_r+0x6b0>
 800912a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800912c:	9b07      	ldr	r3, [sp, #28]
 800912e:	429a      	cmp	r2, r3
 8009130:	db06      	blt.n	8009140 <_svfprintf_r+0x6fc>
 8009132:	07ef      	lsls	r7, r5, #31
 8009134:	d50e      	bpl.n	8009154 <_svfprintf_r+0x710>
 8009136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009138:	4413      	add	r3, r2
 800913a:	2267      	movs	r2, #103	; 0x67
 800913c:	9206      	str	r2, [sp, #24]
 800913e:	e7da      	b.n	80090f6 <_svfprintf_r+0x6b2>
 8009140:	9b07      	ldr	r3, [sp, #28]
 8009142:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009144:	2a00      	cmp	r2, #0
 8009146:	440b      	add	r3, r1
 8009148:	dcf7      	bgt.n	800913a <_svfprintf_r+0x6f6>
 800914a:	f1c2 0201 	rsb	r2, r2, #1
 800914e:	e7f3      	b.n	8009138 <_svfprintf_r+0x6f4>
 8009150:	2301      	movs	r3, #1
 8009152:	e7d0      	b.n	80090f6 <_svfprintf_r+0x6b2>
 8009154:	4613      	mov	r3, r2
 8009156:	e7f0      	b.n	800913a <_svfprintf_r+0x6f6>
 8009158:	b10b      	cbz	r3, 800915e <_svfprintf_r+0x71a>
 800915a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800915e:	f015 0f20 	tst.w	r5, #32
 8009162:	f107 0304 	add.w	r3, r7, #4
 8009166:	d008      	beq.n	800917a <_svfprintf_r+0x736>
 8009168:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	17ce      	asrs	r6, r1, #31
 800916e:	4608      	mov	r0, r1
 8009170:	4631      	mov	r1, r6
 8009172:	e9c2 0100 	strd	r0, r1, [r2]
 8009176:	461f      	mov	r7, r3
 8009178:	e49e      	b.n	8008ab8 <_svfprintf_r+0x74>
 800917a:	06ee      	lsls	r6, r5, #27
 800917c:	d503      	bpl.n	8009186 <_svfprintf_r+0x742>
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009182:	6011      	str	r1, [r2, #0]
 8009184:	e7f7      	b.n	8009176 <_svfprintf_r+0x732>
 8009186:	0668      	lsls	r0, r5, #25
 8009188:	d5f9      	bpl.n	800917e <_svfprintf_r+0x73a>
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8009190:	8011      	strh	r1, [r2, #0]
 8009192:	e7f0      	b.n	8009176 <_svfprintf_r+0x732>
 8009194:	f045 0510 	orr.w	r5, r5, #16
 8009198:	f015 0320 	ands.w	r3, r5, #32
 800919c:	d022      	beq.n	80091e4 <_svfprintf_r+0x7a0>
 800919e:	3707      	adds	r7, #7
 80091a0:	f027 0707 	bic.w	r7, r7, #7
 80091a4:	f107 0308 	add.w	r3, r7, #8
 80091a8:	9308      	str	r3, [sp, #32]
 80091aa:	e9d7 6700 	ldrd	r6, r7, [r7]
 80091ae:	2300      	movs	r3, #0
 80091b0:	2200      	movs	r2, #0
 80091b2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80091b6:	f1bb 3fff 	cmp.w	fp, #4294967295
 80091ba:	f000 83db 	beq.w	8009974 <_svfprintf_r+0xf30>
 80091be:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80091c2:	920f      	str	r2, [sp, #60]	; 0x3c
 80091c4:	ea56 0207 	orrs.w	r2, r6, r7
 80091c8:	f040 83d9 	bne.w	800997e <_svfprintf_r+0xf3a>
 80091cc:	f1bb 0f00 	cmp.w	fp, #0
 80091d0:	f000 80aa 	beq.w	8009328 <_svfprintf_r+0x8e4>
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d076      	beq.n	80092c6 <_svfprintf_r+0x882>
 80091d8:	2b02      	cmp	r3, #2
 80091da:	f000 8091 	beq.w	8009300 <_svfprintf_r+0x8bc>
 80091de:	2600      	movs	r6, #0
 80091e0:	2700      	movs	r7, #0
 80091e2:	e3d2      	b.n	800998a <_svfprintf_r+0xf46>
 80091e4:	1d3a      	adds	r2, r7, #4
 80091e6:	f015 0110 	ands.w	r1, r5, #16
 80091ea:	9208      	str	r2, [sp, #32]
 80091ec:	d002      	beq.n	80091f4 <_svfprintf_r+0x7b0>
 80091ee:	683e      	ldr	r6, [r7, #0]
 80091f0:	2700      	movs	r7, #0
 80091f2:	e7dd      	b.n	80091b0 <_svfprintf_r+0x76c>
 80091f4:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80091f8:	d0f9      	beq.n	80091ee <_svfprintf_r+0x7aa>
 80091fa:	883e      	ldrh	r6, [r7, #0]
 80091fc:	2700      	movs	r7, #0
 80091fe:	e7d6      	b.n	80091ae <_svfprintf_r+0x76a>
 8009200:	1d3b      	adds	r3, r7, #4
 8009202:	9308      	str	r3, [sp, #32]
 8009204:	2330      	movs	r3, #48	; 0x30
 8009206:	2278      	movs	r2, #120	; 0x78
 8009208:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800920c:	4b14      	ldr	r3, [pc, #80]	; (8009260 <_svfprintf_r+0x81c>)
 800920e:	683e      	ldr	r6, [r7, #0]
 8009210:	9315      	str	r3, [sp, #84]	; 0x54
 8009212:	2700      	movs	r7, #0
 8009214:	f045 0502 	orr.w	r5, r5, #2
 8009218:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800921c:	2302      	movs	r3, #2
 800921e:	9206      	str	r2, [sp, #24]
 8009220:	e7c6      	b.n	80091b0 <_svfprintf_r+0x76c>
 8009222:	2600      	movs	r6, #0
 8009224:	1d3b      	adds	r3, r7, #4
 8009226:	f1bb 3fff 	cmp.w	fp, #4294967295
 800922a:	9308      	str	r3, [sp, #32]
 800922c:	f8d7 8000 	ldr.w	r8, [r7]
 8009230:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8009234:	d00a      	beq.n	800924c <_svfprintf_r+0x808>
 8009236:	465a      	mov	r2, fp
 8009238:	4631      	mov	r1, r6
 800923a:	4640      	mov	r0, r8
 800923c:	f001 fca2 	bl	800ab84 <memchr>
 8009240:	2800      	cmp	r0, #0
 8009242:	f000 808d 	beq.w	8009360 <_svfprintf_r+0x91c>
 8009246:	eba0 0b08 	sub.w	fp, r0, r8
 800924a:	e5c4      	b.n	8008dd6 <_svfprintf_r+0x392>
 800924c:	4640      	mov	r0, r8
 800924e:	f7f6 ff7f 	bl	8000150 <strlen>
 8009252:	4683      	mov	fp, r0
 8009254:	e5bf      	b.n	8008dd6 <_svfprintf_r+0x392>
 8009256:	bf00      	nop
 8009258:	08017ba0 	.word	0x08017ba0
 800925c:	08017bb0 	.word	0x08017bb0
 8009260:	08017b8d 	.word	0x08017b8d
 8009264:	f045 0510 	orr.w	r5, r5, #16
 8009268:	06a9      	lsls	r1, r5, #26
 800926a:	d509      	bpl.n	8009280 <_svfprintf_r+0x83c>
 800926c:	3707      	adds	r7, #7
 800926e:	f027 0707 	bic.w	r7, r7, #7
 8009272:	f107 0308 	add.w	r3, r7, #8
 8009276:	9308      	str	r3, [sp, #32]
 8009278:	e9d7 6700 	ldrd	r6, r7, [r7]
 800927c:	2301      	movs	r3, #1
 800927e:	e797      	b.n	80091b0 <_svfprintf_r+0x76c>
 8009280:	1d3b      	adds	r3, r7, #4
 8009282:	f015 0f10 	tst.w	r5, #16
 8009286:	9308      	str	r3, [sp, #32]
 8009288:	d001      	beq.n	800928e <_svfprintf_r+0x84a>
 800928a:	683e      	ldr	r6, [r7, #0]
 800928c:	e002      	b.n	8009294 <_svfprintf_r+0x850>
 800928e:	066a      	lsls	r2, r5, #25
 8009290:	d5fb      	bpl.n	800928a <_svfprintf_r+0x846>
 8009292:	883e      	ldrh	r6, [r7, #0]
 8009294:	2700      	movs	r7, #0
 8009296:	e7f1      	b.n	800927c <_svfprintf_r+0x838>
 8009298:	b10b      	cbz	r3, 800929e <_svfprintf_r+0x85a>
 800929a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800929e:	4ba3      	ldr	r3, [pc, #652]	; (800952c <_svfprintf_r+0xae8>)
 80092a0:	e4c5      	b.n	8008c2e <_svfprintf_r+0x1ea>
 80092a2:	1d3b      	adds	r3, r7, #4
 80092a4:	f015 0f10 	tst.w	r5, #16
 80092a8:	9308      	str	r3, [sp, #32]
 80092aa:	d001      	beq.n	80092b0 <_svfprintf_r+0x86c>
 80092ac:	683e      	ldr	r6, [r7, #0]
 80092ae:	e002      	b.n	80092b6 <_svfprintf_r+0x872>
 80092b0:	066e      	lsls	r6, r5, #25
 80092b2:	d5fb      	bpl.n	80092ac <_svfprintf_r+0x868>
 80092b4:	883e      	ldrh	r6, [r7, #0]
 80092b6:	2700      	movs	r7, #0
 80092b8:	e4c5      	b.n	8008c46 <_svfprintf_r+0x202>
 80092ba:	4643      	mov	r3, r8
 80092bc:	e366      	b.n	800998c <_svfprintf_r+0xf48>
 80092be:	2f00      	cmp	r7, #0
 80092c0:	bf08      	it	eq
 80092c2:	2e0a      	cmpeq	r6, #10
 80092c4:	d205      	bcs.n	80092d2 <_svfprintf_r+0x88e>
 80092c6:	3630      	adds	r6, #48	; 0x30
 80092c8:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80092cc:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80092d0:	e377      	b.n	80099c2 <_svfprintf_r+0xf7e>
 80092d2:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80092d6:	4630      	mov	r0, r6
 80092d8:	4639      	mov	r1, r7
 80092da:	220a      	movs	r2, #10
 80092dc:	2300      	movs	r3, #0
 80092de:	f7f7 ff2f 	bl	8001140 <__aeabi_uldivmod>
 80092e2:	3230      	adds	r2, #48	; 0x30
 80092e4:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80092e8:	2300      	movs	r3, #0
 80092ea:	4630      	mov	r0, r6
 80092ec:	4639      	mov	r1, r7
 80092ee:	220a      	movs	r2, #10
 80092f0:	f7f7 ff26 	bl	8001140 <__aeabi_uldivmod>
 80092f4:	4606      	mov	r6, r0
 80092f6:	460f      	mov	r7, r1
 80092f8:	ea56 0307 	orrs.w	r3, r6, r7
 80092fc:	d1eb      	bne.n	80092d6 <_svfprintf_r+0x892>
 80092fe:	e360      	b.n	80099c2 <_svfprintf_r+0xf7e>
 8009300:	2600      	movs	r6, #0
 8009302:	2700      	movs	r7, #0
 8009304:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8009308:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800930a:	f006 030f 	and.w	r3, r6, #15
 800930e:	5cd3      	ldrb	r3, [r2, r3]
 8009310:	093a      	lsrs	r2, r7, #4
 8009312:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009316:	0933      	lsrs	r3, r6, #4
 8009318:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800931c:	461e      	mov	r6, r3
 800931e:	4617      	mov	r7, r2
 8009320:	ea56 0307 	orrs.w	r3, r6, r7
 8009324:	d1f0      	bne.n	8009308 <_svfprintf_r+0x8c4>
 8009326:	e34c      	b.n	80099c2 <_svfprintf_r+0xf7e>
 8009328:	b93b      	cbnz	r3, 800933a <_svfprintf_r+0x8f6>
 800932a:	07ea      	lsls	r2, r5, #31
 800932c:	d505      	bpl.n	800933a <_svfprintf_r+0x8f6>
 800932e:	2330      	movs	r3, #48	; 0x30
 8009330:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8009334:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8009338:	e343      	b.n	80099c2 <_svfprintf_r+0xf7e>
 800933a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800933e:	e340      	b.n	80099c2 <_svfprintf_r+0xf7e>
 8009340:	b10b      	cbz	r3, 8009346 <_svfprintf_r+0x902>
 8009342:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8009346:	9b06      	ldr	r3, [sp, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 82f7 	beq.w	800993c <_svfprintf_r+0xef8>
 800934e:	2600      	movs	r6, #0
 8009350:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009354:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8009358:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800935c:	9708      	str	r7, [sp, #32]
 800935e:	e4e3      	b.n	8008d28 <_svfprintf_r+0x2e4>
 8009360:	4606      	mov	r6, r0
 8009362:	e538      	b.n	8008dd6 <_svfprintf_r+0x392>
 8009364:	2310      	movs	r3, #16
 8009366:	6063      	str	r3, [r4, #4]
 8009368:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800936a:	3310      	adds	r3, #16
 800936c:	9323      	str	r3, [sp, #140]	; 0x8c
 800936e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009370:	3301      	adds	r3, #1
 8009372:	2b07      	cmp	r3, #7
 8009374:	9322      	str	r3, [sp, #136]	; 0x88
 8009376:	dc04      	bgt.n	8009382 <_svfprintf_r+0x93e>
 8009378:	3408      	adds	r4, #8
 800937a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800937c:	3b10      	subs	r3, #16
 800937e:	9310      	str	r3, [sp, #64]	; 0x40
 8009380:	e611      	b.n	8008fa6 <_svfprintf_r+0x562>
 8009382:	aa21      	add	r2, sp, #132	; 0x84
 8009384:	4649      	mov	r1, r9
 8009386:	4650      	mov	r0, sl
 8009388:	f002 f898 	bl	800b4bc <__ssprint_r>
 800938c:	2800      	cmp	r0, #0
 800938e:	f040 82b6 	bne.w	80098fe <_svfprintf_r+0xeba>
 8009392:	ac2e      	add	r4, sp, #184	; 0xb8
 8009394:	e7f1      	b.n	800937a <_svfprintf_r+0x936>
 8009396:	aa21      	add	r2, sp, #132	; 0x84
 8009398:	4649      	mov	r1, r9
 800939a:	4650      	mov	r0, sl
 800939c:	f002 f88e 	bl	800b4bc <__ssprint_r>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	f040 82ac 	bne.w	80098fe <_svfprintf_r+0xeba>
 80093a6:	ac2e      	add	r4, sp, #184	; 0xb8
 80093a8:	e610      	b.n	8008fcc <_svfprintf_r+0x588>
 80093aa:	aa21      	add	r2, sp, #132	; 0x84
 80093ac:	4649      	mov	r1, r9
 80093ae:	4650      	mov	r0, sl
 80093b0:	f002 f884 	bl	800b4bc <__ssprint_r>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	f040 82a2 	bne.w	80098fe <_svfprintf_r+0xeba>
 80093ba:	ac2e      	add	r4, sp, #184	; 0xb8
 80093bc:	e618      	b.n	8008ff0 <_svfprintf_r+0x5ac>
 80093be:	aa21      	add	r2, sp, #132	; 0x84
 80093c0:	4649      	mov	r1, r9
 80093c2:	4650      	mov	r0, sl
 80093c4:	f002 f87a 	bl	800b4bc <__ssprint_r>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	f040 8298 	bne.w	80098fe <_svfprintf_r+0xeba>
 80093ce:	ac2e      	add	r4, sp, #184	; 0xb8
 80093d0:	e61e      	b.n	8009010 <_svfprintf_r+0x5cc>
 80093d2:	2310      	movs	r3, #16
 80093d4:	6063      	str	r3, [r4, #4]
 80093d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093d8:	3310      	adds	r3, #16
 80093da:	9323      	str	r3, [sp, #140]	; 0x8c
 80093dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093de:	3301      	adds	r3, #1
 80093e0:	2b07      	cmp	r3, #7
 80093e2:	9322      	str	r3, [sp, #136]	; 0x88
 80093e4:	dc04      	bgt.n	80093f0 <_svfprintf_r+0x9ac>
 80093e6:	3408      	adds	r4, #8
 80093e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093ea:	3b10      	subs	r3, #16
 80093ec:	9310      	str	r3, [sp, #64]	; 0x40
 80093ee:	e618      	b.n	8009022 <_svfprintf_r+0x5de>
 80093f0:	aa21      	add	r2, sp, #132	; 0x84
 80093f2:	4649      	mov	r1, r9
 80093f4:	4650      	mov	r0, sl
 80093f6:	f002 f861 	bl	800b4bc <__ssprint_r>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	f040 827f 	bne.w	80098fe <_svfprintf_r+0xeba>
 8009400:	ac2e      	add	r4, sp, #184	; 0xb8
 8009402:	e7f1      	b.n	80093e8 <_svfprintf_r+0x9a4>
 8009404:	aa21      	add	r2, sp, #132	; 0x84
 8009406:	4649      	mov	r1, r9
 8009408:	4650      	mov	r0, sl
 800940a:	f002 f857 	bl	800b4bc <__ssprint_r>
 800940e:	2800      	cmp	r0, #0
 8009410:	f040 8275 	bne.w	80098fe <_svfprintf_r+0xeba>
 8009414:	ac2e      	add	r4, sp, #184	; 0xb8
 8009416:	e617      	b.n	8009048 <_svfprintf_r+0x604>
 8009418:	2310      	movs	r3, #16
 800941a:	6063      	str	r3, [r4, #4]
 800941c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800941e:	3310      	adds	r3, #16
 8009420:	9323      	str	r3, [sp, #140]	; 0x8c
 8009422:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009424:	3301      	adds	r3, #1
 8009426:	2b07      	cmp	r3, #7
 8009428:	9322      	str	r3, [sp, #136]	; 0x88
 800942a:	dc02      	bgt.n	8009432 <_svfprintf_r+0x9ee>
 800942c:	3408      	adds	r4, #8
 800942e:	3e10      	subs	r6, #16
 8009430:	e60e      	b.n	8009050 <_svfprintf_r+0x60c>
 8009432:	aa21      	add	r2, sp, #132	; 0x84
 8009434:	4649      	mov	r1, r9
 8009436:	4650      	mov	r0, sl
 8009438:	f002 f840 	bl	800b4bc <__ssprint_r>
 800943c:	2800      	cmp	r0, #0
 800943e:	f040 825e 	bne.w	80098fe <_svfprintf_r+0xeba>
 8009442:	ac2e      	add	r4, sp, #184	; 0xb8
 8009444:	e7f3      	b.n	800942e <_svfprintf_r+0x9ea>
 8009446:	aa21      	add	r2, sp, #132	; 0x84
 8009448:	4649      	mov	r1, r9
 800944a:	4650      	mov	r0, sl
 800944c:	f002 f836 	bl	800b4bc <__ssprint_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	f040 8254 	bne.w	80098fe <_svfprintf_r+0xeba>
 8009456:	ac2e      	add	r4, sp, #184	; 0xb8
 8009458:	e60a      	b.n	8009070 <_svfprintf_r+0x62c>
 800945a:	9b06      	ldr	r3, [sp, #24]
 800945c:	2b65      	cmp	r3, #101	; 0x65
 800945e:	f340 81a9 	ble.w	80097b4 <_svfprintf_r+0xd70>
 8009462:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009466:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009468:	990e      	ldr	r1, [sp, #56]	; 0x38
 800946a:	f7f7 fa99 	bl	80009a0 <__aeabi_dcmpeq>
 800946e:	2800      	cmp	r0, #0
 8009470:	d062      	beq.n	8009538 <_svfprintf_r+0xaf4>
 8009472:	4b2f      	ldr	r3, [pc, #188]	; (8009530 <_svfprintf_r+0xaec>)
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	2301      	movs	r3, #1
 8009478:	6063      	str	r3, [r4, #4]
 800947a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800947c:	3301      	adds	r3, #1
 800947e:	9323      	str	r3, [sp, #140]	; 0x8c
 8009480:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009482:	3301      	adds	r3, #1
 8009484:	2b07      	cmp	r3, #7
 8009486:	9322      	str	r3, [sp, #136]	; 0x88
 8009488:	dc25      	bgt.n	80094d6 <_svfprintf_r+0xa92>
 800948a:	3408      	adds	r4, #8
 800948c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800948e:	9a07      	ldr	r2, [sp, #28]
 8009490:	4293      	cmp	r3, r2
 8009492:	db02      	blt.n	800949a <_svfprintf_r+0xa56>
 8009494:	07ee      	lsls	r6, r5, #31
 8009496:	f57f ae02 	bpl.w	800909e <_svfprintf_r+0x65a>
 800949a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800949c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800949e:	6023      	str	r3, [r4, #0]
 80094a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a2:	6063      	str	r3, [r4, #4]
 80094a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094a6:	4413      	add	r3, r2
 80094a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80094aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094ac:	3301      	adds	r3, #1
 80094ae:	2b07      	cmp	r3, #7
 80094b0:	9322      	str	r3, [sp, #136]	; 0x88
 80094b2:	dc1a      	bgt.n	80094ea <_svfprintf_r+0xaa6>
 80094b4:	3408      	adds	r4, #8
 80094b6:	9b07      	ldr	r3, [sp, #28]
 80094b8:	1e5e      	subs	r6, r3, #1
 80094ba:	2e00      	cmp	r6, #0
 80094bc:	f77f adef 	ble.w	800909e <_svfprintf_r+0x65a>
 80094c0:	f04f 0810 	mov.w	r8, #16
 80094c4:	4f1b      	ldr	r7, [pc, #108]	; (8009534 <_svfprintf_r+0xaf0>)
 80094c6:	2e10      	cmp	r6, #16
 80094c8:	6027      	str	r7, [r4, #0]
 80094ca:	dc18      	bgt.n	80094fe <_svfprintf_r+0xaba>
 80094cc:	6066      	str	r6, [r4, #4]
 80094ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094d0:	441e      	add	r6, r3
 80094d2:	9623      	str	r6, [sp, #140]	; 0x8c
 80094d4:	e5d4      	b.n	8009080 <_svfprintf_r+0x63c>
 80094d6:	aa21      	add	r2, sp, #132	; 0x84
 80094d8:	4649      	mov	r1, r9
 80094da:	4650      	mov	r0, sl
 80094dc:	f001 ffee 	bl	800b4bc <__ssprint_r>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	f040 820c 	bne.w	80098fe <_svfprintf_r+0xeba>
 80094e6:	ac2e      	add	r4, sp, #184	; 0xb8
 80094e8:	e7d0      	b.n	800948c <_svfprintf_r+0xa48>
 80094ea:	aa21      	add	r2, sp, #132	; 0x84
 80094ec:	4649      	mov	r1, r9
 80094ee:	4650      	mov	r0, sl
 80094f0:	f001 ffe4 	bl	800b4bc <__ssprint_r>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	f040 8202 	bne.w	80098fe <_svfprintf_r+0xeba>
 80094fa:	ac2e      	add	r4, sp, #184	; 0xb8
 80094fc:	e7db      	b.n	80094b6 <_svfprintf_r+0xa72>
 80094fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009500:	f8c4 8004 	str.w	r8, [r4, #4]
 8009504:	3310      	adds	r3, #16
 8009506:	9323      	str	r3, [sp, #140]	; 0x8c
 8009508:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800950a:	3301      	adds	r3, #1
 800950c:	2b07      	cmp	r3, #7
 800950e:	9322      	str	r3, [sp, #136]	; 0x88
 8009510:	dc02      	bgt.n	8009518 <_svfprintf_r+0xad4>
 8009512:	3408      	adds	r4, #8
 8009514:	3e10      	subs	r6, #16
 8009516:	e7d6      	b.n	80094c6 <_svfprintf_r+0xa82>
 8009518:	aa21      	add	r2, sp, #132	; 0x84
 800951a:	4649      	mov	r1, r9
 800951c:	4650      	mov	r0, sl
 800951e:	f001 ffcd 	bl	800b4bc <__ssprint_r>
 8009522:	2800      	cmp	r0, #0
 8009524:	f040 81eb 	bne.w	80098fe <_svfprintf_r+0xeba>
 8009528:	ac2e      	add	r4, sp, #184	; 0xb8
 800952a:	e7f3      	b.n	8009514 <_svfprintf_r+0xad0>
 800952c:	08017b8d 	.word	0x08017b8d
 8009530:	08017b9e 	.word	0x08017b9e
 8009534:	08017bb0 	.word	0x08017bb0
 8009538:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800953a:	2b00      	cmp	r3, #0
 800953c:	dc7a      	bgt.n	8009634 <_svfprintf_r+0xbf0>
 800953e:	4b9b      	ldr	r3, [pc, #620]	; (80097ac <_svfprintf_r+0xd68>)
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	2301      	movs	r3, #1
 8009544:	6063      	str	r3, [r4, #4]
 8009546:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009548:	3301      	adds	r3, #1
 800954a:	9323      	str	r3, [sp, #140]	; 0x8c
 800954c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800954e:	3301      	adds	r3, #1
 8009550:	2b07      	cmp	r3, #7
 8009552:	9322      	str	r3, [sp, #136]	; 0x88
 8009554:	dc44      	bgt.n	80095e0 <_svfprintf_r+0xb9c>
 8009556:	3408      	adds	r4, #8
 8009558:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800955a:	b923      	cbnz	r3, 8009566 <_svfprintf_r+0xb22>
 800955c:	9b07      	ldr	r3, [sp, #28]
 800955e:	b913      	cbnz	r3, 8009566 <_svfprintf_r+0xb22>
 8009560:	07e8      	lsls	r0, r5, #31
 8009562:	f57f ad9c 	bpl.w	800909e <_svfprintf_r+0x65a>
 8009566:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956e:	6063      	str	r3, [r4, #4]
 8009570:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009572:	4413      	add	r3, r2
 8009574:	9323      	str	r3, [sp, #140]	; 0x8c
 8009576:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009578:	3301      	adds	r3, #1
 800957a:	2b07      	cmp	r3, #7
 800957c:	9322      	str	r3, [sp, #136]	; 0x88
 800957e:	dc39      	bgt.n	80095f4 <_svfprintf_r+0xbb0>
 8009580:	f104 0308 	add.w	r3, r4, #8
 8009584:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009586:	2e00      	cmp	r6, #0
 8009588:	da19      	bge.n	80095be <_svfprintf_r+0xb7a>
 800958a:	2410      	movs	r4, #16
 800958c:	4f88      	ldr	r7, [pc, #544]	; (80097b0 <_svfprintf_r+0xd6c>)
 800958e:	4276      	negs	r6, r6
 8009590:	2e10      	cmp	r6, #16
 8009592:	601f      	str	r7, [r3, #0]
 8009594:	dc38      	bgt.n	8009608 <_svfprintf_r+0xbc4>
 8009596:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009598:	605e      	str	r6, [r3, #4]
 800959a:	4416      	add	r6, r2
 800959c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800959e:	9623      	str	r6, [sp, #140]	; 0x8c
 80095a0:	3201      	adds	r2, #1
 80095a2:	2a07      	cmp	r2, #7
 80095a4:	f103 0308 	add.w	r3, r3, #8
 80095a8:	9222      	str	r2, [sp, #136]	; 0x88
 80095aa:	dd08      	ble.n	80095be <_svfprintf_r+0xb7a>
 80095ac:	aa21      	add	r2, sp, #132	; 0x84
 80095ae:	4649      	mov	r1, r9
 80095b0:	4650      	mov	r0, sl
 80095b2:	f001 ff83 	bl	800b4bc <__ssprint_r>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f040 81a1 	bne.w	80098fe <_svfprintf_r+0xeba>
 80095bc:	ab2e      	add	r3, sp, #184	; 0xb8
 80095be:	9a07      	ldr	r2, [sp, #28]
 80095c0:	9907      	ldr	r1, [sp, #28]
 80095c2:	605a      	str	r2, [r3, #4]
 80095c4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80095c6:	f8c3 8000 	str.w	r8, [r3]
 80095ca:	440a      	add	r2, r1
 80095cc:	9223      	str	r2, [sp, #140]	; 0x8c
 80095ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80095d0:	3201      	adds	r2, #1
 80095d2:	2a07      	cmp	r2, #7
 80095d4:	9222      	str	r2, [sp, #136]	; 0x88
 80095d6:	f73f ad59 	bgt.w	800908c <_svfprintf_r+0x648>
 80095da:	f103 0408 	add.w	r4, r3, #8
 80095de:	e55e      	b.n	800909e <_svfprintf_r+0x65a>
 80095e0:	aa21      	add	r2, sp, #132	; 0x84
 80095e2:	4649      	mov	r1, r9
 80095e4:	4650      	mov	r0, sl
 80095e6:	f001 ff69 	bl	800b4bc <__ssprint_r>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	f040 8187 	bne.w	80098fe <_svfprintf_r+0xeba>
 80095f0:	ac2e      	add	r4, sp, #184	; 0xb8
 80095f2:	e7b1      	b.n	8009558 <_svfprintf_r+0xb14>
 80095f4:	aa21      	add	r2, sp, #132	; 0x84
 80095f6:	4649      	mov	r1, r9
 80095f8:	4650      	mov	r0, sl
 80095fa:	f001 ff5f 	bl	800b4bc <__ssprint_r>
 80095fe:	2800      	cmp	r0, #0
 8009600:	f040 817d 	bne.w	80098fe <_svfprintf_r+0xeba>
 8009604:	ab2e      	add	r3, sp, #184	; 0xb8
 8009606:	e7bd      	b.n	8009584 <_svfprintf_r+0xb40>
 8009608:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800960a:	605c      	str	r4, [r3, #4]
 800960c:	3210      	adds	r2, #16
 800960e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009610:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009612:	3201      	adds	r2, #1
 8009614:	2a07      	cmp	r2, #7
 8009616:	9222      	str	r2, [sp, #136]	; 0x88
 8009618:	dc02      	bgt.n	8009620 <_svfprintf_r+0xbdc>
 800961a:	3308      	adds	r3, #8
 800961c:	3e10      	subs	r6, #16
 800961e:	e7b7      	b.n	8009590 <_svfprintf_r+0xb4c>
 8009620:	aa21      	add	r2, sp, #132	; 0x84
 8009622:	4649      	mov	r1, r9
 8009624:	4650      	mov	r0, sl
 8009626:	f001 ff49 	bl	800b4bc <__ssprint_r>
 800962a:	2800      	cmp	r0, #0
 800962c:	f040 8167 	bne.w	80098fe <_svfprintf_r+0xeba>
 8009630:	ab2e      	add	r3, sp, #184	; 0xb8
 8009632:	e7f3      	b.n	800961c <_svfprintf_r+0xbd8>
 8009634:	9b07      	ldr	r3, [sp, #28]
 8009636:	42bb      	cmp	r3, r7
 8009638:	bfa8      	it	ge
 800963a:	463b      	movge	r3, r7
 800963c:	2b00      	cmp	r3, #0
 800963e:	461e      	mov	r6, r3
 8009640:	dd0b      	ble.n	800965a <_svfprintf_r+0xc16>
 8009642:	6063      	str	r3, [r4, #4]
 8009644:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009646:	f8c4 8000 	str.w	r8, [r4]
 800964a:	4433      	add	r3, r6
 800964c:	9323      	str	r3, [sp, #140]	; 0x8c
 800964e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009650:	3301      	adds	r3, #1
 8009652:	2b07      	cmp	r3, #7
 8009654:	9322      	str	r3, [sp, #136]	; 0x88
 8009656:	dc5f      	bgt.n	8009718 <_svfprintf_r+0xcd4>
 8009658:	3408      	adds	r4, #8
 800965a:	2e00      	cmp	r6, #0
 800965c:	bfb4      	ite	lt
 800965e:	463e      	movlt	r6, r7
 8009660:	1bbe      	subge	r6, r7, r6
 8009662:	2e00      	cmp	r6, #0
 8009664:	dd0f      	ble.n	8009686 <_svfprintf_r+0xc42>
 8009666:	f8df b148 	ldr.w	fp, [pc, #328]	; 80097b0 <_svfprintf_r+0xd6c>
 800966a:	2e10      	cmp	r6, #16
 800966c:	f8c4 b000 	str.w	fp, [r4]
 8009670:	dc5c      	bgt.n	800972c <_svfprintf_r+0xce8>
 8009672:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009674:	6066      	str	r6, [r4, #4]
 8009676:	441e      	add	r6, r3
 8009678:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800967a:	9623      	str	r6, [sp, #140]	; 0x8c
 800967c:	3301      	adds	r3, #1
 800967e:	2b07      	cmp	r3, #7
 8009680:	9322      	str	r3, [sp, #136]	; 0x88
 8009682:	dc6a      	bgt.n	800975a <_svfprintf_r+0xd16>
 8009684:	3408      	adds	r4, #8
 8009686:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009688:	9a07      	ldr	r2, [sp, #28]
 800968a:	4293      	cmp	r3, r2
 800968c:	db01      	blt.n	8009692 <_svfprintf_r+0xc4e>
 800968e:	07e9      	lsls	r1, r5, #31
 8009690:	d50d      	bpl.n	80096ae <_svfprintf_r+0xc6a>
 8009692:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800969a:	6063      	str	r3, [r4, #4]
 800969c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800969e:	4413      	add	r3, r2
 80096a0:	9323      	str	r3, [sp, #140]	; 0x8c
 80096a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096a4:	3301      	adds	r3, #1
 80096a6:	2b07      	cmp	r3, #7
 80096a8:	9322      	str	r3, [sp, #136]	; 0x88
 80096aa:	dc60      	bgt.n	800976e <_svfprintf_r+0xd2a>
 80096ac:	3408      	adds	r4, #8
 80096ae:	9b07      	ldr	r3, [sp, #28]
 80096b0:	9a07      	ldr	r2, [sp, #28]
 80096b2:	1bde      	subs	r6, r3, r7
 80096b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	429e      	cmp	r6, r3
 80096ba:	bfa8      	it	ge
 80096bc:	461e      	movge	r6, r3
 80096be:	2e00      	cmp	r6, #0
 80096c0:	dd0b      	ble.n	80096da <_svfprintf_r+0xc96>
 80096c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80096c4:	4447      	add	r7, r8
 80096c6:	4433      	add	r3, r6
 80096c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80096ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096cc:	6027      	str	r7, [r4, #0]
 80096ce:	3301      	adds	r3, #1
 80096d0:	2b07      	cmp	r3, #7
 80096d2:	6066      	str	r6, [r4, #4]
 80096d4:	9322      	str	r3, [sp, #136]	; 0x88
 80096d6:	dc54      	bgt.n	8009782 <_svfprintf_r+0xd3e>
 80096d8:	3408      	adds	r4, #8
 80096da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096dc:	9a07      	ldr	r2, [sp, #28]
 80096de:	2e00      	cmp	r6, #0
 80096e0:	eba2 0303 	sub.w	r3, r2, r3
 80096e4:	bfb4      	ite	lt
 80096e6:	461e      	movlt	r6, r3
 80096e8:	1b9e      	subge	r6, r3, r6
 80096ea:	2e00      	cmp	r6, #0
 80096ec:	f77f acd7 	ble.w	800909e <_svfprintf_r+0x65a>
 80096f0:	f04f 0810 	mov.w	r8, #16
 80096f4:	4f2e      	ldr	r7, [pc, #184]	; (80097b0 <_svfprintf_r+0xd6c>)
 80096f6:	2e10      	cmp	r6, #16
 80096f8:	6027      	str	r7, [r4, #0]
 80096fa:	f77f aee7 	ble.w	80094cc <_svfprintf_r+0xa88>
 80096fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009700:	f8c4 8004 	str.w	r8, [r4, #4]
 8009704:	3310      	adds	r3, #16
 8009706:	9323      	str	r3, [sp, #140]	; 0x8c
 8009708:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800970a:	3301      	adds	r3, #1
 800970c:	2b07      	cmp	r3, #7
 800970e:	9322      	str	r3, [sp, #136]	; 0x88
 8009710:	dc41      	bgt.n	8009796 <_svfprintf_r+0xd52>
 8009712:	3408      	adds	r4, #8
 8009714:	3e10      	subs	r6, #16
 8009716:	e7ee      	b.n	80096f6 <_svfprintf_r+0xcb2>
 8009718:	aa21      	add	r2, sp, #132	; 0x84
 800971a:	4649      	mov	r1, r9
 800971c:	4650      	mov	r0, sl
 800971e:	f001 fecd 	bl	800b4bc <__ssprint_r>
 8009722:	2800      	cmp	r0, #0
 8009724:	f040 80eb 	bne.w	80098fe <_svfprintf_r+0xeba>
 8009728:	ac2e      	add	r4, sp, #184	; 0xb8
 800972a:	e796      	b.n	800965a <_svfprintf_r+0xc16>
 800972c:	2310      	movs	r3, #16
 800972e:	6063      	str	r3, [r4, #4]
 8009730:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009732:	3310      	adds	r3, #16
 8009734:	9323      	str	r3, [sp, #140]	; 0x8c
 8009736:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009738:	3301      	adds	r3, #1
 800973a:	2b07      	cmp	r3, #7
 800973c:	9322      	str	r3, [sp, #136]	; 0x88
 800973e:	dc02      	bgt.n	8009746 <_svfprintf_r+0xd02>
 8009740:	3408      	adds	r4, #8
 8009742:	3e10      	subs	r6, #16
 8009744:	e791      	b.n	800966a <_svfprintf_r+0xc26>
 8009746:	aa21      	add	r2, sp, #132	; 0x84
 8009748:	4649      	mov	r1, r9
 800974a:	4650      	mov	r0, sl
 800974c:	f001 feb6 	bl	800b4bc <__ssprint_r>
 8009750:	2800      	cmp	r0, #0
 8009752:	f040 80d4 	bne.w	80098fe <_svfprintf_r+0xeba>
 8009756:	ac2e      	add	r4, sp, #184	; 0xb8
 8009758:	e7f3      	b.n	8009742 <_svfprintf_r+0xcfe>
 800975a:	aa21      	add	r2, sp, #132	; 0x84
 800975c:	4649      	mov	r1, r9
 800975e:	4650      	mov	r0, sl
 8009760:	f001 feac 	bl	800b4bc <__ssprint_r>
 8009764:	2800      	cmp	r0, #0
 8009766:	f040 80ca 	bne.w	80098fe <_svfprintf_r+0xeba>
 800976a:	ac2e      	add	r4, sp, #184	; 0xb8
 800976c:	e78b      	b.n	8009686 <_svfprintf_r+0xc42>
 800976e:	aa21      	add	r2, sp, #132	; 0x84
 8009770:	4649      	mov	r1, r9
 8009772:	4650      	mov	r0, sl
 8009774:	f001 fea2 	bl	800b4bc <__ssprint_r>
 8009778:	2800      	cmp	r0, #0
 800977a:	f040 80c0 	bne.w	80098fe <_svfprintf_r+0xeba>
 800977e:	ac2e      	add	r4, sp, #184	; 0xb8
 8009780:	e795      	b.n	80096ae <_svfprintf_r+0xc6a>
 8009782:	aa21      	add	r2, sp, #132	; 0x84
 8009784:	4649      	mov	r1, r9
 8009786:	4650      	mov	r0, sl
 8009788:	f001 fe98 	bl	800b4bc <__ssprint_r>
 800978c:	2800      	cmp	r0, #0
 800978e:	f040 80b6 	bne.w	80098fe <_svfprintf_r+0xeba>
 8009792:	ac2e      	add	r4, sp, #184	; 0xb8
 8009794:	e7a1      	b.n	80096da <_svfprintf_r+0xc96>
 8009796:	aa21      	add	r2, sp, #132	; 0x84
 8009798:	4649      	mov	r1, r9
 800979a:	4650      	mov	r0, sl
 800979c:	f001 fe8e 	bl	800b4bc <__ssprint_r>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	f040 80ac 	bne.w	80098fe <_svfprintf_r+0xeba>
 80097a6:	ac2e      	add	r4, sp, #184	; 0xb8
 80097a8:	e7b4      	b.n	8009714 <_svfprintf_r+0xcd0>
 80097aa:	bf00      	nop
 80097ac:	08017b9e 	.word	0x08017b9e
 80097b0:	08017bb0 	.word	0x08017bb0
 80097b4:	9b07      	ldr	r3, [sp, #28]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	dc01      	bgt.n	80097be <_svfprintf_r+0xd7a>
 80097ba:	07ea      	lsls	r2, r5, #31
 80097bc:	d576      	bpl.n	80098ac <_svfprintf_r+0xe68>
 80097be:	2301      	movs	r3, #1
 80097c0:	6063      	str	r3, [r4, #4]
 80097c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097c4:	f8c4 8000 	str.w	r8, [r4]
 80097c8:	3301      	adds	r3, #1
 80097ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80097cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097ce:	3301      	adds	r3, #1
 80097d0:	2b07      	cmp	r3, #7
 80097d2:	9322      	str	r3, [sp, #136]	; 0x88
 80097d4:	dc36      	bgt.n	8009844 <_svfprintf_r+0xe00>
 80097d6:	3408      	adds	r4, #8
 80097d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e0:	6063      	str	r3, [r4, #4]
 80097e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097e4:	4413      	add	r3, r2
 80097e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80097e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097ea:	3301      	adds	r3, #1
 80097ec:	2b07      	cmp	r3, #7
 80097ee:	9322      	str	r3, [sp, #136]	; 0x88
 80097f0:	dc31      	bgt.n	8009856 <_svfprintf_r+0xe12>
 80097f2:	3408      	adds	r4, #8
 80097f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80097fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80097fc:	f7f7 f8d0 	bl	80009a0 <__aeabi_dcmpeq>
 8009800:	9b07      	ldr	r3, [sp, #28]
 8009802:	1e5e      	subs	r6, r3, #1
 8009804:	2800      	cmp	r0, #0
 8009806:	d12f      	bne.n	8009868 <_svfprintf_r+0xe24>
 8009808:	f108 0301 	add.w	r3, r8, #1
 800980c:	e884 0048 	stmia.w	r4, {r3, r6}
 8009810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009812:	9a07      	ldr	r2, [sp, #28]
 8009814:	3b01      	subs	r3, #1
 8009816:	4413      	add	r3, r2
 8009818:	9323      	str	r3, [sp, #140]	; 0x8c
 800981a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800981c:	3301      	adds	r3, #1
 800981e:	2b07      	cmp	r3, #7
 8009820:	9322      	str	r3, [sp, #136]	; 0x88
 8009822:	dd4a      	ble.n	80098ba <_svfprintf_r+0xe76>
 8009824:	aa21      	add	r2, sp, #132	; 0x84
 8009826:	4649      	mov	r1, r9
 8009828:	4650      	mov	r0, sl
 800982a:	f001 fe47 	bl	800b4bc <__ssprint_r>
 800982e:	2800      	cmp	r0, #0
 8009830:	d165      	bne.n	80098fe <_svfprintf_r+0xeba>
 8009832:	ac2e      	add	r4, sp, #184	; 0xb8
 8009834:	ab1d      	add	r3, sp, #116	; 0x74
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800983a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009840:	4413      	add	r3, r2
 8009842:	e41c      	b.n	800907e <_svfprintf_r+0x63a>
 8009844:	aa21      	add	r2, sp, #132	; 0x84
 8009846:	4649      	mov	r1, r9
 8009848:	4650      	mov	r0, sl
 800984a:	f001 fe37 	bl	800b4bc <__ssprint_r>
 800984e:	2800      	cmp	r0, #0
 8009850:	d155      	bne.n	80098fe <_svfprintf_r+0xeba>
 8009852:	ac2e      	add	r4, sp, #184	; 0xb8
 8009854:	e7c0      	b.n	80097d8 <_svfprintf_r+0xd94>
 8009856:	aa21      	add	r2, sp, #132	; 0x84
 8009858:	4649      	mov	r1, r9
 800985a:	4650      	mov	r0, sl
 800985c:	f001 fe2e 	bl	800b4bc <__ssprint_r>
 8009860:	2800      	cmp	r0, #0
 8009862:	d14c      	bne.n	80098fe <_svfprintf_r+0xeba>
 8009864:	ac2e      	add	r4, sp, #184	; 0xb8
 8009866:	e7c5      	b.n	80097f4 <_svfprintf_r+0xdb0>
 8009868:	2e00      	cmp	r6, #0
 800986a:	dde3      	ble.n	8009834 <_svfprintf_r+0xdf0>
 800986c:	f04f 0810 	mov.w	r8, #16
 8009870:	4f58      	ldr	r7, [pc, #352]	; (80099d4 <_svfprintf_r+0xf90>)
 8009872:	2e10      	cmp	r6, #16
 8009874:	6027      	str	r7, [r4, #0]
 8009876:	dc04      	bgt.n	8009882 <_svfprintf_r+0xe3e>
 8009878:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800987a:	6066      	str	r6, [r4, #4]
 800987c:	441e      	add	r6, r3
 800987e:	9623      	str	r6, [sp, #140]	; 0x8c
 8009880:	e7cb      	b.n	800981a <_svfprintf_r+0xdd6>
 8009882:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009884:	f8c4 8004 	str.w	r8, [r4, #4]
 8009888:	3310      	adds	r3, #16
 800988a:	9323      	str	r3, [sp, #140]	; 0x8c
 800988c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800988e:	3301      	adds	r3, #1
 8009890:	2b07      	cmp	r3, #7
 8009892:	9322      	str	r3, [sp, #136]	; 0x88
 8009894:	dc02      	bgt.n	800989c <_svfprintf_r+0xe58>
 8009896:	3408      	adds	r4, #8
 8009898:	3e10      	subs	r6, #16
 800989a:	e7ea      	b.n	8009872 <_svfprintf_r+0xe2e>
 800989c:	aa21      	add	r2, sp, #132	; 0x84
 800989e:	4649      	mov	r1, r9
 80098a0:	4650      	mov	r0, sl
 80098a2:	f001 fe0b 	bl	800b4bc <__ssprint_r>
 80098a6:	bb50      	cbnz	r0, 80098fe <_svfprintf_r+0xeba>
 80098a8:	ac2e      	add	r4, sp, #184	; 0xb8
 80098aa:	e7f5      	b.n	8009898 <_svfprintf_r+0xe54>
 80098ac:	2301      	movs	r3, #1
 80098ae:	6063      	str	r3, [r4, #4]
 80098b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098b2:	f8c4 8000 	str.w	r8, [r4]
 80098b6:	3301      	adds	r3, #1
 80098b8:	e7ae      	b.n	8009818 <_svfprintf_r+0xdd4>
 80098ba:	3408      	adds	r4, #8
 80098bc:	e7ba      	b.n	8009834 <_svfprintf_r+0xdf0>
 80098be:	3408      	adds	r4, #8
 80098c0:	f7ff bbed 	b.w	800909e <_svfprintf_r+0x65a>
 80098c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098c8:	1a9d      	subs	r5, r3, r2
 80098ca:	2d00      	cmp	r5, #0
 80098cc:	f77f abea 	ble.w	80090a4 <_svfprintf_r+0x660>
 80098d0:	2610      	movs	r6, #16
 80098d2:	4b41      	ldr	r3, [pc, #260]	; (80099d8 <_svfprintf_r+0xf94>)
 80098d4:	2d10      	cmp	r5, #16
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	dc1b      	bgt.n	8009912 <_svfprintf_r+0xece>
 80098da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098dc:	6065      	str	r5, [r4, #4]
 80098de:	441d      	add	r5, r3
 80098e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098e2:	9523      	str	r5, [sp, #140]	; 0x8c
 80098e4:	3301      	adds	r3, #1
 80098e6:	2b07      	cmp	r3, #7
 80098e8:	9322      	str	r3, [sp, #136]	; 0x88
 80098ea:	f77f abdb 	ble.w	80090a4 <_svfprintf_r+0x660>
 80098ee:	aa21      	add	r2, sp, #132	; 0x84
 80098f0:	4649      	mov	r1, r9
 80098f2:	4650      	mov	r0, sl
 80098f4:	f001 fde2 	bl	800b4bc <__ssprint_r>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	f43f abd3 	beq.w	80090a4 <_svfprintf_r+0x660>
 80098fe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009902:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009908:	bf18      	it	ne
 800990a:	f04f 33ff 	movne.w	r3, #4294967295
 800990e:	f7ff b8bd 	b.w	8008a8c <_svfprintf_r+0x48>
 8009912:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009914:	6066      	str	r6, [r4, #4]
 8009916:	3310      	adds	r3, #16
 8009918:	9323      	str	r3, [sp, #140]	; 0x8c
 800991a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800991c:	3301      	adds	r3, #1
 800991e:	2b07      	cmp	r3, #7
 8009920:	9322      	str	r3, [sp, #136]	; 0x88
 8009922:	dc02      	bgt.n	800992a <_svfprintf_r+0xee6>
 8009924:	3408      	adds	r4, #8
 8009926:	3d10      	subs	r5, #16
 8009928:	e7d3      	b.n	80098d2 <_svfprintf_r+0xe8e>
 800992a:	aa21      	add	r2, sp, #132	; 0x84
 800992c:	4649      	mov	r1, r9
 800992e:	4650      	mov	r0, sl
 8009930:	f001 fdc4 	bl	800b4bc <__ssprint_r>
 8009934:	2800      	cmp	r0, #0
 8009936:	d1e2      	bne.n	80098fe <_svfprintf_r+0xeba>
 8009938:	ac2e      	add	r4, sp, #184	; 0xb8
 800993a:	e7f4      	b.n	8009926 <_svfprintf_r+0xee2>
 800993c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0dd      	beq.n	80098fe <_svfprintf_r+0xeba>
 8009942:	aa21      	add	r2, sp, #132	; 0x84
 8009944:	4649      	mov	r1, r9
 8009946:	4650      	mov	r0, sl
 8009948:	f001 fdb8 	bl	800b4bc <__ssprint_r>
 800994c:	e7d7      	b.n	80098fe <_svfprintf_r+0xeba>
 800994e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009952:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009954:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009956:	f7f7 f855 	bl	8000a04 <__aeabi_dcmpun>
 800995a:	2800      	cmp	r0, #0
 800995c:	f43f aa3d 	beq.w	8008dda <_svfprintf_r+0x396>
 8009960:	4b1e      	ldr	r3, [pc, #120]	; (80099dc <_svfprintf_r+0xf98>)
 8009962:	4a1f      	ldr	r2, [pc, #124]	; (80099e0 <_svfprintf_r+0xf9c>)
 8009964:	f7ff ba2d 	b.w	8008dc2 <_svfprintf_r+0x37e>
 8009968:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800996a:	eba3 0308 	sub.w	r3, r3, r8
 800996e:	9307      	str	r3, [sp, #28]
 8009970:	f7ff baaf 	b.w	8008ed2 <_svfprintf_r+0x48e>
 8009974:	ea56 0207 	orrs.w	r2, r6, r7
 8009978:	950f      	str	r5, [sp, #60]	; 0x3c
 800997a:	f43f ac2b 	beq.w	80091d4 <_svfprintf_r+0x790>
 800997e:	2b01      	cmp	r3, #1
 8009980:	f43f ac9d 	beq.w	80092be <_svfprintf_r+0x87a>
 8009984:	2b02      	cmp	r3, #2
 8009986:	f43f acbd 	beq.w	8009304 <_svfprintf_r+0x8c0>
 800998a:	ab2e      	add	r3, sp, #184	; 0xb8
 800998c:	08f1      	lsrs	r1, r6, #3
 800998e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8009992:	08f8      	lsrs	r0, r7, #3
 8009994:	f006 0207 	and.w	r2, r6, #7
 8009998:	4607      	mov	r7, r0
 800999a:	460e      	mov	r6, r1
 800999c:	3230      	adds	r2, #48	; 0x30
 800999e:	ea56 0107 	orrs.w	r1, r6, r7
 80099a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80099a6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80099aa:	f47f ac86 	bne.w	80092ba <_svfprintf_r+0x876>
 80099ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80099b0:	07c9      	lsls	r1, r1, #31
 80099b2:	d506      	bpl.n	80099c2 <_svfprintf_r+0xf7e>
 80099b4:	2a30      	cmp	r2, #48	; 0x30
 80099b6:	d004      	beq.n	80099c2 <_svfprintf_r+0xf7e>
 80099b8:	2230      	movs	r2, #48	; 0x30
 80099ba:	f808 2c01 	strb.w	r2, [r8, #-1]
 80099be:	f1a3 0802 	sub.w	r8, r3, #2
 80099c2:	ab2e      	add	r3, sp, #184	; 0xb8
 80099c4:	465e      	mov	r6, fp
 80099c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80099c8:	eba3 0b08 	sub.w	fp, r3, r8
 80099cc:	2700      	movs	r7, #0
 80099ce:	f7ff bace 	b.w	8008f6e <_svfprintf_r+0x52a>
 80099d2:	bf00      	nop
 80099d4:	08017bb0 	.word	0x08017bb0
 80099d8:	08017ba0 	.word	0x08017ba0
 80099dc:	08017b74 	.word	0x08017b74
 80099e0:	08017b78 	.word	0x08017b78

080099e4 <_vsnprintf_r>:
 80099e4:	b530      	push	{r4, r5, lr}
 80099e6:	1e14      	subs	r4, r2, #0
 80099e8:	4605      	mov	r5, r0
 80099ea:	b09b      	sub	sp, #108	; 0x6c
 80099ec:	4618      	mov	r0, r3
 80099ee:	da05      	bge.n	80099fc <_vsnprintf_r+0x18>
 80099f0:	238b      	movs	r3, #139	; 0x8b
 80099f2:	f04f 30ff 	mov.w	r0, #4294967295
 80099f6:	602b      	str	r3, [r5, #0]
 80099f8:	b01b      	add	sp, #108	; 0x6c
 80099fa:	bd30      	pop	{r4, r5, pc}
 80099fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009a00:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009a04:	bf0c      	ite	eq
 8009a06:	4623      	moveq	r3, r4
 8009a08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009a0c:	9302      	str	r3, [sp, #8]
 8009a0e:	9305      	str	r3, [sp, #20]
 8009a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a14:	9100      	str	r1, [sp, #0]
 8009a16:	9104      	str	r1, [sp, #16]
 8009a18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a20:	4669      	mov	r1, sp
 8009a22:	4628      	mov	r0, r5
 8009a24:	f7ff f80e 	bl	8008a44 <_svfprintf_r>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	bfbc      	itt	lt
 8009a2c:	238b      	movlt	r3, #139	; 0x8b
 8009a2e:	602b      	strlt	r3, [r5, #0]
 8009a30:	2c00      	cmp	r4, #0
 8009a32:	d0e1      	beq.n	80099f8 <_vsnprintf_r+0x14>
 8009a34:	2200      	movs	r2, #0
 8009a36:	9b00      	ldr	r3, [sp, #0]
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	e7dd      	b.n	80099f8 <_vsnprintf_r+0x14>

08009a3c <vsnprintf>:
 8009a3c:	b507      	push	{r0, r1, r2, lr}
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	4613      	mov	r3, r2
 8009a42:	460a      	mov	r2, r1
 8009a44:	4601      	mov	r1, r0
 8009a46:	4803      	ldr	r0, [pc, #12]	; (8009a54 <vsnprintf+0x18>)
 8009a48:	6800      	ldr	r0, [r0, #0]
 8009a4a:	f7ff ffcb 	bl	80099e4 <_vsnprintf_r>
 8009a4e:	b003      	add	sp, #12
 8009a50:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a54:	20000414 	.word	0x20000414

08009a58 <quorem>:
 8009a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	6903      	ldr	r3, [r0, #16]
 8009a5e:	690c      	ldr	r4, [r1, #16]
 8009a60:	4680      	mov	r8, r0
 8009a62:	429c      	cmp	r4, r3
 8009a64:	f300 8082 	bgt.w	8009b6c <quorem+0x114>
 8009a68:	3c01      	subs	r4, #1
 8009a6a:	f101 0714 	add.w	r7, r1, #20
 8009a6e:	f100 0614 	add.w	r6, r0, #20
 8009a72:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009a76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009a7a:	3501      	adds	r5, #1
 8009a7c:	fbb0 f5f5 	udiv	r5, r0, r5
 8009a80:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8009a84:	eb06 030e 	add.w	r3, r6, lr
 8009a88:	eb07 090e 	add.w	r9, r7, lr
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	b38d      	cbz	r5, 8009af4 <quorem+0x9c>
 8009a90:	f04f 0a00 	mov.w	sl, #0
 8009a94:	4638      	mov	r0, r7
 8009a96:	46b4      	mov	ip, r6
 8009a98:	46d3      	mov	fp, sl
 8009a9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a9e:	b293      	uxth	r3, r2
 8009aa0:	fb05 a303 	mla	r3, r5, r3, sl
 8009aa4:	0c12      	lsrs	r2, r2, #16
 8009aa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009aaa:	fb05 a202 	mla	r2, r5, r2, sl
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	ebab 0303 	sub.w	r3, fp, r3
 8009ab4:	f8bc b000 	ldrh.w	fp, [ip]
 8009ab8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009abc:	445b      	add	r3, fp
 8009abe:	fa1f fb82 	uxth.w	fp, r2
 8009ac2:	f8dc 2000 	ldr.w	r2, [ip]
 8009ac6:	4581      	cmp	r9, r0
 8009ac8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009acc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ad6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009ada:	f84c 3b04 	str.w	r3, [ip], #4
 8009ade:	d2dc      	bcs.n	8009a9a <quorem+0x42>
 8009ae0:	f856 300e 	ldr.w	r3, [r6, lr]
 8009ae4:	b933      	cbnz	r3, 8009af4 <quorem+0x9c>
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	3b04      	subs	r3, #4
 8009aea:	429e      	cmp	r6, r3
 8009aec:	461a      	mov	r2, r3
 8009aee:	d331      	bcc.n	8009b54 <quorem+0xfc>
 8009af0:	f8c8 4010 	str.w	r4, [r8, #16]
 8009af4:	4640      	mov	r0, r8
 8009af6:	f001 fa82 	bl	800affe <__mcmp>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	db26      	blt.n	8009b4c <quorem+0xf4>
 8009afe:	4630      	mov	r0, r6
 8009b00:	f04f 0e00 	mov.w	lr, #0
 8009b04:	3501      	adds	r5, #1
 8009b06:	f857 1b04 	ldr.w	r1, [r7], #4
 8009b0a:	f8d0 c000 	ldr.w	ip, [r0]
 8009b0e:	b28b      	uxth	r3, r1
 8009b10:	ebae 0303 	sub.w	r3, lr, r3
 8009b14:	fa1f f28c 	uxth.w	r2, ip
 8009b18:	4413      	add	r3, r2
 8009b1a:	0c0a      	lsrs	r2, r1, #16
 8009b1c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009b20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b2a:	45b9      	cmp	r9, r7
 8009b2c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009b30:	f840 3b04 	str.w	r3, [r0], #4
 8009b34:	d2e7      	bcs.n	8009b06 <quorem+0xae>
 8009b36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009b3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009b3e:	b92a      	cbnz	r2, 8009b4c <quorem+0xf4>
 8009b40:	3b04      	subs	r3, #4
 8009b42:	429e      	cmp	r6, r3
 8009b44:	461a      	mov	r2, r3
 8009b46:	d30b      	bcc.n	8009b60 <quorem+0x108>
 8009b48:	f8c8 4010 	str.w	r4, [r8, #16]
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	b003      	add	sp, #12
 8009b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b54:	6812      	ldr	r2, [r2, #0]
 8009b56:	3b04      	subs	r3, #4
 8009b58:	2a00      	cmp	r2, #0
 8009b5a:	d1c9      	bne.n	8009af0 <quorem+0x98>
 8009b5c:	3c01      	subs	r4, #1
 8009b5e:	e7c4      	b.n	8009aea <quorem+0x92>
 8009b60:	6812      	ldr	r2, [r2, #0]
 8009b62:	3b04      	subs	r3, #4
 8009b64:	2a00      	cmp	r2, #0
 8009b66:	d1ef      	bne.n	8009b48 <quorem+0xf0>
 8009b68:	3c01      	subs	r4, #1
 8009b6a:	e7ea      	b.n	8009b42 <quorem+0xea>
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	e7ee      	b.n	8009b4e <quorem+0xf6>

08009b70 <_dtoa_r>:
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b76:	b095      	sub	sp, #84	; 0x54
 8009b78:	4604      	mov	r4, r0
 8009b7a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8009b7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b80:	b93e      	cbnz	r6, 8009b92 <_dtoa_r+0x22>
 8009b82:	2010      	movs	r0, #16
 8009b84:	f000 fdd8 	bl	800a738 <malloc>
 8009b88:	6260      	str	r0, [r4, #36]	; 0x24
 8009b8a:	6046      	str	r6, [r0, #4]
 8009b8c:	6086      	str	r6, [r0, #8]
 8009b8e:	6006      	str	r6, [r0, #0]
 8009b90:	60c6      	str	r6, [r0, #12]
 8009b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b94:	6819      	ldr	r1, [r3, #0]
 8009b96:	b151      	cbz	r1, 8009bae <_dtoa_r+0x3e>
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4093      	lsls	r3, r2
 8009b9e:	604a      	str	r2, [r1, #4]
 8009ba0:	608b      	str	r3, [r1, #8]
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f001 f856 	bl	800ac54 <_Bfree>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	9b03      	ldr	r3, [sp, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	bfb7      	itett	lt
 8009bb4:	2301      	movlt	r3, #1
 8009bb6:	2300      	movge	r3, #0
 8009bb8:	602b      	strlt	r3, [r5, #0]
 8009bba:	9b03      	ldrlt	r3, [sp, #12]
 8009bbc:	bfae      	itee	ge
 8009bbe:	602b      	strge	r3, [r5, #0]
 8009bc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009bc4:	9303      	strlt	r3, [sp, #12]
 8009bc6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009bca:	4bab      	ldr	r3, [pc, #684]	; (8009e78 <_dtoa_r+0x308>)
 8009bcc:	ea33 0309 	bics.w	r3, r3, r9
 8009bd0:	d11b      	bne.n	8009c0a <_dtoa_r+0x9a>
 8009bd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	9b02      	ldr	r3, [sp, #8]
 8009bdc:	b923      	cbnz	r3, 8009be8 <_dtoa_r+0x78>
 8009bde:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8009be2:	2800      	cmp	r0, #0
 8009be4:	f000 8583 	beq.w	800a6ee <_dtoa_r+0xb7e>
 8009be8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bea:	b953      	cbnz	r3, 8009c02 <_dtoa_r+0x92>
 8009bec:	4ba3      	ldr	r3, [pc, #652]	; (8009e7c <_dtoa_r+0x30c>)
 8009bee:	e021      	b.n	8009c34 <_dtoa_r+0xc4>
 8009bf0:	4ba3      	ldr	r3, [pc, #652]	; (8009e80 <_dtoa_r+0x310>)
 8009bf2:	9306      	str	r3, [sp, #24]
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	9806      	ldr	r0, [sp, #24]
 8009bfc:	b015      	add	sp, #84	; 0x54
 8009bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c02:	4b9e      	ldr	r3, [pc, #632]	; (8009e7c <_dtoa_r+0x30c>)
 8009c04:	9306      	str	r3, [sp, #24]
 8009c06:	3303      	adds	r3, #3
 8009c08:	e7f5      	b.n	8009bf6 <_dtoa_r+0x86>
 8009c0a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	2300      	movs	r3, #0
 8009c12:	4630      	mov	r0, r6
 8009c14:	4639      	mov	r1, r7
 8009c16:	f7f6 fec3 	bl	80009a0 <__aeabi_dcmpeq>
 8009c1a:	4680      	mov	r8, r0
 8009c1c:	b160      	cbz	r0, 8009c38 <_dtoa_r+0xc8>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 855e 	beq.w	800a6e8 <_dtoa_r+0xb78>
 8009c2c:	4b95      	ldr	r3, [pc, #596]	; (8009e84 <_dtoa_r+0x314>)
 8009c2e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c30:	6013      	str	r3, [r2, #0]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	9306      	str	r3, [sp, #24]
 8009c36:	e7e0      	b.n	8009bfa <_dtoa_r+0x8a>
 8009c38:	ab12      	add	r3, sp, #72	; 0x48
 8009c3a:	9301      	str	r3, [sp, #4]
 8009c3c:	ab13      	add	r3, sp, #76	; 0x4c
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	4632      	mov	r2, r6
 8009c42:	463b      	mov	r3, r7
 8009c44:	4620      	mov	r0, r4
 8009c46:	f001 fa53 	bl	800b0f0 <__d2b>
 8009c4a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c4e:	4682      	mov	sl, r0
 8009c50:	2d00      	cmp	r5, #0
 8009c52:	d07d      	beq.n	8009d50 <_dtoa_r+0x1e0>
 8009c54:	4630      	mov	r0, r6
 8009c56:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c5a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009c5e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009c62:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c66:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	4b86      	ldr	r3, [pc, #536]	; (8009e88 <_dtoa_r+0x318>)
 8009c6e:	f7f6 fa7b 	bl	8000168 <__aeabi_dsub>
 8009c72:	a37b      	add	r3, pc, #492	; (adr r3, 8009e60 <_dtoa_r+0x2f0>)
 8009c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c78:	f7f6 fc2a 	bl	80004d0 <__aeabi_dmul>
 8009c7c:	a37a      	add	r3, pc, #488	; (adr r3, 8009e68 <_dtoa_r+0x2f8>)
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f7f6 fa73 	bl	800016c <__adddf3>
 8009c86:	4606      	mov	r6, r0
 8009c88:	4628      	mov	r0, r5
 8009c8a:	460f      	mov	r7, r1
 8009c8c:	f7f6 fbba 	bl	8000404 <__aeabi_i2d>
 8009c90:	a377      	add	r3, pc, #476	; (adr r3, 8009e70 <_dtoa_r+0x300>)
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	f7f6 fc1b 	bl	80004d0 <__aeabi_dmul>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	4639      	mov	r1, r7
 8009ca2:	f7f6 fa63 	bl	800016c <__adddf3>
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	460f      	mov	r7, r1
 8009caa:	f7f6 fec1 	bl	8000a30 <__aeabi_d2iz>
 8009cae:	2200      	movs	r2, #0
 8009cb0:	4683      	mov	fp, r0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	f7f6 fe7c 	bl	80009b4 <__aeabi_dcmplt>
 8009cbc:	b158      	cbz	r0, 8009cd6 <_dtoa_r+0x166>
 8009cbe:	4658      	mov	r0, fp
 8009cc0:	f7f6 fba0 	bl	8000404 <__aeabi_i2d>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4630      	mov	r0, r6
 8009cca:	4639      	mov	r1, r7
 8009ccc:	f7f6 fe68 	bl	80009a0 <__aeabi_dcmpeq>
 8009cd0:	b908      	cbnz	r0, 8009cd6 <_dtoa_r+0x166>
 8009cd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cd6:	f1bb 0f16 	cmp.w	fp, #22
 8009cda:	d858      	bhi.n	8009d8e <_dtoa_r+0x21e>
 8009cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ce0:	496a      	ldr	r1, [pc, #424]	; (8009e8c <_dtoa_r+0x31c>)
 8009ce2:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cea:	f7f6 fe81 	bl	80009f0 <__aeabi_dcmpgt>
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d04f      	beq.n	8009d92 <_dtoa_r+0x222>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cf8:	930d      	str	r3, [sp, #52]	; 0x34
 8009cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cfc:	1b5d      	subs	r5, r3, r5
 8009cfe:	1e6b      	subs	r3, r5, #1
 8009d00:	9307      	str	r3, [sp, #28]
 8009d02:	bf43      	ittte	mi
 8009d04:	2300      	movmi	r3, #0
 8009d06:	f1c5 0801 	rsbmi	r8, r5, #1
 8009d0a:	9307      	strmi	r3, [sp, #28]
 8009d0c:	f04f 0800 	movpl.w	r8, #0
 8009d10:	f1bb 0f00 	cmp.w	fp, #0
 8009d14:	db3f      	blt.n	8009d96 <_dtoa_r+0x226>
 8009d16:	9b07      	ldr	r3, [sp, #28]
 8009d18:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8009d1c:	445b      	add	r3, fp
 8009d1e:	9307      	str	r3, [sp, #28]
 8009d20:	2300      	movs	r3, #0
 8009d22:	9308      	str	r3, [sp, #32]
 8009d24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d26:	2b09      	cmp	r3, #9
 8009d28:	f200 80b4 	bhi.w	8009e94 <_dtoa_r+0x324>
 8009d2c:	2b05      	cmp	r3, #5
 8009d2e:	bfc4      	itt	gt
 8009d30:	3b04      	subgt	r3, #4
 8009d32:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009d34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d36:	bfc8      	it	gt
 8009d38:	2600      	movgt	r6, #0
 8009d3a:	f1a3 0302 	sub.w	r3, r3, #2
 8009d3e:	bfd8      	it	le
 8009d40:	2601      	movle	r6, #1
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	f200 80b2 	bhi.w	8009eac <_dtoa_r+0x33c>
 8009d48:	e8df f003 	tbb	[pc, r3]
 8009d4c:	782d8684 	.word	0x782d8684
 8009d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d52:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009d54:	441d      	add	r5, r3
 8009d56:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d5a:	2b20      	cmp	r3, #32
 8009d5c:	dd11      	ble.n	8009d82 <_dtoa_r+0x212>
 8009d5e:	9a02      	ldr	r2, [sp, #8]
 8009d60:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009d64:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009d68:	fa22 f000 	lsr.w	r0, r2, r0
 8009d6c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d70:	4318      	orrs	r0, r3
 8009d72:	f7f6 fb37 	bl	80003e4 <__aeabi_ui2d>
 8009d76:	2301      	movs	r3, #1
 8009d78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009d7c:	3d01      	subs	r5, #1
 8009d7e:	9310      	str	r3, [sp, #64]	; 0x40
 8009d80:	e773      	b.n	8009c6a <_dtoa_r+0xfa>
 8009d82:	f1c3 0020 	rsb	r0, r3, #32
 8009d86:	9b02      	ldr	r3, [sp, #8]
 8009d88:	fa03 f000 	lsl.w	r0, r3, r0
 8009d8c:	e7f1      	b.n	8009d72 <_dtoa_r+0x202>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e7b2      	b.n	8009cf8 <_dtoa_r+0x188>
 8009d92:	900d      	str	r0, [sp, #52]	; 0x34
 8009d94:	e7b1      	b.n	8009cfa <_dtoa_r+0x18a>
 8009d96:	f1cb 0300 	rsb	r3, fp, #0
 8009d9a:	9308      	str	r3, [sp, #32]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	eba8 080b 	sub.w	r8, r8, fp
 8009da2:	930c      	str	r3, [sp, #48]	; 0x30
 8009da4:	e7be      	b.n	8009d24 <_dtoa_r+0x1b4>
 8009da6:	2301      	movs	r3, #1
 8009da8:	9309      	str	r3, [sp, #36]	; 0x24
 8009daa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f340 8080 	ble.w	8009eb2 <_dtoa_r+0x342>
 8009db2:	4699      	mov	r9, r3
 8009db4:	9304      	str	r3, [sp, #16]
 8009db6:	2200      	movs	r2, #0
 8009db8:	2104      	movs	r1, #4
 8009dba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009dbc:	606a      	str	r2, [r5, #4]
 8009dbe:	f101 0214 	add.w	r2, r1, #20
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d97a      	bls.n	8009ebc <_dtoa_r+0x34c>
 8009dc6:	6869      	ldr	r1, [r5, #4]
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 ff0f 	bl	800abec <_Balloc>
 8009dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dd0:	6028      	str	r0, [r5, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f1b9 0f0e 	cmp.w	r9, #14
 8009dd8:	9306      	str	r3, [sp, #24]
 8009dda:	f200 80f0 	bhi.w	8009fbe <_dtoa_r+0x44e>
 8009dde:	2e00      	cmp	r6, #0
 8009de0:	f000 80ed 	beq.w	8009fbe <_dtoa_r+0x44e>
 8009de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009de8:	f1bb 0f00 	cmp.w	fp, #0
 8009dec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009df0:	dd79      	ble.n	8009ee6 <_dtoa_r+0x376>
 8009df2:	4a26      	ldr	r2, [pc, #152]	; (8009e8c <_dtoa_r+0x31c>)
 8009df4:	f00b 030f 	and.w	r3, fp, #15
 8009df8:	ea4f 162b 	mov.w	r6, fp, asr #4
 8009dfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e00:	06f0      	lsls	r0, r6, #27
 8009e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009e0a:	d55c      	bpl.n	8009ec6 <_dtoa_r+0x356>
 8009e0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009e10:	4b1f      	ldr	r3, [pc, #124]	; (8009e90 <_dtoa_r+0x320>)
 8009e12:	2503      	movs	r5, #3
 8009e14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e18:	f7f6 fc84 	bl	8000724 <__aeabi_ddiv>
 8009e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e20:	f006 060f 	and.w	r6, r6, #15
 8009e24:	4f1a      	ldr	r7, [pc, #104]	; (8009e90 <_dtoa_r+0x320>)
 8009e26:	2e00      	cmp	r6, #0
 8009e28:	d14f      	bne.n	8009eca <_dtoa_r+0x35a>
 8009e2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e32:	f7f6 fc77 	bl	8000724 <__aeabi_ddiv>
 8009e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e3a:	e06e      	b.n	8009f1a <_dtoa_r+0x3aa>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e42:	445b      	add	r3, fp
 8009e44:	f103 0901 	add.w	r9, r3, #1
 8009e48:	9304      	str	r3, [sp, #16]
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	bfb8      	it	lt
 8009e50:	2301      	movlt	r3, #1
 8009e52:	e7b0      	b.n	8009db6 <_dtoa_r+0x246>
 8009e54:	2300      	movs	r3, #0
 8009e56:	e7a7      	b.n	8009da8 <_dtoa_r+0x238>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	e7f0      	b.n	8009e3e <_dtoa_r+0x2ce>
 8009e5c:	f3af 8000 	nop.w
 8009e60:	636f4361 	.word	0x636f4361
 8009e64:	3fd287a7 	.word	0x3fd287a7
 8009e68:	8b60c8b3 	.word	0x8b60c8b3
 8009e6c:	3fc68a28 	.word	0x3fc68a28
 8009e70:	509f79fb 	.word	0x509f79fb
 8009e74:	3fd34413 	.word	0x3fd34413
 8009e78:	7ff00000 	.word	0x7ff00000
 8009e7c:	08017bc9 	.word	0x08017bc9
 8009e80:	08017bc0 	.word	0x08017bc0
 8009e84:	08017b9f 	.word	0x08017b9f
 8009e88:	3ff80000 	.word	0x3ff80000
 8009e8c:	08017c60 	.word	0x08017c60
 8009e90:	08017c38 	.word	0x08017c38
 8009e94:	2601      	movs	r6, #1
 8009e96:	2300      	movs	r3, #0
 8009e98:	9609      	str	r6, [sp, #36]	; 0x24
 8009e9a:	931e      	str	r3, [sp, #120]	; 0x78
 8009e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	4699      	mov	r9, r3
 8009ea6:	2312      	movs	r3, #18
 8009ea8:	921f      	str	r2, [sp, #124]	; 0x7c
 8009eaa:	e784      	b.n	8009db6 <_dtoa_r+0x246>
 8009eac:	2301      	movs	r3, #1
 8009eae:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb0:	e7f4      	b.n	8009e9c <_dtoa_r+0x32c>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	9304      	str	r3, [sp, #16]
 8009eb6:	4699      	mov	r9, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	e7f5      	b.n	8009ea8 <_dtoa_r+0x338>
 8009ebc:	686a      	ldr	r2, [r5, #4]
 8009ebe:	0049      	lsls	r1, r1, #1
 8009ec0:	3201      	adds	r2, #1
 8009ec2:	606a      	str	r2, [r5, #4]
 8009ec4:	e77b      	b.n	8009dbe <_dtoa_r+0x24e>
 8009ec6:	2502      	movs	r5, #2
 8009ec8:	e7ac      	b.n	8009e24 <_dtoa_r+0x2b4>
 8009eca:	07f1      	lsls	r1, r6, #31
 8009ecc:	d508      	bpl.n	8009ee0 <_dtoa_r+0x370>
 8009ece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ed6:	f7f6 fafb 	bl	80004d0 <__aeabi_dmul>
 8009eda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ede:	3501      	adds	r5, #1
 8009ee0:	1076      	asrs	r6, r6, #1
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	e79f      	b.n	8009e26 <_dtoa_r+0x2b6>
 8009ee6:	f000 80a5 	beq.w	800a034 <_dtoa_r+0x4c4>
 8009eea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009eee:	f1cb 0600 	rsb	r6, fp, #0
 8009ef2:	4ba2      	ldr	r3, [pc, #648]	; (800a17c <_dtoa_r+0x60c>)
 8009ef4:	f006 020f 	and.w	r2, r6, #15
 8009ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f7f6 fae6 	bl	80004d0 <__aeabi_dmul>
 8009f04:	2502      	movs	r5, #2
 8009f06:	2300      	movs	r3, #0
 8009f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f0c:	4f9c      	ldr	r7, [pc, #624]	; (800a180 <_dtoa_r+0x610>)
 8009f0e:	1136      	asrs	r6, r6, #4
 8009f10:	2e00      	cmp	r6, #0
 8009f12:	f040 8084 	bne.w	800a01e <_dtoa_r+0x4ae>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d18d      	bne.n	8009e36 <_dtoa_r+0x2c6>
 8009f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 808b 	beq.w	800a038 <_dtoa_r+0x4c8>
 8009f22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009f2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f2e:	2200      	movs	r2, #0
 8009f30:	4b94      	ldr	r3, [pc, #592]	; (800a184 <_dtoa_r+0x614>)
 8009f32:	f7f6 fd3f 	bl	80009b4 <__aeabi_dcmplt>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d07e      	beq.n	800a038 <_dtoa_r+0x4c8>
 8009f3a:	f1b9 0f00 	cmp.w	r9, #0
 8009f3e:	d07b      	beq.n	800a038 <_dtoa_r+0x4c8>
 8009f40:	9b04      	ldr	r3, [sp, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	dd37      	ble.n	8009fb6 <_dtoa_r+0x446>
 8009f46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	4b8e      	ldr	r3, [pc, #568]	; (800a188 <_dtoa_r+0x618>)
 8009f4e:	f7f6 fabf 	bl	80004d0 <__aeabi_dmul>
 8009f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f56:	9e04      	ldr	r6, [sp, #16]
 8009f58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009f5c:	3501      	adds	r5, #1
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f7f6 fa50 	bl	8000404 <__aeabi_i2d>
 8009f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f68:	f7f6 fab2 	bl	80004d0 <__aeabi_dmul>
 8009f6c:	4b87      	ldr	r3, [pc, #540]	; (800a18c <_dtoa_r+0x61c>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f7f6 f8fc 	bl	800016c <__adddf3>
 8009f74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f7a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8009f7e:	950b      	str	r5, [sp, #44]	; 0x2c
 8009f80:	2e00      	cmp	r6, #0
 8009f82:	d15c      	bne.n	800a03e <_dtoa_r+0x4ce>
 8009f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	4b81      	ldr	r3, [pc, #516]	; (800a190 <_dtoa_r+0x620>)
 8009f8c:	f7f6 f8ec 	bl	8000168 <__aeabi_dsub>
 8009f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f92:	462b      	mov	r3, r5
 8009f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f98:	f7f6 fd2a 	bl	80009f0 <__aeabi_dcmpgt>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	f040 82f7 	bne.w	800a590 <_dtoa_r+0xa20>
 8009fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fa8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009fac:	f7f6 fd02 	bl	80009b4 <__aeabi_dcmplt>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	f040 82eb 	bne.w	800a58c <_dtoa_r+0xa1c>
 8009fb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009fba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f2c0 8150 	blt.w	800a266 <_dtoa_r+0x6f6>
 8009fc6:	f1bb 0f0e 	cmp.w	fp, #14
 8009fca:	f300 814c 	bgt.w	800a266 <_dtoa_r+0x6f6>
 8009fce:	4b6b      	ldr	r3, [pc, #428]	; (800a17c <_dtoa_r+0x60c>)
 8009fd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f280 80da 	bge.w	800a198 <_dtoa_r+0x628>
 8009fe4:	f1b9 0f00 	cmp.w	r9, #0
 8009fe8:	f300 80d6 	bgt.w	800a198 <_dtoa_r+0x628>
 8009fec:	f040 82cd 	bne.w	800a58a <_dtoa_r+0xa1a>
 8009ff0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4b66      	ldr	r3, [pc, #408]	; (800a190 <_dtoa_r+0x620>)
 8009ff8:	f7f6 fa6a 	bl	80004d0 <__aeabi_dmul>
 8009ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a000:	f7f6 fcec 	bl	80009dc <__aeabi_dcmpge>
 800a004:	464e      	mov	r6, r9
 800a006:	464f      	mov	r7, r9
 800a008:	2800      	cmp	r0, #0
 800a00a:	f040 82a4 	bne.w	800a556 <_dtoa_r+0x9e6>
 800a00e:	9b06      	ldr	r3, [sp, #24]
 800a010:	9a06      	ldr	r2, [sp, #24]
 800a012:	1c5d      	adds	r5, r3, #1
 800a014:	2331      	movs	r3, #49	; 0x31
 800a016:	f10b 0b01 	add.w	fp, fp, #1
 800a01a:	7013      	strb	r3, [r2, #0]
 800a01c:	e29f      	b.n	800a55e <_dtoa_r+0x9ee>
 800a01e:	07f2      	lsls	r2, r6, #31
 800a020:	d505      	bpl.n	800a02e <_dtoa_r+0x4be>
 800a022:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a026:	f7f6 fa53 	bl	80004d0 <__aeabi_dmul>
 800a02a:	2301      	movs	r3, #1
 800a02c:	3501      	adds	r5, #1
 800a02e:	1076      	asrs	r6, r6, #1
 800a030:	3708      	adds	r7, #8
 800a032:	e76d      	b.n	8009f10 <_dtoa_r+0x3a0>
 800a034:	2502      	movs	r5, #2
 800a036:	e770      	b.n	8009f1a <_dtoa_r+0x3aa>
 800a038:	465f      	mov	r7, fp
 800a03a:	464e      	mov	r6, r9
 800a03c:	e78f      	b.n	8009f5e <_dtoa_r+0x3ee>
 800a03e:	9a06      	ldr	r2, [sp, #24]
 800a040:	4b4e      	ldr	r3, [pc, #312]	; (800a17c <_dtoa_r+0x60c>)
 800a042:	4432      	add	r2, r6
 800a044:	9211      	str	r2, [sp, #68]	; 0x44
 800a046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a048:	1e71      	subs	r1, r6, #1
 800a04a:	2a00      	cmp	r2, #0
 800a04c:	d048      	beq.n	800a0e0 <_dtoa_r+0x570>
 800a04e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	2000      	movs	r0, #0
 800a058:	494e      	ldr	r1, [pc, #312]	; (800a194 <_dtoa_r+0x624>)
 800a05a:	f7f6 fb63 	bl	8000724 <__aeabi_ddiv>
 800a05e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a062:	f7f6 f881 	bl	8000168 <__aeabi_dsub>
 800a066:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a06a:	9d06      	ldr	r5, [sp, #24]
 800a06c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a070:	f7f6 fcde 	bl	8000a30 <__aeabi_d2iz>
 800a074:	4606      	mov	r6, r0
 800a076:	f7f6 f9c5 	bl	8000404 <__aeabi_i2d>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a082:	f7f6 f871 	bl	8000168 <__aeabi_dsub>
 800a086:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a08a:	3630      	adds	r6, #48	; 0x30
 800a08c:	f805 6b01 	strb.w	r6, [r5], #1
 800a090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a094:	f7f6 fc8e 	bl	80009b4 <__aeabi_dcmplt>
 800a098:	2800      	cmp	r0, #0
 800a09a:	d164      	bne.n	800a166 <_dtoa_r+0x5f6>
 800a09c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	4938      	ldr	r1, [pc, #224]	; (800a184 <_dtoa_r+0x614>)
 800a0a4:	f7f6 f860 	bl	8000168 <__aeabi_dsub>
 800a0a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0ac:	f7f6 fc82 	bl	80009b4 <__aeabi_dcmplt>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f040 80b9 	bne.w	800a228 <_dtoa_r+0x6b8>
 800a0b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0b8:	429d      	cmp	r5, r3
 800a0ba:	f43f af7c 	beq.w	8009fb6 <_dtoa_r+0x446>
 800a0be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	4b30      	ldr	r3, [pc, #192]	; (800a188 <_dtoa_r+0x618>)
 800a0c6:	f7f6 fa03 	bl	80004d0 <__aeabi_dmul>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a0d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0d4:	4b2c      	ldr	r3, [pc, #176]	; (800a188 <_dtoa_r+0x618>)
 800a0d6:	f7f6 f9fb 	bl	80004d0 <__aeabi_dmul>
 800a0da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0de:	e7c5      	b.n	800a06c <_dtoa_r+0x4fc>
 800a0e0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a0e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0ec:	f7f6 f9f0 	bl	80004d0 <__aeabi_dmul>
 800a0f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a0f4:	9d06      	ldr	r5, [sp, #24]
 800a0f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0fa:	f7f6 fc99 	bl	8000a30 <__aeabi_d2iz>
 800a0fe:	4606      	mov	r6, r0
 800a100:	f7f6 f980 	bl	8000404 <__aeabi_i2d>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a10c:	f7f6 f82c 	bl	8000168 <__aeabi_dsub>
 800a110:	3630      	adds	r6, #48	; 0x30
 800a112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a114:	f805 6b01 	strb.w	r6, [r5], #1
 800a118:	42ab      	cmp	r3, r5
 800a11a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a11e:	f04f 0200 	mov.w	r2, #0
 800a122:	d124      	bne.n	800a16e <_dtoa_r+0x5fe>
 800a124:	4b1b      	ldr	r3, [pc, #108]	; (800a194 <_dtoa_r+0x624>)
 800a126:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a12a:	f7f6 f81f 	bl	800016c <__adddf3>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a136:	f7f6 fc5b 	bl	80009f0 <__aeabi_dcmpgt>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d174      	bne.n	800a228 <_dtoa_r+0x6b8>
 800a13e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a142:	2000      	movs	r0, #0
 800a144:	4913      	ldr	r1, [pc, #76]	; (800a194 <_dtoa_r+0x624>)
 800a146:	f7f6 f80f 	bl	8000168 <__aeabi_dsub>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a152:	f7f6 fc2f 	bl	80009b4 <__aeabi_dcmplt>
 800a156:	2800      	cmp	r0, #0
 800a158:	f43f af2d 	beq.w	8009fb6 <_dtoa_r+0x446>
 800a15c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a160:	1e6a      	subs	r2, r5, #1
 800a162:	2b30      	cmp	r3, #48	; 0x30
 800a164:	d001      	beq.n	800a16a <_dtoa_r+0x5fa>
 800a166:	46bb      	mov	fp, r7
 800a168:	e04d      	b.n	800a206 <_dtoa_r+0x696>
 800a16a:	4615      	mov	r5, r2
 800a16c:	e7f6      	b.n	800a15c <_dtoa_r+0x5ec>
 800a16e:	4b06      	ldr	r3, [pc, #24]	; (800a188 <_dtoa_r+0x618>)
 800a170:	f7f6 f9ae 	bl	80004d0 <__aeabi_dmul>
 800a174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a178:	e7bd      	b.n	800a0f6 <_dtoa_r+0x586>
 800a17a:	bf00      	nop
 800a17c:	08017c60 	.word	0x08017c60
 800a180:	08017c38 	.word	0x08017c38
 800a184:	3ff00000 	.word	0x3ff00000
 800a188:	40240000 	.word	0x40240000
 800a18c:	401c0000 	.word	0x401c0000
 800a190:	40140000 	.word	0x40140000
 800a194:	3fe00000 	.word	0x3fe00000
 800a198:	9d06      	ldr	r5, [sp, #24]
 800a19a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a19e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	f7f6 fabd 	bl	8000724 <__aeabi_ddiv>
 800a1aa:	f7f6 fc41 	bl	8000a30 <__aeabi_d2iz>
 800a1ae:	4680      	mov	r8, r0
 800a1b0:	f7f6 f928 	bl	8000404 <__aeabi_i2d>
 800a1b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1b8:	f7f6 f98a 	bl	80004d0 <__aeabi_dmul>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f7f5 ffd0 	bl	8000168 <__aeabi_dsub>
 800a1c8:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a1cc:	f805 6b01 	strb.w	r6, [r5], #1
 800a1d0:	9e06      	ldr	r6, [sp, #24]
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	1bae      	subs	r6, r5, r6
 800a1d6:	45b1      	cmp	r9, r6
 800a1d8:	460b      	mov	r3, r1
 800a1da:	d137      	bne.n	800a24c <_dtoa_r+0x6dc>
 800a1dc:	f7f5 ffc6 	bl	800016c <__adddf3>
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	460f      	mov	r7, r1
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1ec:	f7f6 fbe2 	bl	80009b4 <__aeabi_dcmplt>
 800a1f0:	b9c8      	cbnz	r0, 800a226 <_dtoa_r+0x6b6>
 800a1f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1f6:	4632      	mov	r2, r6
 800a1f8:	463b      	mov	r3, r7
 800a1fa:	f7f6 fbd1 	bl	80009a0 <__aeabi_dcmpeq>
 800a1fe:	b110      	cbz	r0, 800a206 <_dtoa_r+0x696>
 800a200:	f018 0f01 	tst.w	r8, #1
 800a204:	d10f      	bne.n	800a226 <_dtoa_r+0x6b6>
 800a206:	4651      	mov	r1, sl
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 fd23 	bl	800ac54 <_Bfree>
 800a20e:	2300      	movs	r3, #0
 800a210:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a212:	702b      	strb	r3, [r5, #0]
 800a214:	f10b 0301 	add.w	r3, fp, #1
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f43f acec 	beq.w	8009bfa <_dtoa_r+0x8a>
 800a222:	601d      	str	r5, [r3, #0]
 800a224:	e4e9      	b.n	8009bfa <_dtoa_r+0x8a>
 800a226:	465f      	mov	r7, fp
 800a228:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a22c:	1e6b      	subs	r3, r5, #1
 800a22e:	2a39      	cmp	r2, #57	; 0x39
 800a230:	d106      	bne.n	800a240 <_dtoa_r+0x6d0>
 800a232:	9a06      	ldr	r2, [sp, #24]
 800a234:	429a      	cmp	r2, r3
 800a236:	d107      	bne.n	800a248 <_dtoa_r+0x6d8>
 800a238:	2330      	movs	r3, #48	; 0x30
 800a23a:	7013      	strb	r3, [r2, #0]
 800a23c:	4613      	mov	r3, r2
 800a23e:	3701      	adds	r7, #1
 800a240:	781a      	ldrb	r2, [r3, #0]
 800a242:	3201      	adds	r2, #1
 800a244:	701a      	strb	r2, [r3, #0]
 800a246:	e78e      	b.n	800a166 <_dtoa_r+0x5f6>
 800a248:	461d      	mov	r5, r3
 800a24a:	e7ed      	b.n	800a228 <_dtoa_r+0x6b8>
 800a24c:	2200      	movs	r2, #0
 800a24e:	4bb5      	ldr	r3, [pc, #724]	; (800a524 <_dtoa_r+0x9b4>)
 800a250:	f7f6 f93e 	bl	80004d0 <__aeabi_dmul>
 800a254:	2200      	movs	r2, #0
 800a256:	2300      	movs	r3, #0
 800a258:	4606      	mov	r6, r0
 800a25a:	460f      	mov	r7, r1
 800a25c:	f7f6 fba0 	bl	80009a0 <__aeabi_dcmpeq>
 800a260:	2800      	cmp	r0, #0
 800a262:	d09c      	beq.n	800a19e <_dtoa_r+0x62e>
 800a264:	e7cf      	b.n	800a206 <_dtoa_r+0x696>
 800a266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a268:	2a00      	cmp	r2, #0
 800a26a:	f000 8129 	beq.w	800a4c0 <_dtoa_r+0x950>
 800a26e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a270:	2a01      	cmp	r2, #1
 800a272:	f300 810e 	bgt.w	800a492 <_dtoa_r+0x922>
 800a276:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a278:	2a00      	cmp	r2, #0
 800a27a:	f000 8106 	beq.w	800a48a <_dtoa_r+0x91a>
 800a27e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a282:	4645      	mov	r5, r8
 800a284:	9e08      	ldr	r6, [sp, #32]
 800a286:	9a07      	ldr	r2, [sp, #28]
 800a288:	2101      	movs	r1, #1
 800a28a:	441a      	add	r2, r3
 800a28c:	4620      	mov	r0, r4
 800a28e:	4498      	add	r8, r3
 800a290:	9207      	str	r2, [sp, #28]
 800a292:	f000 fd7f 	bl	800ad94 <__i2b>
 800a296:	4607      	mov	r7, r0
 800a298:	2d00      	cmp	r5, #0
 800a29a:	dd0b      	ble.n	800a2b4 <_dtoa_r+0x744>
 800a29c:	9b07      	ldr	r3, [sp, #28]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	dd08      	ble.n	800a2b4 <_dtoa_r+0x744>
 800a2a2:	42ab      	cmp	r3, r5
 800a2a4:	bfa8      	it	ge
 800a2a6:	462b      	movge	r3, r5
 800a2a8:	9a07      	ldr	r2, [sp, #28]
 800a2aa:	eba8 0803 	sub.w	r8, r8, r3
 800a2ae:	1aed      	subs	r5, r5, r3
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	9307      	str	r3, [sp, #28]
 800a2b4:	9b08      	ldr	r3, [sp, #32]
 800a2b6:	b1fb      	cbz	r3, 800a2f8 <_dtoa_r+0x788>
 800a2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 8104 	beq.w	800a4c8 <_dtoa_r+0x958>
 800a2c0:	2e00      	cmp	r6, #0
 800a2c2:	dd11      	ble.n	800a2e8 <_dtoa_r+0x778>
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	4632      	mov	r2, r6
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f000 fdf9 	bl	800aec0 <__pow5mult>
 800a2ce:	4652      	mov	r2, sl
 800a2d0:	4601      	mov	r1, r0
 800a2d2:	4607      	mov	r7, r0
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 fd66 	bl	800ada6 <__multiply>
 800a2da:	4651      	mov	r1, sl
 800a2dc:	900a      	str	r0, [sp, #40]	; 0x28
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f000 fcb8 	bl	800ac54 <_Bfree>
 800a2e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e6:	469a      	mov	sl, r3
 800a2e8:	9b08      	ldr	r3, [sp, #32]
 800a2ea:	1b9a      	subs	r2, r3, r6
 800a2ec:	d004      	beq.n	800a2f8 <_dtoa_r+0x788>
 800a2ee:	4651      	mov	r1, sl
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 fde5 	bl	800aec0 <__pow5mult>
 800a2f6:	4682      	mov	sl, r0
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f000 fd4a 	bl	800ad94 <__i2b>
 800a300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a302:	4606      	mov	r6, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	f340 80e1 	ble.w	800a4cc <_dtoa_r+0x95c>
 800a30a:	461a      	mov	r2, r3
 800a30c:	4601      	mov	r1, r0
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 fdd6 	bl	800aec0 <__pow5mult>
 800a314:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a316:	4606      	mov	r6, r0
 800a318:	2b01      	cmp	r3, #1
 800a31a:	f340 80da 	ble.w	800a4d2 <_dtoa_r+0x962>
 800a31e:	2300      	movs	r3, #0
 800a320:	9308      	str	r3, [sp, #32]
 800a322:	6933      	ldr	r3, [r6, #16]
 800a324:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a328:	6918      	ldr	r0, [r3, #16]
 800a32a:	f000 fce5 	bl	800acf8 <__hi0bits>
 800a32e:	f1c0 0020 	rsb	r0, r0, #32
 800a332:	9b07      	ldr	r3, [sp, #28]
 800a334:	4418      	add	r0, r3
 800a336:	f010 001f 	ands.w	r0, r0, #31
 800a33a:	f000 80f0 	beq.w	800a51e <_dtoa_r+0x9ae>
 800a33e:	f1c0 0320 	rsb	r3, r0, #32
 800a342:	2b04      	cmp	r3, #4
 800a344:	f340 80e2 	ble.w	800a50c <_dtoa_r+0x99c>
 800a348:	9b07      	ldr	r3, [sp, #28]
 800a34a:	f1c0 001c 	rsb	r0, r0, #28
 800a34e:	4480      	add	r8, r0
 800a350:	4405      	add	r5, r0
 800a352:	4403      	add	r3, r0
 800a354:	9307      	str	r3, [sp, #28]
 800a356:	f1b8 0f00 	cmp.w	r8, #0
 800a35a:	dd05      	ble.n	800a368 <_dtoa_r+0x7f8>
 800a35c:	4651      	mov	r1, sl
 800a35e:	4642      	mov	r2, r8
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fdfb 	bl	800af5c <__lshift>
 800a366:	4682      	mov	sl, r0
 800a368:	9b07      	ldr	r3, [sp, #28]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	dd05      	ble.n	800a37a <_dtoa_r+0x80a>
 800a36e:	4631      	mov	r1, r6
 800a370:	461a      	mov	r2, r3
 800a372:	4620      	mov	r0, r4
 800a374:	f000 fdf2 	bl	800af5c <__lshift>
 800a378:	4606      	mov	r6, r0
 800a37a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 80d3 	beq.w	800a528 <_dtoa_r+0x9b8>
 800a382:	4631      	mov	r1, r6
 800a384:	4650      	mov	r0, sl
 800a386:	f000 fe3a 	bl	800affe <__mcmp>
 800a38a:	2800      	cmp	r0, #0
 800a38c:	f280 80cc 	bge.w	800a528 <_dtoa_r+0x9b8>
 800a390:	2300      	movs	r3, #0
 800a392:	4651      	mov	r1, sl
 800a394:	220a      	movs	r2, #10
 800a396:	4620      	mov	r0, r4
 800a398:	f000 fc73 	bl	800ac82 <__multadd>
 800a39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a39e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a3a2:	4682      	mov	sl, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 81a9 	beq.w	800a6fc <_dtoa_r+0xb8c>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	220a      	movs	r2, #10
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 fc66 	bl	800ac82 <__multadd>
 800a3b6:	9b04      	ldr	r3, [sp, #16]
 800a3b8:	4607      	mov	r7, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dc03      	bgt.n	800a3c6 <_dtoa_r+0x856>
 800a3be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	f300 80b9 	bgt.w	800a538 <_dtoa_r+0x9c8>
 800a3c6:	2d00      	cmp	r5, #0
 800a3c8:	dd05      	ble.n	800a3d6 <_dtoa_r+0x866>
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	462a      	mov	r2, r5
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 fdc4 	bl	800af5c <__lshift>
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	9b08      	ldr	r3, [sp, #32]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 8110 	beq.w	800a5fe <_dtoa_r+0xa8e>
 800a3de:	6879      	ldr	r1, [r7, #4]
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f000 fc03 	bl	800abec <_Balloc>
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	f107 010c 	add.w	r1, r7, #12
 800a3ee:	3202      	adds	r2, #2
 800a3f0:	0092      	lsls	r2, r2, #2
 800a3f2:	300c      	adds	r0, #12
 800a3f4:	f7fe fae6 	bl	80089c4 <memcpy>
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f000 fdad 	bl	800af5c <__lshift>
 800a402:	9707      	str	r7, [sp, #28]
 800a404:	4607      	mov	r7, r0
 800a406:	9b02      	ldr	r3, [sp, #8]
 800a408:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	9308      	str	r3, [sp, #32]
 800a412:	4631      	mov	r1, r6
 800a414:	4650      	mov	r0, sl
 800a416:	f7ff fb1f 	bl	8009a58 <quorem>
 800a41a:	9907      	ldr	r1, [sp, #28]
 800a41c:	4605      	mov	r5, r0
 800a41e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a422:	4650      	mov	r0, sl
 800a424:	f000 fdeb 	bl	800affe <__mcmp>
 800a428:	463a      	mov	r2, r7
 800a42a:	9002      	str	r0, [sp, #8]
 800a42c:	4631      	mov	r1, r6
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 fdff 	bl	800b032 <__mdiff>
 800a434:	68c3      	ldr	r3, [r0, #12]
 800a436:	4602      	mov	r2, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f040 80e2 	bne.w	800a602 <_dtoa_r+0xa92>
 800a43e:	4601      	mov	r1, r0
 800a440:	9009      	str	r0, [sp, #36]	; 0x24
 800a442:	4650      	mov	r0, sl
 800a444:	f000 fddb 	bl	800affe <__mcmp>
 800a448:	4603      	mov	r3, r0
 800a44a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a44c:	4611      	mov	r1, r2
 800a44e:	4620      	mov	r0, r4
 800a450:	9309      	str	r3, [sp, #36]	; 0x24
 800a452:	f000 fbff 	bl	800ac54 <_Bfree>
 800a456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f040 80d4 	bne.w	800a606 <_dtoa_r+0xa96>
 800a45e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a460:	2a00      	cmp	r2, #0
 800a462:	f040 80d0 	bne.w	800a606 <_dtoa_r+0xa96>
 800a466:	9a08      	ldr	r2, [sp, #32]
 800a468:	2a00      	cmp	r2, #0
 800a46a:	f040 80cc 	bne.w	800a606 <_dtoa_r+0xa96>
 800a46e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a472:	f000 80e8 	beq.w	800a646 <_dtoa_r+0xad6>
 800a476:	9b02      	ldr	r3, [sp, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	dd01      	ble.n	800a480 <_dtoa_r+0x910>
 800a47c:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800a480:	f108 0501 	add.w	r5, r8, #1
 800a484:	f888 9000 	strb.w	r9, [r8]
 800a488:	e06b      	b.n	800a562 <_dtoa_r+0x9f2>
 800a48a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a48c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a490:	e6f7      	b.n	800a282 <_dtoa_r+0x712>
 800a492:	9b08      	ldr	r3, [sp, #32]
 800a494:	f109 36ff 	add.w	r6, r9, #4294967295
 800a498:	42b3      	cmp	r3, r6
 800a49a:	bfb7      	itett	lt
 800a49c:	9b08      	ldrlt	r3, [sp, #32]
 800a49e:	1b9e      	subge	r6, r3, r6
 800a4a0:	1af2      	sublt	r2, r6, r3
 800a4a2:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a4a4:	bfbf      	itttt	lt
 800a4a6:	9608      	strlt	r6, [sp, #32]
 800a4a8:	189b      	addlt	r3, r3, r2
 800a4aa:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a4ac:	2600      	movlt	r6, #0
 800a4ae:	f1b9 0f00 	cmp.w	r9, #0
 800a4b2:	bfb9      	ittee	lt
 800a4b4:	eba8 0509 	sublt.w	r5, r8, r9
 800a4b8:	2300      	movlt	r3, #0
 800a4ba:	4645      	movge	r5, r8
 800a4bc:	464b      	movge	r3, r9
 800a4be:	e6e2      	b.n	800a286 <_dtoa_r+0x716>
 800a4c0:	9e08      	ldr	r6, [sp, #32]
 800a4c2:	4645      	mov	r5, r8
 800a4c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a4c6:	e6e7      	b.n	800a298 <_dtoa_r+0x728>
 800a4c8:	9a08      	ldr	r2, [sp, #32]
 800a4ca:	e710      	b.n	800a2ee <_dtoa_r+0x77e>
 800a4cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	dc18      	bgt.n	800a504 <_dtoa_r+0x994>
 800a4d2:	9b02      	ldr	r3, [sp, #8]
 800a4d4:	b9b3      	cbnz	r3, 800a504 <_dtoa_r+0x994>
 800a4d6:	9b03      	ldr	r3, [sp, #12]
 800a4d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4dc:	b9a3      	cbnz	r3, 800a508 <_dtoa_r+0x998>
 800a4de:	9b03      	ldr	r3, [sp, #12]
 800a4e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4e4:	0d1b      	lsrs	r3, r3, #20
 800a4e6:	051b      	lsls	r3, r3, #20
 800a4e8:	b12b      	cbz	r3, 800a4f6 <_dtoa_r+0x986>
 800a4ea:	9b07      	ldr	r3, [sp, #28]
 800a4ec:	f108 0801 	add.w	r8, r8, #1
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	9307      	str	r3, [sp, #28]
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	9308      	str	r3, [sp, #32]
 800a4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f47f af11 	bne.w	800a322 <_dtoa_r+0x7b2>
 800a500:	2001      	movs	r0, #1
 800a502:	e716      	b.n	800a332 <_dtoa_r+0x7c2>
 800a504:	2300      	movs	r3, #0
 800a506:	e7f6      	b.n	800a4f6 <_dtoa_r+0x986>
 800a508:	9b02      	ldr	r3, [sp, #8]
 800a50a:	e7f4      	b.n	800a4f6 <_dtoa_r+0x986>
 800a50c:	f43f af23 	beq.w	800a356 <_dtoa_r+0x7e6>
 800a510:	9a07      	ldr	r2, [sp, #28]
 800a512:	331c      	adds	r3, #28
 800a514:	441a      	add	r2, r3
 800a516:	4498      	add	r8, r3
 800a518:	441d      	add	r5, r3
 800a51a:	4613      	mov	r3, r2
 800a51c:	e71a      	b.n	800a354 <_dtoa_r+0x7e4>
 800a51e:	4603      	mov	r3, r0
 800a520:	e7f6      	b.n	800a510 <_dtoa_r+0x9a0>
 800a522:	bf00      	nop
 800a524:	40240000 	.word	0x40240000
 800a528:	f1b9 0f00 	cmp.w	r9, #0
 800a52c:	dc33      	bgt.n	800a596 <_dtoa_r+0xa26>
 800a52e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a530:	2b02      	cmp	r3, #2
 800a532:	dd30      	ble.n	800a596 <_dtoa_r+0xa26>
 800a534:	f8cd 9010 	str.w	r9, [sp, #16]
 800a538:	9b04      	ldr	r3, [sp, #16]
 800a53a:	b963      	cbnz	r3, 800a556 <_dtoa_r+0x9e6>
 800a53c:	4631      	mov	r1, r6
 800a53e:	2205      	movs	r2, #5
 800a540:	4620      	mov	r0, r4
 800a542:	f000 fb9e 	bl	800ac82 <__multadd>
 800a546:	4601      	mov	r1, r0
 800a548:	4606      	mov	r6, r0
 800a54a:	4650      	mov	r0, sl
 800a54c:	f000 fd57 	bl	800affe <__mcmp>
 800a550:	2800      	cmp	r0, #0
 800a552:	f73f ad5c 	bgt.w	800a00e <_dtoa_r+0x49e>
 800a556:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a558:	9d06      	ldr	r5, [sp, #24]
 800a55a:	ea6f 0b03 	mvn.w	fp, r3
 800a55e:	2300      	movs	r3, #0
 800a560:	9307      	str	r3, [sp, #28]
 800a562:	4631      	mov	r1, r6
 800a564:	4620      	mov	r0, r4
 800a566:	f000 fb75 	bl	800ac54 <_Bfree>
 800a56a:	2f00      	cmp	r7, #0
 800a56c:	f43f ae4b 	beq.w	800a206 <_dtoa_r+0x696>
 800a570:	9b07      	ldr	r3, [sp, #28]
 800a572:	b12b      	cbz	r3, 800a580 <_dtoa_r+0xa10>
 800a574:	42bb      	cmp	r3, r7
 800a576:	d003      	beq.n	800a580 <_dtoa_r+0xa10>
 800a578:	4619      	mov	r1, r3
 800a57a:	4620      	mov	r0, r4
 800a57c:	f000 fb6a 	bl	800ac54 <_Bfree>
 800a580:	4639      	mov	r1, r7
 800a582:	4620      	mov	r0, r4
 800a584:	f000 fb66 	bl	800ac54 <_Bfree>
 800a588:	e63d      	b.n	800a206 <_dtoa_r+0x696>
 800a58a:	2600      	movs	r6, #0
 800a58c:	4637      	mov	r7, r6
 800a58e:	e7e2      	b.n	800a556 <_dtoa_r+0x9e6>
 800a590:	46bb      	mov	fp, r7
 800a592:	4637      	mov	r7, r6
 800a594:	e53b      	b.n	800a00e <_dtoa_r+0x49e>
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	f8cd 9010 	str.w	r9, [sp, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f47f af12 	bne.w	800a3c6 <_dtoa_r+0x856>
 800a5a2:	9d06      	ldr	r5, [sp, #24]
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4650      	mov	r0, sl
 800a5a8:	f7ff fa56 	bl	8009a58 <quorem>
 800a5ac:	9b06      	ldr	r3, [sp, #24]
 800a5ae:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a5b2:	f805 9b01 	strb.w	r9, [r5], #1
 800a5b6:	9a04      	ldr	r2, [sp, #16]
 800a5b8:	1aeb      	subs	r3, r5, r3
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	f300 8081 	bgt.w	800a6c2 <_dtoa_r+0xb52>
 800a5c0:	9b06      	ldr	r3, [sp, #24]
 800a5c2:	2a01      	cmp	r2, #1
 800a5c4:	bfac      	ite	ge
 800a5c6:	189b      	addge	r3, r3, r2
 800a5c8:	3301      	addlt	r3, #1
 800a5ca:	4698      	mov	r8, r3
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	9307      	str	r3, [sp, #28]
 800a5d0:	4651      	mov	r1, sl
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f000 fcc1 	bl	800af5c <__lshift>
 800a5da:	4631      	mov	r1, r6
 800a5dc:	4682      	mov	sl, r0
 800a5de:	f000 fd0e 	bl	800affe <__mcmp>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	dc34      	bgt.n	800a650 <_dtoa_r+0xae0>
 800a5e6:	d102      	bne.n	800a5ee <_dtoa_r+0xa7e>
 800a5e8:	f019 0f01 	tst.w	r9, #1
 800a5ec:	d130      	bne.n	800a650 <_dtoa_r+0xae0>
 800a5ee:	4645      	mov	r5, r8
 800a5f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5f4:	1e6a      	subs	r2, r5, #1
 800a5f6:	2b30      	cmp	r3, #48	; 0x30
 800a5f8:	d1b3      	bne.n	800a562 <_dtoa_r+0x9f2>
 800a5fa:	4615      	mov	r5, r2
 800a5fc:	e7f8      	b.n	800a5f0 <_dtoa_r+0xa80>
 800a5fe:	4638      	mov	r0, r7
 800a600:	e6ff      	b.n	800a402 <_dtoa_r+0x892>
 800a602:	2301      	movs	r3, #1
 800a604:	e722      	b.n	800a44c <_dtoa_r+0x8dc>
 800a606:	9a02      	ldr	r2, [sp, #8]
 800a608:	2a00      	cmp	r2, #0
 800a60a:	db04      	blt.n	800a616 <_dtoa_r+0xaa6>
 800a60c:	d128      	bne.n	800a660 <_dtoa_r+0xaf0>
 800a60e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a610:	bb32      	cbnz	r2, 800a660 <_dtoa_r+0xaf0>
 800a612:	9a08      	ldr	r2, [sp, #32]
 800a614:	bb22      	cbnz	r2, 800a660 <_dtoa_r+0xaf0>
 800a616:	2b00      	cmp	r3, #0
 800a618:	f77f af32 	ble.w	800a480 <_dtoa_r+0x910>
 800a61c:	4651      	mov	r1, sl
 800a61e:	2201      	movs	r2, #1
 800a620:	4620      	mov	r0, r4
 800a622:	f000 fc9b 	bl	800af5c <__lshift>
 800a626:	4631      	mov	r1, r6
 800a628:	4682      	mov	sl, r0
 800a62a:	f000 fce8 	bl	800affe <__mcmp>
 800a62e:	2800      	cmp	r0, #0
 800a630:	dc05      	bgt.n	800a63e <_dtoa_r+0xace>
 800a632:	f47f af25 	bne.w	800a480 <_dtoa_r+0x910>
 800a636:	f019 0f01 	tst.w	r9, #1
 800a63a:	f43f af21 	beq.w	800a480 <_dtoa_r+0x910>
 800a63e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a642:	f47f af1b 	bne.w	800a47c <_dtoa_r+0x90c>
 800a646:	2339      	movs	r3, #57	; 0x39
 800a648:	f108 0801 	add.w	r8, r8, #1
 800a64c:	f808 3c01 	strb.w	r3, [r8, #-1]
 800a650:	4645      	mov	r5, r8
 800a652:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a656:	1e6a      	subs	r2, r5, #1
 800a658:	2b39      	cmp	r3, #57	; 0x39
 800a65a:	d03a      	beq.n	800a6d2 <_dtoa_r+0xb62>
 800a65c:	3301      	adds	r3, #1
 800a65e:	e03f      	b.n	800a6e0 <_dtoa_r+0xb70>
 800a660:	2b00      	cmp	r3, #0
 800a662:	f108 0501 	add.w	r5, r8, #1
 800a666:	dd05      	ble.n	800a674 <_dtoa_r+0xb04>
 800a668:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a66c:	d0eb      	beq.n	800a646 <_dtoa_r+0xad6>
 800a66e:	f109 0901 	add.w	r9, r9, #1
 800a672:	e707      	b.n	800a484 <_dtoa_r+0x914>
 800a674:	9b06      	ldr	r3, [sp, #24]
 800a676:	9a04      	ldr	r2, [sp, #16]
 800a678:	1aeb      	subs	r3, r5, r3
 800a67a:	4293      	cmp	r3, r2
 800a67c:	46a8      	mov	r8, r5
 800a67e:	f805 9c01 	strb.w	r9, [r5, #-1]
 800a682:	d0a5      	beq.n	800a5d0 <_dtoa_r+0xa60>
 800a684:	4651      	mov	r1, sl
 800a686:	2300      	movs	r3, #0
 800a688:	220a      	movs	r2, #10
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 faf9 	bl	800ac82 <__multadd>
 800a690:	9b07      	ldr	r3, [sp, #28]
 800a692:	4682      	mov	sl, r0
 800a694:	42bb      	cmp	r3, r7
 800a696:	f04f 020a 	mov.w	r2, #10
 800a69a:	f04f 0300 	mov.w	r3, #0
 800a69e:	9907      	ldr	r1, [sp, #28]
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	d104      	bne.n	800a6ae <_dtoa_r+0xb3e>
 800a6a4:	f000 faed 	bl	800ac82 <__multadd>
 800a6a8:	9007      	str	r0, [sp, #28]
 800a6aa:	4607      	mov	r7, r0
 800a6ac:	e6b1      	b.n	800a412 <_dtoa_r+0x8a2>
 800a6ae:	f000 fae8 	bl	800ac82 <__multadd>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9007      	str	r0, [sp, #28]
 800a6b6:	220a      	movs	r2, #10
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f000 fae1 	bl	800ac82 <__multadd>
 800a6c0:	e7f3      	b.n	800a6aa <_dtoa_r+0xb3a>
 800a6c2:	4651      	mov	r1, sl
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	220a      	movs	r2, #10
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f000 fada 	bl	800ac82 <__multadd>
 800a6ce:	4682      	mov	sl, r0
 800a6d0:	e768      	b.n	800a5a4 <_dtoa_r+0xa34>
 800a6d2:	9b06      	ldr	r3, [sp, #24]
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d105      	bne.n	800a6e4 <_dtoa_r+0xb74>
 800a6d8:	2331      	movs	r3, #49	; 0x31
 800a6da:	9a06      	ldr	r2, [sp, #24]
 800a6dc:	f10b 0b01 	add.w	fp, fp, #1
 800a6e0:	7013      	strb	r3, [r2, #0]
 800a6e2:	e73e      	b.n	800a562 <_dtoa_r+0x9f2>
 800a6e4:	4615      	mov	r5, r2
 800a6e6:	e7b4      	b.n	800a652 <_dtoa_r+0xae2>
 800a6e8:	4b09      	ldr	r3, [pc, #36]	; (800a710 <_dtoa_r+0xba0>)
 800a6ea:	f7ff baa3 	b.w	8009c34 <_dtoa_r+0xc4>
 800a6ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f47f aa7d 	bne.w	8009bf0 <_dtoa_r+0x80>
 800a6f6:	4b07      	ldr	r3, [pc, #28]	; (800a714 <_dtoa_r+0xba4>)
 800a6f8:	f7ff ba9c 	b.w	8009c34 <_dtoa_r+0xc4>
 800a6fc:	9b04      	ldr	r3, [sp, #16]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f73f af4f 	bgt.w	800a5a2 <_dtoa_r+0xa32>
 800a704:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a706:	2b02      	cmp	r3, #2
 800a708:	f77f af4b 	ble.w	800a5a2 <_dtoa_r+0xa32>
 800a70c:	e714      	b.n	800a538 <_dtoa_r+0x9c8>
 800a70e:	bf00      	nop
 800a710:	08017b9e 	.word	0x08017b9e
 800a714:	08017bc0 	.word	0x08017bc0

0800a718 <_localeconv_r>:
 800a718:	4b04      	ldr	r3, [pc, #16]	; (800a72c <_localeconv_r+0x14>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6a18      	ldr	r0, [r3, #32]
 800a71e:	4b04      	ldr	r3, [pc, #16]	; (800a730 <_localeconv_r+0x18>)
 800a720:	2800      	cmp	r0, #0
 800a722:	bf08      	it	eq
 800a724:	4618      	moveq	r0, r3
 800a726:	30f0      	adds	r0, #240	; 0xf0
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	20000414 	.word	0x20000414
 800a730:	20000508 	.word	0x20000508

0800a734 <__retarget_lock_acquire_recursive>:
 800a734:	4770      	bx	lr

0800a736 <__retarget_lock_release_recursive>:
 800a736:	4770      	bx	lr

0800a738 <malloc>:
 800a738:	4b02      	ldr	r3, [pc, #8]	; (800a744 <malloc+0xc>)
 800a73a:	4601      	mov	r1, r0
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	f000 b803 	b.w	800a748 <_malloc_r>
 800a742:	bf00      	nop
 800a744:	20000414 	.word	0x20000414

0800a748 <_malloc_r>:
 800a748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	f101 040b 	add.w	r4, r1, #11
 800a750:	2c16      	cmp	r4, #22
 800a752:	4681      	mov	r9, r0
 800a754:	d907      	bls.n	800a766 <_malloc_r+0x1e>
 800a756:	f034 0407 	bics.w	r4, r4, #7
 800a75a:	d505      	bpl.n	800a768 <_malloc_r+0x20>
 800a75c:	230c      	movs	r3, #12
 800a75e:	f8c9 3000 	str.w	r3, [r9]
 800a762:	2600      	movs	r6, #0
 800a764:	e131      	b.n	800a9ca <_malloc_r+0x282>
 800a766:	2410      	movs	r4, #16
 800a768:	428c      	cmp	r4, r1
 800a76a:	d3f7      	bcc.n	800a75c <_malloc_r+0x14>
 800a76c:	4648      	mov	r0, r9
 800a76e:	f000 fa31 	bl	800abd4 <__malloc_lock>
 800a772:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800a776:	4d9b      	ldr	r5, [pc, #620]	; (800a9e4 <_malloc_r+0x29c>)
 800a778:	d236      	bcs.n	800a7e8 <_malloc_r+0xa0>
 800a77a:	f104 0208 	add.w	r2, r4, #8
 800a77e:	442a      	add	r2, r5
 800a780:	6856      	ldr	r6, [r2, #4]
 800a782:	f1a2 0108 	sub.w	r1, r2, #8
 800a786:	428e      	cmp	r6, r1
 800a788:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800a78c:	d102      	bne.n	800a794 <_malloc_r+0x4c>
 800a78e:	68d6      	ldr	r6, [r2, #12]
 800a790:	42b2      	cmp	r2, r6
 800a792:	d010      	beq.n	800a7b6 <_malloc_r+0x6e>
 800a794:	6873      	ldr	r3, [r6, #4]
 800a796:	68f2      	ldr	r2, [r6, #12]
 800a798:	68b1      	ldr	r1, [r6, #8]
 800a79a:	f023 0303 	bic.w	r3, r3, #3
 800a79e:	60ca      	str	r2, [r1, #12]
 800a7a0:	4433      	add	r3, r6
 800a7a2:	6091      	str	r1, [r2, #8]
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	f042 0201 	orr.w	r2, r2, #1
 800a7aa:	605a      	str	r2, [r3, #4]
 800a7ac:	4648      	mov	r0, r9
 800a7ae:	f000 fa17 	bl	800abe0 <__malloc_unlock>
 800a7b2:	3608      	adds	r6, #8
 800a7b4:	e109      	b.n	800a9ca <_malloc_r+0x282>
 800a7b6:	3302      	adds	r3, #2
 800a7b8:	4a8b      	ldr	r2, [pc, #556]	; (800a9e8 <_malloc_r+0x2a0>)
 800a7ba:	692e      	ldr	r6, [r5, #16]
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4296      	cmp	r6, r2
 800a7c0:	d06d      	beq.n	800a89e <_malloc_r+0x156>
 800a7c2:	6870      	ldr	r0, [r6, #4]
 800a7c4:	f020 0003 	bic.w	r0, r0, #3
 800a7c8:	1b07      	subs	r7, r0, r4
 800a7ca:	2f0f      	cmp	r7, #15
 800a7cc:	dd47      	ble.n	800a85e <_malloc_r+0x116>
 800a7ce:	1933      	adds	r3, r6, r4
 800a7d0:	f044 0401 	orr.w	r4, r4, #1
 800a7d4:	6074      	str	r4, [r6, #4]
 800a7d6:	616b      	str	r3, [r5, #20]
 800a7d8:	612b      	str	r3, [r5, #16]
 800a7da:	60da      	str	r2, [r3, #12]
 800a7dc:	609a      	str	r2, [r3, #8]
 800a7de:	f047 0201 	orr.w	r2, r7, #1
 800a7e2:	605a      	str	r2, [r3, #4]
 800a7e4:	5037      	str	r7, [r6, r0]
 800a7e6:	e7e1      	b.n	800a7ac <_malloc_r+0x64>
 800a7e8:	0a63      	lsrs	r3, r4, #9
 800a7ea:	d02a      	beq.n	800a842 <_malloc_r+0xfa>
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d812      	bhi.n	800a816 <_malloc_r+0xce>
 800a7f0:	09a3      	lsrs	r3, r4, #6
 800a7f2:	3338      	adds	r3, #56	; 0x38
 800a7f4:	1c5a      	adds	r2, r3, #1
 800a7f6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800a7fa:	6856      	ldr	r6, [r2, #4]
 800a7fc:	f1a2 0008 	sub.w	r0, r2, #8
 800a800:	4286      	cmp	r6, r0
 800a802:	d006      	beq.n	800a812 <_malloc_r+0xca>
 800a804:	6872      	ldr	r2, [r6, #4]
 800a806:	f022 0203 	bic.w	r2, r2, #3
 800a80a:	1b11      	subs	r1, r2, r4
 800a80c:	290f      	cmp	r1, #15
 800a80e:	dd1c      	ble.n	800a84a <_malloc_r+0x102>
 800a810:	3b01      	subs	r3, #1
 800a812:	3301      	adds	r3, #1
 800a814:	e7d0      	b.n	800a7b8 <_malloc_r+0x70>
 800a816:	2b14      	cmp	r3, #20
 800a818:	d801      	bhi.n	800a81e <_malloc_r+0xd6>
 800a81a:	335b      	adds	r3, #91	; 0x5b
 800a81c:	e7ea      	b.n	800a7f4 <_malloc_r+0xac>
 800a81e:	2b54      	cmp	r3, #84	; 0x54
 800a820:	d802      	bhi.n	800a828 <_malloc_r+0xe0>
 800a822:	0b23      	lsrs	r3, r4, #12
 800a824:	336e      	adds	r3, #110	; 0x6e
 800a826:	e7e5      	b.n	800a7f4 <_malloc_r+0xac>
 800a828:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a82c:	d802      	bhi.n	800a834 <_malloc_r+0xec>
 800a82e:	0be3      	lsrs	r3, r4, #15
 800a830:	3377      	adds	r3, #119	; 0x77
 800a832:	e7df      	b.n	800a7f4 <_malloc_r+0xac>
 800a834:	f240 5254 	movw	r2, #1364	; 0x554
 800a838:	4293      	cmp	r3, r2
 800a83a:	d804      	bhi.n	800a846 <_malloc_r+0xfe>
 800a83c:	0ca3      	lsrs	r3, r4, #18
 800a83e:	337c      	adds	r3, #124	; 0x7c
 800a840:	e7d8      	b.n	800a7f4 <_malloc_r+0xac>
 800a842:	233f      	movs	r3, #63	; 0x3f
 800a844:	e7d6      	b.n	800a7f4 <_malloc_r+0xac>
 800a846:	237e      	movs	r3, #126	; 0x7e
 800a848:	e7d4      	b.n	800a7f4 <_malloc_r+0xac>
 800a84a:	2900      	cmp	r1, #0
 800a84c:	68f1      	ldr	r1, [r6, #12]
 800a84e:	db04      	blt.n	800a85a <_malloc_r+0x112>
 800a850:	68b3      	ldr	r3, [r6, #8]
 800a852:	60d9      	str	r1, [r3, #12]
 800a854:	608b      	str	r3, [r1, #8]
 800a856:	18b3      	adds	r3, r6, r2
 800a858:	e7a4      	b.n	800a7a4 <_malloc_r+0x5c>
 800a85a:	460e      	mov	r6, r1
 800a85c:	e7d0      	b.n	800a800 <_malloc_r+0xb8>
 800a85e:	2f00      	cmp	r7, #0
 800a860:	616a      	str	r2, [r5, #20]
 800a862:	612a      	str	r2, [r5, #16]
 800a864:	db05      	blt.n	800a872 <_malloc_r+0x12a>
 800a866:	4430      	add	r0, r6
 800a868:	6843      	ldr	r3, [r0, #4]
 800a86a:	f043 0301 	orr.w	r3, r3, #1
 800a86e:	6043      	str	r3, [r0, #4]
 800a870:	e79c      	b.n	800a7ac <_malloc_r+0x64>
 800a872:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a876:	d244      	bcs.n	800a902 <_malloc_r+0x1ba>
 800a878:	2201      	movs	r2, #1
 800a87a:	08c0      	lsrs	r0, r0, #3
 800a87c:	1087      	asrs	r7, r0, #2
 800a87e:	fa02 f707 	lsl.w	r7, r2, r7
 800a882:	686a      	ldr	r2, [r5, #4]
 800a884:	3001      	adds	r0, #1
 800a886:	433a      	orrs	r2, r7
 800a888:	606a      	str	r2, [r5, #4]
 800a88a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800a88e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a892:	3a08      	subs	r2, #8
 800a894:	60f2      	str	r2, [r6, #12]
 800a896:	60b7      	str	r7, [r6, #8]
 800a898:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800a89c:	60fe      	str	r6, [r7, #12]
 800a89e:	2001      	movs	r0, #1
 800a8a0:	109a      	asrs	r2, r3, #2
 800a8a2:	fa00 f202 	lsl.w	r2, r0, r2
 800a8a6:	6868      	ldr	r0, [r5, #4]
 800a8a8:	4282      	cmp	r2, r0
 800a8aa:	f200 809f 	bhi.w	800a9ec <_malloc_r+0x2a4>
 800a8ae:	4202      	tst	r2, r0
 800a8b0:	d106      	bne.n	800a8c0 <_malloc_r+0x178>
 800a8b2:	f023 0303 	bic.w	r3, r3, #3
 800a8b6:	0052      	lsls	r2, r2, #1
 800a8b8:	4202      	tst	r2, r0
 800a8ba:	f103 0304 	add.w	r3, r3, #4
 800a8be:	d0fa      	beq.n	800a8b6 <_malloc_r+0x16e>
 800a8c0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800a8c4:	46e0      	mov	r8, ip
 800a8c6:	469e      	mov	lr, r3
 800a8c8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800a8cc:	4546      	cmp	r6, r8
 800a8ce:	d153      	bne.n	800a978 <_malloc_r+0x230>
 800a8d0:	f10e 0e01 	add.w	lr, lr, #1
 800a8d4:	f01e 0f03 	tst.w	lr, #3
 800a8d8:	f108 0808 	add.w	r8, r8, #8
 800a8dc:	d1f4      	bne.n	800a8c8 <_malloc_r+0x180>
 800a8de:	0798      	lsls	r0, r3, #30
 800a8e0:	d179      	bne.n	800a9d6 <_malloc_r+0x28e>
 800a8e2:	686b      	ldr	r3, [r5, #4]
 800a8e4:	ea23 0302 	bic.w	r3, r3, r2
 800a8e8:	606b      	str	r3, [r5, #4]
 800a8ea:	6868      	ldr	r0, [r5, #4]
 800a8ec:	0052      	lsls	r2, r2, #1
 800a8ee:	4282      	cmp	r2, r0
 800a8f0:	d87c      	bhi.n	800a9ec <_malloc_r+0x2a4>
 800a8f2:	2a00      	cmp	r2, #0
 800a8f4:	d07a      	beq.n	800a9ec <_malloc_r+0x2a4>
 800a8f6:	4673      	mov	r3, lr
 800a8f8:	4202      	tst	r2, r0
 800a8fa:	d1e1      	bne.n	800a8c0 <_malloc_r+0x178>
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	0052      	lsls	r2, r2, #1
 800a900:	e7fa      	b.n	800a8f8 <_malloc_r+0x1b0>
 800a902:	0a42      	lsrs	r2, r0, #9
 800a904:	2a04      	cmp	r2, #4
 800a906:	d815      	bhi.n	800a934 <_malloc_r+0x1ec>
 800a908:	0982      	lsrs	r2, r0, #6
 800a90a:	3238      	adds	r2, #56	; 0x38
 800a90c:	1c57      	adds	r7, r2, #1
 800a90e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800a912:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800a916:	45be      	cmp	lr, r7
 800a918:	d126      	bne.n	800a968 <_malloc_r+0x220>
 800a91a:	2001      	movs	r0, #1
 800a91c:	1092      	asrs	r2, r2, #2
 800a91e:	fa00 f202 	lsl.w	r2, r0, r2
 800a922:	6868      	ldr	r0, [r5, #4]
 800a924:	4310      	orrs	r0, r2
 800a926:	6068      	str	r0, [r5, #4]
 800a928:	f8c6 e00c 	str.w	lr, [r6, #12]
 800a92c:	60b7      	str	r7, [r6, #8]
 800a92e:	f8ce 6008 	str.w	r6, [lr, #8]
 800a932:	e7b3      	b.n	800a89c <_malloc_r+0x154>
 800a934:	2a14      	cmp	r2, #20
 800a936:	d801      	bhi.n	800a93c <_malloc_r+0x1f4>
 800a938:	325b      	adds	r2, #91	; 0x5b
 800a93a:	e7e7      	b.n	800a90c <_malloc_r+0x1c4>
 800a93c:	2a54      	cmp	r2, #84	; 0x54
 800a93e:	d802      	bhi.n	800a946 <_malloc_r+0x1fe>
 800a940:	0b02      	lsrs	r2, r0, #12
 800a942:	326e      	adds	r2, #110	; 0x6e
 800a944:	e7e2      	b.n	800a90c <_malloc_r+0x1c4>
 800a946:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a94a:	d802      	bhi.n	800a952 <_malloc_r+0x20a>
 800a94c:	0bc2      	lsrs	r2, r0, #15
 800a94e:	3277      	adds	r2, #119	; 0x77
 800a950:	e7dc      	b.n	800a90c <_malloc_r+0x1c4>
 800a952:	f240 5754 	movw	r7, #1364	; 0x554
 800a956:	42ba      	cmp	r2, r7
 800a958:	bf9a      	itte	ls
 800a95a:	0c82      	lsrls	r2, r0, #18
 800a95c:	327c      	addls	r2, #124	; 0x7c
 800a95e:	227e      	movhi	r2, #126	; 0x7e
 800a960:	e7d4      	b.n	800a90c <_malloc_r+0x1c4>
 800a962:	68bf      	ldr	r7, [r7, #8]
 800a964:	45be      	cmp	lr, r7
 800a966:	d004      	beq.n	800a972 <_malloc_r+0x22a>
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	f022 0203 	bic.w	r2, r2, #3
 800a96e:	4290      	cmp	r0, r2
 800a970:	d3f7      	bcc.n	800a962 <_malloc_r+0x21a>
 800a972:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800a976:	e7d7      	b.n	800a928 <_malloc_r+0x1e0>
 800a978:	6870      	ldr	r0, [r6, #4]
 800a97a:	68f7      	ldr	r7, [r6, #12]
 800a97c:	f020 0003 	bic.w	r0, r0, #3
 800a980:	eba0 0a04 	sub.w	sl, r0, r4
 800a984:	f1ba 0f0f 	cmp.w	sl, #15
 800a988:	dd10      	ble.n	800a9ac <_malloc_r+0x264>
 800a98a:	68b2      	ldr	r2, [r6, #8]
 800a98c:	1933      	adds	r3, r6, r4
 800a98e:	f044 0401 	orr.w	r4, r4, #1
 800a992:	6074      	str	r4, [r6, #4]
 800a994:	60d7      	str	r7, [r2, #12]
 800a996:	60ba      	str	r2, [r7, #8]
 800a998:	f04a 0201 	orr.w	r2, sl, #1
 800a99c:	616b      	str	r3, [r5, #20]
 800a99e:	612b      	str	r3, [r5, #16]
 800a9a0:	60d9      	str	r1, [r3, #12]
 800a9a2:	6099      	str	r1, [r3, #8]
 800a9a4:	605a      	str	r2, [r3, #4]
 800a9a6:	f846 a000 	str.w	sl, [r6, r0]
 800a9aa:	e6ff      	b.n	800a7ac <_malloc_r+0x64>
 800a9ac:	f1ba 0f00 	cmp.w	sl, #0
 800a9b0:	db0f      	blt.n	800a9d2 <_malloc_r+0x28a>
 800a9b2:	4430      	add	r0, r6
 800a9b4:	6843      	ldr	r3, [r0, #4]
 800a9b6:	f043 0301 	orr.w	r3, r3, #1
 800a9ba:	6043      	str	r3, [r0, #4]
 800a9bc:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800a9c0:	4648      	mov	r0, r9
 800a9c2:	60df      	str	r7, [r3, #12]
 800a9c4:	60bb      	str	r3, [r7, #8]
 800a9c6:	f000 f90b 	bl	800abe0 <__malloc_unlock>
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	b003      	add	sp, #12
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	463e      	mov	r6, r7
 800a9d4:	e77a      	b.n	800a8cc <_malloc_r+0x184>
 800a9d6:	f85c 0908 	ldr.w	r0, [ip], #-8
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	4584      	cmp	ip, r0
 800a9de:	f43f af7e 	beq.w	800a8de <_malloc_r+0x196>
 800a9e2:	e782      	b.n	800a8ea <_malloc_r+0x1a2>
 800a9e4:	20000674 	.word	0x20000674
 800a9e8:	2000067c 	.word	0x2000067c
 800a9ec:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800a9f0:	f8db 6004 	ldr.w	r6, [fp, #4]
 800a9f4:	f026 0603 	bic.w	r6, r6, #3
 800a9f8:	42b4      	cmp	r4, r6
 800a9fa:	d803      	bhi.n	800aa04 <_malloc_r+0x2bc>
 800a9fc:	1b33      	subs	r3, r6, r4
 800a9fe:	2b0f      	cmp	r3, #15
 800aa00:	f300 8095 	bgt.w	800ab2e <_malloc_r+0x3e6>
 800aa04:	4a4f      	ldr	r2, [pc, #316]	; (800ab44 <_malloc_r+0x3fc>)
 800aa06:	eb0b 0306 	add.w	r3, fp, r6
 800aa0a:	6817      	ldr	r7, [r2, #0]
 800aa0c:	4a4e      	ldr	r2, [pc, #312]	; (800ab48 <_malloc_r+0x400>)
 800aa0e:	3710      	adds	r7, #16
 800aa10:	6811      	ldr	r1, [r2, #0]
 800aa12:	4427      	add	r7, r4
 800aa14:	3101      	adds	r1, #1
 800aa16:	d005      	beq.n	800aa24 <_malloc_r+0x2dc>
 800aa18:	494c      	ldr	r1, [pc, #304]	; (800ab4c <_malloc_r+0x404>)
 800aa1a:	3901      	subs	r1, #1
 800aa1c:	440f      	add	r7, r1
 800aa1e:	3101      	adds	r1, #1
 800aa20:	4249      	negs	r1, r1
 800aa22:	400f      	ands	r7, r1
 800aa24:	4639      	mov	r1, r7
 800aa26:	4648      	mov	r0, r9
 800aa28:	9201      	str	r2, [sp, #4]
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	f000 fd32 	bl	800b494 <_sbrk_r>
 800aa30:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aa34:	4680      	mov	r8, r0
 800aa36:	d055      	beq.n	800aae4 <_malloc_r+0x39c>
 800aa38:	9b00      	ldr	r3, [sp, #0]
 800aa3a:	9a01      	ldr	r2, [sp, #4]
 800aa3c:	4283      	cmp	r3, r0
 800aa3e:	d901      	bls.n	800aa44 <_malloc_r+0x2fc>
 800aa40:	45ab      	cmp	fp, r5
 800aa42:	d14f      	bne.n	800aae4 <_malloc_r+0x39c>
 800aa44:	4842      	ldr	r0, [pc, #264]	; (800ab50 <_malloc_r+0x408>)
 800aa46:	4543      	cmp	r3, r8
 800aa48:	6801      	ldr	r1, [r0, #0]
 800aa4a:	4682      	mov	sl, r0
 800aa4c:	eb07 0e01 	add.w	lr, r7, r1
 800aa50:	f8c0 e000 	str.w	lr, [r0]
 800aa54:	493f      	ldr	r1, [pc, #252]	; (800ab54 <_malloc_r+0x40c>)
 800aa56:	d113      	bne.n	800aa80 <_malloc_r+0x338>
 800aa58:	420b      	tst	r3, r1
 800aa5a:	d111      	bne.n	800aa80 <_malloc_r+0x338>
 800aa5c:	68ab      	ldr	r3, [r5, #8]
 800aa5e:	443e      	add	r6, r7
 800aa60:	f046 0601 	orr.w	r6, r6, #1
 800aa64:	605e      	str	r6, [r3, #4]
 800aa66:	4a3c      	ldr	r2, [pc, #240]	; (800ab58 <_malloc_r+0x410>)
 800aa68:	f8da 3000 	ldr.w	r3, [sl]
 800aa6c:	6811      	ldr	r1, [r2, #0]
 800aa6e:	428b      	cmp	r3, r1
 800aa70:	bf88      	it	hi
 800aa72:	6013      	strhi	r3, [r2, #0]
 800aa74:	4a39      	ldr	r2, [pc, #228]	; (800ab5c <_malloc_r+0x414>)
 800aa76:	6811      	ldr	r1, [r2, #0]
 800aa78:	428b      	cmp	r3, r1
 800aa7a:	bf88      	it	hi
 800aa7c:	6013      	strhi	r3, [r2, #0]
 800aa7e:	e031      	b.n	800aae4 <_malloc_r+0x39c>
 800aa80:	6810      	ldr	r0, [r2, #0]
 800aa82:	3001      	adds	r0, #1
 800aa84:	bf1b      	ittet	ne
 800aa86:	eba8 0303 	subne.w	r3, r8, r3
 800aa8a:	4473      	addne	r3, lr
 800aa8c:	f8c2 8000 	streq.w	r8, [r2]
 800aa90:	f8ca 3000 	strne.w	r3, [sl]
 800aa94:	f018 0007 	ands.w	r0, r8, #7
 800aa98:	bf1c      	itt	ne
 800aa9a:	f1c0 0008 	rsbne	r0, r0, #8
 800aa9e:	4480      	addne	r8, r0
 800aaa0:	4b2a      	ldr	r3, [pc, #168]	; (800ab4c <_malloc_r+0x404>)
 800aaa2:	4447      	add	r7, r8
 800aaa4:	4418      	add	r0, r3
 800aaa6:	400f      	ands	r7, r1
 800aaa8:	1bc7      	subs	r7, r0, r7
 800aaaa:	4639      	mov	r1, r7
 800aaac:	4648      	mov	r0, r9
 800aaae:	f000 fcf1 	bl	800b494 <_sbrk_r>
 800aab2:	1c43      	adds	r3, r0, #1
 800aab4:	bf04      	itt	eq
 800aab6:	4640      	moveq	r0, r8
 800aab8:	2700      	moveq	r7, #0
 800aaba:	f8da 3000 	ldr.w	r3, [sl]
 800aabe:	eba0 0008 	sub.w	r0, r0, r8
 800aac2:	443b      	add	r3, r7
 800aac4:	4407      	add	r7, r0
 800aac6:	f047 0701 	orr.w	r7, r7, #1
 800aaca:	45ab      	cmp	fp, r5
 800aacc:	f8c5 8008 	str.w	r8, [r5, #8]
 800aad0:	f8ca 3000 	str.w	r3, [sl]
 800aad4:	f8c8 7004 	str.w	r7, [r8, #4]
 800aad8:	d0c5      	beq.n	800aa66 <_malloc_r+0x31e>
 800aada:	2e0f      	cmp	r6, #15
 800aadc:	d810      	bhi.n	800ab00 <_malloc_r+0x3b8>
 800aade:	2301      	movs	r3, #1
 800aae0:	f8c8 3004 	str.w	r3, [r8, #4]
 800aae4:	68ab      	ldr	r3, [r5, #8]
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	f022 0203 	bic.w	r2, r2, #3
 800aaec:	4294      	cmp	r4, r2
 800aaee:	eba2 0304 	sub.w	r3, r2, r4
 800aaf2:	d801      	bhi.n	800aaf8 <_malloc_r+0x3b0>
 800aaf4:	2b0f      	cmp	r3, #15
 800aaf6:	dc1a      	bgt.n	800ab2e <_malloc_r+0x3e6>
 800aaf8:	4648      	mov	r0, r9
 800aafa:	f000 f871 	bl	800abe0 <__malloc_unlock>
 800aafe:	e630      	b.n	800a762 <_malloc_r+0x1a>
 800ab00:	2205      	movs	r2, #5
 800ab02:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ab06:	3e0c      	subs	r6, #12
 800ab08:	f026 0607 	bic.w	r6, r6, #7
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	4333      	orrs	r3, r6
 800ab12:	f8cb 3004 	str.w	r3, [fp, #4]
 800ab16:	2e0f      	cmp	r6, #15
 800ab18:	eb0b 0306 	add.w	r3, fp, r6
 800ab1c:	605a      	str	r2, [r3, #4]
 800ab1e:	609a      	str	r2, [r3, #8]
 800ab20:	d9a1      	bls.n	800aa66 <_malloc_r+0x31e>
 800ab22:	f10b 0108 	add.w	r1, fp, #8
 800ab26:	4648      	mov	r0, r9
 800ab28:	f000 fdd2 	bl	800b6d0 <_free_r>
 800ab2c:	e79b      	b.n	800aa66 <_malloc_r+0x31e>
 800ab2e:	68ae      	ldr	r6, [r5, #8]
 800ab30:	f044 0201 	orr.w	r2, r4, #1
 800ab34:	f043 0301 	orr.w	r3, r3, #1
 800ab38:	4434      	add	r4, r6
 800ab3a:	6072      	str	r2, [r6, #4]
 800ab3c:	60ac      	str	r4, [r5, #8]
 800ab3e:	6063      	str	r3, [r4, #4]
 800ab40:	e634      	b.n	800a7ac <_malloc_r+0x64>
 800ab42:	bf00      	nop
 800ab44:	20000d78 	.word	0x20000d78
 800ab48:	20000a7c 	.word	0x20000a7c
 800ab4c:	00000080 	.word	0x00000080
 800ab50:	20000d48 	.word	0x20000d48
 800ab54:	0000007f 	.word	0x0000007f
 800ab58:	20000d70 	.word	0x20000d70
 800ab5c:	20000d74 	.word	0x20000d74

0800ab60 <__ascii_mbtowc>:
 800ab60:	b082      	sub	sp, #8
 800ab62:	b901      	cbnz	r1, 800ab66 <__ascii_mbtowc+0x6>
 800ab64:	a901      	add	r1, sp, #4
 800ab66:	b142      	cbz	r2, 800ab7a <__ascii_mbtowc+0x1a>
 800ab68:	b14b      	cbz	r3, 800ab7e <__ascii_mbtowc+0x1e>
 800ab6a:	7813      	ldrb	r3, [r2, #0]
 800ab6c:	600b      	str	r3, [r1, #0]
 800ab6e:	7812      	ldrb	r2, [r2, #0]
 800ab70:	1c10      	adds	r0, r2, #0
 800ab72:	bf18      	it	ne
 800ab74:	2001      	movne	r0, #1
 800ab76:	b002      	add	sp, #8
 800ab78:	4770      	bx	lr
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	e7fb      	b.n	800ab76 <__ascii_mbtowc+0x16>
 800ab7e:	f06f 0001 	mvn.w	r0, #1
 800ab82:	e7f8      	b.n	800ab76 <__ascii_mbtowc+0x16>

0800ab84 <memchr>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	b2c9      	uxtb	r1, r1
 800ab88:	4402      	add	r2, r0
 800ab8a:	4290      	cmp	r0, r2
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	d101      	bne.n	800ab94 <memchr+0x10>
 800ab90:	2000      	movs	r0, #0
 800ab92:	bd10      	pop	{r4, pc}
 800ab94:	781c      	ldrb	r4, [r3, #0]
 800ab96:	3001      	adds	r0, #1
 800ab98:	428c      	cmp	r4, r1
 800ab9a:	d1f6      	bne.n	800ab8a <memchr+0x6>
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	bd10      	pop	{r4, pc}

0800aba0 <memmove>:
 800aba0:	4288      	cmp	r0, r1
 800aba2:	b510      	push	{r4, lr}
 800aba4:	eb01 0302 	add.w	r3, r1, r2
 800aba8:	d803      	bhi.n	800abb2 <memmove+0x12>
 800abaa:	1e42      	subs	r2, r0, #1
 800abac:	4299      	cmp	r1, r3
 800abae:	d10c      	bne.n	800abca <memmove+0x2a>
 800abb0:	bd10      	pop	{r4, pc}
 800abb2:	4298      	cmp	r0, r3
 800abb4:	d2f9      	bcs.n	800abaa <memmove+0xa>
 800abb6:	1881      	adds	r1, r0, r2
 800abb8:	1ad2      	subs	r2, r2, r3
 800abba:	42d3      	cmn	r3, r2
 800abbc:	d100      	bne.n	800abc0 <memmove+0x20>
 800abbe:	bd10      	pop	{r4, pc}
 800abc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abc4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800abc8:	e7f7      	b.n	800abba <memmove+0x1a>
 800abca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abce:	f802 4f01 	strb.w	r4, [r2, #1]!
 800abd2:	e7eb      	b.n	800abac <memmove+0xc>

0800abd4 <__malloc_lock>:
 800abd4:	4801      	ldr	r0, [pc, #4]	; (800abdc <__malloc_lock+0x8>)
 800abd6:	f7ff bdad 	b.w	800a734 <__retarget_lock_acquire_recursive>
 800abda:	bf00      	nop
 800abdc:	20001768 	.word	0x20001768

0800abe0 <__malloc_unlock>:
 800abe0:	4801      	ldr	r0, [pc, #4]	; (800abe8 <__malloc_unlock+0x8>)
 800abe2:	f7ff bda8 	b.w	800a736 <__retarget_lock_release_recursive>
 800abe6:	bf00      	nop
 800abe8:	20001768 	.word	0x20001768

0800abec <_Balloc>:
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800abf0:	4604      	mov	r4, r0
 800abf2:	460e      	mov	r6, r1
 800abf4:	b93d      	cbnz	r5, 800ac06 <_Balloc+0x1a>
 800abf6:	2010      	movs	r0, #16
 800abf8:	f7ff fd9e 	bl	800a738 <malloc>
 800abfc:	6260      	str	r0, [r4, #36]	; 0x24
 800abfe:	6045      	str	r5, [r0, #4]
 800ac00:	6085      	str	r5, [r0, #8]
 800ac02:	6005      	str	r5, [r0, #0]
 800ac04:	60c5      	str	r5, [r0, #12]
 800ac06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ac08:	68eb      	ldr	r3, [r5, #12]
 800ac0a:	b183      	cbz	r3, 800ac2e <_Balloc+0x42>
 800ac0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ac14:	b9b8      	cbnz	r0, 800ac46 <_Balloc+0x5a>
 800ac16:	2101      	movs	r1, #1
 800ac18:	fa01 f506 	lsl.w	r5, r1, r6
 800ac1c:	1d6a      	adds	r2, r5, #5
 800ac1e:	0092      	lsls	r2, r2, #2
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fcd2 	bl	800b5ca <_calloc_r>
 800ac26:	b160      	cbz	r0, 800ac42 <_Balloc+0x56>
 800ac28:	6046      	str	r6, [r0, #4]
 800ac2a:	6085      	str	r5, [r0, #8]
 800ac2c:	e00e      	b.n	800ac4c <_Balloc+0x60>
 800ac2e:	2221      	movs	r2, #33	; 0x21
 800ac30:	2104      	movs	r1, #4
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 fcc9 	bl	800b5ca <_calloc_r>
 800ac38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac3a:	60e8      	str	r0, [r5, #12]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1e4      	bne.n	800ac0c <_Balloc+0x20>
 800ac42:	2000      	movs	r0, #0
 800ac44:	bd70      	pop	{r4, r5, r6, pc}
 800ac46:	6802      	ldr	r2, [r0, #0]
 800ac48:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	6103      	str	r3, [r0, #16]
 800ac50:	60c3      	str	r3, [r0, #12]
 800ac52:	bd70      	pop	{r4, r5, r6, pc}

0800ac54 <_Bfree>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ac58:	4606      	mov	r6, r0
 800ac5a:	460d      	mov	r5, r1
 800ac5c:	b93c      	cbnz	r4, 800ac6e <_Bfree+0x1a>
 800ac5e:	2010      	movs	r0, #16
 800ac60:	f7ff fd6a 	bl	800a738 <malloc>
 800ac64:	6270      	str	r0, [r6, #36]	; 0x24
 800ac66:	6044      	str	r4, [r0, #4]
 800ac68:	6084      	str	r4, [r0, #8]
 800ac6a:	6004      	str	r4, [r0, #0]
 800ac6c:	60c4      	str	r4, [r0, #12]
 800ac6e:	b13d      	cbz	r5, 800ac80 <_Bfree+0x2c>
 800ac70:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ac72:	686a      	ldr	r2, [r5, #4]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac7a:	6029      	str	r1, [r5, #0]
 800ac7c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ac80:	bd70      	pop	{r4, r5, r6, pc}

0800ac82 <__multadd>:
 800ac82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac86:	461f      	mov	r7, r3
 800ac88:	4606      	mov	r6, r0
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	690d      	ldr	r5, [r1, #16]
 800ac90:	f101 0e14 	add.w	lr, r1, #20
 800ac94:	f8de 0000 	ldr.w	r0, [lr]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	b281      	uxth	r1, r0
 800ac9c:	fb02 7101 	mla	r1, r2, r1, r7
 800aca0:	0c00      	lsrs	r0, r0, #16
 800aca2:	0c0f      	lsrs	r7, r1, #16
 800aca4:	fb02 7000 	mla	r0, r2, r0, r7
 800aca8:	b289      	uxth	r1, r1
 800acaa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800acae:	429d      	cmp	r5, r3
 800acb0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800acb4:	f84e 1b04 	str.w	r1, [lr], #4
 800acb8:	dcec      	bgt.n	800ac94 <__multadd+0x12>
 800acba:	b1d7      	cbz	r7, 800acf2 <__multadd+0x70>
 800acbc:	68a3      	ldr	r3, [r4, #8]
 800acbe:	429d      	cmp	r5, r3
 800acc0:	db12      	blt.n	800ace8 <__multadd+0x66>
 800acc2:	6861      	ldr	r1, [r4, #4]
 800acc4:	4630      	mov	r0, r6
 800acc6:	3101      	adds	r1, #1
 800acc8:	f7ff ff90 	bl	800abec <_Balloc>
 800accc:	4680      	mov	r8, r0
 800acce:	6922      	ldr	r2, [r4, #16]
 800acd0:	f104 010c 	add.w	r1, r4, #12
 800acd4:	3202      	adds	r2, #2
 800acd6:	0092      	lsls	r2, r2, #2
 800acd8:	300c      	adds	r0, #12
 800acda:	f7fd fe73 	bl	80089c4 <memcpy>
 800acde:	4621      	mov	r1, r4
 800ace0:	4630      	mov	r0, r6
 800ace2:	f7ff ffb7 	bl	800ac54 <_Bfree>
 800ace6:	4644      	mov	r4, r8
 800ace8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acec:	3501      	adds	r5, #1
 800acee:	615f      	str	r7, [r3, #20]
 800acf0:	6125      	str	r5, [r4, #16]
 800acf2:	4620      	mov	r0, r4
 800acf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800acf8 <__hi0bits>:
 800acf8:	0c02      	lsrs	r2, r0, #16
 800acfa:	0412      	lsls	r2, r2, #16
 800acfc:	4603      	mov	r3, r0
 800acfe:	b9b2      	cbnz	r2, 800ad2e <__hi0bits+0x36>
 800ad00:	0403      	lsls	r3, r0, #16
 800ad02:	2010      	movs	r0, #16
 800ad04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad08:	bf04      	itt	eq
 800ad0a:	021b      	lsleq	r3, r3, #8
 800ad0c:	3008      	addeq	r0, #8
 800ad0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad12:	bf04      	itt	eq
 800ad14:	011b      	lsleq	r3, r3, #4
 800ad16:	3004      	addeq	r0, #4
 800ad18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad1c:	bf04      	itt	eq
 800ad1e:	009b      	lsleq	r3, r3, #2
 800ad20:	3002      	addeq	r0, #2
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	db06      	blt.n	800ad34 <__hi0bits+0x3c>
 800ad26:	005b      	lsls	r3, r3, #1
 800ad28:	d503      	bpl.n	800ad32 <__hi0bits+0x3a>
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	4770      	bx	lr
 800ad2e:	2000      	movs	r0, #0
 800ad30:	e7e8      	b.n	800ad04 <__hi0bits+0xc>
 800ad32:	2020      	movs	r0, #32
 800ad34:	4770      	bx	lr

0800ad36 <__lo0bits>:
 800ad36:	6803      	ldr	r3, [r0, #0]
 800ad38:	4601      	mov	r1, r0
 800ad3a:	f013 0207 	ands.w	r2, r3, #7
 800ad3e:	d00b      	beq.n	800ad58 <__lo0bits+0x22>
 800ad40:	07da      	lsls	r2, r3, #31
 800ad42:	d423      	bmi.n	800ad8c <__lo0bits+0x56>
 800ad44:	0798      	lsls	r0, r3, #30
 800ad46:	bf49      	itett	mi
 800ad48:	085b      	lsrmi	r3, r3, #1
 800ad4a:	089b      	lsrpl	r3, r3, #2
 800ad4c:	2001      	movmi	r0, #1
 800ad4e:	600b      	strmi	r3, [r1, #0]
 800ad50:	bf5c      	itt	pl
 800ad52:	600b      	strpl	r3, [r1, #0]
 800ad54:	2002      	movpl	r0, #2
 800ad56:	4770      	bx	lr
 800ad58:	b298      	uxth	r0, r3
 800ad5a:	b9a8      	cbnz	r0, 800ad88 <__lo0bits+0x52>
 800ad5c:	2010      	movs	r0, #16
 800ad5e:	0c1b      	lsrs	r3, r3, #16
 800ad60:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad64:	bf04      	itt	eq
 800ad66:	0a1b      	lsreq	r3, r3, #8
 800ad68:	3008      	addeq	r0, #8
 800ad6a:	071a      	lsls	r2, r3, #28
 800ad6c:	bf04      	itt	eq
 800ad6e:	091b      	lsreq	r3, r3, #4
 800ad70:	3004      	addeq	r0, #4
 800ad72:	079a      	lsls	r2, r3, #30
 800ad74:	bf04      	itt	eq
 800ad76:	089b      	lsreq	r3, r3, #2
 800ad78:	3002      	addeq	r0, #2
 800ad7a:	07da      	lsls	r2, r3, #31
 800ad7c:	d402      	bmi.n	800ad84 <__lo0bits+0x4e>
 800ad7e:	085b      	lsrs	r3, r3, #1
 800ad80:	d006      	beq.n	800ad90 <__lo0bits+0x5a>
 800ad82:	3001      	adds	r0, #1
 800ad84:	600b      	str	r3, [r1, #0]
 800ad86:	4770      	bx	lr
 800ad88:	4610      	mov	r0, r2
 800ad8a:	e7e9      	b.n	800ad60 <__lo0bits+0x2a>
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	4770      	bx	lr
 800ad90:	2020      	movs	r0, #32
 800ad92:	4770      	bx	lr

0800ad94 <__i2b>:
 800ad94:	b510      	push	{r4, lr}
 800ad96:	460c      	mov	r4, r1
 800ad98:	2101      	movs	r1, #1
 800ad9a:	f7ff ff27 	bl	800abec <_Balloc>
 800ad9e:	2201      	movs	r2, #1
 800ada0:	6144      	str	r4, [r0, #20]
 800ada2:	6102      	str	r2, [r0, #16]
 800ada4:	bd10      	pop	{r4, pc}

0800ada6 <__multiply>:
 800ada6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adaa:	4614      	mov	r4, r2
 800adac:	690a      	ldr	r2, [r1, #16]
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	4689      	mov	r9, r1
 800adb2:	429a      	cmp	r2, r3
 800adb4:	bfbe      	ittt	lt
 800adb6:	460b      	movlt	r3, r1
 800adb8:	46a1      	movlt	r9, r4
 800adba:	461c      	movlt	r4, r3
 800adbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800adc0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800adc4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800adc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800adcc:	eb07 060a 	add.w	r6, r7, sl
 800add0:	429e      	cmp	r6, r3
 800add2:	bfc8      	it	gt
 800add4:	3101      	addgt	r1, #1
 800add6:	f7ff ff09 	bl	800abec <_Balloc>
 800adda:	f100 0514 	add.w	r5, r0, #20
 800adde:	462b      	mov	r3, r5
 800ade0:	2200      	movs	r2, #0
 800ade2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ade6:	4543      	cmp	r3, r8
 800ade8:	d316      	bcc.n	800ae18 <__multiply+0x72>
 800adea:	f104 0214 	add.w	r2, r4, #20
 800adee:	f109 0114 	add.w	r1, r9, #20
 800adf2:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800adf6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	9c01      	ldr	r4, [sp, #4]
 800adfe:	4613      	mov	r3, r2
 800ae00:	4294      	cmp	r4, r2
 800ae02:	d80c      	bhi.n	800ae1e <__multiply+0x78>
 800ae04:	2e00      	cmp	r6, #0
 800ae06:	dd03      	ble.n	800ae10 <__multiply+0x6a>
 800ae08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d054      	beq.n	800aeba <__multiply+0x114>
 800ae10:	6106      	str	r6, [r0, #16]
 800ae12:	b003      	add	sp, #12
 800ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae18:	f843 2b04 	str.w	r2, [r3], #4
 800ae1c:	e7e3      	b.n	800ade6 <__multiply+0x40>
 800ae1e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae22:	3204      	adds	r2, #4
 800ae24:	f1ba 0f00 	cmp.w	sl, #0
 800ae28:	d020      	beq.n	800ae6c <__multiply+0xc6>
 800ae2a:	46ae      	mov	lr, r5
 800ae2c:	4689      	mov	r9, r1
 800ae2e:	f04f 0c00 	mov.w	ip, #0
 800ae32:	f859 4b04 	ldr.w	r4, [r9], #4
 800ae36:	f8be b000 	ldrh.w	fp, [lr]
 800ae3a:	b2a3      	uxth	r3, r4
 800ae3c:	fb0a b303 	mla	r3, sl, r3, fp
 800ae40:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800ae44:	f8de 4000 	ldr.w	r4, [lr]
 800ae48:	4463      	add	r3, ip
 800ae4a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800ae4e:	fb0a c40b 	mla	r4, sl, fp, ip
 800ae52:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae5c:	454f      	cmp	r7, r9
 800ae5e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800ae62:	f84e 3b04 	str.w	r3, [lr], #4
 800ae66:	d8e4      	bhi.n	800ae32 <__multiply+0x8c>
 800ae68:	f8ce c000 	str.w	ip, [lr]
 800ae6c:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800ae70:	f1b9 0f00 	cmp.w	r9, #0
 800ae74:	d01f      	beq.n	800aeb6 <__multiply+0x110>
 800ae76:	46ae      	mov	lr, r5
 800ae78:	468c      	mov	ip, r1
 800ae7a:	f04f 0a00 	mov.w	sl, #0
 800ae7e:	682b      	ldr	r3, [r5, #0]
 800ae80:	f8bc 4000 	ldrh.w	r4, [ip]
 800ae84:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	fb09 b404 	mla	r4, r9, r4, fp
 800ae8e:	44a2      	add	sl, r4
 800ae90:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800ae94:	f84e 3b04 	str.w	r3, [lr], #4
 800ae98:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae9c:	f8be 4000 	ldrh.w	r4, [lr]
 800aea0:	0c1b      	lsrs	r3, r3, #16
 800aea2:	fb09 4303 	mla	r3, r9, r3, r4
 800aea6:	4567      	cmp	r7, ip
 800aea8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800aeac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aeb0:	d8e6      	bhi.n	800ae80 <__multiply+0xda>
 800aeb2:	f8ce 3000 	str.w	r3, [lr]
 800aeb6:	3504      	adds	r5, #4
 800aeb8:	e7a0      	b.n	800adfc <__multiply+0x56>
 800aeba:	3e01      	subs	r6, #1
 800aebc:	e7a2      	b.n	800ae04 <__multiply+0x5e>
	...

0800aec0 <__pow5mult>:
 800aec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec4:	4615      	mov	r5, r2
 800aec6:	f012 0203 	ands.w	r2, r2, #3
 800aeca:	4606      	mov	r6, r0
 800aecc:	460f      	mov	r7, r1
 800aece:	d007      	beq.n	800aee0 <__pow5mult+0x20>
 800aed0:	4c21      	ldr	r4, [pc, #132]	; (800af58 <__pow5mult+0x98>)
 800aed2:	3a01      	subs	r2, #1
 800aed4:	2300      	movs	r3, #0
 800aed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aeda:	f7ff fed2 	bl	800ac82 <__multadd>
 800aede:	4607      	mov	r7, r0
 800aee0:	10ad      	asrs	r5, r5, #2
 800aee2:	d035      	beq.n	800af50 <__pow5mult+0x90>
 800aee4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aee6:	b93c      	cbnz	r4, 800aef8 <__pow5mult+0x38>
 800aee8:	2010      	movs	r0, #16
 800aeea:	f7ff fc25 	bl	800a738 <malloc>
 800aeee:	6270      	str	r0, [r6, #36]	; 0x24
 800aef0:	6044      	str	r4, [r0, #4]
 800aef2:	6084      	str	r4, [r0, #8]
 800aef4:	6004      	str	r4, [r0, #0]
 800aef6:	60c4      	str	r4, [r0, #12]
 800aef8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aefc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af00:	b94c      	cbnz	r4, 800af16 <__pow5mult+0x56>
 800af02:	f240 2171 	movw	r1, #625	; 0x271
 800af06:	4630      	mov	r0, r6
 800af08:	f7ff ff44 	bl	800ad94 <__i2b>
 800af0c:	2300      	movs	r3, #0
 800af0e:	4604      	mov	r4, r0
 800af10:	f8c8 0008 	str.w	r0, [r8, #8]
 800af14:	6003      	str	r3, [r0, #0]
 800af16:	f04f 0800 	mov.w	r8, #0
 800af1a:	07eb      	lsls	r3, r5, #31
 800af1c:	d50a      	bpl.n	800af34 <__pow5mult+0x74>
 800af1e:	4639      	mov	r1, r7
 800af20:	4622      	mov	r2, r4
 800af22:	4630      	mov	r0, r6
 800af24:	f7ff ff3f 	bl	800ada6 <__multiply>
 800af28:	4681      	mov	r9, r0
 800af2a:	4639      	mov	r1, r7
 800af2c:	4630      	mov	r0, r6
 800af2e:	f7ff fe91 	bl	800ac54 <_Bfree>
 800af32:	464f      	mov	r7, r9
 800af34:	106d      	asrs	r5, r5, #1
 800af36:	d00b      	beq.n	800af50 <__pow5mult+0x90>
 800af38:	6820      	ldr	r0, [r4, #0]
 800af3a:	b938      	cbnz	r0, 800af4c <__pow5mult+0x8c>
 800af3c:	4622      	mov	r2, r4
 800af3e:	4621      	mov	r1, r4
 800af40:	4630      	mov	r0, r6
 800af42:	f7ff ff30 	bl	800ada6 <__multiply>
 800af46:	6020      	str	r0, [r4, #0]
 800af48:	f8c0 8000 	str.w	r8, [r0]
 800af4c:	4604      	mov	r4, r0
 800af4e:	e7e4      	b.n	800af1a <__pow5mult+0x5a>
 800af50:	4638      	mov	r0, r7
 800af52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af56:	bf00      	nop
 800af58:	08017d28 	.word	0x08017d28

0800af5c <__lshift>:
 800af5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af60:	460c      	mov	r4, r1
 800af62:	4607      	mov	r7, r0
 800af64:	4616      	mov	r6, r2
 800af66:	6923      	ldr	r3, [r4, #16]
 800af68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af6c:	eb0a 0903 	add.w	r9, sl, r3
 800af70:	6849      	ldr	r1, [r1, #4]
 800af72:	68a3      	ldr	r3, [r4, #8]
 800af74:	f109 0501 	add.w	r5, r9, #1
 800af78:	42ab      	cmp	r3, r5
 800af7a:	db31      	blt.n	800afe0 <__lshift+0x84>
 800af7c:	4638      	mov	r0, r7
 800af7e:	f7ff fe35 	bl	800abec <_Balloc>
 800af82:	2200      	movs	r2, #0
 800af84:	4680      	mov	r8, r0
 800af86:	4611      	mov	r1, r2
 800af88:	f100 0314 	add.w	r3, r0, #20
 800af8c:	4552      	cmp	r2, sl
 800af8e:	db2a      	blt.n	800afe6 <__lshift+0x8a>
 800af90:	6920      	ldr	r0, [r4, #16]
 800af92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af96:	f104 0114 	add.w	r1, r4, #20
 800af9a:	f016 021f 	ands.w	r2, r6, #31
 800af9e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800afa2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800afa6:	d022      	beq.n	800afee <__lshift+0x92>
 800afa8:	2000      	movs	r0, #0
 800afaa:	f1c2 0c20 	rsb	ip, r2, #32
 800afae:	680e      	ldr	r6, [r1, #0]
 800afb0:	4096      	lsls	r6, r2
 800afb2:	4330      	orrs	r0, r6
 800afb4:	f843 0b04 	str.w	r0, [r3], #4
 800afb8:	f851 0b04 	ldr.w	r0, [r1], #4
 800afbc:	458e      	cmp	lr, r1
 800afbe:	fa20 f00c 	lsr.w	r0, r0, ip
 800afc2:	d8f4      	bhi.n	800afae <__lshift+0x52>
 800afc4:	6018      	str	r0, [r3, #0]
 800afc6:	b108      	cbz	r0, 800afcc <__lshift+0x70>
 800afc8:	f109 0502 	add.w	r5, r9, #2
 800afcc:	3d01      	subs	r5, #1
 800afce:	4638      	mov	r0, r7
 800afd0:	f8c8 5010 	str.w	r5, [r8, #16]
 800afd4:	4621      	mov	r1, r4
 800afd6:	f7ff fe3d 	bl	800ac54 <_Bfree>
 800afda:	4640      	mov	r0, r8
 800afdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe0:	3101      	adds	r1, #1
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	e7c8      	b.n	800af78 <__lshift+0x1c>
 800afe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800afea:	3201      	adds	r2, #1
 800afec:	e7ce      	b.n	800af8c <__lshift+0x30>
 800afee:	3b04      	subs	r3, #4
 800aff0:	f851 2b04 	ldr.w	r2, [r1], #4
 800aff4:	458e      	cmp	lr, r1
 800aff6:	f843 2f04 	str.w	r2, [r3, #4]!
 800affa:	d8f9      	bhi.n	800aff0 <__lshift+0x94>
 800affc:	e7e6      	b.n	800afcc <__lshift+0x70>

0800affe <__mcmp>:
 800affe:	6903      	ldr	r3, [r0, #16]
 800b000:	690a      	ldr	r2, [r1, #16]
 800b002:	b530      	push	{r4, r5, lr}
 800b004:	1a9b      	subs	r3, r3, r2
 800b006:	d10c      	bne.n	800b022 <__mcmp+0x24>
 800b008:	0092      	lsls	r2, r2, #2
 800b00a:	3014      	adds	r0, #20
 800b00c:	3114      	adds	r1, #20
 800b00e:	1884      	adds	r4, r0, r2
 800b010:	4411      	add	r1, r2
 800b012:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b016:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b01a:	4295      	cmp	r5, r2
 800b01c:	d003      	beq.n	800b026 <__mcmp+0x28>
 800b01e:	d305      	bcc.n	800b02c <__mcmp+0x2e>
 800b020:	2301      	movs	r3, #1
 800b022:	4618      	mov	r0, r3
 800b024:	bd30      	pop	{r4, r5, pc}
 800b026:	42a0      	cmp	r0, r4
 800b028:	d3f3      	bcc.n	800b012 <__mcmp+0x14>
 800b02a:	e7fa      	b.n	800b022 <__mcmp+0x24>
 800b02c:	f04f 33ff 	mov.w	r3, #4294967295
 800b030:	e7f7      	b.n	800b022 <__mcmp+0x24>

0800b032 <__mdiff>:
 800b032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b036:	460d      	mov	r5, r1
 800b038:	4607      	mov	r7, r0
 800b03a:	4611      	mov	r1, r2
 800b03c:	4628      	mov	r0, r5
 800b03e:	4614      	mov	r4, r2
 800b040:	f7ff ffdd 	bl	800affe <__mcmp>
 800b044:	1e06      	subs	r6, r0, #0
 800b046:	d108      	bne.n	800b05a <__mdiff+0x28>
 800b048:	4631      	mov	r1, r6
 800b04a:	4638      	mov	r0, r7
 800b04c:	f7ff fdce 	bl	800abec <_Balloc>
 800b050:	2301      	movs	r3, #1
 800b052:	6146      	str	r6, [r0, #20]
 800b054:	6103      	str	r3, [r0, #16]
 800b056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b05a:	bfa4      	itt	ge
 800b05c:	4623      	movge	r3, r4
 800b05e:	462c      	movge	r4, r5
 800b060:	4638      	mov	r0, r7
 800b062:	6861      	ldr	r1, [r4, #4]
 800b064:	bfa6      	itte	ge
 800b066:	461d      	movge	r5, r3
 800b068:	2600      	movge	r6, #0
 800b06a:	2601      	movlt	r6, #1
 800b06c:	f7ff fdbe 	bl	800abec <_Balloc>
 800b070:	f04f 0c00 	mov.w	ip, #0
 800b074:	60c6      	str	r6, [r0, #12]
 800b076:	692b      	ldr	r3, [r5, #16]
 800b078:	6926      	ldr	r6, [r4, #16]
 800b07a:	f104 0214 	add.w	r2, r4, #20
 800b07e:	f105 0914 	add.w	r9, r5, #20
 800b082:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b086:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b08a:	f100 0114 	add.w	r1, r0, #20
 800b08e:	f852 ab04 	ldr.w	sl, [r2], #4
 800b092:	f859 5b04 	ldr.w	r5, [r9], #4
 800b096:	fa1f f38a 	uxth.w	r3, sl
 800b09a:	4463      	add	r3, ip
 800b09c:	b2ac      	uxth	r4, r5
 800b09e:	1b1b      	subs	r3, r3, r4
 800b0a0:	0c2c      	lsrs	r4, r5, #16
 800b0a2:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b0a6:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b0b0:	45c8      	cmp	r8, r9
 800b0b2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b0b6:	4696      	mov	lr, r2
 800b0b8:	f841 4b04 	str.w	r4, [r1], #4
 800b0bc:	d8e7      	bhi.n	800b08e <__mdiff+0x5c>
 800b0be:	45be      	cmp	lr, r7
 800b0c0:	d305      	bcc.n	800b0ce <__mdiff+0x9c>
 800b0c2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b0c6:	b18b      	cbz	r3, 800b0ec <__mdiff+0xba>
 800b0c8:	6106      	str	r6, [r0, #16]
 800b0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b0d2:	b2a2      	uxth	r2, r4
 800b0d4:	4462      	add	r2, ip
 800b0d6:	1413      	asrs	r3, r2, #16
 800b0d8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b0dc:	b292      	uxth	r2, r2
 800b0de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b0e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b0e6:	f841 2b04 	str.w	r2, [r1], #4
 800b0ea:	e7e8      	b.n	800b0be <__mdiff+0x8c>
 800b0ec:	3e01      	subs	r6, #1
 800b0ee:	e7e8      	b.n	800b0c2 <__mdiff+0x90>

0800b0f0 <__d2b>:
 800b0f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b0f4:	461c      	mov	r4, r3
 800b0f6:	2101      	movs	r1, #1
 800b0f8:	4690      	mov	r8, r2
 800b0fa:	9e08      	ldr	r6, [sp, #32]
 800b0fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b0fe:	f7ff fd75 	bl	800abec <_Balloc>
 800b102:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b106:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b10a:	4607      	mov	r7, r0
 800b10c:	bb34      	cbnz	r4, 800b15c <__d2b+0x6c>
 800b10e:	9201      	str	r2, [sp, #4]
 800b110:	f1b8 0f00 	cmp.w	r8, #0
 800b114:	d027      	beq.n	800b166 <__d2b+0x76>
 800b116:	a802      	add	r0, sp, #8
 800b118:	f840 8d08 	str.w	r8, [r0, #-8]!
 800b11c:	f7ff fe0b 	bl	800ad36 <__lo0bits>
 800b120:	9900      	ldr	r1, [sp, #0]
 800b122:	b1f0      	cbz	r0, 800b162 <__d2b+0x72>
 800b124:	9a01      	ldr	r2, [sp, #4]
 800b126:	f1c0 0320 	rsb	r3, r0, #32
 800b12a:	fa02 f303 	lsl.w	r3, r2, r3
 800b12e:	430b      	orrs	r3, r1
 800b130:	40c2      	lsrs	r2, r0
 800b132:	617b      	str	r3, [r7, #20]
 800b134:	9201      	str	r2, [sp, #4]
 800b136:	9b01      	ldr	r3, [sp, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	bf14      	ite	ne
 800b13c:	2102      	movne	r1, #2
 800b13e:	2101      	moveq	r1, #1
 800b140:	61bb      	str	r3, [r7, #24]
 800b142:	6139      	str	r1, [r7, #16]
 800b144:	b1c4      	cbz	r4, 800b178 <__d2b+0x88>
 800b146:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b14a:	4404      	add	r4, r0
 800b14c:	6034      	str	r4, [r6, #0]
 800b14e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b152:	6028      	str	r0, [r5, #0]
 800b154:	4638      	mov	r0, r7
 800b156:	b002      	add	sp, #8
 800b158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b15c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b160:	e7d5      	b.n	800b10e <__d2b+0x1e>
 800b162:	6179      	str	r1, [r7, #20]
 800b164:	e7e7      	b.n	800b136 <__d2b+0x46>
 800b166:	a801      	add	r0, sp, #4
 800b168:	f7ff fde5 	bl	800ad36 <__lo0bits>
 800b16c:	2101      	movs	r1, #1
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	6139      	str	r1, [r7, #16]
 800b172:	617b      	str	r3, [r7, #20]
 800b174:	3020      	adds	r0, #32
 800b176:	e7e5      	b.n	800b144 <__d2b+0x54>
 800b178:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b17c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b180:	6030      	str	r0, [r6, #0]
 800b182:	6918      	ldr	r0, [r3, #16]
 800b184:	f7ff fdb8 	bl	800acf8 <__hi0bits>
 800b188:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b18c:	e7e1      	b.n	800b152 <__d2b+0x62>
	...

0800b190 <_realloc_r>:
 800b190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	4682      	mov	sl, r0
 800b196:	460c      	mov	r4, r1
 800b198:	b929      	cbnz	r1, 800b1a6 <_realloc_r+0x16>
 800b19a:	4611      	mov	r1, r2
 800b19c:	b003      	add	sp, #12
 800b19e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a2:	f7ff bad1 	b.w	800a748 <_malloc_r>
 800b1a6:	9201      	str	r2, [sp, #4]
 800b1a8:	f7ff fd14 	bl	800abd4 <__malloc_lock>
 800b1ac:	9a01      	ldr	r2, [sp, #4]
 800b1ae:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b1b2:	f102 080b 	add.w	r8, r2, #11
 800b1b6:	f1b8 0f16 	cmp.w	r8, #22
 800b1ba:	f1a4 0908 	sub.w	r9, r4, #8
 800b1be:	f025 0603 	bic.w	r6, r5, #3
 800b1c2:	d90a      	bls.n	800b1da <_realloc_r+0x4a>
 800b1c4:	f038 0807 	bics.w	r8, r8, #7
 800b1c8:	d509      	bpl.n	800b1de <_realloc_r+0x4e>
 800b1ca:	230c      	movs	r3, #12
 800b1cc:	2700      	movs	r7, #0
 800b1ce:	f8ca 3000 	str.w	r3, [sl]
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	b003      	add	sp, #12
 800b1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1da:	f04f 0810 	mov.w	r8, #16
 800b1de:	4590      	cmp	r8, r2
 800b1e0:	d3f3      	bcc.n	800b1ca <_realloc_r+0x3a>
 800b1e2:	45b0      	cmp	r8, r6
 800b1e4:	f340 8148 	ble.w	800b478 <_realloc_r+0x2e8>
 800b1e8:	4ba9      	ldr	r3, [pc, #676]	; (800b490 <_realloc_r+0x300>)
 800b1ea:	eb09 0106 	add.w	r1, r9, r6
 800b1ee:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800b1f2:	469b      	mov	fp, r3
 800b1f4:	4571      	cmp	r1, lr
 800b1f6:	684b      	ldr	r3, [r1, #4]
 800b1f8:	d005      	beq.n	800b206 <_realloc_r+0x76>
 800b1fa:	f023 0001 	bic.w	r0, r3, #1
 800b1fe:	4408      	add	r0, r1
 800b200:	6840      	ldr	r0, [r0, #4]
 800b202:	07c7      	lsls	r7, r0, #31
 800b204:	d447      	bmi.n	800b296 <_realloc_r+0x106>
 800b206:	f023 0303 	bic.w	r3, r3, #3
 800b20a:	4571      	cmp	r1, lr
 800b20c:	eb06 0703 	add.w	r7, r6, r3
 800b210:	d119      	bne.n	800b246 <_realloc_r+0xb6>
 800b212:	f108 0010 	add.w	r0, r8, #16
 800b216:	4287      	cmp	r7, r0
 800b218:	db3f      	blt.n	800b29a <_realloc_r+0x10a>
 800b21a:	eba7 0708 	sub.w	r7, r7, r8
 800b21e:	eb09 0308 	add.w	r3, r9, r8
 800b222:	f047 0701 	orr.w	r7, r7, #1
 800b226:	f8cb 3008 	str.w	r3, [fp, #8]
 800b22a:	605f      	str	r7, [r3, #4]
 800b22c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b230:	4650      	mov	r0, sl
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	ea43 0308 	orr.w	r3, r3, r8
 800b23a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b23e:	f7ff fccf 	bl	800abe0 <__malloc_unlock>
 800b242:	4627      	mov	r7, r4
 800b244:	e7c5      	b.n	800b1d2 <_realloc_r+0x42>
 800b246:	45b8      	cmp	r8, r7
 800b248:	dc27      	bgt.n	800b29a <_realloc_r+0x10a>
 800b24a:	68cb      	ldr	r3, [r1, #12]
 800b24c:	688a      	ldr	r2, [r1, #8]
 800b24e:	60d3      	str	r3, [r2, #12]
 800b250:	609a      	str	r2, [r3, #8]
 800b252:	eba7 0008 	sub.w	r0, r7, r8
 800b256:	280f      	cmp	r0, #15
 800b258:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b25c:	eb09 0207 	add.w	r2, r9, r7
 800b260:	f240 810c 	bls.w	800b47c <_realloc_r+0x2ec>
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	eb09 0108 	add.w	r1, r9, r8
 800b26c:	ea43 0308 	orr.w	r3, r3, r8
 800b270:	f040 0001 	orr.w	r0, r0, #1
 800b274:	f8c9 3004 	str.w	r3, [r9, #4]
 800b278:	6048      	str	r0, [r1, #4]
 800b27a:	6853      	ldr	r3, [r2, #4]
 800b27c:	3108      	adds	r1, #8
 800b27e:	f043 0301 	orr.w	r3, r3, #1
 800b282:	6053      	str	r3, [r2, #4]
 800b284:	4650      	mov	r0, sl
 800b286:	f000 fa23 	bl	800b6d0 <_free_r>
 800b28a:	4650      	mov	r0, sl
 800b28c:	f7ff fca8 	bl	800abe0 <__malloc_unlock>
 800b290:	f109 0708 	add.w	r7, r9, #8
 800b294:	e79d      	b.n	800b1d2 <_realloc_r+0x42>
 800b296:	2300      	movs	r3, #0
 800b298:	4619      	mov	r1, r3
 800b29a:	07e8      	lsls	r0, r5, #31
 800b29c:	f100 8085 	bmi.w	800b3aa <_realloc_r+0x21a>
 800b2a0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800b2a4:	eba9 0505 	sub.w	r5, r9, r5
 800b2a8:	6868      	ldr	r0, [r5, #4]
 800b2aa:	f020 0003 	bic.w	r0, r0, #3
 800b2ae:	4430      	add	r0, r6
 800b2b0:	2900      	cmp	r1, #0
 800b2b2:	d077      	beq.n	800b3a4 <_realloc_r+0x214>
 800b2b4:	4571      	cmp	r1, lr
 800b2b6:	d151      	bne.n	800b35c <_realloc_r+0x1cc>
 800b2b8:	4403      	add	r3, r0
 800b2ba:	f108 0110 	add.w	r1, r8, #16
 800b2be:	428b      	cmp	r3, r1
 800b2c0:	db70      	blt.n	800b3a4 <_realloc_r+0x214>
 800b2c2:	462f      	mov	r7, r5
 800b2c4:	68ea      	ldr	r2, [r5, #12]
 800b2c6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800b2ca:	60ca      	str	r2, [r1, #12]
 800b2cc:	6091      	str	r1, [r2, #8]
 800b2ce:	1f32      	subs	r2, r6, #4
 800b2d0:	2a24      	cmp	r2, #36	; 0x24
 800b2d2:	d83c      	bhi.n	800b34e <_realloc_r+0x1be>
 800b2d4:	2a13      	cmp	r2, #19
 800b2d6:	d937      	bls.n	800b348 <_realloc_r+0x1b8>
 800b2d8:	6821      	ldr	r1, [r4, #0]
 800b2da:	2a1b      	cmp	r2, #27
 800b2dc:	60a9      	str	r1, [r5, #8]
 800b2de:	6861      	ldr	r1, [r4, #4]
 800b2e0:	60e9      	str	r1, [r5, #12]
 800b2e2:	d81c      	bhi.n	800b31e <_realloc_r+0x18e>
 800b2e4:	f105 0210 	add.w	r2, r5, #16
 800b2e8:	f104 0108 	add.w	r1, r4, #8
 800b2ec:	6808      	ldr	r0, [r1, #0]
 800b2ee:	6010      	str	r0, [r2, #0]
 800b2f0:	6848      	ldr	r0, [r1, #4]
 800b2f2:	6050      	str	r0, [r2, #4]
 800b2f4:	6889      	ldr	r1, [r1, #8]
 800b2f6:	6091      	str	r1, [r2, #8]
 800b2f8:	eba3 0308 	sub.w	r3, r3, r8
 800b2fc:	eb05 0208 	add.w	r2, r5, r8
 800b300:	f043 0301 	orr.w	r3, r3, #1
 800b304:	f8cb 2008 	str.w	r2, [fp, #8]
 800b308:	6053      	str	r3, [r2, #4]
 800b30a:	686b      	ldr	r3, [r5, #4]
 800b30c:	f003 0301 	and.w	r3, r3, #1
 800b310:	ea43 0308 	orr.w	r3, r3, r8
 800b314:	606b      	str	r3, [r5, #4]
 800b316:	4650      	mov	r0, sl
 800b318:	f7ff fc62 	bl	800abe0 <__malloc_unlock>
 800b31c:	e759      	b.n	800b1d2 <_realloc_r+0x42>
 800b31e:	68a1      	ldr	r1, [r4, #8]
 800b320:	2a24      	cmp	r2, #36	; 0x24
 800b322:	6129      	str	r1, [r5, #16]
 800b324:	68e1      	ldr	r1, [r4, #12]
 800b326:	bf18      	it	ne
 800b328:	f105 0218 	addne.w	r2, r5, #24
 800b32c:	6169      	str	r1, [r5, #20]
 800b32e:	bf09      	itett	eq
 800b330:	6922      	ldreq	r2, [r4, #16]
 800b332:	f104 0110 	addne.w	r1, r4, #16
 800b336:	61aa      	streq	r2, [r5, #24]
 800b338:	6960      	ldreq	r0, [r4, #20]
 800b33a:	bf02      	ittt	eq
 800b33c:	f105 0220 	addeq.w	r2, r5, #32
 800b340:	f104 0118 	addeq.w	r1, r4, #24
 800b344:	61e8      	streq	r0, [r5, #28]
 800b346:	e7d1      	b.n	800b2ec <_realloc_r+0x15c>
 800b348:	463a      	mov	r2, r7
 800b34a:	4621      	mov	r1, r4
 800b34c:	e7ce      	b.n	800b2ec <_realloc_r+0x15c>
 800b34e:	4621      	mov	r1, r4
 800b350:	4638      	mov	r0, r7
 800b352:	9301      	str	r3, [sp, #4]
 800b354:	f7ff fc24 	bl	800aba0 <memmove>
 800b358:	9b01      	ldr	r3, [sp, #4]
 800b35a:	e7cd      	b.n	800b2f8 <_realloc_r+0x168>
 800b35c:	18c7      	adds	r7, r0, r3
 800b35e:	45b8      	cmp	r8, r7
 800b360:	dc20      	bgt.n	800b3a4 <_realloc_r+0x214>
 800b362:	68cb      	ldr	r3, [r1, #12]
 800b364:	688a      	ldr	r2, [r1, #8]
 800b366:	60d3      	str	r3, [r2, #12]
 800b368:	609a      	str	r2, [r3, #8]
 800b36a:	4628      	mov	r0, r5
 800b36c:	68eb      	ldr	r3, [r5, #12]
 800b36e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b372:	60d3      	str	r3, [r2, #12]
 800b374:	609a      	str	r2, [r3, #8]
 800b376:	1f32      	subs	r2, r6, #4
 800b378:	2a24      	cmp	r2, #36	; 0x24
 800b37a:	d843      	bhi.n	800b404 <_realloc_r+0x274>
 800b37c:	2a13      	cmp	r2, #19
 800b37e:	d93f      	bls.n	800b400 <_realloc_r+0x270>
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	2a1b      	cmp	r2, #27
 800b384:	60ab      	str	r3, [r5, #8]
 800b386:	6863      	ldr	r3, [r4, #4]
 800b388:	60eb      	str	r3, [r5, #12]
 800b38a:	d824      	bhi.n	800b3d6 <_realloc_r+0x246>
 800b38c:	f105 0010 	add.w	r0, r5, #16
 800b390:	f104 0308 	add.w	r3, r4, #8
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	6002      	str	r2, [r0, #0]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	6042      	str	r2, [r0, #4]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	6083      	str	r3, [r0, #8]
 800b3a0:	46a9      	mov	r9, r5
 800b3a2:	e756      	b.n	800b252 <_realloc_r+0xc2>
 800b3a4:	4580      	cmp	r8, r0
 800b3a6:	4607      	mov	r7, r0
 800b3a8:	dddf      	ble.n	800b36a <_realloc_r+0x1da>
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	4650      	mov	r0, sl
 800b3ae:	f7ff f9cb 	bl	800a748 <_malloc_r>
 800b3b2:	4607      	mov	r7, r0
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d0ae      	beq.n	800b316 <_realloc_r+0x186>
 800b3b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b3bc:	f1a0 0208 	sub.w	r2, r0, #8
 800b3c0:	f023 0301 	bic.w	r3, r3, #1
 800b3c4:	444b      	add	r3, r9
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d120      	bne.n	800b40c <_realloc_r+0x27c>
 800b3ca:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b3ce:	f027 0703 	bic.w	r7, r7, #3
 800b3d2:	4437      	add	r7, r6
 800b3d4:	e73d      	b.n	800b252 <_realloc_r+0xc2>
 800b3d6:	68a3      	ldr	r3, [r4, #8]
 800b3d8:	2a24      	cmp	r2, #36	; 0x24
 800b3da:	612b      	str	r3, [r5, #16]
 800b3dc:	68e3      	ldr	r3, [r4, #12]
 800b3de:	bf18      	it	ne
 800b3e0:	f105 0018 	addne.w	r0, r5, #24
 800b3e4:	616b      	str	r3, [r5, #20]
 800b3e6:	bf09      	itett	eq
 800b3e8:	6923      	ldreq	r3, [r4, #16]
 800b3ea:	f104 0310 	addne.w	r3, r4, #16
 800b3ee:	61ab      	streq	r3, [r5, #24]
 800b3f0:	6962      	ldreq	r2, [r4, #20]
 800b3f2:	bf02      	ittt	eq
 800b3f4:	f105 0020 	addeq.w	r0, r5, #32
 800b3f8:	f104 0318 	addeq.w	r3, r4, #24
 800b3fc:	61ea      	streq	r2, [r5, #28]
 800b3fe:	e7c9      	b.n	800b394 <_realloc_r+0x204>
 800b400:	4623      	mov	r3, r4
 800b402:	e7c7      	b.n	800b394 <_realloc_r+0x204>
 800b404:	4621      	mov	r1, r4
 800b406:	f7ff fbcb 	bl	800aba0 <memmove>
 800b40a:	e7c9      	b.n	800b3a0 <_realloc_r+0x210>
 800b40c:	1f32      	subs	r2, r6, #4
 800b40e:	2a24      	cmp	r2, #36	; 0x24
 800b410:	d82e      	bhi.n	800b470 <_realloc_r+0x2e0>
 800b412:	2a13      	cmp	r2, #19
 800b414:	d929      	bls.n	800b46a <_realloc_r+0x2da>
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	2a1b      	cmp	r2, #27
 800b41a:	6003      	str	r3, [r0, #0]
 800b41c:	6863      	ldr	r3, [r4, #4]
 800b41e:	6043      	str	r3, [r0, #4]
 800b420:	d80e      	bhi.n	800b440 <_realloc_r+0x2b0>
 800b422:	f100 0308 	add.w	r3, r0, #8
 800b426:	f104 0208 	add.w	r2, r4, #8
 800b42a:	6811      	ldr	r1, [r2, #0]
 800b42c:	6019      	str	r1, [r3, #0]
 800b42e:	6851      	ldr	r1, [r2, #4]
 800b430:	6059      	str	r1, [r3, #4]
 800b432:	6892      	ldr	r2, [r2, #8]
 800b434:	609a      	str	r2, [r3, #8]
 800b436:	4621      	mov	r1, r4
 800b438:	4650      	mov	r0, sl
 800b43a:	f000 f949 	bl	800b6d0 <_free_r>
 800b43e:	e76a      	b.n	800b316 <_realloc_r+0x186>
 800b440:	68a3      	ldr	r3, [r4, #8]
 800b442:	2a24      	cmp	r2, #36	; 0x24
 800b444:	6083      	str	r3, [r0, #8]
 800b446:	68e3      	ldr	r3, [r4, #12]
 800b448:	bf18      	it	ne
 800b44a:	f104 0210 	addne.w	r2, r4, #16
 800b44e:	60c3      	str	r3, [r0, #12]
 800b450:	bf09      	itett	eq
 800b452:	6923      	ldreq	r3, [r4, #16]
 800b454:	f100 0310 	addne.w	r3, r0, #16
 800b458:	6103      	streq	r3, [r0, #16]
 800b45a:	6961      	ldreq	r1, [r4, #20]
 800b45c:	bf02      	ittt	eq
 800b45e:	f100 0318 	addeq.w	r3, r0, #24
 800b462:	f104 0218 	addeq.w	r2, r4, #24
 800b466:	6141      	streq	r1, [r0, #20]
 800b468:	e7df      	b.n	800b42a <_realloc_r+0x29a>
 800b46a:	4603      	mov	r3, r0
 800b46c:	4622      	mov	r2, r4
 800b46e:	e7dc      	b.n	800b42a <_realloc_r+0x29a>
 800b470:	4621      	mov	r1, r4
 800b472:	f7ff fb95 	bl	800aba0 <memmove>
 800b476:	e7de      	b.n	800b436 <_realloc_r+0x2a6>
 800b478:	4637      	mov	r7, r6
 800b47a:	e6ea      	b.n	800b252 <_realloc_r+0xc2>
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	431f      	orrs	r7, r3
 800b482:	f8c9 7004 	str.w	r7, [r9, #4]
 800b486:	6853      	ldr	r3, [r2, #4]
 800b488:	f043 0301 	orr.w	r3, r3, #1
 800b48c:	6053      	str	r3, [r2, #4]
 800b48e:	e6fc      	b.n	800b28a <_realloc_r+0xfa>
 800b490:	20000674 	.word	0x20000674

0800b494 <_sbrk_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	2300      	movs	r3, #0
 800b498:	4c05      	ldr	r4, [pc, #20]	; (800b4b0 <_sbrk_r+0x1c>)
 800b49a:	4605      	mov	r5, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	6023      	str	r3, [r4, #0]
 800b4a0:	f002 fb44 	bl	800db2c <_sbrk>
 800b4a4:	1c43      	adds	r3, r0, #1
 800b4a6:	d102      	bne.n	800b4ae <_sbrk_r+0x1a>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	b103      	cbz	r3, 800b4ae <_sbrk_r+0x1a>
 800b4ac:	602b      	str	r3, [r5, #0]
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	20001770 	.word	0x20001770

0800b4b4 <nanf>:
 800b4b4:	4800      	ldr	r0, [pc, #0]	; (800b4b8 <nanf+0x4>)
 800b4b6:	4770      	bx	lr
 800b4b8:	7fc00000 	.word	0x7fc00000

0800b4bc <__ssprint_r>:
 800b4bc:	6893      	ldr	r3, [r2, #8]
 800b4be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c2:	4681      	mov	r9, r0
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	4617      	mov	r7, r2
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d060      	beq.n	800b58e <__ssprint_r+0xd2>
 800b4cc:	f04f 0b00 	mov.w	fp, #0
 800b4d0:	465e      	mov	r6, fp
 800b4d2:	f8d2 a000 	ldr.w	sl, [r2]
 800b4d6:	b356      	cbz	r6, 800b52e <__ssprint_r+0x72>
 800b4d8:	68a3      	ldr	r3, [r4, #8]
 800b4da:	429e      	cmp	r6, r3
 800b4dc:	d344      	bcc.n	800b568 <__ssprint_r+0xac>
 800b4de:	89a2      	ldrh	r2, [r4, #12]
 800b4e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4e4:	d03e      	beq.n	800b564 <__ssprint_r+0xa8>
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	6825      	ldr	r5, [r4, #0]
 800b4ea:	6921      	ldr	r1, [r4, #16]
 800b4ec:	eba5 0801 	sub.w	r8, r5, r1
 800b4f0:	6965      	ldr	r5, [r4, #20]
 800b4f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4f6:	fb95 f5f3 	sdiv	r5, r5, r3
 800b4fa:	f108 0301 	add.w	r3, r8, #1
 800b4fe:	4433      	add	r3, r6
 800b500:	429d      	cmp	r5, r3
 800b502:	bf38      	it	cc
 800b504:	461d      	movcc	r5, r3
 800b506:	0553      	lsls	r3, r2, #21
 800b508:	d546      	bpl.n	800b598 <__ssprint_r+0xdc>
 800b50a:	4629      	mov	r1, r5
 800b50c:	4648      	mov	r0, r9
 800b50e:	f7ff f91b 	bl	800a748 <_malloc_r>
 800b512:	b998      	cbnz	r0, 800b53c <__ssprint_r+0x80>
 800b514:	230c      	movs	r3, #12
 800b516:	f8c9 3000 	str.w	r3, [r9]
 800b51a:	89a3      	ldrh	r3, [r4, #12]
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295
 800b520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b524:	81a3      	strh	r3, [r4, #12]
 800b526:	2300      	movs	r3, #0
 800b528:	60bb      	str	r3, [r7, #8]
 800b52a:	607b      	str	r3, [r7, #4]
 800b52c:	e031      	b.n	800b592 <__ssprint_r+0xd6>
 800b52e:	f8da b000 	ldr.w	fp, [sl]
 800b532:	f8da 6004 	ldr.w	r6, [sl, #4]
 800b536:	f10a 0a08 	add.w	sl, sl, #8
 800b53a:	e7cc      	b.n	800b4d6 <__ssprint_r+0x1a>
 800b53c:	4642      	mov	r2, r8
 800b53e:	6921      	ldr	r1, [r4, #16]
 800b540:	9001      	str	r0, [sp, #4]
 800b542:	f7fd fa3f 	bl	80089c4 <memcpy>
 800b546:	89a2      	ldrh	r2, [r4, #12]
 800b548:	9b01      	ldr	r3, [sp, #4]
 800b54a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b54e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b552:	81a2      	strh	r2, [r4, #12]
 800b554:	6123      	str	r3, [r4, #16]
 800b556:	4443      	add	r3, r8
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	4633      	mov	r3, r6
 800b55c:	6165      	str	r5, [r4, #20]
 800b55e:	eba5 0508 	sub.w	r5, r5, r8
 800b562:	60a5      	str	r5, [r4, #8]
 800b564:	429e      	cmp	r6, r3
 800b566:	d200      	bcs.n	800b56a <__ssprint_r+0xae>
 800b568:	4633      	mov	r3, r6
 800b56a:	461a      	mov	r2, r3
 800b56c:	4659      	mov	r1, fp
 800b56e:	6820      	ldr	r0, [r4, #0]
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	f7ff fb15 	bl	800aba0 <memmove>
 800b576:	68a2      	ldr	r2, [r4, #8]
 800b578:	9b01      	ldr	r3, [sp, #4]
 800b57a:	1ad2      	subs	r2, r2, r3
 800b57c:	60a2      	str	r2, [r4, #8]
 800b57e:	6822      	ldr	r2, [r4, #0]
 800b580:	4413      	add	r3, r2
 800b582:	6023      	str	r3, [r4, #0]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	1b9e      	subs	r6, r3, r6
 800b588:	60be      	str	r6, [r7, #8]
 800b58a:	2e00      	cmp	r6, #0
 800b58c:	d1cf      	bne.n	800b52e <__ssprint_r+0x72>
 800b58e:	2000      	movs	r0, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	b003      	add	sp, #12
 800b594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b598:	462a      	mov	r2, r5
 800b59a:	4648      	mov	r0, r9
 800b59c:	f7ff fdf8 	bl	800b190 <_realloc_r>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d1d6      	bne.n	800b554 <__ssprint_r+0x98>
 800b5a6:	6921      	ldr	r1, [r4, #16]
 800b5a8:	4648      	mov	r0, r9
 800b5aa:	f000 f891 	bl	800b6d0 <_free_r>
 800b5ae:	e7b1      	b.n	800b514 <__ssprint_r+0x58>

0800b5b0 <__ascii_wctomb>:
 800b5b0:	b149      	cbz	r1, 800b5c6 <__ascii_wctomb+0x16>
 800b5b2:	2aff      	cmp	r2, #255	; 0xff
 800b5b4:	bf8b      	itete	hi
 800b5b6:	238a      	movhi	r3, #138	; 0x8a
 800b5b8:	700a      	strbls	r2, [r1, #0]
 800b5ba:	6003      	strhi	r3, [r0, #0]
 800b5bc:	2001      	movls	r0, #1
 800b5be:	bf88      	it	hi
 800b5c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b5c4:	4770      	bx	lr
 800b5c6:	4608      	mov	r0, r1
 800b5c8:	4770      	bx	lr

0800b5ca <_calloc_r>:
 800b5ca:	b510      	push	{r4, lr}
 800b5cc:	4351      	muls	r1, r2
 800b5ce:	f7ff f8bb 	bl	800a748 <_malloc_r>
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	b198      	cbz	r0, 800b5fe <_calloc_r+0x34>
 800b5d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b5da:	f022 0203 	bic.w	r2, r2, #3
 800b5de:	3a04      	subs	r2, #4
 800b5e0:	2a24      	cmp	r2, #36	; 0x24
 800b5e2:	d81b      	bhi.n	800b61c <_calloc_r+0x52>
 800b5e4:	2a13      	cmp	r2, #19
 800b5e6:	d917      	bls.n	800b618 <_calloc_r+0x4e>
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	2a1b      	cmp	r2, #27
 800b5ec:	6001      	str	r1, [r0, #0]
 800b5ee:	6041      	str	r1, [r0, #4]
 800b5f0:	d807      	bhi.n	800b602 <_calloc_r+0x38>
 800b5f2:	f100 0308 	add.w	r3, r0, #8
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
 800b5fa:	605a      	str	r2, [r3, #4]
 800b5fc:	609a      	str	r2, [r3, #8]
 800b5fe:	4620      	mov	r0, r4
 800b600:	bd10      	pop	{r4, pc}
 800b602:	2a24      	cmp	r2, #36	; 0x24
 800b604:	6081      	str	r1, [r0, #8]
 800b606:	60c1      	str	r1, [r0, #12]
 800b608:	bf11      	iteee	ne
 800b60a:	f100 0310 	addne.w	r3, r0, #16
 800b60e:	6101      	streq	r1, [r0, #16]
 800b610:	f100 0318 	addeq.w	r3, r0, #24
 800b614:	6141      	streq	r1, [r0, #20]
 800b616:	e7ee      	b.n	800b5f6 <_calloc_r+0x2c>
 800b618:	4603      	mov	r3, r0
 800b61a:	e7ec      	b.n	800b5f6 <_calloc_r+0x2c>
 800b61c:	2100      	movs	r1, #0
 800b61e:	f7fd f9dc 	bl	80089da <memset>
 800b622:	e7ec      	b.n	800b5fe <_calloc_r+0x34>

0800b624 <_malloc_trim_r>:
 800b624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b628:	4689      	mov	r9, r1
 800b62a:	4f25      	ldr	r7, [pc, #148]	; (800b6c0 <_malloc_trim_r+0x9c>)
 800b62c:	4606      	mov	r6, r0
 800b62e:	f7ff fad1 	bl	800abd4 <__malloc_lock>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800b6cc <_malloc_trim_r+0xa8>
 800b638:	685d      	ldr	r5, [r3, #4]
 800b63a:	f1a8 0411 	sub.w	r4, r8, #17
 800b63e:	f025 0503 	bic.w	r5, r5, #3
 800b642:	eba4 0409 	sub.w	r4, r4, r9
 800b646:	442c      	add	r4, r5
 800b648:	fbb4 f4f8 	udiv	r4, r4, r8
 800b64c:	3c01      	subs	r4, #1
 800b64e:	fb08 f404 	mul.w	r4, r8, r4
 800b652:	4544      	cmp	r4, r8
 800b654:	da05      	bge.n	800b662 <_malloc_trim_r+0x3e>
 800b656:	4630      	mov	r0, r6
 800b658:	f7ff fac2 	bl	800abe0 <__malloc_unlock>
 800b65c:	2000      	movs	r0, #0
 800b65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b662:	2100      	movs	r1, #0
 800b664:	4630      	mov	r0, r6
 800b666:	f7ff ff15 	bl	800b494 <_sbrk_r>
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	442b      	add	r3, r5
 800b66e:	4298      	cmp	r0, r3
 800b670:	d1f1      	bne.n	800b656 <_malloc_trim_r+0x32>
 800b672:	4261      	negs	r1, r4
 800b674:	4630      	mov	r0, r6
 800b676:	f7ff ff0d 	bl	800b494 <_sbrk_r>
 800b67a:	3001      	adds	r0, #1
 800b67c:	d110      	bne.n	800b6a0 <_malloc_trim_r+0x7c>
 800b67e:	2100      	movs	r1, #0
 800b680:	4630      	mov	r0, r6
 800b682:	f7ff ff07 	bl	800b494 <_sbrk_r>
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	1a83      	subs	r3, r0, r2
 800b68a:	2b0f      	cmp	r3, #15
 800b68c:	dde3      	ble.n	800b656 <_malloc_trim_r+0x32>
 800b68e:	490d      	ldr	r1, [pc, #52]	; (800b6c4 <_malloc_trim_r+0xa0>)
 800b690:	f043 0301 	orr.w	r3, r3, #1
 800b694:	6809      	ldr	r1, [r1, #0]
 800b696:	6053      	str	r3, [r2, #4]
 800b698:	1a40      	subs	r0, r0, r1
 800b69a:	490b      	ldr	r1, [pc, #44]	; (800b6c8 <_malloc_trim_r+0xa4>)
 800b69c:	6008      	str	r0, [r1, #0]
 800b69e:	e7da      	b.n	800b656 <_malloc_trim_r+0x32>
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	4a09      	ldr	r2, [pc, #36]	; (800b6c8 <_malloc_trim_r+0xa4>)
 800b6a4:	1b2d      	subs	r5, r5, r4
 800b6a6:	f045 0501 	orr.w	r5, r5, #1
 800b6aa:	605d      	str	r5, [r3, #4]
 800b6ac:	6813      	ldr	r3, [r2, #0]
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	1b1c      	subs	r4, r3, r4
 800b6b2:	6014      	str	r4, [r2, #0]
 800b6b4:	f7ff fa94 	bl	800abe0 <__malloc_unlock>
 800b6b8:	2001      	movs	r0, #1
 800b6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6be:	bf00      	nop
 800b6c0:	20000674 	.word	0x20000674
 800b6c4:	20000a7c 	.word	0x20000a7c
 800b6c8:	20000d48 	.word	0x20000d48
 800b6cc:	00000080 	.word	0x00000080

0800b6d0 <_free_r>:
 800b6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	4688      	mov	r8, r1
 800b6d8:	2900      	cmp	r1, #0
 800b6da:	f000 80ab 	beq.w	800b834 <_free_r+0x164>
 800b6de:	f7ff fa79 	bl	800abd4 <__malloc_lock>
 800b6e2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800b6e6:	4d54      	ldr	r5, [pc, #336]	; (800b838 <_free_r+0x168>)
 800b6e8:	f022 0001 	bic.w	r0, r2, #1
 800b6ec:	f1a8 0308 	sub.w	r3, r8, #8
 800b6f0:	181f      	adds	r7, r3, r0
 800b6f2:	68a9      	ldr	r1, [r5, #8]
 800b6f4:	687e      	ldr	r6, [r7, #4]
 800b6f6:	428f      	cmp	r7, r1
 800b6f8:	f026 0603 	bic.w	r6, r6, #3
 800b6fc:	f002 0201 	and.w	r2, r2, #1
 800b700:	d11b      	bne.n	800b73a <_free_r+0x6a>
 800b702:	4430      	add	r0, r6
 800b704:	b93a      	cbnz	r2, 800b716 <_free_r+0x46>
 800b706:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800b70a:	1a9b      	subs	r3, r3, r2
 800b70c:	6899      	ldr	r1, [r3, #8]
 800b70e:	4410      	add	r0, r2
 800b710:	68da      	ldr	r2, [r3, #12]
 800b712:	60ca      	str	r2, [r1, #12]
 800b714:	6091      	str	r1, [r2, #8]
 800b716:	f040 0201 	orr.w	r2, r0, #1
 800b71a:	605a      	str	r2, [r3, #4]
 800b71c:	60ab      	str	r3, [r5, #8]
 800b71e:	4b47      	ldr	r3, [pc, #284]	; (800b83c <_free_r+0x16c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4298      	cmp	r0, r3
 800b724:	d304      	bcc.n	800b730 <_free_r+0x60>
 800b726:	4b46      	ldr	r3, [pc, #280]	; (800b840 <_free_r+0x170>)
 800b728:	4620      	mov	r0, r4
 800b72a:	6819      	ldr	r1, [r3, #0]
 800b72c:	f7ff ff7a 	bl	800b624 <_malloc_trim_r>
 800b730:	4620      	mov	r0, r4
 800b732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b736:	f7ff ba53 	b.w	800abe0 <__malloc_unlock>
 800b73a:	607e      	str	r6, [r7, #4]
 800b73c:	2a00      	cmp	r2, #0
 800b73e:	d139      	bne.n	800b7b4 <_free_r+0xe4>
 800b740:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800b744:	f105 0e08 	add.w	lr, r5, #8
 800b748:	1a5b      	subs	r3, r3, r1
 800b74a:	4408      	add	r0, r1
 800b74c:	6899      	ldr	r1, [r3, #8]
 800b74e:	4571      	cmp	r1, lr
 800b750:	d032      	beq.n	800b7b8 <_free_r+0xe8>
 800b752:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800b756:	f8c1 e00c 	str.w	lr, [r1, #12]
 800b75a:	f8ce 1008 	str.w	r1, [lr, #8]
 800b75e:	19b9      	adds	r1, r7, r6
 800b760:	6849      	ldr	r1, [r1, #4]
 800b762:	07c9      	lsls	r1, r1, #31
 800b764:	d40a      	bmi.n	800b77c <_free_r+0xac>
 800b766:	4430      	add	r0, r6
 800b768:	68b9      	ldr	r1, [r7, #8]
 800b76a:	bb3a      	cbnz	r2, 800b7bc <_free_r+0xec>
 800b76c:	4e35      	ldr	r6, [pc, #212]	; (800b844 <_free_r+0x174>)
 800b76e:	42b1      	cmp	r1, r6
 800b770:	d124      	bne.n	800b7bc <_free_r+0xec>
 800b772:	2201      	movs	r2, #1
 800b774:	616b      	str	r3, [r5, #20]
 800b776:	612b      	str	r3, [r5, #16]
 800b778:	60d9      	str	r1, [r3, #12]
 800b77a:	6099      	str	r1, [r3, #8]
 800b77c:	f040 0101 	orr.w	r1, r0, #1
 800b780:	6059      	str	r1, [r3, #4]
 800b782:	5018      	str	r0, [r3, r0]
 800b784:	2a00      	cmp	r2, #0
 800b786:	d1d3      	bne.n	800b730 <_free_r+0x60>
 800b788:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b78c:	d21a      	bcs.n	800b7c4 <_free_r+0xf4>
 800b78e:	2201      	movs	r2, #1
 800b790:	08c0      	lsrs	r0, r0, #3
 800b792:	1081      	asrs	r1, r0, #2
 800b794:	408a      	lsls	r2, r1
 800b796:	6869      	ldr	r1, [r5, #4]
 800b798:	3001      	adds	r0, #1
 800b79a:	430a      	orrs	r2, r1
 800b79c:	606a      	str	r2, [r5, #4]
 800b79e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800b7a2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800b7a6:	3a08      	subs	r2, #8
 800b7a8:	60da      	str	r2, [r3, #12]
 800b7aa:	6099      	str	r1, [r3, #8]
 800b7ac:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800b7b0:	60cb      	str	r3, [r1, #12]
 800b7b2:	e7bd      	b.n	800b730 <_free_r+0x60>
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	e7d2      	b.n	800b75e <_free_r+0x8e>
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	e7d0      	b.n	800b75e <_free_r+0x8e>
 800b7bc:	68fe      	ldr	r6, [r7, #12]
 800b7be:	60ce      	str	r6, [r1, #12]
 800b7c0:	60b1      	str	r1, [r6, #8]
 800b7c2:	e7db      	b.n	800b77c <_free_r+0xac>
 800b7c4:	0a42      	lsrs	r2, r0, #9
 800b7c6:	2a04      	cmp	r2, #4
 800b7c8:	d813      	bhi.n	800b7f2 <_free_r+0x122>
 800b7ca:	0982      	lsrs	r2, r0, #6
 800b7cc:	3238      	adds	r2, #56	; 0x38
 800b7ce:	1c51      	adds	r1, r2, #1
 800b7d0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800b7d4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800b7d8:	428e      	cmp	r6, r1
 800b7da:	d124      	bne.n	800b826 <_free_r+0x156>
 800b7dc:	2001      	movs	r0, #1
 800b7de:	1092      	asrs	r2, r2, #2
 800b7e0:	fa00 f202 	lsl.w	r2, r0, r2
 800b7e4:	6868      	ldr	r0, [r5, #4]
 800b7e6:	4302      	orrs	r2, r0
 800b7e8:	606a      	str	r2, [r5, #4]
 800b7ea:	60de      	str	r6, [r3, #12]
 800b7ec:	6099      	str	r1, [r3, #8]
 800b7ee:	60b3      	str	r3, [r6, #8]
 800b7f0:	e7de      	b.n	800b7b0 <_free_r+0xe0>
 800b7f2:	2a14      	cmp	r2, #20
 800b7f4:	d801      	bhi.n	800b7fa <_free_r+0x12a>
 800b7f6:	325b      	adds	r2, #91	; 0x5b
 800b7f8:	e7e9      	b.n	800b7ce <_free_r+0xfe>
 800b7fa:	2a54      	cmp	r2, #84	; 0x54
 800b7fc:	d802      	bhi.n	800b804 <_free_r+0x134>
 800b7fe:	0b02      	lsrs	r2, r0, #12
 800b800:	326e      	adds	r2, #110	; 0x6e
 800b802:	e7e4      	b.n	800b7ce <_free_r+0xfe>
 800b804:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b808:	d802      	bhi.n	800b810 <_free_r+0x140>
 800b80a:	0bc2      	lsrs	r2, r0, #15
 800b80c:	3277      	adds	r2, #119	; 0x77
 800b80e:	e7de      	b.n	800b7ce <_free_r+0xfe>
 800b810:	f240 5154 	movw	r1, #1364	; 0x554
 800b814:	428a      	cmp	r2, r1
 800b816:	bf9a      	itte	ls
 800b818:	0c82      	lsrls	r2, r0, #18
 800b81a:	327c      	addls	r2, #124	; 0x7c
 800b81c:	227e      	movhi	r2, #126	; 0x7e
 800b81e:	e7d6      	b.n	800b7ce <_free_r+0xfe>
 800b820:	6889      	ldr	r1, [r1, #8]
 800b822:	428e      	cmp	r6, r1
 800b824:	d004      	beq.n	800b830 <_free_r+0x160>
 800b826:	684a      	ldr	r2, [r1, #4]
 800b828:	f022 0203 	bic.w	r2, r2, #3
 800b82c:	4290      	cmp	r0, r2
 800b82e:	d3f7      	bcc.n	800b820 <_free_r+0x150>
 800b830:	68ce      	ldr	r6, [r1, #12]
 800b832:	e7da      	b.n	800b7ea <_free_r+0x11a>
 800b834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b838:	20000674 	.word	0x20000674
 800b83c:	20000a80 	.word	0x20000a80
 800b840:	20000d78 	.word	0x20000d78
 800b844:	2000067c 	.word	0x2000067c

0800b848 <floor>:
 800b848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b84c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b850:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b854:	2e13      	cmp	r6, #19
 800b856:	4607      	mov	r7, r0
 800b858:	460b      	mov	r3, r1
 800b85a:	460c      	mov	r4, r1
 800b85c:	4605      	mov	r5, r0
 800b85e:	dc35      	bgt.n	800b8cc <floor+0x84>
 800b860:	2e00      	cmp	r6, #0
 800b862:	da16      	bge.n	800b892 <floor+0x4a>
 800b864:	a336      	add	r3, pc, #216	; (adr r3, 800b940 <floor+0xf8>)
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	f7f4 fc7f 	bl	800016c <__adddf3>
 800b86e:	2200      	movs	r2, #0
 800b870:	2300      	movs	r3, #0
 800b872:	f7f5 f8bd 	bl	80009f0 <__aeabi_dcmpgt>
 800b876:	b148      	cbz	r0, 800b88c <floor+0x44>
 800b878:	2c00      	cmp	r4, #0
 800b87a:	da5c      	bge.n	800b936 <floor+0xee>
 800b87c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b880:	433b      	orrs	r3, r7
 800b882:	4b31      	ldr	r3, [pc, #196]	; (800b948 <floor+0x100>)
 800b884:	f04f 0500 	mov.w	r5, #0
 800b888:	bf18      	it	ne
 800b88a:	461c      	movne	r4, r3
 800b88c:	4623      	mov	r3, r4
 800b88e:	462f      	mov	r7, r5
 800b890:	e027      	b.n	800b8e2 <floor+0x9a>
 800b892:	4a2e      	ldr	r2, [pc, #184]	; (800b94c <floor+0x104>)
 800b894:	fa42 f806 	asr.w	r8, r2, r6
 800b898:	ea01 0208 	and.w	r2, r1, r8
 800b89c:	4302      	orrs	r2, r0
 800b89e:	d020      	beq.n	800b8e2 <floor+0x9a>
 800b8a0:	a327      	add	r3, pc, #156	; (adr r3, 800b940 <floor+0xf8>)
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	f7f4 fc61 	bl	800016c <__adddf3>
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f7f5 f89f 	bl	80009f0 <__aeabi_dcmpgt>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d0ea      	beq.n	800b88c <floor+0x44>
 800b8b6:	2c00      	cmp	r4, #0
 800b8b8:	bfbe      	ittt	lt
 800b8ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b8be:	fa43 f606 	asrlt.w	r6, r3, r6
 800b8c2:	19a4      	addlt	r4, r4, r6
 800b8c4:	ea24 0408 	bic.w	r4, r4, r8
 800b8c8:	2500      	movs	r5, #0
 800b8ca:	e7df      	b.n	800b88c <floor+0x44>
 800b8cc:	2e33      	cmp	r6, #51	; 0x33
 800b8ce:	dd0c      	ble.n	800b8ea <floor+0xa2>
 800b8d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b8d4:	d105      	bne.n	800b8e2 <floor+0x9a>
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4602      	mov	r2, r0
 800b8da:	f7f4 fc47 	bl	800016c <__adddf3>
 800b8de:	4607      	mov	r7, r0
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ee:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b8f2:	fa22 f808 	lsr.w	r8, r2, r8
 800b8f6:	ea10 0f08 	tst.w	r0, r8
 800b8fa:	d0f2      	beq.n	800b8e2 <floor+0x9a>
 800b8fc:	a310      	add	r3, pc, #64	; (adr r3, 800b940 <floor+0xf8>)
 800b8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b902:	f7f4 fc33 	bl	800016c <__adddf3>
 800b906:	2200      	movs	r2, #0
 800b908:	2300      	movs	r3, #0
 800b90a:	f7f5 f871 	bl	80009f0 <__aeabi_dcmpgt>
 800b90e:	2800      	cmp	r0, #0
 800b910:	d0bc      	beq.n	800b88c <floor+0x44>
 800b912:	2c00      	cmp	r4, #0
 800b914:	da02      	bge.n	800b91c <floor+0xd4>
 800b916:	2e14      	cmp	r6, #20
 800b918:	d103      	bne.n	800b922 <floor+0xda>
 800b91a:	3401      	adds	r4, #1
 800b91c:	ea25 0508 	bic.w	r5, r5, r8
 800b920:	e7b4      	b.n	800b88c <floor+0x44>
 800b922:	2301      	movs	r3, #1
 800b924:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b928:	fa03 f606 	lsl.w	r6, r3, r6
 800b92c:	4435      	add	r5, r6
 800b92e:	42af      	cmp	r7, r5
 800b930:	bf88      	it	hi
 800b932:	18e4      	addhi	r4, r4, r3
 800b934:	e7f2      	b.n	800b91c <floor+0xd4>
 800b936:	2500      	movs	r5, #0
 800b938:	462c      	mov	r4, r5
 800b93a:	e7a7      	b.n	800b88c <floor+0x44>
 800b93c:	f3af 8000 	nop.w
 800b940:	8800759c 	.word	0x8800759c
 800b944:	7e37e43c 	.word	0x7e37e43c
 800b948:	bff00000 	.word	0xbff00000
 800b94c:	000fffff 	.word	0x000fffff

0800b950 <lrintf>:
 800b950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b952:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b956:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 800b95a:	291e      	cmp	r1, #30
 800b95c:	dc2b      	bgt.n	800b9b6 <lrintf+0x66>
 800b95e:	1c4c      	adds	r4, r1, #1
 800b960:	da02      	bge.n	800b968 <lrintf+0x18>
 800b962:	2000      	movs	r0, #0
 800b964:	b003      	add	sp, #12
 800b966:	bd30      	pop	{r4, r5, pc}
 800b968:	2916      	cmp	r1, #22
 800b96a:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 800b96e:	dd09      	ble.n	800b984 <lrintf+0x34>
 800b970:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800b974:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b978:	3a96      	subs	r2, #150	; 0x96
 800b97a:	4090      	lsls	r0, r2
 800b97c:	2c00      	cmp	r4, #0
 800b97e:	d0f1      	beq.n	800b964 <lrintf+0x14>
 800b980:	4240      	negs	r0, r0
 800b982:	e7ef      	b.n	800b964 <lrintf+0x14>
 800b984:	4b0d      	ldr	r3, [pc, #52]	; (800b9bc <lrintf+0x6c>)
 800b986:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800b98a:	4629      	mov	r1, r5
 800b98c:	f7f5 f8ce 	bl	8000b2c <__addsf3>
 800b990:	9001      	str	r0, [sp, #4]
 800b992:	9801      	ldr	r0, [sp, #4]
 800b994:	4629      	mov	r1, r5
 800b996:	f7f5 f8c7 	bl	8000b28 <__aeabi_fsub>
 800b99a:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800b99e:	d0e0      	beq.n	800b962 <lrintf+0x12>
 800b9a0:	f3c0 0316 	ubfx	r3, r0, #0, #23
 800b9a4:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 800b9a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9ac:	f1c0 0096 	rsb	r0, r0, #150	; 0x96
 800b9b0:	fa23 f000 	lsr.w	r0, r3, r0
 800b9b4:	e7e2      	b.n	800b97c <lrintf+0x2c>
 800b9b6:	f7f5 fb9d 	bl	80010f4 <__aeabi_f2iz>
 800b9ba:	e7d3      	b.n	800b964 <lrintf+0x14>
 800b9bc:	08017e38 	.word	0x08017e38

0800b9c0 <pow>:
 800b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	b08f      	sub	sp, #60	; 0x3c
 800b9c6:	461d      	mov	r5, r3
 800b9c8:	4680      	mov	r8, r0
 800b9ca:	4689      	mov	r9, r1
 800b9cc:	4614      	mov	r4, r2
 800b9ce:	f000 fb17 	bl	800c000 <__ieee754_pow>
 800b9d2:	4fa5      	ldr	r7, [pc, #660]	; (800bc68 <pow+0x2a8>)
 800b9d4:	e9cd 0100 	strd	r0, r1, [sp]
 800b9d8:	f997 3000 	ldrsb.w	r3, [r7]
 800b9dc:	463e      	mov	r6, r7
 800b9de:	9302      	str	r3, [sp, #8]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	d05f      	beq.n	800baa4 <pow+0xe4>
 800b9e4:	4622      	mov	r2, r4
 800b9e6:	462b      	mov	r3, r5
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	f7f5 f80a 	bl	8000a04 <__aeabi_dcmpun>
 800b9f0:	4682      	mov	sl, r0
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d156      	bne.n	800baa4 <pow+0xe4>
 800b9f6:	4642      	mov	r2, r8
 800b9f8:	464b      	mov	r3, r9
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f5 f801 	bl	8000a04 <__aeabi_dcmpun>
 800ba02:	9003      	str	r0, [sp, #12]
 800ba04:	b1e8      	cbz	r0, 800ba42 <pow+0x82>
 800ba06:	2200      	movs	r2, #0
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	f7f4 ffc7 	bl	80009a0 <__aeabi_dcmpeq>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d046      	beq.n	800baa4 <pow+0xe4>
 800ba16:	2301      	movs	r3, #1
 800ba18:	2200      	movs	r2, #0
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	4b93      	ldr	r3, [pc, #588]	; (800bc6c <pow+0x2ac>)
 800ba1e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800ba22:	9305      	str	r3, [sp, #20]
 800ba24:	4b92      	ldr	r3, [pc, #584]	; (800bc70 <pow+0x2b0>)
 800ba26:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ba2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ba2e:	9b02      	ldr	r3, [sp, #8]
 800ba30:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d031      	beq.n	800ba9c <pow+0xdc>
 800ba38:	a804      	add	r0, sp, #16
 800ba3a:	f001 fdfa 	bl	800d632 <matherr>
 800ba3e:	bb38      	cbnz	r0, 800ba90 <pow+0xd0>
 800ba40:	e058      	b.n	800baf4 <pow+0x134>
 800ba42:	f04f 0a00 	mov.w	sl, #0
 800ba46:	f04f 0b00 	mov.w	fp, #0
 800ba4a:	4652      	mov	r2, sl
 800ba4c:	465b      	mov	r3, fp
 800ba4e:	4640      	mov	r0, r8
 800ba50:	4649      	mov	r1, r9
 800ba52:	f7f4 ffa5 	bl	80009a0 <__aeabi_dcmpeq>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d051      	beq.n	800bafe <pow+0x13e>
 800ba5a:	4652      	mov	r2, sl
 800ba5c:	465b      	mov	r3, fp
 800ba5e:	4620      	mov	r0, r4
 800ba60:	4629      	mov	r1, r5
 800ba62:	f7f4 ff9d 	bl	80009a0 <__aeabi_dcmpeq>
 800ba66:	4606      	mov	r6, r0
 800ba68:	b308      	cbz	r0, 800baae <pow+0xee>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	9304      	str	r3, [sp, #16]
 800ba6e:	4b7f      	ldr	r3, [pc, #508]	; (800bc6c <pow+0x2ac>)
 800ba70:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	9b03      	ldr	r3, [sp, #12]
 800ba78:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ba7c:	930c      	str	r3, [sp, #48]	; 0x30
 800ba7e:	9b02      	ldr	r3, [sp, #8]
 800ba80:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d0d7      	beq.n	800ba38 <pow+0x78>
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4b79      	ldr	r3, [pc, #484]	; (800bc70 <pow+0x2b0>)
 800ba8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ba90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba92:	b11b      	cbz	r3, 800ba9c <pow+0xdc>
 800ba94:	f002 f844 	bl	800db20 <__errno>
 800ba98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba9a:	6003      	str	r3, [r0, #0]
 800ba9c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800baa0:	e88d 0018 	stmia.w	sp, {r3, r4}
 800baa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baa8:	b00f      	add	sp, #60	; 0x3c
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	4620      	mov	r0, r4
 800bab0:	4629      	mov	r1, r5
 800bab2:	f001 fdb8 	bl	800d626 <finite>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d0f4      	beq.n	800baa4 <pow+0xe4>
 800baba:	4652      	mov	r2, sl
 800babc:	465b      	mov	r3, fp
 800babe:	4620      	mov	r0, r4
 800bac0:	4629      	mov	r1, r5
 800bac2:	f7f4 ff77 	bl	80009b4 <__aeabi_dcmplt>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d0ec      	beq.n	800baa4 <pow+0xe4>
 800baca:	2301      	movs	r3, #1
 800bacc:	9304      	str	r3, [sp, #16]
 800bace:	4b67      	ldr	r3, [pc, #412]	; (800bc6c <pow+0x2ac>)
 800bad0:	960c      	str	r6, [sp, #48]	; 0x30
 800bad2:	9305      	str	r3, [sp, #20]
 800bad4:	f997 3000 	ldrsb.w	r3, [r7]
 800bad8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800badc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bae0:	b913      	cbnz	r3, 800bae8 <pow+0x128>
 800bae2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800bae6:	e7a7      	b.n	800ba38 <pow+0x78>
 800bae8:	2000      	movs	r0, #0
 800baea:	4962      	ldr	r1, [pc, #392]	; (800bc74 <pow+0x2b4>)
 800baec:	2b02      	cmp	r3, #2
 800baee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800baf2:	d1a1      	bne.n	800ba38 <pow+0x78>
 800baf4:	f002 f814 	bl	800db20 <__errno>
 800baf8:	2321      	movs	r3, #33	; 0x21
 800bafa:	6003      	str	r3, [r0, #0]
 800bafc:	e7c8      	b.n	800ba90 <pow+0xd0>
 800bafe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb02:	f001 fd90 	bl	800d626 <finite>
 800bb06:	9002      	str	r0, [sp, #8]
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	d17f      	bne.n	800bc0c <pow+0x24c>
 800bb0c:	4640      	mov	r0, r8
 800bb0e:	4649      	mov	r1, r9
 800bb10:	f001 fd89 	bl	800d626 <finite>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d079      	beq.n	800bc0c <pow+0x24c>
 800bb18:	4620      	mov	r0, r4
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	f001 fd83 	bl	800d626 <finite>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d073      	beq.n	800bc0c <pow+0x24c>
 800bb24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	4610      	mov	r0, r2
 800bb2c:	f7f4 ff6a 	bl	8000a04 <__aeabi_dcmpun>
 800bb30:	f997 7000 	ldrsb.w	r7, [r7]
 800bb34:	4b4d      	ldr	r3, [pc, #308]	; (800bc6c <pow+0x2ac>)
 800bb36:	b1a0      	cbz	r0, 800bb62 <pow+0x1a2>
 800bb38:	2201      	movs	r2, #1
 800bb3a:	9305      	str	r3, [sp, #20]
 800bb3c:	9b02      	ldr	r3, [sp, #8]
 800bb3e:	9204      	str	r2, [sp, #16]
 800bb40:	930c      	str	r3, [sp, #48]	; 0x30
 800bb42:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bb46:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bb4a:	2f00      	cmp	r7, #0
 800bb4c:	d0c9      	beq.n	800bae2 <pow+0x122>
 800bb4e:	4652      	mov	r2, sl
 800bb50:	465b      	mov	r3, fp
 800bb52:	4650      	mov	r0, sl
 800bb54:	4659      	mov	r1, fp
 800bb56:	f7f4 fde5 	bl	8000724 <__aeabi_ddiv>
 800bb5a:	2f02      	cmp	r7, #2
 800bb5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bb60:	e7c7      	b.n	800baf2 <pow+0x132>
 800bb62:	2203      	movs	r2, #3
 800bb64:	9305      	str	r3, [sp, #20]
 800bb66:	9204      	str	r2, [sp, #16]
 800bb68:	900c      	str	r0, [sp, #48]	; 0x30
 800bb6a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bb6e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bb72:	bb57      	cbnz	r7, 800bbca <pow+0x20a>
 800bb74:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bb78:	4b3f      	ldr	r3, [pc, #252]	; (800bc78 <pow+0x2b8>)
 800bb7a:	4640      	mov	r0, r8
 800bb7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bb80:	4649      	mov	r1, r9
 800bb82:	4652      	mov	r2, sl
 800bb84:	465b      	mov	r3, fp
 800bb86:	f7f4 ff15 	bl	80009b4 <__aeabi_dcmplt>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d064      	beq.n	800bc58 <pow+0x298>
 800bb8e:	2200      	movs	r2, #0
 800bb90:	4b3a      	ldr	r3, [pc, #232]	; (800bc7c <pow+0x2bc>)
 800bb92:	4620      	mov	r0, r4
 800bb94:	4629      	mov	r1, r5
 800bb96:	f7f4 fc9b 	bl	80004d0 <__aeabi_dmul>
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	460d      	mov	r5, r1
 800bb9e:	f001 fd51 	bl	800d644 <rint>
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4620      	mov	r0, r4
 800bba8:	4629      	mov	r1, r5
 800bbaa:	f7f4 fef9 	bl	80009a0 <__aeabi_dcmpeq>
 800bbae:	b920      	cbnz	r0, 800bbba <pow+0x1fa>
 800bbb0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bbb4:	4b32      	ldr	r3, [pc, #200]	; (800bc80 <pow+0x2c0>)
 800bbb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bbba:	f996 3000 	ldrsb.w	r3, [r6]
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d14a      	bne.n	800bc58 <pow+0x298>
 800bbc2:	f001 ffad 	bl	800db20 <__errno>
 800bbc6:	2322      	movs	r3, #34	; 0x22
 800bbc8:	e797      	b.n	800bafa <pow+0x13a>
 800bbca:	2200      	movs	r2, #0
 800bbcc:	4b2d      	ldr	r3, [pc, #180]	; (800bc84 <pow+0x2c4>)
 800bbce:	4640      	mov	r0, r8
 800bbd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bbd4:	4649      	mov	r1, r9
 800bbd6:	4652      	mov	r2, sl
 800bbd8:	465b      	mov	r3, fp
 800bbda:	f7f4 feeb 	bl	80009b4 <__aeabi_dcmplt>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d0eb      	beq.n	800bbba <pow+0x1fa>
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	4b25      	ldr	r3, [pc, #148]	; (800bc7c <pow+0x2bc>)
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	4629      	mov	r1, r5
 800bbea:	f7f4 fc71 	bl	80004d0 <__aeabi_dmul>
 800bbee:	4604      	mov	r4, r0
 800bbf0:	460d      	mov	r5, r1
 800bbf2:	f001 fd27 	bl	800d644 <rint>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	f7f4 fecf 	bl	80009a0 <__aeabi_dcmpeq>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d1d9      	bne.n	800bbba <pow+0x1fa>
 800bc06:	2200      	movs	r2, #0
 800bc08:	4b1a      	ldr	r3, [pc, #104]	; (800bc74 <pow+0x2b4>)
 800bc0a:	e7d4      	b.n	800bbb6 <pow+0x1f6>
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc12:	2300      	movs	r3, #0
 800bc14:	f7f4 fec4 	bl	80009a0 <__aeabi_dcmpeq>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	f43f af43 	beq.w	800baa4 <pow+0xe4>
 800bc1e:	4640      	mov	r0, r8
 800bc20:	4649      	mov	r1, r9
 800bc22:	f001 fd00 	bl	800d626 <finite>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	f43f af3c 	beq.w	800baa4 <pow+0xe4>
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	4629      	mov	r1, r5
 800bc30:	f001 fcf9 	bl	800d626 <finite>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f43f af35 	beq.w	800baa4 <pow+0xe4>
 800bc3a:	2304      	movs	r3, #4
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	4b0b      	ldr	r3, [pc, #44]	; (800bc6c <pow+0x2ac>)
 800bc40:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bc44:	9305      	str	r3, [sp, #20]
 800bc46:	2300      	movs	r3, #0
 800bc48:	2400      	movs	r4, #0
 800bc4a:	930c      	str	r3, [sp, #48]	; 0x30
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bc52:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800bc56:	e7b0      	b.n	800bbba <pow+0x1fa>
 800bc58:	a804      	add	r0, sp, #16
 800bc5a:	f001 fcea 	bl	800d632 <matherr>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f47f af16 	bne.w	800ba90 <pow+0xd0>
 800bc64:	e7ad      	b.n	800bbc2 <pow+0x202>
 800bc66:	bf00      	nop
 800bc68:	20000a84 	.word	0x20000a84
 800bc6c:	08017e40 	.word	0x08017e40
 800bc70:	3ff00000 	.word	0x3ff00000
 800bc74:	fff00000 	.word	0xfff00000
 800bc78:	47efffff 	.word	0x47efffff
 800bc7c:	3fe00000 	.word	0x3fe00000
 800bc80:	c7efffff 	.word	0xc7efffff
 800bc84:	7ff00000 	.word	0x7ff00000

0800bc88 <asinf>:
 800bc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc8a:	b08b      	sub	sp, #44	; 0x2c
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	f000 ff55 	bl	800cb3c <__ieee754_asinf>
 800bc92:	4e21      	ldr	r6, [pc, #132]	; (800bd18 <asinf+0x90>)
 800bc94:	4605      	mov	r5, r0
 800bc96:	f996 3000 	ldrsb.w	r3, [r6]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	d038      	beq.n	800bd10 <asinf+0x88>
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4620      	mov	r0, r4
 800bca2:	f7f5 fa11 	bl	80010c8 <__aeabi_fcmpun>
 800bca6:	4607      	mov	r7, r0
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d131      	bne.n	800bd10 <asinf+0x88>
 800bcac:	4620      	mov	r0, r4
 800bcae:	f001 fed1 	bl	800da54 <fabsf>
 800bcb2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bcb6:	f7f5 f9fd 	bl	80010b4 <__aeabi_fcmpgt>
 800bcba:	b348      	cbz	r0, 800bd10 <asinf+0x88>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	9300      	str	r3, [sp, #0]
 800bcc0:	4b16      	ldr	r3, [pc, #88]	; (800bd1c <asinf+0x94>)
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	9301      	str	r3, [sp, #4]
 800bcc6:	9708      	str	r7, [sp, #32]
 800bcc8:	f7f4 fbae 	bl	8000428 <__aeabi_f2d>
 800bccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcd4:	4812      	ldr	r0, [pc, #72]	; (800bd20 <asinf+0x98>)
 800bcd6:	f001 fcaf 	bl	800d638 <nan>
 800bcda:	f996 3000 	ldrsb.w	r3, [r6]
 800bcde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d104      	bne.n	800bcf0 <asinf+0x68>
 800bce6:	f001 ff1b 	bl	800db20 <__errno>
 800bcea:	2321      	movs	r3, #33	; 0x21
 800bcec:	6003      	str	r3, [r0, #0]
 800bcee:	e004      	b.n	800bcfa <asinf+0x72>
 800bcf0:	4668      	mov	r0, sp
 800bcf2:	f001 fc9e 	bl	800d632 <matherr>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d0f5      	beq.n	800bce6 <asinf+0x5e>
 800bcfa:	9b08      	ldr	r3, [sp, #32]
 800bcfc:	b11b      	cbz	r3, 800bd06 <asinf+0x7e>
 800bcfe:	f001 ff0f 	bl	800db20 <__errno>
 800bd02:	9b08      	ldr	r3, [sp, #32]
 800bd04:	6003      	str	r3, [r0, #0]
 800bd06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd0a:	f7f4 feb9 	bl	8000a80 <__aeabi_d2f>
 800bd0e:	4605      	mov	r5, r0
 800bd10:	4628      	mov	r0, r5
 800bd12:	b00b      	add	sp, #44	; 0x2c
 800bd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20000a84 	.word	0x20000a84
 800bd1c:	08017e44 	.word	0x08017e44
 800bd20:	0800e333 	.word	0x0800e333

0800bd24 <atan2f>:
 800bd24:	f001 b84e 	b.w	800cdc4 <__ieee754_atan2f>

0800bd28 <powf>:
 800bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	b08b      	sub	sp, #44	; 0x2c
 800bd2e:	4605      	mov	r5, r0
 800bd30:	460c      	mov	r4, r1
 800bd32:	f001 f8d7 	bl	800cee4 <__ieee754_powf>
 800bd36:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 800bffc <powf+0x2d4>
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	f998 9000 	ldrsb.w	r9, [r8]
 800bd40:	4647      	mov	r7, r8
 800bd42:	f1b9 3fff 	cmp.w	r9, #4294967295
 800bd46:	d060      	beq.n	800be0a <powf+0xe2>
 800bd48:	4621      	mov	r1, r4
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f7f5 f9bc 	bl	80010c8 <__aeabi_fcmpun>
 800bd50:	4683      	mov	fp, r0
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d159      	bne.n	800be0a <powf+0xe2>
 800bd56:	4629      	mov	r1, r5
 800bd58:	4628      	mov	r0, r5
 800bd5a:	f7f5 f9b5 	bl	80010c8 <__aeabi_fcmpun>
 800bd5e:	2100      	movs	r1, #0
 800bd60:	4682      	mov	sl, r0
 800bd62:	b300      	cbz	r0, 800bda6 <powf+0x7e>
 800bd64:	4620      	mov	r0, r4
 800bd66:	f7f5 f97d 	bl	8001064 <__aeabi_fcmpeq>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d04d      	beq.n	800be0a <powf+0xe2>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	4b9c      	ldr	r3, [pc, #624]	; (800bfe4 <powf+0x2bc>)
 800bd74:	4628      	mov	r0, r5
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	f8cd b020 	str.w	fp, [sp, #32]
 800bd7c:	f7f4 fb54 	bl	8000428 <__aeabi_f2d>
 800bd80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd84:	4620      	mov	r0, r4
 800bd86:	f7f4 fb4f 	bl	8000428 <__aeabi_f2d>
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	4b96      	ldr	r3, [pc, #600]	; (800bfe8 <powf+0x2c0>)
 800bd8e:	f1b9 0f02 	cmp.w	r9, #2
 800bd92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd9a:	d031      	beq.n	800be00 <powf+0xd8>
 800bd9c:	4668      	mov	r0, sp
 800bd9e:	f001 fc48 	bl	800d632 <matherr>
 800bda2:	bb38      	cbnz	r0, 800bdf4 <powf+0xcc>
 800bda4:	e05d      	b.n	800be62 <powf+0x13a>
 800bda6:	4628      	mov	r0, r5
 800bda8:	f7f5 f95c 	bl	8001064 <__aeabi_fcmpeq>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d05d      	beq.n	800be6c <powf+0x144>
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f7f5 f956 	bl	8001064 <__aeabi_fcmpeq>
 800bdb8:	4607      	mov	r7, r0
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d029      	beq.n	800be12 <powf+0xea>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	4b88      	ldr	r3, [pc, #544]	; (800bfe4 <powf+0x2bc>)
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	9301      	str	r3, [sp, #4]
 800bdc8:	f8cd a020 	str.w	sl, [sp, #32]
 800bdcc:	f7f4 fb2c 	bl	8000428 <__aeabi_f2d>
 800bdd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f7f4 fb27 	bl	8000428 <__aeabi_f2d>
 800bdda:	2200      	movs	r2, #0
 800bddc:	2300      	movs	r3, #0
 800bdde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bde2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bde6:	f1b9 0f00 	cmp.w	r9, #0
 800bdea:	d0d7      	beq.n	800bd9c <powf+0x74>
 800bdec:	2200      	movs	r2, #0
 800bdee:	4b7e      	ldr	r3, [pc, #504]	; (800bfe8 <powf+0x2c0>)
 800bdf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bdf4:	9b08      	ldr	r3, [sp, #32]
 800bdf6:	b11b      	cbz	r3, 800be00 <powf+0xd8>
 800bdf8:	f001 fe92 	bl	800db20 <__errno>
 800bdfc:	9b08      	ldr	r3, [sp, #32]
 800bdfe:	6003      	str	r3, [r0, #0]
 800be00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be04:	f7f4 fe3c 	bl	8000a80 <__aeabi_d2f>
 800be08:	4606      	mov	r6, r0
 800be0a:	4630      	mov	r0, r6
 800be0c:	b00b      	add	sp, #44	; 0x2c
 800be0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be12:	4620      	mov	r0, r4
 800be14:	f001 fe21 	bl	800da5a <finitef>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d0f6      	beq.n	800be0a <powf+0xe2>
 800be1c:	2100      	movs	r1, #0
 800be1e:	4620      	mov	r0, r4
 800be20:	f7f5 f92a 	bl	8001078 <__aeabi_fcmplt>
 800be24:	2800      	cmp	r0, #0
 800be26:	d0f0      	beq.n	800be0a <powf+0xe2>
 800be28:	2301      	movs	r3, #1
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	4b6d      	ldr	r3, [pc, #436]	; (800bfe4 <powf+0x2bc>)
 800be2e:	4628      	mov	r0, r5
 800be30:	9301      	str	r3, [sp, #4]
 800be32:	9708      	str	r7, [sp, #32]
 800be34:	f7f4 faf8 	bl	8000428 <__aeabi_f2d>
 800be38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be3c:	4620      	mov	r0, r4
 800be3e:	f7f4 faf3 	bl	8000428 <__aeabi_f2d>
 800be42:	f998 3000 	ldrsb.w	r3, [r8]
 800be46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be4a:	b923      	cbnz	r3, 800be56 <powf+0x12e>
 800be4c:	2200      	movs	r2, #0
 800be4e:	2300      	movs	r3, #0
 800be50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be54:	e7a2      	b.n	800bd9c <powf+0x74>
 800be56:	2000      	movs	r0, #0
 800be58:	4964      	ldr	r1, [pc, #400]	; (800bfec <powf+0x2c4>)
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be60:	d19c      	bne.n	800bd9c <powf+0x74>
 800be62:	f001 fe5d 	bl	800db20 <__errno>
 800be66:	2321      	movs	r3, #33	; 0x21
 800be68:	6003      	str	r3, [r0, #0]
 800be6a:	e7c3      	b.n	800bdf4 <powf+0xcc>
 800be6c:	4630      	mov	r0, r6
 800be6e:	f001 fdf4 	bl	800da5a <finitef>
 800be72:	4680      	mov	r8, r0
 800be74:	2800      	cmp	r0, #0
 800be76:	f040 8087 	bne.w	800bf88 <powf+0x260>
 800be7a:	4628      	mov	r0, r5
 800be7c:	f001 fded 	bl	800da5a <finitef>
 800be80:	2800      	cmp	r0, #0
 800be82:	f000 8081 	beq.w	800bf88 <powf+0x260>
 800be86:	4620      	mov	r0, r4
 800be88:	f001 fde7 	bl	800da5a <finitef>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d07b      	beq.n	800bf88 <powf+0x260>
 800be90:	4631      	mov	r1, r6
 800be92:	4630      	mov	r0, r6
 800be94:	f7f5 f918 	bl	80010c8 <__aeabi_fcmpun>
 800be98:	f997 6000 	ldrsb.w	r6, [r7]
 800be9c:	4b51      	ldr	r3, [pc, #324]	; (800bfe4 <powf+0x2bc>)
 800be9e:	b1d0      	cbz	r0, 800bed6 <powf+0x1ae>
 800bea0:	2201      	movs	r2, #1
 800bea2:	4628      	mov	r0, r5
 800bea4:	e88d 000c 	stmia.w	sp, {r2, r3}
 800bea8:	f8cd 8020 	str.w	r8, [sp, #32]
 800beac:	f7f4 fabc 	bl	8000428 <__aeabi_f2d>
 800beb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beb4:	4620      	mov	r0, r4
 800beb6:	f7f4 fab7 	bl	8000428 <__aeabi_f2d>
 800beba:	2200      	movs	r2, #0
 800bebc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bec0:	2300      	movs	r3, #0
 800bec2:	2e00      	cmp	r6, #0
 800bec4:	d0c4      	beq.n	800be50 <powf+0x128>
 800bec6:	4610      	mov	r0, r2
 800bec8:	4619      	mov	r1, r3
 800beca:	f7f4 fc2b 	bl	8000724 <__aeabi_ddiv>
 800bece:	2e02      	cmp	r6, #2
 800bed0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bed4:	e7c4      	b.n	800be60 <powf+0x138>
 800bed6:	2203      	movs	r2, #3
 800bed8:	9008      	str	r0, [sp, #32]
 800beda:	4628      	mov	r0, r5
 800bedc:	e88d 000c 	stmia.w	sp, {r2, r3}
 800bee0:	f7f4 faa2 	bl	8000428 <__aeabi_f2d>
 800bee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bee8:	4620      	mov	r0, r4
 800beea:	f7f4 fa9d 	bl	8000428 <__aeabi_f2d>
 800beee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bef2:	bb4e      	cbnz	r6, 800bf48 <powf+0x220>
 800bef4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bef8:	4b3d      	ldr	r3, [pc, #244]	; (800bff0 <powf+0x2c8>)
 800befa:	2100      	movs	r1, #0
 800befc:	4628      	mov	r0, r5
 800befe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf02:	f7f5 f8b9 	bl	8001078 <__aeabi_fcmplt>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d064      	beq.n	800bfd4 <powf+0x2ac>
 800bf0a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f7f4 ff14 	bl	8000d3c <__aeabi_fmul>
 800bf14:	f7f4 fa88 	bl	8000428 <__aeabi_f2d>
 800bf18:	4604      	mov	r4, r0
 800bf1a:	460d      	mov	r5, r1
 800bf1c:	f001 fb92 	bl	800d644 <rint>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4620      	mov	r0, r4
 800bf26:	4629      	mov	r1, r5
 800bf28:	f7f4 fd3a 	bl	80009a0 <__aeabi_dcmpeq>
 800bf2c:	b920      	cbnz	r0, 800bf38 <powf+0x210>
 800bf2e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bf32:	4b30      	ldr	r3, [pc, #192]	; (800bff4 <powf+0x2cc>)
 800bf34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf38:	f997 3000 	ldrsb.w	r3, [r7]
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d149      	bne.n	800bfd4 <powf+0x2ac>
 800bf40:	f001 fdee 	bl	800db20 <__errno>
 800bf44:	2322      	movs	r3, #34	; 0x22
 800bf46:	e78f      	b.n	800be68 <powf+0x140>
 800bf48:	2200      	movs	r2, #0
 800bf4a:	4b2b      	ldr	r3, [pc, #172]	; (800bff8 <powf+0x2d0>)
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	4628      	mov	r0, r5
 800bf50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf54:	f7f5 f890 	bl	8001078 <__aeabi_fcmplt>
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d0ed      	beq.n	800bf38 <powf+0x210>
 800bf5c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bf60:	4620      	mov	r0, r4
 800bf62:	f7f4 feeb 	bl	8000d3c <__aeabi_fmul>
 800bf66:	f7f4 fa5f 	bl	8000428 <__aeabi_f2d>
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	460d      	mov	r5, r1
 800bf6e:	f001 fb69 	bl	800d644 <rint>
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	4620      	mov	r0, r4
 800bf78:	4629      	mov	r1, r5
 800bf7a:	f7f4 fd11 	bl	80009a0 <__aeabi_dcmpeq>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d1da      	bne.n	800bf38 <powf+0x210>
 800bf82:	2200      	movs	r2, #0
 800bf84:	4b19      	ldr	r3, [pc, #100]	; (800bfec <powf+0x2c4>)
 800bf86:	e7d5      	b.n	800bf34 <powf+0x20c>
 800bf88:	2100      	movs	r1, #0
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7f5 f86a 	bl	8001064 <__aeabi_fcmpeq>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	f43f af3a 	beq.w	800be0a <powf+0xe2>
 800bf96:	4628      	mov	r0, r5
 800bf98:	f001 fd5f 	bl	800da5a <finitef>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	f43f af34 	beq.w	800be0a <powf+0xe2>
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f001 fd59 	bl	800da5a <finitef>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	f43f af2e 	beq.w	800be0a <powf+0xe2>
 800bfae:	2304      	movs	r3, #4
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	4b0c      	ldr	r3, [pc, #48]	; (800bfe4 <powf+0x2bc>)
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	9301      	str	r3, [sp, #4]
 800bfb8:	2300      	movs	r3, #0
 800bfba:	9308      	str	r3, [sp, #32]
 800bfbc:	f7f4 fa34 	bl	8000428 <__aeabi_f2d>
 800bfc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f7f4 fa2f 	bl	8000428 <__aeabi_f2d>
 800bfca:	2200      	movs	r2, #0
 800bfcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	e7af      	b.n	800bf34 <powf+0x20c>
 800bfd4:	4668      	mov	r0, sp
 800bfd6:	f001 fb2c 	bl	800d632 <matherr>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	f47f af0a 	bne.w	800bdf4 <powf+0xcc>
 800bfe0:	e7ae      	b.n	800bf40 <powf+0x218>
 800bfe2:	bf00      	nop
 800bfe4:	08017e4a 	.word	0x08017e4a
 800bfe8:	3ff00000 	.word	0x3ff00000
 800bfec:	fff00000 	.word	0xfff00000
 800bff0:	47efffff 	.word	0x47efffff
 800bff4:	c7efffff 	.word	0xc7efffff
 800bff8:	7ff00000 	.word	0x7ff00000
 800bffc:	20000a84 	.word	0x20000a84

0800c000 <__ieee754_pow>:
 800c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c004:	b093      	sub	sp, #76	; 0x4c
 800c006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c00a:	9e03      	ldr	r6, [sp, #12]
 800c00c:	9a02      	ldr	r2, [sp, #8]
 800c00e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c012:	ea55 0302 	orrs.w	r3, r5, r2
 800c016:	4607      	mov	r7, r0
 800c018:	4688      	mov	r8, r1
 800c01a:	4682      	mov	sl, r0
 800c01c:	4689      	mov	r9, r1
 800c01e:	f000 849e 	beq.w	800c95e <__ieee754_pow+0x95e>
 800c022:	4b77      	ldr	r3, [pc, #476]	; (800c200 <__ieee754_pow+0x200>)
 800c024:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c028:	429c      	cmp	r4, r3
 800c02a:	dc09      	bgt.n	800c040 <__ieee754_pow+0x40>
 800c02c:	d103      	bne.n	800c036 <__ieee754_pow+0x36>
 800c02e:	b938      	cbnz	r0, 800c040 <__ieee754_pow+0x40>
 800c030:	42a5      	cmp	r5, r4
 800c032:	dc0d      	bgt.n	800c050 <__ieee754_pow+0x50>
 800c034:	e001      	b.n	800c03a <__ieee754_pow+0x3a>
 800c036:	429d      	cmp	r5, r3
 800c038:	dc02      	bgt.n	800c040 <__ieee754_pow+0x40>
 800c03a:	429d      	cmp	r5, r3
 800c03c:	d10e      	bne.n	800c05c <__ieee754_pow+0x5c>
 800c03e:	b16a      	cbz	r2, 800c05c <__ieee754_pow+0x5c>
 800c040:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c044:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c048:	ea54 030a 	orrs.w	r3, r4, sl
 800c04c:	f000 8487 	beq.w	800c95e <__ieee754_pow+0x95e>
 800c050:	486c      	ldr	r0, [pc, #432]	; (800c204 <__ieee754_pow+0x204>)
 800c052:	b013      	add	sp, #76	; 0x4c
 800c054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c058:	f001 baee 	b.w	800d638 <nan>
 800c05c:	f1b9 0f00 	cmp.w	r9, #0
 800c060:	da4f      	bge.n	800c102 <__ieee754_pow+0x102>
 800c062:	4b69      	ldr	r3, [pc, #420]	; (800c208 <__ieee754_pow+0x208>)
 800c064:	429d      	cmp	r5, r3
 800c066:	dc4a      	bgt.n	800c0fe <__ieee754_pow+0xfe>
 800c068:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c06c:	429d      	cmp	r5, r3
 800c06e:	dd48      	ble.n	800c102 <__ieee754_pow+0x102>
 800c070:	152b      	asrs	r3, r5, #20
 800c072:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c076:	2b14      	cmp	r3, #20
 800c078:	dd24      	ble.n	800c0c4 <__ieee754_pow+0xc4>
 800c07a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c07e:	fa22 f103 	lsr.w	r1, r2, r3
 800c082:	fa01 f303 	lsl.w	r3, r1, r3
 800c086:	429a      	cmp	r2, r3
 800c088:	d13b      	bne.n	800c102 <__ieee754_pow+0x102>
 800c08a:	f001 0101 	and.w	r1, r1, #1
 800c08e:	f1c1 0302 	rsb	r3, r1, #2
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	2a00      	cmp	r2, #0
 800c096:	d156      	bne.n	800c146 <__ieee754_pow+0x146>
 800c098:	4b59      	ldr	r3, [pc, #356]	; (800c200 <__ieee754_pow+0x200>)
 800c09a:	429d      	cmp	r5, r3
 800c09c:	d122      	bne.n	800c0e4 <__ieee754_pow+0xe4>
 800c09e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c0a2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c0a6:	ea53 030a 	orrs.w	r3, r3, sl
 800c0aa:	f000 8458 	beq.w	800c95e <__ieee754_pow+0x95e>
 800c0ae:	4b57      	ldr	r3, [pc, #348]	; (800c20c <__ieee754_pow+0x20c>)
 800c0b0:	429c      	cmp	r4, r3
 800c0b2:	dd28      	ble.n	800c106 <__ieee754_pow+0x106>
 800c0b4:	2e00      	cmp	r6, #0
 800c0b6:	f280 8456 	bge.w	800c966 <__ieee754_pow+0x966>
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	2100      	movs	r1, #0
 800c0be:	b013      	add	sp, #76	; 0x4c
 800c0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c4:	2a00      	cmp	r2, #0
 800c0c6:	d13c      	bne.n	800c142 <__ieee754_pow+0x142>
 800c0c8:	f1c3 0314 	rsb	r3, r3, #20
 800c0cc:	fa45 f103 	asr.w	r1, r5, r3
 800c0d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c0d4:	429d      	cmp	r5, r3
 800c0d6:	f040 844e 	bne.w	800c976 <__ieee754_pow+0x976>
 800c0da:	f001 0101 	and.w	r1, r1, #1
 800c0de:	f1c1 0302 	rsb	r3, r1, #2
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	4b4a      	ldr	r3, [pc, #296]	; (800c210 <__ieee754_pow+0x210>)
 800c0e6:	429d      	cmp	r5, r3
 800c0e8:	d114      	bne.n	800c114 <__ieee754_pow+0x114>
 800c0ea:	2e00      	cmp	r6, #0
 800c0ec:	f280 843f 	bge.w	800c96e <__ieee754_pow+0x96e>
 800c0f0:	463a      	mov	r2, r7
 800c0f2:	4643      	mov	r3, r8
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	4946      	ldr	r1, [pc, #280]	; (800c210 <__ieee754_pow+0x210>)
 800c0f8:	f7f4 fb14 	bl	8000724 <__aeabi_ddiv>
 800c0fc:	e7df      	b.n	800c0be <__ieee754_pow+0xbe>
 800c0fe:	2302      	movs	r3, #2
 800c100:	e7c7      	b.n	800c092 <__ieee754_pow+0x92>
 800c102:	2300      	movs	r3, #0
 800c104:	e7c5      	b.n	800c092 <__ieee754_pow+0x92>
 800c106:	2e00      	cmp	r6, #0
 800c108:	dad7      	bge.n	800c0ba <__ieee754_pow+0xba>
 800c10a:	9b03      	ldr	r3, [sp, #12]
 800c10c:	9802      	ldr	r0, [sp, #8]
 800c10e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c112:	e7d4      	b.n	800c0be <__ieee754_pow+0xbe>
 800c114:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800c118:	d106      	bne.n	800c128 <__ieee754_pow+0x128>
 800c11a:	463a      	mov	r2, r7
 800c11c:	4643      	mov	r3, r8
 800c11e:	4638      	mov	r0, r7
 800c120:	4641      	mov	r1, r8
 800c122:	f7f4 f9d5 	bl	80004d0 <__aeabi_dmul>
 800c126:	e7ca      	b.n	800c0be <__ieee754_pow+0xbe>
 800c128:	4b3a      	ldr	r3, [pc, #232]	; (800c214 <__ieee754_pow+0x214>)
 800c12a:	429e      	cmp	r6, r3
 800c12c:	d10b      	bne.n	800c146 <__ieee754_pow+0x146>
 800c12e:	f1b9 0f00 	cmp.w	r9, #0
 800c132:	db08      	blt.n	800c146 <__ieee754_pow+0x146>
 800c134:	4638      	mov	r0, r7
 800c136:	4641      	mov	r1, r8
 800c138:	b013      	add	sp, #76	; 0x4c
 800c13a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13e:	f000 bc51 	b.w	800c9e4 <__ieee754_sqrt>
 800c142:	2300      	movs	r3, #0
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	4638      	mov	r0, r7
 800c148:	4641      	mov	r1, r8
 800c14a:	f001 fa69 	bl	800d620 <fabs>
 800c14e:	f1ba 0f00 	cmp.w	sl, #0
 800c152:	d125      	bne.n	800c1a0 <__ieee754_pow+0x1a0>
 800c154:	b124      	cbz	r4, 800c160 <__ieee754_pow+0x160>
 800c156:	4b2e      	ldr	r3, [pc, #184]	; (800c210 <__ieee754_pow+0x210>)
 800c158:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d11f      	bne.n	800c1a0 <__ieee754_pow+0x1a0>
 800c160:	2e00      	cmp	r6, #0
 800c162:	da05      	bge.n	800c170 <__ieee754_pow+0x170>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	2000      	movs	r0, #0
 800c16a:	4929      	ldr	r1, [pc, #164]	; (800c210 <__ieee754_pow+0x210>)
 800c16c:	f7f4 fada 	bl	8000724 <__aeabi_ddiv>
 800c170:	f1b9 0f00 	cmp.w	r9, #0
 800c174:	daa3      	bge.n	800c0be <__ieee754_pow+0xbe>
 800c176:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c17a:	9b00      	ldr	r3, [sp, #0]
 800c17c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c180:	4323      	orrs	r3, r4
 800c182:	d106      	bne.n	800c192 <__ieee754_pow+0x192>
 800c184:	4602      	mov	r2, r0
 800c186:	460b      	mov	r3, r1
 800c188:	f7f3 ffee 	bl	8000168 <__aeabi_dsub>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	e7b2      	b.n	800c0f8 <__ieee754_pow+0xf8>
 800c192:	9b00      	ldr	r3, [sp, #0]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d192      	bne.n	800c0be <__ieee754_pow+0xbe>
 800c198:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c19c:	4619      	mov	r1, r3
 800c19e:	e78e      	b.n	800c0be <__ieee754_pow+0xbe>
 800c1a0:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800c1a4:	f109 33ff 	add.w	r3, r9, #4294967295
 800c1a8:	930c      	str	r3, [sp, #48]	; 0x30
 800c1aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1ac:	9b00      	ldr	r3, [sp, #0]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	d104      	bne.n	800c1bc <__ieee754_pow+0x1bc>
 800c1b2:	463a      	mov	r2, r7
 800c1b4:	4643      	mov	r3, r8
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	4641      	mov	r1, r8
 800c1ba:	e7e5      	b.n	800c188 <__ieee754_pow+0x188>
 800c1bc:	4b16      	ldr	r3, [pc, #88]	; (800c218 <__ieee754_pow+0x218>)
 800c1be:	429d      	cmp	r5, r3
 800c1c0:	f340 80fc 	ble.w	800c3bc <__ieee754_pow+0x3bc>
 800c1c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c1c8:	429d      	cmp	r5, r3
 800c1ca:	dd0b      	ble.n	800c1e4 <__ieee754_pow+0x1e4>
 800c1cc:	4b0f      	ldr	r3, [pc, #60]	; (800c20c <__ieee754_pow+0x20c>)
 800c1ce:	429c      	cmp	r4, r3
 800c1d0:	dc0e      	bgt.n	800c1f0 <__ieee754_pow+0x1f0>
 800c1d2:	2e00      	cmp	r6, #0
 800c1d4:	f6bf af71 	bge.w	800c0ba <__ieee754_pow+0xba>
 800c1d8:	a307      	add	r3, pc, #28	; (adr r3, 800c1f8 <__ieee754_pow+0x1f8>)
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	4610      	mov	r0, r2
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	e79e      	b.n	800c122 <__ieee754_pow+0x122>
 800c1e4:	4b0d      	ldr	r3, [pc, #52]	; (800c21c <__ieee754_pow+0x21c>)
 800c1e6:	429c      	cmp	r4, r3
 800c1e8:	ddf3      	ble.n	800c1d2 <__ieee754_pow+0x1d2>
 800c1ea:	4b09      	ldr	r3, [pc, #36]	; (800c210 <__ieee754_pow+0x210>)
 800c1ec:	429c      	cmp	r4, r3
 800c1ee:	dd17      	ble.n	800c220 <__ieee754_pow+0x220>
 800c1f0:	2e00      	cmp	r6, #0
 800c1f2:	dcf1      	bgt.n	800c1d8 <__ieee754_pow+0x1d8>
 800c1f4:	e761      	b.n	800c0ba <__ieee754_pow+0xba>
 800c1f6:	bf00      	nop
 800c1f8:	8800759c 	.word	0x8800759c
 800c1fc:	7e37e43c 	.word	0x7e37e43c
 800c200:	7ff00000 	.word	0x7ff00000
 800c204:	0800e333 	.word	0x0800e333
 800c208:	433fffff 	.word	0x433fffff
 800c20c:	3fefffff 	.word	0x3fefffff
 800c210:	3ff00000 	.word	0x3ff00000
 800c214:	3fe00000 	.word	0x3fe00000
 800c218:	41e00000 	.word	0x41e00000
 800c21c:	3feffffe 	.word	0x3feffffe
 800c220:	2200      	movs	r2, #0
 800c222:	4b61      	ldr	r3, [pc, #388]	; (800c3a8 <__ieee754_pow+0x3a8>)
 800c224:	f7f3 ffa0 	bl	8000168 <__aeabi_dsub>
 800c228:	a355      	add	r3, pc, #340	; (adr r3, 800c380 <__ieee754_pow+0x380>)
 800c22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22e:	4604      	mov	r4, r0
 800c230:	460d      	mov	r5, r1
 800c232:	f7f4 f94d 	bl	80004d0 <__aeabi_dmul>
 800c236:	a354      	add	r3, pc, #336	; (adr r3, 800c388 <__ieee754_pow+0x388>)
 800c238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23c:	4606      	mov	r6, r0
 800c23e:	460f      	mov	r7, r1
 800c240:	4620      	mov	r0, r4
 800c242:	4629      	mov	r1, r5
 800c244:	f7f4 f944 	bl	80004d0 <__aeabi_dmul>
 800c248:	2200      	movs	r2, #0
 800c24a:	4682      	mov	sl, r0
 800c24c:	468b      	mov	fp, r1
 800c24e:	4b57      	ldr	r3, [pc, #348]	; (800c3ac <__ieee754_pow+0x3ac>)
 800c250:	4620      	mov	r0, r4
 800c252:	4629      	mov	r1, r5
 800c254:	f7f4 f93c 	bl	80004d0 <__aeabi_dmul>
 800c258:	4602      	mov	r2, r0
 800c25a:	460b      	mov	r3, r1
 800c25c:	a14c      	add	r1, pc, #304	; (adr r1, 800c390 <__ieee754_pow+0x390>)
 800c25e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c262:	f7f3 ff81 	bl	8000168 <__aeabi_dsub>
 800c266:	4622      	mov	r2, r4
 800c268:	462b      	mov	r3, r5
 800c26a:	f7f4 f931 	bl	80004d0 <__aeabi_dmul>
 800c26e:	4602      	mov	r2, r0
 800c270:	460b      	mov	r3, r1
 800c272:	2000      	movs	r0, #0
 800c274:	494e      	ldr	r1, [pc, #312]	; (800c3b0 <__ieee754_pow+0x3b0>)
 800c276:	f7f3 ff77 	bl	8000168 <__aeabi_dsub>
 800c27a:	4622      	mov	r2, r4
 800c27c:	462b      	mov	r3, r5
 800c27e:	4680      	mov	r8, r0
 800c280:	4689      	mov	r9, r1
 800c282:	4620      	mov	r0, r4
 800c284:	4629      	mov	r1, r5
 800c286:	f7f4 f923 	bl	80004d0 <__aeabi_dmul>
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4640      	mov	r0, r8
 800c290:	4649      	mov	r1, r9
 800c292:	f7f4 f91d 	bl	80004d0 <__aeabi_dmul>
 800c296:	a340      	add	r3, pc, #256	; (adr r3, 800c398 <__ieee754_pow+0x398>)
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	f7f4 f918 	bl	80004d0 <__aeabi_dmul>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	4650      	mov	r0, sl
 800c2a6:	4659      	mov	r1, fp
 800c2a8:	f7f3 ff5e 	bl	8000168 <__aeabi_dsub>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	460d      	mov	r5, r1
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	4639      	mov	r1, r7
 800c2b8:	f7f3 ff58 	bl	800016c <__adddf3>
 800c2bc:	2000      	movs	r0, #0
 800c2be:	468b      	mov	fp, r1
 800c2c0:	4682      	mov	sl, r0
 800c2c2:	4632      	mov	r2, r6
 800c2c4:	463b      	mov	r3, r7
 800c2c6:	f7f3 ff4f 	bl	8000168 <__aeabi_dsub>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	f7f3 ff49 	bl	8000168 <__aeabi_dsub>
 800c2d6:	9b00      	ldr	r3, [sp, #0]
 800c2d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	f04f 0300 	mov.w	r3, #0
 800c2e2:	bf0c      	ite	eq
 800c2e4:	4c33      	ldreq	r4, [pc, #204]	; (800c3b4 <__ieee754_pow+0x3b4>)
 800c2e6:	4c30      	ldrne	r4, [pc, #192]	; (800c3a8 <__ieee754_pow+0x3a8>)
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	e88d 0018 	stmia.w	sp, {r3, r4}
 800c2ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c2f2:	2400      	movs	r4, #0
 800c2f4:	460f      	mov	r7, r1
 800c2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2fa:	4622      	mov	r2, r4
 800c2fc:	462b      	mov	r3, r5
 800c2fe:	f7f3 ff33 	bl	8000168 <__aeabi_dsub>
 800c302:	4652      	mov	r2, sl
 800c304:	465b      	mov	r3, fp
 800c306:	f7f4 f8e3 	bl	80004d0 <__aeabi_dmul>
 800c30a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c30e:	4680      	mov	r8, r0
 800c310:	4689      	mov	r9, r1
 800c312:	4630      	mov	r0, r6
 800c314:	4639      	mov	r1, r7
 800c316:	f7f4 f8db 	bl	80004d0 <__aeabi_dmul>
 800c31a:	4602      	mov	r2, r0
 800c31c:	460b      	mov	r3, r1
 800c31e:	4640      	mov	r0, r8
 800c320:	4649      	mov	r1, r9
 800c322:	f7f3 ff23 	bl	800016c <__adddf3>
 800c326:	4622      	mov	r2, r4
 800c328:	462b      	mov	r3, r5
 800c32a:	4680      	mov	r8, r0
 800c32c:	4689      	mov	r9, r1
 800c32e:	4650      	mov	r0, sl
 800c330:	4659      	mov	r1, fp
 800c332:	f7f4 f8cd 	bl	80004d0 <__aeabi_dmul>
 800c336:	4604      	mov	r4, r0
 800c338:	460d      	mov	r5, r1
 800c33a:	460b      	mov	r3, r1
 800c33c:	4602      	mov	r2, r0
 800c33e:	4649      	mov	r1, r9
 800c340:	4640      	mov	r0, r8
 800c342:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c346:	f7f3 ff11 	bl	800016c <__adddf3>
 800c34a:	4b1b      	ldr	r3, [pc, #108]	; (800c3b8 <__ieee754_pow+0x3b8>)
 800c34c:	4682      	mov	sl, r0
 800c34e:	4299      	cmp	r1, r3
 800c350:	460f      	mov	r7, r1
 800c352:	460e      	mov	r6, r1
 800c354:	f340 82da 	ble.w	800c90c <__ieee754_pow+0x90c>
 800c358:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c35c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c360:	4303      	orrs	r3, r0
 800c362:	f000 81d5 	beq.w	800c710 <__ieee754_pow+0x710>
 800c366:	a30e      	add	r3, pc, #56	; (adr r3, 800c3a0 <__ieee754_pow+0x3a0>)
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c370:	f7f4 f8ae 	bl	80004d0 <__aeabi_dmul>
 800c374:	a30a      	add	r3, pc, #40	; (adr r3, 800c3a0 <__ieee754_pow+0x3a0>)
 800c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37a:	e6d2      	b.n	800c122 <__ieee754_pow+0x122>
 800c37c:	f3af 8000 	nop.w
 800c380:	60000000 	.word	0x60000000
 800c384:	3ff71547 	.word	0x3ff71547
 800c388:	f85ddf44 	.word	0xf85ddf44
 800c38c:	3e54ae0b 	.word	0x3e54ae0b
 800c390:	55555555 	.word	0x55555555
 800c394:	3fd55555 	.word	0x3fd55555
 800c398:	652b82fe 	.word	0x652b82fe
 800c39c:	3ff71547 	.word	0x3ff71547
 800c3a0:	8800759c 	.word	0x8800759c
 800c3a4:	7e37e43c 	.word	0x7e37e43c
 800c3a8:	3ff00000 	.word	0x3ff00000
 800c3ac:	3fd00000 	.word	0x3fd00000
 800c3b0:	3fe00000 	.word	0x3fe00000
 800c3b4:	bff00000 	.word	0xbff00000
 800c3b8:	408fffff 	.word	0x408fffff
 800c3bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c3c0:	f04f 0200 	mov.w	r2, #0
 800c3c4:	da05      	bge.n	800c3d2 <__ieee754_pow+0x3d2>
 800c3c6:	4bca      	ldr	r3, [pc, #808]	; (800c6f0 <__ieee754_pow+0x6f0>)
 800c3c8:	f7f4 f882 	bl	80004d0 <__aeabi_dmul>
 800c3cc:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c3d0:	460c      	mov	r4, r1
 800c3d2:	1523      	asrs	r3, r4, #20
 800c3d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c3d8:	4413      	add	r3, r2
 800c3da:	9307      	str	r3, [sp, #28]
 800c3dc:	4bc5      	ldr	r3, [pc, #788]	; (800c6f4 <__ieee754_pow+0x6f4>)
 800c3de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c3e2:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c3e6:	429c      	cmp	r4, r3
 800c3e8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c3ec:	dd08      	ble.n	800c400 <__ieee754_pow+0x400>
 800c3ee:	4bc2      	ldr	r3, [pc, #776]	; (800c6f8 <__ieee754_pow+0x6f8>)
 800c3f0:	429c      	cmp	r4, r3
 800c3f2:	f340 8154 	ble.w	800c69e <__ieee754_pow+0x69e>
 800c3f6:	9b07      	ldr	r3, [sp, #28]
 800c3f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	9307      	str	r3, [sp, #28]
 800c400:	2600      	movs	r6, #0
 800c402:	4629      	mov	r1, r5
 800c404:	00f3      	lsls	r3, r6, #3
 800c406:	930d      	str	r3, [sp, #52]	; 0x34
 800c408:	4bbc      	ldr	r3, [pc, #752]	; (800c6fc <__ieee754_pow+0x6fc>)
 800c40a:	00f2      	lsls	r2, r6, #3
 800c40c:	4413      	add	r3, r2
 800c40e:	cb18      	ldmia	r3, {r3, r4}
 800c410:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800c414:	461a      	mov	r2, r3
 800c416:	4623      	mov	r3, r4
 800c418:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c41c:	f7f3 fea4 	bl	8000168 <__aeabi_dsub>
 800c420:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c424:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c428:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c42c:	f7f3 fe9e 	bl	800016c <__adddf3>
 800c430:	4602      	mov	r2, r0
 800c432:	460b      	mov	r3, r1
 800c434:	2000      	movs	r0, #0
 800c436:	49b2      	ldr	r1, [pc, #712]	; (800c700 <__ieee754_pow+0x700>)
 800c438:	f7f4 f974 	bl	8000724 <__aeabi_ddiv>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c444:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c448:	f7f4 f842 	bl	80004d0 <__aeabi_dmul>
 800c44c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c450:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c454:	f04f 0a00 	mov.w	sl, #0
 800c458:	2200      	movs	r2, #0
 800c45a:	106d      	asrs	r5, r5, #1
 800c45c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c460:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c464:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c468:	4659      	mov	r1, fp
 800c46a:	4650      	mov	r0, sl
 800c46c:	4614      	mov	r4, r2
 800c46e:	461d      	mov	r5, r3
 800c470:	f7f4 f82e 	bl	80004d0 <__aeabi_dmul>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c47c:	f7f3 fe74 	bl	8000168 <__aeabi_dsub>
 800c480:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c484:	4606      	mov	r6, r0
 800c486:	460f      	mov	r7, r1
 800c488:	4620      	mov	r0, r4
 800c48a:	4629      	mov	r1, r5
 800c48c:	f7f3 fe6c 	bl	8000168 <__aeabi_dsub>
 800c490:	4602      	mov	r2, r0
 800c492:	460b      	mov	r3, r1
 800c494:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c498:	f7f3 fe66 	bl	8000168 <__aeabi_dsub>
 800c49c:	465b      	mov	r3, fp
 800c49e:	4652      	mov	r2, sl
 800c4a0:	f7f4 f816 	bl	80004d0 <__aeabi_dmul>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	f7f3 fe5c 	bl	8000168 <__aeabi_dsub>
 800c4b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c4b4:	f7f4 f80c 	bl	80004d0 <__aeabi_dmul>
 800c4b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	f7f4 f804 	bl	80004d0 <__aeabi_dmul>
 800c4c8:	a377      	add	r3, pc, #476	; (adr r3, 800c6a8 <__ieee754_pow+0x6a8>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	460d      	mov	r5, r1
 800c4d2:	f7f3 fffd 	bl	80004d0 <__aeabi_dmul>
 800c4d6:	a376      	add	r3, pc, #472	; (adr r3, 800c6b0 <__ieee754_pow+0x6b0>)
 800c4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4dc:	f7f3 fe46 	bl	800016c <__adddf3>
 800c4e0:	4622      	mov	r2, r4
 800c4e2:	462b      	mov	r3, r5
 800c4e4:	f7f3 fff4 	bl	80004d0 <__aeabi_dmul>
 800c4e8:	a373      	add	r3, pc, #460	; (adr r3, 800c6b8 <__ieee754_pow+0x6b8>)
 800c4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ee:	f7f3 fe3d 	bl	800016c <__adddf3>
 800c4f2:	4622      	mov	r2, r4
 800c4f4:	462b      	mov	r3, r5
 800c4f6:	f7f3 ffeb 	bl	80004d0 <__aeabi_dmul>
 800c4fa:	a371      	add	r3, pc, #452	; (adr r3, 800c6c0 <__ieee754_pow+0x6c0>)
 800c4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c500:	f7f3 fe34 	bl	800016c <__adddf3>
 800c504:	4622      	mov	r2, r4
 800c506:	462b      	mov	r3, r5
 800c508:	f7f3 ffe2 	bl	80004d0 <__aeabi_dmul>
 800c50c:	a36e      	add	r3, pc, #440	; (adr r3, 800c6c8 <__ieee754_pow+0x6c8>)
 800c50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c512:	f7f3 fe2b 	bl	800016c <__adddf3>
 800c516:	4622      	mov	r2, r4
 800c518:	462b      	mov	r3, r5
 800c51a:	f7f3 ffd9 	bl	80004d0 <__aeabi_dmul>
 800c51e:	a36c      	add	r3, pc, #432	; (adr r3, 800c6d0 <__ieee754_pow+0x6d0>)
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	f7f3 fe22 	bl	800016c <__adddf3>
 800c528:	4622      	mov	r2, r4
 800c52a:	4606      	mov	r6, r0
 800c52c:	460f      	mov	r7, r1
 800c52e:	462b      	mov	r3, r5
 800c530:	4620      	mov	r0, r4
 800c532:	4629      	mov	r1, r5
 800c534:	f7f3 ffcc 	bl	80004d0 <__aeabi_dmul>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	4630      	mov	r0, r6
 800c53e:	4639      	mov	r1, r7
 800c540:	f7f3 ffc6 	bl	80004d0 <__aeabi_dmul>
 800c544:	4604      	mov	r4, r0
 800c546:	460d      	mov	r5, r1
 800c548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c54c:	465b      	mov	r3, fp
 800c54e:	4652      	mov	r2, sl
 800c550:	f7f3 fe0c 	bl	800016c <__adddf3>
 800c554:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c558:	f7f3 ffba 	bl	80004d0 <__aeabi_dmul>
 800c55c:	4622      	mov	r2, r4
 800c55e:	462b      	mov	r3, r5
 800c560:	f7f3 fe04 	bl	800016c <__adddf3>
 800c564:	465b      	mov	r3, fp
 800c566:	4606      	mov	r6, r0
 800c568:	460f      	mov	r7, r1
 800c56a:	4652      	mov	r2, sl
 800c56c:	4659      	mov	r1, fp
 800c56e:	4650      	mov	r0, sl
 800c570:	f7f3 ffae 	bl	80004d0 <__aeabi_dmul>
 800c574:	2200      	movs	r2, #0
 800c576:	4b63      	ldr	r3, [pc, #396]	; (800c704 <__ieee754_pow+0x704>)
 800c578:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c57c:	f7f3 fdf6 	bl	800016c <__adddf3>
 800c580:	4632      	mov	r2, r6
 800c582:	463b      	mov	r3, r7
 800c584:	f7f3 fdf2 	bl	800016c <__adddf3>
 800c588:	4650      	mov	r0, sl
 800c58a:	460d      	mov	r5, r1
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	4650      	mov	r0, sl
 800c592:	4659      	mov	r1, fp
 800c594:	f7f3 ff9c 	bl	80004d0 <__aeabi_dmul>
 800c598:	2200      	movs	r2, #0
 800c59a:	4680      	mov	r8, r0
 800c59c:	4689      	mov	r9, r1
 800c59e:	4b59      	ldr	r3, [pc, #356]	; (800c704 <__ieee754_pow+0x704>)
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	4650      	mov	r0, sl
 800c5a4:	f7f3 fde0 	bl	8000168 <__aeabi_dsub>
 800c5a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c5ac:	f7f3 fddc 	bl	8000168 <__aeabi_dsub>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	4639      	mov	r1, r7
 800c5b8:	f7f3 fdd6 	bl	8000168 <__aeabi_dsub>
 800c5bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5c0:	f7f3 ff86 	bl	80004d0 <__aeabi_dmul>
 800c5c4:	462b      	mov	r3, r5
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	460f      	mov	r7, r1
 800c5ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5ce:	4652      	mov	r2, sl
 800c5d0:	f7f3 ff7e 	bl	80004d0 <__aeabi_dmul>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	4630      	mov	r0, r6
 800c5da:	4639      	mov	r1, r7
 800c5dc:	f7f3 fdc6 	bl	800016c <__adddf3>
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	460f      	mov	r7, r1
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	4649      	mov	r1, r9
 800c5ec:	f7f3 fdbe 	bl	800016c <__adddf3>
 800c5f0:	a339      	add	r3, pc, #228	; (adr r3, 800c6d8 <__ieee754_pow+0x6d8>)
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	4650      	mov	r0, sl
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	f7f3 ff69 	bl	80004d0 <__aeabi_dmul>
 800c5fe:	4642      	mov	r2, r8
 800c600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c604:	464b      	mov	r3, r9
 800c606:	4629      	mov	r1, r5
 800c608:	4650      	mov	r0, sl
 800c60a:	f7f3 fdad 	bl	8000168 <__aeabi_dsub>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4630      	mov	r0, r6
 800c614:	4639      	mov	r1, r7
 800c616:	f7f3 fda7 	bl	8000168 <__aeabi_dsub>
 800c61a:	a331      	add	r3, pc, #196	; (adr r3, 800c6e0 <__ieee754_pow+0x6e0>)
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	f7f3 ff56 	bl	80004d0 <__aeabi_dmul>
 800c624:	a330      	add	r3, pc, #192	; (adr r3, 800c6e8 <__ieee754_pow+0x6e8>)
 800c626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62a:	4606      	mov	r6, r0
 800c62c:	460f      	mov	r7, r1
 800c62e:	4650      	mov	r0, sl
 800c630:	4629      	mov	r1, r5
 800c632:	f7f3 ff4d 	bl	80004d0 <__aeabi_dmul>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4630      	mov	r0, r6
 800c63c:	4639      	mov	r1, r7
 800c63e:	f7f3 fd95 	bl	800016c <__adddf3>
 800c642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c644:	4b30      	ldr	r3, [pc, #192]	; (800c708 <__ieee754_pow+0x708>)
 800c646:	4413      	add	r3, r2
 800c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64c:	f7f3 fd8e 	bl	800016c <__adddf3>
 800c650:	4604      	mov	r4, r0
 800c652:	9807      	ldr	r0, [sp, #28]
 800c654:	460d      	mov	r5, r1
 800c656:	f7f3 fed5 	bl	8000404 <__aeabi_i2d>
 800c65a:	4606      	mov	r6, r0
 800c65c:	460f      	mov	r7, r1
 800c65e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c660:	4b2a      	ldr	r3, [pc, #168]	; (800c70c <__ieee754_pow+0x70c>)
 800c662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c666:	4413      	add	r3, r2
 800c668:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c66c:	4622      	mov	r2, r4
 800c66e:	462b      	mov	r3, r5
 800c670:	f7f3 fd7c 	bl	800016c <__adddf3>
 800c674:	4642      	mov	r2, r8
 800c676:	464b      	mov	r3, r9
 800c678:	f7f3 fd78 	bl	800016c <__adddf3>
 800c67c:	4632      	mov	r2, r6
 800c67e:	463b      	mov	r3, r7
 800c680:	f7f3 fd74 	bl	800016c <__adddf3>
 800c684:	4632      	mov	r2, r6
 800c686:	463b      	mov	r3, r7
 800c688:	4650      	mov	r0, sl
 800c68a:	468b      	mov	fp, r1
 800c68c:	f7f3 fd6c 	bl	8000168 <__aeabi_dsub>
 800c690:	4642      	mov	r2, r8
 800c692:	464b      	mov	r3, r9
 800c694:	f7f3 fd68 	bl	8000168 <__aeabi_dsub>
 800c698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c69c:	e613      	b.n	800c2c6 <__ieee754_pow+0x2c6>
 800c69e:	2601      	movs	r6, #1
 800c6a0:	e6af      	b.n	800c402 <__ieee754_pow+0x402>
 800c6a2:	bf00      	nop
 800c6a4:	f3af 8000 	nop.w
 800c6a8:	4a454eef 	.word	0x4a454eef
 800c6ac:	3fca7e28 	.word	0x3fca7e28
 800c6b0:	93c9db65 	.word	0x93c9db65
 800c6b4:	3fcd864a 	.word	0x3fcd864a
 800c6b8:	a91d4101 	.word	0xa91d4101
 800c6bc:	3fd17460 	.word	0x3fd17460
 800c6c0:	518f264d 	.word	0x518f264d
 800c6c4:	3fd55555 	.word	0x3fd55555
 800c6c8:	db6fabff 	.word	0xdb6fabff
 800c6cc:	3fdb6db6 	.word	0x3fdb6db6
 800c6d0:	33333303 	.word	0x33333303
 800c6d4:	3fe33333 	.word	0x3fe33333
 800c6d8:	e0000000 	.word	0xe0000000
 800c6dc:	3feec709 	.word	0x3feec709
 800c6e0:	dc3a03fd 	.word	0xdc3a03fd
 800c6e4:	3feec709 	.word	0x3feec709
 800c6e8:	145b01f5 	.word	0x145b01f5
 800c6ec:	be3e2fe0 	.word	0xbe3e2fe0
 800c6f0:	43400000 	.word	0x43400000
 800c6f4:	0003988e 	.word	0x0003988e
 800c6f8:	000bb679 	.word	0x000bb679
 800c6fc:	08017e50 	.word	0x08017e50
 800c700:	3ff00000 	.word	0x3ff00000
 800c704:	40080000 	.word	0x40080000
 800c708:	08017e70 	.word	0x08017e70
 800c70c:	08017e60 	.word	0x08017e60
 800c710:	a39b      	add	r3, pc, #620	; (adr r3, 800c980 <__ieee754_pow+0x980>)
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	4640      	mov	r0, r8
 800c718:	4649      	mov	r1, r9
 800c71a:	f7f3 fd27 	bl	800016c <__adddf3>
 800c71e:	4622      	mov	r2, r4
 800c720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c724:	462b      	mov	r3, r5
 800c726:	4650      	mov	r0, sl
 800c728:	4639      	mov	r1, r7
 800c72a:	f7f3 fd1d 	bl	8000168 <__aeabi_dsub>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c736:	f7f4 f95b 	bl	80009f0 <__aeabi_dcmpgt>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	f47f ae13 	bne.w	800c366 <__ieee754_pow+0x366>
 800c740:	4aa3      	ldr	r2, [pc, #652]	; (800c9d0 <__ieee754_pow+0x9d0>)
 800c742:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c746:	4293      	cmp	r3, r2
 800c748:	f340 8104 	ble.w	800c954 <__ieee754_pow+0x954>
 800c74c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c750:	2000      	movs	r0, #0
 800c752:	151b      	asrs	r3, r3, #20
 800c754:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c758:	fa4a f303 	asr.w	r3, sl, r3
 800c75c:	4433      	add	r3, r6
 800c75e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c762:	4f9c      	ldr	r7, [pc, #624]	; (800c9d4 <__ieee754_pow+0x9d4>)
 800c764:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c768:	4117      	asrs	r7, r2
 800c76a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c76e:	ea23 0107 	bic.w	r1, r3, r7
 800c772:	f1c2 0214 	rsb	r2, r2, #20
 800c776:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c77a:	fa4a fa02 	asr.w	sl, sl, r2
 800c77e:	2e00      	cmp	r6, #0
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	4620      	mov	r0, r4
 800c786:	4629      	mov	r1, r5
 800c788:	bfb8      	it	lt
 800c78a:	f1ca 0a00 	rsblt	sl, sl, #0
 800c78e:	f7f3 fceb 	bl	8000168 <__aeabi_dsub>
 800c792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c79a:	4642      	mov	r2, r8
 800c79c:	464b      	mov	r3, r9
 800c79e:	f7f3 fce5 	bl	800016c <__adddf3>
 800c7a2:	a379      	add	r3, pc, #484	; (adr r3, 800c988 <__ieee754_pow+0x988>)
 800c7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	460d      	mov	r5, r1
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	f7f3 fe8f 	bl	80004d0 <__aeabi_dmul>
 800c7b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7b6:	4606      	mov	r6, r0
 800c7b8:	460f      	mov	r7, r1
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	4629      	mov	r1, r5
 800c7be:	f7f3 fcd3 	bl	8000168 <__aeabi_dsub>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	f7f3 fccd 	bl	8000168 <__aeabi_dsub>
 800c7ce:	a370      	add	r3, pc, #448	; (adr r3, 800c990 <__ieee754_pow+0x990>)
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	f7f3 fe7c 	bl	80004d0 <__aeabi_dmul>
 800c7d8:	a36f      	add	r3, pc, #444	; (adr r3, 800c998 <__ieee754_pow+0x998>)
 800c7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7de:	4680      	mov	r8, r0
 800c7e0:	4689      	mov	r9, r1
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	f7f3 fe73 	bl	80004d0 <__aeabi_dmul>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4640      	mov	r0, r8
 800c7f0:	4649      	mov	r1, r9
 800c7f2:	f7f3 fcbb 	bl	800016c <__adddf3>
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	460d      	mov	r5, r1
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	4630      	mov	r0, r6
 800c800:	4639      	mov	r1, r7
 800c802:	f7f3 fcb3 	bl	800016c <__adddf3>
 800c806:	4632      	mov	r2, r6
 800c808:	463b      	mov	r3, r7
 800c80a:	4680      	mov	r8, r0
 800c80c:	4689      	mov	r9, r1
 800c80e:	f7f3 fcab 	bl	8000168 <__aeabi_dsub>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4620      	mov	r0, r4
 800c818:	4629      	mov	r1, r5
 800c81a:	f7f3 fca5 	bl	8000168 <__aeabi_dsub>
 800c81e:	4642      	mov	r2, r8
 800c820:	4606      	mov	r6, r0
 800c822:	460f      	mov	r7, r1
 800c824:	464b      	mov	r3, r9
 800c826:	4640      	mov	r0, r8
 800c828:	4649      	mov	r1, r9
 800c82a:	f7f3 fe51 	bl	80004d0 <__aeabi_dmul>
 800c82e:	a35c      	add	r3, pc, #368	; (adr r3, 800c9a0 <__ieee754_pow+0x9a0>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	4604      	mov	r4, r0
 800c836:	460d      	mov	r5, r1
 800c838:	f7f3 fe4a 	bl	80004d0 <__aeabi_dmul>
 800c83c:	a35a      	add	r3, pc, #360	; (adr r3, 800c9a8 <__ieee754_pow+0x9a8>)
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	f7f3 fc91 	bl	8000168 <__aeabi_dsub>
 800c846:	4622      	mov	r2, r4
 800c848:	462b      	mov	r3, r5
 800c84a:	f7f3 fe41 	bl	80004d0 <__aeabi_dmul>
 800c84e:	a358      	add	r3, pc, #352	; (adr r3, 800c9b0 <__ieee754_pow+0x9b0>)
 800c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c854:	f7f3 fc8a 	bl	800016c <__adddf3>
 800c858:	4622      	mov	r2, r4
 800c85a:	462b      	mov	r3, r5
 800c85c:	f7f3 fe38 	bl	80004d0 <__aeabi_dmul>
 800c860:	a355      	add	r3, pc, #340	; (adr r3, 800c9b8 <__ieee754_pow+0x9b8>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	f7f3 fc7f 	bl	8000168 <__aeabi_dsub>
 800c86a:	4622      	mov	r2, r4
 800c86c:	462b      	mov	r3, r5
 800c86e:	f7f3 fe2f 	bl	80004d0 <__aeabi_dmul>
 800c872:	a353      	add	r3, pc, #332	; (adr r3, 800c9c0 <__ieee754_pow+0x9c0>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	f7f3 fc78 	bl	800016c <__adddf3>
 800c87c:	4622      	mov	r2, r4
 800c87e:	462b      	mov	r3, r5
 800c880:	f7f3 fe26 	bl	80004d0 <__aeabi_dmul>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	4640      	mov	r0, r8
 800c88a:	4649      	mov	r1, r9
 800c88c:	f7f3 fc6c 	bl	8000168 <__aeabi_dsub>
 800c890:	4604      	mov	r4, r0
 800c892:	460d      	mov	r5, r1
 800c894:	4602      	mov	r2, r0
 800c896:	460b      	mov	r3, r1
 800c898:	4640      	mov	r0, r8
 800c89a:	4649      	mov	r1, r9
 800c89c:	f7f3 fe18 	bl	80004d0 <__aeabi_dmul>
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	f7f3 fc5b 	bl	8000168 <__aeabi_dsub>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8ba:	f7f3 ff33 	bl	8000724 <__aeabi_ddiv>
 800c8be:	4632      	mov	r2, r6
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	460d      	mov	r5, r1
 800c8c4:	463b      	mov	r3, r7
 800c8c6:	4640      	mov	r0, r8
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	f7f3 fe01 	bl	80004d0 <__aeabi_dmul>
 800c8ce:	4632      	mov	r2, r6
 800c8d0:	463b      	mov	r3, r7
 800c8d2:	f7f3 fc4b 	bl	800016c <__adddf3>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4620      	mov	r0, r4
 800c8dc:	4629      	mov	r1, r5
 800c8de:	f7f3 fc43 	bl	8000168 <__aeabi_dsub>
 800c8e2:	4642      	mov	r2, r8
 800c8e4:	464b      	mov	r3, r9
 800c8e6:	f7f3 fc3f 	bl	8000168 <__aeabi_dsub>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	4939      	ldr	r1, [pc, #228]	; (800c9d8 <__ieee754_pow+0x9d8>)
 800c8f2:	f7f3 fc39 	bl	8000168 <__aeabi_dsub>
 800c8f6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c8fa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c8fe:	da2c      	bge.n	800c95a <__ieee754_pow+0x95a>
 800c900:	4652      	mov	r2, sl
 800c902:	f000 ff29 	bl	800d758 <scalbn>
 800c906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c90a:	e40a      	b.n	800c122 <__ieee754_pow+0x122>
 800c90c:	4b33      	ldr	r3, [pc, #204]	; (800c9dc <__ieee754_pow+0x9dc>)
 800c90e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c912:	429f      	cmp	r7, r3
 800c914:	f77f af14 	ble.w	800c740 <__ieee754_pow+0x740>
 800c918:	4b31      	ldr	r3, [pc, #196]	; (800c9e0 <__ieee754_pow+0x9e0>)
 800c91a:	440b      	add	r3, r1
 800c91c:	4303      	orrs	r3, r0
 800c91e:	d00b      	beq.n	800c938 <__ieee754_pow+0x938>
 800c920:	a329      	add	r3, pc, #164	; (adr r3, 800c9c8 <__ieee754_pow+0x9c8>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c92a:	f7f3 fdd1 	bl	80004d0 <__aeabi_dmul>
 800c92e:	a326      	add	r3, pc, #152	; (adr r3, 800c9c8 <__ieee754_pow+0x9c8>)
 800c930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c934:	f7ff bbf5 	b.w	800c122 <__ieee754_pow+0x122>
 800c938:	4622      	mov	r2, r4
 800c93a:	462b      	mov	r3, r5
 800c93c:	f7f3 fc14 	bl	8000168 <__aeabi_dsub>
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	4640      	mov	r0, r8
 800c946:	4649      	mov	r1, r9
 800c948:	f7f4 f83e 	bl	80009c8 <__aeabi_dcmple>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	f43f aef7 	beq.w	800c740 <__ieee754_pow+0x740>
 800c952:	e7e5      	b.n	800c920 <__ieee754_pow+0x920>
 800c954:	f04f 0a00 	mov.w	sl, #0
 800c958:	e71d      	b.n	800c796 <__ieee754_pow+0x796>
 800c95a:	4621      	mov	r1, r4
 800c95c:	e7d3      	b.n	800c906 <__ieee754_pow+0x906>
 800c95e:	2000      	movs	r0, #0
 800c960:	491d      	ldr	r1, [pc, #116]	; (800c9d8 <__ieee754_pow+0x9d8>)
 800c962:	f7ff bbac 	b.w	800c0be <__ieee754_pow+0xbe>
 800c966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c96a:	f7ff bba8 	b.w	800c0be <__ieee754_pow+0xbe>
 800c96e:	4638      	mov	r0, r7
 800c970:	4641      	mov	r1, r8
 800c972:	f7ff bba4 	b.w	800c0be <__ieee754_pow+0xbe>
 800c976:	9200      	str	r2, [sp, #0]
 800c978:	f7ff bbb4 	b.w	800c0e4 <__ieee754_pow+0xe4>
 800c97c:	f3af 8000 	nop.w
 800c980:	652b82fe 	.word	0x652b82fe
 800c984:	3c971547 	.word	0x3c971547
 800c988:	00000000 	.word	0x00000000
 800c98c:	3fe62e43 	.word	0x3fe62e43
 800c990:	fefa39ef 	.word	0xfefa39ef
 800c994:	3fe62e42 	.word	0x3fe62e42
 800c998:	0ca86c39 	.word	0x0ca86c39
 800c99c:	be205c61 	.word	0xbe205c61
 800c9a0:	72bea4d0 	.word	0x72bea4d0
 800c9a4:	3e663769 	.word	0x3e663769
 800c9a8:	c5d26bf1 	.word	0xc5d26bf1
 800c9ac:	3ebbbd41 	.word	0x3ebbbd41
 800c9b0:	af25de2c 	.word	0xaf25de2c
 800c9b4:	3f11566a 	.word	0x3f11566a
 800c9b8:	16bebd93 	.word	0x16bebd93
 800c9bc:	3f66c16c 	.word	0x3f66c16c
 800c9c0:	5555553e 	.word	0x5555553e
 800c9c4:	3fc55555 	.word	0x3fc55555
 800c9c8:	c2f8f359 	.word	0xc2f8f359
 800c9cc:	01a56e1f 	.word	0x01a56e1f
 800c9d0:	3fe00000 	.word	0x3fe00000
 800c9d4:	000fffff 	.word	0x000fffff
 800c9d8:	3ff00000 	.word	0x3ff00000
 800c9dc:	4090cbff 	.word	0x4090cbff
 800c9e0:	3f6f3400 	.word	0x3f6f3400

0800c9e4 <__ieee754_sqrt>:
 800c9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e8:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800cb38 <__ieee754_sqrt+0x154>
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	ea3e 0e01 	bics.w	lr, lr, r1
 800c9f2:	460d      	mov	r5, r1
 800c9f4:	4607      	mov	r7, r0
 800c9f6:	460a      	mov	r2, r1
 800c9f8:	460c      	mov	r4, r1
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	d10f      	bne.n	800ca1e <__ieee754_sqrt+0x3a>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	f7f3 fd65 	bl	80004d0 <__aeabi_dmul>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	f7f3 fbad 	bl	800016c <__adddf3>
 800ca12:	4606      	mov	r6, r0
 800ca14:	460d      	mov	r5, r1
 800ca16:	4630      	mov	r0, r6
 800ca18:	4629      	mov	r1, r5
 800ca1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca1e:	2900      	cmp	r1, #0
 800ca20:	dc0e      	bgt.n	800ca40 <__ieee754_sqrt+0x5c>
 800ca22:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800ca26:	ea5e 0707 	orrs.w	r7, lr, r7
 800ca2a:	d0f4      	beq.n	800ca16 <__ieee754_sqrt+0x32>
 800ca2c:	b141      	cbz	r1, 800ca40 <__ieee754_sqrt+0x5c>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	460b      	mov	r3, r1
 800ca32:	f7f3 fb99 	bl	8000168 <__aeabi_dsub>
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	f7f3 fe73 	bl	8000724 <__aeabi_ddiv>
 800ca3e:	e7e8      	b.n	800ca12 <__ieee754_sqrt+0x2e>
 800ca40:	1512      	asrs	r2, r2, #20
 800ca42:	d10c      	bne.n	800ca5e <__ieee754_sqrt+0x7a>
 800ca44:	2c00      	cmp	r4, #0
 800ca46:	d06e      	beq.n	800cb26 <__ieee754_sqrt+0x142>
 800ca48:	2100      	movs	r1, #0
 800ca4a:	02e6      	lsls	r6, r4, #11
 800ca4c:	d56f      	bpl.n	800cb2e <__ieee754_sqrt+0x14a>
 800ca4e:	1e48      	subs	r0, r1, #1
 800ca50:	1a12      	subs	r2, r2, r0
 800ca52:	f1c1 0020 	rsb	r0, r1, #32
 800ca56:	fa23 f000 	lsr.w	r0, r3, r0
 800ca5a:	4304      	orrs	r4, r0
 800ca5c:	408b      	lsls	r3, r1
 800ca5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ca62:	07d5      	lsls	r5, r2, #31
 800ca64:	f04f 0500 	mov.w	r5, #0
 800ca68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ca6c:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800ca70:	bf42      	ittt	mi
 800ca72:	0064      	lslmi	r4, r4, #1
 800ca74:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 800ca78:	005b      	lslmi	r3, r3, #1
 800ca7a:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 800ca7e:	1050      	asrs	r0, r2, #1
 800ca80:	4421      	add	r1, r4
 800ca82:	2216      	movs	r2, #22
 800ca84:	462c      	mov	r4, r5
 800ca86:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	19a7      	adds	r7, r4, r6
 800ca8e:	428f      	cmp	r7, r1
 800ca90:	bfde      	ittt	le
 800ca92:	1bc9      	suble	r1, r1, r7
 800ca94:	19bc      	addle	r4, r7, r6
 800ca96:	19ad      	addle	r5, r5, r6
 800ca98:	0049      	lsls	r1, r1, #1
 800ca9a:	3a01      	subs	r2, #1
 800ca9c:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800caa0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800caa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800caa8:	d1f0      	bne.n	800ca8c <__ieee754_sqrt+0xa8>
 800caaa:	f04f 0e20 	mov.w	lr, #32
 800caae:	4694      	mov	ip, r2
 800cab0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cab4:	42a1      	cmp	r1, r4
 800cab6:	eb06 070c 	add.w	r7, r6, ip
 800caba:	dc02      	bgt.n	800cac2 <__ieee754_sqrt+0xde>
 800cabc:	d112      	bne.n	800cae4 <__ieee754_sqrt+0x100>
 800cabe:	429f      	cmp	r7, r3
 800cac0:	d810      	bhi.n	800cae4 <__ieee754_sqrt+0x100>
 800cac2:	2f00      	cmp	r7, #0
 800cac4:	eb07 0c06 	add.w	ip, r7, r6
 800cac8:	da34      	bge.n	800cb34 <__ieee754_sqrt+0x150>
 800caca:	f1bc 0f00 	cmp.w	ip, #0
 800cace:	db31      	blt.n	800cb34 <__ieee754_sqrt+0x150>
 800cad0:	f104 0801 	add.w	r8, r4, #1
 800cad4:	1b09      	subs	r1, r1, r4
 800cad6:	4644      	mov	r4, r8
 800cad8:	429f      	cmp	r7, r3
 800cada:	bf88      	it	hi
 800cadc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800cae0:	1bdb      	subs	r3, r3, r7
 800cae2:	4432      	add	r2, r6
 800cae4:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 800cae8:	f1be 0e01 	subs.w	lr, lr, #1
 800caec:	4439      	add	r1, r7
 800caee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800caf2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800caf6:	d1dd      	bne.n	800cab4 <__ieee754_sqrt+0xd0>
 800caf8:	430b      	orrs	r3, r1
 800cafa:	d006      	beq.n	800cb0a <__ieee754_sqrt+0x126>
 800cafc:	1c54      	adds	r4, r2, #1
 800cafe:	bf0b      	itete	eq
 800cb00:	4672      	moveq	r2, lr
 800cb02:	3201      	addne	r2, #1
 800cb04:	3501      	addeq	r5, #1
 800cb06:	f022 0201 	bicne.w	r2, r2, #1
 800cb0a:	106b      	asrs	r3, r5, #1
 800cb0c:	0852      	lsrs	r2, r2, #1
 800cb0e:	07e9      	lsls	r1, r5, #31
 800cb10:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cb14:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cb18:	bf48      	it	mi
 800cb1a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cb1e:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800cb22:	4616      	mov	r6, r2
 800cb24:	e777      	b.n	800ca16 <__ieee754_sqrt+0x32>
 800cb26:	0adc      	lsrs	r4, r3, #11
 800cb28:	3a15      	subs	r2, #21
 800cb2a:	055b      	lsls	r3, r3, #21
 800cb2c:	e78a      	b.n	800ca44 <__ieee754_sqrt+0x60>
 800cb2e:	0064      	lsls	r4, r4, #1
 800cb30:	3101      	adds	r1, #1
 800cb32:	e78a      	b.n	800ca4a <__ieee754_sqrt+0x66>
 800cb34:	46a0      	mov	r8, r4
 800cb36:	e7cd      	b.n	800cad4 <__ieee754_sqrt+0xf0>
 800cb38:	7ff00000 	.word	0x7ff00000

0800cb3c <__ieee754_asinf>:
 800cb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb40:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800cb44:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800cb48:	4604      	mov	r4, r0
 800cb4a:	4607      	mov	r7, r0
 800cb4c:	d10c      	bne.n	800cb68 <__ieee754_asinf+0x2c>
 800cb4e:	498d      	ldr	r1, [pc, #564]	; (800cd84 <__ieee754_asinf+0x248>)
 800cb50:	f7f4 f8f4 	bl	8000d3c <__aeabi_fmul>
 800cb54:	498c      	ldr	r1, [pc, #560]	; (800cd88 <__ieee754_asinf+0x24c>)
 800cb56:	4605      	mov	r5, r0
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f7f4 f8ef 	bl	8000d3c <__aeabi_fmul>
 800cb5e:	4601      	mov	r1, r0
 800cb60:	4628      	mov	r0, r5
 800cb62:	f7f3 ffe3 	bl	8000b2c <__addsf3>
 800cb66:	e006      	b.n	800cb76 <__ieee754_asinf+0x3a>
 800cb68:	dd09      	ble.n	800cb7e <__ieee754_asinf+0x42>
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	f7f3 ffdc 	bl	8000b28 <__aeabi_fsub>
 800cb70:	4601      	mov	r1, r0
 800cb72:	f7f4 f997 	bl	8000ea4 <__aeabi_fdiv>
 800cb76:	4604      	mov	r4, r0
 800cb78:	4620      	mov	r0, r4
 800cb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb7e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800cb82:	da0b      	bge.n	800cb9c <__ieee754_asinf+0x60>
 800cb84:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800cb88:	da73      	bge.n	800cc72 <__ieee754_asinf+0x136>
 800cb8a:	4980      	ldr	r1, [pc, #512]	; (800cd8c <__ieee754_asinf+0x250>)
 800cb8c:	f7f3 ffce 	bl	8000b2c <__addsf3>
 800cb90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cb94:	f7f4 fa8e 	bl	80010b4 <__aeabi_fcmpgt>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d1ed      	bne.n	800cb78 <__ieee754_asinf+0x3c>
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f000 ff59 	bl	800da54 <fabsf>
 800cba2:	4601      	mov	r1, r0
 800cba4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cba8:	f7f3 ffbe 	bl	8000b28 <__aeabi_fsub>
 800cbac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800cbb0:	f7f4 f8c4 	bl	8000d3c <__aeabi_fmul>
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	4976      	ldr	r1, [pc, #472]	; (800cd90 <__ieee754_asinf+0x254>)
 800cbb8:	f7f4 f8c0 	bl	8000d3c <__aeabi_fmul>
 800cbbc:	4975      	ldr	r1, [pc, #468]	; (800cd94 <__ieee754_asinf+0x258>)
 800cbbe:	f7f3 ffb5 	bl	8000b2c <__addsf3>
 800cbc2:	4621      	mov	r1, r4
 800cbc4:	f7f4 f8ba 	bl	8000d3c <__aeabi_fmul>
 800cbc8:	4973      	ldr	r1, [pc, #460]	; (800cd98 <__ieee754_asinf+0x25c>)
 800cbca:	f7f3 ffad 	bl	8000b28 <__aeabi_fsub>
 800cbce:	4621      	mov	r1, r4
 800cbd0:	f7f4 f8b4 	bl	8000d3c <__aeabi_fmul>
 800cbd4:	4971      	ldr	r1, [pc, #452]	; (800cd9c <__ieee754_asinf+0x260>)
 800cbd6:	f7f3 ffa9 	bl	8000b2c <__addsf3>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	f7f4 f8ae 	bl	8000d3c <__aeabi_fmul>
 800cbe0:	496f      	ldr	r1, [pc, #444]	; (800cda0 <__ieee754_asinf+0x264>)
 800cbe2:	f7f3 ffa1 	bl	8000b28 <__aeabi_fsub>
 800cbe6:	4621      	mov	r1, r4
 800cbe8:	f7f4 f8a8 	bl	8000d3c <__aeabi_fmul>
 800cbec:	496d      	ldr	r1, [pc, #436]	; (800cda4 <__ieee754_asinf+0x268>)
 800cbee:	f7f3 ff9d 	bl	8000b2c <__addsf3>
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	f7f4 f8a2 	bl	8000d3c <__aeabi_fmul>
 800cbf8:	496b      	ldr	r1, [pc, #428]	; (800cda8 <__ieee754_asinf+0x26c>)
 800cbfa:	4680      	mov	r8, r0
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	f7f4 f89d 	bl	8000d3c <__aeabi_fmul>
 800cc02:	496a      	ldr	r1, [pc, #424]	; (800cdac <__ieee754_asinf+0x270>)
 800cc04:	f7f3 ff90 	bl	8000b28 <__aeabi_fsub>
 800cc08:	4621      	mov	r1, r4
 800cc0a:	f7f4 f897 	bl	8000d3c <__aeabi_fmul>
 800cc0e:	4968      	ldr	r1, [pc, #416]	; (800cdb0 <__ieee754_asinf+0x274>)
 800cc10:	f7f3 ff8c 	bl	8000b2c <__addsf3>
 800cc14:	4621      	mov	r1, r4
 800cc16:	f7f4 f891 	bl	8000d3c <__aeabi_fmul>
 800cc1a:	4966      	ldr	r1, [pc, #408]	; (800cdb4 <__ieee754_asinf+0x278>)
 800cc1c:	f7f3 ff84 	bl	8000b28 <__aeabi_fsub>
 800cc20:	4621      	mov	r1, r4
 800cc22:	f7f4 f88b 	bl	8000d3c <__aeabi_fmul>
 800cc26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc2a:	f7f3 ff7f 	bl	8000b2c <__addsf3>
 800cc2e:	4681      	mov	r9, r0
 800cc30:	4620      	mov	r0, r4
 800cc32:	f000 fca3 	bl	800d57c <__ieee754_sqrtf>
 800cc36:	4b60      	ldr	r3, [pc, #384]	; (800cdb8 <__ieee754_asinf+0x27c>)
 800cc38:	4606      	mov	r6, r0
 800cc3a:	429d      	cmp	r5, r3
 800cc3c:	dd63      	ble.n	800cd06 <__ieee754_asinf+0x1ca>
 800cc3e:	4649      	mov	r1, r9
 800cc40:	4640      	mov	r0, r8
 800cc42:	f7f4 f92f 	bl	8000ea4 <__aeabi_fdiv>
 800cc46:	4631      	mov	r1, r6
 800cc48:	f7f4 f878 	bl	8000d3c <__aeabi_fmul>
 800cc4c:	4631      	mov	r1, r6
 800cc4e:	f7f3 ff6d 	bl	8000b2c <__addsf3>
 800cc52:	4601      	mov	r1, r0
 800cc54:	f7f3 ff6a 	bl	8000b2c <__addsf3>
 800cc58:	4958      	ldr	r1, [pc, #352]	; (800cdbc <__ieee754_asinf+0x280>)
 800cc5a:	f7f3 ff67 	bl	8000b2c <__addsf3>
 800cc5e:	4601      	mov	r1, r0
 800cc60:	4848      	ldr	r0, [pc, #288]	; (800cd84 <__ieee754_asinf+0x248>)
 800cc62:	f7f3 ff61 	bl	8000b28 <__aeabi_fsub>
 800cc66:	2f00      	cmp	r7, #0
 800cc68:	4604      	mov	r4, r0
 800cc6a:	bfd8      	it	le
 800cc6c:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800cc70:	e782      	b.n	800cb78 <__ieee754_asinf+0x3c>
 800cc72:	4601      	mov	r1, r0
 800cc74:	f7f4 f862 	bl	8000d3c <__aeabi_fmul>
 800cc78:	4605      	mov	r5, r0
 800cc7a:	4945      	ldr	r1, [pc, #276]	; (800cd90 <__ieee754_asinf+0x254>)
 800cc7c:	f7f4 f85e 	bl	8000d3c <__aeabi_fmul>
 800cc80:	4944      	ldr	r1, [pc, #272]	; (800cd94 <__ieee754_asinf+0x258>)
 800cc82:	f7f3 ff53 	bl	8000b2c <__addsf3>
 800cc86:	4629      	mov	r1, r5
 800cc88:	f7f4 f858 	bl	8000d3c <__aeabi_fmul>
 800cc8c:	4942      	ldr	r1, [pc, #264]	; (800cd98 <__ieee754_asinf+0x25c>)
 800cc8e:	f7f3 ff4b 	bl	8000b28 <__aeabi_fsub>
 800cc92:	4629      	mov	r1, r5
 800cc94:	f7f4 f852 	bl	8000d3c <__aeabi_fmul>
 800cc98:	4940      	ldr	r1, [pc, #256]	; (800cd9c <__ieee754_asinf+0x260>)
 800cc9a:	f7f3 ff47 	bl	8000b2c <__addsf3>
 800cc9e:	4629      	mov	r1, r5
 800cca0:	f7f4 f84c 	bl	8000d3c <__aeabi_fmul>
 800cca4:	493e      	ldr	r1, [pc, #248]	; (800cda0 <__ieee754_asinf+0x264>)
 800cca6:	f7f3 ff3f 	bl	8000b28 <__aeabi_fsub>
 800ccaa:	4629      	mov	r1, r5
 800ccac:	f7f4 f846 	bl	8000d3c <__aeabi_fmul>
 800ccb0:	493c      	ldr	r1, [pc, #240]	; (800cda4 <__ieee754_asinf+0x268>)
 800ccb2:	f7f3 ff3b 	bl	8000b2c <__addsf3>
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	f7f4 f840 	bl	8000d3c <__aeabi_fmul>
 800ccbc:	493a      	ldr	r1, [pc, #232]	; (800cda8 <__ieee754_asinf+0x26c>)
 800ccbe:	4606      	mov	r6, r0
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	f7f4 f83b 	bl	8000d3c <__aeabi_fmul>
 800ccc6:	4939      	ldr	r1, [pc, #228]	; (800cdac <__ieee754_asinf+0x270>)
 800ccc8:	f7f3 ff2e 	bl	8000b28 <__aeabi_fsub>
 800cccc:	4629      	mov	r1, r5
 800ccce:	f7f4 f835 	bl	8000d3c <__aeabi_fmul>
 800ccd2:	4937      	ldr	r1, [pc, #220]	; (800cdb0 <__ieee754_asinf+0x274>)
 800ccd4:	f7f3 ff2a 	bl	8000b2c <__addsf3>
 800ccd8:	4629      	mov	r1, r5
 800ccda:	f7f4 f82f 	bl	8000d3c <__aeabi_fmul>
 800ccde:	4935      	ldr	r1, [pc, #212]	; (800cdb4 <__ieee754_asinf+0x278>)
 800cce0:	f7f3 ff22 	bl	8000b28 <__aeabi_fsub>
 800cce4:	4629      	mov	r1, r5
 800cce6:	f7f4 f829 	bl	8000d3c <__aeabi_fmul>
 800ccea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ccee:	f7f3 ff1d 	bl	8000b2c <__addsf3>
 800ccf2:	4601      	mov	r1, r0
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f7f4 f8d5 	bl	8000ea4 <__aeabi_fdiv>
 800ccfa:	4621      	mov	r1, r4
 800ccfc:	f7f4 f81e 	bl	8000d3c <__aeabi_fmul>
 800cd00:	4601      	mov	r1, r0
 800cd02:	4620      	mov	r0, r4
 800cd04:	e72d      	b.n	800cb62 <__ieee754_asinf+0x26>
 800cd06:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800cd0a:	4649      	mov	r1, r9
 800cd0c:	4640      	mov	r0, r8
 800cd0e:	f7f4 f8c9 	bl	8000ea4 <__aeabi_fdiv>
 800cd12:	4631      	mov	r1, r6
 800cd14:	4680      	mov	r8, r0
 800cd16:	4630      	mov	r0, r6
 800cd18:	f7f3 ff08 	bl	8000b2c <__addsf3>
 800cd1c:	4601      	mov	r1, r0
 800cd1e:	4640      	mov	r0, r8
 800cd20:	f7f4 f80c 	bl	8000d3c <__aeabi_fmul>
 800cd24:	f025 050f 	bic.w	r5, r5, #15
 800cd28:	4680      	mov	r8, r0
 800cd2a:	4629      	mov	r1, r5
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	f7f4 f805 	bl	8000d3c <__aeabi_fmul>
 800cd32:	4601      	mov	r1, r0
 800cd34:	4620      	mov	r0, r4
 800cd36:	f7f3 fef7 	bl	8000b28 <__aeabi_fsub>
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	4628      	mov	r0, r5
 800cd40:	f7f3 fef4 	bl	8000b2c <__addsf3>
 800cd44:	4601      	mov	r1, r0
 800cd46:	4620      	mov	r0, r4
 800cd48:	f7f4 f8ac 	bl	8000ea4 <__aeabi_fdiv>
 800cd4c:	4601      	mov	r1, r0
 800cd4e:	f7f3 feed 	bl	8000b2c <__addsf3>
 800cd52:	4601      	mov	r1, r0
 800cd54:	480c      	ldr	r0, [pc, #48]	; (800cd88 <__ieee754_asinf+0x24c>)
 800cd56:	f7f3 fee7 	bl	8000b28 <__aeabi_fsub>
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	4640      	mov	r0, r8
 800cd5e:	f7f3 fee3 	bl	8000b28 <__aeabi_fsub>
 800cd62:	4629      	mov	r1, r5
 800cd64:	4604      	mov	r4, r0
 800cd66:	4628      	mov	r0, r5
 800cd68:	f7f3 fee0 	bl	8000b2c <__addsf3>
 800cd6c:	4601      	mov	r1, r0
 800cd6e:	4814      	ldr	r0, [pc, #80]	; (800cdc0 <__ieee754_asinf+0x284>)
 800cd70:	f7f3 feda 	bl	8000b28 <__aeabi_fsub>
 800cd74:	4601      	mov	r1, r0
 800cd76:	4620      	mov	r0, r4
 800cd78:	f7f3 fed6 	bl	8000b28 <__aeabi_fsub>
 800cd7c:	4601      	mov	r1, r0
 800cd7e:	4810      	ldr	r0, [pc, #64]	; (800cdc0 <__ieee754_asinf+0x284>)
 800cd80:	e76f      	b.n	800cc62 <__ieee754_asinf+0x126>
 800cd82:	bf00      	nop
 800cd84:	3fc90fdb 	.word	0x3fc90fdb
 800cd88:	b33bbd2e 	.word	0xb33bbd2e
 800cd8c:	7149f2ca 	.word	0x7149f2ca
 800cd90:	3811ef08 	.word	0x3811ef08
 800cd94:	3a4f7f04 	.word	0x3a4f7f04
 800cd98:	3d241146 	.word	0x3d241146
 800cd9c:	3e4e0aa8 	.word	0x3e4e0aa8
 800cda0:	3ea6b090 	.word	0x3ea6b090
 800cda4:	3e2aaaab 	.word	0x3e2aaaab
 800cda8:	3d9dc62e 	.word	0x3d9dc62e
 800cdac:	3f303361 	.word	0x3f303361
 800cdb0:	4001572d 	.word	0x4001572d
 800cdb4:	4019d139 	.word	0x4019d139
 800cdb8:	3f799999 	.word	0x3f799999
 800cdbc:	333bbd2e 	.word	0x333bbd2e
 800cdc0:	3f490fdb 	.word	0x3f490fdb

0800cdc4 <__ieee754_atan2f>:
 800cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cdca:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800cdce:	4603      	mov	r3, r0
 800cdd0:	dc05      	bgt.n	800cdde <__ieee754_atan2f+0x1a>
 800cdd2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800cdd6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cdda:	4607      	mov	r7, r0
 800cddc:	dd04      	ble.n	800cde8 <__ieee754_atan2f+0x24>
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7f3 fea4 	bl	8000b2c <__addsf3>
 800cde4:	4603      	mov	r3, r0
 800cde6:	e010      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800cde8:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800cdec:	d103      	bne.n	800cdf6 <__ieee754_atan2f+0x32>
 800cdee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cdf2:	f000 bd1f 	b.w	800d834 <atanf>
 800cdf6:	178c      	asrs	r4, r1, #30
 800cdf8:	f004 0402 	and.w	r4, r4, #2
 800cdfc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ce00:	b92a      	cbnz	r2, 800ce0e <__ieee754_atan2f+0x4a>
 800ce02:	2c02      	cmp	r4, #2
 800ce04:	d023      	beq.n	800ce4e <__ieee754_atan2f+0x8a>
 800ce06:	2c03      	cmp	r4, #3
 800ce08:	d023      	beq.n	800ce52 <__ieee754_atan2f+0x8e>
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce0e:	b91e      	cbnz	r6, 800ce18 <__ieee754_atan2f+0x54>
 800ce10:	2f00      	cmp	r7, #0
 800ce12:	da53      	bge.n	800cebc <__ieee754_atan2f+0xf8>
 800ce14:	4b2a      	ldr	r3, [pc, #168]	; (800cec0 <__ieee754_atan2f+0xfc>)
 800ce16:	e7f8      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800ce18:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ce1c:	d11b      	bne.n	800ce56 <__ieee754_atan2f+0x92>
 800ce1e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ce22:	d10b      	bne.n	800ce3c <__ieee754_atan2f+0x78>
 800ce24:	2c02      	cmp	r4, #2
 800ce26:	d005      	beq.n	800ce34 <__ieee754_atan2f+0x70>
 800ce28:	2c03      	cmp	r4, #3
 800ce2a:	d005      	beq.n	800ce38 <__ieee754_atan2f+0x74>
 800ce2c:	2c01      	cmp	r4, #1
 800ce2e:	d141      	bne.n	800ceb4 <__ieee754_atan2f+0xf0>
 800ce30:	4b24      	ldr	r3, [pc, #144]	; (800cec4 <__ieee754_atan2f+0x100>)
 800ce32:	e7ea      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800ce34:	4b24      	ldr	r3, [pc, #144]	; (800cec8 <__ieee754_atan2f+0x104>)
 800ce36:	e7e8      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800ce38:	4b24      	ldr	r3, [pc, #144]	; (800cecc <__ieee754_atan2f+0x108>)
 800ce3a:	e7e6      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800ce3c:	2c02      	cmp	r4, #2
 800ce3e:	d006      	beq.n	800ce4e <__ieee754_atan2f+0x8a>
 800ce40:	2c03      	cmp	r4, #3
 800ce42:	d006      	beq.n	800ce52 <__ieee754_atan2f+0x8e>
 800ce44:	2c01      	cmp	r4, #1
 800ce46:	d137      	bne.n	800ceb8 <__ieee754_atan2f+0xf4>
 800ce48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce4c:	e7dd      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800ce4e:	4b20      	ldr	r3, [pc, #128]	; (800ced0 <__ieee754_atan2f+0x10c>)
 800ce50:	e7db      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800ce52:	4b20      	ldr	r3, [pc, #128]	; (800ced4 <__ieee754_atan2f+0x110>)
 800ce54:	e7d9      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800ce56:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ce5a:	d0d9      	beq.n	800ce10 <__ieee754_atan2f+0x4c>
 800ce5c:	1b92      	subs	r2, r2, r6
 800ce5e:	15d2      	asrs	r2, r2, #23
 800ce60:	2a3c      	cmp	r2, #60	; 0x3c
 800ce62:	dc17      	bgt.n	800ce94 <__ieee754_atan2f+0xd0>
 800ce64:	2900      	cmp	r1, #0
 800ce66:	da01      	bge.n	800ce6c <__ieee754_atan2f+0xa8>
 800ce68:	323c      	adds	r2, #60	; 0x3c
 800ce6a:	db15      	blt.n	800ce98 <__ieee754_atan2f+0xd4>
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7f4 f819 	bl	8000ea4 <__aeabi_fdiv>
 800ce72:	f000 fdef 	bl	800da54 <fabsf>
 800ce76:	f000 fcdd 	bl	800d834 <atanf>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2c01      	cmp	r4, #1
 800ce7e:	d00d      	beq.n	800ce9c <__ieee754_atan2f+0xd8>
 800ce80:	2c02      	cmp	r4, #2
 800ce82:	d00e      	beq.n	800cea2 <__ieee754_atan2f+0xde>
 800ce84:	2c00      	cmp	r4, #0
 800ce86:	d0c0      	beq.n	800ce0a <__ieee754_atan2f+0x46>
 800ce88:	4913      	ldr	r1, [pc, #76]	; (800ced8 <__ieee754_atan2f+0x114>)
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7f3 fe4e 	bl	8000b2c <__addsf3>
 800ce90:	490f      	ldr	r1, [pc, #60]	; (800ced0 <__ieee754_atan2f+0x10c>)
 800ce92:	e00c      	b.n	800ceae <__ieee754_atan2f+0xea>
 800ce94:	4b11      	ldr	r3, [pc, #68]	; (800cedc <__ieee754_atan2f+0x118>)
 800ce96:	e7f1      	b.n	800ce7c <__ieee754_atan2f+0xb8>
 800ce98:	2300      	movs	r3, #0
 800ce9a:	e7ef      	b.n	800ce7c <__ieee754_atan2f+0xb8>
 800ce9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cea0:	e7b3      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800cea2:	490d      	ldr	r1, [pc, #52]	; (800ced8 <__ieee754_atan2f+0x114>)
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7f3 fe41 	bl	8000b2c <__addsf3>
 800ceaa:	4601      	mov	r1, r0
 800ceac:	4808      	ldr	r0, [pc, #32]	; (800ced0 <__ieee754_atan2f+0x10c>)
 800ceae:	f7f3 fe3b 	bl	8000b28 <__aeabi_fsub>
 800ceb2:	e797      	b.n	800cde4 <__ieee754_atan2f+0x20>
 800ceb4:	4b0a      	ldr	r3, [pc, #40]	; (800cee0 <__ieee754_atan2f+0x11c>)
 800ceb6:	e7a8      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	e7a6      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800cebc:	4b07      	ldr	r3, [pc, #28]	; (800cedc <__ieee754_atan2f+0x118>)
 800cebe:	e7a4      	b.n	800ce0a <__ieee754_atan2f+0x46>
 800cec0:	bfc90fdb 	.word	0xbfc90fdb
 800cec4:	bf490fdb 	.word	0xbf490fdb
 800cec8:	4016cbe4 	.word	0x4016cbe4
 800cecc:	c016cbe4 	.word	0xc016cbe4
 800ced0:	40490fdb 	.word	0x40490fdb
 800ced4:	c0490fdb 	.word	0xc0490fdb
 800ced8:	33bbbd2e 	.word	0x33bbbd2e
 800cedc:	3fc90fdb 	.word	0x3fc90fdb
 800cee0:	3f490fdb 	.word	0x3f490fdb

0800cee4 <__ieee754_powf>:
 800cee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee8:	b087      	sub	sp, #28
 800ceea:	9101      	str	r1, [sp, #4]
 800ceec:	9c01      	ldr	r4, [sp, #4]
 800ceee:	4681      	mov	r9, r0
 800cef0:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 800cef4:	f000 8325 	beq.w	800d542 <__ieee754_powf+0x65e>
 800cef8:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800cefc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800cf00:	4680      	mov	r8, r0
 800cf02:	dc06      	bgt.n	800cf12 <__ieee754_powf+0x2e>
 800cf04:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cf08:	dd09      	ble.n	800cf1e <__ieee754_powf+0x3a>
 800cf0a:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800cf0e:	f000 8318 	beq.w	800d542 <__ieee754_powf+0x65e>
 800cf12:	4885      	ldr	r0, [pc, #532]	; (800d128 <__ieee754_powf+0x244>)
 800cf14:	b007      	add	sp, #28
 800cf16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1a:	f7fe bacb 	b.w	800b4b4 <nanf>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	da1d      	bge.n	800cf5e <__ieee754_powf+0x7a>
 800cf22:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800cf26:	da2b      	bge.n	800cf80 <__ieee754_powf+0x9c>
 800cf28:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800cf2c:	db30      	blt.n	800cf90 <__ieee754_powf+0xac>
 800cf2e:	15fb      	asrs	r3, r7, #23
 800cf30:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cf34:	fa47 f503 	asr.w	r5, r7, r3
 800cf38:	fa05 f303 	lsl.w	r3, r5, r3
 800cf3c:	429f      	cmp	r7, r3
 800cf3e:	d127      	bne.n	800cf90 <__ieee754_powf+0xac>
 800cf40:	f005 0501 	and.w	r5, r5, #1
 800cf44:	f1c5 0502 	rsb	r5, r5, #2
 800cf48:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800cf4c:	d122      	bne.n	800cf94 <__ieee754_powf+0xb0>
 800cf4e:	2c00      	cmp	r4, #0
 800cf50:	4649      	mov	r1, r9
 800cf52:	da11      	bge.n	800cf78 <__ieee754_powf+0x94>
 800cf54:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cf58:	f7f3 ffa4 	bl	8000ea4 <__aeabi_fdiv>
 800cf5c:	e021      	b.n	800cfa2 <__ieee754_powf+0xbe>
 800cf5e:	2500      	movs	r5, #0
 800cf60:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cf64:	d1f0      	bne.n	800cf48 <__ieee754_powf+0x64>
 800cf66:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800cf6a:	f000 82ea 	beq.w	800d542 <__ieee754_powf+0x65e>
 800cf6e:	dd09      	ble.n	800cf84 <__ieee754_powf+0xa0>
 800cf70:	2c00      	cmp	r4, #0
 800cf72:	f280 82e9 	bge.w	800d548 <__ieee754_powf+0x664>
 800cf76:	2100      	movs	r1, #0
 800cf78:	4608      	mov	r0, r1
 800cf7a:	b007      	add	sp, #28
 800cf7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf80:	2502      	movs	r5, #2
 800cf82:	e7ed      	b.n	800cf60 <__ieee754_powf+0x7c>
 800cf84:	2c00      	cmp	r4, #0
 800cf86:	daf6      	bge.n	800cf76 <__ieee754_powf+0x92>
 800cf88:	9b01      	ldr	r3, [sp, #4]
 800cf8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cf8e:	e7f3      	b.n	800cf78 <__ieee754_powf+0x94>
 800cf90:	2500      	movs	r5, #0
 800cf92:	e7d9      	b.n	800cf48 <__ieee754_powf+0x64>
 800cf94:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800cf98:	d105      	bne.n	800cfa6 <__ieee754_powf+0xc2>
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	f7f3 fecd 	bl	8000d3c <__aeabi_fmul>
 800cfa2:	4601      	mov	r1, r0
 800cfa4:	e7e8      	b.n	800cf78 <__ieee754_powf+0x94>
 800cfa6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800cfaa:	4648      	mov	r0, r9
 800cfac:	d107      	bne.n	800cfbe <__ieee754_powf+0xda>
 800cfae:	f1b8 0f00 	cmp.w	r8, #0
 800cfb2:	db04      	blt.n	800cfbe <__ieee754_powf+0xda>
 800cfb4:	b007      	add	sp, #28
 800cfb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfba:	f000 badf 	b.w	800d57c <__ieee754_sqrtf>
 800cfbe:	f000 fd49 	bl	800da54 <fabsf>
 800cfc2:	4601      	mov	r1, r0
 800cfc4:	b126      	cbz	r6, 800cfd0 <__ieee754_powf+0xec>
 800cfc6:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800cfca:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800cfce:	d118      	bne.n	800d002 <__ieee754_powf+0x11e>
 800cfd0:	2c00      	cmp	r4, #0
 800cfd2:	da04      	bge.n	800cfde <__ieee754_powf+0xfa>
 800cfd4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cfd8:	f7f3 ff64 	bl	8000ea4 <__aeabi_fdiv>
 800cfdc:	4601      	mov	r1, r0
 800cfde:	f1b8 0f00 	cmp.w	r8, #0
 800cfe2:	dac9      	bge.n	800cf78 <__ieee754_powf+0x94>
 800cfe4:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 800cfe8:	ea50 0305 	orrs.w	r3, r0, r5
 800cfec:	d104      	bne.n	800cff8 <__ieee754_powf+0x114>
 800cfee:	4608      	mov	r0, r1
 800cff0:	f7f3 fd9a 	bl	8000b28 <__aeabi_fsub>
 800cff4:	4601      	mov	r1, r0
 800cff6:	e7af      	b.n	800cf58 <__ieee754_powf+0x74>
 800cff8:	2d01      	cmp	r5, #1
 800cffa:	d1bd      	bne.n	800cf78 <__ieee754_powf+0x94>
 800cffc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d000:	e7ba      	b.n	800cf78 <__ieee754_powf+0x94>
 800d002:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800d006:	f108 33ff 	add.w	r3, r8, #4294967295
 800d00a:	9303      	str	r3, [sp, #12]
 800d00c:	432b      	orrs	r3, r5
 800d00e:	d101      	bne.n	800d014 <__ieee754_powf+0x130>
 800d010:	4649      	mov	r1, r9
 800d012:	e7ec      	b.n	800cfee <__ieee754_powf+0x10a>
 800d014:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800d018:	f340 8098 	ble.w	800d14c <__ieee754_powf+0x268>
 800d01c:	4b43      	ldr	r3, [pc, #268]	; (800d12c <__ieee754_powf+0x248>)
 800d01e:	429e      	cmp	r6, r3
 800d020:	dc03      	bgt.n	800d02a <__ieee754_powf+0x146>
 800d022:	2c00      	cmp	r4, #0
 800d024:	daa7      	bge.n	800cf76 <__ieee754_powf+0x92>
 800d026:	4942      	ldr	r1, [pc, #264]	; (800d130 <__ieee754_powf+0x24c>)
 800d028:	e7b8      	b.n	800cf9c <__ieee754_powf+0xb8>
 800d02a:	4b42      	ldr	r3, [pc, #264]	; (800d134 <__ieee754_powf+0x250>)
 800d02c:	429e      	cmp	r6, r3
 800d02e:	dd02      	ble.n	800d036 <__ieee754_powf+0x152>
 800d030:	2c00      	cmp	r4, #0
 800d032:	dcf8      	bgt.n	800d026 <__ieee754_powf+0x142>
 800d034:	e79f      	b.n	800cf76 <__ieee754_powf+0x92>
 800d036:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d03a:	f7f3 fd75 	bl	8000b28 <__aeabi_fsub>
 800d03e:	493e      	ldr	r1, [pc, #248]	; (800d138 <__ieee754_powf+0x254>)
 800d040:	4606      	mov	r6, r0
 800d042:	f7f3 fe7b 	bl	8000d3c <__aeabi_fmul>
 800d046:	493d      	ldr	r1, [pc, #244]	; (800d13c <__ieee754_powf+0x258>)
 800d048:	4607      	mov	r7, r0
 800d04a:	4630      	mov	r0, r6
 800d04c:	f7f3 fe76 	bl	8000d3c <__aeabi_fmul>
 800d050:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800d054:	4680      	mov	r8, r0
 800d056:	4630      	mov	r0, r6
 800d058:	f7f3 fe70 	bl	8000d3c <__aeabi_fmul>
 800d05c:	4601      	mov	r1, r0
 800d05e:	4838      	ldr	r0, [pc, #224]	; (800d140 <__ieee754_powf+0x25c>)
 800d060:	f7f3 fd62 	bl	8000b28 <__aeabi_fsub>
 800d064:	4631      	mov	r1, r6
 800d066:	f7f3 fe69 	bl	8000d3c <__aeabi_fmul>
 800d06a:	4601      	mov	r1, r0
 800d06c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800d070:	f7f3 fd5a 	bl	8000b28 <__aeabi_fsub>
 800d074:	4631      	mov	r1, r6
 800d076:	4681      	mov	r9, r0
 800d078:	4630      	mov	r0, r6
 800d07a:	f7f3 fe5f 	bl	8000d3c <__aeabi_fmul>
 800d07e:	4601      	mov	r1, r0
 800d080:	4648      	mov	r0, r9
 800d082:	f7f3 fe5b 	bl	8000d3c <__aeabi_fmul>
 800d086:	492f      	ldr	r1, [pc, #188]	; (800d144 <__ieee754_powf+0x260>)
 800d088:	f7f3 fe58 	bl	8000d3c <__aeabi_fmul>
 800d08c:	4601      	mov	r1, r0
 800d08e:	4640      	mov	r0, r8
 800d090:	f7f3 fd4a 	bl	8000b28 <__aeabi_fsub>
 800d094:	4601      	mov	r1, r0
 800d096:	4606      	mov	r6, r0
 800d098:	4638      	mov	r0, r7
 800d09a:	f7f3 fd47 	bl	8000b2c <__addsf3>
 800d09e:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800d0a2:	f02a 0a0f 	bic.w	sl, sl, #15
 800d0a6:	4639      	mov	r1, r7
 800d0a8:	4650      	mov	r0, sl
 800d0aa:	f7f3 fd3d 	bl	8000b28 <__aeabi_fsub>
 800d0ae:	4601      	mov	r1, r0
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	f7f3 fd39 	bl	8000b28 <__aeabi_fsub>
 800d0b6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	3d01      	subs	r5, #1
 800d0be:	f024 040f 	bic.w	r4, r4, #15
 800d0c2:	432b      	orrs	r3, r5
 800d0c4:	4606      	mov	r6, r0
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	9801      	ldr	r0, [sp, #4]
 800d0ca:	bf0c      	ite	eq
 800d0cc:	4d1e      	ldreq	r5, [pc, #120]	; (800d148 <__ieee754_powf+0x264>)
 800d0ce:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 800d0d2:	f7f3 fd29 	bl	8000b28 <__aeabi_fsub>
 800d0d6:	4651      	mov	r1, sl
 800d0d8:	f7f3 fe30 	bl	8000d3c <__aeabi_fmul>
 800d0dc:	9901      	ldr	r1, [sp, #4]
 800d0de:	4607      	mov	r7, r0
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f7f3 fe2b 	bl	8000d3c <__aeabi_fmul>
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	4638      	mov	r0, r7
 800d0ea:	f7f3 fd1f 	bl	8000b2c <__addsf3>
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	4650      	mov	r0, sl
 800d0f4:	f7f3 fe22 	bl	8000d3c <__aeabi_fmul>
 800d0f8:	4601      	mov	r1, r0
 800d0fa:	4607      	mov	r7, r0
 800d0fc:	4681      	mov	r9, r0
 800d0fe:	4630      	mov	r0, r6
 800d100:	f7f3 fd14 	bl	8000b2c <__addsf3>
 800d104:	2800      	cmp	r0, #0
 800d106:	4682      	mov	sl, r0
 800d108:	4680      	mov	r8, r0
 800d10a:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800d10e:	f340 81fb 	ble.w	800d508 <__ieee754_powf+0x624>
 800d112:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800d116:	f340 8149 	ble.w	800d3ac <__ieee754_powf+0x4c8>
 800d11a:	4905      	ldr	r1, [pc, #20]	; (800d130 <__ieee754_powf+0x24c>)
 800d11c:	4628      	mov	r0, r5
 800d11e:	f7f3 fe0d 	bl	8000d3c <__aeabi_fmul>
 800d122:	4903      	ldr	r1, [pc, #12]	; (800d130 <__ieee754_powf+0x24c>)
 800d124:	e73b      	b.n	800cf9e <__ieee754_powf+0xba>
 800d126:	bf00      	nop
 800d128:	0800e333 	.word	0x0800e333
 800d12c:	3f7ffff7 	.word	0x3f7ffff7
 800d130:	7149f2ca 	.word	0x7149f2ca
 800d134:	3f800007 	.word	0x3f800007
 800d138:	3fb8aa00 	.word	0x3fb8aa00
 800d13c:	36eca570 	.word	0x36eca570
 800d140:	3eaaaaab 	.word	0x3eaaaaab
 800d144:	3fb8aa3b 	.word	0x3fb8aa3b
 800d148:	bf800000 	.word	0xbf800000
 800d14c:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 800d150:	f280 810a 	bge.w	800d368 <__ieee754_powf+0x484>
 800d154:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 800d158:	f7f3 fdf0 	bl	8000d3c <__aeabi_fmul>
 800d15c:	f06f 0217 	mvn.w	r2, #23
 800d160:	4606      	mov	r6, r0
 800d162:	15f3      	asrs	r3, r6, #23
 800d164:	3b7f      	subs	r3, #127	; 0x7f
 800d166:	441a      	add	r2, r3
 800d168:	4b81      	ldr	r3, [pc, #516]	; (800d370 <__ieee754_powf+0x48c>)
 800d16a:	f3c6 0016 	ubfx	r0, r6, #0, #23
 800d16e:	4298      	cmp	r0, r3
 800d170:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 800d174:	dd06      	ble.n	800d184 <__ieee754_powf+0x2a0>
 800d176:	4b7f      	ldr	r3, [pc, #508]	; (800d374 <__ieee754_powf+0x490>)
 800d178:	4298      	cmp	r0, r3
 800d17a:	f340 80f7 	ble.w	800d36c <__ieee754_powf+0x488>
 800d17e:	3201      	adds	r2, #1
 800d180:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 800d184:	2700      	movs	r7, #0
 800d186:	4b7c      	ldr	r3, [pc, #496]	; (800d378 <__ieee754_powf+0x494>)
 800d188:	4630      	mov	r0, r6
 800d18a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800d18e:	9205      	str	r2, [sp, #20]
 800d190:	4619      	mov	r1, r3
 800d192:	9302      	str	r3, [sp, #8]
 800d194:	f7f3 fcc8 	bl	8000b28 <__aeabi_fsub>
 800d198:	9902      	ldr	r1, [sp, #8]
 800d19a:	4683      	mov	fp, r0
 800d19c:	4630      	mov	r0, r6
 800d19e:	f7f3 fcc5 	bl	8000b2c <__addsf3>
 800d1a2:	4601      	mov	r1, r0
 800d1a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d1a8:	f7f3 fe7c 	bl	8000ea4 <__aeabi_fdiv>
 800d1ac:	4601      	mov	r1, r0
 800d1ae:	9004      	str	r0, [sp, #16]
 800d1b0:	4658      	mov	r0, fp
 800d1b2:	f7f3 fdc3 	bl	8000d3c <__aeabi_fmul>
 800d1b6:	46b2      	mov	sl, r6
 800d1b8:	1076      	asrs	r6, r6, #1
 800d1ba:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800d1be:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800d1c2:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 800d1c6:	f028 080f 	bic.w	r8, r8, #15
 800d1ca:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 800d1ce:	4681      	mov	r9, r0
 800d1d0:	4631      	mov	r1, r6
 800d1d2:	4640      	mov	r0, r8
 800d1d4:	f7f3 fdb2 	bl	8000d3c <__aeabi_fmul>
 800d1d8:	4601      	mov	r1, r0
 800d1da:	4658      	mov	r0, fp
 800d1dc:	f7f3 fca4 	bl	8000b28 <__aeabi_fsub>
 800d1e0:	9902      	ldr	r1, [sp, #8]
 800d1e2:	4683      	mov	fp, r0
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	f7f3 fc9f 	bl	8000b28 <__aeabi_fsub>
 800d1ea:	4601      	mov	r1, r0
 800d1ec:	4650      	mov	r0, sl
 800d1ee:	f7f3 fc9b 	bl	8000b28 <__aeabi_fsub>
 800d1f2:	4641      	mov	r1, r8
 800d1f4:	f7f3 fda2 	bl	8000d3c <__aeabi_fmul>
 800d1f8:	4601      	mov	r1, r0
 800d1fa:	4658      	mov	r0, fp
 800d1fc:	f7f3 fc94 	bl	8000b28 <__aeabi_fsub>
 800d200:	9b04      	ldr	r3, [sp, #16]
 800d202:	4619      	mov	r1, r3
 800d204:	f7f3 fd9a 	bl	8000d3c <__aeabi_fmul>
 800d208:	4649      	mov	r1, r9
 800d20a:	4683      	mov	fp, r0
 800d20c:	4648      	mov	r0, r9
 800d20e:	f7f3 fd95 	bl	8000d3c <__aeabi_fmul>
 800d212:	4606      	mov	r6, r0
 800d214:	4959      	ldr	r1, [pc, #356]	; (800d37c <__ieee754_powf+0x498>)
 800d216:	f7f3 fd91 	bl	8000d3c <__aeabi_fmul>
 800d21a:	4959      	ldr	r1, [pc, #356]	; (800d380 <__ieee754_powf+0x49c>)
 800d21c:	f7f3 fc86 	bl	8000b2c <__addsf3>
 800d220:	4631      	mov	r1, r6
 800d222:	f7f3 fd8b 	bl	8000d3c <__aeabi_fmul>
 800d226:	4957      	ldr	r1, [pc, #348]	; (800d384 <__ieee754_powf+0x4a0>)
 800d228:	f7f3 fc80 	bl	8000b2c <__addsf3>
 800d22c:	4631      	mov	r1, r6
 800d22e:	f7f3 fd85 	bl	8000d3c <__aeabi_fmul>
 800d232:	4955      	ldr	r1, [pc, #340]	; (800d388 <__ieee754_powf+0x4a4>)
 800d234:	f7f3 fc7a 	bl	8000b2c <__addsf3>
 800d238:	4631      	mov	r1, r6
 800d23a:	f7f3 fd7f 	bl	8000d3c <__aeabi_fmul>
 800d23e:	4953      	ldr	r1, [pc, #332]	; (800d38c <__ieee754_powf+0x4a8>)
 800d240:	f7f3 fc74 	bl	8000b2c <__addsf3>
 800d244:	4631      	mov	r1, r6
 800d246:	f7f3 fd79 	bl	8000d3c <__aeabi_fmul>
 800d24a:	4951      	ldr	r1, [pc, #324]	; (800d390 <__ieee754_powf+0x4ac>)
 800d24c:	f7f3 fc6e 	bl	8000b2c <__addsf3>
 800d250:	4631      	mov	r1, r6
 800d252:	4682      	mov	sl, r0
 800d254:	4630      	mov	r0, r6
 800d256:	f7f3 fd71 	bl	8000d3c <__aeabi_fmul>
 800d25a:	4601      	mov	r1, r0
 800d25c:	4650      	mov	r0, sl
 800d25e:	f7f3 fd6d 	bl	8000d3c <__aeabi_fmul>
 800d262:	4606      	mov	r6, r0
 800d264:	4649      	mov	r1, r9
 800d266:	4640      	mov	r0, r8
 800d268:	f7f3 fc60 	bl	8000b2c <__addsf3>
 800d26c:	4659      	mov	r1, fp
 800d26e:	f7f3 fd65 	bl	8000d3c <__aeabi_fmul>
 800d272:	4631      	mov	r1, r6
 800d274:	f7f3 fc5a 	bl	8000b2c <__addsf3>
 800d278:	4641      	mov	r1, r8
 800d27a:	4682      	mov	sl, r0
 800d27c:	4640      	mov	r0, r8
 800d27e:	f7f3 fd5d 	bl	8000d3c <__aeabi_fmul>
 800d282:	4944      	ldr	r1, [pc, #272]	; (800d394 <__ieee754_powf+0x4b0>)
 800d284:	9002      	str	r0, [sp, #8]
 800d286:	f7f3 fc51 	bl	8000b2c <__addsf3>
 800d28a:	4651      	mov	r1, sl
 800d28c:	f7f3 fc4e 	bl	8000b2c <__addsf3>
 800d290:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 800d294:	f026 060f 	bic.w	r6, r6, #15
 800d298:	4631      	mov	r1, r6
 800d29a:	4640      	mov	r0, r8
 800d29c:	f7f3 fd4e 	bl	8000d3c <__aeabi_fmul>
 800d2a0:	493c      	ldr	r1, [pc, #240]	; (800d394 <__ieee754_powf+0x4b0>)
 800d2a2:	4680      	mov	r8, r0
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	f7f3 fc3f 	bl	8000b28 <__aeabi_fsub>
 800d2aa:	9b02      	ldr	r3, [sp, #8]
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	f7f3 fc3b 	bl	8000b28 <__aeabi_fsub>
 800d2b2:	4601      	mov	r1, r0
 800d2b4:	4650      	mov	r0, sl
 800d2b6:	f7f3 fc37 	bl	8000b28 <__aeabi_fsub>
 800d2ba:	4649      	mov	r1, r9
 800d2bc:	f7f3 fd3e 	bl	8000d3c <__aeabi_fmul>
 800d2c0:	4659      	mov	r1, fp
 800d2c2:	4681      	mov	r9, r0
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7f3 fd39 	bl	8000d3c <__aeabi_fmul>
 800d2ca:	4601      	mov	r1, r0
 800d2cc:	4648      	mov	r0, r9
 800d2ce:	f7f3 fc2d 	bl	8000b2c <__addsf3>
 800d2d2:	4682      	mov	sl, r0
 800d2d4:	4601      	mov	r1, r0
 800d2d6:	4640      	mov	r0, r8
 800d2d8:	f7f3 fc28 	bl	8000b2c <__addsf3>
 800d2dc:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800d2e0:	f029 090f 	bic.w	r9, r9, #15
 800d2e4:	492c      	ldr	r1, [pc, #176]	; (800d398 <__ieee754_powf+0x4b4>)
 800d2e6:	4648      	mov	r0, r9
 800d2e8:	f7f3 fd28 	bl	8000d3c <__aeabi_fmul>
 800d2ec:	4641      	mov	r1, r8
 800d2ee:	4606      	mov	r6, r0
 800d2f0:	4648      	mov	r0, r9
 800d2f2:	f7f3 fc19 	bl	8000b28 <__aeabi_fsub>
 800d2f6:	4601      	mov	r1, r0
 800d2f8:	4650      	mov	r0, sl
 800d2fa:	f7f3 fc15 	bl	8000b28 <__aeabi_fsub>
 800d2fe:	4927      	ldr	r1, [pc, #156]	; (800d39c <__ieee754_powf+0x4b8>)
 800d300:	f7f3 fd1c 	bl	8000d3c <__aeabi_fmul>
 800d304:	4926      	ldr	r1, [pc, #152]	; (800d3a0 <__ieee754_powf+0x4bc>)
 800d306:	4680      	mov	r8, r0
 800d308:	4648      	mov	r0, r9
 800d30a:	f7f3 fd17 	bl	8000d3c <__aeabi_fmul>
 800d30e:	4601      	mov	r1, r0
 800d310:	4640      	mov	r0, r8
 800d312:	f7f3 fc0b 	bl	8000b2c <__addsf3>
 800d316:	4b23      	ldr	r3, [pc, #140]	; (800d3a4 <__ieee754_powf+0x4c0>)
 800d318:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800d31c:	f7f3 fc06 	bl	8000b2c <__addsf3>
 800d320:	9a05      	ldr	r2, [sp, #20]
 800d322:	4680      	mov	r8, r0
 800d324:	4610      	mov	r0, r2
 800d326:	f7f3 fcb5 	bl	8000c94 <__aeabi_i2f>
 800d32a:	4681      	mov	r9, r0
 800d32c:	4b1e      	ldr	r3, [pc, #120]	; (800d3a8 <__ieee754_powf+0x4c4>)
 800d32e:	4641      	mov	r1, r8
 800d330:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800d334:	4630      	mov	r0, r6
 800d336:	f7f3 fbf9 	bl	8000b2c <__addsf3>
 800d33a:	4639      	mov	r1, r7
 800d33c:	f7f3 fbf6 	bl	8000b2c <__addsf3>
 800d340:	4649      	mov	r1, r9
 800d342:	f7f3 fbf3 	bl	8000b2c <__addsf3>
 800d346:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800d34a:	f02a 0a0f 	bic.w	sl, sl, #15
 800d34e:	4649      	mov	r1, r9
 800d350:	4650      	mov	r0, sl
 800d352:	f7f3 fbe9 	bl	8000b28 <__aeabi_fsub>
 800d356:	4639      	mov	r1, r7
 800d358:	f7f3 fbe6 	bl	8000b28 <__aeabi_fsub>
 800d35c:	4631      	mov	r1, r6
 800d35e:	f7f3 fbe3 	bl	8000b28 <__aeabi_fsub>
 800d362:	4601      	mov	r1, r0
 800d364:	4640      	mov	r0, r8
 800d366:	e6a4      	b.n	800d0b2 <__ieee754_powf+0x1ce>
 800d368:	2200      	movs	r2, #0
 800d36a:	e6fa      	b.n	800d162 <__ieee754_powf+0x27e>
 800d36c:	2701      	movs	r7, #1
 800d36e:	e70a      	b.n	800d186 <__ieee754_powf+0x2a2>
 800d370:	001cc471 	.word	0x001cc471
 800d374:	005db3d6 	.word	0x005db3d6
 800d378:	08017e80 	.word	0x08017e80
 800d37c:	3e53f142 	.word	0x3e53f142
 800d380:	3e6c3255 	.word	0x3e6c3255
 800d384:	3e8ba305 	.word	0x3e8ba305
 800d388:	3eaaaaab 	.word	0x3eaaaaab
 800d38c:	3edb6db7 	.word	0x3edb6db7
 800d390:	3f19999a 	.word	0x3f19999a
 800d394:	40400000 	.word	0x40400000
 800d398:	3f763800 	.word	0x3f763800
 800d39c:	3f76384f 	.word	0x3f76384f
 800d3a0:	369dc3a0 	.word	0x369dc3a0
 800d3a4:	08017e90 	.word	0x08017e90
 800d3a8:	08017e88 	.word	0x08017e88
 800d3ac:	f040 80c1 	bne.w	800d532 <__ieee754_powf+0x64e>
 800d3b0:	4966      	ldr	r1, [pc, #408]	; (800d54c <__ieee754_powf+0x668>)
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f7f3 fbba 	bl	8000b2c <__addsf3>
 800d3b8:	4639      	mov	r1, r7
 800d3ba:	4681      	mov	r9, r0
 800d3bc:	4650      	mov	r0, sl
 800d3be:	f7f3 fbb3 	bl	8000b28 <__aeabi_fsub>
 800d3c2:	4601      	mov	r1, r0
 800d3c4:	4648      	mov	r0, r9
 800d3c6:	f7f3 fe75 	bl	80010b4 <__aeabi_fcmpgt>
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	f47f aea5 	bne.w	800d11a <__ieee754_powf+0x236>
 800d3d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d3d4:	15e4      	asrs	r4, r4, #23
 800d3d6:	3c7e      	subs	r4, #126	; 0x7e
 800d3d8:	4123      	asrs	r3, r4
 800d3da:	4443      	add	r3, r8
 800d3dc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d3e0:	495b      	ldr	r1, [pc, #364]	; (800d550 <__ieee754_powf+0x66c>)
 800d3e2:	3a7f      	subs	r2, #127	; 0x7f
 800d3e4:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800d3e8:	4111      	asrs	r1, r2
 800d3ea:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800d3ee:	f1c2 0217 	rsb	r2, r2, #23
 800d3f2:	4114      	asrs	r4, r2
 800d3f4:	f1b8 0f00 	cmp.w	r8, #0
 800d3f8:	ea23 0101 	bic.w	r1, r3, r1
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	bfb8      	it	lt
 800d400:	4264      	neglt	r4, r4
 800d402:	f7f3 fb91 	bl	8000b28 <__aeabi_fsub>
 800d406:	4681      	mov	r9, r0
 800d408:	4631      	mov	r1, r6
 800d40a:	4648      	mov	r0, r9
 800d40c:	f7f3 fb8e 	bl	8000b2c <__addsf3>
 800d410:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800d414:	f027 070f 	bic.w	r7, r7, #15
 800d418:	494e      	ldr	r1, [pc, #312]	; (800d554 <__ieee754_powf+0x670>)
 800d41a:	4638      	mov	r0, r7
 800d41c:	f7f3 fc8e 	bl	8000d3c <__aeabi_fmul>
 800d420:	4649      	mov	r1, r9
 800d422:	4680      	mov	r8, r0
 800d424:	4638      	mov	r0, r7
 800d426:	f7f3 fb7f 	bl	8000b28 <__aeabi_fsub>
 800d42a:	4601      	mov	r1, r0
 800d42c:	4630      	mov	r0, r6
 800d42e:	f7f3 fb7b 	bl	8000b28 <__aeabi_fsub>
 800d432:	4949      	ldr	r1, [pc, #292]	; (800d558 <__ieee754_powf+0x674>)
 800d434:	f7f3 fc82 	bl	8000d3c <__aeabi_fmul>
 800d438:	4948      	ldr	r1, [pc, #288]	; (800d55c <__ieee754_powf+0x678>)
 800d43a:	4606      	mov	r6, r0
 800d43c:	4638      	mov	r0, r7
 800d43e:	f7f3 fc7d 	bl	8000d3c <__aeabi_fmul>
 800d442:	4601      	mov	r1, r0
 800d444:	4630      	mov	r0, r6
 800d446:	f7f3 fb71 	bl	8000b2c <__addsf3>
 800d44a:	4607      	mov	r7, r0
 800d44c:	4601      	mov	r1, r0
 800d44e:	4640      	mov	r0, r8
 800d450:	f7f3 fb6c 	bl	8000b2c <__addsf3>
 800d454:	4641      	mov	r1, r8
 800d456:	4606      	mov	r6, r0
 800d458:	f7f3 fb66 	bl	8000b28 <__aeabi_fsub>
 800d45c:	4601      	mov	r1, r0
 800d45e:	4638      	mov	r0, r7
 800d460:	f7f3 fb62 	bl	8000b28 <__aeabi_fsub>
 800d464:	4631      	mov	r1, r6
 800d466:	4680      	mov	r8, r0
 800d468:	4630      	mov	r0, r6
 800d46a:	f7f3 fc67 	bl	8000d3c <__aeabi_fmul>
 800d46e:	4607      	mov	r7, r0
 800d470:	493b      	ldr	r1, [pc, #236]	; (800d560 <__ieee754_powf+0x67c>)
 800d472:	f7f3 fc63 	bl	8000d3c <__aeabi_fmul>
 800d476:	493b      	ldr	r1, [pc, #236]	; (800d564 <__ieee754_powf+0x680>)
 800d478:	f7f3 fb56 	bl	8000b28 <__aeabi_fsub>
 800d47c:	4639      	mov	r1, r7
 800d47e:	f7f3 fc5d 	bl	8000d3c <__aeabi_fmul>
 800d482:	4939      	ldr	r1, [pc, #228]	; (800d568 <__ieee754_powf+0x684>)
 800d484:	f7f3 fb52 	bl	8000b2c <__addsf3>
 800d488:	4639      	mov	r1, r7
 800d48a:	f7f3 fc57 	bl	8000d3c <__aeabi_fmul>
 800d48e:	4937      	ldr	r1, [pc, #220]	; (800d56c <__ieee754_powf+0x688>)
 800d490:	f7f3 fb4a 	bl	8000b28 <__aeabi_fsub>
 800d494:	4639      	mov	r1, r7
 800d496:	f7f3 fc51 	bl	8000d3c <__aeabi_fmul>
 800d49a:	4935      	ldr	r1, [pc, #212]	; (800d570 <__ieee754_powf+0x68c>)
 800d49c:	f7f3 fb46 	bl	8000b2c <__addsf3>
 800d4a0:	4639      	mov	r1, r7
 800d4a2:	f7f3 fc4b 	bl	8000d3c <__aeabi_fmul>
 800d4a6:	4601      	mov	r1, r0
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	f7f3 fb3d 	bl	8000b28 <__aeabi_fsub>
 800d4ae:	4607      	mov	r7, r0
 800d4b0:	4601      	mov	r1, r0
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f7f3 fc42 	bl	8000d3c <__aeabi_fmul>
 800d4b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d4bc:	4681      	mov	r9, r0
 800d4be:	4638      	mov	r0, r7
 800d4c0:	f7f3 fb32 	bl	8000b28 <__aeabi_fsub>
 800d4c4:	4601      	mov	r1, r0
 800d4c6:	4648      	mov	r0, r9
 800d4c8:	f7f3 fcec 	bl	8000ea4 <__aeabi_fdiv>
 800d4cc:	4641      	mov	r1, r8
 800d4ce:	4607      	mov	r7, r0
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f7f3 fc33 	bl	8000d3c <__aeabi_fmul>
 800d4d6:	4641      	mov	r1, r8
 800d4d8:	f7f3 fb28 	bl	8000b2c <__addsf3>
 800d4dc:	4601      	mov	r1, r0
 800d4de:	4638      	mov	r0, r7
 800d4e0:	f7f3 fb22 	bl	8000b28 <__aeabi_fsub>
 800d4e4:	4631      	mov	r1, r6
 800d4e6:	f7f3 fb1f 	bl	8000b28 <__aeabi_fsub>
 800d4ea:	4601      	mov	r1, r0
 800d4ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d4f0:	f7f3 fb1a 	bl	8000b28 <__aeabi_fsub>
 800d4f4:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800d4f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d4fc:	da1f      	bge.n	800d53e <__ieee754_powf+0x65a>
 800d4fe:	4621      	mov	r1, r4
 800d500:	f000 fab4 	bl	800da6c <scalbnf>
 800d504:	4629      	mov	r1, r5
 800d506:	e54a      	b.n	800cf9e <__ieee754_powf+0xba>
 800d508:	4b1a      	ldr	r3, [pc, #104]	; (800d574 <__ieee754_powf+0x690>)
 800d50a:	429c      	cmp	r4, r3
 800d50c:	dd05      	ble.n	800d51a <__ieee754_powf+0x636>
 800d50e:	491a      	ldr	r1, [pc, #104]	; (800d578 <__ieee754_powf+0x694>)
 800d510:	4628      	mov	r0, r5
 800d512:	f7f3 fc13 	bl	8000d3c <__aeabi_fmul>
 800d516:	4918      	ldr	r1, [pc, #96]	; (800d578 <__ieee754_powf+0x694>)
 800d518:	e541      	b.n	800cf9e <__ieee754_powf+0xba>
 800d51a:	d10a      	bne.n	800d532 <__ieee754_powf+0x64e>
 800d51c:	4639      	mov	r1, r7
 800d51e:	f7f3 fb03 	bl	8000b28 <__aeabi_fsub>
 800d522:	4601      	mov	r1, r0
 800d524:	4630      	mov	r0, r6
 800d526:	f7f3 fdb1 	bl	800108c <__aeabi_fcmple>
 800d52a:	2800      	cmp	r0, #0
 800d52c:	f43f af50 	beq.w	800d3d0 <__ieee754_powf+0x4ec>
 800d530:	e7ed      	b.n	800d50e <__ieee754_powf+0x62a>
 800d532:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800d536:	f73f af4b 	bgt.w	800d3d0 <__ieee754_powf+0x4ec>
 800d53a:	2400      	movs	r4, #0
 800d53c:	e764      	b.n	800d408 <__ieee754_powf+0x524>
 800d53e:	4618      	mov	r0, r3
 800d540:	e7e0      	b.n	800d504 <__ieee754_powf+0x620>
 800d542:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d546:	e517      	b.n	800cf78 <__ieee754_powf+0x94>
 800d548:	9901      	ldr	r1, [sp, #4]
 800d54a:	e515      	b.n	800cf78 <__ieee754_powf+0x94>
 800d54c:	3338aa3c 	.word	0x3338aa3c
 800d550:	007fffff 	.word	0x007fffff
 800d554:	3f317200 	.word	0x3f317200
 800d558:	3f317218 	.word	0x3f317218
 800d55c:	35bfbe8c 	.word	0x35bfbe8c
 800d560:	3331bb4c 	.word	0x3331bb4c
 800d564:	35ddea0e 	.word	0x35ddea0e
 800d568:	388ab355 	.word	0x388ab355
 800d56c:	3b360b61 	.word	0x3b360b61
 800d570:	3e2aaaab 	.word	0x3e2aaaab
 800d574:	43160000 	.word	0x43160000
 800d578:	0da24260 	.word	0x0da24260

0800d57c <__ieee754_sqrtf>:
 800d57c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d580:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d584:	b570      	push	{r4, r5, r6, lr}
 800d586:	4603      	mov	r3, r0
 800d588:	4604      	mov	r4, r0
 800d58a:	d309      	bcc.n	800d5a0 <__ieee754_sqrtf+0x24>
 800d58c:	4601      	mov	r1, r0
 800d58e:	f7f3 fbd5 	bl	8000d3c <__aeabi_fmul>
 800d592:	4601      	mov	r1, r0
 800d594:	4620      	mov	r0, r4
 800d596:	f7f3 fac9 	bl	8000b2c <__addsf3>
 800d59a:	4604      	mov	r4, r0
 800d59c:	4620      	mov	r0, r4
 800d59e:	bd70      	pop	{r4, r5, r6, pc}
 800d5a0:	2a00      	cmp	r2, #0
 800d5a2:	d0fb      	beq.n	800d59c <__ieee754_sqrtf+0x20>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	da06      	bge.n	800d5b6 <__ieee754_sqrtf+0x3a>
 800d5a8:	4601      	mov	r1, r0
 800d5aa:	f7f3 fabd 	bl	8000b28 <__aeabi_fsub>
 800d5ae:	4601      	mov	r1, r0
 800d5b0:	f7f3 fc78 	bl	8000ea4 <__aeabi_fdiv>
 800d5b4:	e7f1      	b.n	800d59a <__ieee754_sqrtf+0x1e>
 800d5b6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800d5ba:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800d5be:	d204      	bcs.n	800d5ca <__ieee754_sqrtf+0x4e>
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	0219      	lsls	r1, r3, #8
 800d5c4:	d529      	bpl.n	800d61a <__ieee754_sqrtf+0x9e>
 800d5c6:	3a01      	subs	r2, #1
 800d5c8:	1aa4      	subs	r4, r4, r2
 800d5ca:	3c7f      	subs	r4, #127	; 0x7f
 800d5cc:	07e2      	lsls	r2, r4, #31
 800d5ce:	f04f 0200 	mov.w	r2, #0
 800d5d2:	ea4f 0164 	mov.w	r1, r4, asr #1
 800d5d6:	4616      	mov	r6, r2
 800d5d8:	f04f 0419 	mov.w	r4, #25
 800d5dc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800d5e0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d5e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d5e8:	bf48      	it	mi
 800d5ea:	005b      	lslmi	r3, r3, #1
 800d5ec:	005b      	lsls	r3, r3, #1
 800d5ee:	1835      	adds	r5, r6, r0
 800d5f0:	429d      	cmp	r5, r3
 800d5f2:	bfde      	ittt	le
 800d5f4:	182e      	addle	r6, r5, r0
 800d5f6:	1b5b      	suble	r3, r3, r5
 800d5f8:	1812      	addle	r2, r2, r0
 800d5fa:	3c01      	subs	r4, #1
 800d5fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d600:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d604:	d1f3      	bne.n	800d5ee <__ieee754_sqrtf+0x72>
 800d606:	b113      	cbz	r3, 800d60e <__ieee754_sqrtf+0x92>
 800d608:	3201      	adds	r2, #1
 800d60a:	f022 0201 	bic.w	r2, r2, #1
 800d60e:	1054      	asrs	r4, r2, #1
 800d610:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800d614:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800d618:	e7c0      	b.n	800d59c <__ieee754_sqrtf+0x20>
 800d61a:	005b      	lsls	r3, r3, #1
 800d61c:	3201      	adds	r2, #1
 800d61e:	e7d0      	b.n	800d5c2 <__ieee754_sqrtf+0x46>

0800d620 <fabs>:
 800d620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d624:	4770      	bx	lr

0800d626 <finite>:
 800d626:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800d62a:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800d62e:	0fc0      	lsrs	r0, r0, #31
 800d630:	4770      	bx	lr

0800d632 <matherr>:
 800d632:	2000      	movs	r0, #0
 800d634:	4770      	bx	lr
	...

0800d638 <nan>:
 800d638:	2000      	movs	r0, #0
 800d63a:	4901      	ldr	r1, [pc, #4]	; (800d640 <nan+0x8>)
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	7ff80000 	.word	0x7ff80000

0800d644 <rint>:
 800d644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d646:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 800d64a:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 800d64e:	2f13      	cmp	r7, #19
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	4684      	mov	ip, r0
 800d656:	460c      	mov	r4, r1
 800d658:	4605      	mov	r5, r0
 800d65a:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800d65e:	dc56      	bgt.n	800d70e <rint+0xca>
 800d660:	2f00      	cmp	r7, #0
 800d662:	da29      	bge.n	800d6b8 <rint+0x74>
 800d664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d668:	4301      	orrs	r1, r0
 800d66a:	d021      	beq.n	800d6b0 <rint+0x6c>
 800d66c:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800d670:	4305      	orrs	r5, r0
 800d672:	426b      	negs	r3, r5
 800d674:	432b      	orrs	r3, r5
 800d676:	0b1b      	lsrs	r3, r3, #12
 800d678:	0c64      	lsrs	r4, r4, #17
 800d67a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d67e:	0464      	lsls	r4, r4, #17
 800d680:	ea43 0104 	orr.w	r1, r3, r4
 800d684:	4b31      	ldr	r3, [pc, #196]	; (800d74c <rint+0x108>)
 800d686:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d68a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d68e:	4622      	mov	r2, r4
 800d690:	462b      	mov	r3, r5
 800d692:	f7f2 fd6b 	bl	800016c <__adddf3>
 800d696:	e9cd 0100 	strd	r0, r1, [sp]
 800d69a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d69e:	4622      	mov	r2, r4
 800d6a0:	462b      	mov	r3, r5
 800d6a2:	f7f2 fd61 	bl	8000168 <__aeabi_dsub>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d6ac:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 800d6b0:	4610      	mov	r0, r2
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	b003      	add	sp, #12
 800d6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6b8:	4925      	ldr	r1, [pc, #148]	; (800d750 <rint+0x10c>)
 800d6ba:	4139      	asrs	r1, r7
 800d6bc:	ea03 0001 	and.w	r0, r3, r1
 800d6c0:	4310      	orrs	r0, r2
 800d6c2:	d0f5      	beq.n	800d6b0 <rint+0x6c>
 800d6c4:	084b      	lsrs	r3, r1, #1
 800d6c6:	ea04 0203 	and.w	r2, r4, r3
 800d6ca:	ea52 050c 	orrs.w	r5, r2, ip
 800d6ce:	d00a      	beq.n	800d6e6 <rint+0xa2>
 800d6d0:	ea24 0303 	bic.w	r3, r4, r3
 800d6d4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800d6d8:	2f13      	cmp	r7, #19
 800d6da:	bf0c      	ite	eq
 800d6dc:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800d6e0:	2500      	movne	r5, #0
 800d6e2:	413c      	asrs	r4, r7
 800d6e4:	431c      	orrs	r4, r3
 800d6e6:	4b19      	ldr	r3, [pc, #100]	; (800d74c <rint+0x108>)
 800d6e8:	4621      	mov	r1, r4
 800d6ea:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	e9d6 4500 	ldrd	r4, r5, [r6]
 800d6f4:	4622      	mov	r2, r4
 800d6f6:	462b      	mov	r3, r5
 800d6f8:	f7f2 fd38 	bl	800016c <__adddf3>
 800d6fc:	e9cd 0100 	strd	r0, r1, [sp]
 800d700:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d704:	4622      	mov	r2, r4
 800d706:	462b      	mov	r3, r5
 800d708:	f7f2 fd2e 	bl	8000168 <__aeabi_dsub>
 800d70c:	e006      	b.n	800d71c <rint+0xd8>
 800d70e:	2f33      	cmp	r7, #51	; 0x33
 800d710:	dd07      	ble.n	800d722 <rint+0xde>
 800d712:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800d716:	d1cb      	bne.n	800d6b0 <rint+0x6c>
 800d718:	f7f2 fd28 	bl	800016c <__adddf3>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	e7c6      	b.n	800d6b0 <rint+0x6c>
 800d722:	f04f 31ff 	mov.w	r1, #4294967295
 800d726:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 800d72a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d72e:	4208      	tst	r0, r1
 800d730:	d0be      	beq.n	800d6b0 <rint+0x6c>
 800d732:	084b      	lsrs	r3, r1, #1
 800d734:	4218      	tst	r0, r3
 800d736:	bf1f      	itttt	ne
 800d738:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800d73c:	ea20 0303 	bicne.w	r3, r0, r3
 800d740:	fa45 fe0e 	asrne.w	lr, r5, lr
 800d744:	ea4e 0503 	orrne.w	r5, lr, r3
 800d748:	e7cd      	b.n	800d6e6 <rint+0xa2>
 800d74a:	bf00      	nop
 800d74c:	08017e98 	.word	0x08017e98
 800d750:	000fffff 	.word	0x000fffff
 800d754:	00000000 	.word	0x00000000

0800d758 <scalbn>:
 800d758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75a:	4616      	mov	r6, r2
 800d75c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d760:	4604      	mov	r4, r0
 800d762:	460d      	mov	r5, r1
 800d764:	460b      	mov	r3, r1
 800d766:	b98a      	cbnz	r2, 800d78c <scalbn+0x34>
 800d768:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d76c:	4303      	orrs	r3, r0
 800d76e:	d035      	beq.n	800d7dc <scalbn+0x84>
 800d770:	2200      	movs	r2, #0
 800d772:	4b2d      	ldr	r3, [pc, #180]	; (800d828 <scalbn+0xd0>)
 800d774:	f7f2 feac 	bl	80004d0 <__aeabi_dmul>
 800d778:	4a2c      	ldr	r2, [pc, #176]	; (800d82c <scalbn+0xd4>)
 800d77a:	4604      	mov	r4, r0
 800d77c:	4296      	cmp	r6, r2
 800d77e:	460d      	mov	r5, r1
 800d780:	460b      	mov	r3, r1
 800d782:	da0e      	bge.n	800d7a2 <scalbn+0x4a>
 800d784:	a324      	add	r3, pc, #144	; (adr r3, 800d818 <scalbn+0xc0>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	e01c      	b.n	800d7c6 <scalbn+0x6e>
 800d78c:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800d790:	42ba      	cmp	r2, r7
 800d792:	d109      	bne.n	800d7a8 <scalbn+0x50>
 800d794:	4602      	mov	r2, r0
 800d796:	460b      	mov	r3, r1
 800d798:	f7f2 fce8 	bl	800016c <__adddf3>
 800d79c:	4604      	mov	r4, r0
 800d79e:	460d      	mov	r5, r1
 800d7a0:	e01c      	b.n	800d7dc <scalbn+0x84>
 800d7a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d7a6:	3a36      	subs	r2, #54	; 0x36
 800d7a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d7ac:	4432      	add	r2, r6
 800d7ae:	428a      	cmp	r2, r1
 800d7b0:	dd0c      	ble.n	800d7cc <scalbn+0x74>
 800d7b2:	4622      	mov	r2, r4
 800d7b4:	462b      	mov	r3, r5
 800d7b6:	a11a      	add	r1, pc, #104	; (adr r1, 800d820 <scalbn+0xc8>)
 800d7b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7bc:	f000 f9a2 	bl	800db04 <copysign>
 800d7c0:	a317      	add	r3, pc, #92	; (adr r3, 800d820 <scalbn+0xc8>)
 800d7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c6:	f7f2 fe83 	bl	80004d0 <__aeabi_dmul>
 800d7ca:	e7e7      	b.n	800d79c <scalbn+0x44>
 800d7cc:	2a00      	cmp	r2, #0
 800d7ce:	dd08      	ble.n	800d7e2 <scalbn+0x8a>
 800d7d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d7d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d7d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d7dc:	4620      	mov	r0, r4
 800d7de:	4629      	mov	r1, r5
 800d7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7e2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d7e6:	da0b      	bge.n	800d800 <scalbn+0xa8>
 800d7e8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d7ec:	429e      	cmp	r6, r3
 800d7ee:	4622      	mov	r2, r4
 800d7f0:	462b      	mov	r3, r5
 800d7f2:	dce0      	bgt.n	800d7b6 <scalbn+0x5e>
 800d7f4:	a108      	add	r1, pc, #32	; (adr r1, 800d818 <scalbn+0xc0>)
 800d7f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7fa:	f000 f983 	bl	800db04 <copysign>
 800d7fe:	e7c1      	b.n	800d784 <scalbn+0x2c>
 800d800:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d804:	3236      	adds	r2, #54	; 0x36
 800d806:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d80a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d80e:	4620      	mov	r0, r4
 800d810:	4629      	mov	r1, r5
 800d812:	2200      	movs	r2, #0
 800d814:	4b06      	ldr	r3, [pc, #24]	; (800d830 <scalbn+0xd8>)
 800d816:	e7d6      	b.n	800d7c6 <scalbn+0x6e>
 800d818:	c2f8f359 	.word	0xc2f8f359
 800d81c:	01a56e1f 	.word	0x01a56e1f
 800d820:	8800759c 	.word	0x8800759c
 800d824:	7e37e43c 	.word	0x7e37e43c
 800d828:	43500000 	.word	0x43500000
 800d82c:	ffff3cb0 	.word	0xffff3cb0
 800d830:	3c900000 	.word	0x3c900000

0800d834 <atanf>:
 800d834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d838:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800d83c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800d840:	4604      	mov	r4, r0
 800d842:	4607      	mov	r7, r0
 800d844:	db0e      	blt.n	800d864 <atanf+0x30>
 800d846:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d84a:	dd04      	ble.n	800d856 <atanf+0x22>
 800d84c:	4601      	mov	r1, r0
 800d84e:	f7f3 f96d 	bl	8000b2c <__addsf3>
 800d852:	4604      	mov	r4, r0
 800d854:	e003      	b.n	800d85e <atanf+0x2a>
 800d856:	2800      	cmp	r0, #0
 800d858:	f300 80d2 	bgt.w	800da00 <atanf+0x1cc>
 800d85c:	4c69      	ldr	r4, [pc, #420]	; (800da04 <atanf+0x1d0>)
 800d85e:	4620      	mov	r0, r4
 800d860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d864:	4b68      	ldr	r3, [pc, #416]	; (800da08 <atanf+0x1d4>)
 800d866:	429d      	cmp	r5, r3
 800d868:	dc0e      	bgt.n	800d888 <atanf+0x54>
 800d86a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800d86e:	da08      	bge.n	800d882 <atanf+0x4e>
 800d870:	4966      	ldr	r1, [pc, #408]	; (800da0c <atanf+0x1d8>)
 800d872:	f7f3 f95b 	bl	8000b2c <__addsf3>
 800d876:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d87a:	f7f3 fc1b 	bl	80010b4 <__aeabi_fcmpgt>
 800d87e:	2800      	cmp	r0, #0
 800d880:	d1ed      	bne.n	800d85e <atanf+0x2a>
 800d882:	f04f 36ff 	mov.w	r6, #4294967295
 800d886:	e01c      	b.n	800d8c2 <atanf+0x8e>
 800d888:	f000 f8e4 	bl	800da54 <fabsf>
 800d88c:	4b60      	ldr	r3, [pc, #384]	; (800da10 <atanf+0x1dc>)
 800d88e:	4604      	mov	r4, r0
 800d890:	429d      	cmp	r5, r3
 800d892:	dc7c      	bgt.n	800d98e <atanf+0x15a>
 800d894:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d898:	429d      	cmp	r5, r3
 800d89a:	dc67      	bgt.n	800d96c <atanf+0x138>
 800d89c:	4601      	mov	r1, r0
 800d89e:	f7f3 f945 	bl	8000b2c <__addsf3>
 800d8a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d8a6:	f7f3 f93f 	bl	8000b28 <__aeabi_fsub>
 800d8aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d8ae:	4605      	mov	r5, r0
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f7f3 f93b 	bl	8000b2c <__addsf3>
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	f7f3 faf3 	bl	8000ea4 <__aeabi_fdiv>
 800d8be:	2600      	movs	r6, #0
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	4621      	mov	r1, r4
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f7f3 fa39 	bl	8000d3c <__aeabi_fmul>
 800d8ca:	4601      	mov	r1, r0
 800d8cc:	4680      	mov	r8, r0
 800d8ce:	f7f3 fa35 	bl	8000d3c <__aeabi_fmul>
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	494f      	ldr	r1, [pc, #316]	; (800da14 <atanf+0x1e0>)
 800d8d6:	f7f3 fa31 	bl	8000d3c <__aeabi_fmul>
 800d8da:	494f      	ldr	r1, [pc, #316]	; (800da18 <atanf+0x1e4>)
 800d8dc:	f7f3 f926 	bl	8000b2c <__addsf3>
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	f7f3 fa2b 	bl	8000d3c <__aeabi_fmul>
 800d8e6:	494d      	ldr	r1, [pc, #308]	; (800da1c <atanf+0x1e8>)
 800d8e8:	f7f3 f920 	bl	8000b2c <__addsf3>
 800d8ec:	4629      	mov	r1, r5
 800d8ee:	f7f3 fa25 	bl	8000d3c <__aeabi_fmul>
 800d8f2:	494b      	ldr	r1, [pc, #300]	; (800da20 <atanf+0x1ec>)
 800d8f4:	f7f3 f91a 	bl	8000b2c <__addsf3>
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	f7f3 fa1f 	bl	8000d3c <__aeabi_fmul>
 800d8fe:	4949      	ldr	r1, [pc, #292]	; (800da24 <atanf+0x1f0>)
 800d900:	f7f3 f914 	bl	8000b2c <__addsf3>
 800d904:	4629      	mov	r1, r5
 800d906:	f7f3 fa19 	bl	8000d3c <__aeabi_fmul>
 800d90a:	4947      	ldr	r1, [pc, #284]	; (800da28 <atanf+0x1f4>)
 800d90c:	f7f3 f90e 	bl	8000b2c <__addsf3>
 800d910:	4641      	mov	r1, r8
 800d912:	f7f3 fa13 	bl	8000d3c <__aeabi_fmul>
 800d916:	4945      	ldr	r1, [pc, #276]	; (800da2c <atanf+0x1f8>)
 800d918:	4680      	mov	r8, r0
 800d91a:	4628      	mov	r0, r5
 800d91c:	f7f3 fa0e 	bl	8000d3c <__aeabi_fmul>
 800d920:	4943      	ldr	r1, [pc, #268]	; (800da30 <atanf+0x1fc>)
 800d922:	f7f3 f901 	bl	8000b28 <__aeabi_fsub>
 800d926:	4629      	mov	r1, r5
 800d928:	f7f3 fa08 	bl	8000d3c <__aeabi_fmul>
 800d92c:	4941      	ldr	r1, [pc, #260]	; (800da34 <atanf+0x200>)
 800d92e:	f7f3 f8fb 	bl	8000b28 <__aeabi_fsub>
 800d932:	4629      	mov	r1, r5
 800d934:	f7f3 fa02 	bl	8000d3c <__aeabi_fmul>
 800d938:	493f      	ldr	r1, [pc, #252]	; (800da38 <atanf+0x204>)
 800d93a:	f7f3 f8f5 	bl	8000b28 <__aeabi_fsub>
 800d93e:	4629      	mov	r1, r5
 800d940:	f7f3 f9fc 	bl	8000d3c <__aeabi_fmul>
 800d944:	493d      	ldr	r1, [pc, #244]	; (800da3c <atanf+0x208>)
 800d946:	f7f3 f8ef 	bl	8000b28 <__aeabi_fsub>
 800d94a:	4629      	mov	r1, r5
 800d94c:	f7f3 f9f6 	bl	8000d3c <__aeabi_fmul>
 800d950:	1c73      	adds	r3, r6, #1
 800d952:	4601      	mov	r1, r0
 800d954:	4640      	mov	r0, r8
 800d956:	d139      	bne.n	800d9cc <atanf+0x198>
 800d958:	f7f3 f8e8 	bl	8000b2c <__addsf3>
 800d95c:	4621      	mov	r1, r4
 800d95e:	f7f3 f9ed 	bl	8000d3c <__aeabi_fmul>
 800d962:	4601      	mov	r1, r0
 800d964:	4620      	mov	r0, r4
 800d966:	f7f3 f8df 	bl	8000b28 <__aeabi_fsub>
 800d96a:	e772      	b.n	800d852 <atanf+0x1e>
 800d96c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d970:	f7f3 f8da 	bl	8000b28 <__aeabi_fsub>
 800d974:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d978:	4605      	mov	r5, r0
 800d97a:	4620      	mov	r0, r4
 800d97c:	f7f3 f8d6 	bl	8000b2c <__addsf3>
 800d980:	4601      	mov	r1, r0
 800d982:	4628      	mov	r0, r5
 800d984:	f7f3 fa8e 	bl	8000ea4 <__aeabi_fdiv>
 800d988:	2601      	movs	r6, #1
 800d98a:	4604      	mov	r4, r0
 800d98c:	e799      	b.n	800d8c2 <atanf+0x8e>
 800d98e:	4b2c      	ldr	r3, [pc, #176]	; (800da40 <atanf+0x20c>)
 800d990:	429d      	cmp	r5, r3
 800d992:	dc14      	bgt.n	800d9be <atanf+0x18a>
 800d994:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d998:	f7f3 f8c6 	bl	8000b28 <__aeabi_fsub>
 800d99c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d9a0:	4605      	mov	r5, r0
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f7f3 f9ca 	bl	8000d3c <__aeabi_fmul>
 800d9a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d9ac:	f7f3 f8be 	bl	8000b2c <__addsf3>
 800d9b0:	4601      	mov	r1, r0
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	f7f3 fa76 	bl	8000ea4 <__aeabi_fdiv>
 800d9b8:	2602      	movs	r6, #2
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	e781      	b.n	800d8c2 <atanf+0x8e>
 800d9be:	4601      	mov	r1, r0
 800d9c0:	4820      	ldr	r0, [pc, #128]	; (800da44 <atanf+0x210>)
 800d9c2:	f7f3 fa6f 	bl	8000ea4 <__aeabi_fdiv>
 800d9c6:	2603      	movs	r6, #3
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	e77a      	b.n	800d8c2 <atanf+0x8e>
 800d9cc:	f7f3 f8ae 	bl	8000b2c <__addsf3>
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	f7f3 f9b3 	bl	8000d3c <__aeabi_fmul>
 800d9d6:	4b1c      	ldr	r3, [pc, #112]	; (800da48 <atanf+0x214>)
 800d9d8:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800d9dc:	f7f3 f8a4 	bl	8000b28 <__aeabi_fsub>
 800d9e0:	4621      	mov	r1, r4
 800d9e2:	f7f3 f8a1 	bl	8000b28 <__aeabi_fsub>
 800d9e6:	4b19      	ldr	r3, [pc, #100]	; (800da4c <atanf+0x218>)
 800d9e8:	4601      	mov	r1, r0
 800d9ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d9ee:	f7f3 f89b 	bl	8000b28 <__aeabi_fsub>
 800d9f2:	2f00      	cmp	r7, #0
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	f6bf af32 	bge.w	800d85e <atanf+0x2a>
 800d9fa:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800d9fe:	e72e      	b.n	800d85e <atanf+0x2a>
 800da00:	4c13      	ldr	r4, [pc, #76]	; (800da50 <atanf+0x21c>)
 800da02:	e72c      	b.n	800d85e <atanf+0x2a>
 800da04:	bfc90fdb 	.word	0xbfc90fdb
 800da08:	3edfffff 	.word	0x3edfffff
 800da0c:	7149f2ca 	.word	0x7149f2ca
 800da10:	3f97ffff 	.word	0x3f97ffff
 800da14:	3c8569d7 	.word	0x3c8569d7
 800da18:	3d4bda59 	.word	0x3d4bda59
 800da1c:	3d886b35 	.word	0x3d886b35
 800da20:	3dba2e6e 	.word	0x3dba2e6e
 800da24:	3e124925 	.word	0x3e124925
 800da28:	3eaaaaab 	.word	0x3eaaaaab
 800da2c:	bd15a221 	.word	0xbd15a221
 800da30:	3d6ef16b 	.word	0x3d6ef16b
 800da34:	3d9d8795 	.word	0x3d9d8795
 800da38:	3de38e38 	.word	0x3de38e38
 800da3c:	3e4ccccd 	.word	0x3e4ccccd
 800da40:	401bffff 	.word	0x401bffff
 800da44:	bf800000 	.word	0xbf800000
 800da48:	08017eb8 	.word	0x08017eb8
 800da4c:	08017ea8 	.word	0x08017ea8
 800da50:	3fc90fdb 	.word	0x3fc90fdb

0800da54 <fabsf>:
 800da54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800da58:	4770      	bx	lr

0800da5a <finitef>:
 800da5a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800da5e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800da62:	bfac      	ite	ge
 800da64:	2000      	movge	r0, #0
 800da66:	2001      	movlt	r0, #1
 800da68:	4770      	bx	lr
	...

0800da6c <scalbnf>:
 800da6c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800da70:	b510      	push	{r4, lr}
 800da72:	4602      	mov	r2, r0
 800da74:	460c      	mov	r4, r1
 800da76:	d028      	beq.n	800daca <scalbnf+0x5e>
 800da78:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800da7c:	d304      	bcc.n	800da88 <scalbnf+0x1c>
 800da7e:	4601      	mov	r1, r0
 800da80:	f7f3 f854 	bl	8000b2c <__addsf3>
 800da84:	4602      	mov	r2, r0
 800da86:	e020      	b.n	800daca <scalbnf+0x5e>
 800da88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800da8c:	d215      	bcs.n	800daba <scalbnf+0x4e>
 800da8e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800da92:	f7f3 f953 	bl	8000d3c <__aeabi_fmul>
 800da96:	4b18      	ldr	r3, [pc, #96]	; (800daf8 <scalbnf+0x8c>)
 800da98:	4602      	mov	r2, r0
 800da9a:	429c      	cmp	r4, r3
 800da9c:	db22      	blt.n	800dae4 <scalbnf+0x78>
 800da9e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800daa2:	3b19      	subs	r3, #25
 800daa4:	4423      	add	r3, r4
 800daa6:	2bfe      	cmp	r3, #254	; 0xfe
 800daa8:	dd09      	ble.n	800dabe <scalbnf+0x52>
 800daaa:	4611      	mov	r1, r2
 800daac:	4813      	ldr	r0, [pc, #76]	; (800dafc <scalbnf+0x90>)
 800daae:	f000 f830 	bl	800db12 <copysignf>
 800dab2:	4912      	ldr	r1, [pc, #72]	; (800dafc <scalbnf+0x90>)
 800dab4:	f7f3 f942 	bl	8000d3c <__aeabi_fmul>
 800dab8:	e7e4      	b.n	800da84 <scalbnf+0x18>
 800daba:	0ddb      	lsrs	r3, r3, #23
 800dabc:	e7f2      	b.n	800daa4 <scalbnf+0x38>
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	dd05      	ble.n	800dace <scalbnf+0x62>
 800dac2:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800dac6:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800daca:	4610      	mov	r0, r2
 800dacc:	bd10      	pop	{r4, pc}
 800dace:	f113 0f16 	cmn.w	r3, #22
 800dad2:	da09      	bge.n	800dae8 <scalbnf+0x7c>
 800dad4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dad8:	429c      	cmp	r4, r3
 800dada:	4611      	mov	r1, r2
 800dadc:	dce6      	bgt.n	800daac <scalbnf+0x40>
 800dade:	4808      	ldr	r0, [pc, #32]	; (800db00 <scalbnf+0x94>)
 800dae0:	f000 f817 	bl	800db12 <copysignf>
 800dae4:	4906      	ldr	r1, [pc, #24]	; (800db00 <scalbnf+0x94>)
 800dae6:	e7e5      	b.n	800dab4 <scalbnf+0x48>
 800dae8:	3319      	adds	r3, #25
 800daea:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800daee:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800daf2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800daf6:	e7dd      	b.n	800dab4 <scalbnf+0x48>
 800daf8:	ffff3cb0 	.word	0xffff3cb0
 800dafc:	7149f2ca 	.word	0x7149f2ca
 800db00:	0da24260 	.word	0x0da24260

0800db04 <copysign>:
 800db04:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800db08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db0c:	ea42 0103 	orr.w	r1, r2, r3
 800db10:	4770      	bx	lr

0800db12 <copysignf>:
 800db12:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800db16:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800db1a:	4308      	orrs	r0, r1
 800db1c:	4770      	bx	lr
	...

0800db20 <__errno>:
 800db20:	4b01      	ldr	r3, [pc, #4]	; (800db28 <__errno+0x8>)
 800db22:	6818      	ldr	r0, [r3, #0]
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	20000414 	.word	0x20000414

0800db2c <_sbrk>:
 800db2c:	4b04      	ldr	r3, [pc, #16]	; (800db40 <_sbrk+0x14>)
 800db2e:	4602      	mov	r2, r0
 800db30:	6819      	ldr	r1, [r3, #0]
 800db32:	b909      	cbnz	r1, 800db38 <_sbrk+0xc>
 800db34:	4903      	ldr	r1, [pc, #12]	; (800db44 <_sbrk+0x18>)
 800db36:	6019      	str	r1, [r3, #0]
 800db38:	6818      	ldr	r0, [r3, #0]
 800db3a:	4402      	add	r2, r0
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	4770      	bx	lr
 800db40:	20000d7c 	.word	0x20000d7c
 800db44:	20001774 	.word	0x20001774

0800db48 <_init>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	bf00      	nop
 800db4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db4e:	bc08      	pop	{r3}
 800db50:	469e      	mov	lr, r3
 800db52:	4770      	bx	lr

0800db54 <_fini>:
 800db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db56:	bf00      	nop
 800db58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db5a:	bc08      	pop	{r3}
 800db5c:	469e      	mov	lr, r3
 800db5e:	4770      	bx	lr
