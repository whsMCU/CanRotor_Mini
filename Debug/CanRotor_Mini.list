
CanRotor_Mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010bd8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb8  08010ce8  08010ce8  00020ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011ca0  08011ca0  00021ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011ca8  08011ca8  00021ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011cac  08011cac  00021cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006a0  20000000  08011cb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f5c  200006a0  08012350  000306a0  2**3
                  ALLOC
  8 ._user_heap_stack 00000100  200015fc  08012350  000315fc  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003956b  00000000  00000000  000306c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000054e6  00000000  00000000  00069c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000de01  00000000  00000000  0006f11a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001050  00000000  00000000  0007cf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000016c8  00000000  00000000  0007df70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c55b  00000000  00000000  0007f638  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005b09  00000000  00000000  0008bb93  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009169c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004894  00000000  00000000  00091718  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  00095fac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200006a0 	.word	0x200006a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08010cd0 	.word	0x08010cd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200006a4 	.word	0x200006a4
 800014c:	08010cd0 	.word	0x08010cd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2uiz>:
 8000a80:	004a      	lsls	r2, r1, #1
 8000a82:	d211      	bcs.n	8000aa8 <__aeabi_d2uiz+0x28>
 8000a84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a88:	d211      	bcs.n	8000aae <__aeabi_d2uiz+0x2e>
 8000a8a:	d50d      	bpl.n	8000aa8 <__aeabi_d2uiz+0x28>
 8000a8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a94:	d40e      	bmi.n	8000ab4 <__aeabi_d2uiz+0x34>
 8000a96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_d2uiz+0x3a>
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0000 	mov.w	r0, #0
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c20:	d1ed      	bne.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__gesf2>:
 800101c:	f04f 3cff 	mov.w	ip, #4294967295
 8001020:	e006      	b.n	8001030 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__lesf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	e002      	b.n	8001030 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__cmpsf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001034:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001038:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800103c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001040:	bf18      	it	ne
 8001042:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001046:	d011      	beq.n	800106c <__cmpsf2+0x40>
 8001048:	b001      	add	sp, #4
 800104a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800104e:	bf18      	it	ne
 8001050:	ea90 0f01 	teqne	r0, r1
 8001054:	bf58      	it	pl
 8001056:	ebb2 0003 	subspl.w	r0, r2, r3
 800105a:	bf88      	it	hi
 800105c:	17c8      	asrhi	r0, r1, #31
 800105e:	bf38      	it	cc
 8001060:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001064:	bf18      	it	ne
 8001066:	f040 0001 	orrne.w	r0, r0, #1
 800106a:	4770      	bx	lr
 800106c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001070:	d102      	bne.n	8001078 <__cmpsf2+0x4c>
 8001072:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001076:	d105      	bne.n	8001084 <__cmpsf2+0x58>
 8001078:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800107c:	d1e4      	bne.n	8001048 <__cmpsf2+0x1c>
 800107e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001082:	d0e1      	beq.n	8001048 <__cmpsf2+0x1c>
 8001084:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <__aeabi_cfrcmple>:
 800108c:	4684      	mov	ip, r0
 800108e:	4608      	mov	r0, r1
 8001090:	4661      	mov	r1, ip
 8001092:	e7ff      	b.n	8001094 <__aeabi_cfcmpeq>

08001094 <__aeabi_cfcmpeq>:
 8001094:	b50f      	push	{r0, r1, r2, r3, lr}
 8001096:	f7ff ffc9 	bl	800102c <__cmpsf2>
 800109a:	2800      	cmp	r0, #0
 800109c:	bf48      	it	mi
 800109e:	f110 0f00 	cmnmi.w	r0, #0
 80010a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a4 <__aeabi_fcmpeq>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff fff4 	bl	8001094 <__aeabi_cfcmpeq>
 80010ac:	bf0c      	ite	eq
 80010ae:	2001      	moveq	r0, #1
 80010b0:	2000      	movne	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmplt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffea 	bl	8001094 <__aeabi_cfcmpeq>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmple>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffe0 	bl	8001094 <__aeabi_cfcmpeq>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpge>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffd2 	bl	800108c <__aeabi_cfrcmple>
 80010e8:	bf94      	ite	ls
 80010ea:	2001      	movls	r0, #1
 80010ec:	2000      	movhi	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmpgt>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffc8 	bl	800108c <__aeabi_cfrcmple>
 80010fc:	bf34      	ite	cc
 80010fe:	2001      	movcc	r0, #1
 8001100:	2000      	movcs	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpun>:
 8001108:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800110c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001110:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001114:	d102      	bne.n	800111c <__aeabi_fcmpun+0x14>
 8001116:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800111a:	d108      	bne.n	800112e <__aeabi_fcmpun+0x26>
 800111c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001120:	d102      	bne.n	8001128 <__aeabi_fcmpun+0x20>
 8001122:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001126:	d102      	bne.n	800112e <__aeabi_fcmpun+0x26>
 8001128:	f04f 0000 	mov.w	r0, #0
 800112c:	4770      	bx	lr
 800112e:	f04f 0001 	mov.w	r0, #1
 8001132:	4770      	bx	lr

08001134 <__aeabi_f2iz>:
 8001134:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001138:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800113c:	d30f      	bcc.n	800115e <__aeabi_f2iz+0x2a>
 800113e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001142:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001146:	d90d      	bls.n	8001164 <__aeabi_f2iz+0x30>
 8001148:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800114c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001150:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	bf18      	it	ne
 800115a:	4240      	negne	r0, r0
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2iz+0x3a>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d105      	bne.n	800117a <__aeabi_f2iz+0x46>
 800116e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001172:	bf08      	it	eq
 8001174:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr

08001180 <__aeabi_f2uiz>:
 8001180:	0042      	lsls	r2, r0, #1
 8001182:	d20e      	bcs.n	80011a2 <__aeabi_f2uiz+0x22>
 8001184:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001188:	d30b      	bcc.n	80011a2 <__aeabi_f2uiz+0x22>
 800118a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800118e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001192:	d409      	bmi.n	80011a8 <__aeabi_f2uiz+0x28>
 8001194:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800119c:	fa23 f002 	lsr.w	r0, r3, r2
 80011a0:	4770      	bx	lr
 80011a2:	f04f 0000 	mov.w	r0, #0
 80011a6:	4770      	bx	lr
 80011a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011ac:	d101      	bne.n	80011b2 <__aeabi_f2uiz+0x32>
 80011ae:	0242      	lsls	r2, r0, #9
 80011b0:	d102      	bne.n	80011b8 <__aeabi_f2uiz+0x38>
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295
 80011b6:	4770      	bx	lr
 80011b8:	f04f 0000 	mov.w	r0, #0
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <__aeabi_uldivmod>:
 80011c0:	b953      	cbnz	r3, 80011d8 <__aeabi_uldivmod+0x18>
 80011c2:	b94a      	cbnz	r2, 80011d8 <__aeabi_uldivmod+0x18>
 80011c4:	2900      	cmp	r1, #0
 80011c6:	bf08      	it	eq
 80011c8:	2800      	cmpeq	r0, #0
 80011ca:	bf1c      	itt	ne
 80011cc:	f04f 31ff 	movne.w	r1, #4294967295
 80011d0:	f04f 30ff 	movne.w	r0, #4294967295
 80011d4:	f000 b97a 	b.w	80014cc <__aeabi_idiv0>
 80011d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80011dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011e0:	f000 f806 	bl	80011f0 <__udivmoddi4>
 80011e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ec:	b004      	add	sp, #16
 80011ee:	4770      	bx	lr

080011f0 <__udivmoddi4>:
 80011f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011f4:	468c      	mov	ip, r1
 80011f6:	460e      	mov	r6, r1
 80011f8:	4604      	mov	r4, r0
 80011fa:	9d08      	ldr	r5, [sp, #32]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d150      	bne.n	80012a2 <__udivmoddi4+0xb2>
 8001200:	428a      	cmp	r2, r1
 8001202:	4617      	mov	r7, r2
 8001204:	d96c      	bls.n	80012e0 <__udivmoddi4+0xf0>
 8001206:	fab2 fe82 	clz	lr, r2
 800120a:	f1be 0f00 	cmp.w	lr, #0
 800120e:	d00b      	beq.n	8001228 <__udivmoddi4+0x38>
 8001210:	f1ce 0c20 	rsb	ip, lr, #32
 8001214:	fa01 f60e 	lsl.w	r6, r1, lr
 8001218:	fa20 fc0c 	lsr.w	ip, r0, ip
 800121c:	fa02 f70e 	lsl.w	r7, r2, lr
 8001220:	ea4c 0c06 	orr.w	ip, ip, r6
 8001224:	fa00 f40e 	lsl.w	r4, r0, lr
 8001228:	0c3a      	lsrs	r2, r7, #16
 800122a:	fbbc f9f2 	udiv	r9, ip, r2
 800122e:	b2bb      	uxth	r3, r7
 8001230:	fb02 cc19 	mls	ip, r2, r9, ip
 8001234:	fb09 fa03 	mul.w	sl, r9, r3
 8001238:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800123c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8001240:	45b2      	cmp	sl, r6
 8001242:	d90a      	bls.n	800125a <__udivmoddi4+0x6a>
 8001244:	19f6      	adds	r6, r6, r7
 8001246:	f109 31ff 	add.w	r1, r9, #4294967295
 800124a:	f080 8125 	bcs.w	8001498 <__udivmoddi4+0x2a8>
 800124e:	45b2      	cmp	sl, r6
 8001250:	f240 8122 	bls.w	8001498 <__udivmoddi4+0x2a8>
 8001254:	f1a9 0902 	sub.w	r9, r9, #2
 8001258:	443e      	add	r6, r7
 800125a:	eba6 060a 	sub.w	r6, r6, sl
 800125e:	fbb6 f0f2 	udiv	r0, r6, r2
 8001262:	fb02 6610 	mls	r6, r2, r0, r6
 8001266:	fb00 f303 	mul.w	r3, r0, r3
 800126a:	b2a4      	uxth	r4, r4
 800126c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001270:	42a3      	cmp	r3, r4
 8001272:	d909      	bls.n	8001288 <__udivmoddi4+0x98>
 8001274:	19e4      	adds	r4, r4, r7
 8001276:	f100 32ff 	add.w	r2, r0, #4294967295
 800127a:	f080 810b 	bcs.w	8001494 <__udivmoddi4+0x2a4>
 800127e:	42a3      	cmp	r3, r4
 8001280:	f240 8108 	bls.w	8001494 <__udivmoddi4+0x2a4>
 8001284:	3802      	subs	r0, #2
 8001286:	443c      	add	r4, r7
 8001288:	2100      	movs	r1, #0
 800128a:	1ae4      	subs	r4, r4, r3
 800128c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001290:	2d00      	cmp	r5, #0
 8001292:	d062      	beq.n	800135a <__udivmoddi4+0x16a>
 8001294:	2300      	movs	r3, #0
 8001296:	fa24 f40e 	lsr.w	r4, r4, lr
 800129a:	602c      	str	r4, [r5, #0]
 800129c:	606b      	str	r3, [r5, #4]
 800129e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a2:	428b      	cmp	r3, r1
 80012a4:	d907      	bls.n	80012b6 <__udivmoddi4+0xc6>
 80012a6:	2d00      	cmp	r5, #0
 80012a8:	d055      	beq.n	8001356 <__udivmoddi4+0x166>
 80012aa:	2100      	movs	r1, #0
 80012ac:	e885 0041 	stmia.w	r5, {r0, r6}
 80012b0:	4608      	mov	r0, r1
 80012b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b6:	fab3 f183 	clz	r1, r3
 80012ba:	2900      	cmp	r1, #0
 80012bc:	f040 808f 	bne.w	80013de <__udivmoddi4+0x1ee>
 80012c0:	42b3      	cmp	r3, r6
 80012c2:	d302      	bcc.n	80012ca <__udivmoddi4+0xda>
 80012c4:	4282      	cmp	r2, r0
 80012c6:	f200 80fc 	bhi.w	80014c2 <__udivmoddi4+0x2d2>
 80012ca:	1a84      	subs	r4, r0, r2
 80012cc:	eb66 0603 	sbc.w	r6, r6, r3
 80012d0:	2001      	movs	r0, #1
 80012d2:	46b4      	mov	ip, r6
 80012d4:	2d00      	cmp	r5, #0
 80012d6:	d040      	beq.n	800135a <__udivmoddi4+0x16a>
 80012d8:	e885 1010 	stmia.w	r5, {r4, ip}
 80012dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e0:	b912      	cbnz	r2, 80012e8 <__udivmoddi4+0xf8>
 80012e2:	2701      	movs	r7, #1
 80012e4:	fbb7 f7f2 	udiv	r7, r7, r2
 80012e8:	fab7 fe87 	clz	lr, r7
 80012ec:	f1be 0f00 	cmp.w	lr, #0
 80012f0:	d135      	bne.n	800135e <__udivmoddi4+0x16e>
 80012f2:	2101      	movs	r1, #1
 80012f4:	1bf6      	subs	r6, r6, r7
 80012f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80012fa:	fa1f f887 	uxth.w	r8, r7
 80012fe:	fbb6 f2fc 	udiv	r2, r6, ip
 8001302:	fb0c 6612 	mls	r6, ip, r2, r6
 8001306:	fb08 f002 	mul.w	r0, r8, r2
 800130a:	0c23      	lsrs	r3, r4, #16
 800130c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8001310:	42b0      	cmp	r0, r6
 8001312:	d907      	bls.n	8001324 <__udivmoddi4+0x134>
 8001314:	19f6      	adds	r6, r6, r7
 8001316:	f102 33ff 	add.w	r3, r2, #4294967295
 800131a:	d202      	bcs.n	8001322 <__udivmoddi4+0x132>
 800131c:	42b0      	cmp	r0, r6
 800131e:	f200 80d2 	bhi.w	80014c6 <__udivmoddi4+0x2d6>
 8001322:	461a      	mov	r2, r3
 8001324:	1a36      	subs	r6, r6, r0
 8001326:	fbb6 f0fc 	udiv	r0, r6, ip
 800132a:	fb0c 6610 	mls	r6, ip, r0, r6
 800132e:	fb08 f800 	mul.w	r8, r8, r0
 8001332:	b2a3      	uxth	r3, r4
 8001334:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8001338:	45a0      	cmp	r8, r4
 800133a:	d907      	bls.n	800134c <__udivmoddi4+0x15c>
 800133c:	19e4      	adds	r4, r4, r7
 800133e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001342:	d202      	bcs.n	800134a <__udivmoddi4+0x15a>
 8001344:	45a0      	cmp	r8, r4
 8001346:	f200 80b9 	bhi.w	80014bc <__udivmoddi4+0x2cc>
 800134a:	4618      	mov	r0, r3
 800134c:	eba4 0408 	sub.w	r4, r4, r8
 8001350:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001354:	e79c      	b.n	8001290 <__udivmoddi4+0xa0>
 8001356:	4629      	mov	r1, r5
 8001358:	4628      	mov	r0, r5
 800135a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800135e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001362:	f1ce 0320 	rsb	r3, lr, #32
 8001366:	fa26 f203 	lsr.w	r2, r6, r3
 800136a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800136e:	fbb2 f1fc 	udiv	r1, r2, ip
 8001372:	fa1f f887 	uxth.w	r8, r7
 8001376:	fb0c 2211 	mls	r2, ip, r1, r2
 800137a:	fa06 f60e 	lsl.w	r6, r6, lr
 800137e:	fa20 f303 	lsr.w	r3, r0, r3
 8001382:	fb01 f908 	mul.w	r9, r1, r8
 8001386:	4333      	orrs	r3, r6
 8001388:	0c1e      	lsrs	r6, r3, #16
 800138a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800138e:	45b1      	cmp	r9, r6
 8001390:	fa00 f40e 	lsl.w	r4, r0, lr
 8001394:	d909      	bls.n	80013aa <__udivmoddi4+0x1ba>
 8001396:	19f6      	adds	r6, r6, r7
 8001398:	f101 32ff 	add.w	r2, r1, #4294967295
 800139c:	f080 808c 	bcs.w	80014b8 <__udivmoddi4+0x2c8>
 80013a0:	45b1      	cmp	r9, r6
 80013a2:	f240 8089 	bls.w	80014b8 <__udivmoddi4+0x2c8>
 80013a6:	3902      	subs	r1, #2
 80013a8:	443e      	add	r6, r7
 80013aa:	eba6 0609 	sub.w	r6, r6, r9
 80013ae:	fbb6 f0fc 	udiv	r0, r6, ip
 80013b2:	fb0c 6210 	mls	r2, ip, r0, r6
 80013b6:	fb00 f908 	mul.w	r9, r0, r8
 80013ba:	b29e      	uxth	r6, r3
 80013bc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80013c0:	45b1      	cmp	r9, r6
 80013c2:	d907      	bls.n	80013d4 <__udivmoddi4+0x1e4>
 80013c4:	19f6      	adds	r6, r6, r7
 80013c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80013ca:	d271      	bcs.n	80014b0 <__udivmoddi4+0x2c0>
 80013cc:	45b1      	cmp	r9, r6
 80013ce:	d96f      	bls.n	80014b0 <__udivmoddi4+0x2c0>
 80013d0:	3802      	subs	r0, #2
 80013d2:	443e      	add	r6, r7
 80013d4:	eba6 0609 	sub.w	r6, r6, r9
 80013d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80013dc:	e78f      	b.n	80012fe <__udivmoddi4+0x10e>
 80013de:	f1c1 0720 	rsb	r7, r1, #32
 80013e2:	fa22 f807 	lsr.w	r8, r2, r7
 80013e6:	408b      	lsls	r3, r1
 80013e8:	ea48 0303 	orr.w	r3, r8, r3
 80013ec:	fa26 f407 	lsr.w	r4, r6, r7
 80013f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80013f4:	fbb4 f9fe 	udiv	r9, r4, lr
 80013f8:	fa1f fc83 	uxth.w	ip, r3
 80013fc:	fb0e 4419 	mls	r4, lr, r9, r4
 8001400:	408e      	lsls	r6, r1
 8001402:	fa20 f807 	lsr.w	r8, r0, r7
 8001406:	fb09 fa0c 	mul.w	sl, r9, ip
 800140a:	ea48 0806 	orr.w	r8, r8, r6
 800140e:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8001412:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8001416:	45a2      	cmp	sl, r4
 8001418:	fa02 f201 	lsl.w	r2, r2, r1
 800141c:	fa00 f601 	lsl.w	r6, r0, r1
 8001420:	d908      	bls.n	8001434 <__udivmoddi4+0x244>
 8001422:	18e4      	adds	r4, r4, r3
 8001424:	f109 30ff 	add.w	r0, r9, #4294967295
 8001428:	d244      	bcs.n	80014b4 <__udivmoddi4+0x2c4>
 800142a:	45a2      	cmp	sl, r4
 800142c:	d942      	bls.n	80014b4 <__udivmoddi4+0x2c4>
 800142e:	f1a9 0902 	sub.w	r9, r9, #2
 8001432:	441c      	add	r4, r3
 8001434:	eba4 040a 	sub.w	r4, r4, sl
 8001438:	fbb4 f0fe 	udiv	r0, r4, lr
 800143c:	fb0e 4410 	mls	r4, lr, r0, r4
 8001440:	fb00 fc0c 	mul.w	ip, r0, ip
 8001444:	fa1f f888 	uxth.w	r8, r8
 8001448:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800144c:	45a4      	cmp	ip, r4
 800144e:	d907      	bls.n	8001460 <__udivmoddi4+0x270>
 8001450:	18e4      	adds	r4, r4, r3
 8001452:	f100 3eff 	add.w	lr, r0, #4294967295
 8001456:	d229      	bcs.n	80014ac <__udivmoddi4+0x2bc>
 8001458:	45a4      	cmp	ip, r4
 800145a:	d927      	bls.n	80014ac <__udivmoddi4+0x2bc>
 800145c:	3802      	subs	r0, #2
 800145e:	441c      	add	r4, r3
 8001460:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001464:	fba0 8902 	umull	r8, r9, r0, r2
 8001468:	eba4 0c0c 	sub.w	ip, r4, ip
 800146c:	45cc      	cmp	ip, r9
 800146e:	46c2      	mov	sl, r8
 8001470:	46ce      	mov	lr, r9
 8001472:	d315      	bcc.n	80014a0 <__udivmoddi4+0x2b0>
 8001474:	d012      	beq.n	800149c <__udivmoddi4+0x2ac>
 8001476:	b155      	cbz	r5, 800148e <__udivmoddi4+0x29e>
 8001478:	ebb6 030a 	subs.w	r3, r6, sl
 800147c:	eb6c 060e 	sbc.w	r6, ip, lr
 8001480:	fa06 f707 	lsl.w	r7, r6, r7
 8001484:	40cb      	lsrs	r3, r1
 8001486:	431f      	orrs	r7, r3
 8001488:	40ce      	lsrs	r6, r1
 800148a:	602f      	str	r7, [r5, #0]
 800148c:	606e      	str	r6, [r5, #4]
 800148e:	2100      	movs	r1, #0
 8001490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001494:	4610      	mov	r0, r2
 8001496:	e6f7      	b.n	8001288 <__udivmoddi4+0x98>
 8001498:	4689      	mov	r9, r1
 800149a:	e6de      	b.n	800125a <__udivmoddi4+0x6a>
 800149c:	4546      	cmp	r6, r8
 800149e:	d2ea      	bcs.n	8001476 <__udivmoddi4+0x286>
 80014a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80014a4:	eb69 0e03 	sbc.w	lr, r9, r3
 80014a8:	3801      	subs	r0, #1
 80014aa:	e7e4      	b.n	8001476 <__udivmoddi4+0x286>
 80014ac:	4670      	mov	r0, lr
 80014ae:	e7d7      	b.n	8001460 <__udivmoddi4+0x270>
 80014b0:	4618      	mov	r0, r3
 80014b2:	e78f      	b.n	80013d4 <__udivmoddi4+0x1e4>
 80014b4:	4681      	mov	r9, r0
 80014b6:	e7bd      	b.n	8001434 <__udivmoddi4+0x244>
 80014b8:	4611      	mov	r1, r2
 80014ba:	e776      	b.n	80013aa <__udivmoddi4+0x1ba>
 80014bc:	3802      	subs	r0, #2
 80014be:	443c      	add	r4, r7
 80014c0:	e744      	b.n	800134c <__udivmoddi4+0x15c>
 80014c2:	4608      	mov	r0, r1
 80014c4:	e706      	b.n	80012d4 <__udivmoddi4+0xe4>
 80014c6:	3a02      	subs	r2, #2
 80014c8:	443e      	add	r6, r7
 80014ca:	e72b      	b.n	8001324 <__udivmoddi4+0x134>

080014cc <__aeabi_idiv0>:
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_InitTick+0x3c>)
{
 80014d4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d6:	7818      	ldrb	r0, [r3, #0]
 80014d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_InitTick+0x40>)
 80014e2:	6810      	ldr	r0, [r2, #0]
 80014e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80014e8:	f000 fb00 	bl	8001aec <HAL_SYSTICK_Config>
 80014ec:	4604      	mov	r4, r0
 80014ee:	b958      	cbnz	r0, 8001508 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f0:	2d0f      	cmp	r5, #15
 80014f2:	d809      	bhi.n	8001508 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	4602      	mov	r2, r0
 80014f6:	4629      	mov	r1, r5
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 fab6 	bl	8001a6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_InitTick+0x44>)
 8001502:	4620      	mov	r0, r4
 8001504:	601d      	str	r5, [r3, #0]
 8001506:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001508:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800150a:	bd38      	pop	{r3, r4, r5, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000028 	.word	0x20000028
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_Init+0x20>)
{
 800151a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001526:	f000 fa8f 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff ffd0 	bl	80014d0 <HAL_InitTick>
  HAL_MspInit();
 8001530:	f007 ff8e 	bl	8009450 <HAL_MspInit>
}
 8001534:	2000      	movs	r0, #0
 8001536:	bd08      	pop	{r3, pc}
 8001538:	40022000 	.word	0x40022000

0800153c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800153c:	4a03      	ldr	r2, [pc, #12]	; (800154c <HAL_IncTick+0x10>)
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <HAL_IncTick+0x14>)
 8001540:	6811      	ldr	r1, [r2, #0]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	440b      	add	r3, r1
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000c18 	.word	0x20000c18
 8001550:	20000000 	.word	0x20000000

08001554 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001554:	4b01      	ldr	r3, [pc, #4]	; (800155c <HAL_GetTick+0x8>)
 8001556:	6818      	ldr	r0, [r3, #0]
}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000c18 	.word	0x20000c18

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b538      	push	{r3, r4, r5, lr}
 8001562:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff fff6 	bl	8001554 <HAL_GetTick>
 8001568:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800156c:	bf1e      	ittt	ne
 800156e:	4b04      	ldrne	r3, [pc, #16]	; (8001580 <HAL_Delay+0x20>)
 8001570:	781b      	ldrbne	r3, [r3, #0]
 8001572:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	1b40      	subs	r0, r0, r5
 800157a:	4284      	cmp	r4, r0
 800157c:	d8fa      	bhi.n	8001574 <HAL_Delay+0x14>
  {
  }
}
 800157e:	bd38      	pop	{r3, r4, r5, pc}
 8001580:	20000000 	.word	0x20000000

08001584 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001586:	2600      	movs	r6, #0
{
 8001588:	4604      	mov	r4, r0
 800158a:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800158c:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800158e:	f7ff ffe1 	bl	8001554 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001592:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001594:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	05d2      	lsls	r2, r2, #23
 800159a:	d508      	bpl.n	80015ae <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 800159c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800159e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80015a0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a4:	f043 0320 	orr.w	r3, r3, #32
 80015a8:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80015aa:	b003      	add	sp, #12
 80015ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	05d6      	lsls	r6, r2, #23
 80015b2:	d403      	bmi.n	80015bc <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015b6:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80015ba:	d03b      	beq.n	8001634 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015bc:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <HAL_ADC_PollForConversion+0x124>)
 80015be:	2002      	movs	r0, #2
 80015c0:	681e      	ldr	r6, [r3, #0]
 80015c2:	f001 fe55 	bl	8003270 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_ADC_PollForConversion+0x128>)
 80015ca:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015cc:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015d0:	4211      	tst	r1, r2
 80015d2:	4a37      	ldr	r2, [pc, #220]	; (80016b0 <HAL_ADC_PollForConversion+0x12c>)
 80015d4:	d14f      	bne.n	8001676 <HAL_ADC_PollForConversion+0xf2>
 80015d6:	68de      	ldr	r6, [r3, #12]
 80015d8:	4936      	ldr	r1, [pc, #216]	; (80016b4 <HAL_ADC_PollForConversion+0x130>)
 80015da:	420e      	tst	r6, r1
 80015dc:	d14b      	bne.n	8001676 <HAL_ADC_PollForConversion+0xf2>
 80015de:	6919      	ldr	r1, [r3, #16]
 80015e0:	4211      	tst	r1, r2
 80015e2:	d159      	bne.n	8001698 <HAL_ADC_PollForConversion+0x114>
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <HAL_ADC_PollForConversion+0x134>)
 80015e8:	421a      	tst	r2, r3
 80015ea:	bf14      	ite	ne
 80015ec:	2329      	movne	r3, #41	; 0x29
 80015ee:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015f0:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015f4:	9b01      	ldr	r3, [sp, #4]
 80015f6:	429e      	cmp	r6, r3
 80015f8:	d920      	bls.n	800163c <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 80015fa:	1c6b      	adds	r3, r5, #1
 80015fc:	d005      	beq.n	800160a <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015fe:	b15d      	cbz	r5, 8001618 <HAL_ADC_PollForConversion+0x94>
 8001600:	f7ff ffa8 	bl	8001554 <HAL_GetTick>
 8001604:	1bc0      	subs	r0, r0, r7
 8001606:	4285      	cmp	r5, r0
 8001608:	d306      	bcc.n	8001618 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	3301      	adds	r3, #1
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	e7f0      	b.n	80015f4 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8001612:	1c68      	adds	r0, r5, #1
 8001614:	d00f      	beq.n	8001636 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001616:	b945      	cbnz	r5, 800162a <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 800161a:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8001622:	2300      	movs	r3, #0
 8001624:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 8001628:	e7bf      	b.n	80015aa <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800162a:	f7ff ff93 	bl	8001554 <HAL_GetTick>
 800162e:	1bc0      	subs	r0, r0, r7
 8001630:	4285      	cmp	r5, r0
 8001632:	d3f1      	bcc.n	8001618 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001634:	6822      	ldr	r2, [r4, #0]
 8001636:	6813      	ldr	r3, [r2, #0]
 8001638:	0799      	lsls	r1, r3, #30
 800163a:	d5ea      	bpl.n	8001612 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800163c:	f06f 0312 	mvn.w	r3, #18
 8001640:	6822      	ldr	r2, [r4, #0]
 8001642:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164a:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800164c:	6893      	ldr	r3, [r2, #8]
 800164e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001652:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001656:	d125      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x120>
 8001658:	68e3      	ldr	r3, [r4, #12]
 800165a:	bb1b      	cbnz	r3, 80016a4 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800165c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800165e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001662:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001664:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001666:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800166a:	d11b      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	62a3      	str	r3, [r4, #40]	; 0x28
 8001674:	e799      	b.n	80015aa <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001676:	6919      	ldr	r1, [r3, #16]
 8001678:	4211      	tst	r1, r2
 800167a:	d103      	bne.n	8001684 <HAL_ADC_PollForConversion+0x100>
 800167c:	68d9      	ldr	r1, [r3, #12]
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_ADC_PollForConversion+0x134>)
 8001680:	4211      	tst	r1, r2
 8001682:	d00b      	beq.n	800169c <HAL_ADC_PollForConversion+0x118>
 8001684:	6919      	ldr	r1, [r3, #16]
 8001686:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <HAL_ADC_PollForConversion+0x138>)
 8001688:	4211      	tst	r1, r2
 800168a:	d109      	bne.n	80016a0 <HAL_ADC_PollForConversion+0x11c>
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	4213      	tst	r3, r2
 8001690:	bf14      	ite	ne
 8001692:	23fc      	movne	r3, #252	; 0xfc
 8001694:	2354      	moveq	r3, #84	; 0x54
 8001696:	e7ab      	b.n	80015f0 <HAL_ADC_PollForConversion+0x6c>
 8001698:	2329      	movs	r3, #41	; 0x29
 800169a:	e7a9      	b.n	80015f0 <HAL_ADC_PollForConversion+0x6c>
 800169c:	2354      	movs	r3, #84	; 0x54
 800169e:	e7a7      	b.n	80015f0 <HAL_ADC_PollForConversion+0x6c>
 80016a0:	23fc      	movs	r3, #252	; 0xfc
 80016a2:	e7a5      	b.n	80015f0 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 80016a4:	2000      	movs	r0, #0
 80016a6:	e780      	b.n	80015aa <HAL_ADC_PollForConversion+0x26>
 80016a8:	20000028 	.word	0x20000028
 80016ac:	24924924 	.word	0x24924924
 80016b0:	12492492 	.word	0x12492492
 80016b4:	00924924 	.word	0x00924924
 80016b8:	00492492 	.word	0x00492492
 80016bc:	00249249 	.word	0x00249249

080016c0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016c0:	6803      	ldr	r3, [r0, #0]
 80016c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80016c8:	2300      	movs	r3, #0
{ 
 80016ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80016cc:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d074      	beq.n	80017c0 <HAL_ADC_ConfigChannel+0xf8>
 80016d6:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016d8:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80016da:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80016de:	2d06      	cmp	r5, #6
 80016e0:	6802      	ldr	r2, [r0, #0]
 80016e2:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80016e6:	680c      	ldr	r4, [r1, #0]
 80016e8:	d825      	bhi.n	8001736 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016ea:	442b      	add	r3, r5
 80016ec:	251f      	movs	r5, #31
 80016ee:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80016f0:	3b05      	subs	r3, #5
 80016f2:	409d      	lsls	r5, r3
 80016f4:	ea26 0505 	bic.w	r5, r6, r5
 80016f8:	fa04 f303 	lsl.w	r3, r4, r3
 80016fc:	432b      	orrs	r3, r5
 80016fe:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001700:	2c09      	cmp	r4, #9
 8001702:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001706:	688d      	ldr	r5, [r1, #8]
 8001708:	d92f      	bls.n	800176a <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800170a:	2607      	movs	r6, #7
 800170c:	4423      	add	r3, r4
 800170e:	68d1      	ldr	r1, [r2, #12]
 8001710:	3b1e      	subs	r3, #30
 8001712:	409e      	lsls	r6, r3
 8001714:	ea21 0106 	bic.w	r1, r1, r6
 8001718:	fa05 f303 	lsl.w	r3, r5, r3
 800171c:	430b      	orrs	r3, r1
 800171e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001720:	f1a4 0310 	sub.w	r3, r4, #16
 8001724:	2b01      	cmp	r3, #1
 8001726:	d92b      	bls.n	8001780 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001728:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800172a:	2200      	movs	r2, #0
 800172c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001730:	4618      	mov	r0, r3
 8001732:	b002      	add	sp, #8
 8001734:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001736:	2d0c      	cmp	r5, #12
 8001738:	d80b      	bhi.n	8001752 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800173a:	442b      	add	r3, r5
 800173c:	251f      	movs	r5, #31
 800173e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001740:	3b23      	subs	r3, #35	; 0x23
 8001742:	409d      	lsls	r5, r3
 8001744:	ea26 0505 	bic.w	r5, r6, r5
 8001748:	fa04 f303 	lsl.w	r3, r4, r3
 800174c:	432b      	orrs	r3, r5
 800174e:	6313      	str	r3, [r2, #48]	; 0x30
 8001750:	e7d6      	b.n	8001700 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001752:	442b      	add	r3, r5
 8001754:	251f      	movs	r5, #31
 8001756:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001758:	3b41      	subs	r3, #65	; 0x41
 800175a:	409d      	lsls	r5, r3
 800175c:	ea26 0505 	bic.w	r5, r6, r5
 8001760:	fa04 f303 	lsl.w	r3, r4, r3
 8001764:	432b      	orrs	r3, r5
 8001766:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001768:	e7ca      	b.n	8001700 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800176a:	2607      	movs	r6, #7
 800176c:	6911      	ldr	r1, [r2, #16]
 800176e:	4423      	add	r3, r4
 8001770:	409e      	lsls	r6, r3
 8001772:	ea21 0106 	bic.w	r1, r1, r6
 8001776:	fa05 f303 	lsl.w	r3, r5, r3
 800177a:	430b      	orrs	r3, r1
 800177c:	6113      	str	r3, [r2, #16]
 800177e:	e7cf      	b.n	8001720 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_ADC_ConfigChannel+0xfc>)
 8001782:	429a      	cmp	r2, r3
 8001784:	d116      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001786:	6893      	ldr	r3, [r2, #8]
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	d4cd      	bmi.n	8001728 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800178c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800178e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001794:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001796:	d1c7      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_ADC_ConfigChannel+0x100>)
 800179a:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <HAL_ADC_ConfigChannel+0x104>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	fbb3 f2f2 	udiv	r2, r3, r2
 80017a2:	230a      	movs	r3, #10
 80017a4:	4353      	muls	r3, r2
            wait_loop_index--;
 80017a6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80017a8:	9b01      	ldr	r3, [sp, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0bc      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80017ae:	9b01      	ldr	r3, [sp, #4]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	e7f8      	b.n	80017a6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e7b4      	b.n	800172a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80017c0:	2302      	movs	r3, #2
 80017c2:	e7b5      	b.n	8001730 <HAL_ADC_ConfigChannel+0x68>
 80017c4:	40012400 	.word	0x40012400
 80017c8:	20000028 	.word	0x20000028
 80017cc:	000f4240 	.word	0x000f4240

080017d0 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80017d0:	2300      	movs	r3, #0
{
 80017d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80017d4:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017d6:	6803      	ldr	r3, [r0, #0]
{
 80017d8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	07d2      	lsls	r2, r2, #31
 80017de:	d502      	bpl.n	80017e6 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017e0:	2000      	movs	r0, #0
}
 80017e2:	b002      	add	sp, #8
 80017e4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <ADC_Enable+0x68>)
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <ADC_Enable+0x6c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80017f8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80017fa:	9b01      	ldr	r3, [sp, #4]
 80017fc:	b9c3      	cbnz	r3, 8001830 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80017fe:	f7ff fea9 	bl	8001554 <HAL_GetTick>
 8001802:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	689d      	ldr	r5, [r3, #8]
 8001808:	f015 0501 	ands.w	r5, r5, #1
 800180c:	d1e8      	bne.n	80017e0 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800180e:	f7ff fea1 	bl	8001554 <HAL_GetTick>
 8001812:	1b80      	subs	r0, r0, r6
 8001814:	2802      	cmp	r0, #2
 8001816:	d9f5      	bls.n	8001804 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001818:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800181a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181e:	f043 0310 	orr.w	r3, r3, #16
 8001822:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001824:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001826:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800182e:	e7d8      	b.n	80017e2 <ADC_Enable+0x12>
      wait_loop_index--;
 8001830:	9b01      	ldr	r3, [sp, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	e7e0      	b.n	80017f8 <ADC_Enable+0x28>
 8001836:	bf00      	nop
 8001838:	20000028 	.word	0x20000028
 800183c:	000f4240 	.word	0x000f4240

08001840 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001840:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001844:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001846:	2b01      	cmp	r3, #1
{
 8001848:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800184a:	d054      	beq.n	80018f6 <HAL_ADC_Start+0xb6>
 800184c:	2301      	movs	r3, #1
 800184e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001852:	f7ff ffbd 	bl	80017d0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001856:	2800      	cmp	r0, #0
 8001858:	d149      	bne.n	80018ee <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800185a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800185c:	4a27      	ldr	r2, [pc, #156]	; (80018fc <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800185e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	4293      	cmp	r3, r2
 8001870:	d104      	bne.n	800187c <HAL_ADC_Start+0x3c>
 8001872:	4923      	ldr	r1, [pc, #140]	; (8001900 <HAL_ADC_Start+0xc0>)
 8001874:	684a      	ldr	r2, [r1, #4]
 8001876:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800187a:	d12e      	bne.n	80018da <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800187c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800187e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001882:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001884:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001886:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001888:	bf41      	itttt	mi
 800188a:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 800188c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001890:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001894:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001896:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800189c:	bf1c      	itt	ne
 800189e:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80018a0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80018a4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018ac:	f06f 0202 	mvn.w	r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80018b8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80018bc:	d113      	bne.n	80018e6 <HAL_ADC_Start+0xa6>
 80018be:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <HAL_ADC_Start+0xbc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d105      	bne.n	80018d0 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018c4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80018c8:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018ca:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80018ce:	d10a      	bne.n	80018e6 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018dc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018e0:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018e2:	684a      	ldr	r2, [r1, #4]
 80018e4:	e7cf      	b.n	8001886 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018ec:	e7f3      	b.n	80018d6 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 80018ee:	2300      	movs	r3, #0
 80018f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80018f4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80018f6:	2002      	movs	r0, #2
}
 80018f8:	bd10      	pop	{r4, pc}
 80018fa:	bf00      	nop
 80018fc:	40012800 	.word	0x40012800
 8001900:	40012400 	.word	0x40012400

08001904 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001904:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001906:	6803      	ldr	r3, [r0, #0]
{
 8001908:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	07d2      	lsls	r2, r2, #31
 800190e:	d401      	bmi.n	8001914 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001910:	2000      	movs	r0, #0
 8001912:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800191c:	f7ff fe1a 	bl	8001554 <HAL_GetTick>
 8001920:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	07db      	lsls	r3, r3, #31
 8001928:	d5f2      	bpl.n	8001910 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800192a:	f7ff fe13 	bl	8001554 <HAL_GetTick>
 800192e:	1b40      	subs	r0, r0, r5
 8001930:	2802      	cmp	r0, #2
 8001932:	d9f6      	bls.n	8001922 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001934:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001936:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001946:	bd38      	pop	{r3, r4, r5, pc}

08001948 <HAL_ADC_Init>:
{
 8001948:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800194a:	4604      	mov	r4, r0
 800194c:	2800      	cmp	r0, #0
 800194e:	d071      	beq.n	8001a34 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001950:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001952:	b923      	cbnz	r3, 800195e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001954:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001956:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800195a:	f007 fd9b 	bl	8009494 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff ffd0 	bl	8001904 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001964:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001966:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800196a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800196c:	d164      	bne.n	8001a38 <HAL_ADC_Init+0xf0>
 800196e:	2800      	cmp	r0, #0
 8001970:	d162      	bne.n	8001a38 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001972:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001974:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001978:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800197a:	f023 0302 	bic.w	r3, r3, #2
 800197e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001982:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001984:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001986:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001988:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800198a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800198e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001992:	d038      	beq.n	8001a06 <HAL_ADC_Init+0xbe>
 8001994:	2901      	cmp	r1, #1
 8001996:	bf14      	ite	ne
 8001998:	4606      	movne	r6, r0
 800199a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800199e:	6965      	ldr	r5, [r4, #20]
 80019a0:	2d01      	cmp	r5, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d130      	bne.n	8001a0a <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019a8:	69a3      	ldr	r3, [r4, #24]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80019b0:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80019b4:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019b6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80019ba:	685d      	ldr	r5, [r3, #4]
 80019bc:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80019c0:	ea45 0506 	orr.w	r5, r5, r6
 80019c4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80019c6:	689e      	ldr	r6, [r3, #8]
 80019c8:	4d1d      	ldr	r5, [pc, #116]	; (8001a40 <HAL_ADC_Init+0xf8>)
 80019ca:	ea05 0506 	and.w	r5, r5, r6
 80019ce:	ea45 0502 	orr.w	r5, r5, r2
 80019d2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019d4:	d001      	beq.n	80019da <HAL_ADC_Init+0x92>
 80019d6:	2901      	cmp	r1, #1
 80019d8:	d120      	bne.n	8001a1c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019da:	6921      	ldr	r1, [r4, #16]
 80019dc:	3901      	subs	r1, #1
 80019de:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80019e0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80019e2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80019e6:	4329      	orrs	r1, r5
 80019e8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019ea:	6899      	ldr	r1, [r3, #8]
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_ADC_Init+0xfc>)
 80019ee:	400b      	ands	r3, r1
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d115      	bne.n	8001a20 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80019f4:	2300      	movs	r3, #0
 80019f6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80019f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a04:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a06:	460e      	mov	r6, r1
 8001a08:	e7c9      	b.n	800199e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a0c:	f043 0320 	orr.w	r3, r3, #32
 8001a10:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a1a:	e7cb      	b.n	80019b4 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	e7df      	b.n	80019e0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8001a20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a22:	f023 0312 	bic.w	r3, r3, #18
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001a34:	2001      	movs	r0, #1
}
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a38:	f043 0310 	orr.w	r3, r3, #16
 8001a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a3e:	e7f9      	b.n	8001a34 <HAL_ADC_Init+0xec>
 8001a40:	ffe1f7fd 	.word	0xffe1f7fd
 8001a44:	ff1f0efe 	.word	0xff1f0efe

08001a48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001a4a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001a4e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a56:	041b      	lsls	r3, r3, #16
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001a62:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001a64:	60d3      	str	r3, [r2, #12]
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b530      	push	{r4, r5, lr}
 8001a70:	68dc      	ldr	r4, [r3, #12]
 8001a72:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a76:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	bf28      	it	cs
 8001a80:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a88:	bf98      	it	ls
 8001a8a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	fa05 f303 	lsl.w	r3, r5, r3
 8001a90:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a94:	bf88      	it	hi
 8001a96:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4019      	ands	r1, r3
 8001a9a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	fa05 f404 	lsl.w	r4, r5, r4
 8001aa0:	3c01      	subs	r4, #1
 8001aa2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001aa4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa6:	ea42 0201 	orr.w	r2, r2, r1
 8001aaa:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	bfaf      	iteee	ge
 8001ab0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	4b06      	ldrlt	r3, [pc, #24]	; (8001ad0 <HAL_NVIC_SetPriority+0x64>)
 8001ab6:	f000 000f 	andlt.w	r0, r0, #15
 8001aba:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	bfa5      	ittet	ge
 8001abe:	b2d2      	uxtbge	r2, r2
 8001ac0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001aca:	bd30      	pop	{r4, r5, pc}
 8001acc:	e000ed00 	.word	0xe000ed00
 8001ad0:	e000ed14 	.word	0xe000ed14

08001ad4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	0942      	lsrs	r2, r0, #5
 8001ad8:	f000 001f 	and.w	r0, r0, #31
 8001adc:	fa03 f000 	lsl.w	r0, r3, r0
 8001ae0:	4b01      	ldr	r3, [pc, #4]	; (8001ae8 <HAL_NVIC_EnableIRQ+0x14>)
 8001ae2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001ae6:	4770      	bx	lr
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	3801      	subs	r0, #1
 8001aee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001af2:	d20a      	bcs.n	8001b0a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b02:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b0a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001b1a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	bf0c      	ite	eq
 8001b20:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001b24:	f022 0204 	bicne.w	r2, r2, #4
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001b30:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001b32:	f007 f893 	bl	8008c5c <HAL_SYSTICK_Callback>
 8001b36:	bd08      	pop	{r3, pc}

08001b38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b38:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b3a:	b350      	cbz	r0, 8001b92 <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b3c:	2214      	movs	r2, #20
 8001b3e:	6801      	ldr	r1, [r0, #0]
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b42:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b44:	440b      	add	r3, r1
 8001b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8001b50:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001b52:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001b54:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b56:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8001b5a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b5e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b62:	4323      	orrs	r3, r4
 8001b64:	6904      	ldr	r4, [r0, #16]
 8001b66:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b68:	6944      	ldr	r4, [r0, #20]
 8001b6a:	4323      	orrs	r3, r4
 8001b6c:	6984      	ldr	r4, [r0, #24]
 8001b6e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b70:	69c4      	ldr	r4, [r0, #28]
 8001b72:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001b74:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b76:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b78:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8001b7a:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001b7c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8001b80:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001b82:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001b84:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001b86:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b88:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b8a:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b92:	2001      	movs	r0, #1
}
 8001b94:	bd10      	pop	{r4, pc}
 8001b96:	bf00      	nop
 8001b98:	bffdfff8 	.word	0xbffdfff8
 8001b9c:	40020000 	.word	0x40020000

08001ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ba2:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001ba6:	2c01      	cmp	r4, #1
 8001ba8:	d035      	beq.n	8001c16 <HAL_DMA_Start_IT+0x76>
 8001baa:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bac:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001bb0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bb4:	42a5      	cmp	r5, r4
 8001bb6:	f04f 0600 	mov.w	r6, #0
 8001bba:	f04f 0402 	mov.w	r4, #2
 8001bbe:	d128      	bne.n	8001c12 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bc0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bc4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001bc8:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bca:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001bcc:	f026 0601 	bic.w	r6, r6, #1
 8001bd0:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bd2:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001bd4:	40bd      	lsls	r5, r7
 8001bd6:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bd8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bda:	6843      	ldr	r3, [r0, #4]
 8001bdc:	6805      	ldr	r5, [r0, #0]
 8001bde:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001be0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001be2:	bf0b      	itete	eq
 8001be4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001be6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001be8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001bea:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001bec:	b14b      	cbz	r3, 8001c02 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bf4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001bf6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	602b      	str	r3, [r5, #0]
 8001c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	f043 030a 	orr.w	r3, r3, #10
 8001c10:	e7f0      	b.n	8001bf4 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001c12:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001c16:	2002      	movs	r0, #2
}
 8001c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001c1c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c1c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001c20:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d003      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c26:	2304      	movs	r3, #4
 8001c28:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c2e:	6803      	ldr	r3, [r0, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	f022 020e 	bic.w	r2, r2, #14
 8001c36:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c40:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <HAL_DMA_Abort_IT+0x88>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01f      	beq.n	8001c86 <HAL_DMA_Abort_IT+0x6a>
 8001c46:	3214      	adds	r2, #20
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d01e      	beq.n	8001c8a <HAL_DMA_Abort_IT+0x6e>
 8001c4c:	3214      	adds	r2, #20
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01d      	beq.n	8001c8e <HAL_DMA_Abort_IT+0x72>
 8001c52:	3214      	adds	r2, #20
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d01d      	beq.n	8001c94 <HAL_DMA_Abort_IT+0x78>
 8001c58:	3214      	adds	r2, #20
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01d      	beq.n	8001c9a <HAL_DMA_Abort_IT+0x7e>
 8001c5e:	3214      	adds	r2, #20
 8001c60:	4293      	cmp	r3, r2
 8001c62:	bf0c      	ite	eq
 8001c64:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001c68:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8001c6e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c70:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001c78:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001c7a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001c7e:	b17b      	cbz	r3, 8001ca0 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001c80:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c82:	4620      	mov	r0, r4
 8001c84:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c86:	2301      	movs	r3, #1
 8001c88:	e7f0      	b.n	8001c6c <HAL_DMA_Abort_IT+0x50>
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	e7ee      	b.n	8001c6c <HAL_DMA_Abort_IT+0x50>
 8001c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c92:	e7eb      	b.n	8001c6c <HAL_DMA_Abort_IT+0x50>
 8001c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c98:	e7e8      	b.n	8001c6c <HAL_DMA_Abort_IT+0x50>
 8001c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c9e:	e7e5      	b.n	8001c6c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001ca0:	4618      	mov	r0, r3
}
 8001ca2:	bd10      	pop	{r4, pc}
 8001ca4:	40020008 	.word	0x40020008
 8001ca8:	40020000 	.word	0x40020000

08001cac <HAL_DMA_IRQHandler>:
{
 8001cac:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cae:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cb0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cb2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cb4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001cb6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cb8:	4095      	lsls	r5, r2
 8001cba:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001cbc:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cbe:	d032      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x7a>
 8001cc0:	074d      	lsls	r5, r1, #29
 8001cc2:	d530      	bpl.n	8001d26 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cc8:	bf5e      	ittt	pl
 8001cca:	681a      	ldrpl	r2, [r3, #0]
 8001ccc:	f022 0204 	bicpl.w	r2, r2, #4
 8001cd0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cd2:	4a3e      	ldr	r2, [pc, #248]	; (8001dcc <HAL_DMA_IRQHandler+0x120>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d019      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x60>
 8001cd8:	3214      	adds	r2, #20
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d018      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x64>
 8001cde:	3214      	adds	r2, #20
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d017      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x68>
 8001ce4:	3214      	adds	r2, #20
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d017      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x6e>
 8001cea:	3214      	adds	r2, #20
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d017      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x74>
 8001cf0:	3214      	adds	r2, #20
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	bf0c      	ite	eq
 8001cf6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001cfa:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001cfe:	4a34      	ldr	r2, [pc, #208]	; (8001dd0 <HAL_DMA_IRQHandler+0x124>)
 8001d00:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001d02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05e      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x11a>
}
 8001d08:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001d0a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	e7f6      	b.n	8001cfe <HAL_DMA_IRQHandler+0x52>
 8001d10:	2340      	movs	r3, #64	; 0x40
 8001d12:	e7f4      	b.n	8001cfe <HAL_DMA_IRQHandler+0x52>
 8001d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d18:	e7f1      	b.n	8001cfe <HAL_DMA_IRQHandler+0x52>
 8001d1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d1e:	e7ee      	b.n	8001cfe <HAL_DMA_IRQHandler+0x52>
 8001d20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d24:	e7eb      	b.n	8001cfe <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d26:	2502      	movs	r5, #2
 8001d28:	4095      	lsls	r5, r2
 8001d2a:	4225      	tst	r5, r4
 8001d2c:	d035      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xee>
 8001d2e:	078d      	lsls	r5, r1, #30
 8001d30:	d533      	bpl.n	8001d9a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	0694      	lsls	r4, r2, #26
 8001d36:	d406      	bmi.n	8001d46 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	f022 020a 	bic.w	r2, r2, #10
 8001d3e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001d40:	2201      	movs	r2, #1
 8001d42:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d46:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <HAL_DMA_IRQHandler+0x120>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d019      	beq.n	8001d80 <HAL_DMA_IRQHandler+0xd4>
 8001d4c:	3214      	adds	r2, #20
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d018      	beq.n	8001d84 <HAL_DMA_IRQHandler+0xd8>
 8001d52:	3214      	adds	r2, #20
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d017      	beq.n	8001d88 <HAL_DMA_IRQHandler+0xdc>
 8001d58:	3214      	adds	r2, #20
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d017      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xe2>
 8001d5e:	3214      	adds	r2, #20
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d017      	beq.n	8001d94 <HAL_DMA_IRQHandler+0xe8>
 8001d64:	3214      	adds	r2, #20
 8001d66:	4293      	cmp	r3, r2
 8001d68:	bf0c      	ite	eq
 8001d6a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001d6e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_DMA_IRQHandler+0x124>)
 8001d74:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001d76:	2300      	movs	r3, #0
 8001d78:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001d7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d7e:	e7c1      	b.n	8001d04 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d80:	2302      	movs	r3, #2
 8001d82:	e7f6      	b.n	8001d72 <HAL_DMA_IRQHandler+0xc6>
 8001d84:	2320      	movs	r3, #32
 8001d86:	e7f4      	b.n	8001d72 <HAL_DMA_IRQHandler+0xc6>
 8001d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d8c:	e7f1      	b.n	8001d72 <HAL_DMA_IRQHandler+0xc6>
 8001d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d92:	e7ee      	b.n	8001d72 <HAL_DMA_IRQHandler+0xc6>
 8001d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d98:	e7eb      	b.n	8001d72 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d9a:	2508      	movs	r5, #8
 8001d9c:	4095      	lsls	r5, r2
 8001d9e:	4225      	tst	r5, r4
 8001da0:	d011      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x11a>
 8001da2:	0709      	lsls	r1, r1, #28
 8001da4:	d50f      	bpl.n	8001dc6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da6:	6819      	ldr	r1, [r3, #0]
 8001da8:	f021 010e 	bic.w	r1, r1, #14
 8001dac:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dae:	2301      	movs	r3, #1
 8001db0:	fa03 f202 	lsl.w	r2, r3, r2
 8001db4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001db6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001db8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001dc2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001dc4:	e79e      	b.n	8001d04 <HAL_DMA_IRQHandler+0x58>
}
 8001dc6:	bc70      	pop	{r4, r5, r6}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40020008 	.word	0x40020008
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001dd8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	4616      	mov	r6, r2
 8001ddc:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dde:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001f84 <HAL_GPIO_Init+0x1b0>
 8001de2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001f88 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001de6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001dec:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001df4:	45a0      	cmp	r8, r4
 8001df6:	d17f      	bne.n	8001ef8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001df8:	684d      	ldr	r5, [r1, #4]
 8001dfa:	2d12      	cmp	r5, #18
 8001dfc:	f000 80af 	beq.w	8001f5e <HAL_GPIO_Init+0x18a>
 8001e00:	f200 8088 	bhi.w	8001f14 <HAL_GPIO_Init+0x140>
 8001e04:	2d02      	cmp	r5, #2
 8001e06:	f000 80a7 	beq.w	8001f58 <HAL_GPIO_Init+0x184>
 8001e0a:	d87c      	bhi.n	8001f06 <HAL_GPIO_Init+0x132>
 8001e0c:	2d00      	cmp	r5, #0
 8001e0e:	f000 808e 	beq.w	8001f2e <HAL_GPIO_Init+0x15a>
 8001e12:	2d01      	cmp	r5, #1
 8001e14:	f000 809e 	beq.w	8001f54 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e18:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e1c:	2cff      	cmp	r4, #255	; 0xff
 8001e1e:	bf93      	iteet	ls
 8001e20:	4682      	movls	sl, r0
 8001e22:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001e26:	3d08      	subhi	r5, #8
 8001e28:	f8d0 b000 	ldrls.w	fp, [r0]
 8001e2c:	bf92      	itee	ls
 8001e2e:	00b5      	lslls	r5, r6, #2
 8001e30:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001e34:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e36:	fa09 f805 	lsl.w	r8, r9, r5
 8001e3a:	ea2b 0808 	bic.w	r8, fp, r8
 8001e3e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e42:	bf88      	it	hi
 8001e44:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e48:	ea48 0505 	orr.w	r5, r8, r5
 8001e4c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e50:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001e54:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001e58:	d04e      	beq.n	8001ef8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5a:	4d47      	ldr	r5, [pc, #284]	; (8001f78 <HAL_GPIO_Init+0x1a4>)
 8001e5c:	4f46      	ldr	r7, [pc, #280]	; (8001f78 <HAL_GPIO_Init+0x1a4>)
 8001e5e:	69ad      	ldr	r5, [r5, #24]
 8001e60:	f026 0803 	bic.w	r8, r6, #3
 8001e64:	f045 0501 	orr.w	r5, r5, #1
 8001e68:	61bd      	str	r5, [r7, #24]
 8001e6a:	69bd      	ldr	r5, [r7, #24]
 8001e6c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001e70:	f005 0501 	and.w	r5, r5, #1
 8001e74:	9501      	str	r5, [sp, #4]
 8001e76:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e7a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e7e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e80:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001e84:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e88:	fa09 f90b 	lsl.w	r9, r9, fp
 8001e8c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e90:	4d3a      	ldr	r5, [pc, #232]	; (8001f7c <HAL_GPIO_Init+0x1a8>)
 8001e92:	42a8      	cmp	r0, r5
 8001e94:	d068      	beq.n	8001f68 <HAL_GPIO_Init+0x194>
 8001e96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e9a:	42a8      	cmp	r0, r5
 8001e9c:	d066      	beq.n	8001f6c <HAL_GPIO_Init+0x198>
 8001e9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ea2:	42a8      	cmp	r0, r5
 8001ea4:	d064      	beq.n	8001f70 <HAL_GPIO_Init+0x19c>
 8001ea6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eaa:	42a8      	cmp	r0, r5
 8001eac:	bf0c      	ite	eq
 8001eae:	2503      	moveq	r5, #3
 8001eb0:	2504      	movne	r5, #4
 8001eb2:	fa05 f50b 	lsl.w	r5, r5, fp
 8001eb6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001eba:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ebe:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001ec4:	bf14      	ite	ne
 8001ec6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ec8:	43a5      	biceq	r5, r4
 8001eca:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ecc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ece:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed2:	bf14      	ite	ne
 8001ed4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ed6:	43a5      	biceq	r5, r4
 8001ed8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eda:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001edc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ee0:	bf14      	ite	ne
 8001ee2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ee4:	43a5      	biceq	r5, r4
 8001ee6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ee8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eea:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eee:	bf14      	ite	ne
 8001ef0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ef2:	ea25 0404 	biceq.w	r4, r5, r4
 8001ef6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001ef8:	3601      	adds	r6, #1
 8001efa:	2e10      	cmp	r6, #16
 8001efc:	f47f af73 	bne.w	8001de6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001f00:	b003      	add	sp, #12
 8001f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001f06:	2d03      	cmp	r5, #3
 8001f08:	d022      	beq.n	8001f50 <HAL_GPIO_Init+0x17c>
 8001f0a:	2d11      	cmp	r5, #17
 8001f0c:	d184      	bne.n	8001e18 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f0e:	68ca      	ldr	r2, [r1, #12]
 8001f10:	3204      	adds	r2, #4
          break;
 8001f12:	e781      	b.n	8001e18 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001f14:	4f1a      	ldr	r7, [pc, #104]	; (8001f80 <HAL_GPIO_Init+0x1ac>)
 8001f16:	42bd      	cmp	r5, r7
 8001f18:	d009      	beq.n	8001f2e <HAL_GPIO_Init+0x15a>
 8001f1a:	d812      	bhi.n	8001f42 <HAL_GPIO_Init+0x16e>
 8001f1c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001f8c <HAL_GPIO_Init+0x1b8>
 8001f20:	454d      	cmp	r5, r9
 8001f22:	d004      	beq.n	8001f2e <HAL_GPIO_Init+0x15a>
 8001f24:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001f28:	454d      	cmp	r5, r9
 8001f2a:	f47f af75 	bne.w	8001e18 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f2e:	688a      	ldr	r2, [r1, #8]
 8001f30:	b1c2      	cbz	r2, 8001f64 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f32:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001f34:	bf0c      	ite	eq
 8001f36:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001f3a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f3e:	2208      	movs	r2, #8
 8001f40:	e76a      	b.n	8001e18 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001f42:	4575      	cmp	r5, lr
 8001f44:	d0f3      	beq.n	8001f2e <HAL_GPIO_Init+0x15a>
 8001f46:	4565      	cmp	r5, ip
 8001f48:	d0f1      	beq.n	8001f2e <HAL_GPIO_Init+0x15a>
 8001f4a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001f90 <HAL_GPIO_Init+0x1bc>
 8001f4e:	e7eb      	b.n	8001f28 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f50:	2200      	movs	r2, #0
 8001f52:	e761      	b.n	8001e18 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f54:	68ca      	ldr	r2, [r1, #12]
          break;
 8001f56:	e75f      	b.n	8001e18 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f58:	68ca      	ldr	r2, [r1, #12]
 8001f5a:	3208      	adds	r2, #8
          break;
 8001f5c:	e75c      	b.n	8001e18 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f5e:	68ca      	ldr	r2, [r1, #12]
 8001f60:	320c      	adds	r2, #12
          break;
 8001f62:	e759      	b.n	8001e18 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f64:	2204      	movs	r2, #4
 8001f66:	e757      	b.n	8001e18 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f68:	2500      	movs	r5, #0
 8001f6a:	e7a2      	b.n	8001eb2 <HAL_GPIO_Init+0xde>
 8001f6c:	2501      	movs	r5, #1
 8001f6e:	e7a0      	b.n	8001eb2 <HAL_GPIO_Init+0xde>
 8001f70:	2502      	movs	r5, #2
 8001f72:	e79e      	b.n	8001eb2 <HAL_GPIO_Init+0xde>
 8001f74:	40010400 	.word	0x40010400
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	10210000 	.word	0x10210000
 8001f84:	10310000 	.word	0x10310000
 8001f88:	10320000 	.word	0x10320000
 8001f8c:	10110000 	.word	0x10110000
 8001f90:	10220000 	.word	0x10220000

08001f94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f94:	b10a      	cbz	r2, 8001f9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f96:	6101      	str	r1, [r0, #16]
 8001f98:	4770      	bx	lr
 8001f9a:	0409      	lsls	r1, r1, #16
 8001f9c:	e7fb      	b.n	8001f96 <HAL_GPIO_WritePin+0x2>

08001f9e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001f9e:	68c3      	ldr	r3, [r0, #12]
 8001fa0:	4059      	eors	r1, r3
 8001fa2:	60c1      	str	r1, [r0, #12]
 8001fa4:	4770      	bx	lr

08001fa6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fa6:	6802      	ldr	r2, [r0, #0]
 8001fa8:	6953      	ldr	r3, [r2, #20]
 8001faa:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001fae:	d00d      	beq.n	8001fcc <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001fb4:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001fb6:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001fb8:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001fba:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001fc4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001fc8:	2001      	movs	r0, #1
 8001fca:	4770      	bx	lr
  }
  return HAL_OK;
 8001fcc:	4618      	mov	r0, r3
}
 8001fce:	4770      	bx	lr

08001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	4617      	mov	r7, r2
 8001fd8:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fda:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001fde:	b28e      	uxth	r6, r1
 8001fe0:	6825      	ldr	r5, [r4, #0]
 8001fe2:	f1b8 0f01 	cmp.w	r8, #1
 8001fe6:	bf0c      	ite	eq
 8001fe8:	696b      	ldreq	r3, [r5, #20]
 8001fea:	69ab      	ldrne	r3, [r5, #24]
 8001fec:	ea36 0303 	bics.w	r3, r6, r3
 8001ff0:	bf14      	ite	ne
 8001ff2:	2001      	movne	r0, #1
 8001ff4:	2000      	moveq	r0, #0
 8001ff6:	b908      	cbnz	r0, 8001ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ffc:	696b      	ldr	r3, [r5, #20]
 8001ffe:	055a      	lsls	r2, r3, #21
 8002000:	d512      	bpl.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002002:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8002004:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002010:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002012:	2304      	movs	r3, #4
 8002014:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002016:	2300      	movs	r3, #0
      return HAL_ERROR;
 8002018:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800201a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800201c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8002020:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8002024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002028:	1c7b      	adds	r3, r7, #1
 800202a:	d0d9      	beq.n	8001fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800202c:	b94f      	cbnz	r7, 8002042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800202e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8002030:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002032:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8002034:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002038:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800203c:	2003      	movs	r0, #3
 800203e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002042:	f7ff fa87 	bl	8001554 <HAL_GetTick>
 8002046:	eba0 0009 	sub.w	r0, r0, r9
 800204a:	4287      	cmp	r7, r0
 800204c:	d2c8      	bcs.n	8001fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800204e:	e7ee      	b.n	800202e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08002050 <I2C_WaitOnFlagUntilTimeout>:
{
 8002050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002054:	4604      	mov	r4, r0
 8002056:	4690      	mov	r8, r2
 8002058:	461f      	mov	r7, r3
 800205a:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800205c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8002060:	b28d      	uxth	r5, r1
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	f1b9 0f01 	cmp.w	r9, #1
 8002068:	bf0c      	ite	eq
 800206a:	695b      	ldreq	r3, [r3, #20]
 800206c:	699b      	ldrne	r3, [r3, #24]
 800206e:	ea35 0303 	bics.w	r3, r5, r3
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	4543      	cmp	r3, r8
 800207a:	d002      	beq.n	8002082 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800207c:	2000      	movs	r0, #0
}
 800207e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002082:	1c7b      	adds	r3, r7, #1
 8002084:	d0ed      	beq.n	8002062 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002086:	b95f      	cbnz	r7, 80020a0 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002088:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800208a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800208c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800208e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002092:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002096:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002098:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800209c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80020a0:	f7ff fa58 	bl	8001554 <HAL_GetTick>
 80020a4:	1b80      	subs	r0, r0, r6
 80020a6:	4287      	cmp	r7, r0
 80020a8:	d2db      	bcs.n	8002062 <I2C_WaitOnFlagUntilTimeout+0x12>
 80020aa:	e7ed      	b.n	8002088 <I2C_WaitOnFlagUntilTimeout+0x38>

080020ac <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	4604      	mov	r4, r0
 80020b0:	460d      	mov	r5, r1
 80020b2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	061b      	lsls	r3, r3, #24
 80020ba:	d501      	bpl.n	80020c0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80020bc:	2000      	movs	r0, #0
 80020be:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020c0:	4620      	mov	r0, r4
 80020c2:	f7ff ff70 	bl	8001fa6 <I2C_IsAcknowledgeFailed>
 80020c6:	b9a8      	cbnz	r0, 80020f4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80020c8:	1c6a      	adds	r2, r5, #1
 80020ca:	d0f3      	beq.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020cc:	b965      	cbnz	r5, 80020e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80020d0:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d2:	f043 0320 	orr.w	r3, r3, #32
 80020d6:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80020d8:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80020da:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80020dc:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80020de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80020e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80020e6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020e8:	f7ff fa34 	bl	8001554 <HAL_GetTick>
 80020ec:	1b80      	subs	r0, r0, r6
 80020ee:	4285      	cmp	r5, r0
 80020f0:	d2e0      	bcs.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80020f2:	e7ec      	b.n	80020ce <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80020f4:	2001      	movs	r0, #1
}
 80020f6:	bd70      	pop	{r4, r5, r6, pc}

080020f8 <I2C_RequestMemoryWrite>:
{
 80020f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80020fc:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80020fe:	6802      	ldr	r2, [r0, #0]
{
 8002100:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002102:	6813      	ldr	r3, [r2, #0]
{
 8002104:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]
{
 800210c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800210e:	9600      	str	r6, [sp, #0]
 8002110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002112:	2200      	movs	r2, #0
 8002114:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002118:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800211a:	f7ff ff99 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 800211e:	b968      	cbnz	r0, 800213c <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002126:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800212a:	4633      	mov	r3, r6
 800212c:	491a      	ldr	r1, [pc, #104]	; (8002198 <I2C_RequestMemoryWrite+0xa0>)
 800212e:	4620      	mov	r0, r4
 8002130:	f7ff ff4e 	bl	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002134:	b130      	cbz	r0, 8002144 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002138:	2b04      	cmp	r3, #4
 800213a:	d018      	beq.n	800216e <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 800213c:	2003      	movs	r0, #3
}
 800213e:	b004      	add	sp, #16
 8002140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	9003      	str	r0, [sp, #12]
 8002148:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800214a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214c:	9203      	str	r2, [sp, #12]
 800214e:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002150:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002152:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002154:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002156:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002158:	f7ff ffa8 	bl	80020ac <I2C_WaitOnTXEFlagUntilTimeout>
 800215c:	b148      	cbz	r0, 8002172 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002160:	2b04      	cmp	r3, #4
 8002162:	d1eb      	bne.n	800213c <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002164:	6822      	ldr	r2, [r4, #0]
 8002166:	6813      	ldr	r3, [r2, #0]
 8002168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800216e:	2001      	movs	r0, #1
 8002170:	e7e5      	b.n	800213e <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002172:	f1b8 0f01 	cmp.w	r8, #1
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	d102      	bne.n	8002180 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800217a:	b2ed      	uxtb	r5, r5
 800217c:	611d      	str	r5, [r3, #16]
 800217e:	e7de      	b.n	800213e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002180:	0a2a      	lsrs	r2, r5, #8
 8002182:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002184:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002186:	4632      	mov	r2, r6
 8002188:	4620      	mov	r0, r4
 800218a:	f7ff ff8f 	bl	80020ac <I2C_WaitOnTXEFlagUntilTimeout>
 800218e:	2800      	cmp	r0, #0
 8002190:	d1e5      	bne.n	800215e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	e7f1      	b.n	800217a <I2C_RequestMemoryWrite+0x82>
 8002196:	bf00      	nop
 8002198:	00010002 	.word	0x00010002

0800219c <I2C_RequestMemoryRead>:
{
 800219c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80021a0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80021a2:	6803      	ldr	r3, [r0, #0]
{
 80021a4:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80021a6:	681a      	ldr	r2, [r3, #0]
{
 80021a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80021aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80021b0:	681a      	ldr	r2, [r3, #0]
{
 80021b2:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80021b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021b8:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021be:	9500      	str	r5, [sp, #0]
 80021c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021c2:	2200      	movs	r2, #0
{
 80021c4:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021c6:	f7ff ff43 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 80021ca:	b980      	cbnz	r0, 80021ee <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	b2ff      	uxtb	r7, r7
 80021d0:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80021d4:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021d6:	492d      	ldr	r1, [pc, #180]	; (800228c <I2C_RequestMemoryRead+0xf0>)
 80021d8:	462b      	mov	r3, r5
 80021da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff fef7 	bl	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021e2:	b140      	cbz	r0, 80021f6 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d101      	bne.n	80021ee <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 80021ea:	2001      	movs	r0, #1
 80021ec:	e000      	b.n	80021f0 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 80021ee:	2003      	movs	r0, #3
}
 80021f0:	b004      	add	sp, #16
 80021f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	9003      	str	r0, [sp, #12]
 80021fa:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fc:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	9203      	str	r2, [sp, #12]
 8002200:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002202:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002204:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002206:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002208:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800220a:	f7ff ff4f 	bl	80020ac <I2C_WaitOnTXEFlagUntilTimeout>
 800220e:	b140      	cbz	r0, 8002222 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002210:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002212:	2b04      	cmp	r3, #4
 8002214:	d1eb      	bne.n	80021ee <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002216:	6822      	ldr	r2, [r4, #0]
 8002218:	6813      	ldr	r3, [r2, #0]
 800221a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	e7e3      	b.n	80021ea <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002222:	f1b8 0f01 	cmp.w	r8, #1
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	d124      	bne.n	8002274 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800222a:	b2f6      	uxtb	r6, r6
 800222c:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800222e:	462a      	mov	r2, r5
 8002230:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002232:	4620      	mov	r0, r4
 8002234:	f7ff ff3a 	bl	80020ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002238:	4602      	mov	r2, r0
 800223a:	2800      	cmp	r0, #0
 800223c:	d1e8      	bne.n	8002210 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800223e:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002240:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002242:	680b      	ldr	r3, [r1, #0]
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800224a:	9500      	str	r5, [sp, #0]
 800224c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800224e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002252:	f7ff fefd 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 8002256:	2800      	cmp	r0, #0
 8002258:	d1c9      	bne.n	80021ee <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	f047 0701 	orr.w	r7, r7, #1
 8002260:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002264:	462b      	mov	r3, r5
 8002266:	4909      	ldr	r1, [pc, #36]	; (800228c <I2C_RequestMemoryRead+0xf0>)
 8002268:	4620      	mov	r0, r4
 800226a:	f7ff feb1 	bl	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800226e:	2800      	cmp	r0, #0
 8002270:	d1b8      	bne.n	80021e4 <I2C_RequestMemoryRead+0x48>
 8002272:	e7bd      	b.n	80021f0 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002274:	0a32      	lsrs	r2, r6, #8
 8002276:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002278:	990a      	ldr	r1, [sp, #40]	; 0x28
 800227a:	462a      	mov	r2, r5
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff ff15 	bl	80020ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002282:	2800      	cmp	r0, #0
 8002284:	d1c4      	bne.n	8002210 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	e7cf      	b.n	800222a <I2C_RequestMemoryRead+0x8e>
 800228a:	bf00      	nop
 800228c:	00010002 	.word	0x00010002

08002290 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4604      	mov	r4, r0
 8002294:	460d      	mov	r5, r1
 8002296:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002298:	6820      	ldr	r0, [r4, #0]
 800229a:	6943      	ldr	r3, [r0, #20]
 800229c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80022a0:	d001      	beq.n	80022a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80022a2:	2000      	movs	r0, #0
}
 80022a4:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022a6:	6942      	ldr	r2, [r0, #20]
 80022a8:	06d2      	lsls	r2, r2, #27
 80022aa:	d50b      	bpl.n	80022c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ac:	f06f 0210 	mvn.w	r2, #16
 80022b0:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80022b2:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b4:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80022b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80022ba:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80022be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80022c4:	b95d      	cbnz	r5, 80022de <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80022c8:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ca:	f043 0320 	orr.w	r3, r3, #32
 80022ce:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80022d0:	2320      	movs	r3, #32
 80022d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80022d6:	2300      	movs	r3, #0
 80022d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80022dc:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80022de:	f7ff f939 	bl	8001554 <HAL_GetTick>
 80022e2:	1b80      	subs	r0, r0, r6
 80022e4:	4285      	cmp	r5, r0
 80022e6:	d2d7      	bcs.n	8002298 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80022e8:	e7ed      	b.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080022ea <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80022ea:	b570      	push	{r4, r5, r6, lr}
 80022ec:	4604      	mov	r4, r0
 80022ee:	460d      	mov	r5, r1
 80022f0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	075b      	lsls	r3, r3, #29
 80022f8:	d501      	bpl.n	80022fe <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80022fa:	2000      	movs	r0, #0
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff fe51 	bl	8001fa6 <I2C_IsAcknowledgeFailed>
 8002304:	b9a8      	cbnz	r0, 8002332 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8002306:	1c6a      	adds	r2, r5, #1
 8002308:	d0f3      	beq.n	80022f2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800230a:	b965      	cbnz	r5, 8002326 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800230e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	f043 0320 	orr.w	r3, r3, #32
 8002314:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002316:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8002318:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800231a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800231c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002320:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8002324:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002326:	f7ff f915 	bl	8001554 <HAL_GetTick>
 800232a:	1b80      	subs	r0, r0, r6
 800232c:	4285      	cmp	r5, r0
 800232e:	d2e0      	bcs.n	80022f2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8002330:	e7ec      	b.n	800230c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8002332:	2001      	movs	r0, #1
}
 8002334:	bd70      	pop	{r4, r5, r6, pc}
	...

08002338 <HAL_I2C_Init>:
{
 8002338:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 800233a:	4604      	mov	r4, r0
 800233c:	b908      	cbnz	r0, 8002342 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800233e:	2001      	movs	r0, #1
 8002340:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002342:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002346:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800234a:	b91b      	cbnz	r3, 8002354 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800234c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002350:	f007 f8ce 	bl	80094f0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002354:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002356:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002358:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800235c:	6813      	ldr	r3, [r2, #0]
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002364:	f000 feec 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002368:	6863      	ldr	r3, [r4, #4]
 800236a:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <HAL_I2C_Init+0xf0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d830      	bhi.n	80023d2 <HAL_I2C_Init+0x9a>
 8002370:	4a2e      	ldr	r2, [pc, #184]	; (800242c <HAL_I2C_Init+0xf4>)
 8002372:	4290      	cmp	r0, r2
 8002374:	d9e3      	bls.n	800233e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8002376:	4a2e      	ldr	r2, [pc, #184]	; (8002430 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8002378:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800237a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800237e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002380:	3201      	adds	r2, #1
 8002382:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002384:	4a28      	ldr	r2, [pc, #160]	; (8002428 <HAL_I2C_Init+0xf0>)
 8002386:	3801      	subs	r0, #1
 8002388:	4293      	cmp	r3, r2
 800238a:	d832      	bhi.n	80023f2 <HAL_I2C_Init+0xba>
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002392:	1c43      	adds	r3, r0, #1
 8002394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002398:	2b04      	cmp	r3, #4
 800239a:	bf38      	it	cc
 800239c:	2304      	movcc	r3, #4
 800239e:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023a0:	6a22      	ldr	r2, [r4, #32]
 80023a2:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a4:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80023aa:	68e2      	ldr	r2, [r4, #12]
 80023ac:	6923      	ldr	r3, [r4, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80023b2:	69a2      	ldr	r2, [r4, #24]
 80023b4:	6963      	ldr	r3, [r4, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80023ba:	680b      	ldr	r3, [r1, #0]
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80023c2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ca:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023cc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80023d0:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_I2C_Init+0xfc>)
 80023d4:	4290      	cmp	r0, r2
 80023d6:	d9b2      	bls.n	800233e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80023d8:	4d15      	ldr	r5, [pc, #84]	; (8002430 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80023da:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80023de:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80023e2:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80023e4:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80023e6:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80023e8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80023ec:	fbb2 f2f5 	udiv	r2, r2, r5
 80023f0:	e7c6      	b.n	8002380 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80023f2:	68a2      	ldr	r2, [r4, #8]
 80023f4:	b952      	cbnz	r2, 800240c <HAL_I2C_Init+0xd4>
 80023f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80023fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80023fe:	1c43      	adds	r3, r0, #1
 8002400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002404:	b16b      	cbz	r3, 8002422 <HAL_I2C_Init+0xea>
 8002406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240a:	e7c8      	b.n	800239e <HAL_I2C_Init+0x66>
 800240c:	2219      	movs	r2, #25
 800240e:	4353      	muls	r3, r2
 8002410:	fbb0 f0f3 	udiv	r0, r0, r3
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241a:	b113      	cbz	r3, 8002422 <HAL_I2C_Init+0xea>
 800241c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002420:	e7bd      	b.n	800239e <HAL_I2C_Init+0x66>
 8002422:	2301      	movs	r3, #1
 8002424:	e7bb      	b.n	800239e <HAL_I2C_Init+0x66>
 8002426:	bf00      	nop
 8002428:	000186a0 	.word	0x000186a0
 800242c:	001e847f 	.word	0x001e847f
 8002430:	000f4240 	.word	0x000f4240
 8002434:	003d08ff 	.word	0x003d08ff

08002438 <HAL_I2C_Master_Transmit>:
{
 8002438:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800243c:	4604      	mov	r4, r0
 800243e:	461f      	mov	r7, r3
 8002440:	460d      	mov	r5, r1
 8002442:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8002444:	f7ff f886 	bl	8001554 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002448:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800244c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800244e:	2b20      	cmp	r3, #32
 8002450:	d004      	beq.n	800245c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8002452:	2502      	movs	r5, #2
}
 8002454:	4628      	mov	r0, r5
 8002456:	b004      	add	sp, #16
 8002458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800245c:	9000      	str	r0, [sp, #0]
 800245e:	2319      	movs	r3, #25
 8002460:	2201      	movs	r2, #1
 8002462:	495d      	ldr	r1, [pc, #372]	; (80025d8 <HAL_I2C_Master_Transmit+0x1a0>)
 8002464:	4620      	mov	r0, r4
 8002466:	f7ff fdf3 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 800246a:	2800      	cmp	r0, #0
 800246c:	d1f1      	bne.n	8002452 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800246e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002472:	2b01      	cmp	r3, #1
 8002474:	d0ed      	beq.n	8002452 <HAL_I2C_Master_Transmit+0x1a>
 8002476:	2301      	movs	r3, #1
 8002478:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800247c:	6823      	ldr	r3, [r4, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002482:	bf5e      	ittt	pl
 8002484:	681a      	ldrpl	r2, [r3, #0]
 8002486:	f042 0201 	orrpl.w	r2, r2, #1
 800248a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002492:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002494:	2221      	movs	r2, #33	; 0x21
 8002496:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800249a:	2210      	movs	r2, #16
 800249c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a0:	2200      	movs	r2, #0
 80024a2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80024a8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024aa:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80024ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80024ae:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80024b2:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024b6:	2a04      	cmp	r2, #4
 80024b8:	d004      	beq.n	80024c4 <HAL_I2C_Master_Transmit+0x8c>
 80024ba:	2a01      	cmp	r2, #1
 80024bc:	d002      	beq.n	80024c4 <HAL_I2C_Master_Transmit+0x8c>
 80024be:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80024c2:	d104      	bne.n	80024ce <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e002      	b.n	80024d4 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80024d0:	2a12      	cmp	r2, #18
 80024d2:	d0f7      	beq.n	80024c4 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024d4:	9600      	str	r6, [sp, #0]
 80024d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024d8:	2200      	movs	r2, #0
 80024da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff fdb6 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 80024e4:	bb28      	cbnz	r0, 8002532 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e6:	6923      	ldr	r3, [r4, #16]
 80024e8:	6822      	ldr	r2, [r4, #0]
 80024ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ee:	d112      	bne.n	8002516 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024f0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80024f4:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f6:	4633      	mov	r3, r6
 80024f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024fa:	4938      	ldr	r1, [pc, #224]	; (80025dc <HAL_I2C_Master_Transmit+0x1a4>)
 80024fc:	4620      	mov	r0, r4
 80024fe:	f7ff fd67 	bl	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002502:	4605      	mov	r5, r0
 8002504:	b9a0      	cbnz	r0, 8002530 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	9003      	str	r0, [sp, #12]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	9203      	str	r2, [sp, #12]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	9303      	str	r3, [sp, #12]
 8002512:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8002514:	e050      	b.n	80025b8 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002516:	11eb      	asrs	r3, r5, #7
 8002518:	f003 0306 	and.w	r3, r3, #6
 800251c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002520:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002522:	492f      	ldr	r1, [pc, #188]	; (80025e0 <HAL_I2C_Master_Transmit+0x1a8>)
 8002524:	4633      	mov	r3, r6
 8002526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002528:	4620      	mov	r0, r4
 800252a:	f7ff fd51 	bl	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800252e:	b148      	cbz	r0, 8002544 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002530:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002534:	2b04      	cmp	r3, #4
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 800253c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002540:	2501      	movs	r5, #1
 8002542:	e787      	b.n	8002454 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	b2ed      	uxtb	r5, r5
 8002548:	611d      	str	r5, [r3, #16]
 800254a:	e7d4      	b.n	80024f6 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 800254c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8002550:	2503      	movs	r5, #3
 8002552:	e77f      	b.n	8002454 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002554:	4632      	mov	r2, r6
 8002556:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002558:	4620      	mov	r0, r4
 800255a:	f7ff fda7 	bl	80020ac <I2C_WaitOnTXEFlagUntilTimeout>
 800255e:	b140      	cbz	r0, 8002572 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002562:	2b04      	cmp	r3, #4
 8002564:	d1f4      	bne.n	8002550 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002566:	6822      	ldr	r2, [r4, #0]
 8002568:	6813      	ldr	r3, [r2, #0]
 800256a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e7e6      	b.n	8002540 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002572:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002574:	6820      	ldr	r0, [r4, #0]
 8002576:	1c4b      	adds	r3, r1, #1
 8002578:	6263      	str	r3, [r4, #36]	; 0x24
 800257a:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 800257c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800257e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8002580:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002582:	3b01      	subs	r3, #1
 8002584:	b29b      	uxth	r3, r3
 8002586:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002588:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800258a:	1e53      	subs	r3, r2, #1
 800258c:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800258e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8002590:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002592:	d50a      	bpl.n	80025aa <HAL_I2C_Master_Transmit+0x172>
 8002594:	b14b      	cbz	r3, 80025aa <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002596:	1c8b      	adds	r3, r1, #2
 8002598:	6263      	str	r3, [r4, #36]	; 0x24
 800259a:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 800259c:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800259e:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80025a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80025a2:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025aa:	4632      	mov	r2, r6
 80025ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80025ae:	4620      	mov	r0, r4
 80025b0:	f7ff fe9b 	bl	80022ea <I2C_WaitOnBTFFlagUntilTimeout>
 80025b4:	2800      	cmp	r0, #0
 80025b6:	d1d3      	bne.n	8002560 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80025b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1ca      	bne.n	8002554 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025be:	6821      	ldr	r1, [r4, #0]
 80025c0:	680a      	ldr	r2, [r1, #0]
 80025c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80025ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80025d6:	e73d      	b.n	8002454 <HAL_I2C_Master_Transmit+0x1c>
 80025d8:	00100002 	.word	0x00100002
 80025dc:	00010002 	.word	0x00010002
 80025e0:	00010008 	.word	0x00010008

080025e4 <HAL_I2C_Master_Receive>:
{
 80025e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025e8:	4604      	mov	r4, r0
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	4698      	mov	r8, r3
 80025ee:	460d      	mov	r5, r1
 80025f0:	4691      	mov	r9, r2
 80025f2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80025f4:	f7fe ffae 	bl	8001554 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80025f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80025fc:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d004      	beq.n	800260c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8002602:	2502      	movs	r5, #2
}
 8002604:	4628      	mov	r0, r5
 8002606:	b009      	add	sp, #36	; 0x24
 8002608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800260c:	9000      	str	r0, [sp, #0]
 800260e:	2319      	movs	r3, #25
 8002610:	2201      	movs	r2, #1
 8002612:	49a2      	ldr	r1, [pc, #648]	; (800289c <HAL_I2C_Master_Receive+0x2b8>)
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff fd1b 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 800261a:	2800      	cmp	r0, #0
 800261c:	d1f1      	bne.n	8002602 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800261e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002622:	2b01      	cmp	r3, #1
 8002624:	d0ed      	beq.n	8002602 <HAL_I2C_Master_Receive+0x1e>
 8002626:	2301      	movs	r3, #1
 8002628:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002632:	bf5e      	ittt	pl
 8002634:	681a      	ldrpl	r2, [r3, #0]
 8002636:	f042 0201 	orrpl.w	r2, r2, #1
 800263a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002642:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002644:	2222      	movs	r2, #34	; 0x22
 8002646:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800264a:	2210      	movs	r2, #16
 800264c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002650:	2200      	movs	r2, #0
 8002652:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002654:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8002658:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800265c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800265e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002660:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002664:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002666:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002668:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800266a:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800266c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002670:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002672:	d004      	beq.n	800267e <HAL_I2C_Master_Receive+0x9a>
 8002674:	2a01      	cmp	r2, #1
 8002676:	d002      	beq.n	800267e <HAL_I2C_Master_Receive+0x9a>
 8002678:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800267c:	d104      	bne.n	8002688 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e002      	b.n	800268e <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002688:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800268a:	2a11      	cmp	r2, #17
 800268c:	d0f7      	beq.n	800267e <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800268e:	9600      	str	r6, [sp, #0]
 8002690:	463b      	mov	r3, r7
 8002692:	2200      	movs	r2, #0
 8002694:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002698:	4620      	mov	r0, r4
 800269a:	f7ff fcd9 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 800269e:	2800      	cmp	r0, #0
 80026a0:	d14d      	bne.n	800273e <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a2:	6923      	ldr	r3, [r4, #16]
 80026a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	d139      	bne.n	8002720 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026ac:	f045 0501 	orr.w	r5, r5, #1
 80026b0:	b2ed      	uxtb	r5, r5
 80026b2:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b4:	4633      	mov	r3, r6
 80026b6:	463a      	mov	r2, r7
 80026b8:	4979      	ldr	r1, [pc, #484]	; (80028a0 <HAL_I2C_Master_Receive+0x2bc>)
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7ff fc88 	bl	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c0:	4605      	mov	r5, r0
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d13a      	bne.n	800273c <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 80026c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	2a00      	cmp	r2, #0
 80026cc:	d069      	beq.n	80027a2 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 80026ce:	2a01      	cmp	r2, #1
 80026d0:	d17a      	bne.n	80027c8 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026da:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	9504      	str	r5, [sp, #16]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	9204      	str	r2, [sp, #16]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	9204      	str	r2, [sp, #16]
 80026e8:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80026f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026f2:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80028a8 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 80026f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d05b      	beq.n	80027b6 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 80026fe:	2b03      	cmp	r3, #3
 8002700:	f200 80d4 	bhi.w	80028ac <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8002704:	2b01      	cmp	r3, #1
 8002706:	d17b      	bne.n	8002800 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002708:	4632      	mov	r2, r6
 800270a:	4639      	mov	r1, r7
 800270c:	4620      	mov	r0, r4
 800270e:	f7ff fdbf 	bl	8002290 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002712:	2800      	cmp	r0, #0
 8002714:	f000 8093 	beq.w	800283e <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002718:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800271a:	2b20      	cmp	r3, #32
 800271c:	d116      	bne.n	800274c <HAL_I2C_Master_Receive+0x168>
 800271e:	e03e      	b.n	800279e <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002720:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8002724:	f008 0806 	and.w	r8, r8, #6
 8002728:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800272c:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800272e:	495d      	ldr	r1, [pc, #372]	; (80028a4 <HAL_I2C_Master_Receive+0x2c0>)
 8002730:	4633      	mov	r3, r6
 8002732:	463a      	mov	r2, r7
 8002734:	4620      	mov	r0, r4
 8002736:	f7ff fc4b 	bl	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273a:	b148      	cbz	r0, 8002750 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800273c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800273e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002740:	2b04      	cmp	r3, #4
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	d128      	bne.n	800279a <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8002748:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 800274c:	2501      	movs	r5, #1
 800274e:	e759      	b.n	8002604 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	b2ed      	uxtb	r5, r5
 8002754:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002756:	463a      	mov	r2, r7
 8002758:	4633      	mov	r3, r6
 800275a:	4951      	ldr	r1, [pc, #324]	; (80028a0 <HAL_I2C_Master_Receive+0x2bc>)
 800275c:	4620      	mov	r0, r4
 800275e:	f7ff fc37 	bl	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002762:	4602      	mov	r2, r0
 8002764:	2800      	cmp	r0, #0
 8002766:	d1e9      	bne.n	800273c <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	9007      	str	r0, [sp, #28]
 800276c:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800276e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002770:	9107      	str	r1, [sp, #28]
 8002772:	6999      	ldr	r1, [r3, #24]
 8002774:	9107      	str	r1, [sp, #28]
 8002776:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800277e:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002780:	9600      	str	r6, [sp, #0]
 8002782:	463b      	mov	r3, r7
 8002784:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002788:	f7ff fc62 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 800278c:	2800      	cmp	r0, #0
 800278e:	d1d6      	bne.n	800273e <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002790:	6822      	ldr	r2, [r4, #0]
 8002792:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8002796:	6113      	str	r3, [r2, #16]
 8002798:	e78c      	b.n	80026b4 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 800279a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 800279e:	2503      	movs	r5, #3
 80027a0:	e730      	b.n	8002604 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	9503      	str	r5, [sp, #12]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	9203      	str	r2, [sp, #12]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	9203      	str	r2, [sp, #12]
 80027ac:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	2320      	movs	r3, #32
 80027b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027bc:	2300      	movs	r3, #0
 80027be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80027c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80027c6:	e71d      	b.n	8002604 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80027c8:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80027ca:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80027cc:	d10e      	bne.n	80027ec <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80027ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	9505      	str	r5, [sp, #20]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	9205      	str	r2, [sp, #20]
 80027de:	699a      	ldr	r2, [r3, #24]
 80027e0:	9205      	str	r2, [sp, #20]
 80027e2:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ea:	e781      	b.n	80026f0 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80027ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027f0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	9506      	str	r5, [sp, #24]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	9206      	str	r2, [sp, #24]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	9306      	str	r3, [sp, #24]
 80027fc:	9b06      	ldr	r3, [sp, #24]
 80027fe:	e779      	b.n	80026f4 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8002800:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002802:	9600      	str	r6, [sp, #0]
 8002804:	463b      	mov	r3, r7
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	4641      	mov	r1, r8
 800280c:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 800280e:	d124      	bne.n	800285a <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002810:	f7ff fc1e 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 8002814:	2800      	cmp	r0, #0
 8002816:	d1c2      	bne.n	800279e <HAL_I2C_Master_Receive+0x1ba>
 8002818:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002822:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002824:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	1c51      	adds	r1, r2, #1
 800282a:	6261      	str	r1, [r4, #36]	; 0x24
 800282c:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800282e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002834:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002836:	3b01      	subs	r3, #1
 8002838:	b29b      	uxth	r3, r3
 800283a:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800283c:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800283e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	6262      	str	r2, [r4, #36]	; 0x24
 8002844:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002846:	6912      	ldr	r2, [r2, #16]
 8002848:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800284a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002850:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002852:	3b01      	subs	r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002858:	e74e      	b.n	80026f8 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800285a:	f7ff fbf9 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 800285e:	4602      	mov	r2, r0
 8002860:	2800      	cmp	r0, #0
 8002862:	d19c      	bne.n	800279e <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002864:	6821      	ldr	r1, [r4, #0]
 8002866:	680b      	ldr	r3, [r1, #0]
 8002868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800286c:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800286e:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002870:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002872:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002874:	1c59      	adds	r1, r3, #1
 8002876:	6261      	str	r1, [r4, #36]	; 0x24
 8002878:	6821      	ldr	r1, [r4, #0]
 800287a:	6909      	ldr	r1, [r1, #16]
 800287c:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 800287e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002880:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8002882:	3b01      	subs	r3, #1
 8002884:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002886:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002888:	4641      	mov	r1, r8
          hi2c->XferCount--;
 800288a:	3b01      	subs	r3, #1
 800288c:	b29b      	uxth	r3, r3
 800288e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002890:	463b      	mov	r3, r7
 8002892:	f7ff fbdd 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 8002896:	2800      	cmp	r0, #0
 8002898:	d0bf      	beq.n	800281a <HAL_I2C_Master_Receive+0x236>
 800289a:	e780      	b.n	800279e <HAL_I2C_Master_Receive+0x1ba>
 800289c:	00100002 	.word	0x00100002
 80028a0:	00010002 	.word	0x00010002
 80028a4:	00010008 	.word	0x00010008
 80028a8:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80028ac:	4632      	mov	r2, r6
 80028ae:	4639      	mov	r1, r7
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7ff fced 	bl	8002290 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	f47f af2e 	bne.w	8002718 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80028bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	6262      	str	r2, [r4, #36]	; 0x24
 80028c2:	6822      	ldr	r2, [r4, #0]
 80028c4:	6912      	ldr	r2, [r2, #16]
 80028c6:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80028c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028ca:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80028cc:	3b01      	subs	r3, #1
 80028ce:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80028d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028d8:	6953      	ldr	r3, [r2, #20]
 80028da:	075b      	lsls	r3, r3, #29
 80028dc:	f57f af0c 	bpl.w	80026f8 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80028e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028e2:	1c59      	adds	r1, r3, #1
 80028e4:	6261      	str	r1, [r4, #36]	; 0x24
 80028e6:	e7ae      	b.n	8002846 <HAL_I2C_Master_Receive+0x262>

080028e8 <HAL_I2C_Mem_Write>:
{
 80028e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80028ec:	4604      	mov	r4, r0
 80028ee:	469a      	mov	sl, r3
 80028f0:	4688      	mov	r8, r1
 80028f2:	4691      	mov	r9, r2
 80028f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 80028f6:	f7fe fe2d 	bl	8001554 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80028fa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80028fe:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002900:	2b20      	cmp	r3, #32
 8002902:	d003      	beq.n	800290c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8002904:	2002      	movs	r0, #2
}
 8002906:	b002      	add	sp, #8
 8002908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800290c:	9000      	str	r0, [sp, #0]
 800290e:	2319      	movs	r3, #25
 8002910:	2201      	movs	r2, #1
 8002912:	493e      	ldr	r1, [pc, #248]	; (8002a0c <HAL_I2C_Mem_Write+0x124>)
 8002914:	4620      	mov	r0, r4
 8002916:	f7ff fb9b 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 800291a:	2800      	cmp	r0, #0
 800291c:	d1f2      	bne.n	8002904 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800291e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002922:	2b01      	cmp	r3, #1
 8002924:	d0ee      	beq.n	8002904 <HAL_I2C_Mem_Write+0x1c>
 8002926:	2301      	movs	r3, #1
 8002928:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800292c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292e:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002930:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002932:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002934:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002936:	bf58      	it	pl
 8002938:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800293a:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 800293c:	bf5c      	itt	pl
 800293e:	f042 0201 	orrpl.w	r2, r2, #1
 8002942:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800294c:	2321      	movs	r3, #33	; 0x21
 800294e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002952:	2340      	movs	r3, #64	; 0x40
 8002954:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8002958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295a:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800295c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800295e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002962:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8002964:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002966:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002968:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800296c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800296e:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8002970:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002972:	4653      	mov	r3, sl
 8002974:	f7ff fbc0 	bl	80020f8 <I2C_RequestMemoryWrite>
 8002978:	2800      	cmp	r0, #0
 800297a:	d02a      	beq.n	80029d2 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800297e:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002982:	2b04      	cmp	r3, #4
 8002984:	d107      	bne.n	8002996 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8002986:	2001      	movs	r0, #1
 8002988:	e7bd      	b.n	8002906 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298a:	f7ff fb8f 	bl	80020ac <I2C_WaitOnTXEFlagUntilTimeout>
 800298e:	b120      	cbz	r0, 800299a <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002990:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002992:	2b04      	cmp	r3, #4
 8002994:	d034      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8002996:	2003      	movs	r0, #3
 8002998:	e7b5      	b.n	8002906 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800299a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800299c:	6827      	ldr	r7, [r4, #0]
 800299e:	1c4b      	adds	r3, r1, #1
 80029a0:	6263      	str	r3, [r4, #36]	; 0x24
 80029a2:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80029a4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80029a6:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 80029a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80029aa:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029b2:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 80029b4:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029b6:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80029b8:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029ba:	d50a      	bpl.n	80029d2 <HAL_I2C_Mem_Write+0xea>
 80029bc:	b148      	cbz	r0, 80029d2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80029be:	1c8b      	adds	r3, r1, #2
 80029c0:	6263      	str	r3, [r4, #36]	; 0x24
 80029c2:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80029c4:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80029c6:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 80029c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80029ca:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80029d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d4:	462a      	mov	r2, r5
 80029d6:	4631      	mov	r1, r6
 80029d8:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1d5      	bne.n	800298a <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029de:	f7ff fc84 	bl	80022ea <I2C_WaitOnBTFFlagUntilTimeout>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d1d4      	bne.n	8002990 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	6813      	ldr	r3, [r2, #0]
 80029ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ee:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80029f2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80029f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80029fe:	e782      	b.n	8002906 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a00:	6822      	ldr	r2, [r4, #0]
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e7bc      	b.n	8002986 <HAL_I2C_Mem_Write+0x9e>
 8002a0c:	00100002 	.word	0x00100002
 8002a10:	ffff0000 	.word	0xffff0000

08002a14 <HAL_I2C_Mem_Read>:
{
 8002a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a18:	4604      	mov	r4, r0
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	469a      	mov	sl, r3
 8002a1e:	460d      	mov	r5, r1
 8002a20:	4691      	mov	r9, r2
 8002a22:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002a24:	f7fe fd96 	bl	8001554 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002a28:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8002a2c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d004      	beq.n	8002a3c <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8002a32:	2502      	movs	r5, #2
}
 8002a34:	4628      	mov	r0, r5
 8002a36:	b006      	add	sp, #24
 8002a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a3c:	9000      	str	r0, [sp, #0]
 8002a3e:	2319      	movs	r3, #25
 8002a40:	2201      	movs	r2, #1
 8002a42:	4981      	ldr	r1, [pc, #516]	; (8002c48 <HAL_I2C_Mem_Read+0x234>)
 8002a44:	4620      	mov	r0, r4
 8002a46:	f7ff fb03 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d1f1      	bne.n	8002a32 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8002a4e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d0ed      	beq.n	8002a32 <HAL_I2C_Mem_Read+0x1e>
 8002a56:	2301      	movs	r3, #1
 8002a58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a5c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5e:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a62:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a64:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a66:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002a68:	bf58      	it	pl
 8002a6a:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a6c:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8002a6e:	bf5c      	itt	pl
 8002a70:	f042 0201 	orrpl.w	r2, r2, #1
 8002a74:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a7e:	2322      	movs	r3, #34	; 0x22
 8002a80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a84:	2340      	movs	r3, #64	; 0x40
 8002a86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8002a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002a90:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a92:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a96:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 8002a98:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a9a:	4b6c      	ldr	r3, [pc, #432]	; (8002c4c <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a9c:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002aa0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aa2:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8002aa4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aa6:	4653      	mov	r3, sl
 8002aa8:	f7ff fb78 	bl	800219c <I2C_RequestMemoryRead>
 8002aac:	4605      	mov	r5, r0
 8002aae:	b130      	cbz	r0, 8002abe <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ab2:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d13d      	bne.n	8002b36 <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 8002aba:	2501      	movs	r5, #1
 8002abc:	e7ba      	b.n	8002a34 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8002abe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	b992      	cbnz	r2, 8002aea <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac4:	9002      	str	r0, [sp, #8]
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	9202      	str	r2, [sp, #8]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	9202      	str	r2, [sp, #8]
 8002ace:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	2320      	movs	r3, #32
 8002ada:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002ae4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002ae8:	e7a4      	b.n	8002a34 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8002aea:	2a01      	cmp	r2, #1
 8002aec:	d125      	bne.n	8002b3a <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	9003      	str	r0, [sp, #12]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	9203      	str	r2, [sp, #12]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	9203      	str	r2, [sp, #12]
 8002b04:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002b0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b0e:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b10:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8002c50 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8002b14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0de      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d877      	bhi.n	8002c0e <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d127      	bne.n	8002b72 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002b22:	4632      	mov	r2, r6
 8002b24:	4639      	mov	r1, r7
 8002b26:	4620      	mov	r0, r4
 8002b28:	f7ff fbb2 	bl	8002290 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	d03f      	beq.n	8002bb0 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d1c1      	bne.n	8002aba <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8002b36:	2503      	movs	r5, #3
 8002b38:	e77c      	b.n	8002a34 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8002b3a:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002b3c:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8002b3e:	d10e      	bne.n	8002b5e <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b46:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	9004      	str	r0, [sp, #16]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	9204      	str	r2, [sp, #16]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	9204      	str	r2, [sp, #16]
 8002b54:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b5c:	e7d6      	b.n	8002b0c <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b62:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b64:	9005      	str	r0, [sp, #20]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	9205      	str	r2, [sp, #20]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	9305      	str	r3, [sp, #20]
 8002b6e:	9b05      	ldr	r3, [sp, #20]
 8002b70:	e7ce      	b.n	8002b10 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 8002b72:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b74:	9600      	str	r6, [sp, #0]
 8002b76:	463b      	mov	r3, r7
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8002b80:	d124      	bne.n	8002bcc <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b82:	f7ff fa65 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d1d5      	bne.n	8002b36 <HAL_I2C_Mem_Read+0x122>
 8002b8a:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b94:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	1c51      	adds	r1, r2, #1
 8002b9c:	6261      	str	r1, [r4, #36]	; 0x24
 8002b9e:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8002ba0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002ba6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bae:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	6262      	str	r2, [r4, #36]	; 0x24
 8002bb6:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bb8:	6912      	ldr	r2, [r2, #16]
 8002bba:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002bbc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002bc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002bca:	e7a3      	b.n	8002b14 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bcc:	f7ff fa40 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d1af      	bne.n	8002b36 <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002bd6:	6821      	ldr	r1, [r4, #0]
 8002bd8:	680b      	ldr	r3, [r1, #0]
 8002bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bde:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002be0:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002be4:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002be6:	1c59      	adds	r1, r3, #1
 8002be8:	6261      	str	r1, [r4, #36]	; 0x24
 8002bea:	6821      	ldr	r1, [r4, #0]
 8002bec:	6909      	ldr	r1, [r1, #16]
 8002bee:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8002bf0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bf2:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002bf8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bfa:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c02:	463b      	mov	r3, r7
 8002c04:	f7ff fa24 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	d0bf      	beq.n	8002b8c <HAL_I2C_Mem_Read+0x178>
 8002c0c:	e793      	b.n	8002b36 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0e:	4632      	mov	r2, r6
 8002c10:	4639      	mov	r1, r7
 8002c12:	4620      	mov	r0, r4
 8002c14:	f7ff fb3c 	bl	8002290 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	d189      	bne.n	8002b30 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	6262      	str	r2, [r4, #36]	; 0x24
 8002c22:	6822      	ldr	r2, [r4, #0]
 8002c24:	6912      	ldr	r2, [r2, #16]
 8002c26:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002c28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c2a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002c30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c38:	6953      	ldr	r3, [r2, #20]
 8002c3a:	075b      	lsls	r3, r3, #29
 8002c3c:	f57f af6a 	bpl.w	8002b14 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c42:	1c59      	adds	r1, r3, #1
 8002c44:	6261      	str	r1, [r4, #36]	; 0x24
 8002c46:	e7b7      	b.n	8002bb8 <HAL_I2C_Mem_Read+0x1a4>
 8002c48:	00100002 	.word	0x00100002
 8002c4c:	ffff0000 	.word	0xffff0000
 8002c50:	00010004 	.word	0x00010004

08002c54 <HAL_I2C_GetState>:
  return hi2c->State;
 8002c54:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5c:	6803      	ldr	r3, [r0, #0]
{
 8002c5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c62:	07db      	lsls	r3, r3, #31
{
 8002c64:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c66:	d410      	bmi.n	8002c8a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	079f      	lsls	r7, r3, #30
 8002c6c:	d45e      	bmi.n	8002d2c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6e:	682b      	ldr	r3, [r5, #0]
 8002c70:	0719      	lsls	r1, r3, #28
 8002c72:	f100 8095 	bmi.w	8002da0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c76:	682b      	ldr	r3, [r5, #0]
 8002c78:	075a      	lsls	r2, r3, #29
 8002c7a:	f100 80bf 	bmi.w	8002dfc <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7e:	69ea      	ldr	r2, [r5, #28]
 8002c80:	2a00      	cmp	r2, #0
 8002c82:	f040 812d 	bne.w	8002ee0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002c86:	2000      	movs	r0, #0
 8002c88:	e014      	b.n	8002cb4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c8a:	4c90      	ldr	r4, [pc, #576]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002c8c:	6863      	ldr	r3, [r4, #4]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d007      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c96:	6863      	ldr	r3, [r4, #4]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x5e>
 8002ca0:	6863      	ldr	r3, [r4, #4]
 8002ca2:	03de      	lsls	r6, r3, #15
 8002ca4:	d509      	bpl.n	8002cba <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	039c      	lsls	r4, r3, #14
 8002caa:	d5dd      	bpl.n	8002c68 <HAL_RCC_OscConfig+0xc>
 8002cac:	686b      	ldr	r3, [r5, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1da      	bne.n	8002c68 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002cb2:	2001      	movs	r0, #1
}
 8002cb4:	b002      	add	sp, #8
 8002cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cba:	686b      	ldr	r3, [r5, #4]
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc0:	d110      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x88>
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002cca:	f7fe fc43 	bl	8001554 <HAL_GetTick>
 8002cce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	0398      	lsls	r0, r3, #14
 8002cd4:	d4c8      	bmi.n	8002c68 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd6:	f7fe fc3d 	bl	8001554 <HAL_GetTick>
 8002cda:	1b80      	subs	r0, r0, r6
 8002cdc:	2864      	cmp	r0, #100	; 0x64
 8002cde:	d9f7      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	e7e7      	b.n	8002cb4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce4:	b99b      	cbnz	r3, 8002d0e <HAL_RCC_OscConfig+0xb2>
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fc2d 	bl	8001554 <HAL_GetTick>
 8002cfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	0399      	lsls	r1, r3, #14
 8002d00:	d5b2      	bpl.n	8002c68 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d02:	f7fe fc27 	bl	8001554 <HAL_GetTick>
 8002d06:	1b80      	subs	r0, r0, r6
 8002d08:	2864      	cmp	r0, #100	; 0x64
 8002d0a:	d9f7      	bls.n	8002cfc <HAL_RCC_OscConfig+0xa0>
 8002d0c:	e7e8      	b.n	8002ce0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	d103      	bne.n	8002d1e <HAL_RCC_OscConfig+0xc2>
 8002d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1a:	6023      	str	r3, [r4, #0]
 8002d1c:	e7d1      	b.n	8002cc2 <HAL_RCC_OscConfig+0x66>
 8002d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d22:	6023      	str	r3, [r4, #0]
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2a:	e7cd      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d2c:	4c67      	ldr	r4, [pc, #412]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d2e:	6863      	ldr	r3, [r4, #4]
 8002d30:	f013 0f0c 	tst.w	r3, #12
 8002d34:	d007      	beq.n	8002d46 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d36:	6863      	ldr	r3, [r4, #4]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d110      	bne.n	8002d62 <HAL_RCC_OscConfig+0x106>
 8002d40:	6863      	ldr	r3, [r4, #4]
 8002d42:	03da      	lsls	r2, r3, #15
 8002d44:	d40d      	bmi.n	8002d62 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	079b      	lsls	r3, r3, #30
 8002d4a:	d502      	bpl.n	8002d52 <HAL_RCC_OscConfig+0xf6>
 8002d4c:	692b      	ldr	r3, [r5, #16]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d1af      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	696a      	ldr	r2, [r5, #20]
 8002d56:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d5a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d5e:	6023      	str	r3, [r4, #0]
 8002d60:	e785      	b.n	8002c6e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d62:	692a      	ldr	r2, [r5, #16]
 8002d64:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <HAL_RCC_OscConfig+0x274>)
 8002d66:	b16a      	cbz	r2, 8002d84 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fbf2 	bl	8001554 <HAL_GetTick>
 8002d70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	079f      	lsls	r7, r3, #30
 8002d76:	d4ec      	bmi.n	8002d52 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d78:	f7fe fbec 	bl	8001554 <HAL_GetTick>
 8002d7c:	1b80      	subs	r0, r0, r6
 8002d7e:	2802      	cmp	r0, #2
 8002d80:	d9f7      	bls.n	8002d72 <HAL_RCC_OscConfig+0x116>
 8002d82:	e7ad      	b.n	8002ce0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002d84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d86:	f7fe fbe5 	bl	8001554 <HAL_GetTick>
 8002d8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	0798      	lsls	r0, r3, #30
 8002d90:	f57f af6d 	bpl.w	8002c6e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d94:	f7fe fbde 	bl	8001554 <HAL_GetTick>
 8002d98:	1b80      	subs	r0, r0, r6
 8002d9a:	2802      	cmp	r0, #2
 8002d9c:	d9f6      	bls.n	8002d8c <HAL_RCC_OscConfig+0x130>
 8002d9e:	e79f      	b.n	8002ce0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da0:	69aa      	ldr	r2, [r5, #24]
 8002da2:	4c4a      	ldr	r4, [pc, #296]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002da4:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <HAL_RCC_OscConfig+0x278>)
 8002da6:	b1da      	cbz	r2, 8002de0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002dac:	f7fe fbd2 	bl	8001554 <HAL_GetTick>
 8002db0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002db4:	079b      	lsls	r3, r3, #30
 8002db6:	d50d      	bpl.n	8002dd4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002db8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002dbc:	4b46      	ldr	r3, [pc, #280]	; (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dc4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002dc6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002dc8:	9b01      	ldr	r3, [sp, #4]
 8002dca:	1e5a      	subs	r2, r3, #1
 8002dcc:	9201      	str	r2, [sp, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f9      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x16a>
 8002dd2:	e750      	b.n	8002c76 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fbbe 	bl	8001554 <HAL_GetTick>
 8002dd8:	1b80      	subs	r0, r0, r6
 8002dda:	2802      	cmp	r0, #2
 8002ddc:	d9e9      	bls.n	8002db2 <HAL_RCC_OscConfig+0x156>
 8002dde:	e77f      	b.n	8002ce0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002de0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002de2:	f7fe fbb7 	bl	8001554 <HAL_GetTick>
 8002de6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dea:	079f      	lsls	r7, r3, #30
 8002dec:	f57f af43 	bpl.w	8002c76 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df0:	f7fe fbb0 	bl	8001554 <HAL_GetTick>
 8002df4:	1b80      	subs	r0, r0, r6
 8002df6:	2802      	cmp	r0, #2
 8002df8:	d9f6      	bls.n	8002de8 <HAL_RCC_OscConfig+0x18c>
 8002dfa:	e771      	b.n	8002ce0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfc:	4c33      	ldr	r4, [pc, #204]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002dfe:	69e3      	ldr	r3, [r4, #28]
 8002e00:	00d8      	lsls	r0, r3, #3
 8002e02:	d424      	bmi.n	8002e4e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002e04:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	69e3      	ldr	r3, [r4, #28]
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	61e3      	str	r3, [r4, #28]
 8002e0e:	69e3      	ldr	r3, [r4, #28]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	4e30      	ldr	r6, [pc, #192]	; (8002edc <HAL_RCC_OscConfig+0x280>)
 8002e1a:	6833      	ldr	r3, [r6, #0]
 8002e1c:	05d9      	lsls	r1, r3, #23
 8002e1e:	d518      	bpl.n	8002e52 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e20:	68eb      	ldr	r3, [r5, #12]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d126      	bne.n	8002e74 <HAL_RCC_OscConfig+0x218>
 8002e26:	6a23      	ldr	r3, [r4, #32]
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fb91 	bl	8001554 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e36:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	6a23      	ldr	r3, [r4, #32]
 8002e3a:	079b      	lsls	r3, r3, #30
 8002e3c:	d53f      	bpl.n	8002ebe <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002e3e:	2f00      	cmp	r7, #0
 8002e40:	f43f af1d 	beq.w	8002c7e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e44:	69e3      	ldr	r3, [r4, #28]
 8002e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	61e3      	str	r3, [r4, #28]
 8002e4c:	e717      	b.n	8002c7e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	2700      	movs	r7, #0
 8002e50:	e7e2      	b.n	8002e18 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	6833      	ldr	r3, [r6, #0]
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fb7b 	bl	8001554 <HAL_GetTick>
 8002e5e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	6833      	ldr	r3, [r6, #0]
 8002e62:	05da      	lsls	r2, r3, #23
 8002e64:	d4dc      	bmi.n	8002e20 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fe fb75 	bl	8001554 <HAL_GetTick>
 8002e6a:	eba0 0008 	sub.w	r0, r0, r8
 8002e6e:	2864      	cmp	r0, #100	; 0x64
 8002e70:	d9f6      	bls.n	8002e60 <HAL_RCC_OscConfig+0x204>
 8002e72:	e735      	b.n	8002ce0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e74:	b9ab      	cbnz	r3, 8002ea2 <HAL_RCC_OscConfig+0x246>
 8002e76:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e78:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6223      	str	r3, [r4, #32]
 8002e82:	6a23      	ldr	r3, [r4, #32]
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fb63 	bl	8001554 <HAL_GetTick>
 8002e8e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	6a23      	ldr	r3, [r4, #32]
 8002e92:	0798      	lsls	r0, r3, #30
 8002e94:	d5d3      	bpl.n	8002e3e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe fb5d 	bl	8001554 <HAL_GetTick>
 8002e9a:	1b80      	subs	r0, r0, r6
 8002e9c:	4540      	cmp	r0, r8
 8002e9e:	d9f7      	bls.n	8002e90 <HAL_RCC_OscConfig+0x234>
 8002ea0:	e71e      	b.n	8002ce0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	6a23      	ldr	r3, [r4, #32]
 8002ea6:	d103      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x254>
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6223      	str	r3, [r4, #32]
 8002eae:	e7ba      	b.n	8002e26 <HAL_RCC_OscConfig+0x1ca>
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6223      	str	r3, [r4, #32]
 8002eb6:	6a23      	ldr	r3, [r4, #32]
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	e7b6      	b.n	8002e2c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe fb49 	bl	8001554 <HAL_GetTick>
 8002ec2:	eba0 0008 	sub.w	r0, r0, r8
 8002ec6:	42b0      	cmp	r0, r6
 8002ec8:	d9b6      	bls.n	8002e38 <HAL_RCC_OscConfig+0x1dc>
 8002eca:	e709      	b.n	8002ce0 <HAL_RCC_OscConfig+0x84>
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	42420000 	.word	0x42420000
 8002ed4:	42420480 	.word	0x42420480
 8002ed8:	20000028 	.word	0x20000028
 8002edc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee0:	4c22      	ldr	r4, [pc, #136]	; (8002f6c <HAL_RCC_OscConfig+0x310>)
 8002ee2:	6863      	ldr	r3, [r4, #4]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	f43f aee2 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x56>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4e1f      	ldr	r6, [pc, #124]	; (8002f70 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002ef4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef6:	d12b      	bne.n	8002f50 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fb2c 	bl	8001554 <HAL_GetTick>
 8002efc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	0199      	lsls	r1, r3, #6
 8002f02:	d41f      	bmi.n	8002f44 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f04:	6a2b      	ldr	r3, [r5, #32]
 8002f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f0c:	6862      	ldr	r2, [r4, #4]
 8002f0e:	68a9      	ldr	r1, [r5, #8]
 8002f10:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f14:	430a      	orrs	r2, r1
 8002f16:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f18:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002f1a:	6862      	ldr	r2, [r4, #4]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002f22:	4313      	orrs	r3, r2
 8002f24:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f26:	2301      	movs	r3, #1
 8002f28:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fb13 	bl	8001554 <HAL_GetTick>
 8002f2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	019a      	lsls	r2, r3, #6
 8002f34:	f53f aea7 	bmi.w	8002c86 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe fb0c 	bl	8001554 <HAL_GetTick>
 8002f3c:	1b40      	subs	r0, r0, r5
 8002f3e:	2802      	cmp	r0, #2
 8002f40:	d9f6      	bls.n	8002f30 <HAL_RCC_OscConfig+0x2d4>
 8002f42:	e6cd      	b.n	8002ce0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe fb06 	bl	8001554 <HAL_GetTick>
 8002f48:	1bc0      	subs	r0, r0, r7
 8002f4a:	2802      	cmp	r0, #2
 8002f4c:	d9d7      	bls.n	8002efe <HAL_RCC_OscConfig+0x2a2>
 8002f4e:	e6c7      	b.n	8002ce0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002f50:	f7fe fb00 	bl	8001554 <HAL_GetTick>
 8002f54:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	f57f ae94 	bpl.w	8002c86 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe faf9 	bl	8001554 <HAL_GetTick>
 8002f62:	1b40      	subs	r0, r0, r5
 8002f64:	2802      	cmp	r0, #2
 8002f66:	d9f6      	bls.n	8002f56 <HAL_RCC_OscConfig+0x2fa>
 8002f68:	e6ba      	b.n	8002ce0 <HAL_RCC_OscConfig+0x84>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	42420060 	.word	0x42420060

08002f74 <HAL_RCC_GetSysClockFreq>:
{
 8002f74:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f76:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002f78:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f7a:	ac02      	add	r4, sp, #8
 8002f7c:	f103 0510 	add.w	r5, r3, #16
 8002f80:	4622      	mov	r2, r4
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	3308      	adds	r3, #8
 8002f88:	c203      	stmia	r2!, {r0, r1}
 8002f8a:	42ab      	cmp	r3, r5
 8002f8c:	4614      	mov	r4, r2
 8002f8e:	d1f7      	bne.n	8002f80 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f90:	2301      	movs	r3, #1
 8002f92:	f88d 3004 	strb.w	r3, [sp, #4]
 8002f96:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002f98:	4911      	ldr	r1, [pc, #68]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f9a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002f9e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002fa0:	f003 020c 	and.w	r2, r3, #12
 8002fa4:	2a08      	cmp	r2, #8
 8002fa6:	d117      	bne.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fa8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002fac:	a806      	add	r0, sp, #24
 8002fae:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fb0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fb2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fb6:	d50c      	bpl.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fb8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fba:	480a      	ldr	r0, [pc, #40]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fbc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fc0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fc2:	aa06      	add	r2, sp, #24
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fca:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002fce:	b007      	add	sp, #28
 8002fd0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fd2:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x74>)
 8002fd4:	4350      	muls	r0, r2
 8002fd6:	e7fa      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002fda:	e7f8      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x5a>
 8002fdc:	08010ce8 	.word	0x08010ce8
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	007a1200 	.word	0x007a1200
 8002fe8:	003d0900 	.word	0x003d0900

08002fec <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002fec:	4a4d      	ldr	r2, [pc, #308]	; (8003124 <HAL_RCC_ClockConfig+0x138>)
{
 8002fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ff2:	6813      	ldr	r3, [r2, #0]
{
 8002ff4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	428b      	cmp	r3, r1
{
 8002ffc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ffe:	d328      	bcc.n	8003052 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	682a      	ldr	r2, [r5, #0]
 8003002:	0791      	lsls	r1, r2, #30
 8003004:	d432      	bmi.n	800306c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003006:	07d2      	lsls	r2, r2, #31
 8003008:	d438      	bmi.n	800307c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800300a:	4a46      	ldr	r2, [pc, #280]	; (8003124 <HAL_RCC_ClockConfig+0x138>)
 800300c:	6813      	ldr	r3, [r2, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	429e      	cmp	r6, r3
 8003014:	d373      	bcc.n	80030fe <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003016:	682a      	ldr	r2, [r5, #0]
 8003018:	4c43      	ldr	r4, [pc, #268]	; (8003128 <HAL_RCC_ClockConfig+0x13c>)
 800301a:	f012 0f04 	tst.w	r2, #4
 800301e:	d179      	bne.n	8003114 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003020:	0713      	lsls	r3, r2, #28
 8003022:	d506      	bpl.n	8003032 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003024:	6863      	ldr	r3, [r4, #4]
 8003026:	692a      	ldr	r2, [r5, #16]
 8003028:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800302c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003030:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003032:	f7ff ff9f 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8003036:	6863      	ldr	r3, [r4, #4]
 8003038:	4a3c      	ldr	r2, [pc, #240]	; (800312c <HAL_RCC_ClockConfig+0x140>)
 800303a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800303e:	5cd3      	ldrb	r3, [r2, r3]
 8003040:	40d8      	lsrs	r0, r3
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <HAL_RCC_ClockConfig+0x144>)
 8003044:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003046:	2000      	movs	r0, #0
 8003048:	f7fe fa42 	bl	80014d0 <HAL_InitTick>
  return HAL_OK;
 800304c:	2000      	movs	r0, #0
}
 800304e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	6813      	ldr	r3, [r2, #0]
 8003054:	f023 0307 	bic.w	r3, r3, #7
 8003058:	430b      	orrs	r3, r1
 800305a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800305c:	6813      	ldr	r3, [r2, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	4299      	cmp	r1, r3
 8003064:	d0cc      	beq.n	8003000 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8003066:	2001      	movs	r0, #1
 8003068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	492e      	ldr	r1, [pc, #184]	; (8003128 <HAL_RCC_ClockConfig+0x13c>)
 800306e:	68a8      	ldr	r0, [r5, #8]
 8003070:	684b      	ldr	r3, [r1, #4]
 8003072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003076:	4303      	orrs	r3, r0
 8003078:	604b      	str	r3, [r1, #4]
 800307a:	e7c4      	b.n	8003006 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307c:	686a      	ldr	r2, [r5, #4]
 800307e:	4c2a      	ldr	r4, [pc, #168]	; (8003128 <HAL_RCC_ClockConfig+0x13c>)
 8003080:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003084:	d11c      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	d0ec      	beq.n	8003066 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	4313      	orrs	r3, r2
 8003098:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800309a:	f7fe fa5b 	bl	8001554 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80030a0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d114      	bne.n	80030d0 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a6:	6863      	ldr	r3, [r4, #4]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d0ac      	beq.n	800300a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b0:	f7fe fa50 	bl	8001554 <HAL_GetTick>
 80030b4:	1bc0      	subs	r0, r0, r7
 80030b6:	4540      	cmp	r0, r8
 80030b8:	d9f5      	bls.n	80030a6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80030ba:	2003      	movs	r0, #3
 80030bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c0:	2a02      	cmp	r2, #2
 80030c2:	d102      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030c8:	e7df      	b.n	800308a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ca:	f013 0f02 	tst.w	r3, #2
 80030ce:	e7dc      	b.n	800308a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d10f      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d4:	6863      	ldr	r3, [r4, #4]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d095      	beq.n	800300a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030de:	f7fe fa39 	bl	8001554 <HAL_GetTick>
 80030e2:	1bc0      	subs	r0, r0, r7
 80030e4:	4540      	cmp	r0, r8
 80030e6:	d9f5      	bls.n	80030d4 <HAL_RCC_ClockConfig+0xe8>
 80030e8:	e7e7      	b.n	80030ba <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ea:	f7fe fa33 	bl	8001554 <HAL_GetTick>
 80030ee:	1bc0      	subs	r0, r0, r7
 80030f0:	4540      	cmp	r0, r8
 80030f2:	d8e2      	bhi.n	80030ba <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f4:	6863      	ldr	r3, [r4, #4]
 80030f6:	f013 0f0c 	tst.w	r3, #12
 80030fa:	d1f6      	bne.n	80030ea <HAL_RCC_ClockConfig+0xfe>
 80030fc:	e785      	b.n	800300a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	f023 0307 	bic.w	r3, r3, #7
 8003104:	4333      	orrs	r3, r6
 8003106:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003108:	6813      	ldr	r3, [r2, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	429e      	cmp	r6, r3
 8003110:	d1a9      	bne.n	8003066 <HAL_RCC_ClockConfig+0x7a>
 8003112:	e780      	b.n	8003016 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003114:	6863      	ldr	r3, [r4, #4]
 8003116:	68e9      	ldr	r1, [r5, #12]
 8003118:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800311c:	430b      	orrs	r3, r1
 800311e:	6063      	str	r3, [r4, #4]
 8003120:	e77e      	b.n	8003020 <HAL_RCC_ClockConfig+0x34>
 8003122:	bf00      	nop
 8003124:	40022000 	.word	0x40022000
 8003128:	40021000 	.word	0x40021000
 800312c:	080114fa 	.word	0x080114fa
 8003130:	20000028 	.word	0x20000028

08003134 <HAL_RCC_GetHCLKFreq>:
}
 8003134:	4b01      	ldr	r3, [pc, #4]	; (800313c <HAL_RCC_GetHCLKFreq+0x8>)
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000028 	.word	0x20000028

08003140 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003142:	4a05      	ldr	r2, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800314a:	5cd3      	ldrb	r3, [r2, r3]
 800314c:	4a03      	ldr	r2, [pc, #12]	; (800315c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800314e:	6810      	ldr	r0, [r2, #0]
}    
 8003150:	40d8      	lsrs	r0, r3
 8003152:	4770      	bx	lr
 8003154:	40021000 	.word	0x40021000
 8003158:	0801150a 	.word	0x0801150a
 800315c:	20000028 	.word	0x20000028

08003160 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003162:	4a05      	ldr	r2, [pc, #20]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800316a:	5cd3      	ldrb	r3, [r2, r3]
 800316c:	4a03      	ldr	r2, [pc, #12]	; (800317c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800316e:	6810      	ldr	r0, [r2, #0]
} 
 8003170:	40d8      	lsrs	r0, r3
 8003172:	4770      	bx	lr
 8003174:	40021000 	.word	0x40021000
 8003178:	0801150a 	.word	0x0801150a
 800317c:	20000028 	.word	0x20000028

08003180 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003180:	6803      	ldr	r3, [r0, #0]
{
 8003182:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003186:	07d9      	lsls	r1, r3, #31
{
 8003188:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800318a:	d520      	bpl.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318c:	4c35      	ldr	r4, [pc, #212]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800318e:	69e3      	ldr	r3, [r4, #28]
 8003190:	00da      	lsls	r2, r3, #3
 8003192:	d432      	bmi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003194:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8003196:	69e3      	ldr	r3, [r4, #28]
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	61e3      	str	r3, [r4, #28]
 800319e:	69e3      	ldr	r3, [r4, #28]
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	4e2f      	ldr	r6, [pc, #188]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031aa:	6833      	ldr	r3, [r6, #0]
 80031ac:	05db      	lsls	r3, r3, #23
 80031ae:	d526      	bpl.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031b0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031b2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80031b6:	d136      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031b8:	6a23      	ldr	r3, [r4, #32]
 80031ba:	686a      	ldr	r2, [r5, #4]
 80031bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c0:	4313      	orrs	r3, r2
 80031c2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c4:	b11f      	cbz	r7, 80031ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	69e3      	ldr	r3, [r4, #28]
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031cc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031ce:	6828      	ldr	r0, [r5, #0]
 80031d0:	0783      	lsls	r3, r0, #30
 80031d2:	d506      	bpl.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d4:	4a23      	ldr	r2, [pc, #140]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80031d6:	68a9      	ldr	r1, [r5, #8]
 80031d8:	6853      	ldr	r3, [r2, #4]
 80031da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80031de:	430b      	orrs	r3, r1
 80031e0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031e2:	f010 0010 	ands.w	r0, r0, #16
 80031e6:	d01b      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80031ea:	68e9      	ldr	r1, [r5, #12]
 80031ec:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031ee:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6053      	str	r3, [r2, #4]
 80031f8:	e012      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2700      	movs	r7, #0
 80031fc:	e7d4      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fe:	6833      	ldr	r3, [r6, #0]
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003206:	f7fe f9a5 	bl	8001554 <HAL_GetTick>
 800320a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	6833      	ldr	r3, [r6, #0]
 800320e:	05d8      	lsls	r0, r3, #23
 8003210:	d4ce      	bmi.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003212:	f7fe f99f 	bl	8001554 <HAL_GetTick>
 8003216:	eba0 0008 	sub.w	r0, r0, r8
 800321a:	2864      	cmp	r0, #100	; 0x64
 800321c:	d9f6      	bls.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800321e:	2003      	movs	r0, #3
}
 8003220:	b002      	add	sp, #8
 8003222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003226:	686a      	ldr	r2, [r5, #4]
 8003228:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800322c:	4293      	cmp	r3, r2
 800322e:	d0c3      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003230:	2001      	movs	r0, #1
 8003232:	4a0e      	ldr	r2, [pc, #56]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003234:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003236:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003238:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800323a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800323e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8003240:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003242:	07d9      	lsls	r1, r3, #31
 8003244:	d5b8      	bpl.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003246:	f7fe f985 	bl	8001554 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800324e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	6a23      	ldr	r3, [r4, #32]
 8003252:	079a      	lsls	r2, r3, #30
 8003254:	d4b0      	bmi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fe f97d 	bl	8001554 <HAL_GetTick>
 800325a:	1b80      	subs	r0, r0, r6
 800325c:	4540      	cmp	r0, r8
 800325e:	d9f7      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003260:	e7dd      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	40007000 	.word	0x40007000
 800326c:	42420440 	.word	0x42420440

08003270 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003274:	4b35      	ldr	r3, [pc, #212]	; (800334c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8003276:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003278:	ad02      	add	r5, sp, #8
 800327a:	f103 0610 	add.w	r6, r3, #16
 800327e:	462a      	mov	r2, r5
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	3308      	adds	r3, #8
 8003286:	c203      	stmia	r2!, {r0, r1}
 8003288:	42b3      	cmp	r3, r6
 800328a:	4615      	mov	r5, r2
 800328c:	d1f7      	bne.n	800327e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800328e:	2301      	movs	r3, #1
 8003290:	f88d 3004 	strb.w	r3, [sp, #4]
 8003294:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8003296:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003298:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 800329c:	d047      	beq.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 800329e:	2c10      	cmp	r4, #16
 80032a0:	d017      	beq.n	80032d2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80032a2:	2c01      	cmp	r4, #1
 80032a4:	d14f      	bne.n	8003346 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80032a6:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80032aa:	4a29      	ldr	r2, [pc, #164]	; (8003350 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80032ac:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80032ae:	4019      	ands	r1, r3
 80032b0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80032b4:	d044      	beq.n	8003340 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80032b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032be:	d12d      	bne.n	800331c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 80032c0:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80032c4:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80032c6:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 80032ca:	bf08      	it	eq
 80032cc:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 80032ce:	b006      	add	sp, #24
 80032d0:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 80032d2:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80032d4:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80032dc:	d0f7      	beq.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032de:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80032e2:	a806      	add	r0, sp, #24
 80032e4:	4402      	add	r2, r0
 80032e6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ea:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ec:	bf41      	itttt	mi
 80032ee:	685a      	ldrmi	r2, [r3, #4]
 80032f0:	a906      	addmi	r1, sp, #24
 80032f2:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80032f6:	1852      	addmi	r2, r2, r1
 80032f8:	bf44      	itt	mi
 80032fa:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80032fe:	4a15      	ldrmi	r2, [pc, #84]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003300:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003302:	bf4c      	ite	mi
 8003304:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003308:	4a13      	ldrpl	r2, [pc, #76]	; (8003358 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800330a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800330c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003310:	d4dd      	bmi.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8003312:	2303      	movs	r3, #3
 8003314:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003316:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800331a:	e7d8      	b.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800331c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003320:	d111      	bne.n	8003346 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003322:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8003324:	f24f 4024 	movw	r0, #62500	; 0xf424
 8003328:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800332c:	e7cd      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800332e:	f7ff ff17 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800333a:	3301      	adds	r3, #1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	e7ea      	b.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8003340:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003344:	e7c3      	b.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8003346:	2000      	movs	r0, #0
 8003348:	e7c1      	b.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800334a:	bf00      	nop
 800334c:	08010cf8 	.word	0x08010cf8
 8003350:	40021000 	.word	0x40021000
 8003354:	007a1200 	.word	0x007a1200
 8003358:	003d0900 	.word	0x003d0900

0800335c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335c:	6a03      	ldr	r3, [r0, #32]
{
 800335e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800336a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800336c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800336e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003372:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003374:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003376:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800337a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800337c:	4d0a      	ldr	r5, [pc, #40]	; (80033a8 <TIM_OC1_SetConfig+0x4c>)
 800337e:	42a8      	cmp	r0, r5
 8003380:	d10b      	bne.n	800339a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003382:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003384:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003388:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800338a:	698e      	ldr	r6, [r1, #24]
 800338c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800338e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003392:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003394:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003398:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800339c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800339e:	684a      	ldr	r2, [r1, #4]
 80033a0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a2:	6203      	str	r3, [r0, #32]
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
 80033a6:	bf00      	nop
 80033a8:	40012c00 	.word	0x40012c00

080033ac <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033ac:	6a03      	ldr	r3, [r0, #32]
{
 80033ae:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ba:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80033c2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033c4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80033c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ce:	4d0b      	ldr	r5, [pc, #44]	; (80033fc <TIM_OC3_SetConfig+0x50>)
 80033d0:	42a8      	cmp	r0, r5
 80033d2:	d10d      	bne.n	80033f0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033d4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80033d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033de:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033e0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033e2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033e6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80033e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ec:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033f4:	684a      	ldr	r2, [r1, #4]
 80033f6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f8:	6203      	str	r3, [r0, #32]
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	40012c00 	.word	0x40012c00

08003400 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003400:	6a03      	ldr	r3, [r0, #32]
{
 8003402:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003408:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800340c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800340e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003410:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003412:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003416:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800341a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800341c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003420:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003424:	4d06      	ldr	r5, [pc, #24]	; (8003440 <TIM_OC4_SetConfig+0x40>)
 8003426:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003428:	bf02      	ittt	eq
 800342a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800342c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003430:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003434:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003436:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003438:	684a      	ldr	r2, [r1, #4]
 800343a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343c:	6203      	str	r3, [r0, #32]
 800343e:	bd30      	pop	{r4, r5, pc}
 8003440:	40012c00 	.word	0x40012c00

08003444 <HAL_TIM_PWM_MspInit>:
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_IC_MspInit>:
 8003446:	4770      	bx	lr

08003448 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003448:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800344c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800344e:	2b01      	cmp	r3, #1
 8003450:	f04f 0302 	mov.w	r3, #2
 8003454:	d01c      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0x48>
 8003456:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800345c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800345e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003462:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003464:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003468:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800346c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800346e:	680a      	ldr	r2, [r1, #0]
 8003470:	2a40      	cmp	r2, #64	; 0x40
 8003472:	d079      	beq.n	8003568 <HAL_TIM_ConfigClockSource+0x120>
 8003474:	d819      	bhi.n	80034aa <HAL_TIM_ConfigClockSource+0x62>
 8003476:	2a10      	cmp	r2, #16
 8003478:	f000 8093 	beq.w	80035a2 <HAL_TIM_ConfigClockSource+0x15a>
 800347c:	d80a      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x4c>
 800347e:	2a00      	cmp	r2, #0
 8003480:	f000 8089 	beq.w	8003596 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8003484:	2301      	movs	r3, #1
 8003486:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800348a:	2300      	movs	r3, #0
 800348c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003490:	4618      	mov	r0, r3
}
 8003492:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003494:	2a20      	cmp	r2, #32
 8003496:	f000 808a 	beq.w	80035ae <HAL_TIM_ConfigClockSource+0x166>
 800349a:	2a30      	cmp	r2, #48	; 0x30
 800349c:	d1f2      	bne.n	8003484 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800349e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80034a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80034a4:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80034a8:	e036      	b.n	8003518 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80034aa:	2a70      	cmp	r2, #112	; 0x70
 80034ac:	d036      	beq.n	800351c <HAL_TIM_ConfigClockSource+0xd4>
 80034ae:	d81b      	bhi.n	80034e8 <HAL_TIM_ConfigClockSource+0xa0>
 80034b0:	2a50      	cmp	r2, #80	; 0x50
 80034b2:	d042      	beq.n	800353a <HAL_TIM_ConfigClockSource+0xf2>
 80034b4:	2a60      	cmp	r2, #96	; 0x60
 80034b6:	d1e5      	bne.n	8003484 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b8:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ba:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034bc:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c2:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80034c6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034c8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80034d0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034d4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80034d8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80034da:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80034dc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80034de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80034e2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80034e6:	e017      	b.n	8003518 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80034e8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80034ec:	d011      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0xca>
 80034ee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80034f2:	d1c7      	bne.n	8003484 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034f4:	688a      	ldr	r2, [r1, #8]
 80034f6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80034f8:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034fa:	68c9      	ldr	r1, [r1, #12]
 80034fc:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003502:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003506:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003508:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003510:	e002      	b.n	8003518 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	e7b3      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800351c:	688a      	ldr	r2, [r1, #8]
 800351e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003520:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003522:	68c9      	ldr	r1, [r1, #12]
 8003524:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003526:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800352a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800352e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8003530:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003532:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003534:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8003538:	e7ee      	b.n	8003518 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353a:	684c      	ldr	r4, [r1, #4]
 800353c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800353e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003540:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003542:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003546:	f025 0501 	bic.w	r5, r5, #1
 800354a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800354c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800354e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003550:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003554:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003558:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800355a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800355c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800355e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003562:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8003566:	e7d7      	b.n	8003518 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003568:	684c      	ldr	r4, [r1, #4]
 800356a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800356c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003570:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003574:	f025 0501 	bic.w	r5, r5, #1
 8003578:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800357c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800357e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003582:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003588:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800358a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800358c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003590:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8003594:	e7c0      	b.n	8003518 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003596:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003598:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800359c:	f042 0207 	orr.w	r2, r2, #7
 80035a0:	e7ba      	b.n	8003518 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80035a2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80035a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80035a8:	f042 0217 	orr.w	r2, r2, #23
 80035ac:	e7b4      	b.n	8003518 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80035ae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80035b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80035b4:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80035b8:	e7ae      	b.n	8003518 <HAL_TIM_ConfigClockSource+0xd0>

080035ba <HAL_TIM_OC_DelayElapsedCallback>:
 80035ba:	4770      	bx	lr

080035bc <HAL_TIM_PWM_PulseFinishedCallback>:
 80035bc:	4770      	bx	lr

080035be <HAL_TIM_TriggerCallback>:
 80035be:	4770      	bx	lr

080035c0 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035c0:	6803      	ldr	r3, [r0, #0]
{
 80035c2:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035c4:	691a      	ldr	r2, [r3, #16]
{
 80035c6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035c8:	0791      	lsls	r1, r2, #30
 80035ca:	d50e      	bpl.n	80035ea <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	0792      	lsls	r2, r2, #30
 80035d0:	d50b      	bpl.n	80035ea <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035d2:	f06f 0202 	mvn.w	r2, #2
 80035d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035d8:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035da:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035dc:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035de:	079b      	lsls	r3, r3, #30
 80035e0:	d077      	beq.n	80036d2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	f002 fbf5 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	2300      	movs	r3, #0
 80035e8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	0750      	lsls	r0, r2, #29
 80035f0:	d510      	bpl.n	8003614 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	0751      	lsls	r1, r2, #29
 80035f6:	d50d      	bpl.n	8003614 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f8:	f06f 0204 	mvn.w	r2, #4
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fe:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003600:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003602:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003604:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003608:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800360a:	d068      	beq.n	80036de <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800360c:	f002 fbe0 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003610:	2300      	movs	r3, #0
 8003612:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	0712      	lsls	r2, r2, #28
 800361a:	d50f      	bpl.n	800363c <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	0710      	lsls	r0, r2, #28
 8003620:	d50c      	bpl.n	800363c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003622:	f06f 0208 	mvn.w	r2, #8
 8003626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003628:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800362a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800362c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800362e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003630:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003632:	d05a      	beq.n	80036ea <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003634:	f002 fbcc 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003638:	2300      	movs	r3, #0
 800363a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	06d2      	lsls	r2, r2, #27
 8003642:	d510      	bpl.n	8003666 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	06d0      	lsls	r0, r2, #27
 8003648:	d50d      	bpl.n	8003666 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800364a:	f06f 0210 	mvn.w	r2, #16
 800364e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003650:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003652:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003654:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003656:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800365c:	d04b      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	f002 fbb7 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	2300      	movs	r3, #0
 8003664:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	07d1      	lsls	r1, r2, #31
 800366c:	d508      	bpl.n	8003680 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	07d2      	lsls	r2, r2, #31
 8003672:	d505      	bpl.n	8003680 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003674:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003678:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800367a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800367c:	f005 fee6 	bl	800944c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	0610      	lsls	r0, r2, #24
 8003686:	d508      	bpl.n	800369a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	0611      	lsls	r1, r2, #24
 800368c:	d505      	bpl.n	800369a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800368e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003692:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003694:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003696:	f000 fa6c 	bl	8003b72 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	0652      	lsls	r2, r2, #25
 80036a0:	d508      	bpl.n	80036b4 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	0650      	lsls	r0, r2, #25
 80036a6:	d505      	bpl.n	80036b4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80036ac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80036b0:	f7ff ff85 	bl	80035be <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	0691      	lsls	r1, r2, #26
 80036ba:	d522      	bpl.n	8003702 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	0692      	lsls	r2, r2, #26
 80036c0:	d51f      	bpl.n	8003702 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036c2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80036c6:	4620      	mov	r0, r4
}
 80036c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80036ce:	f000 ba4f 	b.w	8003b70 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d2:	f7ff ff72 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7ff ff70 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
 80036dc:	e783      	b.n	80035e6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	f7ff ff6c 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e2:	4620      	mov	r0, r4
 80036e4:	f7ff ff6a 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
 80036e8:	e792      	b.n	8003610 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	f7ff ff66 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ee:	4620      	mov	r0, r4
 80036f0:	f7ff ff64 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
 80036f4:	e7a0      	b.n	8003638 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	f7ff ff60 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7ff ff5e 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
 8003700:	e7af      	b.n	8003662 <HAL_TIM_IRQHandler+0xa2>
 8003702:	bd10      	pop	{r4, pc}

08003704 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003706:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003708:	4290      	cmp	r0, r2
 800370a:	d00a      	beq.n	8003722 <TIM_Base_SetConfig+0x1e>
 800370c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003710:	d007      	beq.n	8003722 <TIM_Base_SetConfig+0x1e>
 8003712:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003716:	4290      	cmp	r0, r2
 8003718:	d003      	beq.n	8003722 <TIM_Base_SetConfig+0x1e>
 800371a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800371e:	4290      	cmp	r0, r2
 8003720:	d115      	bne.n	800374e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003722:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003728:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800372a:	4a11      	ldr	r2, [pc, #68]	; (8003770 <TIM_Base_SetConfig+0x6c>)
 800372c:	4290      	cmp	r0, r2
 800372e:	d00a      	beq.n	8003746 <TIM_Base_SetConfig+0x42>
 8003730:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003734:	d007      	beq.n	8003746 <TIM_Base_SetConfig+0x42>
 8003736:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800373a:	4290      	cmp	r0, r2
 800373c:	d003      	beq.n	8003746 <TIM_Base_SetConfig+0x42>
 800373e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003742:	4290      	cmp	r0, r2
 8003744:	d103      	bne.n	800374e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003746:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800374c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800374e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003754:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003756:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003758:	688b      	ldr	r3, [r1, #8]
 800375a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800375c:	680b      	ldr	r3, [r1, #0]
 800375e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <TIM_Base_SetConfig+0x6c>)
 8003762:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003764:	bf04      	itt	eq
 8003766:	690b      	ldreq	r3, [r1, #16]
 8003768:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800376a:	2301      	movs	r3, #1
 800376c:	6143      	str	r3, [r0, #20]
 800376e:	4770      	bx	lr
 8003770:	40012c00 	.word	0x40012c00

08003774 <HAL_TIM_Base_Init>:
{
 8003774:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003776:	4604      	mov	r4, r0
 8003778:	b1a0      	cbz	r0, 80037a4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800377a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800377e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003782:	b91b      	cbnz	r3, 800378c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003784:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003788:	f005 fee4 	bl	8009554 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800378c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003790:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003794:	1d21      	adds	r1, r4, #4
 8003796:	f7ff ffb5 	bl	8003704 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800379a:	2301      	movs	r3, #1
  return HAL_OK;
 800379c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800379e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80037a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037a4:	2001      	movs	r0, #1
}
 80037a6:	bd10      	pop	{r4, pc}

080037a8 <HAL_TIM_PWM_Init>:
{
 80037a8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80037aa:	4604      	mov	r4, r0
 80037ac:	b1a0      	cbz	r0, 80037d8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80037ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037b6:	b91b      	cbnz	r3, 80037c0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80037b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80037bc:	f7ff fe42 	bl	8003444 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80037c0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80037c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c8:	1d21      	adds	r1, r4, #4
 80037ca:	f7ff ff9b 	bl	8003704 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80037ce:	2301      	movs	r3, #1
  return HAL_OK;
 80037d0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80037d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80037d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037d8:	2001      	movs	r0, #1
}
 80037da:	bd10      	pop	{r4, pc}

080037dc <HAL_TIM_IC_Init>:
{
 80037dc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80037de:	4604      	mov	r4, r0
 80037e0:	b1a0      	cbz	r0, 800380c <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80037e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037ea:	b91b      	cbnz	r3, 80037f4 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80037ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80037f0:	f7ff fe29 	bl	8003446 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80037f4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80037f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fc:	1d21      	adds	r1, r4, #4
 80037fe:	f7ff ff81 	bl	8003704 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003802:	2301      	movs	r3, #1
  return HAL_OK;
 8003804:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003806:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800380a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800380c:	2001      	movs	r0, #1
}
 800380e:	bd10      	pop	{r4, pc}

08003810 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003810:	6a03      	ldr	r3, [r0, #32]
{
 8003812:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003814:	f023 0310 	bic.w	r3, r3, #16
 8003818:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800381a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800381c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800381e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003820:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003822:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003826:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800382a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800382c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003830:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003834:	4d0b      	ldr	r5, [pc, #44]	; (8003864 <TIM_OC2_SetConfig+0x54>)
 8003836:	42a8      	cmp	r0, r5
 8003838:	d10d      	bne.n	8003856 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800383a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800383c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003840:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003844:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003846:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003848:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800384c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800384e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003852:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003856:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003858:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800385a:	684a      	ldr	r2, [r1, #4]
 800385c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800385e:	6203      	str	r3, [r0, #32]
 8003860:	bd70      	pop	{r4, r5, r6, pc}
 8003862:	bf00      	nop
 8003864:	40012c00 	.word	0x40012c00

08003868 <HAL_TIM_PWM_ConfigChannel>:
{
 8003868:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800386a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800386e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003870:	2b01      	cmp	r3, #1
 8003872:	f04f 0002 	mov.w	r0, #2
 8003876:	d025      	beq.n	80038c4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8003878:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800387a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800387e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8003882:	2a0c      	cmp	r2, #12
 8003884:	d818      	bhi.n	80038b8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8003886:	e8df f002 	tbb	[pc, r2]
 800388a:	1707      	.short	0x1707
 800388c:	171e1717 	.word	0x171e1717
 8003890:	172f1717 	.word	0x172f1717
 8003894:	1717      	.short	0x1717
 8003896:	40          	.byte	0x40
 8003897:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003898:	6820      	ldr	r0, [r4, #0]
 800389a:	f7ff fd5f 	bl	800335c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800389e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	f042 0208 	orr.w	r2, r2, #8
 80038a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	f022 0204 	bic.w	r2, r2, #4
 80038b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80038b6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80038b8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80038ba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80038c0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80038c4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038c6:	6820      	ldr	r0, [r4, #0]
 80038c8:	f7ff ffa2 	bl	8003810 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038cc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80038ce:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038e6:	e7e6      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	f7ff fd5f 	bl	80033ac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038f0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	f042 0208 	orr.w	r2, r2, #8
 80038f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	f022 0204 	bic.w	r2, r2, #4
 8003900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003906:	61da      	str	r2, [r3, #28]
    break;
 8003908:	e7d6      	b.n	80038b8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800390a:	6820      	ldr	r0, [r4, #0]
 800390c:	f7ff fd78 	bl	8003400 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003910:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003912:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003922:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800392a:	e7ec      	b.n	8003906 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800392c <TIM_TI1_SetConfig>:
{
 800392c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800392e:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003930:	4e12      	ldr	r6, [pc, #72]	; (800397c <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003932:	f024 0401 	bic.w	r4, r4, #1
 8003936:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003938:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800393a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800393c:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800393e:	d00a      	beq.n	8003956 <TIM_TI1_SetConfig+0x2a>
 8003940:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003944:	d007      	beq.n	8003956 <TIM_TI1_SetConfig+0x2a>
 8003946:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800394a:	42b0      	cmp	r0, r6
 800394c:	d003      	beq.n	8003956 <TIM_TI1_SetConfig+0x2a>
 800394e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003952:	42b0      	cmp	r0, r6
 8003954:	d10f      	bne.n	8003976 <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003956:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800395a:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800395c:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800395e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003962:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003964:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003968:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800396c:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800396e:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8003970:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003972:	6201      	str	r1, [r0, #32]
}
 8003974:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003976:	f044 0201 	orr.w	r2, r4, #1
 800397a:	e7ef      	b.n	800395c <TIM_TI1_SetConfig+0x30>
 800397c:	40012c00 	.word	0x40012c00

08003980 <HAL_TIM_IC_ConfigChannel>:
{
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003982:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003986:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003988:	2b01      	cmp	r3, #1
{
 800398a:	460d      	mov	r5, r1
 800398c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003990:	d019      	beq.n	80039c6 <HAL_TIM_IC_ConfigChannel+0x46>
 8003992:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003998:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800399c:	b9a2      	cbnz	r2, 80039c8 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 800399e:	68cb      	ldr	r3, [r1, #12]
 80039a0:	6820      	ldr	r0, [r4, #0]
 80039a2:	c906      	ldmia	r1, {r1, r2}
 80039a4:	f7ff ffc2 	bl	800392c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039a8:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039aa:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	f022 020c 	bic.w	r2, r2, #12
 80039b2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80039ba:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80039bc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80039be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80039c2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80039c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80039c8:	2a04      	cmp	r2, #4
 80039ca:	688e      	ldr	r6, [r1, #8]
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	c982      	ldmia	r1, {r1, r7}
 80039d0:	68e8      	ldr	r0, [r5, #12]
 80039d2:	d11f      	bne.n	8003a14 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039d6:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d8:	f022 0210 	bic.w	r2, r2, #16
 80039dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039de:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 80039e0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039e6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039ea:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ec:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039f0:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039f2:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039f4:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039f8:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039fc:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80039fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a00:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a08:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8003a10:	619e      	str	r6, [r3, #24]
 8003a12:	e7d2      	b.n	80039ba <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8003a14:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a16:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8003a18:	d11c      	bne.n	8003a54 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a20:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a22:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a24:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 8003a28:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 8003a2a:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a2c:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a32:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a34:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a36:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a3a:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a3e:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8003a40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a42:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	f022 020c 	bic.w	r2, r2, #12
 8003a4a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a50:	61de      	str	r6, [r3, #28]
 8003a52:	e7b2      	b.n	80039ba <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a5a:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a5c:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 8003a62:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a64:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a68:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a6c:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003a6e:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a70:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003a72:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 8003a76:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003a7a:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8003a7c:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a7e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a86:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8003a8e:	e7df      	b.n	8003a50 <HAL_TIM_IC_ConfigChannel+0xd0>

08003a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a90:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003a92:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a94:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8003a96:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003a98:	ea23 0304 	bic.w	r3, r3, r4
 8003a9c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003a9e:	6a03      	ldr	r3, [r0, #32]
 8003aa0:	408a      	lsls	r2, r1
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	6202      	str	r2, [r0, #32]
 8003aa6:	bd10      	pop	{r4, pc}

08003aa8 <HAL_TIM_PWM_Start>:
{
 8003aa8:	b510      	push	{r4, lr}
 8003aaa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aac:	2201      	movs	r2, #1
 8003aae:	6800      	ldr	r0, [r0, #0]
 8003ab0:	f7ff ffee 	bl	8003a90 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	4a06      	ldr	r2, [pc, #24]	; (8003ad0 <HAL_TIM_PWM_Start+0x28>)
}
 8003ab8:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aba:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8003abc:	bf02      	ittt	eq
 8003abe:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8003ac0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8003ac4:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	bd10      	pop	{r4, pc}
 8003ad0:	40012c00 	.word	0x40012c00

08003ad4 <HAL_TIM_IC_Start_IT>:
{
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	4604      	mov	r4, r0
  switch (Channel)
 8003ad8:	290c      	cmp	r1, #12
 8003ada:	d80d      	bhi.n	8003af8 <HAL_TIM_IC_Start_IT+0x24>
 8003adc:	e8df f001 	tbb	[pc, r1]
 8003ae0:	0c0c0c07 	.word	0x0c0c0c07
 8003ae4:	0c0c0c17 	.word	0x0c0c0c17
 8003ae8:	0c0c0c1c 	.word	0x0c0c0c1c
 8003aec:	21          	.byte	0x21
 8003aed:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003aee:	6802      	ldr	r2, [r0, #0]
 8003af0:	68d3      	ldr	r3, [r2, #12]
 8003af2:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003af6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003af8:	6820      	ldr	r0, [r4, #0]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f7ff ffc8 	bl	8003a90 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8003b00:	6822      	ldr	r2, [r4, #0]
}
 8003b02:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003b04:	6813      	ldr	r3, [r2, #0]
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6013      	str	r3, [r2, #0]
}
 8003b0c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b0e:	6802      	ldr	r2, [r0, #0]
 8003b10:	68d3      	ldr	r3, [r2, #12]
 8003b12:	f043 0304 	orr.w	r3, r3, #4
 8003b16:	e7ee      	b.n	8003af6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b18:	6802      	ldr	r2, [r0, #0]
 8003b1a:	68d3      	ldr	r3, [r2, #12]
 8003b1c:	f043 0308 	orr.w	r3, r3, #8
 8003b20:	e7e9      	b.n	8003af6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b22:	6802      	ldr	r2, [r0, #0]
 8003b24:	68d3      	ldr	r3, [r2, #12]
 8003b26:	f043 0310 	orr.w	r3, r3, #16
 8003b2a:	e7e4      	b.n	8003af6 <HAL_TIM_IC_Start_IT+0x22>

08003b2c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003b2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003b30:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	f04f 0302 	mov.w	r3, #2
 8003b38:	d018      	beq.n	8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8003b3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003b3e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003b40:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003b42:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003b44:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003b46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b4a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	4322      	orrs	r2, r4
 8003b50:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b58:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b66:	2300      	movs	r3, #0
 8003b68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003b6c:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003b6e:	bd10      	pop	{r4, pc}

08003b70 <HAL_TIMEx_CommutationCallback>:
 8003b70:	4770      	bx	lr

08003b72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b72:	4770      	bx	lr

08003b74 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b74:	6803      	ldr	r3, [r0, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b7c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b86:	2320      	movs	r3, #32
 8003b88:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003b8c:	4770      	bx	lr
	...

08003b90 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b94:	6805      	ldr	r5, [r0, #0]
 8003b96:	68c2      	ldr	r2, [r0, #12]
 8003b98:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b9a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ba4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8003ba6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8003bac:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003bb0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bb4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bba:	696b      	ldr	r3, [r5, #20]
 8003bbc:	6982      	ldr	r2, [r0, #24]
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003bc6:	4b40      	ldr	r3, [pc, #256]	; (8003cc8 <UART_SetConfig+0x138>)
{
 8003bc8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8003bca:	429d      	cmp	r5, r3
 8003bcc:	f04f 0419 	mov.w	r4, #25
 8003bd0:	d146      	bne.n	8003c60 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003bd2:	f7ff fac5 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8003bd6:	fb04 f300 	mul.w	r3, r4, r0
 8003bda:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003bde:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003be2:	00b6      	lsls	r6, r6, #2
 8003be4:	fbb3 f3f6 	udiv	r3, r3, r6
 8003be8:	fbb3 f3f8 	udiv	r3, r3, r8
 8003bec:	011e      	lsls	r6, r3, #4
 8003bee:	f7ff fab7 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8003bf2:	4360      	muls	r0, r4
 8003bf4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	fbb0 f7f3 	udiv	r7, r0, r3
 8003bfe:	f7ff faaf 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8003c02:	4360      	muls	r0, r4
 8003c04:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c12:	fb08 7313 	mls	r3, r8, r3, r7
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	3332      	adds	r3, #50	; 0x32
 8003c1a:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c1e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003c22:	f7ff fa9d 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8003c26:	4360      	muls	r0, r4
 8003c28:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003c2c:	0092      	lsls	r2, r2, #2
 8003c2e:	fbb0 faf2 	udiv	sl, r0, r2
 8003c32:	f7ff fa95 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003c36:	4360      	muls	r0, r4
 8003c38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c42:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c46:	fb08 a313 	mls	r3, r8, r3, sl
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	3332      	adds	r3, #50	; 0x32
 8003c4e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	433b      	orrs	r3, r7
 8003c58:	4433      	add	r3, r6
 8003c5a:	60ab      	str	r3, [r5, #8]
 8003c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c60:	f7ff fa6e 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8003c64:	fb04 f300 	mul.w	r3, r4, r0
 8003c68:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003c6c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003c70:	00b6      	lsls	r6, r6, #2
 8003c72:	fbb3 f3f6 	udiv	r3, r3, r6
 8003c76:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c7a:	011e      	lsls	r6, r3, #4
 8003c7c:	f7ff fa60 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8003c80:	4360      	muls	r0, r4
 8003c82:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	fbb0 f7f3 	udiv	r7, r0, r3
 8003c8c:	f7ff fa58 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8003c90:	4360      	muls	r0, r4
 8003c92:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003ca0:	fb08 7313 	mls	r3, r8, r3, r7
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	3332      	adds	r3, #50	; 0x32
 8003ca8:	fbb3 f3f8 	udiv	r3, r3, r8
 8003cac:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003cb0:	f7ff fa46 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8003cb4:	4360      	muls	r0, r4
 8003cb6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	fbb0 faf2 	udiv	sl, r0, r2
 8003cc0:	f7ff fa3e 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8003cc4:	e7b7      	b.n	8003c36 <UART_SetConfig+0xa6>
 8003cc6:	bf00      	nop
 8003cc8:	40013800 	.word	0x40013800

08003ccc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	4604      	mov	r4, r0
 8003cd0:	460e      	mov	r6, r1
 8003cd2:	4617      	mov	r7, r2
 8003cd4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003cd6:	6821      	ldr	r1, [r4, #0]
 8003cd8:	680b      	ldr	r3, [r1, #0]
 8003cda:	ea36 0303 	bics.w	r3, r6, r3
 8003cde:	d101      	bne.n	8003ce4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003ce0:	2000      	movs	r0, #0
}
 8003ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003ce4:	1c6b      	adds	r3, r5, #1
 8003ce6:	d0f7      	beq.n	8003cd8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003ce8:	b995      	cbnz	r5, 8003d10 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cea:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003cec:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cf4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003cfe:	2320      	movs	r3, #32
 8003d00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d04:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003d10:	f7fd fc20 	bl	8001554 <HAL_GetTick>
 8003d14:	1bc0      	subs	r0, r0, r7
 8003d16:	4285      	cmp	r5, r0
 8003d18:	d2dd      	bcs.n	8003cd6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003d1a:	e7e6      	b.n	8003cea <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003d1c <HAL_UART_Init>:
{
 8003d1c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003d1e:	4604      	mov	r4, r0
 8003d20:	b340      	cbz	r0, 8003d74 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003d22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003d26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d2a:	b91b      	cbnz	r3, 8003d34 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003d2c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003d30:	f005 fcbc 	bl	80096ac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003d36:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003d3c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003d3e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d44:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003d46:	f7ff ff23 	bl	8003b90 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d4a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d5c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d64:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8003d66:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d68:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003d6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003d6e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003d72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
}
 8003d76:	bd10      	pop	{r4, pc}

08003d78 <HAL_UART_Transmit>:
{
 8003d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d7c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003d7e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8003d82:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8003d84:	2b20      	cmp	r3, #32
{
 8003d86:	460d      	mov	r5, r1
 8003d88:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003d8a:	d14e      	bne.n	8003e2a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8003d8c:	2900      	cmp	r1, #0
 8003d8e:	d049      	beq.n	8003e24 <HAL_UART_Transmit+0xac>
 8003d90:	2a00      	cmp	r2, #0
 8003d92:	d047      	beq.n	8003e24 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8003d94:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d046      	beq.n	8003e2a <HAL_UART_Transmit+0xb2>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da6:	2321      	movs	r3, #33	; 0x21
 8003da8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003dac:	f7fd fbd2 	bl	8001554 <HAL_GetTick>
 8003db0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8003db2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003db6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003dba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	b96b      	cbnz	r3, 8003ddc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	4632      	mov	r2, r6
 8003dc4:	2140      	movs	r1, #64	; 0x40
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f7ff ff80 	bl	8003ccc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003dcc:	b9a8      	cbnz	r0, 8003dfa <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8003dce:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003dd0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003dd4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8003ddc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dde:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003de6:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003de8:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dee:	4620      	mov	r0, r4
 8003df0:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003df2:	d10e      	bne.n	8003e12 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df4:	f7ff ff6a 	bl	8003ccc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003df8:	b110      	cbz	r0, 8003e00 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8003dfa:	2003      	movs	r0, #3
 8003dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e00:	882b      	ldrh	r3, [r5, #0]
 8003e02:	6822      	ldr	r2, [r4, #0]
 8003e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e08:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003e0a:	6923      	ldr	r3, [r4, #16]
 8003e0c:	b943      	cbnz	r3, 8003e20 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8003e0e:	3502      	adds	r5, #2
 8003e10:	e7d3      	b.n	8003dba <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e12:	f7ff ff5b 	bl	8003ccc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003e16:	2800      	cmp	r0, #0
 8003e18:	d1ef      	bne.n	8003dfa <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	782a      	ldrb	r2, [r5, #0]
 8003e1e:	605a      	str	r2, [r3, #4]
 8003e20:	3501      	adds	r5, #1
 8003e22:	e7ca      	b.n	8003dba <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003e24:	2001      	movs	r0, #1
 8003e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003e2a:	2002      	movs	r0, #2
}
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e30 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8003e30:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d118      	bne.n	8003e6a <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL) || (Size == 0U)) 
 8003e38:	b1a9      	cbz	r1, 8003e66 <HAL_UART_Transmit_IT+0x36>
 8003e3a:	b1a2      	cbz	r2, 8003e66 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8003e3c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d012      	beq.n	8003e6a <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8003e44:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 8003e46:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e4a:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 8003e4c:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003e4e:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e50:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e52:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003e56:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8003e58:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003e5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e60:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003e62:	4618      	mov	r0, r3
 8003e64:	4770      	bx	lr
      return HAL_ERROR;
 8003e66:	2001      	movs	r0, #1
 8003e68:	4770      	bx	lr
    return HAL_BUSY;
 8003e6a:	2002      	movs	r0, #2
}
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_UART_Transmit_DMA>:
{
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4604      	mov	r4, r0
 8003e74:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003e76:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003e7a:	2a20      	cmp	r2, #32
 8003e7c:	d12a      	bne.n	8003ed4 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 8003e7e:	b339      	cbz	r1, 8003ed0 <HAL_UART_Transmit_DMA+0x60>
 8003e80:	b333      	cbz	r3, 8003ed0 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8003e82:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8003e86:	2a01      	cmp	r2, #1
 8003e88:	d024      	beq.n	8003ed4 <HAL_UART_Transmit_DMA+0x64>
 8003e8a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003e8e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e92:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8003e94:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e96:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8003ea0:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8003ea2:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ea4:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ea6:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8003ea8:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003eaa:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003eac:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <HAL_UART_Transmit_DMA+0x70>)
 8003eae:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003eb0:	6822      	ldr	r2, [r4, #0]
 8003eb2:	3204      	adds	r2, #4
 8003eb4:	f7fd fe74 	bl	8001ba0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003eb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ebc:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8003ebe:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003ec0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ec2:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8003ec4:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ecc:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8003ed4:	2002      	movs	r0, #2
}
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
 8003ed8:	08003f77 	.word	0x08003f77
 8003edc:	08003fa5 	.word	0x08003fa5
 8003ee0:	08004071 	.word	0x08004071

08003ee4 <HAL_UART_Receive_DMA>:
{
 8003ee4:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003ee6:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8003eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003eec:	2a20      	cmp	r2, #32
{
 8003eee:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003ef0:	d138      	bne.n	8003f64 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL) || (Size == 0U))
 8003ef2:	2900      	cmp	r1, #0
 8003ef4:	d034      	beq.n	8003f60 <HAL_UART_Receive_DMA+0x7c>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d032      	beq.n	8003f60 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8003efa:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8003efe:	2a01      	cmp	r2, #1
 8003f00:	d030      	beq.n	8003f64 <HAL_UART_Receive_DMA+0x80>
 8003f02:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8003f06:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f0a:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8003f0c:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f0e:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f10:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f12:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f16:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003f18:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003f1a:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f1c:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f1e:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 8003f20:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f22:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f24:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <HAL_UART_Receive_DMA+0x8c>)
 8003f26:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003f28:	460a      	mov	r2, r1
 8003f2a:	1d31      	adds	r1, r6, #4
 8003f2c:	f7fd fe38 	bl	8001ba0 <HAL_DMA_Start_IT>
    return HAL_OK;
 8003f30:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003f32:	682b      	ldr	r3, [r5, #0]
 8003f34:	9401      	str	r4, [sp, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	9201      	str	r2, [sp, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8003f3c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003f40:	9201      	str	r2, [sp, #4]
 8003f42:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4a:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f5a:	615a      	str	r2, [r3, #20]
}
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003f60:	2001      	movs	r0, #1
 8003f62:	e7fb      	b.n	8003f5c <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8003f64:	2002      	movs	r0, #2
 8003f66:	e7f9      	b.n	8003f5c <HAL_UART_Receive_DMA+0x78>
 8003f68:	08003faf 	.word	0x08003faf
 8003f6c:	08004065 	.word	0x08004065
 8003f70:	08004071 	.word	0x08004071

08003f74 <HAL_UART_TxCpltCallback>:
 8003f74:	4770      	bx	lr

08003f76 <UART_DMATransmitCplt>:
{
 8003f76:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f78:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f7a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f013 0320 	ands.w	r3, r3, #32
 8003f82:	d10a      	bne.n	8003f9a <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 8003f84:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f86:	6813      	ldr	r3, [r2, #0]
 8003f88:	695a      	ldr	r2, [r3, #20]
 8003f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8e:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f96:	60da      	str	r2, [r3, #12]
 8003f98:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f7ff ffea 	bl	8003f74 <HAL_UART_TxCpltCallback>
 8003fa0:	bd08      	pop	{r3, pc}

08003fa2 <HAL_UART_TxHalfCpltCallback>:
 8003fa2:	4770      	bx	lr

08003fa4 <UART_DMATxHalfCplt>:
{
 8003fa4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003fa6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003fa8:	f7ff fffb 	bl	8003fa2 <HAL_UART_TxHalfCpltCallback>
 8003fac:	bd08      	pop	{r3, pc}

08003fae <UART_DMAReceiveCplt>:
{
 8003fae:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fb0:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fb2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f013 0320 	ands.w	r3, r3, #32
 8003fba:	d110      	bne.n	8003fde <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8003fbc:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fbe:	6813      	ldr	r3, [r2, #0]
 8003fc0:	68d9      	ldr	r1, [r3, #12]
 8003fc2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003fc6:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc8:	6959      	ldr	r1, [r3, #20]
 8003fca:	f021 0101 	bic.w	r1, r1, #1
 8003fce:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd0:	6959      	ldr	r1, [r3, #20]
 8003fd2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003fd6:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8003fd8:	2320      	movs	r3, #32
 8003fda:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f003 fdbc 	bl	8007b5c <HAL_UART_RxCpltCallback>
 8003fe4:	bd08      	pop	{r3, pc}

08003fe6 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003fe6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8003fea:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003fec:	2b22      	cmp	r3, #34	; 0x22
 8003fee:	d136      	bne.n	800405e <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ff0:	6883      	ldr	r3, [r0, #8]
 8003ff2:	6901      	ldr	r1, [r0, #16]
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff8:	6802      	ldr	r2, [r0, #0]
 8003ffa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ffc:	d123      	bne.n	8004046 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ffe:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004000:	b9e9      	cbnz	r1, 800403e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004006:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800400a:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800400c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800400e:	3c01      	subs	r4, #1
 8004010:	b2a4      	uxth	r4, r4
 8004012:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8004014:	b98c      	cbnz	r4, 800403a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004016:	6803      	ldr	r3, [r0, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	f022 0220 	bic.w	r2, r2, #32
 800401e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004026:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	f022 0201 	bic.w	r2, r2, #1
 800402e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004030:	2320      	movs	r3, #32
 8004032:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8004036:	f003 fd91 	bl	8007b5c <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800403a:	2000      	movs	r0, #0
}
 800403c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	f823 2b01 	strh.w	r2, [r3], #1
 8004044:	e7e1      	b.n	800400a <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004046:	b921      	cbnz	r1, 8004052 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004048:	1c59      	adds	r1, r3, #1
 800404a:	6852      	ldr	r2, [r2, #4]
 800404c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	e7dc      	b.n	800400c <UART_Receive_IT+0x26>
 8004052:	6852      	ldr	r2, [r2, #4]
 8004054:	1c59      	adds	r1, r3, #1
 8004056:	6281      	str	r1, [r0, #40]	; 0x28
 8004058:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800405c:	e7f7      	b.n	800404e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800405e:	2002      	movs	r0, #2
 8004060:	bd10      	pop	{r4, pc}

08004062 <HAL_UART_RxHalfCpltCallback>:
 8004062:	4770      	bx	lr

08004064 <UART_DMARxHalfCplt>:
{
 8004064:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8004066:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004068:	f7ff fffb 	bl	8004062 <HAL_UART_RxHalfCpltCallback>
 800406c:	bd08      	pop	{r3, pc}

0800406e <HAL_UART_ErrorCallback>:
 800406e:	4770      	bx	lr

08004070 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004070:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8004072:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004074:	680b      	ldr	r3, [r1, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004078:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 800407c:	2821      	cmp	r0, #33	; 0x21
 800407e:	d10a      	bne.n	8004096 <UART_DMAError+0x26>
 8004080:	0612      	lsls	r2, r2, #24
 8004082:	d508      	bpl.n	8004096 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8004084:	2200      	movs	r2, #0
 8004086:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800408e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004090:	2220      	movs	r2, #32
 8004092:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8004096:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004098:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 800409c:	2a22      	cmp	r2, #34	; 0x22
 800409e:	d106      	bne.n	80040ae <UART_DMAError+0x3e>
 80040a0:	065b      	lsls	r3, r3, #25
 80040a2:	d504      	bpl.n	80040ae <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 80040a4:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 80040a6:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 80040a8:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80040aa:	f7ff fd63 	bl	8003b74 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040ae:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80040b0:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040b2:	f043 0310 	orr.w	r3, r3, #16
 80040b6:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80040b8:	f7ff ffd9 	bl	800406e <HAL_UART_ErrorCallback>
 80040bc:	bd08      	pop	{r3, pc}
	...

080040c0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040c0:	6803      	ldr	r3, [r0, #0]
{
 80040c2:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040c4:	681a      	ldr	r2, [r3, #0]
{
 80040c6:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80040c8:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040ca:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040cc:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80040ce:	d107      	bne.n	80040e0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040d0:	0696      	lsls	r6, r2, #26
 80040d2:	d55a      	bpl.n	800418a <HAL_UART_IRQHandler+0xca>
 80040d4:	068d      	lsls	r5, r1, #26
 80040d6:	d558      	bpl.n	800418a <HAL_UART_IRQHandler+0xca>
}
 80040d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80040dc:	f7ff bf83 	b.w	8003fe6 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040e0:	f015 0501 	ands.w	r5, r5, #1
 80040e4:	d102      	bne.n	80040ec <HAL_UART_IRQHandler+0x2c>
 80040e6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80040ea:	d04e      	beq.n	800418a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040ec:	07d3      	lsls	r3, r2, #31
 80040ee:	d505      	bpl.n	80040fc <HAL_UART_IRQHandler+0x3c>
 80040f0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040f2:	bf42      	ittt	mi
 80040f4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80040f6:	f043 0301 	orrmi.w	r3, r3, #1
 80040fa:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040fc:	0750      	lsls	r0, r2, #29
 80040fe:	d504      	bpl.n	800410a <HAL_UART_IRQHandler+0x4a>
 8004100:	b11d      	cbz	r5, 800410a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004102:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004104:	f043 0302 	orr.w	r3, r3, #2
 8004108:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800410a:	0793      	lsls	r3, r2, #30
 800410c:	d504      	bpl.n	8004118 <HAL_UART_IRQHandler+0x58>
 800410e:	b11d      	cbz	r5, 8004118 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004110:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004112:	f043 0304 	orr.w	r3, r3, #4
 8004116:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004118:	0716      	lsls	r6, r2, #28
 800411a:	d504      	bpl.n	8004126 <HAL_UART_IRQHandler+0x66>
 800411c:	b11d      	cbz	r5, 8004126 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800411e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004120:	f043 0308 	orr.w	r3, r3, #8
 8004124:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004126:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d066      	beq.n	80041fa <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800412c:	0695      	lsls	r5, r2, #26
 800412e:	d504      	bpl.n	800413a <HAL_UART_IRQHandler+0x7a>
 8004130:	0688      	lsls	r0, r1, #26
 8004132:	d502      	bpl.n	800413a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8004134:	4620      	mov	r0, r4
 8004136:	f7ff ff56 	bl	8003fe6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800413a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800413c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800413e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004140:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004142:	0711      	lsls	r1, r2, #28
 8004144:	d402      	bmi.n	800414c <HAL_UART_IRQHandler+0x8c>
 8004146:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800414a:	d01a      	beq.n	8004182 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800414c:	f7ff fd12 	bl	8003b74 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	0652      	lsls	r2, r2, #25
 8004156:	d510      	bpl.n	800417a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004158:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800415a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800415c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004160:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8004162:	b150      	cbz	r0, 800417a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <HAL_UART_IRQHandler+0x13c>)
 8004166:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004168:	f7fd fd58 	bl	8001c1c <HAL_DMA_Abort_IT>
 800416c:	2800      	cmp	r0, #0
 800416e:	d044      	beq.n	80041fa <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004170:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8004172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004176:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004178:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800417a:	4620      	mov	r0, r4
 800417c:	f7ff ff77 	bl	800406e <HAL_UART_ErrorCallback>
 8004180:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8004182:	f7ff ff74 	bl	800406e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004186:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004188:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800418a:	0616      	lsls	r6, r2, #24
 800418c:	d527      	bpl.n	80041de <HAL_UART_IRQHandler+0x11e>
 800418e:	060d      	lsls	r5, r1, #24
 8004190:	d525      	bpl.n	80041de <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004192:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8004196:	2a21      	cmp	r2, #33	; 0x21
 8004198:	d12f      	bne.n	80041fa <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800419a:	68a2      	ldr	r2, [r4, #8]
 800419c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80041a0:	6a22      	ldr	r2, [r4, #32]
 80041a2:	d117      	bne.n	80041d4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041a4:	8811      	ldrh	r1, [r2, #0]
 80041a6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80041aa:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80041ac:	6921      	ldr	r1, [r4, #16]
 80041ae:	b979      	cbnz	r1, 80041d0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80041b0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80041b2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80041b4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80041b6:	3a01      	subs	r2, #1
 80041b8:	b292      	uxth	r2, r2
 80041ba:	84e2      	strh	r2, [r4, #38]	; 0x26
 80041bc:	b9ea      	cbnz	r2, 80041fa <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041cc:	60da      	str	r2, [r3, #12]
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80041d0:	3201      	adds	r2, #1
 80041d2:	e7ee      	b.n	80041b2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041d4:	1c51      	adds	r1, r2, #1
 80041d6:	6221      	str	r1, [r4, #32]
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	605a      	str	r2, [r3, #4]
 80041dc:	e7ea      	b.n	80041b4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041de:	0650      	lsls	r0, r2, #25
 80041e0:	d50b      	bpl.n	80041fa <HAL_UART_IRQHandler+0x13a>
 80041e2:	064a      	lsls	r2, r1, #25
 80041e4:	d509      	bpl.n	80041fa <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041e6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80041e8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ee:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80041f0:	2320      	movs	r3, #32
 80041f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80041f6:	f7ff febd 	bl	8003f74 <HAL_UART_TxCpltCallback>
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	08004201 	.word	0x08004201

08004200 <UART_DMAAbortOnError>:
{
 8004200:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004202:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004204:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004206:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004208:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800420a:	f7ff ff30 	bl	800406e <HAL_UART_ErrorCallback>
 800420e:	bd08      	pop	{r3, pc}

08004210 <write_2>:
}

/**
 * Write sequence of n bytes from offset
 */
void write_2(unsigned int address, uint8_t *data, int offset, int n) {
 8004210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t *adr = data+offset;
    HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n, 1000);
 8004212:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    uint8_t *adr = data+offset;
 8004216:	440a      	add	r2, r1
    HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n, 1000);
 8004218:	b29b      	uxth	r3, r3
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	9200      	str	r2, [sp, #0]
 800421e:	9402      	str	r4, [sp, #8]
 8004220:	b282      	uxth	r2, r0
 8004222:	2302      	movs	r3, #2
 8004224:	21a0      	movs	r1, #160	; 0xa0
 8004226:	4804      	ldr	r0, [pc, #16]	; (8004238 <write_2+0x28>)
 8004228:	f7fe fb5e 	bl	80028e8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 800422c:	200a      	movs	r0, #10
}
 800422e:	b004      	add	sp, #16
 8004230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(10);
 8004234:	f7fd b994 	b.w	8001560 <HAL_Delay>
 8004238:	20001394 	.word	0x20001394

0800423c <write_1>:
void write_1(unsigned int address, uint8_t *data, int n) {
 800423c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004240:	4606      	mov	r6, r0
 8004242:	4688      	mov	r8, r1
 8004244:	4615      	mov	r5, r2
  int offD = 0;         // current offset in data pointer
 8004246:	2700      	movs	r7, #0
  while (c > 0) {
 8004248:	2d00      	cmp	r5, #0
 800424a:	dc01      	bgt.n	8004250 <write_1+0x14>
}
 800424c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nc = min(min(c, 30), PAGE_SIZE - offP);
 8004250:	2d1e      	cmp	r5, #30
 8004252:	462b      	mov	r3, r5
 8004254:	bfa8      	it	ge
 8004256:	231e      	movge	r3, #30
    offP = address % PAGE_SIZE;
 8004258:	f006 043f 	and.w	r4, r6, #63	; 0x3f
    nc = min(min(c, 30), PAGE_SIZE - offP);
 800425c:	f1c4 0440 	rsb	r4, r4, #64	; 0x40
 8004260:	429c      	cmp	r4, r3
 8004262:	bfa8      	it	ge
 8004264:	461c      	movge	r4, r3
    write_2(address, data, offD, nc);
 8004266:	463a      	mov	r2, r7
 8004268:	4630      	mov	r0, r6
 800426a:	4623      	mov	r3, r4
 800426c:	4641      	mov	r1, r8
 800426e:	f7ff ffcf 	bl	8004210 <write_2>
    c-=nc;
 8004272:	1b2d      	subs	r5, r5, r4
    offD+=nc;
 8004274:	4427      	add	r7, r4
    address+=nc;
 8004276:	4426      	add	r6, r4
 8004278:	e7e6      	b.n	8004248 <write_1+0xc>

0800427a <writeFloat>:
void writeFloat(unsigned int address, float data) {
 800427a:	b507      	push	{r0, r1, r2, lr}
 800427c:	ab02      	add	r3, sp, #8
 800427e:	f843 1d04 	str.w	r1, [r3, #-4]!
  write_1(address, (uint8_t*)&data, 4);
 8004282:	2204      	movs	r2, #4
 8004284:	4619      	mov	r1, r3
 8004286:	f7ff ffd9 	bl	800423c <write_1>
}
 800428a:	b003      	add	sp, #12
 800428c:	f85d fb04 	ldr.w	pc, [sp], #4

08004290 <read_2>:


/**
 * Read sequence of n bytes to offset
 */
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8004290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004294:	b098      	sub	sp, #96	; 0x60
  int r = 0;
  uint8_t pData[80];
  memset(&pData[0], n, sizeof(pData));
 8004296:	ad04      	add	r5, sp, #16
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8004298:	4680      	mov	r8, r0
 800429a:	460e      	mov	r6, r1
 800429c:	4617      	mov	r7, r2
  memset(&pData[0], n, sizeof(pData));
 800429e:	4619      	mov	r1, r3
 80042a0:	2250      	movs	r2, #80	; 0x50
 80042a2:	4628      	mov	r0, r5
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 80042a4:	461c      	mov	r4, r3
  memset(&pData[0], n, sizeof(pData));
 80042a6:	f005 fbb6 	bl	8009a16 <memset>
  HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDRESS, address, ADDRESS_SIZE, pData, n, 1000);
 80042aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ae:	9302      	str	r3, [sp, #8]
 80042b0:	b2a3      	uxth	r3, r4
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	9500      	str	r5, [sp, #0]
 80042b6:	2302      	movs	r3, #2
 80042b8:	fa1f f288 	uxth.w	r2, r8
 80042bc:	21a0      	movs	r1, #160	; 0xa0
 80042be:	4807      	ldr	r0, [pc, #28]	; (80042dc <read_2+0x4c>)
 80042c0:	f7fe fba8 	bl	8002a14 <HAL_I2C_Mem_Read>
  int r = 0;
 80042c4:	2300      	movs	r3, #0
  while (r<n) {
    data[offset+r] = pData[r];
 80042c6:	443e      	add	r6, r7
  while (r<n) {
 80042c8:	42a3      	cmp	r3, r4
 80042ca:	db02      	blt.n	80042d2 <read_2+0x42>
    r++;
  }
}
 80042cc:	b018      	add	sp, #96	; 0x60
 80042ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    data[offset+r] = pData[r];
 80042d2:	5cea      	ldrb	r2, [r5, r3]
 80042d4:	54f2      	strb	r2, [r6, r3]
    r++;
 80042d6:	3301      	adds	r3, #1
 80042d8:	e7f6      	b.n	80042c8 <read_2+0x38>
 80042da:	bf00      	nop
 80042dc:	20001394 	.word	0x20001394

080042e0 <read_1>:
void read_1(unsigned int address, uint8_t *data, int n) {
 80042e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e4:	4607      	mov	r7, r0
 80042e6:	4688      	mov	r8, r1
 80042e8:	4614      	mov	r4, r2
  int offD = 0;
 80042ea:	2600      	movs	r6, #0
  while (c > 0) {
 80042ec:	2c00      	cmp	r4, #0
 80042ee:	dc01      	bgt.n	80042f4 <read_1+0x14>
}
 80042f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f4:	2c20      	cmp	r4, #32
 80042f6:	4625      	mov	r5, r4
 80042f8:	bfa8      	it	ge
 80042fa:	2520      	movge	r5, #32
    read_2(address, data, offD, nc);
 80042fc:	4632      	mov	r2, r6
 80042fe:	4638      	mov	r0, r7
 8004300:	462b      	mov	r3, r5
 8004302:	4641      	mov	r1, r8
 8004304:	f7ff ffc4 	bl	8004290 <read_2>
    address+=nc;
 8004308:	442f      	add	r7, r5
    offD+=nc;
 800430a:	442e      	add	r6, r5
    c-=nc;
 800430c:	1b64      	subs	r4, r4, r5
 800430e:	e7ed      	b.n	80042ec <read_1+0xc>

08004310 <readFloat>:
float readFloat(unsigned int address) {
 8004310:	b510      	push	{r4, lr}
  read_1(address, _b, 4);
 8004312:	4c03      	ldr	r4, [pc, #12]	; (8004320 <readFloat+0x10>)
 8004314:	2204      	movs	r2, #4
 8004316:	4621      	mov	r1, r4
 8004318:	f7ff ffe2 	bl	80042e0 <read_1>
  return *(float*)&_b[0];
 800431c:	6820      	ldr	r0, [r4, #0]
}
 800431e:	bd10      	pop	{r4, pc}
 8004320:	20000c2c 	.word	0x20000c2c

08004324 <EEPROM_Init>:
{
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	240c      	movs	r4, #12
 8004328:	4d2a      	ldr	r5, [pc, #168]	; (80043d4 <EEPROM_Init+0xb0>)
     pid.kp[i] = readFloat( 0 + (4*i));
 800432a:	f1a4 000c 	sub.w	r0, r4, #12
 800432e:	f7ff ffef 	bl	8004310 <readFloat>
 8004332:	f845 0f04 	str.w	r0, [r5, #4]!
     pid.ki[i] = readFloat(12 + (4*i));
 8004336:	4620      	mov	r0, r4
 8004338:	f7ff ffea 	bl	8004310 <readFloat>
 800433c:	6328      	str	r0, [r5, #48]	; 0x30
     pid.kd[i] = readFloat(24 + (4*i));
 800433e:	f104 000c 	add.w	r0, r4, #12
 8004342:	f7ff ffe5 	bl	8004310 <readFloat>
 8004346:	6628      	str	r0, [r5, #96]	; 0x60
     pid.kp1[i] = readFloat(36 + (4*i));
 8004348:	f104 0018 	add.w	r0, r4, #24
 800434c:	f7ff ffe0 	bl	8004310 <readFloat>
 8004350:	60e8      	str	r0, [r5, #12]
     pid.ki1[i] = readFloat(48 + (4*i));
 8004352:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004356:	f7ff ffdb 	bl	8004310 <readFloat>
 800435a:	63e8      	str	r0, [r5, #60]	; 0x3c
     pid.kp2[i] = readFloat(60 + (4*i));
 800435c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004360:	f7ff ffd6 	bl	8004310 <readFloat>
 8004364:	61a8      	str	r0, [r5, #24]
     pid.ki2[i] = readFloat(72 + (4*i));
 8004366:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800436a:	f7ff ffd1 	bl	8004310 <readFloat>
 800436e:	64a8      	str	r0, [r5, #72]	; 0x48
     pid.kd2[i] = readFloat(84 + (4*i));
 8004370:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8004374:	f7ff ffcc 	bl	8004310 <readFloat>
 8004378:	66e8      	str	r0, [r5, #108]	; 0x6c
     pid.kp_rate[i] = readFloat(96 + (4*i));
 800437a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800437e:	f7ff ffc7 	bl	8004310 <readFloat>
 8004382:	6268      	str	r0, [r5, #36]	; 0x24
     pid.ki_rate[i] = readFloat(108 + (4*i));
 8004384:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8004388:	f7ff ffc2 	bl	8004310 <readFloat>
 800438c:	6568      	str	r0, [r5, #84]	; 0x54
     pid.kd_rate[i] = readFloat(120 + (4*i));
 800438e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8004392:	f7ff ffbd 	bl	8004310 <readFloat>
 8004396:	3404      	adds	r4, #4
   for(int i = 0; i < 3; i++){
 8004398:	2c18      	cmp	r4, #24
     pid.kd_rate[i] = readFloat(120 + (4*i));
 800439a:	67a8      	str	r0, [r5, #120]	; 0x78
   for(int i = 0; i < 3; i++){
 800439c:	d1c5      	bne.n	800432a <EEPROM_Init+0x6>
   magBias[0] = readFloat(132);
 800439e:	2084      	movs	r0, #132	; 0x84
 80043a0:	f7ff ffb6 	bl	8004310 <readFloat>
 80043a4:	4c0c      	ldr	r4, [pc, #48]	; (80043d8 <EEPROM_Init+0xb4>)
 80043a6:	6020      	str	r0, [r4, #0]
   magBias[1] = readFloat(136);
 80043a8:	2088      	movs	r0, #136	; 0x88
 80043aa:	f7ff ffb1 	bl	8004310 <readFloat>
 80043ae:	6060      	str	r0, [r4, #4]
   magBias[2] = readFloat(140);
 80043b0:	208c      	movs	r0, #140	; 0x8c
 80043b2:	f7ff ffad 	bl	8004310 <readFloat>
 80043b6:	60a0      	str	r0, [r4, #8]
   magScale[0] = readFloat(144);
 80043b8:	2090      	movs	r0, #144	; 0x90
 80043ba:	f7ff ffa9 	bl	8004310 <readFloat>
 80043be:	4c07      	ldr	r4, [pc, #28]	; (80043dc <EEPROM_Init+0xb8>)
 80043c0:	6020      	str	r0, [r4, #0]
   magScale[1] = readFloat(148);
 80043c2:	2094      	movs	r0, #148	; 0x94
 80043c4:	f7ff ffa4 	bl	8004310 <readFloat>
 80043c8:	6060      	str	r0, [r4, #4]
   magScale[2] = readFloat(152);
 80043ca:	2098      	movs	r0, #152	; 0x98
 80043cc:	f7ff ffa0 	bl	8004310 <readFloat>
 80043d0:	60a0      	str	r0, [r4, #8]
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
 80043d4:	20000d2c 	.word	0x20000d2c
 80043d8:	2000084c 	.word	0x2000084c
 80043dc:	2000126c 	.word	0x2000126c

080043e0 <gps_Init>:

void USART2_TX(unsigned char data){while(!(USART2->SR&0x40)); USART2->DR=data;}
void USART2_TX_str(char *str){while(*str){USART2_TX(*str++);}}

void gps_Init(void)
{
 80043e0:	4770      	bx	lr
	...

080043e4 <GPS_coord_to_degrees>:
    // if (c > 'F')
    return 0;
}

#define DIGIT_TO_VAL(_x)        (_x - '0')
uint32_t GPS_coord_to_degrees(char* s) {
 80043e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e8:	4606      	mov	r6, r0
 80043ea:	4607      	mov	r7, r0
  uint8_t deg = 0, min = 0;
  unsigned int frac_min = 0;
  uint8_t i;

  // scan for decimal point or end of field
  for (p = s; isdigit(*p); p++) ;
 80043ec:	f005 fae8 	bl	80099c0 <__locale_ctype_ptr>
 80043f0:	463b      	mov	r3, r7
 80043f2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80043f6:	4408      	add	r0, r1
 80043f8:	7844      	ldrb	r4, [r0, #1]
 80043fa:	f014 0404 	ands.w	r4, r4, #4
 80043fe:	d12b      	bne.n	8004458 <GPS_coord_to_degrees+0x74>
  q = s;

  // convert degrees
  while ((p - q) > 2) {
 8004400:	1bba      	subs	r2, r7, r6
 8004402:	2a02      	cmp	r2, #2
 8004404:	dc2a      	bgt.n	800445c <GPS_coord_to_degrees+0x78>
 8004406:	2500      	movs	r5, #0
    if (deg)
      deg *= 10;
    deg += DIGIT_TO_VAL(*q++);
  }
  // convert minutes
  while (p > q) {
 8004408:	42b7      	cmp	r7, r6
 800440a:	d831      	bhi.n	8004470 <GPS_coord_to_degrees+0x8c>
    min += DIGIT_TO_VAL(*q++);
  }
  // convert fractional minutes
  // expect up to four digits, result is in
  // ten-thousandths of a minute
  if (*p == '.') {
 800440c:	292e      	cmp	r1, #46	; 0x2e
 800440e:	d139      	bne.n	8004484 <GPS_coord_to_degrees+0xa0>
    q = p + 1;
 8004410:	461e      	mov	r6, r3
 8004412:	f04f 0804 	mov.w	r8, #4
  unsigned int frac_min = 0;
 8004416:	2700      	movs	r7, #0
    for (i = 0; i < 4; i++) {
      frac_min *= 10;
 8004418:	f04f 090a 	mov.w	r9, #10
      if (isdigit(*q))
 800441c:	f005 fad0 	bl	80099c0 <__locale_ctype_ptr>
 8004420:	7833      	ldrb	r3, [r6, #0]
      frac_min *= 10;
 8004422:	fb09 f707 	mul.w	r7, r9, r7
      if (isdigit(*q))
 8004426:	4418      	add	r0, r3
 8004428:	7842      	ldrb	r2, [r0, #1]
 800442a:	f108 38ff 	add.w	r8, r8, #4294967295
 800442e:	0752      	lsls	r2, r2, #29
        frac_min += *q++ - '0';
 8004430:	bf42      	ittt	mi
 8004432:	3b30      	submi	r3, #48	; 0x30
 8004434:	3601      	addmi	r6, #1
 8004436:	18ff      	addmi	r7, r7, r3
    for (i = 0; i < 4; i++) {
 8004438:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 800443c:	d1ee      	bne.n	800441c <GPS_coord_to_degrees+0x38>
    }
  }
  return deg * 10000000UL + (min * 1000000UL + frac_min*100UL) / 6;
 800443e:	2064      	movs	r0, #100	; 0x64
 8004440:	4347      	muls	r7, r0
 8004442:	4811      	ldr	r0, [pc, #68]	; (8004488 <GPS_coord_to_degrees+0xa4>)
 8004444:	fb00 7505 	mla	r5, r0, r5, r7
 8004448:	2006      	movs	r0, #6
 800444a:	fbb5 f5f0 	udiv	r5, r5, r0
}
 800444e:	480f      	ldr	r0, [pc, #60]	; (800448c <GPS_coord_to_degrees+0xa8>)
 8004450:	fb00 5004 	mla	r0, r0, r4, r5
 8004454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004458:	461f      	mov	r7, r3
 800445a:	e7c7      	b.n	80043ec <GPS_coord_to_degrees+0x8>
    deg += DIGIT_TO_VAL(*q++);
 800445c:	f816 2b01 	ldrb.w	r2, [r6], #1
      deg *= 10;
 8004460:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    deg += DIGIT_TO_VAL(*q++);
 8004464:	3a30      	subs	r2, #48	; 0x30
 8004466:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800446a:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800446e:	e7c7      	b.n	8004400 <GPS_coord_to_degrees+0x1c>
    min += DIGIT_TO_VAL(*q++);
 8004470:	f816 2b01 	ldrb.w	r2, [r6], #1
      min *= 10;
 8004474:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    min += DIGIT_TO_VAL(*q++);
 8004478:	3a30      	subs	r2, #48	; 0x30
 800447a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800447e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8004482:	e7c1      	b.n	8004408 <GPS_coord_to_degrees+0x24>
  unsigned int frac_min = 0;
 8004484:	2700      	movs	r7, #0
 8004486:	e7da      	b.n	800443e <GPS_coord_to_degrees+0x5a>
 8004488:	000f4240 	.word	0x000f4240
 800448c:	00989680 	.word	0x00989680

08004490 <grab_fields>:

// helper functions
uint16_t grab_fields(char* src, uint8_t mult) {  // convert string to uint16
  uint8_t i;
  uint16_t tmp = 0;
 8004490:	2300      	movs	r3, #0
uint16_t grab_fields(char* src, uint8_t mult) {  // convert string to uint16
 8004492:	b570      	push	{r4, r5, r6, lr}

  for(i=0; src[i]!=0; i++) {
 8004494:	461a      	mov	r2, r3
    if(src[i] == '.') {
      i++;
      if(mult==0){
        break;
      }else{
        src[i+mult] = 0;
 8004496:	461d      	mov	r5, r3
  for(i=0; src[i]!=0; i++) {
 8004498:	5c84      	ldrb	r4, [r0, r2]
 800449a:	b90c      	cbnz	r4, 80044a0 <grab_fields+0x10>
    }
    tmp *= 10;
    if(src[i] >='0' && src[i] <='9') tmp += src[i]-'0';
  }
  return tmp;
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd70      	pop	{r4, r5, r6, pc}
    if(src[i] == '.') {
 80044a0:	2c2e      	cmp	r4, #46	; 0x2e
 80044a2:	d105      	bne.n	80044b0 <grab_fields+0x20>
      i++;
 80044a4:	3201      	adds	r2, #1
 80044a6:	b2d2      	uxtb	r2, r2
      if(mult==0){
 80044a8:	2900      	cmp	r1, #0
 80044aa:	d0f7      	beq.n	800449c <grab_fields+0xc>
        src[i+mult] = 0;
 80044ac:	1884      	adds	r4, r0, r2
 80044ae:	5465      	strb	r5, [r4, r1]
    if(src[i] >='0' && src[i] <='9') tmp += src[i]-'0';
 80044b0:	5c84      	ldrb	r4, [r0, r2]
    tmp *= 10;
 80044b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044b6:	005b      	lsls	r3, r3, #1
    if(src[i] >='0' && src[i] <='9') tmp += src[i]-'0';
 80044b8:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    tmp *= 10;
 80044bc:	b29b      	uxth	r3, r3
    if(src[i] >='0' && src[i] <='9') tmp += src[i]-'0';
 80044be:	2e09      	cmp	r6, #9
 80044c0:	bf9c      	itt	ls
 80044c2:	3b30      	subls	r3, #48	; 0x30
 80044c4:	191b      	addls	r3, r3, r4
  for(i=0; src[i]!=0; i++) {
 80044c6:	f102 0201 	add.w	r2, r2, #1
    if(src[i] >='0' && src[i] <='9') tmp += src[i]-'0';
 80044ca:	bf98      	it	ls
 80044cc:	b29b      	uxthls	r3, r3
  for(i=0; src[i]!=0; i++) {
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	e7e2      	b.n	8004498 <grab_fields+0x8>

080044d2 <hex_c>:

uint8_t hex_c(uint8_t n) {    // convert '0'..'9','A'..'F' to 0..15
  n -= '0';
 80044d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80044d6:	b2db      	uxtb	r3, r3
  if(n>9)  n -= 7;
 80044d8:	2b09      	cmp	r3, #9
 80044da:	bf84      	itt	hi
 80044dc:	3837      	subhi	r0, #55	; 0x37
 80044de:	b2c3      	uxtbhi	r3, r0
  n &= 0x0F;
  return n;
}
 80044e0:	f003 000f 	and.w	r0, r3, #15
 80044e4:	4770      	bx	lr
	...

080044e8 <GPS_newFrame>:
  if (c == '$') {
 80044e8:	2824      	cmp	r0, #36	; 0x24
bool GPS_newFrame(uint8_t c) {
 80044ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ee:	4604      	mov	r4, r0
  if (c == '$') {
 80044f0:	d108      	bne.n	8004504 <GPS_newFrame+0x1c>
    param = 0; offset = 0; parity = 0;
 80044f2:	2000      	movs	r0, #0
 80044f4:	4b84      	ldr	r3, [pc, #528]	; (8004708 <GPS_newFrame+0x220>)
 80044f6:	7018      	strb	r0, [r3, #0]
 80044f8:	4b84      	ldr	r3, [pc, #528]	; (800470c <GPS_newFrame+0x224>)
 80044fa:	7018      	strb	r0, [r3, #0]
 80044fc:	4b84      	ldr	r3, [pc, #528]	; (8004710 <GPS_newFrame+0x228>)
 80044fe:	7018      	strb	r0, [r3, #0]
 8004500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (c == ',' || c == '*') {
 8004504:	282c      	cmp	r0, #44	; 0x2c
 8004506:	d002      	beq.n	800450e <GPS_newFrame+0x26>
 8004508:	282a      	cmp	r0, #42	; 0x2a
 800450a:	f040 80c8 	bne.w	800469e <GPS_newFrame+0x1b6>
    string[offset] = 0;
 800450e:	2100      	movs	r1, #0
 8004510:	4d7e      	ldr	r5, [pc, #504]	; (800470c <GPS_newFrame+0x224>)
 8004512:	4880      	ldr	r0, [pc, #512]	; (8004714 <GPS_newFrame+0x22c>)
 8004514:	782b      	ldrb	r3, [r5, #0]
    if (param == 0) { //frame identification
 8004516:	4e7c      	ldr	r6, [pc, #496]	; (8004708 <GPS_newFrame+0x220>)
    string[offset] = 0;
 8004518:	54c1      	strb	r1, [r0, r3]
    if (param == 0) { //frame identification
 800451a:	7833      	ldrb	r3, [r6, #0]
 800451c:	4602      	mov	r2, r0
 800451e:	4f7e      	ldr	r7, [pc, #504]	; (8004718 <GPS_newFrame+0x230>)
 8004520:	bb53      	cbnz	r3, 8004578 <GPS_newFrame+0x90>
      frame = 0;
 8004522:	703b      	strb	r3, [r7, #0]
      if (string[0] == 'G' && string[1] == 'N' && string[2] == 'G' && string[3] == 'G' && string[4] == 'A') frame = FRAME_GGA;
 8004524:	7803      	ldrb	r3, [r0, #0]
 8004526:	2b47      	cmp	r3, #71	; 0x47
 8004528:	d118      	bne.n	800455c <GPS_newFrame+0x74>
 800452a:	7843      	ldrb	r3, [r0, #1]
 800452c:	2b4e      	cmp	r3, #78	; 0x4e
 800452e:	d115      	bne.n	800455c <GPS_newFrame+0x74>
 8004530:	7883      	ldrb	r3, [r0, #2]
 8004532:	2b47      	cmp	r3, #71	; 0x47
 8004534:	d107      	bne.n	8004546 <GPS_newFrame+0x5e>
 8004536:	78c3      	ldrb	r3, [r0, #3]
 8004538:	2b47      	cmp	r3, #71	; 0x47
 800453a:	d104      	bne.n	8004546 <GPS_newFrame+0x5e>
 800453c:	7903      	ldrb	r3, [r0, #4]
 800453e:	2b41      	cmp	r3, #65	; 0x41
 8004540:	d101      	bne.n	8004546 <GPS_newFrame+0x5e>
 8004542:	2301      	movs	r3, #1
 8004544:	703b      	strb	r3, [r7, #0]
      if (string[0] == 'G' && string[1] == 'N' && string[2] == 'R' && string[3] == 'M' && string[4] == 'C') frame = FRAME_RMC;
 8004546:	7893      	ldrb	r3, [r2, #2]
 8004548:	2b52      	cmp	r3, #82	; 0x52
 800454a:	d107      	bne.n	800455c <GPS_newFrame+0x74>
 800454c:	78d3      	ldrb	r3, [r2, #3]
 800454e:	2b4d      	cmp	r3, #77	; 0x4d
 8004550:	d104      	bne.n	800455c <GPS_newFrame+0x74>
 8004552:	7913      	ldrb	r3, [r2, #4]
 8004554:	2b43      	cmp	r3, #67	; 0x43
 8004556:	d101      	bne.n	800455c <GPS_newFrame+0x74>
 8004558:	2302      	movs	r3, #2
 800455a:	703b      	strb	r3, [r7, #0]
    param++; offset = 0;
 800455c:	2000      	movs	r0, #0
 800455e:	7833      	ldrb	r3, [r6, #0]
    if (c == '*') checksum_param=1;
 8004560:	2c2a      	cmp	r4, #42	; 0x2a
    param++; offset = 0;
 8004562:	f103 0301 	add.w	r3, r3, #1
 8004566:	7033      	strb	r3, [r6, #0]
 8004568:	7028      	strb	r0, [r5, #0]
    if (c == '*') checksum_param=1;
 800456a:	f040 80c1 	bne.w	80046f0 <GPS_newFrame+0x208>
 800456e:	2201      	movs	r2, #1
 8004570:	4b6a      	ldr	r3, [pc, #424]	; (800471c <GPS_newFrame+0x234>)
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (frame == FRAME_GGA) {
 8004578:	783a      	ldrb	r2, [r7, #0]
 800457a:	2a01      	cmp	r2, #1
 800457c:	d172      	bne.n	8004664 <GPS_newFrame+0x17c>
      if      (param == 1){
 800457e:	2b01      	cmp	r3, #1
 8004580:	d12c      	bne.n	80045dc <GPS_newFrame+0xf4>
        timef = atof(string);
 8004582:	f005 f9f6 	bl	8009972 <atof>
 8004586:	f7fc fa9b 	bl	8000ac0 <__aeabi_d2f>
 800458a:	4680      	mov	r8, r0
        time = (uint32_t) timef;
 800458c:	f7fc fdf8 	bl	8001180 <__aeabi_f2uiz>
        GPS.hour = (time / 10000)+TD;
 8004590:	f242 7210 	movw	r2, #10000	; 0x2710
 8004594:	fbb0 f3f2 	udiv	r3, r0, r2
 8004598:	f103 0109 	add.w	r1, r3, #9
        GPS.minute = (time % 10000) / 100;
 800459c:	fb02 0313 	mls	r3, r2, r3, r0
 80045a0:	2264      	movs	r2, #100	; 0x64
 80045a2:	fbb3 f3f2 	udiv	r3, r3, r2
        GPS.hour = (time / 10000)+TD;
 80045a6:	4f5e      	ldr	r7, [pc, #376]	; (8004720 <GPS_newFrame+0x238>)
        GPS.minute = (time % 10000) / 100;
 80045a8:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
        GPS.seconds = (time % 100);
 80045ac:	fbb0 f3f2 	udiv	r3, r0, r2
 80045b0:	fb02 0013 	mls	r0, r2, r3, r0
        GPS.hour = (time / 10000)+TD;
 80045b4:	f887 1078 	strb.w	r1, [r7, #120]	; 0x78
        GPS.seconds = (time % 100);
 80045b8:	f887 007a 	strb.w	r0, [r7, #122]	; 0x7a
        GPS.milliseconds = fmod(timef, 1.0) * 1000;
 80045bc:	4640      	mov	r0, r8
 80045be:	f7fb ff33 	bl	8000428 <__aeabi_f2d>
 80045c2:	2200      	movs	r2, #0
 80045c4:	4b57      	ldr	r3, [pc, #348]	; (8004724 <GPS_newFrame+0x23c>)
 80045c6:	f009 fc2b 	bl	800de20 <fmod>
 80045ca:	2200      	movs	r2, #0
 80045cc:	4b56      	ldr	r3, [pc, #344]	; (8004728 <GPS_newFrame+0x240>)
 80045ce:	f7fb ff7f 	bl	80004d0 <__aeabi_dmul>
 80045d2:	f7fc fa55 	bl	8000a80 <__aeabi_d2uiz>
 80045d6:	f8a7 007e 	strh.w	r0, [r7, #126]	; 0x7e
 80045da:	e7bf      	b.n	800455c <GPS_newFrame+0x74>
      else if (param == 2)                     {GPS.latitudeDegrees = GPS_coord_to_degrees(string);}
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d105      	bne.n	80045ec <GPS_newFrame+0x104>
 80045e0:	f7ff ff00 	bl	80043e4 <GPS_coord_to_degrees>
 80045e4:	4b4e      	ldr	r3, [pc, #312]	; (8004720 <GPS_newFrame+0x238>)
 80045e6:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 80045ea:	e7b7      	b.n	800455c <GPS_newFrame+0x74>
      else if (param == 3 && string[0] == 'S') GPS.latitudeDegrees = -GPS.latitudeDegrees;
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d109      	bne.n	8004604 <GPS_newFrame+0x11c>
 80045f0:	7803      	ldrb	r3, [r0, #0]
 80045f2:	2b53      	cmp	r3, #83	; 0x53
 80045f4:	d1b2      	bne.n	800455c <GPS_newFrame+0x74>
 80045f6:	4a4a      	ldr	r2, [pc, #296]	; (8004720 <GPS_newFrame+0x238>)
 80045f8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80045fc:	425b      	negs	r3, r3
 80045fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004602:	e7ab      	b.n	800455c <GPS_newFrame+0x74>
      else if (param == 4)                     {GPS.longitudeDegrees = GPS_coord_to_degrees(string);}
 8004604:	2b04      	cmp	r3, #4
 8004606:	d105      	bne.n	8004614 <GPS_newFrame+0x12c>
 8004608:	f7ff feec 	bl	80043e4 <GPS_coord_to_degrees>
 800460c:	4b44      	ldr	r3, [pc, #272]	; (8004720 <GPS_newFrame+0x238>)
 800460e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 8004612:	e7a3      	b.n	800455c <GPS_newFrame+0x74>
      else if (param == 5 && string[0] == 'W') GPS.longitudeDegrees = -GPS.longitudeDegrees;
 8004614:	2b05      	cmp	r3, #5
 8004616:	d109      	bne.n	800462c <GPS_newFrame+0x144>
 8004618:	7803      	ldrb	r3, [r0, #0]
 800461a:	2b57      	cmp	r3, #87	; 0x57
 800461c:	d19e      	bne.n	800455c <GPS_newFrame+0x74>
 800461e:	4a40      	ldr	r2, [pc, #256]	; (8004720 <GPS_newFrame+0x238>)
 8004620:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004624:	425b      	negs	r3, r3
 8004626:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800462a:	e797      	b.n	800455c <GPS_newFrame+0x74>
      else if (param == 6)                     {f.GPS_FIX = (string[0]  > '0');}
 800462c:	2b06      	cmp	r3, #6
 800462e:	d107      	bne.n	8004640 <GPS_newFrame+0x158>
 8004630:	7803      	ldrb	r3, [r0, #0]
 8004632:	4a3e      	ldr	r2, [pc, #248]	; (800472c <GPS_newFrame+0x244>)
 8004634:	2b30      	cmp	r3, #48	; 0x30
 8004636:	bf94      	ite	ls
 8004638:	2300      	movls	r3, #0
 800463a:	2301      	movhi	r3, #1
 800463c:	73d3      	strb	r3, [r2, #15]
 800463e:	e78d      	b.n	800455c <GPS_newFrame+0x74>
      else if (param == 7)                     {GPS.satellites = grab_fields(string,0);}
 8004640:	2b07      	cmp	r3, #7
 8004642:	d105      	bne.n	8004650 <GPS_newFrame+0x168>
 8004644:	f7ff ff24 	bl	8004490 <grab_fields>
 8004648:	4b35      	ldr	r3, [pc, #212]	; (8004720 <GPS_newFrame+0x238>)
 800464a:	f883 0091 	strb.w	r0, [r3, #145]	; 0x91
 800464e:	e785      	b.n	800455c <GPS_newFrame+0x74>
      else if (param == 9)                     {GPS.altitude = grab_fields(string,0);}  // altitude in meters added by Mis
 8004650:	2b09      	cmp	r3, #9
 8004652:	d183      	bne.n	800455c <GPS_newFrame+0x74>
 8004654:	2100      	movs	r1, #0
 8004656:	482f      	ldr	r0, [pc, #188]	; (8004714 <GPS_newFrame+0x22c>)
 8004658:	f7ff ff1a 	bl	8004490 <grab_fields>
 800465c:	4b30      	ldr	r3, [pc, #192]	; (8004720 <GPS_newFrame+0x238>)
 800465e:	f8a3 0088 	strh.w	r0, [r3, #136]	; 0x88
 8004662:	e77b      	b.n	800455c <GPS_newFrame+0x74>
    } else if (frame == FRAME_RMC) {
 8004664:	2a02      	cmp	r2, #2
 8004666:	f47f af79 	bne.w	800455c <GPS_newFrame+0x74>
      if      (param == 7)                     {GPS.speed = ((uint32_t)grab_fields(string,1)*5144L)/1000L;}  //gps speed in cm/s will be used for navigation
 800466a:	2b07      	cmp	r3, #7
 800466c:	d10d      	bne.n	800468a <GPS_newFrame+0x1a2>
 800466e:	2101      	movs	r1, #1
 8004670:	f7ff ff0e 	bl	8004490 <grab_fields>
 8004674:	f241 4318 	movw	r3, #5144	; 0x1418
 8004678:	4358      	muls	r0, r3
 800467a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800467e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004682:	4b27      	ldr	r3, [pc, #156]	; (8004720 <GPS_newFrame+0x238>)
 8004684:	f8a3 008a 	strh.w	r0, [r3, #138]	; 0x8a
 8004688:	e768      	b.n	800455c <GPS_newFrame+0x74>
      else if (param == 8)                     {GPS.GPS_ground_course = grab_fields(string,1); }                 //ground course deg*10
 800468a:	2b08      	cmp	r3, #8
 800468c:	f47f af66 	bne.w	800455c <GPS_newFrame+0x74>
 8004690:	2101      	movs	r1, #1
 8004692:	f7ff fefd 	bl	8004490 <grab_fields>
 8004696:	4b22      	ldr	r3, [pc, #136]	; (8004720 <GPS_newFrame+0x238>)
 8004698:	f8a3 008e 	strh.w	r0, [r3, #142]	; 0x8e
 800469c:	e75e      	b.n	800455c <GPS_newFrame+0x74>
  } else if (c == '\r' || c == '\n') {
 800469e:	280d      	cmp	r0, #13
 80046a0:	491e      	ldr	r1, [pc, #120]	; (800471c <GPS_newFrame+0x234>)
 80046a2:	d001      	beq.n	80046a8 <GPS_newFrame+0x1c0>
 80046a4:	280a      	cmp	r0, #10
 80046a6:	d117      	bne.n	80046d8 <GPS_newFrame+0x1f0>
    if (checksum_param) { //parity checksum
 80046a8:	7808      	ldrb	r0, [r1, #0]
 80046aa:	b178      	cbz	r0, 80046cc <GPS_newFrame+0x1e4>
      uint8_t checksum = hex_c(string[0]);
 80046ac:	4c19      	ldr	r4, [pc, #100]	; (8004714 <GPS_newFrame+0x22c>)
 80046ae:	7820      	ldrb	r0, [r4, #0]
 80046b0:	f7ff ff0f 	bl	80044d2 <hex_c>
      checksum <<= 4;
 80046b4:	0100      	lsls	r0, r0, #4
 80046b6:	b2c2      	uxtb	r2, r0
      checksum += hex_c(string[1]);
 80046b8:	7860      	ldrb	r0, [r4, #1]
 80046ba:	f7ff ff0a 	bl	80044d2 <hex_c>
      if (checksum == parity) frameOK = 1;
 80046be:	4b14      	ldr	r3, [pc, #80]	; (8004710 <GPS_newFrame+0x228>)
      checksum += hex_c(string[1]);
 80046c0:	4410      	add	r0, r2
      if (checksum == parity) frameOK = 1;
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b2c0      	uxtb	r0, r0
 80046c6:	1a1b      	subs	r3, r3, r0
 80046c8:	4258      	negs	r0, r3
 80046ca:	4158      	adcs	r0, r3
    checksum_param=0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	700b      	strb	r3, [r1, #0]
  return frameOK && (frame==FRAME_GGA);
 80046d0:	b9a0      	cbnz	r0, 80046fc <GPS_newFrame+0x214>
 80046d2:	2000      	movs	r0, #0
 80046d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     if (offset < 15) string[offset++] = c;
 80046d8:	4a0c      	ldr	r2, [pc, #48]	; (800470c <GPS_newFrame+0x224>)
 80046da:	7813      	ldrb	r3, [r2, #0]
 80046dc:	2b0e      	cmp	r3, #14
 80046de:	bf9e      	ittt	ls
 80046e0:	1c58      	addls	r0, r3, #1
 80046e2:	7010      	strbls	r0, [r2, #0]
 80046e4:	4a0b      	ldrls	r2, [pc, #44]	; (8004714 <GPS_newFrame+0x22c>)
     if (!checksum_param) parity ^= c;
 80046e6:	7808      	ldrb	r0, [r1, #0]
     if (offset < 15) string[offset++] = c;
 80046e8:	bf98      	it	ls
 80046ea:	54d4      	strbls	r4, [r2, r3]
     if (!checksum_param) parity ^= c;
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d1f0      	bne.n	80046d2 <GPS_newFrame+0x1ea>
 80046f0:	4a07      	ldr	r2, [pc, #28]	; (8004710 <GPS_newFrame+0x228>)
 80046f2:	7813      	ldrb	r3, [r2, #0]
 80046f4:	405c      	eors	r4, r3
 80046f6:	7014      	strb	r4, [r2, #0]
 80046f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return frameOK && (frame==FRAME_GGA);
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <GPS_newFrame+0x230>)
 80046fe:	7818      	ldrb	r0, [r3, #0]
 8004700:	2801      	cmp	r0, #1
 8004702:	d1e6      	bne.n	80046d2 <GPS_newFrame+0x1ea>
}
 8004704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004708:	200006bf 	.word	0x200006bf
 800470c:	200006be 	.word	0x200006be
 8004710:	200006c0 	.word	0x200006c0
 8004714:	200006c1 	.word	0x200006c1
 8004718:	200006bd 	.word	0x200006bd
 800471c:	200006bc 	.word	0x200006bc
 8004720:	20000c48 	.word	0x20000c48
 8004724:	3ff00000 	.word	0x3ff00000
 8004728:	408f4000 	.word	0x408f4000
 800472c:	2000105c 	.word	0x2000105c

08004730 <I2C_ByteWrite>:
//#include "I2C.h"
#include "Board.h"

void I2C_ByteWrite(uint8_t DevAddress, uint8_t MemAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 8004730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t tmp;
	state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
 8004734:	2601      	movs	r6, #1
{
 8004736:	461c      	mov	r4, r3
 8004738:	4692      	mov	sl, r2
 800473a:	b086      	sub	sp, #24
	state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
 800473c:	4f2a      	ldr	r7, [pc, #168]	; (80047e8 <I2C_ByteWrite+0xb8>)
 800473e:	f10d 0517 	add.w	r5, sp, #23
 8004742:	4680      	mov	r8, r0
 8004744:	4689      	mov	r9, r1
 8004746:	460a      	mov	r2, r1
 8004748:	9500      	str	r5, [sp, #0]
 800474a:	4601      	mov	r1, r0
 800474c:	4633      	mov	r3, r6
 800474e:	4638      	mov	r0, r7
 8004750:	9602      	str	r6, [sp, #8]
 8004752:	9601      	str	r6, [sp, #4]
 8004754:	f7fe f95e 	bl	8002a14 <HAL_I2C_Mem_Read>
  ErrorCode = hi2c2.ErrorCode;
 8004758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
//      Error.error = 2;
//      error_signal();
//      HAL_Delay(4);
//    }
//  }
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800475a:	ebaa 0304 	sub.w	r3, sl, r4
 800475e:	199a      	adds	r2, r3, r6
 8004760:	fa06 f404 	lsl.w	r4, r6, r4
	data <<= (bitStart - length + 1); // shift data into correct position
 8004764:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8004768:	3c01      	subs	r4, #1
 800476a:	4094      	lsls	r4, r2
	data <<= (bitStart - length + 1); // shift data into correct position
 800476c:	4093      	lsls	r3, r2
	data &= mask; // zero all non-important bits in data
	tmp &= ~(mask); // zero all important bits in existing byte
 800476e:	f89d 2017 	ldrb.w	r2, [sp, #23]
	data <<= (bitStart - length + 1); // shift data into correct position
 8004772:	b2db      	uxtb	r3, r3
	tmp &= ~(mask); // zero all important bits in existing byte
 8004774:	ea22 0204 	bic.w	r2, r2, r4
	data &= mask; // zero all non-important bits in data
 8004778:	401c      	ands	r4, r3
	tmp |= data; // combine data with existing byte
	state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 800477a:	230a      	movs	r3, #10
	tmp |= data; // combine data with existing byte
 800477c:	4314      	orrs	r4, r2
	state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 800477e:	9302      	str	r3, [sp, #8]
 8004780:	e88d 0060 	stmia.w	sp, {r5, r6}
 8004784:	464a      	mov	r2, r9
 8004786:	4641      	mov	r1, r8
 8004788:	4638      	mov	r0, r7
 800478a:	4633      	mov	r3, r6
	tmp |= data; // combine data with existing byte
 800478c:	f88d 4017 	strb.w	r4, [sp, #23]
	state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 10);
 8004790:	f7fe f8aa 	bl	80028e8 <HAL_I2C_Mem_Write>
 8004794:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 8004796:	6c3f      	ldr	r7, [r7, #64]	; 0x40
  while(state)
  {
    sprintf(Buf, "MPU9250_Tx(write)_Error : %d, %ld\r\n", state, ErrorCode);
 8004798:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80047f4 <I2C_ByteWrite+0xc4>
 800479c:	4c13      	ldr	r4, [pc, #76]	; (80047ec <I2C_ByteWrite+0xbc>)
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800479e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80047f8 <I2C_ByteWrite+0xc8>
  while(state)
 80047a2:	b915      	cbnz	r5, 80047aa <I2C_ByteWrite+0x7a>
      Error.error = 2;
      error_signal();
      HAL_Delay(4);
    }
  }
}
 80047a4:	b006      	add	sp, #24
 80047a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf(Buf, "MPU9250_Tx(write)_Error : %d, %ld\r\n", state, ErrorCode);
 80047aa:	463b      	mov	r3, r7
 80047ac:	462a      	mov	r2, r5
 80047ae:	4641      	mov	r1, r8
 80047b0:	4620      	mov	r0, r4
 80047b2:	f005 f939 	bl	8009a28 <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80047b6:	4620      	mov	r0, r4
 80047b8:	f7fb fcca 	bl	8000150 <strlen>
 80047bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047c0:	b282      	uxth	r2, r0
 80047c2:	4621      	mov	r1, r4
 80047c4:	4648      	mov	r0, r9
 80047c6:	f7ff fad7 	bl	8003d78 <HAL_UART_Transmit>
      Error.error = 2;
 80047ca:	f04f 0a02 	mov.w	sl, #2
    while (Error.error !=0)
 80047ce:	4e08      	ldr	r6, [pc, #32]	; (80047f0 <I2C_ByteWrite+0xc0>)
 80047d0:	7833      	ldrb	r3, [r6, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0e5      	beq.n	80047a2 <I2C_ByteWrite+0x72>
      Error.error = 2;
 80047d6:	f886 a000 	strb.w	sl, [r6]
      error_signal();
 80047da:	f000 fd3b 	bl	8005254 <error_signal>
      HAL_Delay(4);
 80047de:	2004      	movs	r0, #4
 80047e0:	f7fc febe 	bl	8001560 <HAL_Delay>
 80047e4:	e7f4      	b.n	80047d0 <I2C_ByteWrite+0xa0>
 80047e6:	bf00      	nop
 80047e8:	20001394 	.word	0x20001394
 80047ec:	20001284 	.word	0x20001284
 80047f0:	20001564 	.word	0x20001564
 80047f4:	08010d25 	.word	0x08010d25
 80047f8:	200015ac 	.word	0x200015ac

080047fc <I2C_ByteRead>:
//	tmp >>= (bitStart - length + 1);
//	*data = tmp;
//}

void I2C_ByteRead(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80047fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;
  state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 8004800:	2501      	movs	r5, #1
 8004802:	4c1a      	ldr	r4, [pc, #104]	; (800486c <I2C_ByteRead+0x70>)
 8004804:	9502      	str	r5, [sp, #8]
 8004806:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
  ErrorCode = hi2c2.ErrorCode;
  while(state)
  {
    sprintf(Buf, "MPU9250_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 800480a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8004878 <I2C_ByteRead+0x7c>
  state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 800480e:	e88d 0028 	stmia.w	sp, {r3, r5}
 8004812:	4613      	mov	r3, r2
 8004814:	460a      	mov	r2, r1
 8004816:	4601      	mov	r1, r0
 8004818:	4620      	mov	r0, r4
 800481a:	f7fe f8fb 	bl	8002a14 <HAL_I2C_Mem_Read>
 800481e:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 8004820:	6c27      	ldr	r7, [r4, #64]	; 0x40
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8004822:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800487c <I2C_ByteRead+0x80>
    sprintf(Buf, "MPU9250_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 8004826:	4c12      	ldr	r4, [pc, #72]	; (8004870 <I2C_ByteRead+0x74>)
  while(state)
 8004828:	b915      	cbnz	r5, 8004830 <I2C_ByteRead+0x34>
      Error.error = 2;
      error_signal();
      HAL_Delay(4);
    }
  }
}
 800482a:	b004      	add	sp, #16
 800482c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf(Buf, "MPU9250_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 8004830:	463b      	mov	r3, r7
 8004832:	462a      	mov	r2, r5
 8004834:	4641      	mov	r1, r8
 8004836:	4620      	mov	r0, r4
 8004838:	f005 f8f6 	bl	8009a28 <sprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800483c:	4620      	mov	r0, r4
 800483e:	f7fb fc87 	bl	8000150 <strlen>
 8004842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004846:	b282      	uxth	r2, r0
 8004848:	4621      	mov	r1, r4
 800484a:	4648      	mov	r0, r9
 800484c:	f7ff fa94 	bl	8003d78 <HAL_UART_Transmit>
      Error.error = 2;
 8004850:	f04f 0a02 	mov.w	sl, #2
    while (Error.error !=0)
 8004854:	4e07      	ldr	r6, [pc, #28]	; (8004874 <I2C_ByteRead+0x78>)
 8004856:	7833      	ldrb	r3, [r6, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0e5      	beq.n	8004828 <I2C_ByteRead+0x2c>
      Error.error = 2;
 800485c:	f886 a000 	strb.w	sl, [r6]
      error_signal();
 8004860:	f000 fcf8 	bl	8005254 <error_signal>
      HAL_Delay(4);
 8004864:	2004      	movs	r0, #4
 8004866:	f7fc fe7b 	bl	8001560 <HAL_Delay>
 800486a:	e7f4      	b.n	8004856 <I2C_ByteRead+0x5a>
 800486c:	20001394 	.word	0x20001394
 8004870:	20001284 	.word	0x20001284
 8004874:	20001564 	.word	0x20001564
 8004878:	08010d08 	.word	0x08010d08
 800487c:	200015ac 	.word	0x200015ac

08004880 <I2C_Write>:
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1);
	*data = tmp & (1 << bitNum);
}

void I2C_Write(uint16_t DevAddress, uint8_t data, uint16_t Size)
{
 8004880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004884:	4c1e      	ldr	r4, [pc, #120]	; (8004900 <I2C_Write+0x80>)
{
 8004886:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004888:	4620      	mov	r0, r4
{
 800488a:	4616      	mov	r6, r2
 800488c:	f88d 100f 	strb.w	r1, [sp, #15]
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004890:	f7fe f9e0 	bl	8002c54 <HAL_I2C_GetState>
 8004894:	2820      	cmp	r0, #32
 8004896:	d111      	bne.n	80048bc <I2C_Write+0x3c>

  state = HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1000);
 8004898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800489c:	4629      	mov	r1, r5
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	4620      	mov	r0, r4
 80048a2:	4633      	mov	r3, r6
 80048a4:	f10d 020f 	add.w	r2, sp, #15
 80048a8:	f7fd fdc6 	bl	8002438 <HAL_I2C_Master_Transmit>
 80048ac:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 80048ae:	6c27      	ldr	r7, [r4, #64]	; 0x40
   while(state)
   {
     sprintf(Buf, "MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 80048b0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800490c <I2C_Write+0x8c>
 80048b4:	4c13      	ldr	r4, [pc, #76]	; (8004904 <I2C_Write+0x84>)
     HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80048b6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004910 <I2C_Write+0x90>
   while(state)
 80048ba:	b915      	cbnz	r5, 80048c2 <I2C_Write+0x42>
       HAL_Delay(4);
     }
   }
  }
  //while(HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1) != HAL_OK);
}
 80048bc:	b004      	add	sp, #16
 80048be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     sprintf(Buf, "MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 80048c2:	463b      	mov	r3, r7
 80048c4:	462a      	mov	r2, r5
 80048c6:	4641      	mov	r1, r8
 80048c8:	4620      	mov	r0, r4
 80048ca:	f005 f8ad 	bl	8009a28 <sprintf>
     HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7fb fc3e 	bl	8000150 <strlen>
 80048d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048d8:	b282      	uxth	r2, r0
 80048da:	4621      	mov	r1, r4
 80048dc:	4648      	mov	r0, r9
 80048de:	f7ff fa4b 	bl	8003d78 <HAL_UART_Transmit>
       Error.error = 2;
 80048e2:	f04f 0a02 	mov.w	sl, #2
     while (Error.error !=0)
 80048e6:	4e08      	ldr	r6, [pc, #32]	; (8004908 <I2C_Write+0x88>)
 80048e8:	7833      	ldrb	r3, [r6, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0e5      	beq.n	80048ba <I2C_Write+0x3a>
       Error.error = 2;
 80048ee:	f886 a000 	strb.w	sl, [r6]
       error_signal();
 80048f2:	f000 fcaf 	bl	8005254 <error_signal>
       HAL_Delay(4);
 80048f6:	2004      	movs	r0, #4
 80048f8:	f7fc fe32 	bl	8001560 <HAL_Delay>
 80048fc:	e7f4      	b.n	80048e8 <I2C_Write+0x68>
 80048fe:	bf00      	nop
 8004900:	20001394 	.word	0x20001394
 8004904:	20001284 	.word	0x20001284
 8004908:	20001564 	.word	0x20001564
 800490c:	08010d65 	.word	0x08010d65
 8004910:	200015ac 	.word	0x200015ac

08004914 <I2C_Read>:

void I2C_Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004914:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004918:	4c1d      	ldr	r4, [pc, #116]	; (8004990 <I2C_Read+0x7c>)
{
 800491a:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 800491c:	4620      	mov	r0, r4
{
 800491e:	460e      	mov	r6, r1
 8004920:	4617      	mov	r7, r2
  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 8004922:	f7fe f997 	bl	8002c54 <HAL_I2C_GetState>
 8004926:	2820      	cmp	r0, #32
 8004928:	d110      	bne.n	800494c <I2C_Read+0x38>

  state = HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1000);
 800492a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800492e:	4629      	mov	r1, r5
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	4620      	mov	r0, r4
 8004934:	463b      	mov	r3, r7
 8004936:	4632      	mov	r2, r6
 8004938:	f7fd fe54 	bl	80025e4 <HAL_I2C_Master_Receive>
 800493c:	4605      	mov	r5, r0
  ErrorCode = hi2c2.ErrorCode;
 800493e:	6c27      	ldr	r7, [r4, #64]	; 0x40
    while(state)
    {
      sprintf(Buf, "MS5611_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 8004940:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800499c <I2C_Read+0x88>
 8004944:	4c13      	ldr	r4, [pc, #76]	; (8004994 <I2C_Read+0x80>)
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 8004946:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80049a0 <I2C_Read+0x8c>
    while(state)
 800494a:	b915      	cbnz	r5, 8004952 <I2C_Read+0x3e>
        HAL_Delay(4);
      }
    }
  }
  //while(HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1) != HAL_OK);
}
 800494c:	b002      	add	sp, #8
 800494e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sprintf(Buf, "MS5611_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 8004952:	463b      	mov	r3, r7
 8004954:	462a      	mov	r2, r5
 8004956:	4641      	mov	r1, r8
 8004958:	4620      	mov	r0, r4
 800495a:	f005 f865 	bl	8009a28 <sprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)Buf, strlen(Buf), 1000);
 800495e:	4620      	mov	r0, r4
 8004960:	f7fb fbf6 	bl	8000150 <strlen>
 8004964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004968:	b282      	uxth	r2, r0
 800496a:	4621      	mov	r1, r4
 800496c:	4648      	mov	r0, r9
 800496e:	f7ff fa03 	bl	8003d78 <HAL_UART_Transmit>
        Error.error = 3;
 8004972:	f04f 0a03 	mov.w	sl, #3
      while (Error.error !=0)
 8004976:	4e08      	ldr	r6, [pc, #32]	; (8004998 <I2C_Read+0x84>)
 8004978:	7833      	ldrb	r3, [r6, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0e5      	beq.n	800494a <I2C_Read+0x36>
        Error.error = 3;
 800497e:	f886 a000 	strb.w	sl, [r6]
        error_signal();
 8004982:	f000 fc67 	bl	8005254 <error_signal>
        HAL_Delay(4);
 8004986:	2004      	movs	r0, #4
 8004988:	f7fc fdea 	bl	8001560 <HAL_Delay>
 800498c:	e7f4      	b.n	8004978 <I2C_Read+0x64>
 800498e:	bf00      	nop
 8004990:	20001394 	.word	0x20001394
 8004994:	20001284 	.word	0x20001284
 8004998:	20001564 	.word	0x20001564
 800499c:	08010d49 	.word	0x08010d49
 80049a0:	200015ac 	.word	0x200015ac

080049a4 <invSqrt>:
/* Calculate 1/sqrt(x) with magic number support */
//static float oneOverSqrt(float x) {
//    return 1.0f / (float) sqrt(x);
//}

float invSqrt(float x) {
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4606      	mov	r6, r0
	float halfx = 0.5f * x;
 80049a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80049ac:	f7fc f9e6 	bl	8000d7c <__aeabi_fmul>
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
 80049b0:	4c11      	ldr	r4, [pc, #68]	; (80049f8 <invSqrt+0x54>)
	float halfx = 0.5f * x;
 80049b2:	4605      	mov	r5, r0
	y = *(float*)&i;
 80049b4:	eba4 0466 	sub.w	r4, r4, r6, asr #1
	y = y * (1.5f - (halfx * y * y));
 80049b8:	4621      	mov	r1, r4
 80049ba:	f7fc f9df 	bl	8000d7c <__aeabi_fmul>
 80049be:	4621      	mov	r1, r4
 80049c0:	f7fc f9dc 	bl	8000d7c <__aeabi_fmul>
 80049c4:	4601      	mov	r1, r0
 80049c6:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80049ca:	f7fc f8cd 	bl	8000b68 <__aeabi_fsub>
 80049ce:	4621      	mov	r1, r4
 80049d0:	f7fc f9d4 	bl	8000d7c <__aeabi_fmul>
 80049d4:	4604      	mov	r4, r0
	y = y * (1.5f - (halfx * y * y));
 80049d6:	4601      	mov	r1, r0
 80049d8:	4628      	mov	r0, r5
 80049da:	f7fc f9cf 	bl	8000d7c <__aeabi_fmul>
 80049de:	4621      	mov	r1, r4
 80049e0:	f7fc f9cc 	bl	8000d7c <__aeabi_fmul>
 80049e4:	4601      	mov	r1, r0
 80049e6:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80049ea:	f7fc f8bd 	bl	8000b68 <__aeabi_fsub>
 80049ee:	4621      	mov	r1, r4
 80049f0:	f7fc f9c4 	bl	8000d7c <__aeabi_fmul>
	return y;
}
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
 80049f6:	bf00      	nop
 80049f8:	5f3759df 	.word	0x5f3759df
 80049fc:	00000000 	.word	0x00000000

08004a00 <calculateAngles>:
//   float tmp = *(float*)&i;
//   return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
//}


void calculateAngles(TM_AHRSIMU_t* AHRS) {
 8004a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AHRS->Roll = (float) atan2f(AHRS->_q0 * AHRS->_q1 + AHRS->_q2 * AHRS->_q3, 0.5f - AHRS->_q1 * AHRS->_q1 - AHRS->_q2 * AHRS->_q2);
 8004a04:	6986      	ldr	r6, [r0, #24]
void calculateAngles(TM_AHRSIMU_t* AHRS) {
 8004a06:	4604      	mov	r4, r0
    AHRS->Roll = (float) atan2f(AHRS->_q0 * AHRS->_q1 + AHRS->_q2 * AHRS->_q3, 0.5f - AHRS->_q1 * AHRS->_q1 - AHRS->_q2 * AHRS->_q2);
 8004a08:	69c5      	ldr	r5, [r0, #28]
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	f7fc f9b5 	bl	8000d7c <__aeabi_fmul>
 8004a12:	4601      	mov	r1, r0
 8004a14:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004a18:	f7fc f8a6 	bl	8000b68 <__aeabi_fsub>
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4607      	mov	r7, r0
 8004a20:	4628      	mov	r0, r5
 8004a22:	f7fc f9ab 	bl	8000d7c <__aeabi_fmul>
 8004a26:	4601      	mov	r1, r0
 8004a28:	4638      	mov	r0, r7
 8004a2a:	f7fc f89d 	bl	8000b68 <__aeabi_fsub>
 8004a2e:	6961      	ldr	r1, [r4, #20]
 8004a30:	4607      	mov	r7, r0
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7fc f9a2 	bl	8000d7c <__aeabi_fmul>
 8004a38:	6a21      	ldr	r1, [r4, #32]
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f7fc f99d 	bl	8000d7c <__aeabi_fmul>
 8004a42:	4601      	mov	r1, r0
 8004a44:	4630      	mov	r0, r6
 8004a46:	f7fc f891 	bl	8000b6c <__addsf3>
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	f009 fbf6 	bl	800e23c <atan2f>
    AHRS->Pitch = (float) asinf(-2.0f * (AHRS->_q1 * AHRS->_q3 - AHRS->_q0 * AHRS->_q2));
 8004a50:	6a21      	ldr	r1, [r4, #32]
    AHRS->Roll = (float) atan2f(AHRS->_q0 * AHRS->_q1 + AHRS->_q2 * AHRS->_q3, 0.5f - AHRS->_q1 * AHRS->_q1 - AHRS->_q2 * AHRS->_q2);
 8004a52:	6020      	str	r0, [r4, #0]
    AHRS->Pitch = (float) asinf(-2.0f * (AHRS->_q1 * AHRS->_q3 - AHRS->_q0 * AHRS->_q2));
 8004a54:	69a0      	ldr	r0, [r4, #24]
 8004a56:	f7fc f991 	bl	8000d7c <__aeabi_fmul>
 8004a5a:	69e1      	ldr	r1, [r4, #28]
 8004a5c:	4605      	mov	r5, r0
 8004a5e:	6960      	ldr	r0, [r4, #20]
 8004a60:	f7fc f98c 	bl	8000d7c <__aeabi_fmul>
 8004a64:	4601      	mov	r1, r0
 8004a66:	4628      	mov	r0, r5
 8004a68:	f7fc f87e 	bl	8000b68 <__aeabi_fsub>
 8004a6c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004a70:	f7fc f984 	bl	8000d7c <__aeabi_fmul>
 8004a74:	f009 fb94 	bl	800e1a0 <asinf>
    AHRS->Yaw = (float) atan2f(AHRS->_q1 * AHRS->_q2 + AHRS->_q0 * AHRS->_q3, 0.5f - AHRS->_q2 * AHRS->_q2 - AHRS->_q3 * AHRS->_q3);
 8004a78:	69e6      	ldr	r6, [r4, #28]
    AHRS->Pitch = (float) asinf(-2.0f * (AHRS->_q1 * AHRS->_q3 - AHRS->_q0 * AHRS->_q2));
 8004a7a:	6060      	str	r0, [r4, #4]
    AHRS->Yaw = (float) atan2f(AHRS->_q1 * AHRS->_q2 + AHRS->_q0 * AHRS->_q3, 0.5f - AHRS->_q2 * AHRS->_q2 - AHRS->_q3 * AHRS->_q3);
 8004a7c:	4631      	mov	r1, r6
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f7fc f97c 	bl	8000d7c <__aeabi_fmul>
 8004a84:	4601      	mov	r1, r0
 8004a86:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004a8a:	f7fc f86d 	bl	8000b68 <__aeabi_fsub>
 8004a8e:	6a25      	ldr	r5, [r4, #32]
 8004a90:	4607      	mov	r7, r0
 8004a92:	4629      	mov	r1, r5
 8004a94:	4628      	mov	r0, r5
 8004a96:	f7fc f971 	bl	8000d7c <__aeabi_fmul>
 8004a9a:	4601      	mov	r1, r0
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	f7fc f863 	bl	8000b68 <__aeabi_fsub>
 8004aa2:	69a1      	ldr	r1, [r4, #24]
 8004aa4:	4607      	mov	r7, r0
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f7fc f968 	bl	8000d7c <__aeabi_fmul>
 8004aac:	6961      	ldr	r1, [r4, #20]
 8004aae:	4606      	mov	r6, r0
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f7fc f963 	bl	8000d7c <__aeabi_fmul>
 8004ab6:	4601      	mov	r1, r0
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f7fc f857 	bl	8000b6c <__addsf3>
 8004abe:	4639      	mov	r1, r7
 8004ac0:	f009 fbbc 	bl	800e23c <atan2f>

    /* Calculate degrees and remove inclination */
    AHRS->Roll *= R2D;
 8004ac4:	4972      	ldr	r1, [pc, #456]	; (8004c90 <calculateAngles+0x290>)
    AHRS->Yaw = (float) atan2f(AHRS->_q1 * AHRS->_q2 + AHRS->_q0 * AHRS->_q3, 0.5f - AHRS->_q2 * AHRS->_q2 - AHRS->_q3 * AHRS->_q3);
 8004ac6:	4605      	mov	r5, r0
    AHRS->Roll *= R2D;
 8004ac8:	6820      	ldr	r0, [r4, #0]
 8004aca:	f7fc f957 	bl	8000d7c <__aeabi_fmul>
    AHRS->Pitch *= R2D;
 8004ace:	4970      	ldr	r1, [pc, #448]	; (8004c90 <calculateAngles+0x290>)
    AHRS->Roll *= R2D;
 8004ad0:	6020      	str	r0, [r4, #0]
 8004ad2:	4682      	mov	sl, r0
    AHRS->Pitch *= R2D;
 8004ad4:	6860      	ldr	r0, [r4, #4]
 8004ad6:	f7fc f951 	bl	8000d7c <__aeabi_fmul>
    AHRS->Yaw *= R2D;// - AHRS->Inclination;
 8004ada:	496d      	ldr	r1, [pc, #436]	; (8004c90 <calculateAngles+0x290>)
    AHRS->Pitch *= R2D;
 8004adc:	6060      	str	r0, [r4, #4]
 8004ade:	4607      	mov	r7, r0
    AHRS->Yaw *= R2D;// - AHRS->Inclination;
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f7fc f94b 	bl	8000d7c <__aeabi_fmul>
//        AHRS->Yaw = 180.0f - (-180.0f - AHRS->Yaw);
//    } else if (AHRS->Yaw > 180) {
//        AHRS->Yaw = -180.0f - (180.0f - AHRS->Yaw);
//    }
//
    if (AHRS->Yaw >= 180) {
 8004ae6:	496b      	ldr	r1, [pc, #428]	; (8004c94 <calculateAngles+0x294>)
    AHRS->Yaw *= R2D;// - AHRS->Inclination;
 8004ae8:	4605      	mov	r5, r0
    if (AHRS->Yaw >= 180) {
 8004aea:	f7fc faf9 	bl	80010e0 <__aeabi_fcmpge>
 8004aee:	b128      	cbz	r0, 8004afc <calculateAngles+0xfc>
        AHRS->Yaw -= 360.0f;
 8004af0:	4969      	ldr	r1, [pc, #420]	; (8004c98 <calculateAngles+0x298>)
 8004af2:	4628      	mov	r0, r5
 8004af4:	f7fc f838 	bl	8000b68 <__aeabi_fsub>
    } else if (AHRS->Yaw < -180) {
        AHRS->Yaw += 360.0f;
 8004af8:	60a0      	str	r0, [r4, #8]
 8004afa:	e007      	b.n	8004b0c <calculateAngles+0x10c>
    } else if (AHRS->Yaw < -180) {
 8004afc:	4967      	ldr	r1, [pc, #412]	; (8004c9c <calculateAngles+0x29c>)
 8004afe:	4628      	mov	r0, r5
 8004b00:	f7fc fada 	bl	80010b8 <__aeabi_fcmplt>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	f040 80b1 	bne.w	8004c6c <calculateAngles+0x26c>
    AHRS->Yaw *= R2D;// - AHRS->Inclination;
 8004b0a:	60a5      	str	r5, [r4, #8]
//            AHRS->Yaw = 360.0f - AHRS->Yaw;
//        } else {
//            AHRS->Yaw = - AHRS->Yaw;
//        }

  AHRS->Roll  = (0.95 * (Pre_IMU[ROLL]  + (imu.gyroRaw[ROLL] * 0.004)))  + (0.05 * AHRS->Roll);
 8004b0c:	4e64      	ldr	r6, [pc, #400]	; (8004ca0 <calculateAngles+0x2a0>)
 8004b0e:	4d65      	ldr	r5, [pc, #404]	; (8004ca4 <calculateAngles+0x2a4>)
 8004b10:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8004b12:	f7fb fc89 	bl	8000428 <__aeabi_f2d>
 8004b16:	a358      	add	r3, pc, #352	; (adr r3, 8004c78 <calculateAngles+0x278>)
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f7fb fcd8 	bl	80004d0 <__aeabi_dmul>
 8004b20:	4680      	mov	r8, r0
 8004b22:	6828      	ldr	r0, [r5, #0]
 8004b24:	4689      	mov	r9, r1
 8004b26:	f7fb fc7f 	bl	8000428 <__aeabi_f2d>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4640      	mov	r0, r8
 8004b30:	4649      	mov	r1, r9
 8004b32:	f7fb fb1b 	bl	800016c <__adddf3>
 8004b36:	a352      	add	r3, pc, #328	; (adr r3, 8004c80 <calculateAngles+0x280>)
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	f7fb fcc8 	bl	80004d0 <__aeabi_dmul>
 8004b40:	4680      	mov	r8, r0
 8004b42:	4650      	mov	r0, sl
 8004b44:	4689      	mov	r9, r1
 8004b46:	f7fb fc6f 	bl	8000428 <__aeabi_f2d>
 8004b4a:	a34f      	add	r3, pc, #316	; (adr r3, 8004c88 <calculateAngles+0x288>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f7fb fcbe 	bl	80004d0 <__aeabi_dmul>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4640      	mov	r0, r8
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	f7fb fb06 	bl	800016c <__adddf3>
 8004b60:	f7fb ffae 	bl	8000ac0 <__aeabi_d2f>
 8004b64:	4682      	mov	sl, r0
 8004b66:	6020      	str	r0, [r4, #0]
  AHRS->Pitch = (0.95 * (Pre_IMU[PITCH] + (imu.gyroRaw[PITCH] * 0.004))) + (0.05 * AHRS->Pitch);
 8004b68:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8004b6a:	f7fb fc5d 	bl	8000428 <__aeabi_f2d>
 8004b6e:	a342      	add	r3, pc, #264	; (adr r3, 8004c78 <calculateAngles+0x278>)
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f7fb fcac 	bl	80004d0 <__aeabi_dmul>
 8004b78:	4680      	mov	r8, r0
 8004b7a:	6868      	ldr	r0, [r5, #4]
 8004b7c:	4689      	mov	r9, r1
 8004b7e:	f7fb fc53 	bl	8000428 <__aeabi_f2d>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4640      	mov	r0, r8
 8004b88:	4649      	mov	r1, r9
 8004b8a:	f7fb faef 	bl	800016c <__adddf3>
 8004b8e:	a33c      	add	r3, pc, #240	; (adr r3, 8004c80 <calculateAngles+0x280>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f7fb fc9c 	bl	80004d0 <__aeabi_dmul>
 8004b98:	4680      	mov	r8, r0
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	4689      	mov	r9, r1
 8004b9e:	f7fb fc43 	bl	8000428 <__aeabi_f2d>
 8004ba2:	a339      	add	r3, pc, #228	; (adr r3, 8004c88 <calculateAngles+0x288>)
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f7fb fc92 	bl	80004d0 <__aeabi_dmul>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	f7fb fada 	bl	800016c <__adddf3>
 8004bb8:	f7fb ff82 	bl	8000ac0 <__aeabi_d2f>
 8004bbc:	4607      	mov	r7, r0
 8004bbe:	6060      	str	r0, [r4, #4]
  AHRS->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRS->Yaw);
 8004bc0:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8004bc2:	f7fb fc31 	bl	8000428 <__aeabi_f2d>
 8004bc6:	a32c      	add	r3, pc, #176	; (adr r3, 8004c78 <calculateAngles+0x278>)
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	f7fb fc80 	bl	80004d0 <__aeabi_dmul>
 8004bd0:	4680      	mov	r8, r0
 8004bd2:	68a8      	ldr	r0, [r5, #8]
 8004bd4:	4689      	mov	r9, r1
 8004bd6:	f7fb fc27 	bl	8000428 <__aeabi_f2d>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4640      	mov	r0, r8
 8004be0:	4649      	mov	r1, r9
 8004be2:	f7fb fac3 	bl	800016c <__adddf3>
 8004be6:	a326      	add	r3, pc, #152	; (adr r3, 8004c80 <calculateAngles+0x280>)
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f7fb fc70 	bl	80004d0 <__aeabi_dmul>
 8004bf0:	4680      	mov	r8, r0
 8004bf2:	68a0      	ldr	r0, [r4, #8]
 8004bf4:	4689      	mov	r9, r1
 8004bf6:	f7fb fc17 	bl	8000428 <__aeabi_f2d>
 8004bfa:	a323      	add	r3, pc, #140	; (adr r3, 8004c88 <calculateAngles+0x288>)
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f7fb fc66 	bl	80004d0 <__aeabi_dmul>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4640      	mov	r0, r8
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	f7fb faae 	bl	800016c <__adddf3>
 8004c10:	f7fb ff56 	bl	8000ac0 <__aeabi_d2f>
		
		imu.AHRS[ROLL] = AHRS->Roll + 0.0f;
 8004c14:	2100      	movs	r1, #0
  AHRS->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRS->Yaw);
 8004c16:	4680      	mov	r8, r0
 8004c18:	60a0      	str	r0, [r4, #8]
		imu.AHRS[ROLL] = AHRS->Roll + 0.0f;
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	f7fb ffa6 	bl	8000b6c <__addsf3>
		imu.AHRS[PITCH] = AHRS->Pitch + 0.0f;
 8004c20:	2100      	movs	r1, #0
		imu.AHRS[ROLL] = AHRS->Roll + 0.0f;
 8004c22:	4683      	mov	fp, r0
 8004c24:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
		imu.AHRS[PITCH] = AHRS->Pitch + 0.0f;
 8004c28:	4638      	mov	r0, r7
 8004c2a:	f7fb ff9f 	bl	8000b6c <__addsf3>
		imu.AHRS[YAW] = AHRS->Yaw;
 8004c2e:	f8c6 8090 	str.w	r8, [r6, #144]	; 0x90
		imu.AHRS[PITCH] = AHRS->Pitch + 0.0f;
 8004c32:	4681      	mov	r9, r0
 8004c34:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c

		att.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 8004c38:	4658      	mov	r0, fp
 8004c3a:	f7fc fa7b 	bl	8001134 <__aeabi_f2iz>
 8004c3e:	4c1a      	ldr	r4, [pc, #104]	; (8004ca8 <calculateAngles+0x2a8>)
 8004c40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c44:	0040      	lsls	r0, r0, #1
 8004c46:	8020      	strh	r0, [r4, #0]
    att.angle[PITCH] = (int16_t) imu.AHRS[PITCH] * 10;
 8004c48:	4648      	mov	r0, r9
 8004c4a:	f7fc fa73 	bl	8001134 <__aeabi_f2iz>
 8004c4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c52:	0040      	lsls	r0, r0, #1
 8004c54:	8060      	strh	r0, [r4, #2]
    att.heading = (int16_t) imu.AHRS[YAW];
 8004c56:	4640      	mov	r0, r8
 8004c58:	f7fc fa6c 	bl	8001134 <__aeabi_f2iz>
		
	Pre_IMU[ROLL]  = AHRS->Roll;
 8004c5c:	f8c5 a000 	str.w	sl, [r5]
    att.heading = (int16_t) imu.AHRS[YAW];
 8004c60:	80a0      	strh	r0, [r4, #4]
	Pre_IMU[PITCH] = AHRS->Pitch;
 8004c62:	606f      	str	r7, [r5, #4]
	Pre_IMU[YAW]   = AHRS->Yaw;
 8004c64:	f8c5 8008 	str.w	r8, [r5, #8]
 8004c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AHRS->Yaw += 360.0f;
 8004c6c:	490a      	ldr	r1, [pc, #40]	; (8004c98 <calculateAngles+0x298>)
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f7fb ff7c 	bl	8000b6c <__addsf3>
 8004c74:	e740      	b.n	8004af8 <calculateAngles+0xf8>
 8004c76:	bf00      	nop
 8004c78:	d2f1a9fc 	.word	0xd2f1a9fc
 8004c7c:	3f70624d 	.word	0x3f70624d
 8004c80:	66666666 	.word	0x66666666
 8004c84:	3fee6666 	.word	0x3fee6666
 8004c88:	9999999a 	.word	0x9999999a
 8004c8c:	3fa99999 	.word	0x3fa99999
 8004c90:	42652ee0 	.word	0x42652ee0
 8004c94:	43340000 	.word	0x43340000
 8004c98:	43b40000 	.word	0x43b40000
 8004c9c:	c3340000 	.word	0xc3340000
 8004ca0:	200011b8 	.word	0x200011b8
 8004ca4:	200006d0 	.word	0x200006d0
 8004ca8:	20000ce0 	.word	0x20000ce0

08004cac <TM_AHRSIMU_Init>:
	}

void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRS, float sampleRate, float beta, float inclination) {
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4604      	mov	r4, r0
    AHRS->_beta = beta;
 8004cb0:	6102      	str	r2, [r0, #16]
    AHRS->_sampleRate = 1 / sampleRate;
 8004cb2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRS, float sampleRate, float beta, float inclination) {
 8004cb6:	461d      	mov	r5, r3
    AHRS->_sampleRate = 1 / sampleRate;
 8004cb8:	f7fc f914 	bl	8000ee4 <__aeabi_fdiv>
    AHRS->Inclination = inclination;

    AHRS->_q0 = 1.0f;
 8004cbc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004cc0:	6163      	str	r3, [r4, #20]
    AHRS->_q1 = 0.0f;
 8004cc2:	2300      	movs	r3, #0
    AHRS->_sampleRate = 1 / sampleRate;
 8004cc4:	6260      	str	r0, [r4, #36]	; 0x24
    AHRS->Inclination = inclination;
 8004cc6:	60e5      	str	r5, [r4, #12]
    AHRS->_q1 = 0.0f;
 8004cc8:	61a3      	str	r3, [r4, #24]
    AHRS->_q2 = 0.0f;
 8004cca:	61e3      	str	r3, [r4, #28]
    AHRS->_q3 = 0.0f;
 8004ccc:	6223      	str	r3, [r4, #32]
 8004cce:	bd38      	pop	{r3, r4, r5, pc}

08004cd0 <TM_AHRSIMU_UpdateIMU>:

    /* Calculate new angles */
    calculateAngles(AHRS);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRS, float gx, float gy, float gz, float ax, float ay, float az) {
 8004cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd4:	4683      	mov	fp, r0
 8004cd6:	b093      	sub	sp, #76	; 0x4c
 8004cd8:	4608      	mov	r0, r1
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	
		// Convert gyroscope degrees/sec to radians/sec
	  gx = AHRSIMU_DEG2RAD(gx);
 8004cda:	4952      	ldr	r1, [pc, #328]	; (8004e24 <TM_AHRSIMU_UpdateIMU+0x154>)
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRS, float gx, float gy, float gz, float ax, float ay, float az) {
 8004cdc:	4615      	mov	r5, r2
 8004cde:	461c      	mov	r4, r3
	  gx = AHRSIMU_DEG2RAD(gx);
 8004ce0:	f7fc f84c 	bl	8000d7c <__aeabi_fmul>
	  gy = AHRSIMU_DEG2RAD(gy);
 8004ce4:	494f      	ldr	r1, [pc, #316]	; (8004e24 <TM_AHRSIMU_UpdateIMU+0x154>)
	  gx = AHRSIMU_DEG2RAD(gx);
 8004ce6:	4681      	mov	r9, r0
	  gy = AHRSIMU_DEG2RAD(gy);
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f7fc f847 	bl	8000d7c <__aeabi_fmul>
	  gz = AHRSIMU_DEG2RAD(gz);
 8004cee:	494d      	ldr	r1, [pc, #308]	; (8004e24 <TM_AHRSIMU_UpdateIMU+0x154>)
	  gy = AHRSIMU_DEG2RAD(gy);
 8004cf0:	4682      	mov	sl, r0
	  gz = AHRSIMU_DEG2RAD(gz);
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7fc f842 	bl	8000d7c <__aeabi_fmul>

    /* Rate of change of quaternion from gyroscope */
    qDot1 = 0.5f * (-AHRS->_q1 * gx - AHRS->_q2 * gy - AHRS->_q3 * gz);
 8004cf8:	f8db 5018 	ldr.w	r5, [fp, #24]
 8004cfc:	f8db 3020 	ldr.w	r3, [fp, #32]
	  gz = AHRSIMU_DEG2RAD(gz);
 8004d00:	9002      	str	r0, [sp, #8]
    qDot1 = 0.5f * (-AHRS->_q1 * gx - AHRS->_q2 * gy - AHRS->_q3 * gz);
 8004d02:	4649      	mov	r1, r9
 8004d04:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	f7fc f837 	bl	8000d7c <__aeabi_fmul>
 8004d0e:	f8db 401c 	ldr.w	r4, [fp, #28]
 8004d12:	9001      	str	r0, [sp, #4]
 8004d14:	4621      	mov	r1, r4
 8004d16:	4650      	mov	r0, sl
 8004d18:	f7fc f830 	bl	8000d7c <__aeabi_fmul>
 8004d1c:	9b01      	ldr	r3, [sp, #4]
 8004d1e:	4601      	mov	r1, r0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fb ff21 	bl	8000b68 <__aeabi_fsub>
 8004d26:	9900      	ldr	r1, [sp, #0]
 8004d28:	9001      	str	r0, [sp, #4]
 8004d2a:	9802      	ldr	r0, [sp, #8]
 8004d2c:	f7fc f826 	bl	8000d7c <__aeabi_fmul>
 8004d30:	9b01      	ldr	r3, [sp, #4]
 8004d32:	4601      	mov	r1, r0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fb ff17 	bl	8000b68 <__aeabi_fsub>
 8004d3a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004d3e:	f7fc f81d 	bl	8000d7c <__aeabi_fmul>
    qDot2 = 0.5f * (AHRS->_q0 * gx + AHRS->_q2 * gz - AHRS->_q3 * gy);
 8004d42:	f8db 3014 	ldr.w	r3, [fp, #20]
    qDot1 = 0.5f * (-AHRS->_q1 * gx - AHRS->_q2 * gy - AHRS->_q3 * gz);
 8004d46:	9004      	str	r0, [sp, #16]
    qDot2 = 0.5f * (AHRS->_q0 * gx + AHRS->_q2 * gz - AHRS->_q3 * gy);
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4648      	mov	r0, r9
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	f7fc f815 	bl	8000d7c <__aeabi_fmul>
 8004d52:	4621      	mov	r1, r4
 8004d54:	9003      	str	r0, [sp, #12]
 8004d56:	9802      	ldr	r0, [sp, #8]
 8004d58:	f7fc f810 	bl	8000d7c <__aeabi_fmul>
 8004d5c:	9b03      	ldr	r3, [sp, #12]
 8004d5e:	4601      	mov	r1, r0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fb ff03 	bl	8000b6c <__addsf3>
 8004d66:	9900      	ldr	r1, [sp, #0]
 8004d68:	9003      	str	r0, [sp, #12]
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	f7fc f806 	bl	8000d7c <__aeabi_fmul>
 8004d70:	9b03      	ldr	r3, [sp, #12]
 8004d72:	4601      	mov	r1, r0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fb fef7 	bl	8000b68 <__aeabi_fsub>
 8004d7a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004d7e:	f7fb fffd 	bl	8000d7c <__aeabi_fmul>
    qDot3 = 0.5f * (AHRS->_q0 * gy - AHRS->_q1 * gz + AHRS->_q3 * gx);
 8004d82:	9901      	ldr	r1, [sp, #4]
    qDot2 = 0.5f * (AHRS->_q0 * gx + AHRS->_q2 * gz - AHRS->_q3 * gy);
 8004d84:	9005      	str	r0, [sp, #20]
    qDot3 = 0.5f * (AHRS->_q0 * gy - AHRS->_q1 * gz + AHRS->_q3 * gx);
 8004d86:	4650      	mov	r0, sl
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRS, float gx, float gy, float gz, float ax, float ay, float az) {
 8004d88:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004d8c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004d8e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    qDot3 = 0.5f * (AHRS->_q0 * gy - AHRS->_q1 * gz + AHRS->_q3 * gx);
 8004d90:	f7fb fff4 	bl	8000d7c <__aeabi_fmul>
 8004d94:	4629      	mov	r1, r5
 8004d96:	9003      	str	r0, [sp, #12]
 8004d98:	9802      	ldr	r0, [sp, #8]
 8004d9a:	f7fb ffef 	bl	8000d7c <__aeabi_fmul>
 8004d9e:	9b03      	ldr	r3, [sp, #12]
 8004da0:	4601      	mov	r1, r0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fb fee0 	bl	8000b68 <__aeabi_fsub>
 8004da8:	9900      	ldr	r1, [sp, #0]
 8004daa:	9003      	str	r0, [sp, #12]
 8004dac:	4648      	mov	r0, r9
 8004dae:	f7fb ffe5 	bl	8000d7c <__aeabi_fmul>
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	4601      	mov	r1, r0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fb fed8 	bl	8000b6c <__addsf3>
 8004dbc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004dc0:	f7fb ffdc 	bl	8000d7c <__aeabi_fmul>
    qDot4 = 0.5f * (AHRS->_q0 * gz + AHRS->_q1 * gy - AHRS->_q2 * gx);
 8004dc4:	9901      	ldr	r1, [sp, #4]
    qDot3 = 0.5f * (AHRS->_q0 * gy - AHRS->_q1 * gz + AHRS->_q3 * gx);
 8004dc6:	9006      	str	r0, [sp, #24]
    qDot4 = 0.5f * (AHRS->_q0 * gz + AHRS->_q1 * gy - AHRS->_q2 * gx);
 8004dc8:	9802      	ldr	r0, [sp, #8]
 8004dca:	f7fb ffd7 	bl	8000d7c <__aeabi_fmul>
 8004dce:	4629      	mov	r1, r5
 8004dd0:	9002      	str	r0, [sp, #8]
 8004dd2:	4650      	mov	r0, sl
 8004dd4:	f7fb ffd2 	bl	8000d7c <__aeabi_fmul>
 8004dd8:	9b02      	ldr	r3, [sp, #8]
 8004dda:	4601      	mov	r1, r0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fb fec5 	bl	8000b6c <__addsf3>
 8004de2:	4621      	mov	r1, r4
 8004de4:	4682      	mov	sl, r0
 8004de6:	4648      	mov	r0, r9
 8004de8:	f7fb ffc8 	bl	8000d7c <__aeabi_fmul>
 8004dec:	4601      	mov	r1, r0
 8004dee:	4650      	mov	r0, sl
 8004df0:	f7fb feba 	bl	8000b68 <__aeabi_fsub>
 8004df4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004df8:	f7fb ffc0 	bl	8000d7c <__aeabi_fmul>

    /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8004dfc:	2100      	movs	r1, #0
    qDot4 = 0.5f * (AHRS->_q0 * gz + AHRS->_q1 * gy - AHRS->_q2 * gx);
 8004dfe:	9007      	str	r0, [sp, #28]
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8004e00:	4640      	mov	r0, r8
 8004e02:	f7fc f94f 	bl	80010a4 <__aeabi_fcmpeq>
 8004e06:	b178      	cbz	r0, 8004e28 <TM_AHRSIMU_UpdateIMU+0x158>
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f7fc f94a 	bl	80010a4 <__aeabi_fcmpeq>
 8004e10:	b150      	cbz	r0, 8004e28 <TM_AHRSIMU_UpdateIMU+0x158>
 8004e12:	2100      	movs	r1, #0
 8004e14:	4630      	mov	r0, r6
 8004e16:	f7fc f945 	bl	80010a4 <__aeabi_fcmpeq>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	f040 8198 	bne.w	8005150 <TM_AHRSIMU_UpdateIMU+0x480>
 8004e20:	e002      	b.n	8004e28 <TM_AHRSIMU_UpdateIMU+0x158>
 8004e22:	bf00      	nop
 8004e24:	3c8efa35 	.word	0x3c8efa35

        /* Normalise accelerometer measurement */
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8004e28:	4641      	mov	r1, r8
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	f7fb ffa6 	bl	8000d7c <__aeabi_fmul>
 8004e30:	4639      	mov	r1, r7
 8004e32:	4681      	mov	r9, r0
 8004e34:	4638      	mov	r0, r7
 8004e36:	f7fb ffa1 	bl	8000d7c <__aeabi_fmul>
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	4648      	mov	r0, r9
 8004e3e:	f7fb fe95 	bl	8000b6c <__addsf3>
 8004e42:	4631      	mov	r1, r6
 8004e44:	4681      	mov	r9, r0
 8004e46:	4630      	mov	r0, r6
 8004e48:	f7fb ff98 	bl	8000d7c <__aeabi_fmul>
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	4648      	mov	r0, r9
 8004e50:	f7fb fe8c 	bl	8000b6c <__addsf3>
 8004e54:	f7ff fda6 	bl	80049a4 <invSqrt>
 8004e58:	4681      	mov	r9, r0
        ax *= recipNorm;
 8004e5a:	4601      	mov	r1, r0
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	f7fb ff8d 	bl	8000d7c <__aeabi_fmul>
        ay *= recipNorm;
 8004e62:	4649      	mov	r1, r9
        ax *= recipNorm;
 8004e64:	9002      	str	r0, [sp, #8]
        ay *= recipNorm;
 8004e66:	4638      	mov	r0, r7
 8004e68:	f7fb ff88 	bl	8000d7c <__aeabi_fmul>
        az *= recipNorm;
 8004e6c:	4649      	mov	r1, r9
        ay *= recipNorm;
 8004e6e:	9003      	str	r0, [sp, #12]
        az *= recipNorm;
 8004e70:	4630      	mov	r0, r6
 8004e72:	f7fb ff83 	bl	8000d7c <__aeabi_fmul>

        /* Auxiliary variables to avoid repeated arithmetic */
        _2q0 = 2.0f * AHRS->_q0;
 8004e76:	9901      	ldr	r1, [sp, #4]
        az *= recipNorm;
 8004e78:	9009      	str	r0, [sp, #36]	; 0x24
        _2q0 = 2.0f * AHRS->_q0;
 8004e7a:	4608      	mov	r0, r1
 8004e7c:	f7fb fe76 	bl	8000b6c <__addsf3>
        _2q1 = 2.0f * AHRS->_q1;
 8004e80:	4629      	mov	r1, r5
        _2q0 = 2.0f * AHRS->_q0;
 8004e82:	900a      	str	r0, [sp, #40]	; 0x28
        _2q1 = 2.0f * AHRS->_q1;
 8004e84:	4628      	mov	r0, r5
 8004e86:	f7fb fe71 	bl	8000b6c <__addsf3>
        _2q2 = 2.0f * AHRS->_q2;
 8004e8a:	4621      	mov	r1, r4
        _2q1 = 2.0f * AHRS->_q1;
 8004e8c:	900b      	str	r0, [sp, #44]	; 0x2c
        _2q2 = 2.0f * AHRS->_q2;
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7fb fe6c 	bl	8000b6c <__addsf3>
        _2q3 = 2.0f * AHRS->_q3;
 8004e94:	9900      	ldr	r1, [sp, #0]
        _2q2 = 2.0f * AHRS->_q2;
 8004e96:	900c      	str	r0, [sp, #48]	; 0x30
        _2q3 = 2.0f * AHRS->_q3;
 8004e98:	4608      	mov	r0, r1
 8004e9a:	f7fb fe67 	bl	8000b6c <__addsf3>
        _4q0 = 4.0f * AHRS->_q0;
 8004e9e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _2q3 = 2.0f * AHRS->_q3;
 8004ea2:	900d      	str	r0, [sp, #52]	; 0x34
        _4q0 = 4.0f * AHRS->_q0;
 8004ea4:	9801      	ldr	r0, [sp, #4]
 8004ea6:	f7fb ff69 	bl	8000d7c <__aeabi_fmul>
        _4q1 = 4.0f * AHRS->_q1;
 8004eaa:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _4q0 = 4.0f * AHRS->_q0;
 8004eae:	4680      	mov	r8, r0
        _4q1 = 4.0f * AHRS->_q1;
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f7fb ff63 	bl	8000d7c <__aeabi_fmul>
        _4q2 = 4.0f * AHRS->_q2;
 8004eb6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        _4q1 = 4.0f * AHRS->_q1;
 8004eba:	4607      	mov	r7, r0
        _4q2 = 4.0f * AHRS->_q2;
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7fb ff5d 	bl	8000d7c <__aeabi_fmul>
        _8q1 = 8.0f * AHRS->_q1;
 8004ec2:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
        _4q2 = 4.0f * AHRS->_q2;
 8004ec6:	9008      	str	r0, [sp, #32]
        _8q1 = 8.0f * AHRS->_q1;
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f7fb ff57 	bl	8000d7c <__aeabi_fmul>
        _8q2 = 8.0f * AHRS->_q2;
 8004ece:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
        _8q1 = 8.0f * AHRS->_q1;
 8004ed2:	4681      	mov	r9, r0
        _8q2 = 8.0f * AHRS->_q2;
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f7fb ff51 	bl	8000d7c <__aeabi_fmul>
        q0q0 = AHRS->_q0 * AHRS->_q0;
        q1q1 = AHRS->_q1 * AHRS->_q1;
 8004eda:	4629      	mov	r1, r5
        _8q2 = 8.0f * AHRS->_q2;
 8004edc:	900e      	str	r0, [sp, #56]	; 0x38
        q1q1 = AHRS->_q1 * AHRS->_q1;
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f7fb ff4c 	bl	8000d7c <__aeabi_fmul>
        q2q2 = AHRS->_q2 * AHRS->_q2;
 8004ee4:	4621      	mov	r1, r4
        q1q1 = AHRS->_q1 * AHRS->_q1;
 8004ee6:	4606      	mov	r6, r0
        q2q2 = AHRS->_q2 * AHRS->_q2;
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f7fb ff47 	bl	8000d7c <__aeabi_fmul>
        q3q3 = AHRS->_q3 * AHRS->_q3;
 8004eee:	9900      	ldr	r1, [sp, #0]
        q2q2 = AHRS->_q2 * AHRS->_q2;
 8004ef0:	4682      	mov	sl, r0
        q3q3 = AHRS->_q3 * AHRS->_q3;
 8004ef2:	4608      	mov	r0, r1
 8004ef4:	f7fb ff42 	bl	8000d7c <__aeabi_fmul>

        /* Gradient decent algorithm corrective step */
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004ef8:	4651      	mov	r1, sl
        q3q3 = AHRS->_q3 * AHRS->_q3;
 8004efa:	900f      	str	r0, [sp, #60]	; 0x3c
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004efc:	4640      	mov	r0, r8
 8004efe:	f7fb ff3d 	bl	8000d7c <__aeabi_fmul>
 8004f02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f04:	9010      	str	r0, [sp, #64]	; 0x40
 8004f06:	9802      	ldr	r0, [sp, #8]
 8004f08:	f7fb ff38 	bl	8000d7c <__aeabi_fmul>
 8004f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f0e:	4601      	mov	r1, r0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fb fe2b 	bl	8000b6c <__addsf3>
 8004f16:	4631      	mov	r1, r6
 8004f18:	9010      	str	r0, [sp, #64]	; 0x40
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	f7fb ff2e 	bl	8000d7c <__aeabi_fmul>
 8004f20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f22:	4601      	mov	r1, r0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fb fe21 	bl	8000b6c <__addsf3>
 8004f2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f2c:	4680      	mov	r8, r0
 8004f2e:	9803      	ldr	r0, [sp, #12]
 8004f30:	f7fb ff24 	bl	8000d7c <__aeabi_fmul>
 8004f34:	4601      	mov	r1, r0
 8004f36:	4640      	mov	r0, r8
 8004f38:	f7fb fe16 	bl	8000b68 <__aeabi_fsub>
        q0q0 = AHRS->_q0 * AHRS->_q0;
 8004f3c:	9901      	ldr	r1, [sp, #4]
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004f3e:	9011      	str	r0, [sp, #68]	; 0x44
        q0q0 = AHRS->_q0 * AHRS->_q0;
 8004f40:	4608      	mov	r0, r1
 8004f42:	f7fb ff1b 	bl	8000d7c <__aeabi_fmul>
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRS->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004f46:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004f4a:	f7fb ff17 	bl	8000d7c <__aeabi_fmul>
 8004f4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f50:	4680      	mov	r8, r0
 8004f52:	4638      	mov	r0, r7
 8004f54:	f7fb ff12 	bl	8000d7c <__aeabi_fmul>
 8004f58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f5a:	9010      	str	r0, [sp, #64]	; 0x40
 8004f5c:	9802      	ldr	r0, [sp, #8]
 8004f5e:	f7fb ff0d 	bl	8000d7c <__aeabi_fmul>
 8004f62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f64:	4601      	mov	r1, r0
 8004f66:	4610      	mov	r0, r2
 8004f68:	f7fb fdfe 	bl	8000b68 <__aeabi_fsub>
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	9010      	str	r0, [sp, #64]	; 0x40
 8004f70:	4628      	mov	r0, r5
 8004f72:	f7fb ff03 	bl	8000d7c <__aeabi_fmul>
 8004f76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f78:	4601      	mov	r1, r0
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f7fb fdf6 	bl	8000b6c <__addsf3>
 8004f80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f82:	9010      	str	r0, [sp, #64]	; 0x40
 8004f84:	9803      	ldr	r0, [sp, #12]
 8004f86:	f7fb fef9 	bl	8000d7c <__aeabi_fmul>
 8004f8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f8c:	4601      	mov	r1, r0
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f7fb fdea 	bl	8000b68 <__aeabi_fsub>
 8004f94:	4639      	mov	r1, r7
 8004f96:	f7fb fde7 	bl	8000b68 <__aeabi_fsub>
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	9010      	str	r0, [sp, #64]	; 0x40
 8004f9e:	4648      	mov	r0, r9
 8004fa0:	f7fb feec 	bl	8000d7c <__aeabi_fmul>
 8004fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004fa6:	4601      	mov	r1, r0
 8004fa8:	4610      	mov	r0, r2
 8004faa:	f7fb fddf 	bl	8000b6c <__addsf3>
 8004fae:	4651      	mov	r1, sl
 8004fb0:	9010      	str	r0, [sp, #64]	; 0x40
 8004fb2:	4648      	mov	r0, r9
 8004fb4:	f7fb fee2 	bl	8000d7c <__aeabi_fmul>
 8004fb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004fba:	4601      	mov	r1, r0
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f7fb fdd5 	bl	8000b6c <__addsf3>
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	4681      	mov	r9, r0
 8004fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fc8:	f7fb fed8 	bl	8000d7c <__aeabi_fmul>
 8004fcc:	4601      	mov	r1, r0
 8004fce:	4648      	mov	r0, r9
 8004fd0:	f7fb fdcc 	bl	8000b6c <__addsf3>
        s2 = 4.0f * q0q0 * AHRS->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004fd4:	4641      	mov	r1, r8
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRS->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004fd6:	4681      	mov	r9, r0
        s2 = 4.0f * q0q0 * AHRS->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f7fb fecf 	bl	8000d7c <__aeabi_fmul>
 8004fde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	9802      	ldr	r0, [sp, #8]
 8004fe4:	f7fb feca 	bl	8000d7c <__aeabi_fmul>
 8004fe8:	4601      	mov	r1, r0
 8004fea:	4638      	mov	r0, r7
 8004fec:	f7fb fdbe 	bl	8000b6c <__addsf3>
 8004ff0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ff2:	4607      	mov	r7, r0
 8004ff4:	9808      	ldr	r0, [sp, #32]
 8004ff6:	f7fb fec1 	bl	8000d7c <__aeabi_fmul>
 8004ffa:	4601      	mov	r1, r0
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	f7fb fdb5 	bl	8000b6c <__addsf3>
 8005002:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005004:	4607      	mov	r7, r0
 8005006:	9803      	ldr	r0, [sp, #12]
 8005008:	f7fb feb8 	bl	8000d7c <__aeabi_fmul>
 800500c:	4601      	mov	r1, r0
 800500e:	4638      	mov	r0, r7
 8005010:	f7fb fdaa 	bl	8000b68 <__aeabi_fsub>
 8005014:	9908      	ldr	r1, [sp, #32]
 8005016:	f7fb fda7 	bl	8000b68 <__aeabi_fsub>
 800501a:	4631      	mov	r1, r6
 800501c:	4607      	mov	r7, r0
 800501e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005020:	f7fb feac 	bl	8000d7c <__aeabi_fmul>
 8005024:	4601      	mov	r1, r0
 8005026:	4638      	mov	r0, r7
 8005028:	f7fb fda0 	bl	8000b6c <__addsf3>
 800502c:	4651      	mov	r1, sl
 800502e:	4607      	mov	r7, r0
 8005030:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005032:	f7fb fea3 	bl	8000d7c <__aeabi_fmul>
 8005036:	4601      	mov	r1, r0
 8005038:	4638      	mov	r0, r7
 800503a:	f7fb fd97 	bl	8000b6c <__addsf3>
 800503e:	9908      	ldr	r1, [sp, #32]
 8005040:	4607      	mov	r7, r0
 8005042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005044:	f7fb fe9a 	bl	8000d7c <__aeabi_fmul>
 8005048:	4601      	mov	r1, r0
 800504a:	4638      	mov	r0, r7
 800504c:	f7fb fd8e 	bl	8000b6c <__addsf3>
        s3 = 4.0f * q1q1 * AHRS->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRS->_q3 - _2q2 * ay;
 8005050:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
        s2 = 4.0f * q0q0 * AHRS->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8005054:	4680      	mov	r8, r0
        s3 = 4.0f * q1q1 * AHRS->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRS->_q3 - _2q2 * ay;
 8005056:	4630      	mov	r0, r6
 8005058:	f7fb fe90 	bl	8000d7c <__aeabi_fmul>
 800505c:	9900      	ldr	r1, [sp, #0]
 800505e:	f7fb fe8d 	bl	8000d7c <__aeabi_fmul>
 8005062:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005064:	4606      	mov	r6, r0
 8005066:	9802      	ldr	r0, [sp, #8]
 8005068:	f7fb fe88 	bl	8000d7c <__aeabi_fmul>
 800506c:	4601      	mov	r1, r0
 800506e:	4630      	mov	r0, r6
 8005070:	f7fb fd7a 	bl	8000b68 <__aeabi_fsub>
 8005074:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8005078:	4606      	mov	r6, r0
 800507a:	4650      	mov	r0, sl
 800507c:	f7fb fe7e 	bl	8000d7c <__aeabi_fmul>
 8005080:	9900      	ldr	r1, [sp, #0]
 8005082:	f7fb fe7b 	bl	8000d7c <__aeabi_fmul>
 8005086:	4601      	mov	r1, r0
 8005088:	4630      	mov	r0, r6
 800508a:	f7fb fd6f 	bl	8000b6c <__addsf3>
 800508e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005090:	4606      	mov	r6, r0
 8005092:	9803      	ldr	r0, [sp, #12]
 8005094:	f7fb fe72 	bl	8000d7c <__aeabi_fmul>
 8005098:	4601      	mov	r1, r0
 800509a:	4630      	mov	r0, r6
 800509c:	f7fb fd64 	bl	8000b68 <__aeabi_fsub>

        /* Normalise step magnitude */
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 80050a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
        s3 = 4.0f * q1q1 * AHRS->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRS->_q3 - _2q2 * ay;
 80050a2:	4682      	mov	sl, r0
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 80050a4:	4619      	mov	r1, r3
 80050a6:	4618      	mov	r0, r3
 80050a8:	9302      	str	r3, [sp, #8]
 80050aa:	f7fb fe67 	bl	8000d7c <__aeabi_fmul>
 80050ae:	4649      	mov	r1, r9
 80050b0:	4606      	mov	r6, r0
 80050b2:	4648      	mov	r0, r9
 80050b4:	f7fb fe62 	bl	8000d7c <__aeabi_fmul>
 80050b8:	4601      	mov	r1, r0
 80050ba:	4630      	mov	r0, r6
 80050bc:	f7fb fd56 	bl	8000b6c <__addsf3>
 80050c0:	4641      	mov	r1, r8
 80050c2:	4606      	mov	r6, r0
 80050c4:	4640      	mov	r0, r8
 80050c6:	f7fb fe59 	bl	8000d7c <__aeabi_fmul>
 80050ca:	4601      	mov	r1, r0
 80050cc:	4630      	mov	r0, r6
 80050ce:	f7fb fd4d 	bl	8000b6c <__addsf3>
 80050d2:	4651      	mov	r1, sl
 80050d4:	4606      	mov	r6, r0
 80050d6:	4650      	mov	r0, sl
 80050d8:	f7fb fe50 	bl	8000d7c <__aeabi_fmul>
 80050dc:	4601      	mov	r1, r0
 80050de:	4630      	mov	r0, r6
 80050e0:	f7fb fd44 	bl	8000b6c <__addsf3>
 80050e4:	f7ff fc5e 	bl	80049a4 <invSqrt>
        s0 *= recipNorm;
 80050e8:	9b02      	ldr	r3, [sp, #8]
        s1 *= recipNorm;
        s2 *= recipNorm;
        s3 *= recipNorm;

        /* Apply feedback step */
        qDot1 -= AHRS->_beta * s0;
 80050ea:	f8db 6010 	ldr.w	r6, [fp, #16]
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 80050ee:	4607      	mov	r7, r0
        s0 *= recipNorm;
 80050f0:	4601      	mov	r1, r0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fb fe42 	bl	8000d7c <__aeabi_fmul>
        qDot1 -= AHRS->_beta * s0;
 80050f8:	4631      	mov	r1, r6
 80050fa:	f7fb fe3f 	bl	8000d7c <__aeabi_fmul>
 80050fe:	4601      	mov	r1, r0
 8005100:	9804      	ldr	r0, [sp, #16]
 8005102:	f7fb fd31 	bl	8000b68 <__aeabi_fsub>
        s1 *= recipNorm;
 8005106:	4639      	mov	r1, r7
        qDot1 -= AHRS->_beta * s0;
 8005108:	9004      	str	r0, [sp, #16]
        s1 *= recipNorm;
 800510a:	4648      	mov	r0, r9
 800510c:	f7fb fe36 	bl	8000d7c <__aeabi_fmul>
        qDot2 -= AHRS->_beta * s1;
 8005110:	4631      	mov	r1, r6
 8005112:	f7fb fe33 	bl	8000d7c <__aeabi_fmul>
 8005116:	4601      	mov	r1, r0
 8005118:	9805      	ldr	r0, [sp, #20]
 800511a:	f7fb fd25 	bl	8000b68 <__aeabi_fsub>
        s2 *= recipNorm;
 800511e:	4639      	mov	r1, r7
        qDot2 -= AHRS->_beta * s1;
 8005120:	9005      	str	r0, [sp, #20]
        s2 *= recipNorm;
 8005122:	4640      	mov	r0, r8
 8005124:	f7fb fe2a 	bl	8000d7c <__aeabi_fmul>
        qDot3 -= AHRS->_beta * s2;
 8005128:	4631      	mov	r1, r6
 800512a:	f7fb fe27 	bl	8000d7c <__aeabi_fmul>
 800512e:	4601      	mov	r1, r0
 8005130:	9806      	ldr	r0, [sp, #24]
 8005132:	f7fb fd19 	bl	8000b68 <__aeabi_fsub>
        s3 *= recipNorm;
 8005136:	4639      	mov	r1, r7
        qDot3 -= AHRS->_beta * s2;
 8005138:	9006      	str	r0, [sp, #24]
        s3 *= recipNorm;
 800513a:	4650      	mov	r0, sl
 800513c:	f7fb fe1e 	bl	8000d7c <__aeabi_fmul>
        qDot4 -= AHRS->_beta * s3;
 8005140:	4631      	mov	r1, r6
 8005142:	f7fb fe1b 	bl	8000d7c <__aeabi_fmul>
 8005146:	4601      	mov	r1, r0
 8005148:	9807      	ldr	r0, [sp, #28]
 800514a:	f7fb fd0d 	bl	8000b68 <__aeabi_fsub>
 800514e:	9007      	str	r0, [sp, #28]
    }

    /* Integrate rate of change of quaternion to yield quaternion */
    AHRS->_q0 += qDot1 * AHRS->_sampleRate;
 8005150:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8005154:	9804      	ldr	r0, [sp, #16]
 8005156:	4631      	mov	r1, r6
 8005158:	f7fb fe10 	bl	8000d7c <__aeabi_fmul>
 800515c:	9901      	ldr	r1, [sp, #4]
 800515e:	f7fb fd05 	bl	8000b6c <__addsf3>
    AHRS->_q1 += qDot2 * AHRS->_sampleRate;
 8005162:	4631      	mov	r1, r6
    AHRS->_q0 += qDot1 * AHRS->_sampleRate;
 8005164:	4607      	mov	r7, r0
    AHRS->_q1 += qDot2 * AHRS->_sampleRate;
 8005166:	9805      	ldr	r0, [sp, #20]
 8005168:	f7fb fe08 	bl	8000d7c <__aeabi_fmul>
 800516c:	4629      	mov	r1, r5
 800516e:	f7fb fcfd 	bl	8000b6c <__addsf3>
    AHRS->_q2 += qDot3 * AHRS->_sampleRate;
 8005172:	4631      	mov	r1, r6
    AHRS->_q1 += qDot2 * AHRS->_sampleRate;
 8005174:	4680      	mov	r8, r0
    AHRS->_q2 += qDot3 * AHRS->_sampleRate;
 8005176:	9806      	ldr	r0, [sp, #24]
 8005178:	f7fb fe00 	bl	8000d7c <__aeabi_fmul>
 800517c:	4621      	mov	r1, r4
 800517e:	f7fb fcf5 	bl	8000b6c <__addsf3>
    AHRS->_q3 += qDot4 * AHRS->_sampleRate;
 8005182:	4631      	mov	r1, r6
    AHRS->_q2 += qDot3 * AHRS->_sampleRate;
 8005184:	4681      	mov	r9, r0
    AHRS->_q3 += qDot4 * AHRS->_sampleRate;
 8005186:	9807      	ldr	r0, [sp, #28]
 8005188:	f7fb fdf8 	bl	8000d7c <__aeabi_fmul>
 800518c:	9900      	ldr	r1, [sp, #0]
 800518e:	f7fb fced 	bl	8000b6c <__addsf3>

    /* Normalise quaternion */
    recipNorm = invSqrt(AHRS->_q0 * AHRS->_q0 + AHRS->_q1 * AHRS->_q1 + AHRS->_q2 * AHRS->_q2 + AHRS->_q3 * AHRS->_q3);
 8005192:	4639      	mov	r1, r7
    AHRS->_q3 += qDot4 * AHRS->_sampleRate;
 8005194:	4605      	mov	r5, r0
    recipNorm = invSqrt(AHRS->_q0 * AHRS->_q0 + AHRS->_q1 * AHRS->_q1 + AHRS->_q2 * AHRS->_q2 + AHRS->_q3 * AHRS->_q3);
 8005196:	4638      	mov	r0, r7
 8005198:	f7fb fdf0 	bl	8000d7c <__aeabi_fmul>
 800519c:	4641      	mov	r1, r8
 800519e:	4604      	mov	r4, r0
 80051a0:	4640      	mov	r0, r8
 80051a2:	f7fb fdeb 	bl	8000d7c <__aeabi_fmul>
 80051a6:	4601      	mov	r1, r0
 80051a8:	4620      	mov	r0, r4
 80051aa:	f7fb fcdf 	bl	8000b6c <__addsf3>
 80051ae:	4649      	mov	r1, r9
 80051b0:	4604      	mov	r4, r0
 80051b2:	4648      	mov	r0, r9
 80051b4:	f7fb fde2 	bl	8000d7c <__aeabi_fmul>
 80051b8:	4601      	mov	r1, r0
 80051ba:	4620      	mov	r0, r4
 80051bc:	f7fb fcd6 	bl	8000b6c <__addsf3>
 80051c0:	4629      	mov	r1, r5
 80051c2:	4604      	mov	r4, r0
 80051c4:	4628      	mov	r0, r5
 80051c6:	f7fb fdd9 	bl	8000d7c <__aeabi_fmul>
 80051ca:	4601      	mov	r1, r0
 80051cc:	4620      	mov	r0, r4
 80051ce:	f7fb fccd 	bl	8000b6c <__addsf3>
 80051d2:	f7ff fbe7 	bl	80049a4 <invSqrt>
 80051d6:	4604      	mov	r4, r0
    AHRS->_q0 *= recipNorm;
 80051d8:	4601      	mov	r1, r0
 80051da:	4638      	mov	r0, r7
 80051dc:	f7fb fdce 	bl	8000d7c <__aeabi_fmul>
    AHRS->_q1 *= recipNorm;
 80051e0:	4621      	mov	r1, r4
    AHRS->_q0 *= recipNorm;
 80051e2:	f8cb 0014 	str.w	r0, [fp, #20]
    AHRS->_q1 *= recipNorm;
 80051e6:	4640      	mov	r0, r8
 80051e8:	f7fb fdc8 	bl	8000d7c <__aeabi_fmul>
    AHRS->_q2 *= recipNorm;
 80051ec:	4621      	mov	r1, r4
    AHRS->_q1 *= recipNorm;
 80051ee:	f8cb 0018 	str.w	r0, [fp, #24]
    AHRS->_q2 *= recipNorm;
 80051f2:	4648      	mov	r0, r9
 80051f4:	f7fb fdc2 	bl	8000d7c <__aeabi_fmul>
    AHRS->_q3 *= recipNorm;
 80051f8:	4621      	mov	r1, r4
    AHRS->_q2 *= recipNorm;
 80051fa:	f8cb 001c 	str.w	r0, [fp, #28]
    AHRS->_q3 *= recipNorm;
 80051fe:	4628      	mov	r0, r5
 8005200:	f7fb fdbc 	bl	8000d7c <__aeabi_fmul>
 8005204:	f8cb 0020 	str.w	r0, [fp, #32]

    /* Calculate new angles */
    calculateAngles(AHRS);
 8005208:	4658      	mov	r0, fp
}
 800520a:	b013      	add	sp, #76	; 0x4c
 800520c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    calculateAngles(AHRS);
 8005210:	f7ff bbf6 	b.w	8004a00 <calculateAngles>

08005214 <computeIMU>:
  imu.AHRS[ROLL]  *= 180.0f / AHRSIMU_PI;

}

void computeIMU(void)
{
 8005214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
//  uint8_t DATA[0];
//  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_STATUS, 1, DATA, 1);
//  if(DATA[0] & 0x01){
	Gyro_getADC();
 8005216:	f001 f8b1 	bl	800637c <Gyro_getADC>
  ACC_getADC();
 800521a:	f001 f93f 	bl	800649c <ACC_getADC>
  Mag_getADC();                                               //Read the raw acc and gyro data from the MPU-6050
 800521e:	f001 fa5b 	bl	80066d8 <Mag_getADC>
  CAL_Heading();
 8005222:	f001 faf1 	bl	8006808 <CAL_Heading>
	Temp_getADC();
 8005226:	f001 fb63 	bl	80068f0 <Temp_getADC>
		#endif
	
#ifdef IMU_AHRS
    /* Call update function */
    /* This function must be called periodically in inteervals set by sample rate on initialization process */
	TM_AHRSIMU_UpdateIMU(&AHRS, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accSmooth[ROLL], imu.accSmooth[PITCH], imu.accSmooth[YAW]);
 800522a:	4908      	ldr	r1, [pc, #32]	; (800524c <computeIMU+0x38>)
 800522c:	4808      	ldr	r0, [pc, #32]	; (8005250 <computeIMU+0x3c>)
 800522e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005230:	9302      	str	r3, [sp, #8]
 8005232:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800523c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800523e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005240:	f7ff fd46 	bl	8004cd0 <TM_AHRSIMU_UpdateIMU>
	//TM_AHRSIMU_UpdateAHRS(&AHRS, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.magSmooth[ROLL], imu.magSmooth[PITCH], imu.magSmooth[YAW]);
#endif
}
 8005244:	b005      	add	sp, #20
 8005246:	f85d fb04 	ldr.w	pc, [sp], #4
 800524a:	bf00      	nop
 800524c:	200011b8 	.word	0x200011b8
 8005250:	20000ce8 	.word	0x20000ce8

08005254 <error_signal>:
uint32_t flight_mode_timer, headfree_mode_timer;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the error LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void error_signal(void) {
 8005254:	b538      	push	{r3, r4, r5, lr}
  if (Error.error >= 100) {RGB_R_ON;}                                                         //When the error is 100 the LED is always on.
 8005256:	4c1b      	ldr	r4, [pc, #108]	; (80052c4 <error_signal+0x70>)
 8005258:	7823      	ldrb	r3, [r4, #0]
 800525a:	2b63      	cmp	r3, #99	; 0x63
 800525c:	d907      	bls.n	800526e <error_signal+0x1a>
      RGB_R_OFF;                                                                        //Turn the LED off.
      Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
    }
  }
}
 800525e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (Error.error >= 100) {RGB_R_ON;}                                                         //When the error is 100 the LED is always on.
 8005262:	2200      	movs	r2, #0
 8005264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005268:	4817      	ldr	r0, [pc, #92]	; (80052c8 <error_signal+0x74>)
 800526a:	f7fc be93 	b.w	8001f94 <HAL_GPIO_WritePin>
  else if (Error.error_timer < millis()) {                                                       //If the error_timer value is smaller that the millis() function.
 800526e:	6865      	ldr	r5, [r4, #4]
 8005270:	f003 fd14 	bl	8008c9c <millis>
 8005274:	4285      	cmp	r5, r0
 8005276:	d218      	bcs.n	80052aa <error_signal+0x56>
    Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 8005278:	f003 fd10 	bl	8008c9c <millis>
    if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 800527c:	7823      	ldrb	r3, [r4, #0]
    Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 800527e:	30fa      	adds	r0, #250	; 0xfa
 8005280:	6060      	str	r0, [r4, #4]
    if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 8005282:	b12b      	cbz	r3, 8005290 <error_signal+0x3c>
 8005284:	7861      	ldrb	r1, [r4, #1]
 8005286:	1cda      	adds	r2, r3, #3
 8005288:	4291      	cmp	r1, r2
 800528a:	bfc4      	itt	gt
 800528c:	2200      	movgt	r2, #0
 800528e:	7062      	strbgt	r2, [r4, #1]
    if (Error.error_counter < Error.error && Error.error_led == 0 && Error.error > 0) {                            //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8005290:	7862      	ldrb	r2, [r4, #1]
 8005292:	429a      	cmp	r2, r3
 8005294:	d20a      	bcs.n	80052ac <error_signal+0x58>
 8005296:	78a2      	ldrb	r2, [r4, #2]
 8005298:	b942      	cbnz	r2, 80052ac <error_signal+0x58>
 800529a:	b13b      	cbz	r3, 80052ac <error_signal+0x58>
      RGB_R_ON;                                                                       //Turn the LED on.
 800529c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052a0:	4809      	ldr	r0, [pc, #36]	; (80052c8 <error_signal+0x74>)
 80052a2:	f7fc fe77 	bl	8001f94 <HAL_GPIO_WritePin>
      Error.error_led = 1;                                                                       //Set the LED flag to indicate that the LED is on.
 80052a6:	2301      	movs	r3, #1
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 80052a8:	70a3      	strb	r3, [r4, #2]
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
      RGB_R_OFF;                                                                        //Turn the LED off.
 80052ac:	2201      	movs	r2, #1
 80052ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052b2:	4805      	ldr	r0, [pc, #20]	; (80052c8 <error_signal+0x74>)
 80052b4:	f7fc fe6e 	bl	8001f94 <HAL_GPIO_WritePin>
      Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
 80052b8:	7863      	ldrb	r3, [r4, #1]
 80052ba:	3301      	adds	r3, #1
 80052bc:	7063      	strb	r3, [r4, #1]
      Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 80052be:	2300      	movs	r3, #0
 80052c0:	e7f2      	b.n	80052a8 <error_signal+0x54>
 80052c2:	bf00      	nop
 80052c4:	20001564 	.word	0x20001564
 80052c8:	40010c00 	.word	0x40010c00

080052cc <flight_mode_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the flight mode LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void flight_mode_signal(void) {
 80052cc:	b538      	push	{r3, r4, r5, lr}
  if (flight_mode_timer < millis()) {                                                      //If the error_timer value is smaller that the millis() function.
 80052ce:	f003 fce5 	bl	8008c9c <millis>
 80052d2:	4c2e      	ldr	r4, [pc, #184]	; (800538c <flight_mode_signal+0xc0>)
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	4298      	cmp	r0, r3
 80052d8:	d91d      	bls.n	8005316 <flight_mode_signal+0x4a>
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 80052da:	f003 fcdf 	bl	8008c9c <millis>
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 80052de:	4b2c      	ldr	r3, [pc, #176]	; (8005390 <flight_mode_signal+0xc4>)
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 80052e0:	30fa      	adds	r0, #250	; 0xfa
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 80052e2:	785b      	ldrb	r3, [r3, #1]
    flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 80052e4:	6020      	str	r0, [r4, #0]
 80052e6:	4c2b      	ldr	r4, [pc, #172]	; (8005394 <flight_mode_signal+0xc8>)
    if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 80052e8:	b13b      	cbz	r3, 80052fa <flight_mode_signal+0x2e>
 80052ea:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <flight_mode_signal+0xcc>)
 80052ec:	7821      	ldrb	r1, [r4, #0]
 80052ee:	7812      	ldrb	r2, [r2, #0]
 80052f0:	3203      	adds	r2, #3
 80052f2:	4291      	cmp	r1, r2
 80052f4:	bfc4      	itt	gt
 80052f6:	2200      	movgt	r2, #0
 80052f8:	7022      	strbgt	r2, [r4, #0]
    if (flight_mode_counter < f.ARMED && flight_mode_led == 0 && f.ARMED > 0) {    //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 80052fa:	7822      	ldrb	r2, [r4, #0]
 80052fc:	4d27      	ldr	r5, [pc, #156]	; (800539c <flight_mode_signal+0xd0>)
 80052fe:	429a      	cmp	r2, r3
 8005300:	d22e      	bcs.n	8005360 <flight_mode_signal+0x94>
 8005302:	782a      	ldrb	r2, [r5, #0]
 8005304:	bb62      	cbnz	r2, 8005360 <flight_mode_signal+0x94>
 8005306:	b35b      	cbz	r3, 8005360 <flight_mode_signal+0x94>
      RGB_G_ON;                                                                     //Turn the LED on.
 8005308:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800530c:	4824      	ldr	r0, [pc, #144]	; (80053a0 <flight_mode_signal+0xd4>)
 800530e:	f7fc fe41 	bl	8001f94 <HAL_GPIO_WritePin>
      flight_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8005312:	2301      	movs	r3, #1
    }
    else {                                                                                 //If the error flash sequence isn't finisched (error_counter < error) and the LED is on.
      RGB_G_OFF;                                                                      //Turn the LED off.
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8005314:	702b      	strb	r3, [r5, #0]
    }
  }

  if (headfree_mode_timer < millis()) {                                                      //If the error_timer value is smaller that the millis() function.
 8005316:	f003 fcc1 	bl	8008c9c <millis>
 800531a:	4c22      	ldr	r4, [pc, #136]	; (80053a4 <flight_mode_signal+0xd8>)
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	4298      	cmp	r0, r3
 8005320:	d91d      	bls.n	800535e <flight_mode_signal+0x92>
    headfree_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8005322:	f003 fcbb 	bl	8008c9c <millis>
    if (f.HEADFREE_MODE > 0 && headfree_mode_counter > flight_mode + 3) headfree_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <flight_mode_signal+0xc4>)
    headfree_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8005328:	30fa      	adds	r0, #250	; 0xfa
    if (f.HEADFREE_MODE > 0 && headfree_mode_counter > flight_mode + 3) headfree_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 800532a:	7b5b      	ldrb	r3, [r3, #13]
    headfree_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 800532c:	6020      	str	r0, [r4, #0]
 800532e:	4c1e      	ldr	r4, [pc, #120]	; (80053a8 <flight_mode_signal+0xdc>)
    if (f.HEADFREE_MODE > 0 && headfree_mode_counter > flight_mode + 3) headfree_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8005330:	b13b      	cbz	r3, 8005342 <flight_mode_signal+0x76>
 8005332:	4a19      	ldr	r2, [pc, #100]	; (8005398 <flight_mode_signal+0xcc>)
 8005334:	7821      	ldrb	r1, [r4, #0]
 8005336:	7812      	ldrb	r2, [r2, #0]
 8005338:	3203      	adds	r2, #3
 800533a:	4291      	cmp	r1, r2
 800533c:	bfc4      	itt	gt
 800533e:	2200      	movgt	r2, #0
 8005340:	7022      	strbgt	r2, [r4, #0]
    if (headfree_mode_counter < f.HEADFREE_MODE && headfree_mode_led == 0 && f.HEADFREE_MODE > 0) {    //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8005342:	7822      	ldrb	r2, [r4, #0]
 8005344:	4d19      	ldr	r5, [pc, #100]	; (80053ac <flight_mode_signal+0xe0>)
 8005346:	429a      	cmp	r2, r3
 8005348:	d215      	bcs.n	8005376 <flight_mode_signal+0xaa>
 800534a:	782a      	ldrb	r2, [r5, #0]
 800534c:	b99a      	cbnz	r2, 8005376 <flight_mode_signal+0xaa>
 800534e:	b193      	cbz	r3, 8005376 <flight_mode_signal+0xaa>
      RGB_B_ON;                                                                     //Turn the LED on.
 8005350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005354:	4812      	ldr	r0, [pc, #72]	; (80053a0 <flight_mode_signal+0xd4>)
 8005356:	f7fc fe1d 	bl	8001f94 <HAL_GPIO_WritePin>
      headfree_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 800535a:	2301      	movs	r3, #1
    }
    else {                                                                                 //If the error flash sequence isn't finisched (error_counter < error) and the LED is on.
      RGB_B_OFF;                                                                      //Turn the LED off.
      headfree_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
      headfree_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 800535c:	702b      	strb	r3, [r5, #0]
 800535e:	bd38      	pop	{r3, r4, r5, pc}
      RGB_G_OFF;                                                                      //Turn the LED off.
 8005360:	2201      	movs	r2, #1
 8005362:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005366:	480e      	ldr	r0, [pc, #56]	; (80053a0 <flight_mode_signal+0xd4>)
 8005368:	f7fc fe14 	bl	8001f94 <HAL_GPIO_WritePin>
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 800536c:	7823      	ldrb	r3, [r4, #0]
 800536e:	3301      	adds	r3, #1
 8005370:	7023      	strb	r3, [r4, #0]
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8005372:	2300      	movs	r3, #0
 8005374:	e7ce      	b.n	8005314 <flight_mode_signal+0x48>
      RGB_B_OFF;                                                                      //Turn the LED off.
 8005376:	2201      	movs	r2, #1
 8005378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800537c:	4808      	ldr	r0, [pc, #32]	; (80053a0 <flight_mode_signal+0xd4>)
 800537e:	f7fc fe09 	bl	8001f94 <HAL_GPIO_WritePin>
      headfree_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8005382:	7823      	ldrb	r3, [r4, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	7023      	strb	r3, [r4, #0]
      headfree_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8005388:	2300      	movs	r3, #0
 800538a:	e7e7      	b.n	800535c <flight_mode_signal+0x90>
 800538c:	20000d14 	.word	0x20000d14
 8005390:	2000105c 	.word	0x2000105c
 8005394:	20000d11 	.word	0x20000d11
 8005398:	20000d1c 	.word	0x20000d1c
 800539c:	20000d10 	.word	0x20000d10
 80053a0:	40010c00 	.word	0x40010c00
 80053a4:	20000d18 	.word	0x20000d18
 80053a8:	20000d1e 	.word	0x20000d1e
 80053ac:	20000d1d 	.word	0x20000d1d

080053b0 <mixerInit>:
    { 4, 0, mixerQuadP },          // MULTITYPE_QUADP
    { 4, 0, mixerQuadX },          // MULTITYPE_QUADX
};

void mixerInit(void)
{
 80053b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b2:	2400      	movs	r4, #0
	int i;
    for (i = 0; i < 4; i++)
	  {
			#ifdef QUAD_X
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 80053b4:	4f05      	ldr	r7, [pc, #20]	; (80053cc <mixerInit+0x1c>)
 80053b6:	4e06      	ldr	r6, [pc, #24]	; (80053d0 <mixerInit+0x20>)
 80053b8:	193d      	adds	r5, r7, r4
 80053ba:	1933      	adds	r3, r6, r4
 80053bc:	3410      	adds	r4, #16
    for (i = 0; i < 4; i++)
 80053be:	2c40      	cmp	r4, #64	; 0x40
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 80053c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for (i = 0; i < 4; i++)
 80053c6:	d1f7      	bne.n	80053b8 <mixerInit+0x8>
			#endif
			#ifdef QUAD_P
      currentMixer[i] = mixers[QuadP].motor[i];   //0 = QuadP, 1 = QuadX
			#endif
		}
}
 80053c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ca:	bf00      	nop
 80053cc:	200006dc 	.word	0x200006dc
 80053d0:	08010d84 	.word	0x08010d84

080053d4 <mixTable>:
test_t test;

void mixTable(void)
{
	uint8_t i = 0;
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 80053d4:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <mixTable+0xdc>)
{
 80053d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 80053da:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
{
 80053de:	b085      	sub	sp, #20
			if (RC.rcCommand[THROTTLE] > 1800) RC.rcCommand[THROTTLE] = 1800;                                   //We need some room to keep full control at full throttle.
 80053e0:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
 80053e4:	bfc4      	itt	gt
 80053e6:	f44f 62e1 	movgt.w	r2, #1800	; 0x708
 80053ea:	f8a3 2056 	strhgt.w	r2, [r3, #86]	; 0x56
			for (i = 0; i < 4; i++){
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 80053ee:	f9b3 9056 	ldrsh.w	r9, [r3, #86]	; 0x56
#ifdef MOTOR_DC
	  if(motor[i] <    0) motor[i] = 0;
	  if(motor[i] > 2000) motor[i] = 2000;
#endif
#ifdef MOTOR_ESC
  if(motor[i] < 1000) motor[i] = 1000;
 80053f2:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 80053f6:	4648      	mov	r0, r9
 80053f8:	f7fb fc6c 	bl	8000cd4 <__aeabi_i2f>
#ifdef MOTOR_DC
  if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0){
    motor[i] = 0;
#endif
#ifdef MOTOR_ESC
  if(RC.rcCommand[THROTTLE] < 1100 || f.ARMED == 0){
 80053fc:	4b2d      	ldr	r3, [pc, #180]	; (80054b4 <mixTable+0xe0>)
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 80053fe:	4683      	mov	fp, r0
  if(RC.rcCommand[THROTTLE] < 1100 || f.ARMED == 0){
 8005400:	785b      	ldrb	r3, [r3, #1]
    motor[i] = 1000;
#endif
		pid.output1[i] = 0;
 8005402:	2700      	movs	r7, #0
  if(RC.rcCommand[THROTTLE] < 1100 || f.ARMED == 0){
 8005404:	9301      	str	r3, [sp, #4]
  if(motor[i] > 2000) motor[i] = 2000;
 8005406:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800540a:	4d2b      	ldr	r5, [pc, #172]	; (80054b8 <mixTable+0xe4>)
 800540c:	4c2b      	ldr	r4, [pc, #172]	; (80054bc <mixTable+0xe8>)
 800540e:	4e2c      	ldr	r6, [pc, #176]	; (80054c0 <mixTable+0xec>)
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 8005410:	f1a5 08a0 	sub.w	r8, r5, #160	; 0xa0
 8005414:	6861      	ldr	r1, [r4, #4]
 8005416:	f8d8 010c 	ldr.w	r0, [r8, #268]	; 0x10c
 800541a:	9303      	str	r3, [sp, #12]
 800541c:	f7fb fcae 	bl	8000d7c <__aeabi_fmul>
 8005420:	6821      	ldr	r1, [r4, #0]
 8005422:	9002      	str	r0, [sp, #8]
 8005424:	4658      	mov	r0, fp
 8005426:	f7fb fca9 	bl	8000d7c <__aeabi_fmul>
 800542a:	9a02      	ldr	r2, [sp, #8]
 800542c:	4601      	mov	r1, r0
 800542e:	4610      	mov	r0, r2
 8005430:	f7fb fb9c 	bl	8000b6c <__addsf3>
 8005434:	68a1      	ldr	r1, [r4, #8]
 8005436:	9002      	str	r0, [sp, #8]
 8005438:	f8d8 0110 	ldr.w	r0, [r8, #272]	; 0x110
 800543c:	f7fb fc9e 	bl	8000d7c <__aeabi_fmul>
 8005440:	9a02      	ldr	r2, [sp, #8]
 8005442:	4601      	mov	r1, r0
 8005444:	4610      	mov	r0, r2
 8005446:	f7fb fb91 	bl	8000b6c <__addsf3>
 800544a:	68e1      	ldr	r1, [r4, #12]
 800544c:	9002      	str	r0, [sp, #8]
 800544e:	f8d8 0114 	ldr.w	r0, [r8, #276]	; 0x114
 8005452:	f7fb fc93 	bl	8000d7c <__aeabi_fmul>
 8005456:	9a02      	ldr	r2, [sp, #8]
 8005458:	4601      	mov	r1, r0
 800545a:	4610      	mov	r0, r2
 800545c:	f7fb fb86 	bl	8000b6c <__addsf3>
 8005460:	f7fb fe68 	bl	8001134 <__aeabi_f2iz>
 8005464:	b200      	sxth	r0, r0
  if(motor[i] < 1000) motor[i] = 1000;
 8005466:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
				motor[i] = (RC.rcCommand[THROTTLE] * currentMixer[i].THROTTLE) + (pid.output2[ROLL] * currentMixer[i].ROLL) + (pid.output2[PITCH] * currentMixer[i].PITCH) + ((1 * pid.output2[YAW]) * currentMixer[i].YAW);
 800546a:	bfac      	ite	ge
 800546c:	8030      	strhge	r0, [r6, #0]
  if(motor[i] < 1000) motor[i] = 1000;
 800546e:	f8a6 a000 	strhlt.w	sl, [r6]
  if(motor[i] > 2000) motor[i] = 2000;
 8005472:	f9b6 2000 	ldrsh.w	r2, [r6]
  if(motor[i] < 1000) motor[i] = 1000;
 8005476:	9b03      	ldr	r3, [sp, #12]
  if(motor[i] > 2000) motor[i] = 2000;
 8005478:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
  if(RC.rcCommand[THROTTLE] < 1100 || f.ARMED == 0){
 800547c:	f240 424b 	movw	r2, #1099	; 0x44b
  if(motor[i] > 2000) motor[i] = 2000;
 8005480:	bfc8      	it	gt
 8005482:	8033      	strhgt	r3, [r6, #0]
  if(RC.rcCommand[THROTTLE] < 1100 || f.ARMED == 0){
 8005484:	4591      	cmp	r9, r2
 8005486:	dd01      	ble.n	800548c <mixTable+0xb8>
 8005488:	9a01      	ldr	r2, [sp, #4]
 800548a:	b932      	cbnz	r2, 800549a <mixTable+0xc6>
    motor[i] = 1000;
 800548c:	f8a6 a000 	strh.w	sl, [r6]
		pid.output1[i] = 0;
 8005490:	662f      	str	r7, [r5, #96]	; 0x60
		pid.output2[i] = 0;
 8005492:	66ef      	str	r7, [r5, #108]	; 0x6c
		pid.Iterm[i] = 0;
 8005494:	602f      	str	r7, [r5, #0]
		pid.Iterm1[i] = 0;
 8005496:	60ef      	str	r7, [r5, #12]
		pid.Iterm2[i] = 0;
 8005498:	61af      	str	r7, [r5, #24]
			for (i = 0; i < 4; i++){
 800549a:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <mixTable+0xf0>)
 800549c:	3410      	adds	r4, #16
 800549e:	42a2      	cmp	r2, r4
 80054a0:	f106 0602 	add.w	r6, r6, #2
 80054a4:	f105 0504 	add.w	r5, r5, #4
 80054a8:	d1b4      	bne.n	8005414 <mixTable+0x40>
	}
  }
}
 80054aa:	b005      	add	sp, #20
 80054ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b0:	200010d8 	.word	0x200010d8
 80054b4:	2000105c 	.word	0x2000105c
 80054b8:	20000dcc 	.word	0x20000dcc
 80054bc:	200006dc 	.word	0x200006dc
 80054c0:	20000d22 	.word	0x20000d22
 80054c4:	2000071c 	.word	0x2000071c

080054c8 <PIDControlInit>:
//PID gain and limit settings
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void PIDControlInit(pidc_t *pid)
{
	pid->ts = 0.004f;
 80054c8:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <PIDControlInit+0xf8>)
	pid->kd[ROLL]  = 4.0f;
	pid->kd[PITCH] = pid->kd[ROLL];
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6

	///////////////////////////////////////
  pid->kp_rate[ROLL]  = 2.0f;
 80054ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	pid->ts = 0.004f;
 80054ce:	6003      	str	r3, [r0, #0]
	pid->kp[ROLL]  = 15.0f;
 80054d0:	4b3c      	ldr	r3, [pc, #240]	; (80055c4 <PIDControlInit+0xfc>)
{
 80054d2:	b570      	push	{r4, r5, r6, lr}
	pid->kp[ROLL]  = 15.0f;
 80054d4:	6043      	str	r3, [r0, #4]
	pid->kp[PITCH] = pid->kp[ROLL];
 80054d6:	6083      	str	r3, [r0, #8]
	pid->kd[ROLL]  = 4.0f;
 80054d8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000

  pid->kd_rate[ROLL]  = 0.0f;
  pid->kd_rate[PITCH] = pid->kd_rate[ROLL];
  pid->kd_rate[YAW]   = 0.0f;
///////////////////////////////////	
	pid->kp1[ROLL] = 1.0f;
 80054dc:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
	pid->kd[ROLL]  = 4.0f;
 80054e0:	6643      	str	r3, [r0, #100]	; 0x64
	pid->kd[PITCH] = pid->kd[ROLL];
 80054e2:	6683      	str	r3, [r0, #104]	; 0x68
  pid->ki_rate[ROLL]  = 0.0f;
 80054e4:	2300      	movs	r3, #0
	pid->ki[ROLL]  = 5.0f;
 80054e6:	4938      	ldr	r1, [pc, #224]	; (80055c8 <PIDControlInit+0x100>)
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 80054e8:	4c38      	ldr	r4, [pc, #224]	; (80055cc <PIDControlInit+0x104>)
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 80054ea:	4e39      	ldr	r6, [pc, #228]	; (80055d0 <PIDControlInit+0x108>)
  pid->kp_rate[ROLL]  = 2.0f;
 80054ec:	6282      	str	r2, [r0, #40]	; 0x28
  pid->kp_rate[PITCH] = pid->kp_rate[ROLL];
 80054ee:	62c2      	str	r2, [r0, #44]	; 0x2c
  pid->kp_rate[YAW]   = 2.0f;
 80054f0:	6302      	str	r2, [r0, #48]	; 0x30
	pid->kp1[PITCH] = 1.0f;
	pid->kp1[YAW] = 1.0f;

	pid->ki1[ROLL] = 2.0f;
 80054f2:	6402      	str	r2, [r0, #64]	; 0x40
	pid->ki1[PITCH] = 2.0f;
 80054f4:	6442      	str	r2, [r0, #68]	; 0x44
	pid->ki1[YAW] = 2.0f;
 80054f6:	6482      	str	r2, [r0, #72]	; 0x48
/////////////////////////////////
	pid->kp2[ROLL] = 5.0f;
	pid->kp2[PITCH] = 5.0f;
	pid->kp2[YAW] = 5.0f;

  pid->ki2[ROLL] = 2.0f;
 80054f8:	64c2      	str	r2, [r0, #76]	; 0x4c
	pid->ki2[PITCH] = 2.0f;
 80054fa:	6502      	str	r2, [r0, #80]	; 0x50
	pid->ki2[YAW] = 2.0f;
 80054fc:	6542      	str	r2, [r0, #84]	; 0x54

  pid->i1_limit[ROLL] = 5.0f;
	pid->i1_limit[PITCH] = 5.0f;
	pid->i1_limit[YAW] = 10.0f;

  pid->i2_limit[ROLL] = 500.0f;
 80054fe:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <PIDControlInit+0x10c>)
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 8005500:	60c6      	str	r6, [r0, #12]
	pid->ki[ROLL]  = 5.0f;
 8005502:	6341      	str	r1, [r0, #52]	; 0x34
	pid->ki[PITCH] = pid->ki[ROLL];
 8005504:	6381      	str	r1, [r0, #56]	; 0x38
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5
 8005506:	63c1      	str	r1, [r0, #60]	; 0x3c
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 8005508:	66c4      	str	r4, [r0, #108]	; 0x6c
  pid->ki_rate[ROLL]  = 0.0f;
 800550a:	6583      	str	r3, [r0, #88]	; 0x58
  pid->ki_rate[PITCH] = pid->ki_rate[ROLL];
 800550c:	65c3      	str	r3, [r0, #92]	; 0x5c
  pid->ki_rate[YAW]   = 0.0f;
 800550e:	6603      	str	r3, [r0, #96]	; 0x60
  pid->kd_rate[ROLL]  = 0.0f;
 8005510:	67c3      	str	r3, [r0, #124]	; 0x7c
  pid->kd_rate[PITCH] = pid->kd_rate[ROLL];
 8005512:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  pid->kd_rate[YAW]   = 0.0f;
 8005516:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	pid->kp1[ROLL] = 1.0f;
 800551a:	6105      	str	r5, [r0, #16]
	pid->kp1[PITCH] = 1.0f;
 800551c:	6145      	str	r5, [r0, #20]
	pid->kp1[YAW] = 1.0f;
 800551e:	6185      	str	r5, [r0, #24]
	pid->kp2[ROLL] = 5.0f;
 8005520:	61c1      	str	r1, [r0, #28]
	pid->kp2[PITCH] = 5.0f;
 8005522:	6201      	str	r1, [r0, #32]
	pid->kp2[YAW] = 5.0f;
 8005524:	6241      	str	r1, [r0, #36]	; 0x24
	pid->kd2[ROLL] = 3.0f;
 8005526:	6704      	str	r4, [r0, #112]	; 0x70
	pid->kd2[PITCH] = 3.0f;
 8005528:	6744      	str	r4, [r0, #116]	; 0x74
	pid->kd2[YAW] = 3.0f;
 800552a:	6784      	str	r4, [r0, #120]	; 0x78
  pid->i1_limit[ROLL] = 5.0f;
 800552c:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
	pid->i1_limit[PITCH] = 5.0f;
 8005530:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
	pid->i1_limit[YAW] = 10.0f;
 8005534:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
  pid->i2_limit[ROLL] = 500.0f;
 8005538:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	pid->i2_limit[PITCH] = 500.0f;
 800553c:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
	pid->i2_limit[YAW] = 500.0f;
 8005540:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c

	pid->Iterm[ROLL] = 0.0f ;
 8005544:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	pid->Iterm[PITCH] = 0.0f;
 8005548:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	pid->Iterm[YAW] = 0.0f;
 800554c:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8

	pid->Iterm1[ROLL] = 0.0f ;
 8005550:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
	pid->Iterm1[PITCH] = 0.0f;
 8005554:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	pid->Iterm1[YAW] = 0.0f;
 8005558:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	pid->Iterm2[ROLL] = 0.0f ;
 800555c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	pid->Iterm2[PITCH] = 0.0f;
 8005560:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	pid->Iterm2[YAW] = 0.0f;
 8005564:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0

	pid->dInput[ROLL] = 0.0f ;
 8005568:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	pid->dInput[PITCH] = 0.0f;
 800556c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	pid->dInput[YAW] = 0.0f;
 8005570:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc

	pid->error[ROLL] = 0.0f ;
 8005574:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	pid->error[PITCH] = 0.0f;
 8005578:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	pid->error[YAW] = 0.0f;
 800557c:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	pid->pre_error[ROLL] = 0.0f ;
 8005580:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	pid->pre_error[PITCH] = 0.0f;
 8005584:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
	pid->pre_error[YAW] = 0.0f;
 8005588:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

	pid->pre_deriv[ROLL] = 0.0f ;
 800558c:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
	pid->pre_deriv[PITCH] = 0.0f;
 8005590:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
	pid->pre_deriv[YAW] = 0.0f;
 8005594:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0

	pid->lastInput[ROLL] = 0.0f ;
 8005598:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
	pid->lastInput[PITCH] = 0.0f;
 800559c:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
	pid->lastInput[YAW] = 0.0f;
 80055a0:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc

	pid->output1[ROLL] = 0.0f ;
 80055a4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
	pid->output1[PITCH] = 0.0f;
 80055a8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	pid->output1[YAW] = 0.0f;
 80055ac:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108

	pid->output2[ROLL] = 0.0f ;
 80055b0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
	pid->output2[PITCH] = 0.0f;
 80055b4:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
	pid->output2[YAW] = 0.0f;
 80055b8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80055bc:	bd70      	pop	{r4, r5, r6, pc}
 80055be:	bf00      	nop
 80055c0:	3b83126f 	.word	0x3b83126f
 80055c4:	41700000 	.word	0x41700000
 80055c8:	40a00000 	.word	0x40a00000
 80055cc:	40400000 	.word	0x40400000
 80055d0:	41200000 	.word	0x41200000
 80055d4:	43fa0000 	.word	0x43fa0000

080055d8 <Control>:
}

int16_t  magHold,headFreeModeHold; // [-180;+180]

void Control(void)
{
 80055d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dt_recip = 1/pid.ts;
 80055dc:	4c9f      	ldr	r4, [pc, #636]	; (800585c <Control+0x284>)
{
 80055de:	b085      	sub	sp, #20
	dt_recip = 1/pid.ts;
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80055e6:	4619      	mov	r1, r3
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	f7fb fc7b 	bl	8000ee4 <__aeabi_fdiv>
	if(!f.ARMED){
 80055ee:	4e9c      	ldr	r6, [pc, #624]	; (8005860 <Control+0x288>)
	dt_recip = 1/pid.ts;
 80055f0:	4b9c      	ldr	r3, [pc, #624]	; (8005864 <Control+0x28c>)
 80055f2:	4680      	mov	r8, r0
 80055f4:	6018      	str	r0, [r3, #0]
	if(!f.ARMED){
 80055f6:	7873      	ldrb	r3, [r6, #1]
 80055f8:	b923      	cbnz	r3, 8005604 <Control+0x2c>
	  headFreeModeHold = imu.actual_compass_heading;
 80055fa:	4b9b      	ldr	r3, [pc, #620]	; (8005868 <Control+0x290>)
 80055fc:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8005600:	4b9a      	ldr	r3, [pc, #616]	; (800586c <Control+0x294>)
 8005602:	801a      	strh	r2, [r3, #0]
	}

#if defined(HEADFREE)
  if(f.HEADFREE_MODE) { //to optimize
 8005604:	7b73      	ldrb	r3, [r6, #13]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d041      	beq.n	800568e <Control+0xb6>
    float radDiff = (imu.actual_compass_heading - headFreeModeHold) * 0.0174533f; // where PI/180 ~= 0.0174533
 800560a:	4a97      	ldr	r2, [pc, #604]	; (8005868 <Control+0x290>)
 800560c:	4b97      	ldr	r3, [pc, #604]	; (800586c <Control+0x294>)
 800560e:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
 8005612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005616:	1ac0      	subs	r0, r0, r3
 8005618:	f7fb fb5c 	bl	8000cd4 <__aeabi_i2f>
 800561c:	4994      	ldr	r1, [pc, #592]	; (8005870 <Control+0x298>)
 800561e:	f7fb fbad 	bl	8000d7c <__aeabi_fmul>
 8005622:	4605      	mov	r5, r0
    float cosDiff = cosf(radDiff);
 8005624:	f008 fb5a 	bl	800dcdc <cosf>
 8005628:	4681      	mov	r9, r0
    float sinDiff = sinf(radDiff);
 800562a:	4628      	mov	r0, r5
 800562c:	f008 fbc2 	bl	800ddb4 <sinf>
    int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 8005630:	4d90      	ldr	r5, [pc, #576]	; (8005874 <Control+0x29c>)
    float sinDiff = sinf(radDiff);
 8005632:	4607      	mov	r7, r0
    int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 8005634:	f9b5 0052 	ldrsh.w	r0, [r5, #82]	; 0x52
 8005638:	f7fb fb4c 	bl	8000cd4 <__aeabi_i2f>
 800563c:	4682      	mov	sl, r0
 800563e:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
 8005642:	f7fb fb47 	bl	8000cd4 <__aeabi_i2f>
    RC.rcCommand[ROLL] =  RC.rcCommand[ROLL]*cosDiff - RC.rcCommand[PITCH]*sinDiff;
 8005646:	4601      	mov	r1, r0
    int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 8005648:	4683      	mov	fp, r0
    RC.rcCommand[ROLL] =  RC.rcCommand[ROLL]*cosDiff - RC.rcCommand[PITCH]*sinDiff;
 800564a:	4648      	mov	r0, r9
 800564c:	f7fb fb96 	bl	8000d7c <__aeabi_fmul>
 8005650:	4651      	mov	r1, sl
 8005652:	9002      	str	r0, [sp, #8]
 8005654:	4638      	mov	r0, r7
 8005656:	f7fb fb91 	bl	8000d7c <__aeabi_fmul>
 800565a:	9b02      	ldr	r3, [sp, #8]
 800565c:	4601      	mov	r1, r0
 800565e:	4618      	mov	r0, r3
 8005660:	f7fb fa82 	bl	8000b68 <__aeabi_fsub>
 8005664:	f7fb fd66 	bl	8001134 <__aeabi_f2iz>
    int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 8005668:	4651      	mov	r1, sl
    RC.rcCommand[ROLL] =  RC.rcCommand[ROLL]*cosDiff - RC.rcCommand[PITCH]*sinDiff;
 800566a:	f8a5 0050 	strh.w	r0, [r5, #80]	; 0x50
    int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 800566e:	4648      	mov	r0, r9
 8005670:	f7fb fb84 	bl	8000d7c <__aeabi_fmul>
 8005674:	4659      	mov	r1, fp
 8005676:	4681      	mov	r9, r0
 8005678:	4638      	mov	r0, r7
 800567a:	f7fb fb7f 	bl	8000d7c <__aeabi_fmul>
 800567e:	4601      	mov	r1, r0
 8005680:	4648      	mov	r0, r9
 8005682:	f7fb fa73 	bl	8000b6c <__addsf3>
 8005686:	f7fb fd55 	bl	8001134 <__aeabi_f2iz>
 800568a:	f8a5 0052 	strh.w	r0, [r5, #82]	; 0x52
    RC.rcCommand[PITCH] = rcCommand_PITCH;
  }
#endif

    if(f.ANGLE_MODE){
 800568e:	7975      	ldrb	r5, [r6, #5]
 8005690:	2d00      	cmp	r5, #0
 8005692:	f000 8128 	beq.w	80058e6 <Control+0x30e>
      pid.error[ROLL] = RC.rcCommand[ROLL] - imu.AHRS[ROLL];
 8005696:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8005868 <Control+0x290>
 800569a:	4f76      	ldr	r7, [pc, #472]	; (8005874 <Control+0x29c>)
 800569c:	f8d8 9088 	ldr.w	r9, [r8, #136]	; 0x88
 80056a0:	f9b7 0050 	ldrsh.w	r0, [r7, #80]	; 0x50
 80056a4:	f7fb fb16 	bl	8000cd4 <__aeabi_i2f>
 80056a8:	4649      	mov	r1, r9
 80056aa:	f7fb fa5d 	bl	8000b68 <__aeabi_fsub>
      pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 80056ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
      pid.error[ROLL] = RC.rcCommand[ROLL] - imu.AHRS[ROLL];
 80056b0:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
 80056b4:	4682      	mov	sl, r0
      pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 80056b6:	f7fb fb61 	bl	8000d7c <__aeabi_fmul>
 80056ba:	9901      	ldr	r1, [sp, #4]
 80056bc:	f7fb fb5e 	bl	8000d7c <__aeabi_fmul>
 80056c0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80056c4:	f7fb fa52 	bl	8000b6c <__addsf3>
      if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 80056c8:	4e6b      	ldr	r6, [pc, #428]	; (8005878 <Control+0x2a0>)
      pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 80056ca:	4605      	mov	r5, r0
      if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 80056cc:	4631      	mov	r1, r6
 80056ce:	f7fb fd11 	bl	80010f4 <__aeabi_fcmpgt>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	f000 808c 	beq.w	80057f0 <Control+0x218>
 80056d8:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
      else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
      pid.dInput[ROLL] = (imu.AHRS[ROLL] - pid.lastInput[ROLL])  / pid.ts;
 80056dc:	f8d4 10f4 	ldr.w	r1, [r4, #244]	; 0xf4
 80056e0:	4648      	mov	r0, r9
 80056e2:	f7fb fa41 	bl	8000b68 <__aeabi_fsub>
 80056e6:	9901      	ldr	r1, [sp, #4]
 80056e8:	f7fb fbfc 	bl	8000ee4 <__aeabi_fdiv>

      /*Compute PID Output*/
      pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 80056ec:	6861      	ldr	r1, [r4, #4]
      pid.dInput[ROLL] = (imu.AHRS[ROLL] - pid.lastInput[ROLL])  / pid.ts;
 80056ee:	4605      	mov	r5, r0
 80056f0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
      pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 80056f4:	4650      	mov	r0, sl
 80056f6:	f7fb fb41 	bl	8000d7c <__aeabi_fmul>
 80056fa:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80056fe:	f7fb fa35 	bl	8000b6c <__addsf3>
 8005702:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005704:	4682      	mov	sl, r0
 8005706:	4628      	mov	r0, r5
 8005708:	f7fb fb38 	bl	8000d7c <__aeabi_fmul>
 800570c:	4601      	mov	r1, r0
 800570e:	4650      	mov	r0, sl
 8005710:	f7fb fa2a 	bl	8000b68 <__aeabi_fsub>

      if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 8005714:	4d59      	ldr	r5, [pc, #356]	; (800587c <Control+0x2a4>)
      pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8005716:	4682      	mov	sl, r0
      if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 8005718:	4629      	mov	r1, r5
 800571a:	f7fb fceb 	bl	80010f4 <__aeabi_fcmpgt>
 800571e:	2800      	cmp	r0, #0
 8005720:	d073      	beq.n	800580a <Control+0x232>
 8005722:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
      else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;

      /*Remember some variables for next time*/
      pid.lastInput[ROLL] = imu.AHRS[ROLL];
 8005726:	f8c4 90f4 	str.w	r9, [r4, #244]	; 0xf4

  /////////////////////////////////////////////////////////////////////////////////////////////////

      /*Compute all the working error variables*/
      pid.error[PITCH] = RC.rcCommand[PITCH] - imu.AHRS[PITCH];
 800572a:	f8d8 908c 	ldr.w	r9, [r8, #140]	; 0x8c
 800572e:	f9b7 0052 	ldrsh.w	r0, [r7, #82]	; 0x52
 8005732:	f7fb facf 	bl	8000cd4 <__aeabi_i2f>
 8005736:	4649      	mov	r1, r9
 8005738:	f7fb fa16 	bl	8000b68 <__aeabi_fsub>
      pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 800573c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
      pid.error[PITCH] = RC.rcCommand[PITCH] - imu.AHRS[PITCH];
 800573e:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
 8005742:	4682      	mov	sl, r0
      pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 8005744:	f7fb fb1a 	bl	8000d7c <__aeabi_fmul>
 8005748:	9901      	ldr	r1, [sp, #4]
 800574a:	f7fb fb17 	bl	8000d7c <__aeabi_fmul>
 800574e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005752:	f7fb fa0b 	bl	8000b6c <__addsf3>
      if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 8005756:	4948      	ldr	r1, [pc, #288]	; (8005878 <Control+0x2a0>)
      pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 8005758:	4683      	mov	fp, r0
      if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 800575a:	f7fb fccb 	bl	80010f4 <__aeabi_fcmpgt>
 800575e:	2800      	cmp	r0, #0
 8005760:	d060      	beq.n	8005824 <Control+0x24c>
 8005762:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
      else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
      pid.dInput[PITCH] = (imu.AHRS[PITCH] - pid.lastInput[PITCH]) / pid.ts;
 8005766:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 800576a:	4648      	mov	r0, r9
 800576c:	f7fb f9fc 	bl	8000b68 <__aeabi_fsub>
 8005770:	9901      	ldr	r1, [sp, #4]
 8005772:	f7fb fbb7 	bl	8000ee4 <__aeabi_fdiv>

      /*Compute PID Output*/
      pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 8005776:	68a1      	ldr	r1, [r4, #8]
      pid.dInput[PITCH] = (imu.AHRS[PITCH] - pid.lastInput[PITCH]) / pid.ts;
 8005778:	4683      	mov	fp, r0
 800577a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
      pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 800577e:	4650      	mov	r0, sl
 8005780:	f7fb fafc 	bl	8000d7c <__aeabi_fmul>
 8005784:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005788:	f7fb f9f0 	bl	8000b6c <__addsf3>
 800578c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800578e:	4682      	mov	sl, r0
 8005790:	4658      	mov	r0, fp
 8005792:	f7fb faf3 	bl	8000d7c <__aeabi_fmul>
 8005796:	4601      	mov	r1, r0
 8005798:	4650      	mov	r0, sl
 800579a:	f7fb f9e5 	bl	8000b68 <__aeabi_fsub>

      if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 800579e:	4937      	ldr	r1, [pc, #220]	; (800587c <Control+0x2a4>)
      pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 80057a0:	4682      	mov	sl, r0
      if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 80057a2:	f7fb fca7 	bl	80010f4 <__aeabi_fcmpgt>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d04a      	beq.n	8005840 <Control+0x268>
 80057aa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
      pid.lastInput[PITCH] = imu.AHRS[PITCH];

  //////////////////////////////////////////////////////////////////////////////////////////////////

      /*Compute all the working error variables*/
      pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroRaw[YAW];
 80057ae:	f8d8 8040 	ldr.w	r8, [r8, #64]	; 0x40
      pid.lastInput[PITCH] = imu.AHRS[PITCH];
 80057b2:	f8c4 90f8 	str.w	r9, [r4, #248]	; 0xf8
      pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroRaw[YAW];
 80057b6:	f9b7 0054 	ldrsh.w	r0, [r7, #84]	; 0x54
 80057ba:	f7fb fa8b 	bl	8000cd4 <__aeabi_i2f>
 80057be:	4641      	mov	r1, r8
 80057c0:	f7fb f9d2 	bl	8000b68 <__aeabi_fsub>
      pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 80057c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
      pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroRaw[YAW];
 80057c6:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
 80057ca:	4607      	mov	r7, r0
      pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 80057cc:	f7fb fad6 	bl	8000d7c <__aeabi_fmul>
 80057d0:	9901      	ldr	r1, [sp, #4]
 80057d2:	f7fb fad3 	bl	8000d7c <__aeabi_fmul>
 80057d6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80057da:	f7fb f9c7 	bl	8000b6c <__addsf3>
      if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 80057de:	4926      	ldr	r1, [pc, #152]	; (8005878 <Control+0x2a0>)
      pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 80057e0:	4681      	mov	r9, r0
      if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 80057e2:	f7fb fc87 	bl	80010f4 <__aeabi_fcmpgt>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d04e      	beq.n	8005888 <Control+0x2b0>
      else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 80057ea:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
 80057ee:	e054      	b.n	800589a <Control+0x2c2>
      else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 80057f0:	f8df b08c 	ldr.w	fp, [pc, #140]	; 8005880 <Control+0x2a8>
 80057f4:	4628      	mov	r0, r5
 80057f6:	4659      	mov	r1, fp
 80057f8:	f7fb fc5e 	bl	80010b8 <__aeabi_fcmplt>
 80057fc:	b910      	cbnz	r0, 8005804 <Control+0x22c>
      pid.Iterm[ROLL] += pid.ki[ROLL] * pid.error[ROLL] * pid.ts;
 80057fe:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 8005802:	e76b      	b.n	80056dc <Control+0x104>
      else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 8005804:	f8c4 b0a0 	str.w	fp, [r4, #160]	; 0xa0
 8005808:	e768      	b.n	80056dc <Control+0x104>
      else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 800580a:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005884 <Control+0x2ac>
 800580e:	4650      	mov	r0, sl
 8005810:	4659      	mov	r1, fp
 8005812:	f7fb fc51 	bl	80010b8 <__aeabi_fcmplt>
 8005816:	b910      	cbnz	r0, 800581e <Control+0x246>
      pid.output2[ROLL] = pid.kp[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd[ROLL] * pid.dInput[ROLL];
 8005818:	f8c4 a10c 	str.w	sl, [r4, #268]	; 0x10c
 800581c:	e783      	b.n	8005726 <Control+0x14e>
      else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 800581e:	f8c4 b10c 	str.w	fp, [r4, #268]	; 0x10c
 8005822:	e780      	b.n	8005726 <Control+0x14e>
      else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 8005824:	4b16      	ldr	r3, [pc, #88]	; (8005880 <Control+0x2a8>)
 8005826:	4658      	mov	r0, fp
 8005828:	4619      	mov	r1, r3
 800582a:	9302      	str	r3, [sp, #8]
 800582c:	f7fb fc44 	bl	80010b8 <__aeabi_fcmplt>
 8005830:	9b02      	ldr	r3, [sp, #8]
 8005832:	b910      	cbnz	r0, 800583a <Control+0x262>
      pid.Iterm[PITCH] += pid.ki[PITCH] * pid.error[PITCH] * pid.ts;
 8005834:	f8c4 b0a4 	str.w	fp, [r4, #164]	; 0xa4
 8005838:	e795      	b.n	8005766 <Control+0x18e>
      else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 800583a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800583e:	e792      	b.n	8005766 <Control+0x18e>
      else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 8005840:	f8df b040 	ldr.w	fp, [pc, #64]	; 8005884 <Control+0x2ac>
 8005844:	4650      	mov	r0, sl
 8005846:	4659      	mov	r1, fp
 8005848:	f7fb fc36 	bl	80010b8 <__aeabi_fcmplt>
 800584c:	b910      	cbnz	r0, 8005854 <Control+0x27c>
      pid.output2[PITCH] = pid.kp[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd[PITCH] * pid.dInput[PITCH];
 800584e:	f8c4 a110 	str.w	sl, [r4, #272]	; 0x110
 8005852:	e7ac      	b.n	80057ae <Control+0x1d6>
      else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 8005854:	f8c4 b110 	str.w	fp, [r4, #272]	; 0x110
 8005858:	e7a9      	b.n	80057ae <Control+0x1d6>
 800585a:	bf00      	nop
 800585c:	20000d2c 	.word	0x20000d2c
 8005860:	2000105c 	.word	0x2000105c
 8005864:	20000e44 	.word	0x20000e44
 8005868:	200011b8 	.word	0x200011b8
 800586c:	20000e4a 	.word	0x20000e4a
 8005870:	3c8efa39 	.word	0x3c8efa39
 8005874:	200010d8 	.word	0x200010d8
 8005878:	43480000 	.word	0x43480000
 800587c:	43c80000 	.word	0x43c80000
 8005880:	c3480000 	.word	0xc3480000
 8005884:	c3c80000 	.word	0xc3c80000
      else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 8005888:	4e76      	ldr	r6, [pc, #472]	; (8005a64 <Control+0x48c>)
 800588a:	4648      	mov	r0, r9
 800588c:	4631      	mov	r1, r6
 800588e:	f7fb fc13 	bl	80010b8 <__aeabi_fcmplt>
 8005892:	2800      	cmp	r0, #0
 8005894:	d1a9      	bne.n	80057ea <Control+0x212>
      pid.Iterm[YAW] += pid.ki[YAW] * pid.error[YAW] * pid.ts;
 8005896:	f8c4 90a8 	str.w	r9, [r4, #168]	; 0xa8
      pid.dInput[YAW] = (imu.gyroRaw[YAW] - pid.lastInput[YAW]) / pid.ts;
 800589a:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
 800589e:	4640      	mov	r0, r8
 80058a0:	f7fb f962 	bl	8000b68 <__aeabi_fsub>
 80058a4:	9901      	ldr	r1, [sp, #4]
 80058a6:	f7fb fb1d 	bl	8000ee4 <__aeabi_fdiv>

      /*Compute PID Output*/
      pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 80058aa:	68e1      	ldr	r1, [r4, #12]
      pid.dInput[YAW] = (imu.gyroRaw[YAW] - pid.lastInput[YAW]) / pid.ts;
 80058ac:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
 80058b0:	4606      	mov	r6, r0
      pid.output2[YAW] = pid.kp[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd[YAW] * pid.dInput[YAW];
 80058b2:	4638      	mov	r0, r7
 80058b4:	f7fb fa62 	bl	8000d7c <__aeabi_fmul>
 80058b8:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80058bc:	f7fb f956 	bl	8000b6c <__addsf3>
 80058c0:	4607      	mov	r7, r0
 80058c2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
        else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
        pid.dInput[YAW] = (imu.gyroRaw[YAW] - pid.lastInput[YAW]) / pid.ts;

        /*Compute PID Output*/
        pid.output2[YAW] = pid.kp_rate[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd_rate[YAW] * pid.dInput[YAW];
 80058c4:	4630      	mov	r0, r6
 80058c6:	f7fb fa59 	bl	8000d7c <__aeabi_fmul>
 80058ca:	4601      	mov	r1, r0
 80058cc:	4638      	mov	r0, r7
 80058ce:	f7fb f94b 	bl	8000b68 <__aeabi_fsub>

        if(pid.output2[YAW] > OUT_MAX) pid.output2[YAW] = OUT_MAX;
 80058d2:	4965      	ldr	r1, [pc, #404]	; (8005a68 <Control+0x490>)
        pid.output2[YAW] = pid.kp_rate[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd_rate[YAW] * pid.dInput[YAW];
 80058d4:	4606      	mov	r6, r0
        if(pid.output2[YAW] > OUT_MAX) pid.output2[YAW] = OUT_MAX;
 80058d6:	f7fb fc0d 	bl	80010f4 <__aeabi_fcmpgt>
 80058da:	2800      	cmp	r0, #0
 80058dc:	f000 81d6 	beq.w	8005c8c <Control+0x6b4>
        else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;
 80058e0:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 80058e4:	e1dc      	b.n	8005ca0 <Control+0x6c8>
    }else if(f.HORIZON_MODE){
 80058e6:	79b3      	ldrb	r3, [r6, #6]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 80c9 	beq.w	8005a80 <Control+0x4a8>
 80058ee:	4f5f      	ldr	r7, [pc, #380]	; (8005a6c <Control+0x494>)
 80058f0:	4c5f      	ldr	r4, [pc, #380]	; (8005a70 <Control+0x498>)
        deriv = pid.pre_deriv[axis] + (deriv -pid.pre_deriv[axis]) * D_FILTER_COFF;
 80058f2:	f8df a188 	ldr.w	sl, [pc, #392]	; 8005a7c <Control+0x4a4>
        if(pid.output2[axis] > OUT_MAX) pid.output2[axis] = OUT_MAX;
 80058f6:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005a68 <Control+0x490>
        if(pid.output2[axis] < -OUT_MAX) pid.output2[axis] = -OUT_MAX;
 80058fa:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005a78 <Control+0x4a0>
        error = RC.rcCommand[axis] - imu.AHRS[axis];
 80058fe:	4b5d      	ldr	r3, [pc, #372]	; (8005a74 <Control+0x49c>)
 8005900:	18eb      	adds	r3, r5, r3
 8005902:	f9b3 0050 	ldrsh.w	r0, [r3, #80]	; 0x50
 8005906:	f7fb f9e5 	bl	8000cd4 <__aeabi_i2f>
 800590a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800590c:	f7fb f92c 	bl	8000b68 <__aeabi_fsub>
        pid.Iterm1[axis] += error * pid.ts;
 8005910:	4601      	mov	r1, r0
        error = RC.rcCommand[axis] - imu.AHRS[axis];
 8005912:	4606      	mov	r6, r0
        pid.Iterm1[axis] += error * pid.ts;
 8005914:	9801      	ldr	r0, [sp, #4]
 8005916:	f7fb fa31 	bl	8000d7c <__aeabi_fmul>
 800591a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800591e:	f7fb f925 	bl	8000b6c <__addsf3>
        if(pid.Iterm1[axis] > pid.i1_limit[axis]) pid.Iterm1[axis] = pid.i1_limit[axis];
 8005922:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
        pid.Iterm1[axis] += error * pid.ts;
 8005924:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if(pid.Iterm1[axis] > pid.i1_limit[axis]) pid.Iterm1[axis] = pid.i1_limit[axis];
 8005928:	4619      	mov	r1, r3
 800592a:	9302      	str	r3, [sp, #8]
        pid.Iterm1[axis] += error * pid.ts;
 800592c:	9003      	str	r0, [sp, #12]
        if(pid.Iterm1[axis] > pid.i1_limit[axis]) pid.Iterm1[axis] = pid.i1_limit[axis];
 800592e:	f7fb fbe1 	bl	80010f4 <__aeabi_fcmpgt>
 8005932:	9b02      	ldr	r3, [sp, #8]
 8005934:	9a03      	ldr	r2, [sp, #12]
 8005936:	2800      	cmp	r0, #0
 8005938:	d079      	beq.n	8005a2e <Control+0x456>
        else if(pid.Iterm1[axis] < -pid.i1_limit[axis]) pid.Iterm1[axis] = -pid.i1_limit[axis];
 800593a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800593e:	3404      	adds	r4, #4
        pid.output1[axis] = pid.kp1[axis]*error + pid.ki1[axis]*pid.Iterm1[axis];
 8005940:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005944:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005946:	f7fb fa19 	bl	8000d7c <__aeabi_fmul>
 800594a:	6821      	ldr	r1, [r4, #0]
 800594c:	9002      	str	r0, [sp, #8]
 800594e:	4630      	mov	r0, r6
 8005950:	f7fb fa14 	bl	8000d7c <__aeabi_fmul>
 8005954:	9b02      	ldr	r3, [sp, #8]
 8005956:	4601      	mov	r1, r0
 8005958:	4618      	mov	r0, r3
 800595a:	f7fb f907 	bl	8000b6c <__addsf3>
        error = pid.output1[axis] - imu.gyroRaw[axis];
 800595e:	f857 1f04 	ldr.w	r1, [r7, #4]!
        pid.output1[axis] = pid.kp1[axis]*error + pid.ki1[axis]*pid.Iterm1[axis];
 8005962:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
        error = pid.output1[axis] - imu.gyroRaw[axis];
 8005966:	f7fb f8ff 	bl	8000b68 <__aeabi_fsub>
        pid.Iterm2[axis] += error * pid.ts;
 800596a:	4601      	mov	r1, r0
        error = pid.output1[axis] - imu.gyroRaw[axis];
 800596c:	4606      	mov	r6, r0
        pid.Iterm2[axis] += error * pid.ts;
 800596e:	9801      	ldr	r0, [sp, #4]
 8005970:	f7fb fa04 	bl	8000d7c <__aeabi_fmul>
 8005974:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8005978:	f7fb f8f8 	bl	8000b6c <__addsf3>
        if(pid.Iterm2[axis] > pid.i2_limit[axis]) pid.Iterm2[axis] = pid.i2_limit[axis];
 800597c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
        pid.Iterm2[axis] += error * pid.ts;
 8005980:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        if(pid.Iterm2[axis] > pid.i2_limit[axis]) pid.Iterm2[axis] = pid.i2_limit[axis];
 8005984:	4619      	mov	r1, r3
 8005986:	9302      	str	r3, [sp, #8]
        pid.Iterm2[axis] += error * pid.ts;
 8005988:	9003      	str	r0, [sp, #12]
        if(pid.Iterm2[axis] > pid.i2_limit[axis]) pid.Iterm2[axis] = pid.i2_limit[axis];
 800598a:	f7fb fbb3 	bl	80010f4 <__aeabi_fcmpgt>
 800598e:	9b02      	ldr	r3, [sp, #8]
 8005990:	9a03      	ldr	r2, [sp, #12]
 8005992:	2800      	cmp	r0, #0
 8005994:	d057      	beq.n	8005a46 <Control+0x46e>
        else if(pid.Iterm2[axis] < -pid.i2_limit[axis]) pid.Iterm2[axis] = -pid.i2_limit[axis];
 8005996:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        deriv = (error - pid.pre_error[axis])*dt_recip;
 800599a:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
 800599e:	4630      	mov	r0, r6
 80059a0:	f7fb f8e2 	bl	8000b68 <__aeabi_fsub>
 80059a4:	4641      	mov	r1, r8
 80059a6:	f7fb f9e9 	bl	8000d7c <__aeabi_fmul>
        deriv = pid.pre_deriv[axis] + (deriv -pid.pre_deriv[axis]) * D_FILTER_COFF;
 80059aa:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
        pid.pre_error[axis] = error;
 80059ae:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
        deriv = pid.pre_deriv[axis] + (deriv -pid.pre_deriv[axis]) * D_FILTER_COFF;
 80059b2:	4619      	mov	r1, r3
 80059b4:	9302      	str	r3, [sp, #8]
 80059b6:	f7fb f8d7 	bl	8000b68 <__aeabi_fsub>
 80059ba:	4651      	mov	r1, sl
 80059bc:	f7fb f9de 	bl	8000d7c <__aeabi_fmul>
 80059c0:	9b02      	ldr	r3, [sp, #8]
 80059c2:	4601      	mov	r1, r0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fb f8d1 	bl	8000b6c <__addsf3>
        pid.output2[axis] = pid.kp2[axis]*error + pid.ki2[axis]*pid.Iterm2[axis] + pid.kd2[axis]*deriv;
 80059ca:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
        pid.pre_deriv[axis] = deriv;
 80059ce:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
 80059d2:	9003      	str	r0, [sp, #12]
        pid.output2[axis] = pid.kp2[axis]*error + pid.ki2[axis]*pid.Iterm2[axis] + pid.kd2[axis]*deriv;
 80059d4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80059d6:	f7fb f9d1 	bl	8000d7c <__aeabi_fmul>
 80059da:	68e1      	ldr	r1, [r4, #12]
 80059dc:	9002      	str	r0, [sp, #8]
 80059de:	4630      	mov	r0, r6
 80059e0:	f7fb f9cc 	bl	8000d7c <__aeabi_fmul>
 80059e4:	9a02      	ldr	r2, [sp, #8]
 80059e6:	4601      	mov	r1, r0
 80059e8:	4610      	mov	r0, r2
 80059ea:	f7fb f8bf 	bl	8000b6c <__addsf3>
 80059ee:	9b03      	ldr	r3, [sp, #12]
 80059f0:	4606      	mov	r6, r0
 80059f2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fb f9c1 	bl	8000d7c <__aeabi_fmul>
 80059fa:	4601      	mov	r1, r0
 80059fc:	4630      	mov	r0, r6
 80059fe:	f7fb f8b5 	bl	8000b6c <__addsf3>
        if(pid.output2[axis] > OUT_MAX) pid.output2[axis] = OUT_MAX;
 8005a02:	4919      	ldr	r1, [pc, #100]	; (8005a68 <Control+0x490>)
        pid.output2[axis] = pid.kp2[axis]*error + pid.ki2[axis]*pid.Iterm2[axis] + pid.kd2[axis]*deriv;
 8005a04:	4606      	mov	r6, r0
        if(pid.output2[axis] > OUT_MAX) pid.output2[axis] = OUT_MAX;
 8005a06:	f7fb fb75 	bl	80010f4 <__aeabi_fcmpgt>
 8005a0a:	bb38      	cbnz	r0, 8005a5c <Control+0x484>
        pid.output2[axis] = pid.kp2[axis]*error + pid.ki2[axis]*pid.Iterm2[axis] + pid.kd2[axis]*deriv;
 8005a0c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
        if(pid.output2[axis] < -OUT_MAX) pid.output2[axis] = -OUT_MAX;
 8005a10:	4919      	ldr	r1, [pc, #100]	; (8005a78 <Control+0x4a0>)
 8005a12:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 8005a16:	f7fb fb4f 	bl	80010b8 <__aeabi_fcmplt>
 8005a1a:	b108      	cbz	r0, 8005a20 <Control+0x448>
 8005a1c:	f8c4 90fc 	str.w	r9, [r4, #252]	; 0xfc
 8005a20:	3502      	adds	r5, #2
        for(axis = 0; axis < 3; axis++){
 8005a22:	2d06      	cmp	r5, #6
 8005a24:	f47f af6b 	bne.w	80058fe <Control+0x326>
	      //BEEP_OFF;
	      RGB_B_OFF;
	    }
	  }
#endif
}
 8005a28:	b005      	add	sp, #20
 8005a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(pid.Iterm1[axis] < -pid.i1_limit[axis]) pid.Iterm1[axis] = -pid.i1_limit[axis];
 8005a2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	9302      	str	r3, [sp, #8]
 8005a38:	f7fb fb3e 	bl	80010b8 <__aeabi_fcmplt>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	f43f af7e 	beq.w	800593e <Control+0x366>
 8005a42:	9b02      	ldr	r3, [sp, #8]
 8005a44:	e779      	b.n	800593a <Control+0x362>
        else if(pid.Iterm2[axis] < -pid.i2_limit[axis]) pid.Iterm2[axis] = -pid.i2_limit[axis];
 8005a46:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	9302      	str	r3, [sp, #8]
 8005a50:	f7fb fb32 	bl	80010b8 <__aeabi_fcmplt>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d0a0      	beq.n	800599a <Control+0x3c2>
 8005a58:	9b02      	ldr	r3, [sp, #8]
 8005a5a:	e79c      	b.n	8005996 <Control+0x3be>
        if(pid.output2[axis] > OUT_MAX) pid.output2[axis] = OUT_MAX;
 8005a5c:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
 8005a60:	e7d6      	b.n	8005a10 <Control+0x438>
 8005a62:	bf00      	nop
 8005a64:	c3480000 	.word	0xc3480000
 8005a68:	43c80000 	.word	0x43c80000
 8005a6c:	200011ec 	.word	0x200011ec
 8005a70:	20000d38 	.word	0x20000d38
 8005a74:	200010d8 	.word	0x200010d8
 8005a78:	c3c80000 	.word	0xc3c80000
 8005a7c:	3ccccccd 	.word	0x3ccccccd
  }else if(f.ACRO_MODE){
 8005a80:	79f3      	ldrb	r3, [r6, #7]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0d0      	beq.n	8005a28 <Control+0x450>
        pid.error[ROLL] = RC.rcCommand[ROLL] - imu.gyroRaw[ROLL];
 8005a86:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8005cbc <Control+0x6e4>
 8005a8a:	4f87      	ldr	r7, [pc, #540]	; (8005ca8 <Control+0x6d0>)
 8005a8c:	f8d8 9038 	ldr.w	r9, [r8, #56]	; 0x38
 8005a90:	f9b7 0050 	ldrsh.w	r0, [r7, #80]	; 0x50
 8005a94:	f7fb f91e 	bl	8000cd4 <__aeabi_i2f>
 8005a98:	4649      	mov	r1, r9
 8005a9a:	f7fb f865 	bl	8000b68 <__aeabi_fsub>
        pid.Iterm[ROLL] += pid.ki_rate[ROLL] * pid.error[ROLL] * pid.ts;
 8005a9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
        pid.error[ROLL] = RC.rcCommand[ROLL] - imu.gyroRaw[ROLL];
 8005aa0:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
 8005aa4:	4682      	mov	sl, r0
        pid.Iterm[ROLL] += pid.ki_rate[ROLL] * pid.error[ROLL] * pid.ts;
 8005aa6:	f7fb f969 	bl	8000d7c <__aeabi_fmul>
 8005aaa:	9901      	ldr	r1, [sp, #4]
 8005aac:	f7fb f966 	bl	8000d7c <__aeabi_fmul>
 8005ab0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005ab4:	f7fb f85a 	bl	8000b6c <__addsf3>
        if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 8005ab8:	4e7c      	ldr	r6, [pc, #496]	; (8005cac <Control+0x6d4>)
        pid.Iterm[ROLL] += pid.ki_rate[ROLL] * pid.error[ROLL] * pid.ts;
 8005aba:	4605      	mov	r5, r0
        if(pid.Iterm[ROLL] > I_MAX) pid.Iterm[ROLL] = I_MAX;
 8005abc:	4631      	mov	r1, r6
 8005abe:	f7fb fb19 	bl	80010f4 <__aeabi_fcmpgt>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	f000 808d 	beq.w	8005be2 <Control+0x60a>
 8005ac8:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
        pid.dInput[ROLL] = (imu.gyroRaw[ROLL] - pid.lastInput[ROLL])  / pid.ts;
 8005acc:	f8d4 10f4 	ldr.w	r1, [r4, #244]	; 0xf4
 8005ad0:	4648      	mov	r0, r9
 8005ad2:	f7fb f849 	bl	8000b68 <__aeabi_fsub>
 8005ad6:	9901      	ldr	r1, [sp, #4]
 8005ad8:	f7fb fa04 	bl	8000ee4 <__aeabi_fdiv>
        pid.output2[ROLL] = pid.kp_rate[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd_rate[ROLL] * pid.dInput[ROLL];
 8005adc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        pid.dInput[ROLL] = (imu.gyroRaw[ROLL] - pid.lastInput[ROLL])  / pid.ts;
 8005ade:	4605      	mov	r5, r0
 8005ae0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
        pid.output2[ROLL] = pid.kp_rate[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd_rate[ROLL] * pid.dInput[ROLL];
 8005ae4:	4650      	mov	r0, sl
 8005ae6:	f7fb f949 	bl	8000d7c <__aeabi_fmul>
 8005aea:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005aee:	f7fb f83d 	bl	8000b6c <__addsf3>
 8005af2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005af4:	4682      	mov	sl, r0
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7fb f940 	bl	8000d7c <__aeabi_fmul>
 8005afc:	4601      	mov	r1, r0
 8005afe:	4650      	mov	r0, sl
 8005b00:	f7fb f832 	bl	8000b68 <__aeabi_fsub>
        if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 8005b04:	4d6a      	ldr	r5, [pc, #424]	; (8005cb0 <Control+0x6d8>)
        pid.output2[ROLL] = pid.kp_rate[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd_rate[ROLL] * pid.dInput[ROLL];
 8005b06:	4682      	mov	sl, r0
        if(pid.output2[ROLL] > OUT_MAX) pid.output2[ROLL] = OUT_MAX;
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fb faf3 	bl	80010f4 <__aeabi_fcmpgt>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d074      	beq.n	8005bfc <Control+0x624>
 8005b12:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
        pid.lastInput[ROLL] = imu.gyroRaw[ROLL];
 8005b16:	f8c4 90f4 	str.w	r9, [r4, #244]	; 0xf4
        pid.error[PITCH] = RC.rcCommand[PITCH] - imu.gyroRaw[PITCH];
 8005b1a:	f8d8 903c 	ldr.w	r9, [r8, #60]	; 0x3c
 8005b1e:	f9b7 0052 	ldrsh.w	r0, [r7, #82]	; 0x52
 8005b22:	f7fb f8d7 	bl	8000cd4 <__aeabi_i2f>
 8005b26:	4649      	mov	r1, r9
 8005b28:	f7fb f81e 	bl	8000b68 <__aeabi_fsub>
        pid.Iterm[PITCH] += pid.ki_rate[PITCH] * pid.error[PITCH] * pid.ts;
 8005b2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        pid.error[PITCH] = RC.rcCommand[PITCH] - imu.gyroRaw[PITCH];
 8005b2e:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
 8005b32:	4682      	mov	sl, r0
        pid.Iterm[PITCH] += pid.ki_rate[PITCH] * pid.error[PITCH] * pid.ts;
 8005b34:	f7fb f922 	bl	8000d7c <__aeabi_fmul>
 8005b38:	9901      	ldr	r1, [sp, #4]
 8005b3a:	f7fb f91f 	bl	8000d7c <__aeabi_fmul>
 8005b3e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005b42:	f7fb f813 	bl	8000b6c <__addsf3>
        if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 8005b46:	4959      	ldr	r1, [pc, #356]	; (8005cac <Control+0x6d4>)
        pid.Iterm[PITCH] += pid.ki_rate[PITCH] * pid.error[PITCH] * pid.ts;
 8005b48:	4683      	mov	fp, r0
        if(pid.Iterm[PITCH] > I_MAX) pid.Iterm[PITCH] = I_MAX;
 8005b4a:	f7fb fad3 	bl	80010f4 <__aeabi_fcmpgt>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d061      	beq.n	8005c16 <Control+0x63e>
 8005b52:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
        pid.dInput[PITCH] = (imu.gyroRaw[PITCH] - pid.lastInput[PITCH]) / pid.ts;
 8005b56:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 8005b5a:	4648      	mov	r0, r9
 8005b5c:	f7fb f804 	bl	8000b68 <__aeabi_fsub>
 8005b60:	9901      	ldr	r1, [sp, #4]
 8005b62:	f7fb f9bf 	bl	8000ee4 <__aeabi_fdiv>
        pid.output2[PITCH] = pid.kp_rate[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd_rate[PITCH] * pid.dInput[PITCH];
 8005b66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        pid.dInput[PITCH] = (imu.gyroRaw[PITCH] - pid.lastInput[PITCH]) / pid.ts;
 8005b68:	4683      	mov	fp, r0
 8005b6a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
        pid.output2[PITCH] = pid.kp_rate[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd_rate[PITCH] * pid.dInput[PITCH];
 8005b6e:	4650      	mov	r0, sl
 8005b70:	f7fb f904 	bl	8000d7c <__aeabi_fmul>
 8005b74:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005b78:	f7fa fff8 	bl	8000b6c <__addsf3>
 8005b7c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005b80:	4682      	mov	sl, r0
 8005b82:	4658      	mov	r0, fp
 8005b84:	f7fb f8fa 	bl	8000d7c <__aeabi_fmul>
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4650      	mov	r0, sl
 8005b8c:	f7fa ffec 	bl	8000b68 <__aeabi_fsub>
        if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 8005b90:	4947      	ldr	r1, [pc, #284]	; (8005cb0 <Control+0x6d8>)
        pid.output2[PITCH] = pid.kp_rate[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd_rate[PITCH] * pid.dInput[PITCH];
 8005b92:	4682      	mov	sl, r0
        if(pid.output2[PITCH] > OUT_MAX) pid.output2[PITCH] = OUT_MAX;
 8005b94:	f7fb faae 	bl	80010f4 <__aeabi_fcmpgt>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d04a      	beq.n	8005c32 <Control+0x65a>
 8005b9c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
        pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroRaw[YAW];
 8005ba0:	f8d8 8040 	ldr.w	r8, [r8, #64]	; 0x40
        pid.lastInput[PITCH] = imu.gyroRaw[PITCH];
 8005ba4:	f8c4 90f8 	str.w	r9, [r4, #248]	; 0xf8
        pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroRaw[YAW];
 8005ba8:	f9b7 0054 	ldrsh.w	r0, [r7, #84]	; 0x54
 8005bac:	f7fb f892 	bl	8000cd4 <__aeabi_i2f>
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	f7fa ffd9 	bl	8000b68 <__aeabi_fsub>
        pid.Iterm[YAW] += pid.ki_rate[YAW] * pid.error[YAW] * pid.ts;
 8005bb6:	6e21      	ldr	r1, [r4, #96]	; 0x60
        pid.error[YAW] = RC.rcCommand[YAW] - imu.gyroRaw[YAW];
 8005bb8:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
 8005bbc:	4607      	mov	r7, r0
        pid.Iterm[YAW] += pid.ki_rate[YAW] * pid.error[YAW] * pid.ts;
 8005bbe:	f7fb f8dd 	bl	8000d7c <__aeabi_fmul>
 8005bc2:	9901      	ldr	r1, [sp, #4]
 8005bc4:	f7fb f8da 	bl	8000d7c <__aeabi_fmul>
 8005bc8:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8005bcc:	f7fa ffce 	bl	8000b6c <__addsf3>
        if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 8005bd0:	4936      	ldr	r1, [pc, #216]	; (8005cac <Control+0x6d4>)
        pid.Iterm[YAW] += pid.ki_rate[YAW] * pid.error[YAW] * pid.ts;
 8005bd2:	4681      	mov	r9, r0
        if(pid.Iterm[YAW] > I_MAX) pid.Iterm[YAW] = I_MAX;
 8005bd4:	f7fb fa8e 	bl	80010f4 <__aeabi_fcmpgt>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d037      	beq.n	8005c4c <Control+0x674>
        else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 8005bdc:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
 8005be0:	e03d      	b.n	8005c5e <Control+0x686>
        else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 8005be2:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8005cb4 <Control+0x6dc>
 8005be6:	4628      	mov	r0, r5
 8005be8:	4659      	mov	r1, fp
 8005bea:	f7fb fa65 	bl	80010b8 <__aeabi_fcmplt>
 8005bee:	b910      	cbnz	r0, 8005bf6 <Control+0x61e>
        pid.Iterm[ROLL] += pid.ki_rate[ROLL] * pid.error[ROLL] * pid.ts;
 8005bf0:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 8005bf4:	e76a      	b.n	8005acc <Control+0x4f4>
        else if(pid.Iterm[ROLL] < -I_MAX) pid.Iterm[ROLL] = -I_MAX;
 8005bf6:	f8c4 b0a0 	str.w	fp, [r4, #160]	; 0xa0
 8005bfa:	e767      	b.n	8005acc <Control+0x4f4>
        else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 8005bfc:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8005cb8 <Control+0x6e0>
 8005c00:	4650      	mov	r0, sl
 8005c02:	4659      	mov	r1, fp
 8005c04:	f7fb fa58 	bl	80010b8 <__aeabi_fcmplt>
 8005c08:	b910      	cbnz	r0, 8005c10 <Control+0x638>
        pid.output2[ROLL] = pid.kp_rate[ROLL] * pid.error[ROLL] + pid.Iterm[ROLL] - pid.kd_rate[ROLL] * pid.dInput[ROLL];
 8005c0a:	f8c4 a10c 	str.w	sl, [r4, #268]	; 0x10c
 8005c0e:	e782      	b.n	8005b16 <Control+0x53e>
        else if(pid.output2[ROLL] < -OUT_MAX) pid.output2[ROLL] = -OUT_MAX;
 8005c10:	f8c4 b10c 	str.w	fp, [r4, #268]	; 0x10c
 8005c14:	e77f      	b.n	8005b16 <Control+0x53e>
        else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 8005c16:	4b27      	ldr	r3, [pc, #156]	; (8005cb4 <Control+0x6dc>)
 8005c18:	4658      	mov	r0, fp
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	9302      	str	r3, [sp, #8]
 8005c1e:	f7fb fa4b 	bl	80010b8 <__aeabi_fcmplt>
 8005c22:	9b02      	ldr	r3, [sp, #8]
 8005c24:	b910      	cbnz	r0, 8005c2c <Control+0x654>
        pid.Iterm[PITCH] += pid.ki_rate[PITCH] * pid.error[PITCH] * pid.ts;
 8005c26:	f8c4 b0a4 	str.w	fp, [r4, #164]	; 0xa4
 8005c2a:	e794      	b.n	8005b56 <Control+0x57e>
        else if(pid.Iterm[PITCH] < -I_MAX) pid.Iterm[PITCH] = -I_MAX;
 8005c2c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8005c30:	e791      	b.n	8005b56 <Control+0x57e>
        else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 8005c32:	f8df b084 	ldr.w	fp, [pc, #132]	; 8005cb8 <Control+0x6e0>
 8005c36:	4650      	mov	r0, sl
 8005c38:	4659      	mov	r1, fp
 8005c3a:	f7fb fa3d 	bl	80010b8 <__aeabi_fcmplt>
 8005c3e:	b910      	cbnz	r0, 8005c46 <Control+0x66e>
        pid.output2[PITCH] = pid.kp_rate[PITCH] * pid.error[PITCH] + pid.Iterm[PITCH] - pid.kd_rate[PITCH] * pid.dInput[PITCH];
 8005c40:	f8c4 a110 	str.w	sl, [r4, #272]	; 0x110
 8005c44:	e7ac      	b.n	8005ba0 <Control+0x5c8>
        else if(pid.output2[PITCH] < -OUT_MAX) pid.output2[PITCH] = -OUT_MAX;
 8005c46:	f8c4 b110 	str.w	fp, [r4, #272]	; 0x110
 8005c4a:	e7a9      	b.n	8005ba0 <Control+0x5c8>
        else if(pid.Iterm[YAW] < -I_MAX) pid.Iterm[YAW] = -I_MAX;
 8005c4c:	4e19      	ldr	r6, [pc, #100]	; (8005cb4 <Control+0x6dc>)
 8005c4e:	4648      	mov	r0, r9
 8005c50:	4631      	mov	r1, r6
 8005c52:	f7fb fa31 	bl	80010b8 <__aeabi_fcmplt>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d1c0      	bne.n	8005bdc <Control+0x604>
        pid.Iterm[YAW] += pid.ki_rate[YAW] * pid.error[YAW] * pid.ts;
 8005c5a:	f8c4 90a8 	str.w	r9, [r4, #168]	; 0xa8
        pid.dInput[YAW] = (imu.gyroRaw[YAW] - pid.lastInput[YAW]) / pid.ts;
 8005c5e:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
 8005c62:	4640      	mov	r0, r8
 8005c64:	f7fa ff80 	bl	8000b68 <__aeabi_fsub>
 8005c68:	9901      	ldr	r1, [sp, #4]
 8005c6a:	f7fb f93b 	bl	8000ee4 <__aeabi_fdiv>
        pid.output2[YAW] = pid.kp_rate[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd_rate[YAW] * pid.dInput[YAW];
 8005c6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
        pid.dInput[YAW] = (imu.gyroRaw[YAW] - pid.lastInput[YAW]) / pid.ts;
 8005c70:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
 8005c74:	4606      	mov	r6, r0
        pid.output2[YAW] = pid.kp_rate[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd_rate[YAW] * pid.dInput[YAW];
 8005c76:	4638      	mov	r0, r7
 8005c78:	f7fb f880 	bl	8000d7c <__aeabi_fmul>
 8005c7c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8005c80:	f7fa ff74 	bl	8000b6c <__addsf3>
 8005c84:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005c88:	4607      	mov	r7, r0
 8005c8a:	e61b      	b.n	80058c4 <Control+0x2ec>
        else if(pid.output2[YAW] < -OUT_MAX) pid.output2[YAW] = -OUT_MAX;
 8005c8c:	4d0a      	ldr	r5, [pc, #40]	; (8005cb8 <Control+0x6e0>)
 8005c8e:	4630      	mov	r0, r6
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fb fa11 	bl	80010b8 <__aeabi_fcmplt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f47f ae22 	bne.w	80058e0 <Control+0x308>
        pid.output2[YAW] = pid.kp_rate[YAW] * pid.error[YAW] + pid.Iterm[YAW] - pid.kd_rate[YAW] * pid.dInput[YAW];
 8005c9c:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
        pid.lastInput[YAW] = imu.gyroRaw[YAW];//imu.Yaw
 8005ca0:	f8c4 80fc 	str.w	r8, [r4, #252]	; 0xfc
}
 8005ca4:	e6c0      	b.n	8005a28 <Control+0x450>
 8005ca6:	bf00      	nop
 8005ca8:	200010d8 	.word	0x200010d8
 8005cac:	43480000 	.word	0x43480000
 8005cb0:	43c80000 	.word	0x43c80000
 8005cb4:	c3480000 	.word	0xc3480000
 8005cb8:	c3c80000 	.word	0xc3c80000
 8005cbc:	200011b8 	.word	0x200011b8

08005cc0 <PwmWriteMotor>:
//#include "PWM.h"
#include "Board.h"
void PwmWriteMotor(void)
{
  TIM4->CCR1 = motor[0];  // Actual : REAR_L
 8005cc0:	4a07      	ldr	r2, [pc, #28]	; (8005ce0 <PwmWriteMotor+0x20>)
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <PwmWriteMotor+0x24>)
 8005cc4:	f9b2 1000 	ldrsh.w	r1, [r2]
 8005cc8:	6359      	str	r1, [r3, #52]	; 0x34
  TIM4->CCR2 = motor[1];  // Actual : FRONT_R
 8005cca:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8005cce:	6399      	str	r1, [r3, #56]	; 0x38
  TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8005cd0:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
  TIM4->CCR4 = motor[3];  // Actual : REAR_R
 8005cd4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8005cd8:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIM4->CCR4 = motor[3];  // Actual : REAR_R
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20000d22 	.word	0x20000d22
 8005ce4:	40000800 	.word	0x40000800

08005ce8 <Init_Buffer>:
	Queue_t *p_uart;
	p_uart = &Q_buffer[channel];
	Init_Buffer(p_uart);
}

bool Init_Buffer(Queue_t *Q){
 8005ce8:	2300      	movs	r3, #0
	bool result = true;
	uint8_t count;
	for(count = 0; count<MAX; count++){
		Q->Ring_Buffer[count]= 0;
 8005cea:	461a      	mov	r2, r3
 8005cec:	54c2      	strb	r2, [r0, r3]
 8005cee:	3301      	adds	r3, #1
	for(count = 0; count<MAX; count++){
 8005cf0:	2bff      	cmp	r3, #255	; 0xff
 8005cf2:	d1fb      	bne.n	8005cec <Init_Buffer+0x4>
	}
	Q->head = 0;
 8005cf4:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
	Q->tail = 0;
 8005cf8:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
	Q->size = MAX;
 8005cfc:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
	Q->temp = 0;
 8005d00:	f880 2102 	strb.w	r2, [r0, #258]	; 0x102
	
	return result;
}
 8005d04:	2001      	movs	r0, #1
 8005d06:	4770      	bx	lr

08005d08 <QueueCreate>:
	Init_Buffer(p_uart);
 8005d08:	f44f 7284 	mov.w	r2, #264	; 0x108
 8005d0c:	4b02      	ldr	r3, [pc, #8]	; (8005d18 <QueueCreate+0x10>)
 8005d0e:	fb02 3000 	mla	r0, r2, r0, r3
 8005d12:	f7ff bfe9 	b.w	8005ce8 <Init_Buffer>
 8005d16:	bf00      	nop
 8005d18:	20000e4c 	.word	0x20000e4c

08005d1c <Q_full>:

uint8_t Q_full(Queue_t *Q){
	if((Q->head+1)%MAX == Q->tail){
 8005d1c:	22ff      	movs	r2, #255	; 0xff
 8005d1e:	f890 30ff 	ldrb.w	r3, [r0, #255]	; 0xff
 8005d22:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
 8005d26:	3301      	adds	r3, #1
 8005d28:	fb93 f2f2 	sdiv	r2, r3, r2
 8005d2c:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8005d30:	1a9b      	subs	r3, r3, r2
	   return TRUE;
	} return FALSE;
}
 8005d32:	1a1b      	subs	r3, r3, r0
 8005d34:	4258      	negs	r0, r3
 8005d36:	4158      	adcs	r0, r3
 8005d38:	4770      	bx	lr

08005d3a <write_Q>:
	if(Q->head == Q->tail){
		return TRUE;
	} return FALSE;
}

uint8_t write_Q(Queue_t *Q, char data){
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	4604      	mov	r4, r0
	if(Q_full(Q)){
 8005d3e:	f7ff ffed 	bl	8005d1c <Q_full>
 8005d42:	b980      	cbnz	r0, 8005d66 <write_Q+0x2c>
		return FALSE;
	}
  Q->Ring_Buffer[Q->head] = data;
  Q->head = (Q->head+1) % MAX;
 8005d44:	22ff      	movs	r2, #255	; 0xff
  Q->Ring_Buffer[Q->head] = data;
 8005d46:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
	return TRUE;
 8005d4a:	2001      	movs	r0, #1
  Q->Ring_Buffer[Q->head] = data;
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	54e1      	strb	r1, [r4, r3]
  Q->head = (Q->head+1) % MAX;
 8005d50:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 8005d54:	3301      	adds	r3, #1
 8005d56:	fb93 f2f2 	sdiv	r2, r3, r2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005d60:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	return TRUE;
 8005d64:	bd10      	pop	{r4, pc}
		return FALSE;
 8005d66:	2000      	movs	r0, #0
}
 8005d68:	bd10      	pop	{r4, pc}

08005d6a <read_Q>:
	if(Q->head == Q->tail){
 8005d6a:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
 8005d6e:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d101      	bne.n	8005d7a <read_Q+0x10>

uint8_t read_Q(Queue_t *Q){
	if(Q_empty(Q)){
		return FALSE;
 8005d76:	2000      	movs	r0, #0
 8005d78:	4770      	bx	lr
	}
		Q->temp = Q->Ring_Buffer[Q->tail];
		Q->tail = (Q->tail+1) % MAX;
 8005d7a:	22ff      	movs	r2, #255	; 0xff
		Q->temp = Q->Ring_Buffer[Q->tail];
 8005d7c:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	5cc3      	ldrb	r3, [r0, r3]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
		Q->tail = (Q->tail+1) % MAX;
 8005d8a:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
 8005d8e:	3301      	adds	r3, #1
 8005d90:	fb93 f2f2 	sdiv	r2, r3, r2
 8005d94:	4413      	add	r3, r2
 8005d96:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005d9a:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
		if(Q->tail >= MAX-1)return FALSE;
 8005d9e:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
 8005da2:	2bfd      	cmp	r3, #253	; 0xfd
 8005da4:	d8e7      	bhi.n	8005d76 <read_Q+0xc>

	return Q->temp;
 8005da6:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
 8005daa:	b2c0      	uxtb	r0, r0
 8005dac:	4770      	bx	lr

08005dae <QueueAvailable>:
	//return TRUE;
}

uint32_t QueueAvailable(Queue_t *Q)
{
 8005dae:	b510      	push	{r4, lr}
  uint32_t length;

  length = (Q->size + Q->head - Q->tail) % Q->size;
 8005db0:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
 8005db4:	f890 40ff 	ldrb.w	r4, [r0, #255]	; 0xff
 8005db8:	f890 1100 	ldrb.w	r1, [r0, #256]	; 0x100
 8005dbc:	4423      	add	r3, r4
 8005dbe:	f890 2101 	ldrb.w	r2, [r0, #257]	; 0x101
 8005dc2:	1a5b      	subs	r3, r3, r1
 8005dc4:	fb93 f0f2 	sdiv	r0, r3, r2

  return length;
}
 8005dc8:	fb00 3012 	mls	r0, r0, r2, r3
 8005dcc:	bd10      	pop	{r4, pc}
	...

08005dd0 <HAL_TIM_IC_CaptureCallback>:
rc RC;
rc RC_Raw;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM2){
 8005dd0:	7f03      	ldrb	r3, [r0, #28]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d11d      	bne.n	8005e12 <HAL_TIM_IC_CaptureCallback+0x42>
 8005dd6:	6803      	ldr	r3, [r0, #0]
 8005dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ddc:	f040 8095 	bne.w	8005f0a <HAL_TIM_IC_CaptureCallback+0x13a>
	        if(Ch1_PIN){  // Timer2 Ch1 pin(PA0) is High
 8005de0:	4a52      	ldr	r2, [pc, #328]	; (8005f2c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8005de2:	6892      	ldr	r2, [r2, #8]
 8005de4:	f012 0f01 	tst.w	r2, #1
 8005de8:	4a51      	ldr	r2, [pc, #324]	; (8005f30 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005dea:	d008      	beq.n	8005dfe <HAL_TIM_IC_CaptureCallback+0x2e>
	            TIM2->CCR1 = 0;
 8005dec:	2100      	movs	r1, #0
 8005dee:	6359      	str	r1, [r3, #52]	; 0x34
	            RC.capture_rise[0] = TIM2->CCR1; // read capture data
 8005df0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005df2:	6011      	str	r1, [r2, #0]

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3){
	        if(Ch3_PIN){  // Timer3 Ch1 pin(PA6) is High
	            TIM3->CCR1 = 0;
	        	RC.capture_rise[2] = TIM3->CCR1; // read capture data
	            Ch3_POL_FALLING;  // to falling edge
 8005df4:	6a1a      	ldr	r2, [r3, #32]
 8005df6:	f042 0202 	orr.w	r2, r2, #2
	            Ch6_POL_FALLING;  // to falling edge
	        }
	        else{   // Timer3 Ch4 pin(PB1) is Low
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
	            Ch6_POL_RISING;   // to rising edge
 8005dfa:	621a      	str	r2, [r3, #32]
//	        	RC.capture_fall[7] = TIM3->CCR4; // read capture data
//	            RC.rcADC[7] = RC.capture_fall[7] - RC.capture_rise[7];
//	            Ch8_POL_RISING;   // to rising edge
//	        }
//	    }
}
 8005dfc:	4770      	bx	lr
	            RC.capture_fall[0] = TIM2->CCR1; // read capture data
 8005dfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
	            RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 8005e00:	6810      	ldr	r0, [r2, #0]
	            RC.capture_fall[0] = TIM2->CCR1; // read capture data
 8005e02:	6211      	str	r1, [r2, #32]
	            RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 8005e04:	1a09      	subs	r1, r1, r0
 8005e06:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
	            Ch3_POL_RISING;   // to rising edge
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	f022 0202 	bic.w	r2, r2, #2
 8005e10:	e7f3      	b.n	8005dfa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM2){
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d13d      	bne.n	8005e92 <HAL_TIM_IC_CaptureCallback+0xc2>
 8005e16:	6803      	ldr	r3, [r0, #0]
 8005e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1c:	d10d      	bne.n	8005e3a <HAL_TIM_IC_CaptureCallback+0x6a>
	        if(Ch2_PIN){  // Timer2 Ch2 pin(PA1) is High
 8005e1e:	4a43      	ldr	r2, [pc, #268]	; (8005f2c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8005e20:	6892      	ldr	r2, [r2, #8]
 8005e22:	f012 0f02 	tst.w	r2, #2
 8005e26:	4a42      	ldr	r2, [pc, #264]	; (8005f30 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005e28:	d018      	beq.n	8005e5c <HAL_TIM_IC_CaptureCallback+0x8c>
	            TIM2->CCR2 = 0;
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	6399      	str	r1, [r3, #56]	; 0x38
	        	RC.capture_rise[1] = TIM2->CCR2; // read capture data
 8005e2e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005e30:	6051      	str	r1, [r2, #4]
	            Ch2_POL_FALLING;  // to falling edge
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	f042 0220 	orr.w	r2, r2, #32
	            Ch2_POL_RISING;   // to rising edge
 8005e38:	621a      	str	r2, [r3, #32]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM3){
 8005e3a:	4a3e      	ldr	r2, [pc, #248]	; (8005f34 <HAL_TIM_IC_CaptureCallback+0x164>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d174      	bne.n	8005f2a <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch4_PIN){  // Timer3 Ch2 pin(PA7) is High
 8005e40:	4a3a      	ldr	r2, [pc, #232]	; (8005f2c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8005e42:	6892      	ldr	r2, [r2, #8]
 8005e44:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e48:	4a39      	ldr	r2, [pc, #228]	; (8005f30 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005e4a:	d018      	beq.n	8005e7e <HAL_TIM_IC_CaptureCallback+0xae>
	            TIM3->CCR2 = 0;
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	6399      	str	r1, [r3, #56]	; 0x38
	        	RC.capture_rise[3] = TIM3->CCR2; // read capture data
 8005e50:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005e52:	60d1      	str	r1, [r2, #12]
	            Ch4_POL_FALLING;  // to falling edge
 8005e54:	6a1a      	ldr	r2, [r3, #32]
 8005e56:	f042 0220 	orr.w	r2, r2, #32
 8005e5a:	e7ce      	b.n	8005dfa <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[1] = TIM2->CCR2; // read capture data
 8005e5c:	6b99      	ldr	r1, [r3, #56]	; 0x38
	        	RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 8005e5e:	6850      	ldr	r0, [r2, #4]
	        	RC.capture_fall[1] = TIM2->CCR2; // read capture data
 8005e60:	6251      	str	r1, [r2, #36]	; 0x24
	        	RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 8005e62:	1a09      	subs	r1, r1, r0
 8005e64:	f8a2 1042 	strh.w	r1, [r2, #66]	; 0x42
	            Ch2_POL_RISING;   // to rising edge
 8005e68:	6a1a      	ldr	r2, [r3, #32]
 8005e6a:	f022 0220 	bic.w	r2, r2, #32
 8005e6e:	e7e3      	b.n	8005e38 <HAL_TIM_IC_CaptureCallback+0x68>
	        	RC.capture_fall[2] = TIM3->CCR1; // read capture data
 8005e70:	6b59      	ldr	r1, [r3, #52]	; 0x34
	        	RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 8005e72:	6890      	ldr	r0, [r2, #8]
	        	RC.capture_fall[2] = TIM3->CCR1; // read capture data
 8005e74:	6291      	str	r1, [r2, #40]	; 0x28
	        	RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 8005e76:	1a09      	subs	r1, r1, r0
 8005e78:	f8a2 1044 	strh.w	r1, [r2, #68]	; 0x44
 8005e7c:	e7c5      	b.n	8005e0a <HAL_TIM_IC_CaptureCallback+0x3a>
	        	RC.capture_fall[3] = TIM3->CCR2; // read capture data
 8005e7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
	            RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 8005e80:	68d0      	ldr	r0, [r2, #12]
	        	RC.capture_fall[3] = TIM3->CCR2; // read capture data
 8005e82:	62d1      	str	r1, [r2, #44]	; 0x2c
	            RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 8005e84:	1a09      	subs	r1, r1, r0
 8005e86:	f8a2 1046 	strh.w	r1, [r2, #70]	; 0x46
	            Ch4_POL_RISING;   // to rising edge
 8005e8a:	6a1a      	ldr	r2, [r3, #32]
 8005e8c:	f022 0220 	bic.w	r2, r2, #32
 8005e90:	e7b3      	b.n	8005dfa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 && htim->Instance == TIM3){
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d147      	bne.n	8005f26 <HAL_TIM_IC_CaptureCallback+0x156>
 8005e96:	6803      	ldr	r3, [r0, #0]
 8005e98:	4a26      	ldr	r2, [pc, #152]	; (8005f34 <HAL_TIM_IC_CaptureCallback+0x164>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d145      	bne.n	8005f2a <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch5_PIN){  // Timer3 Ch3 pin(PB0) is High
 8005e9e:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8005ea2:	6892      	ldr	r2, [r2, #8]
 8005ea4:	f012 0f01 	tst.w	r2, #1
 8005ea8:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005eaa:	d007      	beq.n	8005ebc <HAL_TIM_IC_CaptureCallback+0xec>
	            TIM3->CCR3 = 0;
 8005eac:	2100      	movs	r1, #0
 8005eae:	63d9      	str	r1, [r3, #60]	; 0x3c
	        	RC.capture_rise[4] = TIM3->CCR3; // read capture data
 8005eb0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005eb2:	6111      	str	r1, [r2, #16]
	            Ch5_POL_FALLING;  // to falling edge
 8005eb4:	6a1a      	ldr	r2, [r3, #32]
 8005eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eba:	e79e      	b.n	8005dfa <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[4] = TIM3->CCR3; // read capture data
 8005ebc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	            RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 8005ebe:	6910      	ldr	r0, [r2, #16]
	        	RC.capture_fall[4] = TIM3->CCR3; // read capture data
 8005ec0:	6311      	str	r1, [r2, #48]	; 0x30
	            RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 8005ec2:	1a09      	subs	r1, r1, r0
 8005ec4:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
	            Ch5_POL_RISING;   // to rising edge
 8005ec8:	6a1a      	ldr	r2, [r3, #32]
 8005eca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ece:	e794      	b.n	8005dfa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3){
 8005ed0:	6803      	ldr	r3, [r0, #0]
 8005ed2:	4a18      	ldr	r2, [pc, #96]	; (8005f34 <HAL_TIM_IC_CaptureCallback+0x164>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d128      	bne.n	8005f2a <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch6_PIN){  // Timer3 Ch4 pin(PB1) is High
 8005ed8:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8005edc:	6892      	ldr	r2, [r2, #8]
 8005ede:	f012 0f02 	tst.w	r2, #2
 8005ee2:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005ee4:	d007      	beq.n	8005ef6 <HAL_TIM_IC_CaptureCallback+0x126>
	            TIM3->CCR4 = 0;
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	6419      	str	r1, [r3, #64]	; 0x40
	        	RC.capture_rise[5] = TIM3->CCR4; // read capture data
 8005eea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005eec:	6151      	str	r1, [r2, #20]
	            Ch6_POL_FALLING;  // to falling edge
 8005eee:	6a1a      	ldr	r2, [r3, #32]
 8005ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef4:	e781      	b.n	8005dfa <HAL_TIM_IC_CaptureCallback+0x2a>
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
 8005ef6:	6c19      	ldr	r1, [r3, #64]	; 0x40
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 8005ef8:	6950      	ldr	r0, [r2, #20]
	        	RC.capture_fall[5] = TIM3->CCR4; // read capture data
 8005efa:	6351      	str	r1, [r2, #52]	; 0x34
	            RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 8005efc:	1a09      	subs	r1, r1, r0
 8005efe:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
	            Ch6_POL_RISING;   // to rising edge
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f08:	e777      	b.n	8005dfa <HAL_TIM_IC_CaptureCallback+0x2a>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3){
 8005f0a:	4a0a      	ldr	r2, [pc, #40]	; (8005f34 <HAL_TIM_IC_CaptureCallback+0x164>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10c      	bne.n	8005f2a <HAL_TIM_IC_CaptureCallback+0x15a>
	        if(Ch3_PIN){  // Timer3 Ch1 pin(PA6) is High
 8005f10:	4a06      	ldr	r2, [pc, #24]	; (8005f2c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8005f12:	6892      	ldr	r2, [r2, #8]
 8005f14:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005f18:	4a05      	ldr	r2, [pc, #20]	; (8005f30 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005f1a:	d0a9      	beq.n	8005e70 <HAL_TIM_IC_CaptureCallback+0xa0>
	            TIM3->CCR1 = 0;
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	6359      	str	r1, [r3, #52]	; 0x34
	        	RC.capture_rise[2] = TIM3->CCR1; // read capture data
 8005f20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f22:	6091      	str	r1, [r2, #8]
 8005f24:	e766      	b.n	8005df4 <HAL_TIM_IC_CaptureCallback+0x24>
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3){
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d0d2      	beq.n	8005ed0 <HAL_TIM_IC_CaptureCallback+0x100>
 8005f2a:	4770      	bx	lr
 8005f2c:	40010800 	.word	0x40010800
 8005f30:	200010d8 	.word	0x200010d8
 8005f34:	40000400 	.word	0x40000400

08005f38 <mwArm>:

void mwArm(void)
{
	if(!f.ARMED){
 8005f38:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <mwArm+0x14>)
 8005f3a:	785a      	ldrb	r2, [r3, #1]
 8005f3c:	b92a      	cbnz	r2, 8005f4a <mwArm+0x12>
		f.ARMED = 1;
 8005f3e:	2201      	movs	r2, #1
 8005f40:	705a      	strb	r2, [r3, #1]
//		f.Tuning_MODE = 0;
		ms5611.ground_pressure = alt.EstAlt;
 8005f42:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <mwArm+0x18>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <mwArm+0x1c>)
 8005f48:	669a      	str	r2, [r3, #104]	; 0x68
 8005f4a:	4770      	bx	lr
 8005f4c:	2000105c 	.word	0x2000105c
 8005f50:	20001264 	.word	0x20001264
 8005f54:	20001138 	.word	0x20001138

08005f58 <mwDisarm>:
void mwDisarm(void)
{
//  if(!f.ARMED){
//    f.Tuning_MODE = (f.Tuning_MODE+1) % 3;
//  }
	if(f.ARMED){
 8005f58:	4b02      	ldr	r3, [pc, #8]	; (8005f64 <mwDisarm+0xc>)
 8005f5a:	785a      	ldrb	r2, [r3, #1]
 8005f5c:	b10a      	cbz	r2, 8005f62 <mwDisarm+0xa>
		f.ARMED = 0;
 8005f5e:	2200      	movs	r2, #0
 8005f60:	705a      	strb	r2, [r3, #1]
 8005f62:	4770      	bx	lr
 8005f64:	2000105c 	.word	0x2000105c

08005f68 <RC_Init>:
	}
}

void RC_Init(void)
{
 8005f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int count = 0;
	Flight_Status = 0;
 8005f6c:	2400      	movs	r4, #0
	do{
    Error.error = 3;
 8005f6e:	f04f 0803 	mov.w	r8, #3
	Flight_Status = 0;
 8005f72:	4e16      	ldr	r6, [pc, #88]	; (8005fcc <RC_Init+0x64>)
    Error.error = 3;
 8005f74:	4f16      	ldr	r7, [pc, #88]	; (8005fd0 <RC_Init+0x68>)
		LED0_OFF;
 8005f76:	4d17      	ldr	r5, [pc, #92]	; (8005fd4 <RC_Init+0x6c>)
	Flight_Status = 0;
 8005f78:	6034      	str	r4, [r6, #0]
		LED0_OFF;
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2108      	movs	r1, #8
 8005f7e:	4628      	mov	r0, r5
		count ++;
 8005f80:	3401      	adds	r4, #1
    Error.error = 3;
 8005f82:	f887 8000 	strb.w	r8, [r7]
		LED0_OFF;
 8005f86:	f7fc f805 	bl	8001f94 <HAL_GPIO_WritePin>
		if(count == 125){
 8005f8a:	2c7d      	cmp	r4, #125	; 0x7d
 8005f8c:	d104      	bne.n	8005f98 <RC_Init+0x30>
			LED1_TOGGLE; // RED RC_Init
 8005f8e:	2110      	movs	r1, #16
 8005f90:	4628      	mov	r0, r5
 8005f92:	f7fc f804 	bl	8001f9e <HAL_GPIO_TogglePin>
			count = 0;
 8005f96:	2400      	movs	r4, #0
		}
	}while((RC.rcADC[ROLL] < 990) || (RC.rcADC[PITCH] < 990)|| (RC.rcADC[YAW] < 990)|| (RC.rcADC[THROTTLE] < 990));
 8005f98:	f240 33dd 	movw	r3, #989	; 0x3dd
 8005f9c:	4a0e      	ldr	r2, [pc, #56]	; (8005fd8 <RC_Init+0x70>)
 8005f9e:	f9b2 1040 	ldrsh.w	r1, [r2, #64]	; 0x40
 8005fa2:	4299      	cmp	r1, r3
 8005fa4:	dde9      	ble.n	8005f7a <RC_Init+0x12>
 8005fa6:	f9b2 1042 	ldrsh.w	r1, [r2, #66]	; 0x42
 8005faa:	4299      	cmp	r1, r3
 8005fac:	dde5      	ble.n	8005f7a <RC_Init+0x12>
 8005fae:	f9b2 1044 	ldrsh.w	r1, [r2, #68]	; 0x44
 8005fb2:	4299      	cmp	r1, r3
 8005fb4:	dde1      	ble.n	8005f7a <RC_Init+0x12>
 8005fb6:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	dddd      	ble.n	8005f7a <RC_Init+0x12>
	 Flight_Status = 1;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	6033      	str	r3, [r6, #0]
	 Error.error = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	703b      	strb	r3, [r7, #0]
 8005fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000ba8 	.word	0x20000ba8
 8005fd0:	20001564 	.word	0x20001564
 8005fd4:	40010c00 	.word	0x40010c00
 8005fd8:	200010d8 	.word	0x200010d8

08005fdc <computeRC>:
}

void computeRC(void)
{
 8005fdc:	2200      	movs	r2, #0
    int i;
	// ------------------ STICKS COMMAND HANDLER --------------------
  // checking sticks positions
     for (i = 0; i < 4; i++) {
      stTmp >>= 2;
      if (RC.rcADC[i] > 1150)
 8005fde:	4996      	ldr	r1, [pc, #600]	; (8006238 <computeRC+0x25c>)
{
 8005fe0:	b570      	push	{r4, r5, r6, lr}
    uint8_t stTmp = 0;
 8005fe2:	4613      	mov	r3, r2
      if (RC.rcADC[i] > 1150)
 8005fe4:	f240 457e 	movw	r5, #1150	; 0x47e
 8005fe8:	460c      	mov	r4, r1
          stTmp |= 0x80;  // check for MIN
      if (RC.rcADC[i] < 1850)
 8005fea:	f240 7639 	movw	r6, #1849	; 0x739
      if (RC.rcADC[i] > 1150)
 8005fee:	1850      	adds	r0, r2, r1
 8005ff0:	f9b0 0040 	ldrsh.w	r0, [r0, #64]	; 0x40
      stTmp >>= 2;
 8005ff4:	089b      	lsrs	r3, r3, #2
      if (RC.rcADC[i] > 1150)
 8005ff6:	42a8      	cmp	r0, r5
 8005ff8:	dd04      	ble.n	8006004 <computeRC+0x28>
          stTmp |= 0x80;  // check for MIN
 8005ffa:	f063 037f 	orn	r3, r3, #127	; 0x7f
      if (RC.rcADC[i] < 1850)
 8005ffe:	42b0      	cmp	r0, r6
          stTmp |= 0x80;  // check for MIN
 8006000:	b2db      	uxtb	r3, r3
      if (RC.rcADC[i] < 1850)
 8006002:	dc01      	bgt.n	8006008 <computeRC+0x2c>
          stTmp |= 0x40;  // check for MAX
 8006004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006008:	3202      	adds	r2, #2
     for (i = 0; i < 4; i++) {
 800600a:	2a08      	cmp	r2, #8
 800600c:	d1ef      	bne.n	8005fee <computeRC+0x12>
      }
		  if (stTmp == rcSticks) {
 800600e:	4a8b      	ldr	r2, [pc, #556]	; (800623c <computeRC+0x260>)
 8006010:	4e8b      	ldr	r6, [pc, #556]	; (8006240 <computeRC+0x264>)
 8006012:	7811      	ldrb	r1, [r2, #0]
 8006014:	4299      	cmp	r1, r3
 8006016:	d17e      	bne.n	8006116 <computeRC+0x13a>
      if (rcDelayCommand < 250)
 8006018:	7831      	ldrb	r1, [r6, #0]
 800601a:	29f9      	cmp	r1, #249	; 0xf9
 800601c:	d801      	bhi.n	8006022 <computeRC+0x46>
          rcDelayCommand++;
 800601e:	3101      	adds	r1, #1
      } else
          rcDelayCommand = 0;
 8006020:	7031      	strb	r1, [r6, #0]
		 rcSticks = stTmp;
 8006022:	7013      	strb	r3, [r2, #0]
	
		 if (rcDelayCommand == 50) {
 8006024:	7832      	ldrb	r2, [r6, #0]
 8006026:	4d87      	ldr	r5, [pc, #540]	; (8006244 <computeRC+0x268>)
 8006028:	2a32      	cmp	r2, #50	; 0x32
 800602a:	d10b      	bne.n	8006044 <computeRC+0x68>
			 
			 if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 800602c:	786a      	ldrb	r2, [r5, #1]
 800602e:	2a00      	cmp	r2, #0
 8006030:	d173      	bne.n	800611a <computeRC+0x13e>
 8006032:	2b5f      	cmp	r3, #95	; 0x5f
 8006034:	d178      	bne.n	8006128 <computeRC+0x14c>
			 {
			   RGB_B_TOGGLE;
 8006036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
			 }else if(f.ARMED == 1 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
			 {
			   RGB_G_TOGGLE;
 800603a:	4883      	ldr	r0, [pc, #524]	; (8006248 <computeRC+0x26c>)
 800603c:	f7fb ffaf 	bl	8001f9e <HAL_GPIO_TogglePin>
       {
         mwDisarm();
       }
				 if (i) {
               // writeEEPROM(1, true);
               rcDelayCommand = 0; // allow autorepetition
 8006040:	2300      	movs	r3, #0
 8006042:	7033      	strb	r3, [r6, #0]
         }
        }
	    if(RC.rcCommand[AUX1] > 1800){
 8006044:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8006048:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800604c:	dd76      	ble.n	800613c <computeRC+0x160>
	      f.ANGLE_MODE = 1;
 800604e:	2301      	movs	r3, #1
 8006050:	716b      	strb	r3, [r5, #5]
	      f.HORIZON_MODE = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	71ab      	strb	r3, [r5, #6]
	      f.ACRO_MODE = 0;
	    }else if(RC.rcCommand[AUX1] > 1400 && RC.rcCommand[AUX1] < 1600){
	      f.HORIZON_MODE = 1;
	      f.ANGLE_MODE = 0;
	      f.ACRO_MODE = 0;
 8006056:	71eb      	strb	r3, [r5, #7]
	      f.ACRO_MODE = 1;
	      f.ANGLE_MODE = 0;
	      f.HORIZON_MODE = 0;
	    }

		 if(f.ANGLE_MODE || f.HORIZON_MODE){
 8006058:	796b      	ldrb	r3, [r5, #5]
 800605a:	b91b      	cbnz	r3, 8006064 <computeRC+0x88>
 800605c:	79ab      	ldrb	r3, [r5, #6]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 808e 	beq.w	8006180 <computeRC+0x1a4>
		   RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 10), 1100, 1900, -30, 30)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
 8006064:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8006068:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800606c:	4293      	cmp	r3, r2
 800606e:	dd76      	ble.n	800615e <computeRC+0x182>
 8006070:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8006074:	233c      	movs	r3, #60	; 0x3c
 8006076:	4353      	muls	r3, r2
 8006078:	f44f 7248 	mov.w	r2, #800	; 0x320
 800607c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006080:	3b1e      	subs	r3, #30
 8006082:	b29b      	uxth	r3, r3
 8006084:	4971      	ldr	r1, [pc, #452]	; (800624c <computeRC+0x270>)
 8006086:	680a      	ldr	r2, [r1, #0]
 8006088:	4413      	add	r3, r2
		   RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -30, 30)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 800608a:	f240 52e6 	movw	r2, #1510	; 0x5e6
		   RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 10), 1100, 1900, -30, 30)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
 800608e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		   RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -30, 30)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 8006092:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8006096:	4293      	cmp	r3, r2
 8006098:	dd67      	ble.n	800616a <computeRC+0x18e>
 800609a:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 800609e:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80060a2:	4353      	muls	r3, r2
 80060a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80060a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80060ac:	331e      	adds	r3, #30
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	684a      	ldr	r2, [r1, #4]
 80060b2:	4413      	add	r3, r2
		   RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1530, 10), 1130, 1930, -100, 100); //0~250 left:0, right:250
 80060b4:	f240 6204 	movw	r2, #1540	; 0x604
		   RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -30, 30)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 80060b8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
		   RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1530, 10), 1130, 1930, -100, 100); //0~250 left:0, right:250
 80060bc:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 80060c0:	4293      	cmp	r3, r2
 80060c2:	dd58      	ble.n	8006176 <computeRC+0x19a>
 80060c4:	2204      	movs	r2, #4
 80060c6:	f2a3 436a 	subw	r3, r3, #1130	; 0x46a
 80060ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80060ce:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
		 }else if(f.ACRO_MODE){
		   RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 10), 1100, 1900, -90, 90)+ MSP_TRIM[ROLL];
		   RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -90, 90)+ MSP_TRIM[PITCH];
		   RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 10), 1100, 1900, -90, 90);
 80060d2:	b21b      	sxth	r3, r3
 80060d4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
		 }
		 RC.rcCommand[THROTTLE] = map(zofs(RC.rcADC[THROTTLE], 1100, 10), 1100, 1900, 1000, 1800);//0~250
 80060d8:	f240 4256 	movw	r2, #1110	; 0x456
 80060dc:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 80060e0:	4293      	cmp	r3, r2
 80060e2:	f340 809b 	ble.w	800621c <computeRC+0x240>
 80060e6:	3b64      	subs	r3, #100	; 0x64
 80060e8:	b21b      	sxth	r3, r3
		 RC.rcCommand[GEAR]     = RC.rcADC[GEAR];
		 RC.rcCommand[AUX1]     = RC.rcADC[AUX1];
 80060ea:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
		 RC.rcCommand[THROTTLE] = map(zofs(RC.rcADC[THROTTLE], 1100, 10), 1100, 1900, 1000, 1800);//0~250
 80060ee:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
		 RC.rcCommand[AUX1]     = RC.rcADC[AUX1];
 80060f2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a

	  if(RC.rcCommand[GEAR] > 1500 && !f.HEADFREE_MODE){
 80060f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
		 RC.rcCommand[GEAR]     = RC.rcADC[GEAR];
 80060fa:	f9b4 3048 	ldrsh.w	r3, [r4, #72]	; 0x48
	  if(RC.rcCommand[GEAR] > 1500 && !f.HEADFREE_MODE){
 80060fe:	4293      	cmp	r3, r2
		 RC.rcCommand[GEAR]     = RC.rcADC[GEAR];
 8006100:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
	  if(RC.rcCommand[GEAR] > 1500 && !f.HEADFREE_MODE){
 8006104:	f340 8092 	ble.w	800622c <computeRC+0x250>
 8006108:	7b6b      	ldrb	r3, [r5, #13]
 800610a:	2b00      	cmp	r3, #0
 800610c:	f040 8093 	bne.w	8006236 <computeRC+0x25a>
	    f.HEADFREE_MODE = 1;
 8006110:	2301      	movs	r3, #1
	  }else if(RC.rcCommand[GEAR] < 1500 && f.HEADFREE_MODE){
	    f.HEADFREE_MODE = 0;
 8006112:	736b      	strb	r3, [r5, #13]
	  }
}
 8006114:	bd70      	pop	{r4, r5, r6, pc}
          rcDelayCommand = 0;
 8006116:	2100      	movs	r1, #0
 8006118:	e782      	b.n	8006020 <computeRC+0x44>
			 }else if(f.ARMED == 1 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 800611a:	2a01      	cmp	r2, #1
 800611c:	d109      	bne.n	8006132 <computeRC+0x156>
 800611e:	2b6f      	cmp	r3, #111	; 0x6f
 8006120:	d107      	bne.n	8006132 <computeRC+0x156>
			   RGB_G_TOGGLE;
 8006122:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006126:	e788      	b.n	800603a <computeRC+0x5e>
			 }else if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_HI + PIT_HI + ROL_HI))
 8006128:	2b6a      	cmp	r3, #106	; 0x6a
 800612a:	d102      	bne.n	8006132 <computeRC+0x156>
			   mwArm();
 800612c:	f7ff ff04 	bl	8005f38 <mwArm>
 8006130:	e786      	b.n	8006040 <computeRC+0x64>
       }else if(rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_LO)
 8006132:	2b59      	cmp	r3, #89	; 0x59
 8006134:	d184      	bne.n	8006040 <computeRC+0x64>
         mwDisarm();
 8006136:	f7ff ff0f 	bl	8005f58 <mwDisarm>
 800613a:	e781      	b.n	8006040 <computeRC+0x64>
	    }else if(RC.rcCommand[AUX1] > 1400 && RC.rcCommand[AUX1] < 1600){
 800613c:	f46f 62af 	mvn.w	r2, #1400	; 0x578
 8006140:	4413      	add	r3, r2
 8006142:	b29b      	uxth	r3, r3
 8006144:	2bc6      	cmp	r3, #198	; 0xc6
 8006146:	f04f 0201 	mov.w	r2, #1
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	d802      	bhi.n	8006156 <computeRC+0x17a>
	      f.HORIZON_MODE = 1;
 8006150:	71aa      	strb	r2, [r5, #6]
	      f.ANGLE_MODE = 0;
 8006152:	716b      	strb	r3, [r5, #5]
 8006154:	e77f      	b.n	8006056 <computeRC+0x7a>
	      f.ACRO_MODE = 1;
 8006156:	71ea      	strb	r2, [r5, #7]
	      f.ANGLE_MODE = 0;
 8006158:	716b      	strb	r3, [r5, #5]
	      f.HORIZON_MODE = 0;
 800615a:	71ab      	strb	r3, [r5, #6]
 800615c:	e77c      	b.n	8006058 <computeRC+0x7c>
		   RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 10), 1100, 1900, -30, 30)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
 800615e:	f240 52d1 	movw	r2, #1489	; 0x5d1
 8006162:	4293      	cmp	r3, r2
 8006164:	dd84      	ble.n	8006070 <computeRC+0x94>
 8006166:	2300      	movs	r3, #0
 8006168:	e78c      	b.n	8006084 <computeRC+0xa8>
		   RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -30, 30)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 800616a:	f240 52d1 	movw	r2, #1489	; 0x5d1
 800616e:	4293      	cmp	r3, r2
 8006170:	dd93      	ble.n	800609a <computeRC+0xbe>
 8006172:	2300      	movs	r3, #0
 8006174:	e79c      	b.n	80060b0 <computeRC+0xd4>
		   RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1530, 10), 1130, 1930, -100, 100); //0~250 left:0, right:250
 8006176:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 800617a:	dba3      	blt.n	80060c4 <computeRC+0xe8>
		   RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 10), 1100, 1900, -90, 90);
 800617c:	2300      	movs	r3, #0
 800617e:	e7a9      	b.n	80060d4 <computeRC+0xf8>
		 }else if(f.ACRO_MODE){
 8006180:	79ea      	ldrb	r2, [r5, #7]
 8006182:	2a00      	cmp	r2, #0
 8006184:	d0a8      	beq.n	80060d8 <computeRC+0xfc>
		   RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 10), 1100, 1900, -90, 90)+ MSP_TRIM[ROLL];
 8006186:	f240 51e6 	movw	r1, #1510	; 0x5e6
 800618a:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
 800618e:	428a      	cmp	r2, r1
 8006190:	dd0a      	ble.n	80061a8 <computeRC+0x1cc>
 8006192:	23b4      	movs	r3, #180	; 0xb4
 8006194:	f2a2 424c 	subw	r2, r2, #1100	; 0x44c
 8006198:	4353      	muls	r3, r2
 800619a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800619e:	fb93 f3f2 	sdiv	r3, r3, r2
 80061a2:	3b5a      	subs	r3, #90	; 0x5a
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	e003      	b.n	80061b0 <computeRC+0x1d4>
 80061a8:	f240 51d1 	movw	r1, #1489	; 0x5d1
 80061ac:	428a      	cmp	r2, r1
 80061ae:	ddf0      	ble.n	8006192 <computeRC+0x1b6>
 80061b0:	4926      	ldr	r1, [pc, #152]	; (800624c <computeRC+0x270>)
 80061b2:	680a      	ldr	r2, [r1, #0]
 80061b4:	4413      	add	r3, r2
		   RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -90, 90)+ MSP_TRIM[PITCH];
 80061b6:	f240 52e6 	movw	r2, #1510	; 0x5e6
		   RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 10), 1100, 1900, -90, 90)+ MSP_TRIM[ROLL];
 80061ba:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		   RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -90, 90)+ MSP_TRIM[PITCH];
 80061be:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80061c2:	4293      	cmp	r3, r2
 80061c4:	dd1f      	ble.n	8006206 <computeRC+0x22a>
 80061c6:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 80061ca:	f06f 03b3 	mvn.w	r3, #179	; 0xb3
 80061ce:	4353      	muls	r3, r2
 80061d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80061d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80061d8:	335a      	adds	r3, #90	; 0x5a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	684a      	ldr	r2, [r1, #4]
 80061de:	4413      	add	r3, r2
		   RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 10), 1100, 1900, -90, 90);
 80061e0:	f240 52e6 	movw	r2, #1510	; 0x5e6
		   RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -90, 90)+ MSP_TRIM[PITCH];
 80061e4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
		   RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 10), 1100, 1900, -90, 90);
 80061e8:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 80061ec:	4293      	cmp	r3, r2
 80061ee:	dd10      	ble.n	8006212 <computeRC+0x236>
 80061f0:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 80061f4:	f06f 03b3 	mvn.w	r3, #179	; 0xb3
 80061f8:	4353      	muls	r3, r2
 80061fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80061fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006202:	335a      	adds	r3, #90	; 0x5a
 8006204:	e765      	b.n	80060d2 <computeRC+0xf6>
		   RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 10), 1100, 1900, -90, 90)+ MSP_TRIM[PITCH];
 8006206:	f240 52d1 	movw	r2, #1489	; 0x5d1
 800620a:	4293      	cmp	r3, r2
 800620c:	dddb      	ble.n	80061c6 <computeRC+0x1ea>
 800620e:	2300      	movs	r3, #0
 8006210:	e7e4      	b.n	80061dc <computeRC+0x200>
		   RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 10), 1100, 1900, -90, 90);
 8006212:	f240 52d1 	movw	r2, #1489	; 0x5d1
 8006216:	4293      	cmp	r3, r2
 8006218:	dcb0      	bgt.n	800617c <computeRC+0x1a0>
 800621a:	e7e9      	b.n	80061f0 <computeRC+0x214>
		 RC.rcCommand[THROTTLE] = map(zofs(RC.rcADC[THROTTLE], 1100, 10), 1100, 1900, 1000, 1800);//0~250
 800621c:	f240 4241 	movw	r2, #1089	; 0x441
 8006220:	4293      	cmp	r3, r2
 8006222:	f77f af60 	ble.w	80060e6 <computeRC+0x10a>
 8006226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800622a:	e75e      	b.n	80060ea <computeRC+0x10e>
	  }else if(RC.rcCommand[GEAR] < 1500 && f.HEADFREE_MODE){
 800622c:	d003      	beq.n	8006236 <computeRC+0x25a>
 800622e:	7b6b      	ldrb	r3, [r5, #13]
 8006230:	b10b      	cbz	r3, 8006236 <computeRC+0x25a>
	    f.HEADFREE_MODE = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	e76d      	b.n	8006112 <computeRC+0x136>
 8006236:	bd70      	pop	{r4, r5, r6, pc}
 8006238:	200010d8 	.word	0x200010d8
 800623c:	2000071d 	.word	0x2000071d
 8006240:	2000071c 	.word	0x2000071c
 8006244:	2000105c 	.word	0x2000105c
 8006248:	40010c00 	.word	0x40010c00
 800624c:	20000884 	.word	0x20000884

08006250 <getMres>:
// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
uint8_t Mmode = M_100HZ;

void getMres()
{
  switch (Mscale)
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <getMres+0x18>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	b113      	cbz	r3, 800625c <getMres+0xc>
 8006256:	2b01      	cmp	r3, #1
 8006258:	d004      	beq.n	8006264 <getMres+0x14>
 800625a:	4770      	bx	lr
  {
    // Possible magnetometer scales (and their register bit settings) are:
    // 14 bit resolution (0) and 16 bit resolution (1)
    case MFS_14BITS:
      mRes = 10.0f * 4912.0f / 8190.0f; // Proper scale to return milliGauss
 800625c:	4a03      	ldr	r2, [pc, #12]	; (800626c <getMres+0x1c>)
      break;
    case MFS_16BITS:
      mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
 800625e:	4b04      	ldr	r3, [pc, #16]	; (8006270 <getMres+0x20>)
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	4770      	bx	lr
 8006264:	4a03      	ldr	r2, [pc, #12]	; (8006274 <getMres+0x24>)
 8006266:	e7fa      	b.n	800625e <getMres+0xe>
 8006268:	2000000b 	.word	0x2000000b
 800626c:	40bfebff 	.word	0x40bfebff
 8006270:	20000c40 	.word	0x20000c40
 8006274:	3fbfebff 	.word	0x3fbfebff

08006278 <getGres>:
  }
}

void getGres()
{
  switch (Gscale)
 8006278:	4b08      	ldr	r3, [pc, #32]	; (800629c <getGres+0x24>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d806      	bhi.n	800628e <getGres+0x16>
 8006280:	e8df f003 	tbb	[pc, r3]
 8006284:	0a080602 	.word	0x0a080602
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case GFS_250DPS:
      gRes = 250.0f / 32768.0f;
 8006288:	4a05      	ldr	r2, [pc, #20]	; (80062a0 <getGres+0x28>)
      break;
    case GFS_1000DPS:
      gRes = 1000.0f / 32768.0f;
      break;
    case GFS_2000DPS:
      gRes = 2000.0f / 32768.0f;
 800628a:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <getGres+0x2c>)
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	4770      	bx	lr
      gRes = 500.0f / 32768.0f;
 8006290:	4a05      	ldr	r2, [pc, #20]	; (80062a8 <getGres+0x30>)
 8006292:	e7fa      	b.n	800628a <getGres+0x12>
      gRes = 1000.0f / 32768.0f;
 8006294:	4a05      	ldr	r2, [pc, #20]	; (80062ac <getGres+0x34>)
 8006296:	e7f8      	b.n	800628a <getGres+0x12>
      gRes = 2000.0f / 32768.0f;
 8006298:	4a05      	ldr	r2, [pc, #20]	; (80062b0 <getGres+0x38>)
 800629a:	e7f6      	b.n	800628a <getGres+0x12>
 800629c:	20000009 	.word	0x20000009
 80062a0:	3bfa0000 	.word	0x3bfa0000
 80062a4:	20000c38 	.word	0x20000c38
 80062a8:	3c7a0000 	.word	0x3c7a0000
 80062ac:	3cfa0000 	.word	0x3cfa0000
 80062b0:	3d7a0000 	.word	0x3d7a0000

080062b4 <getAres>:
  }
}

void getAres()
{
  switch (Ascale)
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <getAres+0x2c>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d807      	bhi.n	80062cc <getAres+0x18>
 80062bc:	e8df f003 	tbb	[pc, r3]
 80062c0:	0d0a0702 	.word	0x0d0a0702
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case AFS_2G:
      aRes = 2.0f / 32768.0f;
 80062c4:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
      break;
    case AFS_8G:
      aRes = 8.0f / 32768.0f;
      break;
    case AFS_16G:
      aRes = 16.0f / 32768.0f;
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <getAres+0x30>)
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	4770      	bx	lr
      aRes = 4.0f / 32768.0f;
 80062ce:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80062d2:	e7f9      	b.n	80062c8 <getAres+0x14>
      aRes = 8.0f / 32768.0f;
 80062d4:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80062d8:	e7f6      	b.n	80062c8 <getAres+0x14>
      aRes = 16.0f / 32768.0f;
 80062da:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80062de:	e7f3      	b.n	80062c8 <getAres+0x14>
 80062e0:	20000008 	.word	0x20000008
 80062e4:	20000c28 	.word	0x20000c28

080062e8 <GYRO_Common>:
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
	GYRO_ORIENTATION(x, y, z);
	GYRO_Common();
}

void GYRO_Common(void){
 80062e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t axis =0;
  for(axis=0; axis<3; axis++){
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 80062ec:	f04f 0900 	mov.w	r9, #0

    if(abs(imu.gyroRaw[axis]) <= 5){
 80062f0:	2600      	movs	r6, #0
 80062f2:	f04f 0701 	mov.w	r7, #1
 80062f6:	46c8      	mov	r8, r9
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 80062f8:	4b1b      	ldr	r3, [pc, #108]	; (8006368 <GYRO_Common+0x80>)
 80062fa:	4c1c      	ldr	r4, [pc, #112]	; (800636c <GYRO_Common+0x84>)
 80062fc:	681b      	ldr	r3, [r3, #0]
    if(abs(imu.gyroRaw[axis]) <= 5){
 80062fe:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006374 <GYRO_Common+0x8c>
 8006302:	f8df b074 	ldr.w	fp, [pc, #116]	; 8006378 <GYRO_Common+0x90>
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	4b19      	ldr	r3, [pc, #100]	; (8006370 <GYRO_Common+0x88>)
 800630a:	444b      	add	r3, r9
 800630c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8006310:	f7fa fce0 	bl	8000cd4 <__aeabi_i2f>
 8006314:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8006318:	f7fa fc26 	bl	8000b68 <__aeabi_fsub>
 800631c:	9900      	ldr	r1, [sp, #0]
 800631e:	f7fa fd2d 	bl	8000d7c <__aeabi_fmul>
    if(abs(imu.gyroRaw[axis]) <= 5){
 8006322:	4631      	mov	r1, r6
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8006324:	4605      	mov	r5, r0
    if(abs(imu.gyroRaw[axis]) <= 5){
 8006326:	f7fa fee5 	bl	80010f4 <__aeabi_fcmpgt>
 800632a:	463b      	mov	r3, r7
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	b190      	cbz	r0, 8006356 <GYRO_Common+0x6e>
 8006330:	4659      	mov	r1, fp
 8006332:	4628      	mov	r0, r5
 8006334:	f7fa feca 	bl	80010cc <__aeabi_fcmple>
 8006338:	9b01      	ldr	r3, [sp, #4]
 800633a:	b900      	cbnz	r0, 800633e <GYRO_Common+0x56>
 800633c:	4643      	mov	r3, r8
 800633e:	b2db      	uxtb	r3, r3
 8006340:	b973      	cbnz	r3, 8006360 <GYRO_Common+0x78>
    imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8006342:	f844 5c38 	str.w	r5, [r4, #-56]
 8006346:	f109 0902 	add.w	r9, r9, #2
  for(axis=0; axis<3; axis++){
 800634a:	f1b9 0f06 	cmp.w	r9, #6
 800634e:	d1db      	bne.n	8006308 <GYRO_Common+0x20>
        imu.gyroRaw[axis] = 0;
      }
  }
}
 8006350:	b003      	add	sp, #12
 8006352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(abs(imu.gyroRaw[axis]) <= 5){
 8006356:	4651      	mov	r1, sl
 8006358:	4628      	mov	r0, r5
 800635a:	f7fa fec1 	bl	80010e0 <__aeabi_fcmpge>
 800635e:	e7eb      	b.n	8006338 <GYRO_Common+0x50>
        imu.gyroRaw[axis] = 0;
 8006360:	f844 6c38 	str.w	r6, [r4, #-56]
 8006364:	e7ef      	b.n	8006346 <GYRO_Common+0x5e>
 8006366:	bf00      	nop
 8006368:	20000c38 	.word	0x20000c38
 800636c:	20001224 	.word	0x20001224
 8006370:	200011b8 	.word	0x200011b8
 8006374:	c0a00000 	.word	0xc0a00000
 8006378:	40a00000 	.word	0x40a00000

0800637c <Gyro_getADC>:
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 800637c:	2306      	movs	r3, #6
void Gyro_getADC(void){
 800637e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 8006380:	4c0e      	ldr	r4, [pc, #56]	; (80063bc <Gyro_getADC+0x40>)
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	2201      	movs	r2, #1
 8006386:	4623      	mov	r3, r4
 8006388:	2143      	movs	r1, #67	; 0x43
 800638a:	20d2      	movs	r0, #210	; 0xd2
 800638c:	f7fe fa36 	bl	80047fc <I2C_ByteRead>
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8006390:	78a3      	ldrb	r3, [r4, #2]
 8006392:	78e1      	ldrb	r1, [r4, #3]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 8006394:	7962      	ldrb	r2, [r4, #5]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8006396:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 800639a:	7923      	ldrb	r3, [r4, #4]
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 800639c:	7825      	ldrb	r5, [r4, #0]
 800639e:	7860      	ldrb	r0, [r4, #1]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 80063a0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	GYRO_ORIENTATION(x, y, z);
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <Gyro_getADC+0x44>)
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 80063a6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	GYRO_ORIENTATION(x, y, z);
 80063aa:	81d8      	strh	r0, [r3, #14]
 80063ac:	8219      	strh	r1, [r3, #16]
 80063ae:	825a      	strh	r2, [r3, #18]
}
 80063b0:	b003      	add	sp, #12
 80063b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GYRO_Common();
 80063b6:	f7ff bf97 	b.w	80062e8 <GYRO_Common>
 80063ba:	bf00      	nop
 80063bc:	20001278 	.word	0x20001278
 80063c0:	200011b8 	.word	0x200011b8

080063c4 <ACC_Common>:
void ACC_Common(void){
  uint8_t axis = 0;
  static float accLPF[3];
  static int32_t a[3];

  if(calibratingA>0){
 80063c4:	482e      	ldr	r0, [pc, #184]	; (8006480 <ACC_Common+0xbc>)
void ACC_Common(void){
 80063c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(calibratingA>0){
 80063ca:	8803      	ldrh	r3, [r0, #0]
 80063cc:	4d2d      	ldr	r5, [pc, #180]	; (8006484 <ACC_Common+0xc0>)
 80063ce:	b353      	cbz	r3, 8006426 <ACC_Common+0x62>
 80063d0:	2200      	movs	r2, #0
 80063d2:	492d      	ldr	r1, [pc, #180]	; (8006488 <ACC_Common+0xc4>)
    for(axis=0; axis <3; axis++){
    // Reset a[axis] at start of calibration
      if (calibratingA == 512) a[axis]=0;
 80063d4:	4616      	mov	r6, r2
 80063d6:	460c      	mov	r4, r1
 80063d8:	f105 0e12 	add.w	lr, r5, #18
 80063dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e0:	bf08      	it	eq
 80063e2:	600e      	streq	r6, [r1, #0]
      // Sum up 512 readings
      a[axis] +=imu.accADC[axis];
 80063e4:	f9be c002 	ldrsh.w	ip, [lr, #2]
 80063e8:	680f      	ldr	r7, [r1, #0]
      // Clear global variables for next reading
      imu.accADC[axis]=0;
 80063ea:	f82e 6f02 	strh.w	r6, [lr, #2]!
      a[axis] +=imu.accADC[axis];
 80063ee:	4467      	add	r7, ip
 80063f0:	f841 7b04 	str.w	r7, [r1], #4
      imu.accZero[axis]=0;
 80063f4:	18af      	adds	r7, r5, r2
 80063f6:	3204      	adds	r2, #4
    for(axis=0; axis <3; axis++){
 80063f8:	2a0c      	cmp	r2, #12
      imu.accZero[axis]=0;
 80063fa:	667e      	str	r6, [r7, #100]	; 0x64
    for(axis=0; axis <3; axis++){
 80063fc:	d1ee      	bne.n	80063dc <ACC_Common+0x18>
    }
     // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
  if (calibratingA == 1){
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d10f      	bne.n	8006422 <ACC_Common+0x5e>
    imu.accZero[ROLL]  = a[ROLL]>>9;
 8006402:	6822      	ldr	r2, [r4, #0]
    imu.accZero[PITCH] = a[PITCH]>>9;
    imu.accZero[YAW]   = (a[YAW]>>9)-(int32_t)acc_1G;
 8006404:	68a1      	ldr	r1, [r4, #8]
    imu.accZero[ROLL]  = a[ROLL]>>9;
 8006406:	1252      	asrs	r2, r2, #9
 8006408:	666a      	str	r2, [r5, #100]	; 0x64
    imu.accZero[PITCH] = a[PITCH]>>9;
 800640a:	6862      	ldr	r2, [r4, #4]
 800640c:	1252      	asrs	r2, r2, #9
 800640e:	66aa      	str	r2, [r5, #104]	; 0x68
    imu.accZero[YAW]   = (a[YAW]>>9)-(int32_t)acc_1G;
 8006410:	4a1e      	ldr	r2, [pc, #120]	; (800648c <ACC_Common+0xc8>)
 8006412:	8812      	ldrh	r2, [r2, #0]
 8006414:	ebc2 2261 	rsb	r2, r2, r1, asr #9
    f.CALIBRATE_ACC = 0;
 8006418:	f04f 0100 	mov.w	r1, #0
    imu.accZero[YAW]   = (a[YAW]>>9)-(int32_t)acc_1G;
 800641c:	66ea      	str	r2, [r5, #108]	; 0x6c
    f.CALIBRATE_ACC = 0;
 800641e:	4a1c      	ldr	r2, [pc, #112]	; (8006490 <ACC_Common+0xcc>)
 8006420:	7111      	strb	r1, [r2, #4]
  }
  calibratingA--;
 8006422:	3b01      	subs	r3, #1
 8006424:	8003      	strh	r3, [r0, #0]
  if(calibratingA>0){
 8006426:	2400      	movs	r4, #0
  }

  for(axis=0;axis<3;axis++){
    imu.accRaw[axis] = (float)imu.accADC[axis]-imu.accZero[axis];// * aRes;// - accBias[axis];
    if (acc_lpf_factor > 0) {
        accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / acc_lpf_factor)) + imu.accRaw[axis] * (1.0f / acc_lpf_factor);
 8006428:	f04f 5a7d 	mov.w	sl, #1061158912	; 0x3f400000
 800642c:	f04f 597a 	mov.w	r9, #1048576000	; 0x3e800000
 8006430:	4e18      	ldr	r6, [pc, #96]	; (8006494 <ACC_Common+0xd0>)
 8006432:	4f19      	ldr	r7, [pc, #100]	; (8006498 <ACC_Common+0xd4>)
    imu.accRaw[axis] = (float)imu.accADC[axis]-imu.accZero[axis];// * aRes;// - accBias[axis];
 8006434:	192b      	adds	r3, r5, r4
 8006436:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800643a:	f7fa fc4b 	bl	8000cd4 <__aeabi_i2f>
 800643e:	4680      	mov	r8, r0
 8006440:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8006442:	f7fa fc47 	bl	8000cd4 <__aeabi_i2f>
 8006446:	4601      	mov	r1, r0
 8006448:	4640      	mov	r0, r8
 800644a:	f7fa fb8d 	bl	8000b68 <__aeabi_fsub>
        accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / acc_lpf_factor)) + imu.accRaw[axis] * (1.0f / acc_lpf_factor);
 800644e:	4651      	mov	r1, sl
    imu.accRaw[axis] = (float)imu.accADC[axis]-imu.accZero[axis];// * aRes;// - accBias[axis];
 8006450:	f846 0f04 	str.w	r0, [r6, #4]!
 8006454:	4680      	mov	r8, r0
        accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / acc_lpf_factor)) + imu.accRaw[axis] * (1.0f / acc_lpf_factor);
 8006456:	f857 0014 	ldr.w	r0, [r7, r4, lsl #1]
 800645a:	f7fa fc8f 	bl	8000d7c <__aeabi_fmul>
 800645e:	4649      	mov	r1, r9
 8006460:	4683      	mov	fp, r0
 8006462:	4640      	mov	r0, r8
 8006464:	f7fa fc8a 	bl	8000d7c <__aeabi_fmul>
 8006468:	4601      	mov	r1, r0
 800646a:	4658      	mov	r0, fp
 800646c:	f7fa fb7e 	bl	8000b6c <__addsf3>
 8006470:	f847 0014 	str.w	r0, [r7, r4, lsl #1]
 8006474:	3402      	adds	r4, #2
  for(axis=0;axis<3;axis++){
 8006476:	2c06      	cmp	r4, #6
        imu.accSmooth[axis] = accLPF[axis];
 8006478:	60f0      	str	r0, [r6, #12]
  for(axis=0;axis<3;axis++){
 800647a:	d1db      	bne.n	8006434 <ACC_Common+0x70>
    }
  }
}
 800647c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006480:	2000000e 	.word	0x2000000e
 8006484:	200011b8 	.word	0x200011b8
 8006488:	20000738 	.word	0x20000738
 800648c:	2000000c 	.word	0x2000000c
 8006490:	2000105c 	.word	0x2000105c
 8006494:	200011d4 	.word	0x200011d4
 8006498:	20000750 	.word	0x20000750

0800649c <ACC_getADC>:
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 800649c:	2306      	movs	r3, #6
void ACC_getADC(void){
 800649e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 80064a0:	4c11      	ldr	r4, [pc, #68]	; (80064e8 <ACC_getADC+0x4c>)
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	2201      	movs	r2, #1
 80064a6:	4623      	mov	r3, r4
 80064a8:	213b      	movs	r1, #59	; 0x3b
 80064aa:	20d2      	movs	r0, #210	; 0xd2
 80064ac:	f7fe f9a6 	bl	80047fc <I2C_ByteRead>
	y = (int16_t)((rawADC[2]<<8) | rawADC[3])>>3;
 80064b0:	78a3      	ldrb	r3, [r4, #2]
 80064b2:	78e2      	ldrb	r2, [r4, #3]
	z = (int16_t)((rawADC[4]<<8) | rawADC[5])>>3;
 80064b4:	7921      	ldrb	r1, [r4, #4]
	y = (int16_t)((rawADC[2]<<8) | rawADC[3])>>3;
 80064b6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	z = (int16_t)((rawADC[4]<<8) | rawADC[5])>>3;
 80064ba:	7963      	ldrb	r3, [r4, #5]
	x = (int16_t)((rawADC[0]<<8) | rawADC[1])>>3;
 80064bc:	7825      	ldrb	r5, [r4, #0]
	z = (int16_t)((rawADC[4]<<8) | rawADC[5])>>3;
 80064be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	x = (int16_t)((rawADC[0]<<8) | rawADC[1])>>3;
 80064c2:	7861      	ldrb	r1, [r4, #1]
	ACC_ORIENTATION( x, y, z);
 80064c4:	4809      	ldr	r0, [pc, #36]	; (80064ec <ACC_getADC+0x50>)
	x = (int16_t)((rawADC[0]<<8) | rawADC[1])>>3;
 80064c6:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
	y = (int16_t)((rawADC[2]<<8) | rawADC[3])>>3;
 80064ca:	f342 02cc 	sbfx	r2, r2, #3, #13
	z = (int16_t)((rawADC[4]<<8) | rawADC[5])>>3;
 80064ce:	f343 03cc 	sbfx	r3, r3, #3, #13
	x = (int16_t)((rawADC[0]<<8) | rawADC[1])>>3;
 80064d2:	f341 01cc 	sbfx	r1, r1, #3, #13
	ACC_ORIENTATION( x, y, z);
 80064d6:	8281      	strh	r1, [r0, #20]
 80064d8:	82c2      	strh	r2, [r0, #22]
 80064da:	8303      	strh	r3, [r0, #24]
}
 80064dc:	b003      	add	sp, #12
 80064de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ACC_Common();
 80064e2:	f7ff bf6f 	b.w	80063c4 <ACC_Common>
 80064e6:	bf00      	nop
 80064e8:	20001278 	.word	0x20001278
 80064ec:	200011b8 	.word	0x200011b8

080064f0 <MAG_Common>:
	    MAG_Common();
		}
	}
}

void MAG_Common(void){
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static uint8_t flag = 0;
  static int jj = 0;
  static int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
  static int16_t mag_max[3] = {0x8000, 0x8000, 0x8000}, mag_min[3] = {0x7FFF, 0x7FFF, 0x7FFF}, mag_temp[3] = {0, 0, 0};

  if(f.CALIBRATE_MAG==1){
 80064f4:	4b6a      	ldr	r3, [pc, #424]	; (80066a0 <MAG_Common+0x1b0>)
void MAG_Common(void){
 80064f6:	b085      	sub	sp, #20
  if(f.CALIBRATE_MAG==1){
 80064f8:	7c9a      	ldrb	r2, [r3, #18]
 80064fa:	4d6a      	ldr	r5, [pc, #424]	; (80066a4 <MAG_Common+0x1b4>)
 80064fc:	2a01      	cmp	r2, #1
 80064fe:	4b6a      	ldr	r3, [pc, #424]	; (80066a8 <MAG_Common+0x1b8>)
 8006500:	d157      	bne.n	80065b2 <MAG_Common+0xc2>
    flag = 1;
 8006502:	701a      	strb	r2, [r3, #0]
     mag_temp[0] = imu.magADC[0];
 8006504:	4a69      	ldr	r2, [pc, #420]	; (80066ac <MAG_Common+0x1bc>)
 8006506:	88eb      	ldrh	r3, [r5, #6]
     mag_temp[1] = imu.magADC[1];
     mag_temp[2] = imu.magADC[2];
    for (jj = 0; jj < 3; jj++) {
 8006508:	4969      	ldr	r1, [pc, #420]	; (80066b0 <MAG_Common+0x1c0>)
     mag_temp[0] = imu.magADC[0];
 800650a:	8013      	strh	r3, [r2, #0]
     mag_temp[1] = imu.magADC[1];
 800650c:	892b      	ldrh	r3, [r5, #8]
     if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 800650e:	4c69      	ldr	r4, [pc, #420]	; (80066b4 <MAG_Common+0x1c4>)
     mag_temp[1] = imu.magADC[1];
 8006510:	8053      	strh	r3, [r2, #2]
     mag_temp[2] = imu.magADC[2];
 8006512:	896b      	ldrh	r3, [r5, #10]
     if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8006514:	4e68      	ldr	r6, [pc, #416]	; (80066b8 <MAG_Common+0x1c8>)
     mag_temp[2] = imu.magADC[2];
 8006516:	8093      	strh	r3, [r2, #4]
    for (jj = 0; jj < 3; jj++) {
 8006518:	2300      	movs	r3, #0
 800651a:	4618      	mov	r0, r3
 800651c:	600b      	str	r3, [r1, #0]
 800651e:	2b03      	cmp	r3, #3
 8006520:	d136      	bne.n	8006590 <MAG_Common+0xa0>
 8006522:	b100      	cbz	r0, 8006526 <MAG_Common+0x36>
 8006524:	600b      	str	r3, [r1, #0]
     magScale[1] = avg_rad/((float)mag_scale[1]);
     magScale[2] = avg_rad/((float)mag_scale[2]);
  }
  for(axis=0;axis<3;axis++)
  {
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 8006526:	2400      	movs	r4, #0
    if (mag_lpf_factor > 0) {
      magLPF[axis] = magLPF[axis] * (1.0f - (1.0f / mag_lpf_factor)) + imu.magRaw[axis] * (1.0f / mag_lpf_factor);
 8006528:	f04f 587d 	mov.w	r8, #1061158912	; 0x3f400000
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 800652c:	4b63      	ldr	r3, [pc, #396]	; (80066bc <MAG_Common+0x1cc>)
 800652e:	4e64      	ldr	r6, [pc, #400]	; (80066c0 <MAG_Common+0x1d0>)
 8006530:	f8d3 b000 	ldr.w	fp, [r3]
      magLPF[axis] = magLPF[axis] * (1.0f - (1.0f / mag_lpf_factor)) + imu.magRaw[axis] * (1.0f / mag_lpf_factor);
 8006534:	4f63      	ldr	r7, [pc, #396]	; (80066c4 <MAG_Common+0x1d4>)
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 8006536:	192b      	adds	r3, r5, r4
 8006538:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 800653c:	f7fa fbca 	bl	8000cd4 <__aeabi_i2f>
 8006540:	4659      	mov	r1, fp
 8006542:	f7fa fc1b 	bl	8000d7c <__aeabi_fmul>
 8006546:	4b60      	ldr	r3, [pc, #384]	; (80066c8 <MAG_Common+0x1d8>)
 8006548:	f853 1014 	ldr.w	r1, [r3, r4, lsl #1]
 800654c:	f7fa fc16 	bl	8000d7c <__aeabi_fmul>
 8006550:	4b5e      	ldr	r3, [pc, #376]	; (80066cc <MAG_Common+0x1dc>)
 8006552:	f853 1014 	ldr.w	r1, [r3, r4, lsl #1]
 8006556:	f7fa fb07 	bl	8000b68 <__aeabi_fsub>
      magLPF[axis] = magLPF[axis] * (1.0f - (1.0f / mag_lpf_factor)) + imu.magRaw[axis] * (1.0f / mag_lpf_factor);
 800655a:	4641      	mov	r1, r8
    imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 800655c:	6130      	str	r0, [r6, #16]
 800655e:	4682      	mov	sl, r0
      magLPF[axis] = magLPF[axis] * (1.0f - (1.0f / mag_lpf_factor)) + imu.magRaw[axis] * (1.0f / mag_lpf_factor);
 8006560:	f857 0014 	ldr.w	r0, [r7, r4, lsl #1]
 8006564:	f7fa fc0a 	bl	8000d7c <__aeabi_fmul>
 8006568:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800656c:	4681      	mov	r9, r0
 800656e:	4650      	mov	r0, sl
 8006570:	f7fa fc04 	bl	8000d7c <__aeabi_fmul>
 8006574:	4601      	mov	r1, r0
 8006576:	4648      	mov	r0, r9
 8006578:	f7fa faf8 	bl	8000b6c <__addsf3>
 800657c:	f847 0014 	str.w	r0, [r7, r4, lsl #1]
 8006580:	3402      	adds	r4, #2
  for(axis=0;axis<3;axis++)
 8006582:	2c06      	cmp	r4, #6
        imu.magSmooth[axis] = magLPF[axis];
 8006584:	f846 0f04 	str.w	r0, [r6, #4]!
  for(axis=0;axis<3;axis++)
 8006588:	d1d5      	bne.n	8006536 <MAG_Common+0x46>
    }
  }
}
 800658a:	b005      	add	sp, #20
 800658c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8006590:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8006594:	f934 e013 	ldrsh.w	lr, [r4, r3, lsl #1]
 8006598:	005f      	lsls	r7, r3, #1
 800659a:	4586      	cmp	lr, r0
     if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 800659c:	f937 e006 	ldrsh.w	lr, [r7, r6]
     if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 80065a0:	bfb8      	it	lt
 80065a2:	f824 0013 	strhlt.w	r0, [r4, r3, lsl #1]
     if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 80065a6:	4586      	cmp	lr, r0
 80065a8:	bfc8      	it	gt
 80065aa:	53b8      	strhgt	r0, [r7, r6]
 80065ac:	3301      	adds	r3, #1
 80065ae:	2001      	movs	r0, #1
 80065b0:	e7b5      	b.n	800651e <MAG_Common+0x2e>
  }else if(flag == 1){
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	2a01      	cmp	r2, #1
 80065b6:	d1b6      	bne.n	8006526 <MAG_Common+0x36>
    flag = 0;
 80065b8:	2200      	movs	r2, #0
     mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80065ba:	f04f 0802 	mov.w	r8, #2
    flag = 0;
 80065be:	701a      	strb	r2, [r3, #0]
     mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80065c0:	4b3d      	ldr	r3, [pc, #244]	; (80066b8 <MAG_Common+0x1c8>)
 80065c2:	493c      	ldr	r1, [pc, #240]	; (80066b4 <MAG_Common+0x1c4>)
 80065c4:	f9b3 2000 	ldrsh.w	r2, [r3]
     mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 80065c8:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
     mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 80065cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
     mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80065d0:	f9b1 7000 	ldrsh.w	r7, [r1]
     mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 80065d4:	9302      	str	r3, [sp, #8]
     magBias[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 80065d6:	4b39      	ldr	r3, [pc, #228]	; (80066bc <MAG_Common+0x1cc>)
     mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80065d8:	18b8      	adds	r0, r7, r2
     magBias[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 80065da:	f8d3 a000 	ldr.w	sl, [r3]
     mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 80065de:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
     mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 80065e2:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
     magBias[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 80065e6:	4c38      	ldr	r4, [pc, #224]	; (80066c8 <MAG_Common+0x1d8>)
 80065e8:	fb90 f0f8 	sdiv	r0, r0, r8
     mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80065ec:	9203      	str	r2, [sp, #12]
     mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 80065ee:	9101      	str	r1, [sp, #4]
     magBias[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 80065f0:	f7fa fb70 	bl	8000cd4 <__aeabi_i2f>
 80065f4:	4651      	mov	r1, sl
 80065f6:	f7fa fbc1 	bl	8000d7c <__aeabi_fmul>
 80065fa:	6821      	ldr	r1, [r4, #0]
 80065fc:	f7fa fbbe 	bl	8000d7c <__aeabi_fmul>
 8006600:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80066cc <MAG_Common+0x1dc>
 8006604:	f8c9 0000 	str.w	r0, [r9]
     mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8006608:	eb06 000b 	add.w	r0, r6, fp
     magBias[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 800660c:	fb90 f0f8 	sdiv	r0, r0, r8
 8006610:	f7fa fb60 	bl	8000cd4 <__aeabi_i2f>
 8006614:	4651      	mov	r1, sl
 8006616:	f7fa fbb1 	bl	8000d7c <__aeabi_fmul>
 800661a:	6861      	ldr	r1, [r4, #4]
 800661c:	f7fa fbae 	bl	8000d7c <__aeabi_fmul>
     mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8006620:	9b01      	ldr	r3, [sp, #4]
 8006622:	9a02      	ldr	r2, [sp, #8]
     magBias[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8006624:	f8c9 0004 	str.w	r0, [r9, #4]
     mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8006628:	1898      	adds	r0, r3, r2
     magBias[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 800662a:	fb90 f0f8 	sdiv	r0, r0, r8
 800662e:	f7fa fb51 	bl	8000cd4 <__aeabi_i2f>
 8006632:	4651      	mov	r1, sl
 8006634:	f7fa fba2 	bl	8000d7c <__aeabi_fmul>
 8006638:	68a1      	ldr	r1, [r4, #8]
 800663a:	f7fa fb9f 	bl	8000d7c <__aeabi_fmul>
     mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 800663e:	9a03      	ldr	r2, [sp, #12]
     mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8006640:	9b01      	ldr	r3, [sp, #4]
     mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8006642:	1abf      	subs	r7, r7, r2
     mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8006644:	9a02      	ldr	r2, [sp, #8]
     mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8006646:	eba6 060b 	sub.w	r6, r6, fp
     mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 800664a:	1a9c      	subs	r4, r3, r2
     mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 800664c:	fb97 f7f8 	sdiv	r7, r7, r8
     mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8006650:	fb96 f6f8 	sdiv	r6, r6, r8
     mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8006654:	fb94 f8f8 	sdiv	r8, r4, r8
     magBias[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8006658:	f8c9 0008 	str.w	r0, [r9, #8]
     float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 800665c:	19b8      	adds	r0, r7, r6
 800665e:	4440      	add	r0, r8
 8006660:	f7fa fb38 	bl	8000cd4 <__aeabi_i2f>
     avg_rad /= 3.0;
 8006664:	491a      	ldr	r1, [pc, #104]	; (80066d0 <MAG_Common+0x1e0>)
 8006666:	f7fa fc3d 	bl	8000ee4 <__aeabi_fdiv>
 800666a:	4681      	mov	r9, r0
     magScale[0] = avg_rad/((float)mag_scale[0]);
 800666c:	4638      	mov	r0, r7
 800666e:	f7fa fb31 	bl	8000cd4 <__aeabi_i2f>
 8006672:	4601      	mov	r1, r0
 8006674:	4648      	mov	r0, r9
 8006676:	f7fa fc35 	bl	8000ee4 <__aeabi_fdiv>
 800667a:	4c16      	ldr	r4, [pc, #88]	; (80066d4 <MAG_Common+0x1e4>)
 800667c:	6020      	str	r0, [r4, #0]
     magScale[1] = avg_rad/((float)mag_scale[1]);
 800667e:	4630      	mov	r0, r6
 8006680:	f7fa fb28 	bl	8000cd4 <__aeabi_i2f>
 8006684:	4601      	mov	r1, r0
 8006686:	4648      	mov	r0, r9
 8006688:	f7fa fc2c 	bl	8000ee4 <__aeabi_fdiv>
 800668c:	6060      	str	r0, [r4, #4]
     magScale[2] = avg_rad/((float)mag_scale[2]);
 800668e:	4640      	mov	r0, r8
 8006690:	f7fa fb20 	bl	8000cd4 <__aeabi_i2f>
 8006694:	4601      	mov	r1, r0
 8006696:	4648      	mov	r0, r9
 8006698:	f7fa fc24 	bl	8000ee4 <__aeabi_fdiv>
 800669c:	60a0      	str	r0, [r4, #8]
 800669e:	e742      	b.n	8006526 <MAG_Common+0x36>
 80066a0:	2000105c 	.word	0x2000105c
 80066a4:	200011b8 	.word	0x200011b8
 80066a8:	20000838 	.word	0x20000838
 80066ac:	20000870 	.word	0x20000870
 80066b0:	20000848 	.word	0x20000848
 80066b4:	20000012 	.word	0x20000012
 80066b8:	20000018 	.word	0x20000018
 80066bc:	20000c40 	.word	0x20000c40
 80066c0:	200011f8 	.word	0x200011f8
 80066c4:	20000864 	.word	0x20000864
 80066c8:	20000858 	.word	0x20000858
 80066cc:	2000084c 	.word	0x2000084c
 80066d0:	40400000 	.word	0x40400000
 80066d4:	2000126c 	.word	0x2000126c

080066d8 <Mag_getADC>:
void Mag_getADC(void){
 80066d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x02, 1, rawADC, 1);
 80066da:	2501      	movs	r5, #1
 80066dc:	4c16      	ldr	r4, [pc, #88]	; (8006738 <Mag_getADC+0x60>)
 80066de:	462a      	mov	r2, r5
 80066e0:	4623      	mov	r3, r4
 80066e2:	9500      	str	r5, [sp, #0]
 80066e4:	2102      	movs	r1, #2
 80066e6:	2018      	movs	r0, #24
 80066e8:	f7fe f888 	bl	80047fc <I2C_ByteRead>
	if( rawADC[0] & 0x01){
 80066ec:	7823      	ldrb	r3, [r4, #0]
 80066ee:	07da      	lsls	r2, r3, #31
 80066f0:	d520      	bpl.n	8006734 <Mag_getADC+0x5c>
	  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x03, 1, rawADC, 7);
 80066f2:	2307      	movs	r3, #7
 80066f4:	462a      	mov	r2, r5
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	2103      	movs	r1, #3
 80066fa:	4623      	mov	r3, r4
 80066fc:	2018      	movs	r0, #24
 80066fe:	f7fe f87d 	bl	80047fc <I2C_ByteRead>
	  if(!(c & 0x08)){
 8006702:	79a3      	ldrb	r3, [r4, #6]
 8006704:	071b      	lsls	r3, r3, #28
 8006706:	d415      	bmi.n	8006734 <Mag_getADC+0x5c>
	    x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 8006708:	7863      	ldrb	r3, [r4, #1]
 800670a:	7821      	ldrb	r1, [r4, #0]
	    z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 800670c:	7962      	ldrb	r2, [r4, #5]
	    x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 800670e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	    z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8006712:	7923      	ldrb	r3, [r4, #4]
	    y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 8006714:	78e5      	ldrb	r5, [r4, #3]
 8006716:	78a0      	ldrb	r0, [r4, #2]
	    z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8006718:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	    MAG_ORIENTATION( x, y, z);
 800671c:	4a07      	ldr	r2, [pc, #28]	; (800673c <Mag_getADC+0x64>)
	    y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 800671e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	    MAG_ORIENTATION( x, y, z);
 8006722:	425b      	negs	r3, r3
 8006724:	80d0      	strh	r0, [r2, #6]
 8006726:	8111      	strh	r1, [r2, #8]
 8006728:	8153      	strh	r3, [r2, #10]
}
 800672a:	b003      	add	sp, #12
 800672c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	    MAG_Common();
 8006730:	f7ff bede 	b.w	80064f0 <MAG_Common>
}
 8006734:	b003      	add	sp, #12
 8006736:	bd30      	pop	{r4, r5, pc}
 8006738:	20001278 	.word	0x20001278
 800673c:	200011b8 	.word	0x200011b8

08006740 <Calibrate_gyro>:
{
 8006740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (cal_int = 0; cal_int < 2000; cal_int ++){
 8006744:	2500      	movs	r5, #0
      RGB_G_TOGGLE;                                         //Change the led status to indicate calibration.
 8006746:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80067f8 <Calibrate_gyro+0xb8>
      sprintf(Buf, ".");
 800674a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80067fc <Calibrate_gyro+0xbc>
 800674e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8006800 <Calibrate_gyro+0xc0>
    if (cal_int % 125 == 0) {
 8006752:	227d      	movs	r2, #125	; 0x7d
 8006754:	fb95 f3f2 	sdiv	r3, r5, r2
 8006758:	fb02 5313 	mls	r3, r2, r3, r5
 800675c:	b993      	cbnz	r3, 8006784 <Calibrate_gyro+0x44>
      RGB_G_TOGGLE;                                         //Change the led status to indicate calibration.
 800675e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006762:	4648      	mov	r0, r9
 8006764:	f7fb fc1b 	bl	8001f9e <HAL_GPIO_TogglePin>
      sprintf(Buf, ".");
 8006768:	4651      	mov	r1, sl
 800676a:	4640      	mov	r0, r8
 800676c:	f003 f980 	bl	8009a70 <strcpy>
      HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8006770:	4640      	mov	r0, r8
 8006772:	f7f9 fced 	bl	8000150 <strlen>
 8006776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800677a:	b282      	uxth	r2, r0
 800677c:	4641      	mov	r1, r8
 800677e:	481b      	ldr	r0, [pc, #108]	; (80067ec <Calibrate_gyro+0xac>)
 8006780:	f7fd fafa 	bl	8003d78 <HAL_UART_Transmit>
		Gyro_getADC();
 8006784:	f7ff fdfa 	bl	800637c <Gyro_getADC>
		Mag_getADC();
 8006788:	2600      	movs	r6, #0
 800678a:	f7ff ffa5 	bl	80066d8 <Mag_getADC>
 800678e:	4f18      	ldr	r7, [pc, #96]	; (80067f0 <Calibrate_gyro+0xb0>)
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 8006790:	f1a7 046c 	sub.w	r4, r7, #108	; 0x6c
 8006794:	1933      	adds	r3, r6, r4
 8006796:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800679a:	f7fa fa9b 	bl	8000cd4 <__aeabi_i2f>
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	f7fa f9e4 	bl	8000b6c <__addsf3>
 80067a4:	3602      	adds	r6, #2
		for(axis=0; axis<3; axis++)
 80067a6:	2e06      	cmp	r6, #6
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 80067a8:	f847 0f04 	str.w	r0, [r7, #4]!
		for(axis=0; axis<3; axis++)
 80067ac:	d1f2      	bne.n	8006794 <Calibrate_gyro+0x54>
	for (cal_int = 0; cal_int < 2000; cal_int ++){
 80067ae:	3501      	adds	r5, #1
 80067b0:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80067b4:	d1cd      	bne.n	8006752 <Calibrate_gyro+0x12>
	PrintData(2);
 80067b6:	2002      	movs	r0, #2
 80067b8:	f001 fa40 	bl	8007c3c <PrintData>
		imu.gyro_cal[axis] /= 2000.0f;
 80067bc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80067be:	490d      	ldr	r1, [pc, #52]	; (80067f4 <Calibrate_gyro+0xb4>)
 80067c0:	f7fa fb90 	bl	8000ee4 <__aeabi_fdiv>
 80067c4:	490b      	ldr	r1, [pc, #44]	; (80067f4 <Calibrate_gyro+0xb4>)
 80067c6:	6720      	str	r0, [r4, #112]	; 0x70
 80067c8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80067ca:	f7fa fb8b 	bl	8000ee4 <__aeabi_fdiv>
 80067ce:	4909      	ldr	r1, [pc, #36]	; (80067f4 <Calibrate_gyro+0xb4>)
 80067d0:	6760      	str	r0, [r4, #116]	; 0x74
 80067d2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80067d4:	f7fa fb86 	bl	8000ee4 <__aeabi_fdiv>
 80067d8:	67a0      	str	r0, [r4, #120]	; 0x78
	HAL_Delay(100);
 80067da:	2064      	movs	r0, #100	; 0x64
 80067dc:	f7fa fec0 	bl	8001560 <HAL_Delay>
}
 80067e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PrintData(2);
 80067e4:	2002      	movs	r0, #2
 80067e6:	f001 ba29 	b.w	8007c3c <PrintData>
 80067ea:	bf00      	nop
 80067ec:	20001524 	.word	0x20001524
 80067f0:	20001224 	.word	0x20001224
 80067f4:	44fa0000 	.word	0x44fa0000
 80067f8:	40010c00 	.word	0x40010c00
 80067fc:	08010dc4 	.word	0x08010dc4
 8006800:	20001284 	.word	0x20001284
 8006804:	00000000 	.word	0x00000000

08006808 <CAL_Heading>:

void CAL_Heading(void){
 8006808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  static uint8_t ind = 0;
  static float heading[HEADING_SMOOTH], h_sum;

  float cosineRoll = cosf(imu.AHRS[ROLL] * 0.0174533f);
 800680c:	4c34      	ldr	r4, [pc, #208]	; (80068e0 <CAL_Heading+0xd8>)
 800680e:	4935      	ldr	r1, [pc, #212]	; (80068e4 <CAL_Heading+0xdc>)
 8006810:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8006814:	f7fa fab2 	bl	8000d7c <__aeabi_fmul>
 8006818:	4605      	mov	r5, r0
 800681a:	f007 fa5f 	bl	800dcdc <cosf>
 800681e:	4607      	mov	r7, r0
  float sineRoll = sinf(imu.AHRS[ROLL] * 0.0174533f);
 8006820:	4628      	mov	r0, r5
 8006822:	f007 fac7 	bl	800ddb4 <sinf>
  float cosinePitch = cosf(imu.AHRS[PITCH] * 0.0174533f);
 8006826:	492f      	ldr	r1, [pc, #188]	; (80068e4 <CAL_Heading+0xdc>)
  float sineRoll = sinf(imu.AHRS[ROLL] * 0.0174533f);
 8006828:	4605      	mov	r5, r0
  float cosinePitch = cosf(imu.AHRS[PITCH] * 0.0174533f);
 800682a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800682e:	f7fa faa5 	bl	8000d7c <__aeabi_fmul>
 8006832:	4606      	mov	r6, r0
 8006834:	f007 fa52 	bl	800dcdc <cosf>
 8006838:	4682      	mov	sl, r0
  float sinePitch = sinf(imu.AHRS[PITCH] * 0.0174533f);
 800683a:	4630      	mov	r0, r6
 800683c:	f007 faba 	bl	800ddb4 <sinf>
  float Xh = imu.magSmooth[ROLL] * cosinePitch + imu.magSmooth[PITCH] * sineRoll * sinePitch + imu.magSmooth[YAW] * sinePitch * cosineRoll;
 8006840:	6c61      	ldr	r1, [r4, #68]	; 0x44
  float sinePitch = sinf(imu.AHRS[PITCH] * 0.0174533f);
 8006842:	4681      	mov	r9, r0
  float Xh = imu.magSmooth[ROLL] * cosinePitch + imu.magSmooth[PITCH] * sineRoll * sinePitch + imu.magSmooth[YAW] * sinePitch * cosineRoll;
 8006844:	4650      	mov	r0, sl
 8006846:	f7fa fa99 	bl	8000d7c <__aeabi_fmul>
 800684a:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
 800684e:	4682      	mov	sl, r0
 8006850:	4641      	mov	r1, r8
 8006852:	4628      	mov	r0, r5
 8006854:	f7fa fa92 	bl	8000d7c <__aeabi_fmul>
 8006858:	4649      	mov	r1, r9
 800685a:	f7fa fa8f 	bl	8000d7c <__aeabi_fmul>
 800685e:	4601      	mov	r1, r0
 8006860:	4650      	mov	r0, sl
 8006862:	f7fa f983 	bl	8000b6c <__addsf3>
 8006866:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8006868:	4682      	mov	sl, r0
 800686a:	4631      	mov	r1, r6
 800686c:	4648      	mov	r0, r9
 800686e:	f7fa fa85 	bl	8000d7c <__aeabi_fmul>
 8006872:	4639      	mov	r1, r7
 8006874:	f7fa fa82 	bl	8000d7c <__aeabi_fmul>
 8006878:	4601      	mov	r1, r0
 800687a:	4650      	mov	r0, sl
 800687c:	f7fa f976 	bl	8000b6c <__addsf3>
  float Yh = imu.magSmooth[PITCH] * cosineRoll - imu.magSmooth[YAW] * sineRoll;
 8006880:	4641      	mov	r1, r8
  float Xh = imu.magSmooth[ROLL] * cosinePitch + imu.magSmooth[PITCH] * sineRoll * sinePitch + imu.magSmooth[YAW] * sinePitch * cosineRoll;
 8006882:	4681      	mov	r9, r0
  float Yh = imu.magSmooth[PITCH] * cosineRoll - imu.magSmooth[YAW] * sineRoll;
 8006884:	4638      	mov	r0, r7
 8006886:	f7fa fa79 	bl	8000d7c <__aeabi_fmul>
 800688a:	4631      	mov	r1, r6
 800688c:	4607      	mov	r7, r0
 800688e:	4628      	mov	r0, r5
 8006890:	f7fa fa74 	bl	8000d7c <__aeabi_fmul>
 8006894:	4601      	mov	r1, r0
 8006896:	4638      	mov	r0, r7
 8006898:	f7fa f966 	bl	8000b68 <__aeabi_fsub>
  float hd = (atan2f(Yh, Xh) * 180.0f / M_PI);
 800689c:	4649      	mov	r1, r9
 800689e:	f007 fccd 	bl	800e23c <atan2f>
 80068a2:	4911      	ldr	r1, [pc, #68]	; (80068e8 <CAL_Heading+0xe0>)
 80068a4:	f7fa fa6a 	bl	8000d7c <__aeabi_fmul>
 80068a8:	f7f9 fdbe 	bl	8000428 <__aeabi_f2d>
 80068ac:	a30a      	add	r3, pc, #40	; (adr r3, 80068d8 <CAL_Heading+0xd0>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f7f9 ff37 	bl	8000724 <__aeabi_ddiv>
 80068b6:	f7fa f903 	bl	8000ac0 <__aeabi_d2f>
  int32_t head = lrintf(hd);
 80068ba:	f007 fa43 	bl	800dd44 <lrintf>
//  h_sum -= heading[ind];
//  heading[ind++] = imu.actual_compass_heading;
//  ind %= HEADING_SMOOTH;
//  imu.actual_compass_heading = h_sum/HEADING_SMOOTH;

  att.mag_heading = (int16_t) imu.actual_compass_heading;
 80068be:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <CAL_Heading+0xe4>)
  if (head < 0)
 80068c0:	2800      	cmp	r0, #0
      head += 360;
 80068c2:	bfb8      	it	lt
 80068c4:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  imu.actual_compass_heading = head;
 80068c8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
  att.mag_heading = (int16_t) imu.actual_compass_heading;
 80068cc:	80d8      	strh	r0, [r3, #6]
 80068ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d2:	bf00      	nop
 80068d4:	f3af 8000 	nop.w
 80068d8:	54442d18 	.word	0x54442d18
 80068dc:	400921fb 	.word	0x400921fb
 80068e0:	200011b8 	.word	0x200011b8
 80068e4:	3c8efa39 	.word	0x3c8efa39
 80068e8:	43340000 	.word	0x43340000
 80068ec:	20000ce0 	.word	0x20000ce0

080068f0 <Temp_getADC>:
}

void Temp_getADC(void){
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 80068f0:	2302      	movs	r3, #2
void Temp_getADC(void){
 80068f2:	b513      	push	{r0, r1, r4, lr}
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 80068f4:	4c0c      	ldr	r4, [pc, #48]	; (8006928 <Temp_getADC+0x38>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	2141      	movs	r1, #65	; 0x41
 80068fc:	4623      	mov	r3, r4
 80068fe:	20d2      	movs	r0, #210	; 0xd2
 8006900:	f7fd ff7c 	bl	80047fc <I2C_ByteRead>
	/* Get acceleration */
	imu.rawTemp = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8006904:	7823      	ldrb	r3, [r4, #0]
 8006906:	7860      	ldrb	r0, [r4, #1]
 8006908:	4c08      	ldr	r4, [pc, #32]	; (800692c <Temp_getADC+0x3c>)
 800690a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800690e:	b200      	sxth	r0, r0
 8006910:	81a0      	strh	r0, [r4, #12]
	imu.Temp = ((float)imu.rawTemp / 337.87f) + 21.0f;
 8006912:	f7fa f9df 	bl	8000cd4 <__aeabi_i2f>
 8006916:	4906      	ldr	r1, [pc, #24]	; (8006930 <Temp_getADC+0x40>)
 8006918:	f7fa fae4 	bl	8000ee4 <__aeabi_fdiv>
 800691c:	4905      	ldr	r1, [pc, #20]	; (8006934 <Temp_getADC+0x44>)
 800691e:	f7fa f925 	bl	8000b6c <__addsf3>
 8006922:	6620      	str	r0, [r4, #96]	; 0x60
}
 8006924:	b002      	add	sp, #8
 8006926:	bd10      	pop	{r4, pc}
 8006928:	20001278 	.word	0x20001278
 800692c:	200011b8 	.word	0x200011b8
 8006930:	43a8ef5c 	.word	0x43a8ef5c
 8006934:	41a80000 	.word	0x41a80000

08006938 <calibrateMPU9250>:
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

// reset device, reset all registers, clear gyro and accelerometer bias registers
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8006938:	2380      	movs	r3, #128	; 0x80
void calibrateMPU9250(float * dest1, float * dest2){
 800693a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_Delay(100); // for stability
// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 800693e:	2601      	movs	r6, #1
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 8006940:	2400      	movs	r4, #0
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 8006942:	f04f 0b0c 	mov.w	fp, #12
void calibrateMPU9250(float * dest1, float * dest2){
 8006946:	b087      	sub	sp, #28
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8006948:	2207      	movs	r2, #7
 800694a:	9300      	str	r3, [sp, #0]
void calibrateMPU9250(float * dest1, float * dest2){
 800694c:	4682      	mov	sl, r0
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 800694e:	2308      	movs	r3, #8
 8006950:	20d2      	movs	r0, #210	; 0xd2
void calibrateMPU9250(float * dest1, float * dest2){
 8006952:	4689      	mov	r9, r1
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8006954:	216b      	movs	r1, #107	; 0x6b
 8006956:	f7fd feeb 	bl	8004730 <I2C_ByteWrite>
  HAL_Delay(100); // for stability
 800695a:	2064      	movs	r0, #100	; 0x64
 800695c:	f7fa fe00 	bl	8001560 <HAL_Delay>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 8006960:	9600      	str	r6, [sp, #0]
 8006962:	2308      	movs	r3, #8
 8006964:	2207      	movs	r2, #7
 8006966:	216b      	movs	r1, #107	; 0x6b
 8006968:	20d2      	movs	r0, #210	; 0xd2
 800696a:	f7fd fee1 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 800696e:	2308      	movs	r3, #8
 8006970:	2207      	movs	r2, #7
 8006972:	216c      	movs	r1, #108	; 0x6c
 8006974:	20d2      	movs	r0, #210	; 0xd2
 8006976:	9400      	str	r4, [sp, #0]
 8006978:	f7fd feda 	bl	8004730 <I2C_ByteWrite>
  HAL_Delay(200); // for stability
 800697c:	20c8      	movs	r0, #200	; 0xc8
 800697e:	f7fa fdef 	bl	8001560 <HAL_Delay>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
 8006982:	2308      	movs	r3, #8
 8006984:	2207      	movs	r2, #7
 8006986:	2138      	movs	r1, #56	; 0x38
 8006988:	20d2      	movs	r0, #210	; 0xd2
 800698a:	9400      	str	r4, [sp, #0]
 800698c:	f7fd fed0 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
 8006990:	2308      	movs	r3, #8
 8006992:	2207      	movs	r2, #7
 8006994:	2123      	movs	r1, #35	; 0x23
 8006996:	20d2      	movs	r0, #210	; 0xd2
 8006998:	9400      	str	r4, [sp, #0]
 800699a:	f7fd fec9 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
 800699e:	2308      	movs	r3, #8
 80069a0:	2207      	movs	r2, #7
 80069a2:	216b      	movs	r1, #107	; 0x6b
 80069a4:	20d2      	movs	r0, #210	; 0xd2
 80069a6:	9400      	str	r4, [sp, #0]
 80069a8:	f7fd fec2 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
 80069ac:	2308      	movs	r3, #8
 80069ae:	2207      	movs	r2, #7
 80069b0:	2124      	movs	r1, #36	; 0x24
 80069b2:	20d2      	movs	r0, #210	; 0xd2
 80069b4:	9400      	str	r4, [sp, #0]
 80069b6:	f7fd febb 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
 80069ba:	2308      	movs	r3, #8
 80069bc:	2207      	movs	r2, #7
 80069be:	216a      	movs	r1, #106	; 0x6a
 80069c0:	20d2      	movs	r0, #210	; 0xd2
 80069c2:	9400      	str	r4, [sp, #0]
 80069c4:	f7fd feb4 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 80069c8:	2308      	movs	r3, #8
 80069ca:	2207      	movs	r2, #7
 80069cc:	216a      	movs	r1, #106	; 0x6a
 80069ce:	20d2      	movs	r0, #210	; 0xd2
 80069d0:	f8cd b000 	str.w	fp, [sp]
 80069d4:	f7fd feac 	bl	8004730 <I2C_ByteWrite>
  HAL_Delay(15); // for stability
 80069d8:	200f      	movs	r0, #15
 80069da:	f7fa fdc1 	bl	8001560 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation.

  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x01); // Set low-pass filter to 188 Hz
 80069de:	9600      	str	r6, [sp, #0]
 80069e0:	2308      	movs	r3, #8
 80069e2:	2207      	movs	r2, #7
 80069e4:	211a      	movs	r1, #26
 80069e6:	20d2      	movs	r0, #210	; 0xd2
 80069e8:	f7fd fea2 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set sample rate to 1 kHz
 80069ec:	2308      	movs	r3, #8
 80069ee:	2207      	movs	r2, #7
 80069f0:	2119      	movs	r1, #25
 80069f2:	20d2      	movs	r0, #210	; 0xd2
 80069f4:	9400      	str	r4, [sp, #0]
 80069f6:	f7fd fe9b 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80069fa:	2308      	movs	r3, #8
 80069fc:	2207      	movs	r2, #7
 80069fe:	211b      	movs	r1, #27
 8006a00:	20d2      	movs	r0, #210	; 0xd2
 8006a02:	9400      	str	r4, [sp, #0]
 8006a04:	f7fd fe94 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8006a08:	2308      	movs	r3, #8
 8006a0a:	2207      	movs	r2, #7
 8006a0c:	211c      	movs	r1, #28
 8006a0e:	20d2      	movs	r0, #210	; 0xd2
 8006a10:	9400      	str	r4, [sp, #0]
 8006a12:	f7fd fe8d 	bl	8004730 <I2C_ByteWrite>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x40); // Enable FIFO
 8006a16:	2340      	movs	r3, #64	; 0x40
 8006a18:	2207      	movs	r2, #7
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	216a      	movs	r1, #106	; 0x6a
 8006a1e:	2308      	movs	r3, #8
 8006a20:	20d2      	movs	r0, #210	; 0xd2
 8006a22:	f7fd fe85 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8006a26:	2378      	movs	r3, #120	; 0x78
 8006a28:	2207      	movs	r2, #7
 8006a2a:	2123      	movs	r1, #35	; 0x23
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	20d2      	movs	r0, #210	; 0xd2
 8006a30:	2308      	movs	r3, #8
 8006a32:	f7fd fe7d 	bl	8004730 <I2C_ByteWrite>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8006a36:	2028      	movs	r0, #40	; 0x28
 8006a38:	f7fa fd92 	bl	8001560 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable gyro and accelerometer sensors for FIFO
 8006a3c:	2308      	movs	r3, #8
 8006a3e:	2207      	movs	r2, #7
 8006a40:	2123      	movs	r1, #35	; 0x23
 8006a42:	20d2      	movs	r0, #210	; 0xd2
 8006a44:	9400      	str	r4, [sp, #0]
 8006a46:	f7fd fe73 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_COUNTH, 1, rawADC, 2);// read FIFO sample count
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	4d56      	ldr	r5, [pc, #344]	; (8006ba8 <calibrateMPU9250+0x270>)
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	4632      	mov	r2, r6
 8006a52:	462b      	mov	r3, r5
 8006a54:	2172      	movs	r1, #114	; 0x72
 8006a56:	20d2      	movs	r0, #210	; 0xd2
 8006a58:	f7fd fed0 	bl	80047fc <I2C_ByteRead>
  fifo_count = ((uint16_t)rawADC[0] << 8) | rawADC[1];
 8006a5c:	782b      	ldrb	r3, [r5, #0]
 8006a5e:	786e      	ldrb	r6, [r5, #1]
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8006a60:	4627      	mov	r7, r4
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8006a62:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8006a66:	fbb6 f6fb 	udiv	r6, r6, fp
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8006a6a:	46a0      	mov	r8, r4
 8006a6c:	9402      	str	r4, [sp, #8]
 8006a6e:	9405      	str	r4, [sp, #20]
 8006a70:	9404      	str	r4, [sp, #16]
 8006a72:	9403      	str	r4, [sp, #12]

  for (ii = 0; ii < packet_count; ii++) {
 8006a74:	b2a3      	uxth	r3, r4
 8006a76:	429e      	cmp	r6, r3
 8006a78:	d860      	bhi.n	8006b3c <calibrateMPU9250+0x204>
    gyro_bias[2]  += (int32_t) gyro_temp[2];

}
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
    accel_bias[1] /= (int32_t) packet_count;
    accel_bias[2] /= (int32_t) packet_count;
 8006a7a:	9b02      	ldr	r3, [sp, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 8006a7c:	9a03      	ldr	r2, [sp, #12]
    accel_bias[2] /= (int32_t) packet_count;
 8006a7e:	fb93 f3f6 	sdiv	r3, r3, r6
    gyro_bias[0]  /= (int32_t) packet_count;
 8006a82:	fb92 f0f6 	sdiv	r0, r2, r6
    gyro_bias[1]  /= (int32_t) packet_count;
 8006a86:	9a04      	ldr	r2, [sp, #16]
    gyro_bias[2]  /= (int32_t) packet_count;

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8006a88:	2b00      	cmp	r3, #0
    gyro_bias[1]  /= (int32_t) packet_count;
 8006a8a:	fb92 f5f6 	sdiv	r5, r2, r6
    gyro_bias[2]  /= (int32_t) packet_count;
 8006a8e:	9a05      	ldr	r2, [sp, #20]
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8006a90:	bfcc      	ite	gt
 8006a92:	f5a3 4480 	subgt.w	r4, r3, #16384	; 0x4000
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8006a96:	f503 4480 	addle.w	r4, r3, #16384	; 0x4000
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8006a9a:	fb98 f8f6 	sdiv	r8, r8, r6
    accel_bias[1] /= (int32_t) packet_count;
 8006a9e:	fb97 f7f6 	sdiv	r7, r7, r6
    gyro_bias[2]  /= (int32_t) packet_count;
 8006aa2:	fb92 f6f6 	sdiv	r6, r2, r6
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YG_OFFS_USRL, 7, 8, data[3]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRH, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRL, 7, 8, data[5]);
*/
	
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8006aa6:	f7fa f915 	bl	8000cd4 <__aeabi_i2f>
 8006aaa:	4940      	ldr	r1, [pc, #256]	; (8006bac <calibrateMPU9250+0x274>)
 8006aac:	f7fa fa1a 	bl	8000ee4 <__aeabi_fdiv>
 8006ab0:	f8ca 0000 	str.w	r0, [sl]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f7fa f90d 	bl	8000cd4 <__aeabi_i2f>
 8006aba:	493c      	ldr	r1, [pc, #240]	; (8006bac <calibrateMPU9250+0x274>)
 8006abc:	f7fa fa12 	bl	8000ee4 <__aeabi_fdiv>
 8006ac0:	f8ca 0004 	str.w	r0, [sl, #4]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7fa f905 	bl	8000cd4 <__aeabi_i2f>
 8006aca:	4938      	ldr	r1, [pc, #224]	; (8006bac <calibrateMPU9250+0x274>)
 8006acc:	f7fa fa0a 	bl	8000ee4 <__aeabi_fdiv>
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 8006ad0:	2502      	movs	r5, #2
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8006ad2:	f8ca 0008 	str.w	r0, [sl, #8]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 8006ad6:	9500      	str	r5, [sp, #0]
 8006ad8:	4b33      	ldr	r3, [pc, #204]	; (8006ba8 <calibrateMPU9250+0x270>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	2177      	movs	r1, #119	; 0x77
 8006ade:	20d2      	movs	r0, #210	; 0xd2
 8006ae0:	f7fd fe8c 	bl	80047fc <I2C_ByteRead>
  accel_bias_reg[0] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YA_OFFSET_H, 1, rawADC, 2);
 8006ae4:	9500      	str	r5, [sp, #0]
 8006ae6:	4b30      	ldr	r3, [pc, #192]	; (8006ba8 <calibrateMPU9250+0x270>)
 8006ae8:	2201      	movs	r2, #1
 8006aea:	217a      	movs	r1, #122	; 0x7a
 8006aec:	20d2      	movs	r0, #210	; 0xd2
 8006aee:	f7fd fe85 	bl	80047fc <I2C_ByteRead>
  accel_bias_reg[1] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 1, rawADC, 2);
 8006af2:	4b2d      	ldr	r3, [pc, #180]	; (8006ba8 <calibrateMPU9250+0x270>)
 8006af4:	2201      	movs	r2, #1
 8006af6:	217d      	movs	r1, #125	; 0x7d
 8006af8:	9500      	str	r5, [sp, #0]
 8006afa:	20d2      	movs	r0, #210	; 0xd2
 8006afc:	f7fd fe7e 	bl	80047fc <I2C_ByteRead>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_L, 7, 8, data[5]);*/


// Output scaled accelerometer biases for manual subtraction in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8006b00:	4640      	mov	r0, r8
 8006b02:	f7fa f8e7 	bl	8000cd4 <__aeabi_i2f>
 8006b06:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8006b0a:	f7fa f937 	bl	8000d7c <__aeabi_fmul>
 8006b0e:	f8c9 0000 	str.w	r0, [r9]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8006b12:	4638      	mov	r0, r7
 8006b14:	f7fa f8de 	bl	8000cd4 <__aeabi_i2f>
 8006b18:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8006b1c:	f7fa f92e 	bl	8000d7c <__aeabi_fmul>
 8006b20:	f8c9 0004 	str.w	r0, [r9, #4]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8006b24:	4620      	mov	r0, r4
 8006b26:	f7fa f8d5 	bl	8000cd4 <__aeabi_i2f>
 8006b2a:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8006b2e:	f7fa f925 	bl	8000d7c <__aeabi_fmul>
 8006b32:	f8c9 0008 	str.w	r0, [r9, #8]
}
 8006b36:	b007      	add	sp, #28
 8006b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_FIFO_R_W, 1, rawADC, 12);// read data for averaging
 8006b3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ba8 <calibrateMPU9250+0x270>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f8cd b000 	str.w	fp, [sp]
 8006b44:	2174      	movs	r1, #116	; 0x74
 8006b46:	20d2      	movs	r0, #210	; 0xd2
 8006b48:	f7fd fe58 	bl	80047fc <I2C_ByteRead>
    accel_temp[0] = (int16_t) (((int16_t)rawADC[0] << 8) | rawADC[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8006b4c:	782a      	ldrb	r2, [r5, #0]
 8006b4e:	786b      	ldrb	r3, [r5, #1]
 8006b50:	3401      	adds	r4, #1
 8006b52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8006b56:	b21b      	sxth	r3, r3
    accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 8006b58:	78aa      	ldrb	r2, [r5, #2]
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8006b5a:	4498      	add	r8, r3
    accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 8006b5c:	78eb      	ldrb	r3, [r5, #3]
 8006b5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[1] += (int32_t) accel_temp[1];
 8006b62:	b21b      	sxth	r3, r3
    accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 8006b64:	792a      	ldrb	r2, [r5, #4]
    accel_bias[1] += (int32_t) accel_temp[1];
 8006b66:	441f      	add	r7, r3
    accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 8006b68:	796b      	ldrb	r3, [r5, #5]
 8006b6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    accel_bias[2] += (int32_t) accel_temp[2];
 8006b6e:	9a02      	ldr	r2, [sp, #8]
 8006b70:	b21b      	sxth	r3, r3
 8006b72:	441a      	add	r2, r3
 8006b74:	9202      	str	r2, [sp, #8]
    gyro_temp[0]  = (int16_t) (((int16_t)rawADC[6] << 8) | rawADC[7]  ) ;
 8006b76:	79eb      	ldrb	r3, [r5, #7]
 8006b78:	79aa      	ldrb	r2, [r5, #6]
 8006b7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8006b7e:	9a03      	ldr	r2, [sp, #12]
 8006b80:	b21b      	sxth	r3, r3
 8006b82:	441a      	add	r2, r3
 8006b84:	9203      	str	r2, [sp, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)rawADC[8] << 8) | rawADC[9]  ) ;
 8006b86:	7a6b      	ldrb	r3, [r5, #9]
 8006b88:	7a2a      	ldrb	r2, [r5, #8]
 8006b8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8006b8e:	9a04      	ldr	r2, [sp, #16]
 8006b90:	b21b      	sxth	r3, r3
 8006b92:	441a      	add	r2, r3
 8006b94:	9204      	str	r2, [sp, #16]
    gyro_temp[2]  = (int16_t) (((int16_t)rawADC[10] << 8) | rawADC[11]) ;
 8006b96:	7aeb      	ldrb	r3, [r5, #11]
 8006b98:	7aaa      	ldrb	r2, [r5, #10]
 8006b9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8006b9e:	9a05      	ldr	r2, [sp, #20]
 8006ba0:	b21b      	sxth	r3, r3
 8006ba2:	441a      	add	r2, r3
 8006ba4:	9205      	str	r2, [sp, #20]
 8006ba6:	e765      	b.n	8006a74 <calibrateMPU9250+0x13c>
 8006ba8:	20001278 	.word	0x20001278
 8006bac:	43030000 	.word	0x43030000

08006bb0 <initAK8963>:
void initAK8963(float * destination){
 8006bb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// First extract the factory calibration for each magnetometer axis
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8006bb2:	2600      	movs	r6, #0
void initAK8963(float * destination){
 8006bb4:	4605      	mov	r5, r0
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8006bb6:	2308      	movs	r3, #8
 8006bb8:	2207      	movs	r2, #7
 8006bba:	210a      	movs	r1, #10
 8006bbc:	9600      	str	r6, [sp, #0]
 8006bbe:	2018      	movs	r0, #24
 8006bc0:	f7fd fdb6 	bl	8004730 <I2C_ByteWrite>
	  HAL_Delay(10);
 8006bc4:	200a      	movs	r0, #10
 8006bc6:	f7fa fccb 	bl	8001560 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x0F);// Enter Fuse ROM access mode
 8006bca:	230f      	movs	r3, #15
 8006bcc:	2207      	movs	r2, #7
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	210a      	movs	r1, #10
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	2018      	movs	r0, #24
 8006bd6:	f7fd fdab 	bl	8004730 <I2C_ByteWrite>
	  HAL_Delay(10);
 8006bda:	200a      	movs	r0, #10
 8006bdc:	f7fa fcc0 	bl	8001560 <HAL_Delay>
	  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, AK8963_ASAX, 1, rawADC, 3);// Read the x-, y-, and z-axis calibration values
 8006be0:	2303      	movs	r3, #3
 8006be2:	4c26      	ldr	r4, [pc, #152]	; (8006c7c <initAK8963+0xcc>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	2110      	movs	r1, #16
 8006bea:	4623      	mov	r3, r4
 8006bec:	2018      	movs	r0, #24
 8006bee:	f7fd fe05 	bl	80047fc <I2C_ByteRead>
	  destination[0] =  (float)(rawADC[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8006bf2:	7820      	ldrb	r0, [r4, #0]
 8006bf4:	3880      	subs	r0, #128	; 0x80
 8006bf6:	f7fa f86d 	bl	8000cd4 <__aeabi_i2f>
 8006bfa:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006bfe:	f7fa f8bd 	bl	8000d7c <__aeabi_fmul>
 8006c02:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006c06:	f7f9 ffb1 	bl	8000b6c <__addsf3>
 8006c0a:	6028      	str	r0, [r5, #0]
	  destination[1] =  (float)(rawADC[1] - 128)/256.0f + 1.0f;
 8006c0c:	7860      	ldrb	r0, [r4, #1]
 8006c0e:	3880      	subs	r0, #128	; 0x80
 8006c10:	f7fa f860 	bl	8000cd4 <__aeabi_i2f>
 8006c14:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006c18:	f7fa f8b0 	bl	8000d7c <__aeabi_fmul>
 8006c1c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006c20:	f7f9 ffa4 	bl	8000b6c <__addsf3>
 8006c24:	6068      	str	r0, [r5, #4]
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 8006c26:	78a0      	ldrb	r0, [r4, #2]
 8006c28:	3880      	subs	r0, #128	; 0x80
 8006c2a:	f7fa f853 	bl	8000cd4 <__aeabi_i2f>
 8006c2e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006c32:	f7fa f8a3 	bl	8000d7c <__aeabi_fmul>
 8006c36:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006c3a:	f7f9 ff97 	bl	8000b6c <__addsf3>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8006c3e:	2308      	movs	r3, #8
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 8006c40:	60a8      	str	r0, [r5, #8]
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8006c42:	2207      	movs	r2, #7
 8006c44:	210a      	movs	r1, #10
 8006c46:	9600      	str	r6, [sp, #0]
 8006c48:	2018      	movs	r0, #24
 8006c4a:	f7fd fd71 	bl	8004730 <I2C_ByteWrite>
	  HAL_Delay(10);
 8006c4e:	200a      	movs	r0, #10
 8006c50:	f7fa fc86 	bl	8001560 <HAL_Delay>
	  // Configure the magnetometer for continuous read and highest resolution
	  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8006c54:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <initAK8963+0xd0>)
 8006c56:	210a      	movs	r1, #10
 8006c58:	781a      	ldrb	r2, [r3, #0]
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <initAK8963+0xd4>)
 8006c5c:	2018      	movs	r0, #24
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	2207      	movs	r2, #7
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	f7fd fd60 	bl	8004730 <I2C_ByteWrite>
	  HAL_Delay(10);
 8006c70:	200a      	movs	r0, #10
}
 8006c72:	b002      	add	sp, #8
 8006c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  HAL_Delay(10);
 8006c78:	f7fa bc72 	b.w	8001560 <HAL_Delay>
 8006c7c:	20001278 	.word	0x20001278
 8006c80:	2000000b 	.word	0x2000000b
 8006c84:	2000000a 	.word	0x2000000a

08006c88 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t selfTest[6] = {0, 0, 0, 0, 0, 0};
   uint16_t i, ii;
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8006c8c:	2400      	movs	r4, #0
   float factoryTrim[6];
   uint8_t FS = GFS_250DPS;

   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8006c8e:	2502      	movs	r5, #2
{
 8006c90:	b095      	sub	sp, #84	; 0x54
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8006c92:	f10d 0a20 	add.w	sl, sp, #32
 8006c96:	ae0a      	add	r6, sp, #40	; 0x28
 8006c98:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006c9c:	f8aa 4004 	strh.w	r4, [sl, #4]
 8006ca0:	80b4      	strh	r4, [r6, #4]
 8006ca2:	f8ab 4004 	strh.w	r4, [fp, #4]
{
 8006ca6:	9005      	str	r0, [sp, #20]
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 8006ca8:	9400      	str	r4, [sp, #0]
 8006caa:	2308      	movs	r3, #8
 8006cac:	2207      	movs	r2, #7
 8006cae:	2119      	movs	r1, #25
 8006cb0:	20d2      	movs	r0, #210	; 0xd2
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8006cb2:	9406      	str	r4, [sp, #24]
 8006cb4:	f8ad 401c 	strh.w	r4, [sp, #28]
 8006cb8:	9408      	str	r4, [sp, #32]
 8006cba:	940a      	str	r4, [sp, #40]	; 0x28
 8006cbc:	940c      	str	r4, [sp, #48]	; 0x30
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 8006cbe:	f7fd fd37 	bl	8004730 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8006cc2:	9500      	str	r5, [sp, #0]
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	2207      	movs	r2, #7
 8006cc8:	211a      	movs	r1, #26
 8006cca:	20d2      	movs	r0, #210	; 0xd2
 8006ccc:	f7fd fd30 	bl	8004730 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, FS<<3);// Set full scale range for the gyro to 250 dps
 8006cd0:	9400      	str	r4, [sp, #0]
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	2207      	movs	r2, #7
 8006cd6:	211b      	movs	r1, #27
 8006cd8:	20d2      	movs	r0, #210	; 0xd2
 8006cda:	f7fd fd29 	bl	8004730 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, 0x1D, 7, 8, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8006cde:	9500      	str	r5, [sp, #0]
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	2207      	movs	r2, #7
 8006ce4:	211d      	movs	r1, #29
 8006ce6:	20d2      	movs	r0, #210	; 0xd2
 8006ce8:	f7fd fd22 	bl	8004730 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, FS<<3);// Set full scale range for the accelerometer to 2 g
 8006cec:	9400      	str	r4, [sp, #0]
 8006cee:	2308      	movs	r3, #8
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	211c      	movs	r1, #28
 8006cf4:	20d2      	movs	r0, #210	; 0xd2
 8006cf6:	f7fd fd1b 	bl	8004730 <I2C_ByteWrite>
 8006cfa:	25c8      	movs	r5, #200	; 0xc8

  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);  // Read the six raw data registers into data array
 8006cfc:	4cd2      	ldr	r4, [pc, #840]	; (8007048 <MPU9250SelfTest+0x3c0>)
 8006cfe:	2706      	movs	r7, #6
 8006d00:	4bd1      	ldr	r3, [pc, #836]	; (8007048 <MPU9250SelfTest+0x3c0>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	213b      	movs	r1, #59	; 0x3b
 8006d06:	20d2      	movs	r0, #210	; 0xd2
 8006d08:	9700      	str	r7, [sp, #0]
 8006d0a:	f7fd fd77 	bl	80047fc <I2C_ByteRead>
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006d0e:	7822      	ldrb	r2, [r4, #0]
 8006d10:	7863      	ldrb	r3, [r4, #1]
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006d12:	2143      	movs	r1, #67	; 0x43
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006d14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d18:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006d1c:	20d2      	movs	r0, #210	; 0xd2
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006d1e:	4413      	add	r3, r2
 8006d20:	f8ad 3020 	strh.w	r3, [sp, #32]
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8006d24:	78a2      	ldrb	r2, [r4, #2]
 8006d26:	78e3      	ldrb	r3, [r4, #3]
 8006d28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d2c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8006d30:	4413      	add	r3, r2
 8006d32:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006d36:	7922      	ldrb	r2, [r4, #4]
 8006d38:	7963      	ldrb	r3, [r4, #5]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006d3a:	9700      	str	r7, [sp, #0]
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006d3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d40:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8006d44:	4413      	add	r3, r2
 8006d46:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	4bbe      	ldr	r3, [pc, #760]	; (8007048 <MPU9250SelfTest+0x3c0>)
 8006d4e:	f7fd fd55 	bl	80047fc <I2C_ByteRead>
  gAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006d52:	7822      	ldrb	r2, [r4, #0]
 8006d54:	7863      	ldrb	r3, [r4, #1]
 8006d56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d5a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f8ad 3018 	strh.w	r3, [sp, #24]
  gAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8006d64:	78a2      	ldrb	r2, [r4, #2]
 8006d66:	78e3      	ldrb	r3, [r4, #3]
 8006d68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d6c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8006d70:	4413      	add	r3, r2
 8006d72:	f8ad 301a 	strh.w	r3, [sp, #26]
  gAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006d76:	7922      	ldrb	r2, [r4, #4]
 8006d78:	7963      	ldrb	r3, [r4, #5]
 8006d7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d7e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006d82:	4413      	add	r3, r2
 8006d84:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006d88:	1e6b      	subs	r3, r5, #1
 8006d8a:	b29d      	uxth	r5, r3
  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8006d8c:	2d00      	cmp	r5, #0
 8006d8e:	d1b6      	bne.n	8006cfe <MPU9250SelfTest+0x76>
 8006d90:	462b      	mov	r3, r5
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
  aAvg[ii] /= 200;
 8006d92:	21c8      	movs	r1, #200	; 0xc8
 8006d94:	f93a 2013 	ldrsh.w	r2, [sl, r3, lsl #1]
  gAvg[ii] /= 200;
 8006d98:	a806      	add	r0, sp, #24
  aAvg[ii] /= 200;
 8006d9a:	fb92 f2f1 	sdiv	r2, r2, r1
 8006d9e:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
  gAvg[ii] /= 200;
 8006da2:	aa06      	add	r2, sp, #24
 8006da4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8006da8:	fb92 f2f1 	sdiv	r2, r2, r1
 8006dac:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8006db0:	3301      	adds	r3, #1
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d1ee      	bne.n	8006d94 <MPU9250SelfTest+0x10c>
  }

// Configure the accelerometer for self-test
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8006db6:	25e0      	movs	r5, #224	; 0xe0
 8006db8:	2308      	movs	r3, #8
 8006dba:	9500      	str	r5, [sp, #0]
 8006dbc:	2207      	movs	r2, #7
 8006dbe:	211c      	movs	r1, #28
 8006dc0:	20d2      	movs	r0, #210	; 0xd2
 8006dc2:	f7fd fcb5 	bl	8004730 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8006dc6:	9500      	str	r5, [sp, #0]
 8006dc8:	2308      	movs	r3, #8
 8006dca:	2207      	movs	r2, #7
 8006dcc:	211b      	movs	r1, #27
 8006dce:	20d2      	movs	r0, #210	; 0xd2
 8006dd0:	f7fd fcae 	bl	8004730 <I2C_ByteWrite>
   HAL_Delay(25); // Delay a while to let the device stabilize
 8006dd4:	2019      	movs	r0, #25
 8006dd6:	f7fa fbc3 	bl	8001560 <HAL_Delay>
 8006dda:	25c8      	movs	r5, #200	; 0xc8

  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6); // Read the six raw data registers into data array
 8006ddc:	4f9a      	ldr	r7, [pc, #616]	; (8007048 <MPU9250SelfTest+0x3c0>)
 8006dde:	f04f 0806 	mov.w	r8, #6
 8006de2:	463b      	mov	r3, r7
 8006de4:	2201      	movs	r2, #1
 8006de6:	213b      	movs	r1, #59	; 0x3b
 8006de8:	20d2      	movs	r0, #210	; 0xd2
 8006dea:	f8cd 8000 	str.w	r8, [sp]
 8006dee:	f7fd fd05 	bl	80047fc <I2C_ByteRead>
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006df2:	7822      	ldrb	r2, [r4, #0]
 8006df4:	7863      	ldrb	r3, [r4, #1]
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006df6:	2143      	movs	r1, #67	; 0x43
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006df8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006dfc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006e00:	20d2      	movs	r0, #210	; 0xd2
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006e02:	4413      	add	r3, r2
 8006e04:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8006e08:	78a2      	ldrb	r2, [r4, #2]
 8006e0a:	78e3      	ldrb	r3, [r4, #3]
 8006e0c:	3d01      	subs	r5, #1
 8006e0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e12:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8006e16:	b2ad      	uxth	r5, r5
 8006e18:	4413      	add	r3, r2
 8006e1a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006e1e:	7922      	ldrb	r2, [r4, #4]
 8006e20:	7963      	ldrb	r3, [r4, #5]
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006e22:	f8cd 8000 	str.w	r8, [sp]
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006e26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e2a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8006e2e:	4413      	add	r3, r2
 8006e30:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8006e34:	2201      	movs	r2, #1
 8006e36:	463b      	mov	r3, r7
 8006e38:	f7fd fce0 	bl	80047fc <I2C_ByteRead>
  gSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006e3c:	7822      	ldrb	r2, [r4, #0]
 8006e3e:	7863      	ldrb	r3, [r4, #1]
 8006e40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e44:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8006e48:	4413      	add	r3, r2
 8006e4a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  gSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8006e4e:	78a2      	ldrb	r2, [r4, #2]
 8006e50:	78e3      	ldrb	r3, [r4, #3]
 8006e52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e56:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  gSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8006e60:	7922      	ldrb	r2, [r4, #4]
 8006e62:	7963      	ldrb	r3, [r4, #5]
 8006e64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e68:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8006e72:	2d00      	cmp	r5, #0
 8006e74:	d1b3      	bne.n	8006dde <MPU9250SelfTest+0x156>
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
  aSTAvg[ii] /= 200;
 8006e76:	22c8      	movs	r2, #200	; 0xc8
 8006e78:	f936 3015 	ldrsh.w	r3, [r6, r5, lsl #1]
 8006e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e80:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
  gSTAvg[ii] /= 200;
 8006e84:	f93b 3015 	ldrsh.w	r3, [fp, r5, lsl #1]
 8006e88:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e8c:	f82b 3015 	strh.w	r3, [fp, r5, lsl #1]
 8006e90:	3501      	adds	r5, #1
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8006e92:	2d03      	cmp	r5, #3
 8006e94:	d1f0      	bne.n	8006e78 <MPU9250SelfTest+0x1f0>
  }

 // Configure the gyro and accelerometer for normal operation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 8006e96:	2400      	movs	r4, #0
 8006e98:	2308      	movs	r3, #8
 8006e9a:	2207      	movs	r2, #7
 8006e9c:	211c      	movs	r1, #28
 8006e9e:	20d2      	movs	r0, #210	; 0xd2
 8006ea0:	9400      	str	r4, [sp, #0]
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
  HAL_Delay(25); // Delay a while to let the device stabilize

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 8006ea2:	4f69      	ldr	r7, [pc, #420]	; (8007048 <MPU9250SelfTest+0x3c0>)
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 8006ea4:	f7fd fc44 	bl	8004730 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	2207      	movs	r2, #7
 8006eac:	211b      	movs	r1, #27
 8006eae:	20d2      	movs	r0, #210	; 0xd2
 8006eb0:	9400      	str	r4, [sp, #0]
 8006eb2:	f7fd fc3d 	bl	8004730 <I2C_ByteWrite>
  HAL_Delay(25); // Delay a while to let the device stabilize
 8006eb6:	2019      	movs	r0, #25
 8006eb8:	f7fa fb52 	bl	8001560 <HAL_Delay>
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 8006ebc:	463b      	mov	r3, r7
 8006ebe:	9500      	str	r5, [sp, #0]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	210d      	movs	r1, #13
 8006ec4:	20d2      	movs	r0, #210	; 0xd2
 8006ec6:	f7fd fc99 	bl	80047fc <I2C_ByteRead>
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 8006eca:	78bb      	ldrb	r3, [r7, #2]
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
 8006ecc:	f897 8000 	ldrb.w	r8, [r7]
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
 8006ed0:	f897 9001 	ldrb.w	r9, [r7, #1]
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	4621      	mov	r1, r4
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 8006ed8:	9302      	str	r3, [sp, #8]
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 8006eda:	9500      	str	r5, [sp, #0]
 8006edc:	463b      	mov	r3, r7
 8006ede:	20d2      	movs	r0, #210	; 0xd2
 8006ee0:	f7fd fc8c 	bl	80047fc <I2C_ByteRead>
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 8006ee4:	783b      	ldrb	r3, [r7, #0]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8006ee6:	4640      	mov	r0, r8
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 8006ee8:	9303      	str	r3, [sp, #12]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 8006eea:	787b      	ldrb	r3, [r7, #1]
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results
 8006eec:	78bd      	ldrb	r5, [r7, #2]
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 8006eee:	9304      	str	r3, [sp, #16]
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8006ef0:	f7f9 feec 	bl	8000ccc <__aeabi_ui2f>
 8006ef4:	f7f9 fa98 	bl	8000428 <__aeabi_f2d>
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4b54      	ldr	r3, [pc, #336]	; (800704c <MPU9250SelfTest+0x3c4>)
 8006efc:	f7f9 f934 	bl	8000168 <__aeabi_dsub>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	a14c      	add	r1, pc, #304	; (adr r1, 8007038 <MPU9250SelfTest+0x3b0>)
 8006f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f0a:	f006 ffe5 	bl	800ded8 <pow>
 8006f0e:	a34c      	add	r3, pc, #304	; (adr r3, 8007040 <MPU9250SelfTest+0x3b8>)
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	f7f9 fadc 	bl	80004d0 <__aeabi_dmul>
 8006f18:	f7f9 fdd2 	bl	8000ac0 <__aeabi_d2f>
 8006f1c:	900e      	str	r0, [sp, #56]	; 0x38
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8006f1e:	4648      	mov	r0, r9
 8006f20:	f7f9 fed4 	bl	8000ccc <__aeabi_ui2f>
 8006f24:	f7f9 fa80 	bl	8000428 <__aeabi_f2d>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4b48      	ldr	r3, [pc, #288]	; (800704c <MPU9250SelfTest+0x3c4>)
 8006f2c:	f7f9 f91c 	bl	8000168 <__aeabi_dsub>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	a140      	add	r1, pc, #256	; (adr r1, 8007038 <MPU9250SelfTest+0x3b0>)
 8006f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f3a:	f006 ffcd 	bl	800ded8 <pow>
 8006f3e:	a340      	add	r3, pc, #256	; (adr r3, 8007040 <MPU9250SelfTest+0x3b8>)
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	f7f9 fac4 	bl	80004d0 <__aeabi_dmul>
 8006f48:	f7f9 fdba 	bl	8000ac0 <__aeabi_d2f>
 8006f4c:	900f      	str	r0, [sp, #60]	; 0x3c
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8006f4e:	9802      	ldr	r0, [sp, #8]
 8006f50:	f7f9 febc 	bl	8000ccc <__aeabi_ui2f>
 8006f54:	f7f9 fa68 	bl	8000428 <__aeabi_f2d>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4b3c      	ldr	r3, [pc, #240]	; (800704c <MPU9250SelfTest+0x3c4>)
 8006f5c:	f7f9 f904 	bl	8000168 <__aeabi_dsub>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	a134      	add	r1, pc, #208	; (adr r1, 8007038 <MPU9250SelfTest+0x3b0>)
 8006f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f6a:	f006 ffb5 	bl	800ded8 <pow>
 8006f6e:	a334      	add	r3, pc, #208	; (adr r3, 8007040 <MPU9250SelfTest+0x3b8>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f7f9 faac 	bl	80004d0 <__aeabi_dmul>
 8006f78:	f7f9 fda2 	bl	8000ac0 <__aeabi_d2f>
 8006f7c:	9010      	str	r0, [sp, #64]	; 0x40
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8006f7e:	9803      	ldr	r0, [sp, #12]
 8006f80:	f7f9 fea4 	bl	8000ccc <__aeabi_ui2f>
 8006f84:	f7f9 fa50 	bl	8000428 <__aeabi_f2d>
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4b30      	ldr	r3, [pc, #192]	; (800704c <MPU9250SelfTest+0x3c4>)
 8006f8c:	f7f9 f8ec 	bl	8000168 <__aeabi_dsub>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	a128      	add	r1, pc, #160	; (adr r1, 8007038 <MPU9250SelfTest+0x3b0>)
 8006f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f9a:	f006 ff9d 	bl	800ded8 <pow>
 8006f9e:	a328      	add	r3, pc, #160	; (adr r3, 8007040 <MPU9250SelfTest+0x3b8>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	f7f9 fa94 	bl	80004d0 <__aeabi_dmul>
 8006fa8:	f7f9 fd8a 	bl	8000ac0 <__aeabi_d2f>
 8006fac:	9011      	str	r0, [sp, #68]	; 0x44
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8006fae:	9804      	ldr	r0, [sp, #16]
 8006fb0:	f7f9 fe8c 	bl	8000ccc <__aeabi_ui2f>
 8006fb4:	f7f9 fa38 	bl	8000428 <__aeabi_f2d>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4b24      	ldr	r3, [pc, #144]	; (800704c <MPU9250SelfTest+0x3c4>)
 8006fbc:	f7f9 f8d4 	bl	8000168 <__aeabi_dsub>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	a11c      	add	r1, pc, #112	; (adr r1, 8007038 <MPU9250SelfTest+0x3b0>)
 8006fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fca:	f006 ff85 	bl	800ded8 <pow>
 8006fce:	a31c      	add	r3, pc, #112	; (adr r3, 8007040 <MPU9250SelfTest+0x3b8>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	f7f9 fa7c 	bl	80004d0 <__aeabi_dmul>
 8006fd8:	f7f9 fd72 	bl	8000ac0 <__aeabi_d2f>
 8006fdc:	9012      	str	r0, [sp, #72]	; 0x48
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f7f9 fe74 	bl	8000ccc <__aeabi_ui2f>
 8006fe4:	f7f9 fa20 	bl	8000428 <__aeabi_f2d>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4b18      	ldr	r3, [pc, #96]	; (800704c <MPU9250SelfTest+0x3c4>)
 8006fec:	f7f9 f8bc 	bl	8000168 <__aeabi_dsub>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	a110      	add	r1, pc, #64	; (adr r1, 8007038 <MPU9250SelfTest+0x3b0>)
 8006ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ffa:	f006 ff6d 	bl	800ded8 <pow>
 8006ffe:	a310      	add	r3, pc, #64	; (adr r3, 8007040 <MPU9250SelfTest+0x3b8>)
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	f7f9 fa64 	bl	80004d0 <__aeabi_dmul>
 8007008:	f7f9 fd5a 	bl	8000ac0 <__aeabi_d2f>
 800700c:	9b05      	ldr	r3, [sp, #20]
 800700e:	9013      	str	r0, [sp, #76]	; 0x4c
 8007010:	af0d      	add	r7, sp, #52	; 0x34
 8007012:	1f1d      	subs	r5, r3, #4

 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (i = 0; i < 3; i++) {
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];// - 100.0; // Report percent differences
 8007014:	f93a 3014 	ldrsh.w	r3, [sl, r4, lsl #1]
 8007018:	f936 0014 	ldrsh.w	r0, [r6, r4, lsl #1]
 800701c:	1ac0      	subs	r0, r0, r3
 800701e:	f7f9 fe59 	bl	8000cd4 <__aeabi_i2f>
 8007022:	f7f9 fa01 	bl	8000428 <__aeabi_f2d>
 8007026:	2200      	movs	r2, #0
 8007028:	4b09      	ldr	r3, [pc, #36]	; (8007050 <MPU9250SelfTest+0x3c8>)
 800702a:	f7f9 fa51 	bl	80004d0 <__aeabi_dmul>
 800702e:	4680      	mov	r8, r0
 8007030:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8007034:	4689      	mov	r9, r1
 8007036:	e00d      	b.n	8007054 <MPU9250SelfTest+0x3cc>
 8007038:	c28f5c29 	.word	0xc28f5c29
 800703c:	3ff028f5 	.word	0x3ff028f5
 8007040:	00000000 	.word	0x00000000
 8007044:	40a47800 	.word	0x40a47800
 8007048:	20001278 	.word	0x20001278
 800704c:	3ff00000 	.word	0x3ff00000
 8007050:	40590000 	.word	0x40590000
 8007054:	f7f9 f9e8 	bl	8000428 <__aeabi_f2d>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4640      	mov	r0, r8
 800705e:	4649      	mov	r1, r9
 8007060:	f7f9 fb60 	bl	8000724 <__aeabi_ddiv>
 8007064:	f7f9 fd2c 	bl	8000ac0 <__aeabi_d2f>
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3];// - 100.0; // Report percent differences
 8007068:	ab06      	add	r3, sp, #24
 800706a:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];// - 100.0; // Report percent differences
 800706e:	f845 0f04 	str.w	r0, [r5, #4]!
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3];// - 100.0; // Report percent differences
 8007072:	f93b 0014 	ldrsh.w	r0, [fp, r4, lsl #1]
 8007076:	3401      	adds	r4, #1
 8007078:	1ac0      	subs	r0, r0, r3
 800707a:	f7f9 fe2b 	bl	8000cd4 <__aeabi_i2f>
 800707e:	f7f9 f9d3 	bl	8000428 <__aeabi_f2d>
 8007082:	2200      	movs	r2, #0
 8007084:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <MPU9250SelfTest+0x428>)
 8007086:	f7f9 fa23 	bl	80004d0 <__aeabi_dmul>
 800708a:	4680      	mov	r8, r0
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	4689      	mov	r9, r1
 8007090:	f7f9 f9ca 	bl	8000428 <__aeabi_f2d>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4640      	mov	r0, r8
 800709a:	4649      	mov	r1, r9
 800709c:	f7f9 fb42 	bl	8000724 <__aeabi_ddiv>
 80070a0:	f7f9 fd0e 	bl	8000ac0 <__aeabi_d2f>
   for (i = 0; i < 3; i++) {
 80070a4:	2c03      	cmp	r4, #3
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3];// - 100.0; // Report percent differences
 80070a6:	60e8      	str	r0, [r5, #12]
   for (i = 0; i < 3; i++) {
 80070a8:	d1b4      	bne.n	8007014 <MPU9250SelfTest+0x38c>
   }
}
 80070aa:	b015      	add	sp, #84	; 0x54
 80070ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b0:	40590000 	.word	0x40590000

080070b4 <MPU9250_Init>:
{
 80070b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 80070b8:	2401      	movs	r4, #1
 80070ba:	4dc0      	ldr	r5, [pc, #768]	; (80073bc <MPU9250_Init+0x308>)
{
 80070bc:	b085      	sub	sp, #20
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 80070be:	462b      	mov	r3, r5
 80070c0:	4622      	mov	r2, r4
 80070c2:	2175      	movs	r1, #117	; 0x75
 80070c4:	20d2      	movs	r0, #210	; 0xd2
 80070c6:	9400      	str	r4, [sp, #0]
 80070c8:	f7fd fb98 	bl	80047fc <I2C_ByteRead>
    whoami = rawADC[0];
 80070cc:	782e      	ldrb	r6, [r5, #0]
    sprintf(Buf, "I AM 0x%x\r\n", whoami);
 80070ce:	49bc      	ldr	r1, [pc, #752]	; (80073c0 <MPU9250_Init+0x30c>)
 80070d0:	4632      	mov	r2, r6
 80070d2:	48bc      	ldr	r0, [pc, #752]	; (80073c4 <MPU9250_Init+0x310>)
 80070d4:	f002 fca8 	bl	8009a28 <sprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 80070d8:	48ba      	ldr	r0, [pc, #744]	; (80073c4 <MPU9250_Init+0x310>)
 80070da:	f7f9 f839 	bl	8000150 <strlen>
 80070de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070e2:	b282      	uxth	r2, r0
 80070e4:	49b7      	ldr	r1, [pc, #732]	; (80073c4 <MPU9250_Init+0x310>)
 80070e6:	48b8      	ldr	r0, [pc, #736]	; (80073c8 <MPU9250_Init+0x314>)
 80070e8:	f7fc fe46 	bl	8003d78 <HAL_UART_Transmit>
    sprintf(Buf, "I SHOULD BE 0x71\r\n");
 80070ec:	49b7      	ldr	r1, [pc, #732]	; (80073cc <MPU9250_Init+0x318>)
 80070ee:	48b5      	ldr	r0, [pc, #724]	; (80073c4 <MPU9250_Init+0x310>)
 80070f0:	f002 fcbe 	bl	8009a70 <strcpy>
    HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 80070f4:	48b3      	ldr	r0, [pc, #716]	; (80073c4 <MPU9250_Init+0x310>)
 80070f6:	f7f9 f82b 	bl	8000150 <strlen>
 80070fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070fe:	b282      	uxth	r2, r0
 8007100:	49b0      	ldr	r1, [pc, #704]	; (80073c4 <MPU9250_Init+0x310>)
 8007102:	48b1      	ldr	r0, [pc, #708]	; (80073c8 <MPU9250_Init+0x314>)
 8007104:	f7fc fe38 	bl	8003d78 <HAL_UART_Transmit>
  if(whoami == 0x71)
 8007108:	2e71      	cmp	r6, #113	; 0x71
 800710a:	f040 82a8 	bne.w	800765e <MPU9250_Init+0x5aa>
		sprintf(Buf, "MPU-9250 Init Start (9-DOF 16-bit mortion sensor)\r\nMPU-9250 SelfTest Start\r\n");
 800710e:	49b0      	ldr	r1, [pc, #704]	; (80073d0 <MPU9250_Init+0x31c>)
 8007110:	48ac      	ldr	r0, [pc, #688]	; (80073c4 <MPU9250_Init+0x310>)
 8007112:	f002 fcad 	bl	8009a70 <strcpy>
	  HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007116:	48ab      	ldr	r0, [pc, #684]	; (80073c4 <MPU9250_Init+0x310>)
 8007118:	f7f9 f81a 	bl	8000150 <strlen>
 800711c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007120:	b282      	uxth	r2, r0
 8007122:	49a8      	ldr	r1, [pc, #672]	; (80073c4 <MPU9250_Init+0x310>)
 8007124:	48a8      	ldr	r0, [pc, #672]	; (80073c8 <MPU9250_Init+0x314>)
 8007126:	f7fc fe27 	bl	8003d78 <HAL_UART_Transmit>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 800712a:	2380      	movs	r3, #128	; 0x80
	  MPU9250SelfTest(SelfTest);
 800712c:	4ea9      	ldr	r6, [pc, #676]	; (80073d4 <MPU9250_Init+0x320>)
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 800712e:	2207      	movs	r2, #7
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	216b      	movs	r1, #107	; 0x6b
 8007134:	2308      	movs	r3, #8
 8007136:	20d2      	movs	r0, #210	; 0xd2
 8007138:	f7fd fafa 	bl	8004730 <I2C_ByteWrite>
	  MPU9250SelfTest(SelfTest);
 800713c:	4630      	mov	r0, r6
 800713e:	f7ff fda3 	bl	8006c88 <MPU9250SelfTest>
		sprintf(Buf, "Self Test Finish\r\n");
 8007142:	49a5      	ldr	r1, [pc, #660]	; (80073d8 <MPU9250_Init+0x324>)
 8007144:	489f      	ldr	r0, [pc, #636]	; (80073c4 <MPU9250_Init+0x310>)
 8007146:	f002 fc93 	bl	8009a70 <strcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 800714a:	489e      	ldr	r0, [pc, #632]	; (80073c4 <MPU9250_Init+0x310>)
 800714c:	f7f9 f800 	bl	8000150 <strlen>
 8007150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007154:	b282      	uxth	r2, r0
 8007156:	499b      	ldr	r1, [pc, #620]	; (80073c4 <MPU9250_Init+0x310>)
 8007158:	489b      	ldr	r0, [pc, #620]	; (80073c8 <MPU9250_Init+0x314>)
 800715a:	f7fc fe0d 	bl	8003d78 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800715e:	2064      	movs	r0, #100	; 0x64
 8007160:	f7fa f9fe 	bl	8001560 <HAL_Delay>
		sprintf(Buf, " x-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[0]);
 8007164:	6830      	ldr	r0, [r6, #0]
 8007166:	f7f9 f95f 	bl	8000428 <__aeabi_f2d>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4895      	ldr	r0, [pc, #596]	; (80073c4 <MPU9250_Init+0x310>)
 8007170:	499a      	ldr	r1, [pc, #616]	; (80073dc <MPU9250_Init+0x328>)
 8007172:	f002 fc59 	bl	8009a28 <sprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007176:	4893      	ldr	r0, [pc, #588]	; (80073c4 <MPU9250_Init+0x310>)
 8007178:	f7f8 ffea 	bl	8000150 <strlen>
 800717c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007180:	b282      	uxth	r2, r0
 8007182:	4990      	ldr	r1, [pc, #576]	; (80073c4 <MPU9250_Init+0x310>)
 8007184:	4890      	ldr	r0, [pc, #576]	; (80073c8 <MPU9250_Init+0x314>)
 8007186:	f7fc fdf7 	bl	8003d78 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800718a:	2064      	movs	r0, #100	; 0x64
 800718c:	f7fa f9e8 	bl	8001560 <HAL_Delay>
		sprintf(Buf, " y-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[1]);
 8007190:	6870      	ldr	r0, [r6, #4]
 8007192:	f7f9 f949 	bl	8000428 <__aeabi_f2d>
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	488a      	ldr	r0, [pc, #552]	; (80073c4 <MPU9250_Init+0x310>)
 800719c:	4990      	ldr	r1, [pc, #576]	; (80073e0 <MPU9250_Init+0x32c>)
 800719e:	f002 fc43 	bl	8009a28 <sprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 80071a2:	4888      	ldr	r0, [pc, #544]	; (80073c4 <MPU9250_Init+0x310>)
 80071a4:	f7f8 ffd4 	bl	8000150 <strlen>
 80071a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071ac:	b282      	uxth	r2, r0
 80071ae:	4985      	ldr	r1, [pc, #532]	; (80073c4 <MPU9250_Init+0x310>)
 80071b0:	4885      	ldr	r0, [pc, #532]	; (80073c8 <MPU9250_Init+0x314>)
 80071b2:	f7fc fde1 	bl	8003d78 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80071b6:	2064      	movs	r0, #100	; 0x64
 80071b8:	f7fa f9d2 	bl	8001560 <HAL_Delay>
		sprintf(Buf, " z-axis self test: acceleration trim within : %f percent of factory value\r\n",SelfTest[2]);
 80071bc:	68b0      	ldr	r0, [r6, #8]
 80071be:	f7f9 f933 	bl	8000428 <__aeabi_f2d>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	487f      	ldr	r0, [pc, #508]	; (80073c4 <MPU9250_Init+0x310>)
 80071c8:	4986      	ldr	r1, [pc, #536]	; (80073e4 <MPU9250_Init+0x330>)
 80071ca:	f002 fc2d 	bl	8009a28 <sprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 80071ce:	487d      	ldr	r0, [pc, #500]	; (80073c4 <MPU9250_Init+0x310>)
 80071d0:	f7f8 ffbe 	bl	8000150 <strlen>
 80071d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071d8:	b282      	uxth	r2, r0
 80071da:	497a      	ldr	r1, [pc, #488]	; (80073c4 <MPU9250_Init+0x310>)
 80071dc:	487a      	ldr	r0, [pc, #488]	; (80073c8 <MPU9250_Init+0x314>)
 80071de:	f7fc fdcb 	bl	8003d78 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80071e2:	2064      	movs	r0, #100	; 0x64
 80071e4:	f7fa f9bc 	bl	8001560 <HAL_Delay>
		sprintf(Buf, " x-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[3]);
 80071e8:	68f0      	ldr	r0, [r6, #12]
 80071ea:	f7f9 f91d 	bl	8000428 <__aeabi_f2d>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4874      	ldr	r0, [pc, #464]	; (80073c4 <MPU9250_Init+0x310>)
 80071f4:	497c      	ldr	r1, [pc, #496]	; (80073e8 <MPU9250_Init+0x334>)
 80071f6:	f002 fc17 	bl	8009a28 <sprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 80071fa:	4872      	ldr	r0, [pc, #456]	; (80073c4 <MPU9250_Init+0x310>)
 80071fc:	f7f8 ffa8 	bl	8000150 <strlen>
 8007200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007204:	b282      	uxth	r2, r0
 8007206:	496f      	ldr	r1, [pc, #444]	; (80073c4 <MPU9250_Init+0x310>)
 8007208:	486f      	ldr	r0, [pc, #444]	; (80073c8 <MPU9250_Init+0x314>)
 800720a:	f7fc fdb5 	bl	8003d78 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800720e:	2064      	movs	r0, #100	; 0x64
 8007210:	f7fa f9a6 	bl	8001560 <HAL_Delay>
		sprintf(Buf, " y-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[4]);
 8007214:	6930      	ldr	r0, [r6, #16]
 8007216:	f7f9 f907 	bl	8000428 <__aeabi_f2d>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4869      	ldr	r0, [pc, #420]	; (80073c4 <MPU9250_Init+0x310>)
 8007220:	4972      	ldr	r1, [pc, #456]	; (80073ec <MPU9250_Init+0x338>)
 8007222:	f002 fc01 	bl	8009a28 <sprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007226:	4867      	ldr	r0, [pc, #412]	; (80073c4 <MPU9250_Init+0x310>)
 8007228:	f7f8 ff92 	bl	8000150 <strlen>
 800722c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007230:	b282      	uxth	r2, r0
 8007232:	4964      	ldr	r1, [pc, #400]	; (80073c4 <MPU9250_Init+0x310>)
 8007234:	4864      	ldr	r0, [pc, #400]	; (80073c8 <MPU9250_Init+0x314>)
 8007236:	f7fc fd9f 	bl	8003d78 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800723a:	2064      	movs	r0, #100	; 0x64
 800723c:	f7fa f990 	bl	8001560 <HAL_Delay>
		sprintf(Buf, " z-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[5]);
 8007240:	6970      	ldr	r0, [r6, #20]
 8007242:	f7f9 f8f1 	bl	8000428 <__aeabi_f2d>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	485e      	ldr	r0, [pc, #376]	; (80073c4 <MPU9250_Init+0x310>)
 800724c:	4968      	ldr	r1, [pc, #416]	; (80073f0 <MPU9250_Init+0x33c>)
 800724e:	f002 fbeb 	bl	8009a28 <sprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007252:	485c      	ldr	r0, [pc, #368]	; (80073c4 <MPU9250_Init+0x310>)
 8007254:	f7f8 ff7c 	bl	8000150 <strlen>
 8007258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800725c:	b282      	uxth	r2, r0
 800725e:	4959      	ldr	r1, [pc, #356]	; (80073c4 <MPU9250_Init+0x310>)
 8007260:	4859      	ldr	r0, [pc, #356]	; (80073c8 <MPU9250_Init+0x314>)
 8007262:	f7fc fd89 	bl	8003d78 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8007266:	2064      	movs	r0, #100	; 0x64
 8007268:	f7fa f97a 	bl	8001560 <HAL_Delay>
		sprintf(Buf, "MPU-9250 Calibration Start\r\n");
 800726c:	4961      	ldr	r1, [pc, #388]	; (80073f4 <MPU9250_Init+0x340>)
 800726e:	4855      	ldr	r0, [pc, #340]	; (80073c4 <MPU9250_Init+0x310>)
 8007270:	f002 fbfe 	bl	8009a70 <strcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007274:	4853      	ldr	r0, [pc, #332]	; (80073c4 <MPU9250_Init+0x310>)
 8007276:	f7f8 ff6b 	bl	8000150 <strlen>
	  calibrateMPU9250(gyroBias, accBias);
 800727a:	4f5f      	ldr	r7, [pc, #380]	; (80073f8 <MPU9250_Init+0x344>)
 800727c:	4e5f      	ldr	r6, [pc, #380]	; (80073fc <MPU9250_Init+0x348>)
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 800727e:	b282      	uxth	r2, r0
 8007280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007284:	494f      	ldr	r1, [pc, #316]	; (80073c4 <MPU9250_Init+0x310>)
 8007286:	4850      	ldr	r0, [pc, #320]	; (80073c8 <MPU9250_Init+0x314>)
 8007288:	f7fc fd76 	bl	8003d78 <HAL_UART_Transmit>
	  calibrateMPU9250(gyroBias, accBias);
 800728c:	4639      	mov	r1, r7
 800728e:	4630      	mov	r0, r6
 8007290:	f7ff fb52 	bl	8006938 <calibrateMPU9250>
		sprintf(Buf, "Calibration Finish\r\n");
 8007294:	495a      	ldr	r1, [pc, #360]	; (8007400 <MPU9250_Init+0x34c>)
 8007296:	484b      	ldr	r0, [pc, #300]	; (80073c4 <MPU9250_Init+0x310>)
 8007298:	f002 fbea 	bl	8009a70 <strcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 800729c:	4849      	ldr	r0, [pc, #292]	; (80073c4 <MPU9250_Init+0x310>)
 800729e:	f7f8 ff57 	bl	8000150 <strlen>
 80072a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072a6:	b282      	uxth	r2, r0
 80072a8:	4946      	ldr	r1, [pc, #280]	; (80073c4 <MPU9250_Init+0x310>)
 80072aa:	4847      	ldr	r0, [pc, #284]	; (80073c8 <MPU9250_Init+0x314>)
 80072ac:	f7fc fd64 	bl	8003d78 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80072b0:	2064      	movs	r0, #100	; 0x64
 80072b2:	f7fa f955 	bl	8001560 <HAL_Delay>
		sprintf(Buf, "   x       y      z\r\n");
 80072b6:	4953      	ldr	r1, [pc, #332]	; (8007404 <MPU9250_Init+0x350>)
 80072b8:	4842      	ldr	r0, [pc, #264]	; (80073c4 <MPU9250_Init+0x310>)
 80072ba:	f002 fbd9 	bl	8009a70 <strcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 80072be:	4841      	ldr	r0, [pc, #260]	; (80073c4 <MPU9250_Init+0x310>)
 80072c0:	f7f8 ff46 	bl	8000150 <strlen>
 80072c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072c8:	b282      	uxth	r2, r0
 80072ca:	493e      	ldr	r1, [pc, #248]	; (80073c4 <MPU9250_Init+0x310>)
 80072cc:	483e      	ldr	r0, [pc, #248]	; (80073c8 <MPU9250_Init+0x314>)
 80072ce:	f7fc fd53 	bl	8003d78 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 80072d2:	2064      	movs	r0, #100	; 0x64
 80072d4:	f7fa f944 	bl	8001560 <HAL_Delay>
		sprintf(Buf, " %.2f   %.2f   %.2f mg\r\n", 1000*accBias[0], 1000*accBias[1], 1000*accBias[2]);
 80072d8:	6838      	ldr	r0, [r7, #0]
 80072da:	494b      	ldr	r1, [pc, #300]	; (8007408 <MPU9250_Init+0x354>)
 80072dc:	f7f9 fd4e 	bl	8000d7c <__aeabi_fmul>
 80072e0:	f7f9 f8a2 	bl	8000428 <__aeabi_f2d>
 80072e4:	4680      	mov	r8, r0
 80072e6:	4689      	mov	r9, r1
 80072e8:	68b8      	ldr	r0, [r7, #8]
 80072ea:	4947      	ldr	r1, [pc, #284]	; (8007408 <MPU9250_Init+0x354>)
 80072ec:	f7f9 fd46 	bl	8000d7c <__aeabi_fmul>
 80072f0:	f7f9 f89a 	bl	8000428 <__aeabi_f2d>
 80072f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4943      	ldr	r1, [pc, #268]	; (8007408 <MPU9250_Init+0x354>)
 80072fc:	f7f9 fd3e 	bl	8000d7c <__aeabi_fmul>
 8007300:	f7f9 f892 	bl	8000428 <__aeabi_f2d>
 8007304:	4642      	mov	r2, r8
 8007306:	e9cd 0100 	strd	r0, r1, [sp]
 800730a:	464b      	mov	r3, r9
 800730c:	493f      	ldr	r1, [pc, #252]	; (800740c <MPU9250_Init+0x358>)
 800730e:	482d      	ldr	r0, [pc, #180]	; (80073c4 <MPU9250_Init+0x310>)
 8007310:	f002 fb8a 	bl	8009a28 <sprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007314:	482b      	ldr	r0, [pc, #172]	; (80073c4 <MPU9250_Init+0x310>)
 8007316:	f7f8 ff1b 	bl	8000150 <strlen>
 800731a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800731e:	b282      	uxth	r2, r0
 8007320:	4928      	ldr	r1, [pc, #160]	; (80073c4 <MPU9250_Init+0x310>)
 8007322:	4829      	ldr	r0, [pc, #164]	; (80073c8 <MPU9250_Init+0x314>)
 8007324:	f7fc fd28 	bl	8003d78 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 8007328:	2064      	movs	r0, #100	; 0x64
 800732a:	f7fa f919 	bl	8001560 <HAL_Delay>
		sprintf(Buf, " %.2f   %.2f   %.2f o/s\r\n", gyroBias[0], gyroBias[1], gyroBias[2]);
 800732e:	6830      	ldr	r0, [r6, #0]
 8007330:	f7f9 f87a 	bl	8000428 <__aeabi_f2d>
 8007334:	4680      	mov	r8, r0
 8007336:	68b0      	ldr	r0, [r6, #8]
 8007338:	4689      	mov	r9, r1
 800733a:	f7f9 f875 	bl	8000428 <__aeabi_f2d>
 800733e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007342:	6870      	ldr	r0, [r6, #4]
 8007344:	f7f9 f870 	bl	8000428 <__aeabi_f2d>
 8007348:	4642      	mov	r2, r8
 800734a:	e9cd 0100 	strd	r0, r1, [sp]
 800734e:	464b      	mov	r3, r9
 8007350:	492f      	ldr	r1, [pc, #188]	; (8007410 <MPU9250_Init+0x35c>)
 8007352:	481c      	ldr	r0, [pc, #112]	; (80073c4 <MPU9250_Init+0x310>)
 8007354:	f002 fb68 	bl	8009a28 <sprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007358:	481a      	ldr	r0, [pc, #104]	; (80073c4 <MPU9250_Init+0x310>)
 800735a:	f7f8 fef9 	bl	8000150 <strlen>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 800735e:	2700      	movs	r7, #0
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007360:	b282      	uxth	r2, r0
 8007362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007366:	4917      	ldr	r1, [pc, #92]	; (80073c4 <MPU9250_Init+0x310>)
 8007368:	4817      	ldr	r0, [pc, #92]	; (80073c8 <MPU9250_Init+0x314>)
 800736a:	f7fc fd05 	bl	8003d78 <HAL_UART_Transmit>
	  HAL_Delay(100); // for stability
 800736e:	2064      	movs	r0, #100	; 0x64
 8007370:	f7fa f8f6 	bl	8001560 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 8007374:	2308      	movs	r3, #8
 8007376:	2207      	movs	r2, #7
 8007378:	216b      	movs	r1, #107	; 0x6b
 800737a:	9700      	str	r7, [sp, #0]
 800737c:	20d2      	movs	r0, #210	; 0xd2
 800737e:	f7fd f9d7 	bl	8004730 <I2C_ByteWrite>
    HAL_Delay(100); // for stability
 8007382:	2064      	movs	r0, #100	; 0x64
 8007384:	f7fa f8ec 	bl	8001560 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001;
 8007388:	9400      	str	r4, [sp, #0]
 800738a:	2308      	movs	r3, #8
 800738c:	2207      	movs	r2, #7
 800738e:	216b      	movs	r1, #107	; 0x6b
 8007390:	20d2      	movs	r0, #210	; 0xd2
 8007392:	f7fd f9cd 	bl	8004730 <I2C_ByteWrite>
    HAL_Delay(200); // for stability
 8007396:	20c8      	movs	r0, #200	; 0xc8
 8007398:	f7fa f8e2 	bl	8001560 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, MPU9250_DLPF_BW_42); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 800739c:	2303      	movs	r3, #3
 800739e:	2207      	movs	r2, #7
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	211a      	movs	r1, #26
 80073a4:	2308      	movs	r3, #8
 80073a6:	20d2      	movs	r0, #210	; 0xd2
 80073a8:	f7fd f9c2 	bl	8004730 <I2C_ByteWrite>
	  HAL_Delay(100);
 80073ac:	2064      	movs	r0, #100	; 0x64
 80073ae:	f7fa f8d7 	bl	8001560 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x04);  //0x00 SMPLRT_DIV    -- SMPLRT_DIV = 0  Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
 80073b2:	2304      	movs	r3, #4
 80073b4:	2207      	movs	r2, #7
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	e02c      	b.n	8007414 <MPU9250_Init+0x360>
 80073ba:	bf00      	nop
 80073bc:	20001278 	.word	0x20001278
 80073c0:	08010dc6 	.word	0x08010dc6
 80073c4:	20001284 	.word	0x20001284
 80073c8:	20001524 	.word	0x20001524
 80073cc:	08010dd2 	.word	0x08010dd2
 80073d0:	08010de5 	.word	0x08010de5
 80073d4:	20000720 	.word	0x20000720
 80073d8:	08010e32 	.word	0x08010e32
 80073dc:	08010e45 	.word	0x08010e45
 80073e0:	08010e91 	.word	0x08010e91
 80073e4:	08010edd 	.word	0x08010edd
 80073e8:	08010f29 	.word	0x08010f29
 80073ec:	08010f71 	.word	0x08010f71
 80073f0:	08010fb9 	.word	0x08010fb9
 80073f4:	08011001 	.word	0x08011001
 80073f8:	20000744 	.word	0x20000744
 80073fc:	2000083c 	.word	0x2000083c
 8007400:	0801101e 	.word	0x0801101e
 8007404:	08011033 	.word	0x08011033
 8007408:	447a0000 	.word	0x447a0000
 800740c:	08011049 	.word	0x08011049
 8007410:	08011062 	.word	0x08011062
 8007414:	2119      	movs	r1, #25
 8007416:	2308      	movs	r3, #8
 8007418:	20d2      	movs	r0, #210	; 0xd2
 800741a:	f7fd f989 	bl	8004730 <I2C_ByteWrite>
	  HAL_Delay(100);
 800741e:	2064      	movs	r0, #100	; 0x64
 8007420:	f7fa f89e 	bl	8001560 <HAL_Delay>
	  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 1, rawADC, 1);
 8007424:	9400      	str	r4, [sp, #0]
 8007426:	462b      	mov	r3, r5
 8007428:	4622      	mov	r2, r4
 800742a:	211b      	movs	r1, #27
 800742c:	20d2      	movs	r0, #210	; 0xd2
 800742e:	f7fd f9e5 	bl	80047fc <I2C_ByteRead>
	  c = c | Gscale << 3; // Set full scale range for the gyro
 8007432:	4ba0      	ldr	r3, [pc, #640]	; (80076b4 <MPU9250_Init+0x600>)
	  uint8_t c = rawADC[0];
 8007434:	782e      	ldrb	r6, [r5, #0]
	  c = c | Gscale << 3; // Set full scale range for the gyro
 8007436:	781b      	ldrb	r3, [r3, #0]
	  c = c & ~0x18; // Clear AFS bits [4:3]
 8007438:	f026 061a 	bic.w	r6, r6, #26
	  c = c | Gscale << 3; // Set full scale range for the gyro
 800743c:	ea46 06c3 	orr.w	r6, r6, r3, lsl #3
 8007440:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
    sprintf(Buf, " GYRO : %d \r\n", c);
 8007444:	4632      	mov	r2, r6
 8007446:	499c      	ldr	r1, [pc, #624]	; (80076b8 <MPU9250_Init+0x604>)
 8007448:	489c      	ldr	r0, [pc, #624]	; (80076bc <MPU9250_Init+0x608>)
 800744a:	f002 faed 	bl	8009a28 <sprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 800744e:	489b      	ldr	r0, [pc, #620]	; (80076bc <MPU9250_Init+0x608>)
 8007450:	f7f8 fe7e 	bl	8000150 <strlen>
 8007454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007458:	b282      	uxth	r2, r0
 800745a:	4998      	ldr	r1, [pc, #608]	; (80076bc <MPU9250_Init+0x608>)
 800745c:	4898      	ldr	r0, [pc, #608]	; (80076c0 <MPU9250_Init+0x60c>)
 800745e:	f7fc fc8b 	bl	8003d78 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, c);
 8007462:	9600      	str	r6, [sp, #0]
 8007464:	2308      	movs	r3, #8
 8007466:	2207      	movs	r2, #7
 8007468:	211b      	movs	r1, #27
 800746a:	20d2      	movs	r0, #210	; 0xd2
 800746c:	f7fd f960 	bl	8004730 <I2C_ByteWrite>
	  HAL_Delay(100);
 8007470:	2064      	movs	r0, #100	; 0x64
 8007472:	f7fa f875 	bl	8001560 <HAL_Delay>
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 1, rawADC, 1);
 8007476:	9400      	str	r4, [sp, #0]
 8007478:	462b      	mov	r3, r5
 800747a:	4622      	mov	r2, r4
 800747c:	211c      	movs	r1, #28
 800747e:	20d2      	movs	r0, #210	; 0xd2
 8007480:	f7fd f9bc 	bl	80047fc <I2C_ByteRead>
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 8007484:	4b8f      	ldr	r3, [pc, #572]	; (80076c4 <MPU9250_Init+0x610>)
    c = rawADC[0];
 8007486:	782e      	ldrb	r6, [r5, #0]
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 8007488:	781b      	ldrb	r3, [r3, #0]
    c = c & ~0x18;  // Clear AFS bits [4:3]
 800748a:	f026 0618 	bic.w	r6, r6, #24
    c = c | Ascale << 3; // Set full scale range for the accelerometer
 800748e:	ea46 06c3 	orr.w	r6, r6, r3, lsl #3
 8007492:	b2f6      	uxtb	r6, r6
    sprintf(Buf, " ACEL : %d \r\n", c);
 8007494:	4632      	mov	r2, r6
 8007496:	498c      	ldr	r1, [pc, #560]	; (80076c8 <MPU9250_Init+0x614>)
 8007498:	4888      	ldr	r0, [pc, #544]	; (80076bc <MPU9250_Init+0x608>)
 800749a:	f002 fac5 	bl	8009a28 <sprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 800749e:	4887      	ldr	r0, [pc, #540]	; (80076bc <MPU9250_Init+0x608>)
 80074a0:	f7f8 fe56 	bl	8000150 <strlen>
 80074a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074a8:	b282      	uxth	r2, r0
 80074aa:	4984      	ldr	r1, [pc, #528]	; (80076bc <MPU9250_Init+0x608>)
 80074ac:	4884      	ldr	r0, [pc, #528]	; (80076c0 <MPU9250_Init+0x60c>)
 80074ae:	f7fc fc63 	bl	8003d78 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, c);
 80074b2:	9600      	str	r6, [sp, #0]
 80074b4:	2308      	movs	r3, #8
 80074b6:	2207      	movs	r2, #7
 80074b8:	211c      	movs	r1, #28
 80074ba:	20d2      	movs	r0, #210	; 0xd2
 80074bc:	f7fd f938 	bl	8004730 <I2C_ByteWrite>
	  HAL_Delay(100);
 80074c0:	2064      	movs	r0, #100	; 0x64
 80074c2:	f7fa f84d 	bl	8001560 <HAL_Delay>
    I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 1, rawADC, 1);
 80074c6:	462b      	mov	r3, r5
 80074c8:	9400      	str	r4, [sp, #0]
 80074ca:	4622      	mov	r2, r4
 80074cc:	211d      	movs	r1, #29
 80074ce:	20d2      	movs	r0, #210	; 0xd2
 80074d0:	f7fd f994 	bl	80047fc <I2C_ByteRead>
    c = rawADC[0];
 80074d4:	782e      	ldrb	r6, [r5, #0]
    sprintf(Buf, " ACEL2 : %d \r\n", c);
 80074d6:	497d      	ldr	r1, [pc, #500]	; (80076cc <MPU9250_Init+0x618>)
    c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80074d8:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80074dc:	f046 0603 	orr.w	r6, r6, #3
    sprintf(Buf, " ACEL2 : %d \r\n", c);
 80074e0:	4632      	mov	r2, r6
 80074e2:	4876      	ldr	r0, [pc, #472]	; (80076bc <MPU9250_Init+0x608>)
 80074e4:	f002 faa0 	bl	8009a28 <sprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 80074e8:	4874      	ldr	r0, [pc, #464]	; (80076bc <MPU9250_Init+0x608>)
 80074ea:	f7f8 fe31 	bl	8000150 <strlen>
 80074ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074f2:	b282      	uxth	r2, r0
 80074f4:	4971      	ldr	r1, [pc, #452]	; (80076bc <MPU9250_Init+0x608>)
 80074f6:	4872      	ldr	r0, [pc, #456]	; (80076c0 <MPU9250_Init+0x60c>)
 80074f8:	f7fc fc3e 	bl	8003d78 <HAL_UART_Transmit>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, c);
 80074fc:	2308      	movs	r3, #8
 80074fe:	2207      	movs	r2, #7
 8007500:	211d      	movs	r1, #29
 8007502:	9600      	str	r6, [sp, #0]
 8007504:	20d2      	movs	r0, #210	; 0xd2
 8007506:	f7fd f913 	bl	8004730 <I2C_ByteWrite>
		HAL_Delay(100);
 800750a:	2064      	movs	r0, #100	; 0x64
 800750c:	f7fa f828 	bl	8001560 <HAL_Delay>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_PIN_CFG, 7, 8, 0x22);
 8007510:	2322      	movs	r3, #34	; 0x22
 8007512:	2207      	movs	r2, #7
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	2137      	movs	r1, #55	; 0x37
 8007518:	2308      	movs	r3, #8
 800751a:	20d2      	movs	r0, #210	; 0xd2
 800751c:	f7fd f908 	bl	8004730 <I2C_ByteWrite>
    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x01);
 8007520:	2308      	movs	r3, #8
 8007522:	2207      	movs	r2, #7
 8007524:	9400      	str	r4, [sp, #0]
 8007526:	2138      	movs	r1, #56	; 0x38
 8007528:	20d2      	movs	r0, #210	; 0xd2
 800752a:	f7fd f901 	bl	8004730 <I2C_ByteWrite>
	HAL_Delay(100); // for stability
 800752e:	2064      	movs	r0, #100	; 0x64
 8007530:	f7fa f816 	bl	8001560 <HAL_Delay>
  sprintf(Buf, "AK8963 Init Start!\r\n");
 8007534:	4966      	ldr	r1, [pc, #408]	; (80076d0 <MPU9250_Init+0x61c>)
 8007536:	4861      	ldr	r0, [pc, #388]	; (80076bc <MPU9250_Init+0x608>)
 8007538:	f002 fa9a 	bl	8009a70 <strcpy>
  HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 800753c:	485f      	ldr	r0, [pc, #380]	; (80076bc <MPU9250_Init+0x608>)
 800753e:	f7f8 fe07 	bl	8000150 <strlen>
 8007542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007546:	b282      	uxth	r2, r0
 8007548:	495c      	ldr	r1, [pc, #368]	; (80076bc <MPU9250_Init+0x608>)
 800754a:	485d      	ldr	r0, [pc, #372]	; (80076c0 <MPU9250_Init+0x60c>)
 800754c:	f7fc fc14 	bl	8003d78 <HAL_UART_Transmit>
  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, WHO_AM_I_AK8963, 1, rawADC, 1);
 8007550:	462b      	mov	r3, r5
 8007552:	9400      	str	r4, [sp, #0]
 8007554:	4622      	mov	r2, r4
 8007556:	4639      	mov	r1, r7
 8007558:	2018      	movs	r0, #24
 800755a:	f7fd f94f 	bl	80047fc <I2C_ByteRead>
  sprintf(Buf, "I AM 0x%x\r\n", whoami);
 800755e:	782a      	ldrb	r2, [r5, #0]
 8007560:	495c      	ldr	r1, [pc, #368]	; (80076d4 <MPU9250_Init+0x620>)
 8007562:	4856      	ldr	r0, [pc, #344]	; (80076bc <MPU9250_Init+0x608>)
 8007564:	f002 fa60 	bl	8009a28 <sprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007568:	4854      	ldr	r0, [pc, #336]	; (80076bc <MPU9250_Init+0x608>)
 800756a:	f7f8 fdf1 	bl	8000150 <strlen>
 800756e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007572:	b282      	uxth	r2, r0
 8007574:	4951      	ldr	r1, [pc, #324]	; (80076bc <MPU9250_Init+0x608>)
 8007576:	4852      	ldr	r0, [pc, #328]	; (80076c0 <MPU9250_Init+0x60c>)
 8007578:	f7fc fbfe 	bl	8003d78 <HAL_UART_Transmit>
  sprintf(Buf, "I SHOULD BE 0x48\r\n");
 800757c:	4956      	ldr	r1, [pc, #344]	; (80076d8 <MPU9250_Init+0x624>)
 800757e:	484f      	ldr	r0, [pc, #316]	; (80076bc <MPU9250_Init+0x608>)
 8007580:	f002 fa76 	bl	8009a70 <strcpy>
  HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007584:	484d      	ldr	r0, [pc, #308]	; (80076bc <MPU9250_Init+0x608>)
 8007586:	f7f8 fde3 	bl	8000150 <strlen>
 800758a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800758e:	b282      	uxth	r2, r0
 8007590:	494a      	ldr	r1, [pc, #296]	; (80076bc <MPU9250_Init+0x608>)
 8007592:	484b      	ldr	r0, [pc, #300]	; (80076c0 <MPU9250_Init+0x60c>)
 8007594:	f7fc fbf0 	bl	8003d78 <HAL_UART_Transmit>
	sprintf(Buf, "AK8963 Init (Compass sensor)\r\n");
 8007598:	4950      	ldr	r1, [pc, #320]	; (80076dc <MPU9250_Init+0x628>)
 800759a:	4848      	ldr	r0, [pc, #288]	; (80076bc <MPU9250_Init+0x608>)
 800759c:	f002 fa68 	bl	8009a70 <strcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 80075a0:	4846      	ldr	r0, [pc, #280]	; (80076bc <MPU9250_Init+0x608>)
 80075a2:	f7f8 fdd5 	bl	8000150 <strlen>
	initAK8963(magCalibration);
 80075a6:	4c4e      	ldr	r4, [pc, #312]	; (80076e0 <MPU9250_Init+0x62c>)
	HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 80075a8:	b282      	uxth	r2, r0
 80075aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075ae:	4943      	ldr	r1, [pc, #268]	; (80076bc <MPU9250_Init+0x608>)
 80075b0:	4843      	ldr	r0, [pc, #268]	; (80076c0 <MPU9250_Init+0x60c>)
 80075b2:	f7fc fbe1 	bl	8003d78 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 80075b6:	2064      	movs	r0, #100	; 0x64
 80075b8:	f7f9 ffd2 	bl	8001560 <HAL_Delay>
	initAK8963(magCalibration);
 80075bc:	4620      	mov	r0, r4
 80075be:	f7ff faf7 	bl	8006bb0 <initAK8963>
	HAL_Delay(100); // for stability
 80075c2:	2064      	movs	r0, #100	; 0x64
 80075c4:	f7f9 ffcc 	bl	8001560 <HAL_Delay>
  getAres();
 80075c8:	f7fe fe74 	bl	80062b4 <getAres>
  getGres();
 80075cc:	f7fe fe54 	bl	8006278 <getGres>
  getMres();
 80075d0:	f7fe fe3e 	bl	8006250 <getMres>
	sprintf(Buf, "ASAX : %.2f\r\n", magCalibration[0]);
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	f7f8 ff27 	bl	8000428 <__aeabi_f2d>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4837      	ldr	r0, [pc, #220]	; (80076bc <MPU9250_Init+0x608>)
 80075e0:	4940      	ldr	r1, [pc, #256]	; (80076e4 <MPU9250_Init+0x630>)
 80075e2:	f002 fa21 	bl	8009a28 <sprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 80075e6:	4835      	ldr	r0, [pc, #212]	; (80076bc <MPU9250_Init+0x608>)
 80075e8:	f7f8 fdb2 	bl	8000150 <strlen>
 80075ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075f0:	b282      	uxth	r2, r0
 80075f2:	4932      	ldr	r1, [pc, #200]	; (80076bc <MPU9250_Init+0x608>)
 80075f4:	4832      	ldr	r0, [pc, #200]	; (80076c0 <MPU9250_Init+0x60c>)
 80075f6:	f7fc fbbf 	bl	8003d78 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 80075fa:	2064      	movs	r0, #100	; 0x64
 80075fc:	f7f9 ffb0 	bl	8001560 <HAL_Delay>
	sprintf(Buf, "ASAY : %.2f\r\n", magCalibration[1]);
 8007600:	6860      	ldr	r0, [r4, #4]
 8007602:	f7f8 ff11 	bl	8000428 <__aeabi_f2d>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	482c      	ldr	r0, [pc, #176]	; (80076bc <MPU9250_Init+0x608>)
 800760c:	4936      	ldr	r1, [pc, #216]	; (80076e8 <MPU9250_Init+0x634>)
 800760e:	f002 fa0b 	bl	8009a28 <sprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007612:	482a      	ldr	r0, [pc, #168]	; (80076bc <MPU9250_Init+0x608>)
 8007614:	f7f8 fd9c 	bl	8000150 <strlen>
 8007618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800761c:	b282      	uxth	r2, r0
 800761e:	4927      	ldr	r1, [pc, #156]	; (80076bc <MPU9250_Init+0x608>)
 8007620:	4827      	ldr	r0, [pc, #156]	; (80076c0 <MPU9250_Init+0x60c>)
 8007622:	f7fc fba9 	bl	8003d78 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 8007626:	2064      	movs	r0, #100	; 0x64
 8007628:	f7f9 ff9a 	bl	8001560 <HAL_Delay>
	sprintf(Buf, "ASAZ : %.2f\r\n", magCalibration[2]);
 800762c:	68a0      	ldr	r0, [r4, #8]
 800762e:	f7f8 fefb 	bl	8000428 <__aeabi_f2d>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4821      	ldr	r0, [pc, #132]	; (80076bc <MPU9250_Init+0x608>)
 8007638:	492c      	ldr	r1, [pc, #176]	; (80076ec <MPU9250_Init+0x638>)
 800763a:	f002 f9f5 	bl	8009a28 <sprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 800763e:	481f      	ldr	r0, [pc, #124]	; (80076bc <MPU9250_Init+0x608>)
 8007640:	f7f8 fd86 	bl	8000150 <strlen>
 8007644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007648:	b282      	uxth	r2, r0
 800764a:	491c      	ldr	r1, [pc, #112]	; (80076bc <MPU9250_Init+0x608>)
 800764c:	481c      	ldr	r0, [pc, #112]	; (80076c0 <MPU9250_Init+0x60c>)
 800764e:	f7fc fb93 	bl	8003d78 <HAL_UART_Transmit>
	HAL_Delay(100); // for stability
 8007652:	2064      	movs	r0, #100	; 0x64
}
 8007654:	b005      	add	sp, #20
 8007656:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(100); // for stability
 800765a:	f7f9 bf81 	b.w	8001560 <HAL_Delay>
    sprintf(Buf, "Could not connect to MPU9250: %#x\r\n", whoami);
 800765e:	4632      	mov	r2, r6
 8007660:	4923      	ldr	r1, [pc, #140]	; (80076f0 <MPU9250_Init+0x63c>)
 8007662:	4816      	ldr	r0, [pc, #88]	; (80076bc <MPU9250_Init+0x608>)
 8007664:	f002 f9e0 	bl	8009a28 <sprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007668:	4814      	ldr	r0, [pc, #80]	; (80076bc <MPU9250_Init+0x608>)
 800766a:	f7f8 fd71 	bl	8000150 <strlen>
 800766e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007672:	b282      	uxth	r2, r0
 8007674:	4911      	ldr	r1, [pc, #68]	; (80076bc <MPU9250_Init+0x608>)
 8007676:	4812      	ldr	r0, [pc, #72]	; (80076c0 <MPU9250_Init+0x60c>)
 8007678:	f7fc fb7e 	bl	8003d78 <HAL_UART_Transmit>
    sprintf(Buf, "Communication failed, abort!\r\n");
 800767c:	491d      	ldr	r1, [pc, #116]	; (80076f4 <MPU9250_Init+0x640>)
 800767e:	480f      	ldr	r0, [pc, #60]	; (80076bc <MPU9250_Init+0x608>)
 8007680:	f002 f9f6 	bl	8009a70 <strcpy>
    HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007684:	480d      	ldr	r0, [pc, #52]	; (80076bc <MPU9250_Init+0x608>)
 8007686:	f7f8 fd63 	bl	8000150 <strlen>
 800768a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800768e:	b282      	uxth	r2, r0
 8007690:	490a      	ldr	r1, [pc, #40]	; (80076bc <MPU9250_Init+0x608>)
 8007692:	480b      	ldr	r0, [pc, #44]	; (80076c0 <MPU9250_Init+0x60c>)
 8007694:	f7fc fb70 	bl	8003d78 <HAL_UART_Transmit>
    while (Error.error !=0)
 8007698:	4d17      	ldr	r5, [pc, #92]	; (80076f8 <MPU9250_Init+0x644>)
 800769a:	782b      	ldrb	r3, [r5, #0]
 800769c:	b913      	cbnz	r3, 80076a4 <MPU9250_Init+0x5f0>
}
 800769e:	b005      	add	sp, #20
 80076a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error.error = 1;
 80076a4:	702c      	strb	r4, [r5, #0]
      error_signal();
 80076a6:	f7fd fdd5 	bl	8005254 <error_signal>
      HAL_Delay(4);
 80076aa:	2004      	movs	r0, #4
 80076ac:	f7f9 ff58 	bl	8001560 <HAL_Delay>
 80076b0:	e7f3      	b.n	800769a <MPU9250_Init+0x5e6>
 80076b2:	bf00      	nop
 80076b4:	20000009 	.word	0x20000009
 80076b8:	0801107c 	.word	0x0801107c
 80076bc:	20001284 	.word	0x20001284
 80076c0:	20001524 	.word	0x20001524
 80076c4:	20000008 	.word	0x20000008
 80076c8:	0801108a 	.word	0x0801108a
 80076cc:	08011098 	.word	0x08011098
 80076d0:	080110a7 	.word	0x080110a7
 80076d4:	08010dc6 	.word	0x08010dc6
 80076d8:	080110bc 	.word	0x080110bc
 80076dc:	080110cf 	.word	0x080110cf
 80076e0:	20000858 	.word	0x20000858
 80076e4:	080110ee 	.word	0x080110ee
 80076e8:	080110fc 	.word	0x080110fc
 80076ec:	0801110a 	.word	0x0801110a
 80076f0:	08011118 	.word	0x08011118
 80076f4:	0801113c 	.word	0x0801113c
 80076f8:	20001564 	.word	0x20001564

080076fc <Baro_Common>:

void Baro_Common(void){
  static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
  static int baroHistIdx = 0;

  uint8_t indexplus1 = (baroHistIdx + 1);
 80076fc:	490a      	ldr	r1, [pc, #40]	; (8007728 <Baro_Common+0x2c>)
  if (indexplus1 == 21) indexplus1 = 0;
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 80076fe:	4a0b      	ldr	r2, [pc, #44]	; (800772c <Baro_Common+0x30>)
  uint8_t indexplus1 = (baroHistIdx + 1);
 8007700:	6808      	ldr	r0, [r1, #0]
void Baro_Common(void){
 8007702:	b530      	push	{r4, r5, lr}
  uint8_t indexplus1 = (baroHistIdx + 1);
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	b2db      	uxtb	r3, r3
  if (indexplus1 == 21) indexplus1 = 0;
 8007708:	2b15      	cmp	r3, #21
 800770a:	bf08      	it	eq
 800770c:	2300      	moveq	r3, #0
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 800770e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007710:	4c07      	ldr	r4, [pc, #28]	; (8007730 <Baro_Common+0x34>)
  baroPressureSum += baroHistTab[baroHistIdx];
  baroPressureSum -= baroHistTab[indexplus1];
  baroHistIdx = indexplus1;
 8007712:	600b      	str	r3, [r1, #0]
  baroHistTab[baroHistIdx] = ms5611.realPressure;
 8007714:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
  baroPressureSum -= baroHistTab[indexplus1];
 8007718:	4806      	ldr	r0, [pc, #24]	; (8007734 <Baro_Common+0x38>)
 800771a:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  baroPressureSum += baroHistTab[baroHistIdx];
 800771e:	6805      	ldr	r5, [r0, #0]
 8007720:	442a      	add	r2, r5
  baroPressureSum -= baroHistTab[indexplus1];
 8007722:	1b12      	subs	r2, r2, r4
 8007724:	6002      	str	r2, [r0, #0]
  baroHistIdx = indexplus1;
 8007726:	bd30      	pop	{r4, r5, pc}
 8007728:	20000770 	.word	0x20000770
 800772c:	20001138 	.word	0x20001138
 8007730:	20000774 	.word	0x20000774
 8007734:	20000834 	.word	0x20000834

08007738 <getEstimatedAltitude>:
       }
       state ++;
    return 1;
}

uint8_t getEstimatedAltitude(void){
 8007738:	b570      	push	{r4, r5, r6, lr}
  static int32_t baroAltOffset = 0;
  int32_t BaroAlt_tmp;
  static int32_t baroGroundAltitude = 0;
  static int32_t baroGroundPressure = 0;
  static uint16_t previousT;
  uint16_t currentT = micros();
 800773a:	f001 fa97 	bl	8008c6c <micros>
  uint16_t dTime;

  dTime = currentT - previousT;
  if (dTime < 25000) return 0;
 800773e:	f246 11a7 	movw	r1, #24999	; 0x61a7
  dTime = currentT - previousT;
 8007742:	4a42      	ldr	r2, [pc, #264]	; (800784c <getEstimatedAltitude+0x114>)
  uint16_t currentT = micros();
 8007744:	b280      	uxth	r0, r0
  dTime = currentT - previousT;
 8007746:	8813      	ldrh	r3, [r2, #0]
 8007748:	1ac3      	subs	r3, r0, r3
  if (dTime < 25000) return 0;
 800774a:	b29b      	uxth	r3, r3
 800774c:	428b      	cmp	r3, r1
 800774e:	d97a      	bls.n	8007846 <getEstimatedAltitude+0x10e>
  previousT = currentT;
  if (calibratingB > 0) {
 8007750:	4c3f      	ldr	r4, [pc, #252]	; (8007850 <getEstimatedAltitude+0x118>)
  previousT = currentT;
 8007752:	8010      	strh	r0, [r2, #0]
  if (calibratingB > 0) {
 8007754:	8823      	ldrh	r3, [r4, #0]
 8007756:	b32b      	cbz	r3, 80077a4 <getEstimatedAltitude+0x6c>
//    logBaroGroundPressureSum = log(baroPressureSum);
//    baroGroundTemperatureScale = ((int32_t)ms5611.realTemperature + 27315) * (2 * 29.271267f); // 2 *  is included here => no need for * 2  on BaroAlt in additional LPF

    baroGroundPressure -= baroGroundPressure / 8;
    baroGroundPressure += baroPressureSum / (21 - 1);
 8007758:	2014      	movs	r0, #20
 800775a:	4b3e      	ldr	r3, [pc, #248]	; (8007854 <getEstimatedAltitude+0x11c>)
    baroGroundPressure -= baroGroundPressure / 8;
 800775c:	493e      	ldr	r1, [pc, #248]	; (8007858 <getEstimatedAltitude+0x120>)
    baroGroundPressure += baroPressureSum / (21 - 1);
 800775e:	681b      	ldr	r3, [r3, #0]
    baroGroundPressure -= baroGroundPressure / 8;
 8007760:	680a      	ldr	r2, [r1, #0]
    baroGroundPressure += baroPressureSum / (21 - 1);
 8007762:	fbb3 f3f0 	udiv	r3, r3, r0
    baroGroundPressure -= baroGroundPressure / 8;
 8007766:	2008      	movs	r0, #8
 8007768:	fb92 f5f0 	sdiv	r5, r2, r0
 800776c:	1b52      	subs	r2, r2, r5
    baroGroundPressure += baroPressureSum / (21 - 1);
 800776e:	4413      	add	r3, r2
 8007770:	600b      	str	r3, [r1, #0]
    baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 8007772:	fb93 f0f0 	sdiv	r0, r3, r0
 8007776:	f7f9 faad 	bl	8000cd4 <__aeabi_i2f>
 800777a:	4938      	ldr	r1, [pc, #224]	; (800785c <getEstimatedAltitude+0x124>)
 800777c:	f7f9 fbb2 	bl	8000ee4 <__aeabi_fdiv>
 8007780:	4937      	ldr	r1, [pc, #220]	; (8007860 <getEstimatedAltitude+0x128>)
 8007782:	f006 fd5d 	bl	800e240 <powf>
 8007786:	4601      	mov	r1, r0
 8007788:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800778c:	f7f9 f9ec 	bl	8000b68 <__aeabi_fsub>
 8007790:	4934      	ldr	r1, [pc, #208]	; (8007864 <getEstimatedAltitude+0x12c>)
 8007792:	f7f9 faf3 	bl	8000d7c <__aeabi_fmul>
 8007796:	f7f9 fccd 	bl	8001134 <__aeabi_f2iz>
 800779a:	4b33      	ldr	r3, [pc, #204]	; (8007868 <getEstimatedAltitude+0x130>)
 800779c:	6018      	str	r0, [r3, #0]
    calibratingB--;
 800779e:	8823      	ldrh	r3, [r4, #0]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	8023      	strh	r3, [r4, #0]
  }

  // calculates height from ground via baro readings
  // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
  if(isBaroCalibrationComplete()){
 80077a4:	8823      	ldrh	r3, [r4, #0]
 80077a6:	4d31      	ldr	r5, [pc, #196]	; (800786c <getEstimatedAltitude+0x134>)
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d142      	bne.n	8007832 <getEstimatedAltitude+0xfa>
  BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (21 - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 80077ac:	4b29      	ldr	r3, [pc, #164]	; (8007854 <getEstimatedAltitude+0x11c>)
  BaroAlt_tmp -= baroGroundAltitude;
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.6f + (float)BaroAlt_tmp * (1.0f - 0.6f)); // additional LPF to reduce baro noise
 80077ae:	4c30      	ldr	r4, [pc, #192]	; (8007870 <getEstimatedAltitude+0x138>)
  BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (21 - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	2314      	movs	r3, #20
 80077b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80077b8:	f7f9 fa88 	bl	8000ccc <__aeabi_ui2f>
 80077bc:	4927      	ldr	r1, [pc, #156]	; (800785c <getEstimatedAltitude+0x124>)
 80077be:	f7f9 fb91 	bl	8000ee4 <__aeabi_fdiv>
 80077c2:	4927      	ldr	r1, [pc, #156]	; (8007860 <getEstimatedAltitude+0x128>)
 80077c4:	f006 fd3c 	bl	800e240 <powf>
 80077c8:	4601      	mov	r1, r0
 80077ca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80077ce:	f7f9 f9cb 	bl	8000b68 <__aeabi_fsub>
 80077d2:	4924      	ldr	r1, [pc, #144]	; (8007864 <getEstimatedAltitude+0x12c>)
 80077d4:	f7f9 fad2 	bl	8000d7c <__aeabi_fmul>
 80077d8:	f006 fab4 	bl	800dd44 <lrintf>
  BaroAlt_tmp -= baroGroundAltitude;
 80077dc:	4b22      	ldr	r3, [pc, #136]	; (8007868 <getEstimatedAltitude+0x130>)
 80077de:	681b      	ldr	r3, [r3, #0]
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.6f + (float)BaroAlt_tmp * (1.0f - 0.6f)); // additional LPF to reduce baro noise
 80077e0:	1ac0      	subs	r0, r0, r3
 80077e2:	f7f9 fa77 	bl	8000cd4 <__aeabi_i2f>
 80077e6:	4923      	ldr	r1, [pc, #140]	; (8007874 <getEstimatedAltitude+0x13c>)
 80077e8:	f7f9 fac8 	bl	8000d7c <__aeabi_fmul>
 80077ec:	4606      	mov	r6, r0
 80077ee:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80077f0:	f7f9 fa70 	bl	8000cd4 <__aeabi_i2f>
 80077f4:	4920      	ldr	r1, [pc, #128]	; (8007878 <getEstimatedAltitude+0x140>)
 80077f6:	f7f9 fac1 	bl	8000d7c <__aeabi_fmul>
 80077fa:	4601      	mov	r1, r0
 80077fc:	4630      	mov	r0, r6
 80077fe:	f7f9 f9b5 	bl	8000b6c <__addsf3>
 8007802:	f006 fa9f 	bl	800dd44 <lrintf>
 8007806:	6720      	str	r0, [r4, #112]	; 0x70
  alt.EstAlt = ms5611.BaroAlt;
 8007808:	6028      	str	r0, [r5, #0]
  }else{
    alt.EstAlt = 0;
  }

  if ((f.ARMED|f.mag_reset) && !altitudeOffsetSet) {
 800780a:	4a1c      	ldr	r2, [pc, #112]	; (800787c <getEstimatedAltitude+0x144>)
 800780c:	491c      	ldr	r1, [pc, #112]	; (8007880 <getEstimatedAltitude+0x148>)
 800780e:	7e53      	ldrb	r3, [r2, #25]
 8007810:	7850      	ldrb	r0, [r2, #1]
 8007812:	4303      	orrs	r3, r0
 8007814:	4b1b      	ldr	r3, [pc, #108]	; (8007884 <getEstimatedAltitude+0x14c>)
 8007816:	d011      	beq.n	800783c <getEstimatedAltitude+0x104>
 8007818:	781c      	ldrb	r4, [r3, #0]
 800781a:	b96c      	cbnz	r4, 8007838 <getEstimatedAltitude+0x100>
      f.mag_reset = false;
 800781c:	7654      	strb	r4, [r2, #25]
      baroAltOffset = alt.EstAlt;
 800781e:	682a      	ldr	r2, [r5, #0]
 8007820:	600a      	str	r2, [r1, #0]
      altitudeOffsetSet = true;
 8007822:	2201      	movs	r2, #1
  } else if (!f.ARMED && altitudeOffsetSet) {
      altitudeOffsetSet = false;
 8007824:	701a      	strb	r2, [r3, #0]
  }
  alt.EstAlt -= baroAltOffset;
 8007826:	682b      	ldr	r3, [r5, #0]
 8007828:	680a      	ldr	r2, [r1, #0]
//   see: https://code.google.com/p/ardupilot-mega/source/browse/libraries/AP_Baro/AP_Baro.cpp

//  ms5611.BaroAlt = ( logBaroGroundPressureSum - log(baroPressureSum) ) * baroGroundTemperatureScale;
//  alt.EstAlt = (alt.EstAlt * 6 + ms5611.BaroAlt ) >> 3; // additional LPF to reduce baro noise (faster by 30 µs)
//if(alt.EstAlt < 0) alt.EstAlt = 0;
  return 1;
 800782a:	2001      	movs	r0, #1
  alt.EstAlt -= baroAltOffset;
 800782c:	1a9b      	subs	r3, r3, r2
 800782e:	602b      	str	r3, [r5, #0]
  return 1;
 8007830:	bd70      	pop	{r4, r5, r6, pc}
    alt.EstAlt = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	602b      	str	r3, [r5, #0]
 8007836:	e7e8      	b.n	800780a <getEstimatedAltitude+0xd2>
  } else if (!f.ARMED && altitudeOffsetSet) {
 8007838:	2800      	cmp	r0, #0
 800783a:	d1f4      	bne.n	8007826 <getEstimatedAltitude+0xee>
 800783c:	781a      	ldrb	r2, [r3, #0]
 800783e:	2a00      	cmp	r2, #0
 8007840:	d0f1      	beq.n	8007826 <getEstimatedAltitude+0xee>
      altitudeOffsetSet = false;
 8007842:	2200      	movs	r2, #0
 8007844:	e7ee      	b.n	8007824 <getEstimatedAltitude+0xec>
  if (dTime < 25000) return 0;
 8007846:	2000      	movs	r0, #0
}
 8007848:	bd70      	pop	{r4, r5, r6, pc}
 800784a:	bf00      	nop
 800784c:	20000876 	.word	0x20000876
 8007850:	20000010 	.word	0x20000010
 8007854:	20000834 	.word	0x20000834
 8007858:	2000076c 	.word	0x2000076c
 800785c:	47c5e680 	.word	0x47c5e680
 8007860:	3e42dcb1 	.word	0x3e42dcb1
 8007864:	4a8748d0 	.word	0x4a8748d0
 8007868:	20000768 	.word	0x20000768
 800786c:	20001264 	.word	0x20001264
 8007870:	20001138 	.word	0x20001138
 8007874:	3ecccccc 	.word	0x3ecccccc
 8007878:	3f19999a 	.word	0x3f19999a
 800787c:	2000105c 	.word	0x2000105c
 8007880:	20000760 	.word	0x20000760
 8007884:	2000075c 	.word	0x2000075c

08007888 <MS561101BA_Calculate>:

    return readRegister24(MS5611_CMD_ADC_READ);
}

void MS561101BA_Calculate(void){
  uint32_t D1 = ms5611.rawPressure;
 8007888:	4b53      	ldr	r3, [pc, #332]	; (80079d8 <MS561101BA_Calculate+0x150>)
void MS561101BA_Calculate(void){
 800788a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  uint32_t D2 = ms5611.rawTemp;
  int32_t dT = D2 - (uint32_t)ms5611.fc[4] * 256;
 800788e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007890:	8919      	ldrh	r1, [r3, #8]

  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8007892:	88dc      	ldrh	r4, [r3, #6]
  int32_t dT = D2 - (uint32_t)ms5611.fc[4] * 256;
 8007894:	eba0 2101 	sub.w	r1, r0, r1, lsl #8
  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 8007898:	fb84 4501 	smull	r4, r5, r4, r1
 800789c:	2c00      	cmp	r4, #0
 800789e:	f175 0000 	sbcs.w	r0, r5, #0
  uint32_t D1 = ms5611.rawPressure;
 80078a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 80078a4:	da02      	bge.n	80078ac <MS561101BA_Calculate+0x24>
 80078a6:	347f      	adds	r4, #127	; 0x7f
 80078a8:	f145 0500 	adc.w	r5, r5, #0
 80078ac:	ea4f 18d4 	mov.w	r8, r4, lsr #7
 80078b0:	ea48 6845 	orr.w	r8, r8, r5, lsl #25
 80078b4:	ea4f 19e5 	mov.w	r9, r5, asr #7
 80078b8:	2500      	movs	r5, #0
 80078ba:	885e      	ldrh	r6, [r3, #2]
  int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 80078bc:	8818      	ldrh	r0, [r3, #0]
  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 80078be:	0434      	lsls	r4, r6, #16
  int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 80078c0:	889e      	ldrh	r6, [r3, #4]
  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 80078c2:	eb18 0804 	adds.w	r8, r8, r4
  int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 80078c6:	fb86 6701 	smull	r6, r7, r6, r1
  int64_t OFF = (int64_t)ms5611.fc[1] * 65536 + (int64_t)ms5611.fc[3] * dT / 128;
 80078ca:	eb49 0905 	adc.w	r9, r9, r5
  int64_t SENS = (int64_t)ms5611.fc[0] * 32768 + (int64_t)ms5611.fc[2] * dT / 256;
 80078ce:	2e00      	cmp	r6, #0
 80078d0:	f177 0400 	sbcs.w	r4, r7, #0
 80078d4:	da02      	bge.n	80078dc <MS561101BA_Calculate+0x54>
 80078d6:	36ff      	adds	r6, #255	; 0xff
 80078d8:	f147 0700 	adc.w	r7, r7, #0
 80078dc:	0a34      	lsrs	r4, r6, #8
 80078de:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 80078e2:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 80078e6:	123d      	asrs	r5, r7, #8
 80078e8:	fbe0 4506 	umlal	r4, r5, r0, r6

  int32_t TEMP = 2000 + ((int64_t) dT * ms5611.fc[5]) / 8388608;
 80078ec:	8958      	ldrh	r0, [r3, #10]
 80078ee:	fb80 0101 	smull	r0, r1, r0, r1
 80078f2:	2800      	cmp	r0, #0
 80078f4:	f171 0600 	sbcs.w	r6, r1, #0
 80078f8:	da03      	bge.n	8007902 <MS561101BA_Calculate+0x7a>
 80078fa:	2700      	movs	r7, #0
 80078fc:	4e37      	ldr	r6, [pc, #220]	; (80079dc <MS561101BA_Calculate+0x154>)
 80078fe:	1980      	adds	r0, r0, r6
 8007900:	4179      	adcs	r1, r7
 8007902:	ea4f 5ed0 	mov.w	lr, r0, lsr #23
 8007906:	ea4e 2e41 	orr.w	lr, lr, r1, lsl #9
  ms5611.realTemperature = (uint32_t)TEMP;

  ms5611.OFF2 = 0;
 800790a:	2000      	movs	r0, #0
 800790c:	2100      	movs	r1, #0
  int32_t TEMP = 2000 + ((int64_t) dT * ms5611.fc[5]) / 8388608;
 800790e:	f50e 6cfa 	add.w	ip, lr, #2000	; 0x7d0
  ms5611.SENS2 = 0;

  if (TEMP < 2000)
 8007912:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
  ms5611.realTemperature = (uint32_t)TEMP;
 8007916:	f8a3 c054 	strh.w	ip, [r3, #84]	; 0x54
  ms5611.OFF2 = 0;
 800791a:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
  ms5611.SENS2 = 0;
 800791e:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  if (TEMP < 2000)
 8007922:	da26      	bge.n	8007972 <MS561101BA_Calculate+0xea>
  {
    ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8007924:	fb0e f00e 	mul.w	r0, lr, lr
    ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
  }

  if (TEMP < -1500)
 8007928:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80079e4 <MS561101BA_Calculate+0x15c>
    ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 800792c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007930:	1046      	asrs	r6, r0, #1
    ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8007932:	1080      	asrs	r0, r0, #2
    ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8007934:	17f7      	asrs	r7, r6, #31
    ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8007936:	17c1      	asrs	r1, r0, #31
  if (TEMP < -1500)
 8007938:	45d4      	cmp	ip, sl
    ms5611.OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 800793a:	e9c3 6710 	strd	r6, r7, [r3, #64]	; 0x40
    ms5611.SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 800793e:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  if (TEMP < -1500)
 8007942:	da16      	bge.n	8007972 <MS561101BA_Calculate+0xea>
  {
    ms5611.OFF2 = ms5611.OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8007944:	f60e 5eac 	addw	lr, lr, #3500	; 0xdac
 8007948:	fb0e fe0e 	mul.w	lr, lr, lr
 800794c:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 8007950:	eb16 060c 	adds.w	r6, r6, ip
 8007954:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8007958:	e9c3 6710 	strd	r6, r7, [r3, #64]	; 0x40
    ms5611.SENS2 = ms5611.SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 800795c:	260b      	movs	r6, #11
 800795e:	fb06 fe0e 	mul.w	lr, r6, lr
 8007962:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8007966:	eb10 000e 	adds.w	r0, r0, lr
 800796a:	eb41 71ee 	adc.w	r1, r1, lr, asr #31
 800796e:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
  }

  OFF = OFF - ms5611.OFF2;
  SENS = SENS - ms5611.SENS2;
 8007972:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007976:	1a24      	subs	r4, r4, r0
 8007978:	eb65 0501 	sbc.w	r5, r5, r1

  ms5611.realPressure = ((int64_t)D1 * SENS / 2097152 - OFF) / 32768;
 800797c:	fba4 0102 	umull	r0, r1, r4, r2
 8007980:	fb02 1105 	mla	r1, r2, r5, r1
 8007984:	2800      	cmp	r0, #0
 8007986:	f171 0200 	sbcs.w	r2, r1, #0
 800798a:	da03      	bge.n	8007994 <MS561101BA_Calculate+0x10c>
 800798c:	2500      	movs	r5, #0
 800798e:	4c14      	ldr	r4, [pc, #80]	; (80079e0 <MS561101BA_Calculate+0x158>)
 8007990:	1900      	adds	r0, r0, r4
 8007992:	4169      	adcs	r1, r5
 8007994:	0d44      	lsrs	r4, r0, #21
 8007996:	ea44 24c1 	orr.w	r4, r4, r1, lsl #11
 800799a:	154d      	asrs	r5, r1, #21
  OFF = OFF - ms5611.OFF2;
 800799c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80079a0:	ebb8 0800 	subs.w	r8, r8, r0
 80079a4:	eb69 0901 	sbc.w	r9, r9, r1
  ms5611.realPressure = ((int64_t)D1 * SENS / 2097152 - OFF) / 32768;
 80079a8:	ebb4 0808 	subs.w	r8, r4, r8
 80079ac:	eb65 0909 	sbc.w	r9, r5, r9
 80079b0:	f1b8 0f00 	cmp.w	r8, #0
 80079b4:	f179 0200 	sbcs.w	r2, r9, #0
 80079b8:	da06      	bge.n	80079c8 <MS561101BA_Calculate+0x140>
 80079ba:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80079be:	2100      	movs	r1, #0
 80079c0:	eb18 0800 	adds.w	r8, r8, r0
 80079c4:	eb49 0901 	adc.w	r9, r9, r1
 80079c8:	ea4f 32d8 	mov.w	r2, r8, lsr #15
 80079cc:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
 80079d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80079d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d6:	bf00      	nop
 80079d8:	20001138 	.word	0x20001138
 80079dc:	007fffff 	.word	0x007fffff
 80079e0:	001fffff 	.word	0x001fffff
 80079e4:	fffffa24 	.word	0xfffffa24

080079e8 <readRegister16>:
}

// Read 16-bit from register (oops MSB, LSB)
uint16_t readRegister16(uint8_t reg)
{
 80079e8:	b510      	push	{r4, lr}
    uint16_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);

    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 80079ea:	4c08      	ldr	r4, [pc, #32]	; (8007a0c <readRegister16+0x24>)
    I2C_Write(MS5611_ADDRESS, reg, 1);
 80079ec:	4601      	mov	r1, r0
 80079ee:	2201      	movs	r2, #1
 80079f0:	20ee      	movs	r0, #238	; 0xee
 80079f2:	f7fc ff45 	bl	8004880 <I2C_Write>
    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 80079f6:	2202      	movs	r2, #2
 80079f8:	4621      	mov	r1, r4
 80079fa:	20ee      	movs	r0, #238	; 0xee
 80079fc:	f7fc ff8a 	bl	8004914 <I2C_Read>

    uint8_t vha = rawADC[0];
    uint8_t vla = rawADC[1];

    value = vha << 8 | vla;
 8007a00:	7820      	ldrb	r0, [r4, #0]
 8007a02:	7863      	ldrb	r3, [r4, #1]

    return value;
}
 8007a04:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8007a08:	bd10      	pop	{r4, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20001278 	.word	0x20001278

08007a10 <MS5611_Init>:
{
 8007a10:	b570      	push	{r4, r5, r6, lr}
	sprintf(Buf, "Initialize MS-5611 Sensor\r\n");
 8007a12:	4923      	ldr	r1, [pc, #140]	; (8007aa0 <MS5611_Init+0x90>)
{
 8007a14:	4605      	mov	r5, r0
	sprintf(Buf, "Initialize MS-5611 Sensor\r\n");
 8007a16:	4823      	ldr	r0, [pc, #140]	; (8007aa4 <MS5611_Init+0x94>)
 8007a18:	f002 f82a 	bl	8009a70 <strcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007a1c:	4821      	ldr	r0, [pc, #132]	; (8007aa4 <MS5611_Init+0x94>)
 8007a1e:	f7f8 fb97 	bl	8000150 <strlen>
 8007a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a26:	b282      	uxth	r2, r0
 8007a28:	491e      	ldr	r1, [pc, #120]	; (8007aa4 <MS5611_Init+0x94>)
 8007a2a:	481f      	ldr	r0, [pc, #124]	; (8007aa8 <MS5611_Init+0x98>)
 8007a2c:	f7fc f9a4 	bl	8003d78 <HAL_UART_Transmit>
  I2C_Write(MS5611_ADDRESS, MS5611_CMD_RESET, 1);
 8007a30:	2201      	movs	r2, #1
 8007a32:	211e      	movs	r1, #30
 8007a34:	20ee      	movs	r0, #238	; 0xee
 8007a36:	f7fc ff23 	bl	8004880 <I2C_Write>
 8007a3a:	4c1c      	ldr	r4, [pc, #112]	; (8007aac <MS5611_Init+0x9c>)
  switch (osr)
 8007a3c:	2d08      	cmp	r5, #8
 8007a3e:	d808      	bhi.n	8007a52 <MS5611_Init+0x42>
 8007a40:	e8df f005 	tbb	[pc, r5]
 8007a44:	07260705 	.word	0x07260705
 8007a48:	072a0728 	.word	0x072a0728
 8007a4c:	2c          	.byte	0x2c
 8007a4d:	00          	.byte	0x00
      ms5611.ct = 1;
 8007a4e:	2301      	movs	r3, #1
      ms5611.ct = 10;
 8007a50:	7323      	strb	r3, [r4, #12]
  HAL_Delay(100);
 8007a52:	2064      	movs	r0, #100	; 0x64
  ms5611.uosr = osr;
 8007a54:	7365      	strb	r5, [r4, #13]
  HAL_Delay(100);
 8007a56:	f7f9 fd83 	bl	8001560 <HAL_Delay>
 8007a5a:	2500      	movs	r5, #0
    ms5611.fc[offset] = readRegister16(MS5611_CMD_READ_PROM + (offset * 2));
 8007a5c:	f1a5 005e 	sub.w	r0, r5, #94	; 0x5e
 8007a60:	b2c0      	uxtb	r0, r0
 8007a62:	f7ff ffc1 	bl	80079e8 <readRegister16>
 8007a66:	5360      	strh	r0, [r4, r5]
 8007a68:	3502      	adds	r5, #2
  for (uint8_t offset = 0; offset < 6; offset++)
 8007a6a:	2d0c      	cmp	r5, #12
 8007a6c:	d1f6      	bne.n	8007a5c <MS5611_Init+0x4c>
  sprintf(Buf, "Oversampling: %d\r\n", ms5611.uosr);
 8007a6e:	7b62      	ldrb	r2, [r4, #13]
 8007a70:	490f      	ldr	r1, [pc, #60]	; (8007ab0 <MS5611_Init+0xa0>)
 8007a72:	480c      	ldr	r0, [pc, #48]	; (8007aa4 <MS5611_Init+0x94>)
 8007a74:	f001 ffd8 	bl	8009a28 <sprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007a78:	480a      	ldr	r0, [pc, #40]	; (8007aa4 <MS5611_Init+0x94>)
 8007a7a:	f7f8 fb69 	bl	8000150 <strlen>
}
 8007a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007a82:	b282      	uxth	r2, r0
 8007a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a88:	4906      	ldr	r1, [pc, #24]	; (8007aa4 <MS5611_Init+0x94>)
 8007a8a:	4807      	ldr	r0, [pc, #28]	; (8007aa8 <MS5611_Init+0x98>)
 8007a8c:	f7fc b974 	b.w	8003d78 <HAL_UART_Transmit>
      ms5611.ct = 2;
 8007a90:	2302      	movs	r3, #2
 8007a92:	e7dd      	b.n	8007a50 <MS5611_Init+0x40>
      ms5611.ct = 3;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e7db      	b.n	8007a50 <MS5611_Init+0x40>
      ms5611.ct = 5;
 8007a98:	2305      	movs	r3, #5
 8007a9a:	e7d9      	b.n	8007a50 <MS5611_Init+0x40>
      ms5611.ct = 10;
 8007a9c:	230a      	movs	r3, #10
 8007a9e:	e7d7      	b.n	8007a50 <MS5611_Init+0x40>
 8007aa0:	0801115b 	.word	0x0801115b
 8007aa4:	20001284 	.word	0x20001284
 8007aa8:	20001524 	.word	0x20001524
 8007aac:	20001138 	.word	0x20001138
 8007ab0:	08011177 	.word	0x08011177

08007ab4 <readRegister24>:

// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg)
{
 8007ab4:	b510      	push	{r4, lr}
    uint32_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);

    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 8007ab6:	4c09      	ldr	r4, [pc, #36]	; (8007adc <readRegister24+0x28>)
    I2C_Write(MS5611_ADDRESS, reg, 1);
 8007ab8:	4601      	mov	r1, r0
 8007aba:	2201      	movs	r2, #1
 8007abc:	20ee      	movs	r0, #238	; 0xee
 8007abe:	f7fc fedf 	bl	8004880 <I2C_Write>
    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	20ee      	movs	r0, #238	; 0xee
 8007ac8:	f7fc ff24 	bl	8004914 <I2C_Read>

    uint8_t vxa = rawADC[0];
    uint8_t vha = rawADC[1];
    uint8_t vla = rawADC[2];

    value = ((int32_t)vxa << 16) | ((int32_t)vha << 8) | vla;
 8007acc:	7863      	ldrb	r3, [r4, #1]
 8007ace:	7820      	ldrb	r0, [r4, #0]
 8007ad0:	021b      	lsls	r3, r3, #8
 8007ad2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ad6:	78a0      	ldrb	r0, [r4, #2]

    return value;
}
 8007ad8:	4318      	orrs	r0, r3
 8007ada:	bd10      	pop	{r4, pc}
 8007adc:	20001278 	.word	0x20001278

08007ae0 <Baro_update>:
uint8_t Baro_update(void){
 8007ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
       if(state >= 2){
 8007ae2:	4b1a      	ldr	r3, [pc, #104]	; (8007b4c <Baro_update+0x6c>)
 8007ae4:	681f      	ldr	r7, [r3, #0]
 8007ae6:	461e      	mov	r6, r3
 8007ae8:	2f01      	cmp	r7, #1
 8007aea:	dd05      	ble.n	8007af8 <Baro_update+0x18>
         state = 0;
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]
         MS561101BA_Calculate();
 8007af0:	f7ff feca 	bl	8007888 <MS561101BA_Calculate>
    return 1;
 8007af4:	2001      	movs	r0, #1
 8007af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       if ((int32_t)(currentTime - baroDeadline) < 0) return 0;
 8007af8:	4a15      	ldr	r2, [pc, #84]	; (8007b50 <Baro_update+0x70>)
 8007afa:	4c16      	ldr	r4, [pc, #88]	; (8007b54 <Baro_update+0x74>)
 8007afc:	6813      	ldr	r3, [r2, #0]
 8007afe:	6821      	ldr	r1, [r4, #0]
 8007b00:	1a5b      	subs	r3, r3, r1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	db20      	blt.n	8007b48 <Baro_update+0x68>
       baroDeadline = currentTime;
 8007b06:	6813      	ldr	r3, [r2, #0]
 8007b08:	4d13      	ldr	r5, [pc, #76]	; (8007b58 <Baro_update+0x78>)
 8007b0a:	6023      	str	r3, [r4, #0]
       if (state == 0) {
 8007b0c:	b9af      	cbnz	r7, 8007b3a <Baro_update+0x5a>
         Baro_Common();
 8007b0e:	f7ff fdf5 	bl	80076fc <Baro_Common>
         ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8007b12:	4638      	mov	r0, r7
 8007b14:	f7ff ffce 	bl	8007ab4 <readRegister24>
         I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8007b18:	7b69      	ldrb	r1, [r5, #13]
         ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8007b1a:	6528      	str	r0, [r5, #80]	; 0x50
         I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8007b1c:	3140      	adds	r1, #64	; 0x40
         I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8007b1e:	2201      	movs	r2, #1
 8007b20:	b2c9      	uxtb	r1, r1
 8007b22:	20ee      	movs	r0, #238	; 0xee
 8007b24:	f7fc feac 	bl	8004880 <I2C_Write>
         baroDeadline +=10000;
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007b2e:	3310      	adds	r3, #16
 8007b30:	6023      	str	r3, [r4, #0]
       state ++;
 8007b32:	6833      	ldr	r3, [r6, #0]
 8007b34:	3301      	adds	r3, #1
 8007b36:	6033      	str	r3, [r6, #0]
 8007b38:	e7dc      	b.n	8007af4 <Baro_update+0x14>
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	f7ff ffba 	bl	8007ab4 <readRegister24>
         I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8007b40:	7b69      	ldrb	r1, [r5, #13]
         ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8007b42:	65a8      	str	r0, [r5, #88]	; 0x58
         I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8007b44:	3150      	adds	r1, #80	; 0x50
 8007b46:	e7ea      	b.n	8007b1e <Baro_update+0x3e>
       if ((int32_t)(currentTime - baroDeadline) < 0) return 0;
 8007b48:	2000      	movs	r0, #0
}
 8007b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b4c:	20000878 	.word	0x20000878
 8007b50:	20000bb0 	.word	0x20000bb0
 8007b54:	20000764 	.word	0x20000764
 8007b58:	20001138 	.word	0x20001138

08007b5c <HAL_UART_RxCpltCallback>:
   return(ch);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART1) //current USART
 8007b5c:	6802      	ldr	r2, [r0, #0]
 8007b5e:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <HAL_UART_RxCpltCallback+0x30>)
{
 8007b60:	b510      	push	{r4, lr}
	if(huart->Instance == USART1) //current USART
 8007b62:	429a      	cmp	r2, r3
{
 8007b64:	4604      	mov	r4, r0
	if(huart->Instance == USART1) //current USART
 8007b66:	d104      	bne.n	8007b72 <HAL_UART_RxCpltCallback+0x16>
		{
			write_Q(&Q_buffer[UART1], rx1_buffer[0]);
 8007b68:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <HAL_UART_RxCpltCallback+0x34>)
 8007b6a:	480a      	ldr	r0, [pc, #40]	; (8007b94 <HAL_UART_RxCpltCallback+0x38>)
 8007b6c:	7819      	ldrb	r1, [r3, #0]
 8007b6e:	f7fe f8e4 	bl	8005d3a <write_Q>
			//TX2_CHR(rx1_buffer[0]);
		}
		
	if(huart->Instance == USART2) //current USART
 8007b72:	6822      	ldr	r2, [r4, #0]
 8007b74:	4b08      	ldr	r3, [pc, #32]	; (8007b98 <HAL_UART_RxCpltCallback+0x3c>)
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d106      	bne.n	8007b88 <HAL_UART_RxCpltCallback+0x2c>
			write_Q(&Q_buffer[UART2], rx2_buffer[0]);
			 //printf("c %d",rx2_buffer[0]);
			//HAL_UART_Transmit_IT(&huart1, (uint8_t*)rx2_buffer, 100);
			//TX_CHR(rx2_buffer[0]);
		}
}
 8007b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			write_Q(&Q_buffer[UART2], rx2_buffer[0]);
 8007b7e:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <HAL_UART_RxCpltCallback+0x40>)
 8007b80:	4807      	ldr	r0, [pc, #28]	; (8007ba0 <HAL_UART_RxCpltCallback+0x44>)
 8007b82:	7819      	ldrb	r1, [r3, #0]
 8007b84:	f7fe b8d9 	b.w	8005d3a <write_Q>
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	bf00      	nop
 8007b8c:	40013800 	.word	0x40013800
 8007b90:	20001304 	.word	0x20001304
 8007b94:	20000e4c 	.word	0x20000e4c
 8007b98:	40004400 	.word	0x40004400
 8007b9c:	20001305 	.word	0x20001305
 8007ba0:	20000f54 	.word	0x20000f54

08007ba4 <TX_CHR>:

void TX_CHR(char ch){
	while(!(USART1->SR & 0x80));
 8007ba4:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <TX_CHR+0xc>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	0612      	lsls	r2, r2, #24
 8007baa:	d5fc      	bpl.n	8007ba6 <TX_CHR+0x2>
  USART1->DR = ch;
 8007bac:	6058      	str	r0, [r3, #4]
 8007bae:	4770      	bx	lr
 8007bb0:	40013800 	.word	0x40013800

08007bb4 <serialize>:
}

///////////////////////////////////////////////////

void serialize(uint8_t a)
{
 8007bb4:	b508      	push	{r3, lr}
 8007bb6:	4601      	mov	r1, r0
    TX_CHR(a);
 8007bb8:	f7ff fff4 	bl	8007ba4 <TX_CHR>
    checksum ^= a;
 8007bbc:	4b02      	ldr	r3, [pc, #8]	; (8007bc8 <serialize+0x14>)
 8007bbe:	781a      	ldrb	r2, [r3, #0]
 8007bc0:	4051      	eors	r1, r2
 8007bc2:	7019      	strb	r1, [r3, #0]
 8007bc4:	bd08      	pop	{r3, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20001306 	.word	0x20001306

08007bcc <tailSerial>:
}

void tailSerial(void)
{
    serialize(checksum);
 8007bcc:	4b01      	ldr	r3, [pc, #4]	; (8007bd4 <tailSerial+0x8>)
 8007bce:	7818      	ldrb	r0, [r3, #0]
 8007bd0:	f7ff bff0 	b.w	8007bb4 <serialize>
 8007bd4:	20001306 	.word	0x20001306

08007bd8 <headSeri>:
}

void headSeri(uint8_t err, uint8_t s, uint8_t cmdMSP)
{
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	4606      	mov	r6, r0
    serialize('$');
 8007bdc:	2024      	movs	r0, #36	; 0x24
{
 8007bde:	460d      	mov	r5, r1
 8007be0:	4614      	mov	r4, r2
    serialize('$');
 8007be2:	f7ff ffe7 	bl	8007bb4 <serialize>
    serialize('M');
 8007be6:	204d      	movs	r0, #77	; 0x4d
 8007be8:	f7ff ffe4 	bl	8007bb4 <serialize>
    serialize(err ? '!' : '>');
 8007bec:	2e00      	cmp	r6, #0
 8007bee:	bf14      	ite	ne
 8007bf0:	2021      	movne	r0, #33	; 0x21
 8007bf2:	203e      	moveq	r0, #62	; 0x3e
 8007bf4:	f7ff ffde 	bl	8007bb4 <serialize>
    checksum = 0;               // start calculating a new checksum
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <headSeri+0x38>)
    serialize(s);
 8007bfc:	4628      	mov	r0, r5
    checksum = 0;               // start calculating a new checksum
 8007bfe:	701a      	strb	r2, [r3, #0]
    serialize(s);
 8007c00:	f7ff ffd8 	bl	8007bb4 <serialize>
    serialize(cmdMSP);
 8007c04:	4620      	mov	r0, r4
}
 8007c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serialize(cmdMSP);
 8007c0a:	f7ff bfd3 	b.w	8007bb4 <serialize>
 8007c0e:	bf00      	nop
 8007c10:	20001306 	.word	0x20001306

08007c14 <read8>:
    serialize8((a>>24) & 0xFF);
}

uint8_t read8(void)
{
    return currentPortState->inBuf[currentPortState->indRX++] & 0xff;
 8007c14:	4b03      	ldr	r3, [pc, #12]	; (8007c24 <read8+0x10>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	785a      	ldrb	r2, [r3, #1]
 8007c1a:	1c51      	adds	r1, r2, #1
 8007c1c:	7059      	strb	r1, [r3, #1]
 8007c1e:	4413      	add	r3, r2
}
 8007c20:	7898      	ldrb	r0, [r3, #2]
 8007c22:	4770      	bx	lr
 8007c24:	20000020 	.word	0x20000020

08007c28 <read16>:

uint16_t read16(void)
{
 8007c28:	b510      	push	{r4, lr}
    uint16_t t = read8();
 8007c2a:	f7ff fff3 	bl	8007c14 <read8>
 8007c2e:	b284      	uxth	r4, r0
    t += (uint16_t)read8() << 8;
 8007c30:	f7ff fff0 	bl	8007c14 <read8>
 8007c34:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    return t;
}
 8007c38:	b280      	uxth	r0, r0
 8007c3a:	bd10      	pop	{r4, pc}

08007c3c <PrintData>:
  tailSerialReply(); //170
}
///////////////////////////////////////////////////

void PrintData(uint8_t command)
{
 8007c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Debug_TC++;
 8007c3e:	4aac      	ldr	r2, [pc, #688]	; (8007ef0 <PrintData+0x2b4>)
{
 8007c40:	b093      	sub	sp, #76	; 0x4c
  Debug_TC++;
 8007c42:	7813      	ldrb	r3, [r2, #0]
{
 8007c44:	4604      	mov	r4, r0
  Debug_TC++;
 8007c46:	3301      	adds	r3, #1
 8007c48:	b2db      	uxtb	r3, r3
  if(Debug_TC >= 200){ //12
 8007c4a:	2bc7      	cmp	r3, #199	; 0xc7
 8007c4c:	d802      	bhi.n	8007c54 <PrintData+0x18>
  Debug_TC++;
 8007c4e:	7013      	strb	r3, [r2, #0]
    serialize(50);
    tailSerial();
      break;
	}
 }
}
 8007c50:	b013      	add	sp, #76	; 0x4c
 8007c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Debug_TC = 0;
 8007c54:	2300      	movs	r3, #0
    LED1_TOGGLE;  //GREEN
 8007c56:	2110      	movs	r1, #16
 8007c58:	48a6      	ldr	r0, [pc, #664]	; (8007ef4 <PrintData+0x2b8>)
    Debug_TC = 0;
 8007c5a:	7013      	strb	r3, [r2, #0]
    LED1_TOGGLE;  //GREEN
 8007c5c:	f7fa f99f 	bl	8001f9e <HAL_GPIO_TogglePin>
	switch(command)
 8007c60:	2c21      	cmp	r4, #33	; 0x21
 8007c62:	d8f5      	bhi.n	8007c50 <PrintData+0x14>
 8007c64:	a301      	add	r3, pc, #4	; (adr r3, 8007c6c <PrintData+0x30>)
 8007c66:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007cf5 	.word	0x08007cf5
 8007c70:	08007d13 	.word	0x08007d13
 8007c74:	08007d2f 	.word	0x08007d2f
 8007c78:	08007d69 	.word	0x08007d69
 8007c7c:	08007d89 	.word	0x08007d89
 8007c80:	08007dc1 	.word	0x08007dc1
 8007c84:	08007e35 	.word	0x08007e35
 8007c88:	08007ea9 	.word	0x08007ea9
 8007c8c:	08007ebd 	.word	0x08007ebd
 8007c90:	08007f5d 	.word	0x08007f5d
 8007c94:	08007f91 	.word	0x08007f91
 8007c98:	08007fc9 	.word	0x08007fc9
 8007c9c:	08007ff1 	.word	0x08007ff1
 8007ca0:	08008019 	.word	0x08008019
 8007ca4:	08008041 	.word	0x08008041
 8007ca8:	08007c51 	.word	0x08007c51
 8007cac:	08007c51 	.word	0x08007c51
 8007cb0:	08007c51 	.word	0x08007c51
 8007cb4:	08007c51 	.word	0x08007c51
 8007cb8:	08007c51 	.word	0x08007c51
 8007cbc:	08007c51 	.word	0x08007c51
 8007cc0:	08007c51 	.word	0x08007c51
 8007cc4:	08007c51 	.word	0x08007c51
 8007cc8:	08007c51 	.word	0x08007c51
 8007ccc:	08007c51 	.word	0x08007c51
 8007cd0:	08007c51 	.word	0x08007c51
 8007cd4:	08007c51 	.word	0x08007c51
 8007cd8:	08007c51 	.word	0x08007c51
 8007cdc:	08007c51 	.word	0x08007c51
 8007ce0:	08007c51 	.word	0x08007c51
 8007ce4:	08007c51 	.word	0x08007c51
 8007ce8:	08007c51 	.word	0x08007c51
 8007cec:	08007c51 	.word	0x08007c51
 8007cf0:	08008069 	.word	0x08008069
		sprintf(Buf, "[1]9250 [3]Radio [4]Motor [5]Angle [6]PID [9]IMU [p]Kp [i]Ki [d]Kd [q,w,e] [z,x,c] \r\n ");
 8007cf4:	4980      	ldr	r1, [pc, #512]	; (8007ef8 <PrintData+0x2bc>)
 8007cf6:	4881      	ldr	r0, [pc, #516]	; (8007efc <PrintData+0x2c0>)
 8007cf8:	f001 feba 	bl	8009a70 <strcpy>
	     HAL_UART_Transmit_DMA(&huart1, (uint8_t*)Buf, strlen(Buf));
 8007cfc:	487f      	ldr	r0, [pc, #508]	; (8007efc <PrintData+0x2c0>)
 8007cfe:	f7f8 fa27 	bl	8000150 <strlen>
 8007d02:	497e      	ldr	r1, [pc, #504]	; (8007efc <PrintData+0x2c0>)
 8007d04:	b282      	uxth	r2, r0
 8007d06:	487e      	ldr	r0, [pc, #504]	; (8007f00 <PrintData+0x2c4>)
}
 8007d08:	b013      	add	sp, #76	; 0x4c
 8007d0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	     HAL_UART_Transmit_DMA(&huart1, (uint8_t*)Buf, strlen(Buf));
 8007d0e:	f7fc b8af 	b.w	8003e70 <HAL_UART_Transmit_DMA>
	                      f.ARMED, f.HEADFREE_MODE, f.ANGLE_MODE, f.HORIZON_MODE, f.ACRO_MODE);
 8007d12:	497c      	ldr	r1, [pc, #496]	; (8007f04 <PrintData+0x2c8>)
	      sprintf(Buf, " %d, %d, %d, %d, %d \r\n",
 8007d14:	79c8      	ldrb	r0, [r1, #7]
 8007d16:	7b4b      	ldrb	r3, [r1, #13]
 8007d18:	784a      	ldrb	r2, [r1, #1]
 8007d1a:	9002      	str	r0, [sp, #8]
 8007d1c:	7988      	ldrb	r0, [r1, #6]
 8007d1e:	9001      	str	r0, [sp, #4]
 8007d20:	7949      	ldrb	r1, [r1, #5]
 8007d22:	4876      	ldr	r0, [pc, #472]	; (8007efc <PrintData+0x2c0>)
 8007d24:	9100      	str	r1, [sp, #0]
 8007d26:	4978      	ldr	r1, [pc, #480]	; (8007f08 <PrintData+0x2cc>)
 8007d28:	f001 fe7e 	bl	8009a28 <sprintf>
 8007d2c:	e7e6      	b.n	8007cfc <PrintData+0xc0>
		        imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW]);
 8007d2e:	4c77      	ldr	r4, [pc, #476]	; (8007f0c <PrintData+0x2d0>)
		sprintf(Buf, " magBias_x: (%3.2f), magBias_y: (%3.2f), magBias_z: (%3.2f)\r\n",
 8007d30:	6a20      	ldr	r0, [r4, #32]
 8007d32:	f7f8 fb79 	bl	8000428 <__aeabi_f2d>
 8007d36:	4606      	mov	r6, r0
 8007d38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007d3a:	460f      	mov	r7, r1
 8007d3c:	f7f8 fb74 	bl	8000428 <__aeabi_f2d>
 8007d40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d44:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d46:	f7f8 fb6f 	bl	8000428 <__aeabi_f2d>
 8007d4a:	4632      	mov	r2, r6
 8007d4c:	e9cd 0100 	strd	r0, r1, [sp]
 8007d50:	463b      	mov	r3, r7
 8007d52:	496f      	ldr	r1, [pc, #444]	; (8007f10 <PrintData+0x2d4>)
 8007d54:	4869      	ldr	r0, [pc, #420]	; (8007efc <PrintData+0x2c0>)
 8007d56:	f001 fe67 	bl	8009a28 <sprintf>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Buf, strlen(Buf));
 8007d5a:	4868      	ldr	r0, [pc, #416]	; (8007efc <PrintData+0x2c0>)
 8007d5c:	f7f8 f9f8 	bl	8000150 <strlen>
 8007d60:	4966      	ldr	r1, [pc, #408]	; (8007efc <PrintData+0x2c0>)
 8007d62:	b282      	uxth	r2, r0
 8007d64:	486b      	ldr	r0, [pc, #428]	; (8007f14 <PrintData+0x2d8>)
 8007d66:	e7cf      	b.n	8007d08 <PrintData+0xcc>
	  sprintf(Buf, "latDeg : %d, lonDeg : %d, satel : %d, altitude : %.2dM\r\n",
 8007d68:	4a6b      	ldr	r2, [pc, #428]	; (8007f18 <PrintData+0x2dc>)
 8007d6a:	496c      	ldr	r1, [pc, #432]	; (8007f1c <PrintData+0x2e0>)
 8007d6c:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
 8007d70:	4862      	ldr	r0, [pc, #392]	; (8007efc <PrintData+0x2c0>)
 8007d72:	9301      	str	r3, [sp, #4]
 8007d74:	f892 3091 	ldrb.w	r3, [r2, #145]	; 0x91
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8007d7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007d82:	f001 fe51 	bl	8009a28 <sprintf>
 8007d86:	e7b9      	b.n	8007cfc <PrintData+0xc0>
		sprintf(Buf, " %d %d %d %d\r\n", motor[0], motor[1], motor[2], motor[3]);
 8007d88:	4965      	ldr	r1, [pc, #404]	; (8007f20 <PrintData+0x2e4>)
 8007d8a:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 8007d8e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8007d92:	f9b1 2000 	ldrsh.w	r2, [r1]
 8007d96:	9001      	str	r0, [sp, #4]
 8007d98:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8007d9c:	4857      	ldr	r0, [pc, #348]	; (8007efc <PrintData+0x2c0>)
 8007d9e:	9100      	str	r1, [sp, #0]
 8007da0:	4960      	ldr	r1, [pc, #384]	; (8007f24 <PrintData+0x2e8>)
 8007da2:	f001 fe41 	bl	8009a28 <sprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007da6:	4855      	ldr	r0, [pc, #340]	; (8007efc <PrintData+0x2c0>)
 8007da8:	f7f8 f9d2 	bl	8000150 <strlen>
 8007dac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007db0:	b282      	uxth	r2, r0
 8007db2:	4952      	ldr	r1, [pc, #328]	; (8007efc <PrintData+0x2c0>)
 8007db4:	4852      	ldr	r0, [pc, #328]	; (8007f00 <PrintData+0x2c4>)
}
 8007db6:	b013      	add	sp, #76	; 0x4c
 8007db8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		HAL_UART_Transmit(&huart1, (uint8_t*)Buf, strlen(Buf), 1000);
 8007dbc:	f7fb bfdc 	b.w	8003d78 <HAL_UART_Transmit>
	    imu.AHRS[ROLL], imu.AHRS[PITCH], imu.gyroRaw[YAW], f.ARMED, f.HEADFREE_MODE, cycleTime, cycleTimeMin, cycleTimeMax, Error.error, overrun_count, imu.actual_compass_heading, imu.AHRS[YAW], alt.EstAlt);
 8007dc0:	4c52      	ldr	r4, [pc, #328]	; (8007f0c <PrintData+0x2d0>)
	  sprintf(Buf, "AHRS:(%4.f)(%4.f)(%4.f), ARMED: (%d), Headfree: (%d), cycleTime : %d, %d, %d, error : %d, %d, %3.1f, %3.1f, %d\r\n",
 8007dc2:	4b59      	ldr	r3, [pc, #356]	; (8007f28 <PrintData+0x2ec>)
 8007dc4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8007dc8:	681d      	ldr	r5, [r3, #0]
 8007dca:	f7f8 fb2d 	bl	8000428 <__aeabi_f2d>
 8007dce:	4b57      	ldr	r3, [pc, #348]	; (8007f2c <PrintData+0x2f0>)
 8007dd0:	4606      	mov	r6, r0
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	460f      	mov	r7, r1
 8007dd6:	930e      	str	r3, [sp, #56]	; 0x38
 8007dd8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8007ddc:	f7f8 fb24 	bl	8000428 <__aeabi_f2d>
 8007de0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007de4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8007de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dea:	4b51      	ldr	r3, [pc, #324]	; (8007f30 <PrintData+0x2f4>)
 8007dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007df0:	930a      	str	r3, [sp, #40]	; 0x28
	    imu.AHRS[ROLL], imu.AHRS[PITCH], imu.gyroRaw[YAW], f.ARMED, f.HEADFREE_MODE, cycleTime, cycleTimeMin, cycleTimeMax, Error.error, overrun_count, imu.actual_compass_heading, imu.AHRS[YAW], alt.EstAlt);
 8007df2:	4b50      	ldr	r3, [pc, #320]	; (8007f34 <PrintData+0x2f8>)
	  sprintf(Buf, "AHRS:(%4.f)(%4.f)(%4.f), ARMED: (%d), Headfree: (%d), cycleTime : %d, %d, %d, error : %d, %d, %3.1f, %3.1f, %d\r\n",
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	9309      	str	r3, [sp, #36]	; 0x24
 8007df8:	4b4f      	ldr	r3, [pc, #316]	; (8007f38 <PrintData+0x2fc>)
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	9308      	str	r3, [sp, #32]
 8007dfe:	4b4f      	ldr	r3, [pc, #316]	; (8007f3c <PrintData+0x300>)
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	9506      	str	r5, [sp, #24]
 8007e04:	9307      	str	r3, [sp, #28]
	    imu.AHRS[ROLL], imu.AHRS[PITCH], imu.gyroRaw[YAW], f.ARMED, f.HEADFREE_MODE, cycleTime, cycleTimeMin, cycleTimeMax, Error.error, overrun_count, imu.actual_compass_heading, imu.AHRS[YAW], alt.EstAlt);
 8007e06:	4b3f      	ldr	r3, [pc, #252]	; (8007f04 <PrintData+0x2c8>)
	  sprintf(Buf, "AHRS:(%4.f)(%4.f)(%4.f), ARMED: (%d), Headfree: (%d), cycleTime : %d, %d, %d, error : %d, %d, %3.1f, %3.1f, %d\r\n",
 8007e08:	7b5a      	ldrb	r2, [r3, #13]
 8007e0a:	9205      	str	r2, [sp, #20]
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	9304      	str	r3, [sp, #16]
 8007e10:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007e12:	f7f8 fb09 	bl	8000428 <__aeabi_f2d>
 8007e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e1a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8007e1e:	f7f8 fb03 	bl	8000428 <__aeabi_f2d>
 8007e22:	4632      	mov	r2, r6
 8007e24:	e9cd 0100 	strd	r0, r1, [sp]
 8007e28:	463b      	mov	r3, r7
 8007e2a:	4945      	ldr	r1, [pc, #276]	; (8007f40 <PrintData+0x304>)
 8007e2c:	4833      	ldr	r0, [pc, #204]	; (8007efc <PrintData+0x2c0>)
 8007e2e:	f001 fdfb 	bl	8009a28 <sprintf>
 8007e32:	e792      	b.n	8007d5a <PrintData+0x11e>
            pid.kp[ROLL], pid.kp[PITCH], pid.ki[ROLL], pid.ki[PITCH], pid.kd[ROLL], pid.kd[PITCH], pid.kp[YAW], pid.ki[YAW], pid.kd[YAW], f.ARMED, f.Tuning_MODE);
 8007e34:	4c43      	ldr	r4, [pc, #268]	; (8007f44 <PrintData+0x308>)
    sprintf(Buf,"R[P]: %2.2f, P[P]: %2.2f, R[I]: %2.2f, P[I]: %2.2f, R[D]: %2.2f, P[D]: %2.2f, Y[P]: %2.2f, Y[I]: %2.2f, Y[D]: %2.2f, ARMED: (%d), Tuning : (%d)\r\n",
 8007e36:	6860      	ldr	r0, [r4, #4]
 8007e38:	f7f8 faf6 	bl	8000428 <__aeabi_f2d>
            pid.kp[ROLL], pid.kp[PITCH], pid.ki[ROLL], pid.ki[PITCH], pid.kd[ROLL], pid.kd[PITCH], pid.kp[YAW], pid.ki[YAW], pid.kd[YAW], f.ARMED, f.Tuning_MODE);
 8007e3c:	4b31      	ldr	r3, [pc, #196]	; (8007f04 <PrintData+0x2c8>)
    sprintf(Buf,"R[P]: %2.2f, P[P]: %2.2f, R[I]: %2.2f, P[I]: %2.2f, R[D]: %2.2f, P[D]: %2.2f, Y[P]: %2.2f, Y[I]: %2.2f, Y[D]: %2.2f, ARMED: (%d), Tuning : (%d)\r\n",
 8007e3e:	4606      	mov	r6, r0
 8007e40:	789a      	ldrb	r2, [r3, #2]
 8007e42:	460f      	mov	r7, r1
 8007e44:	9211      	str	r2, [sp, #68]	; 0x44
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	9310      	str	r3, [sp, #64]	; 0x40
 8007e4a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007e4c:	f7f8 faec 	bl	8000428 <__aeabi_f2d>
 8007e50:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007e54:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007e56:	f7f8 fae7 	bl	8000428 <__aeabi_f2d>
 8007e5a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007e5e:	68e0      	ldr	r0, [r4, #12]
 8007e60:	f7f8 fae2 	bl	8000428 <__aeabi_f2d>
 8007e64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e68:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007e6a:	f7f8 fadd 	bl	8000428 <__aeabi_f2d>
 8007e6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e72:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8007e74:	f7f8 fad8 	bl	8000428 <__aeabi_f2d>
 8007e78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e7c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007e7e:	f7f8 fad3 	bl	8000428 <__aeabi_f2d>
 8007e82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e86:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007e88:	f7f8 face 	bl	8000428 <__aeabi_f2d>
 8007e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e90:	68a0      	ldr	r0, [r4, #8]
 8007e92:	f7f8 fac9 	bl	8000428 <__aeabi_f2d>
 8007e96:	4632      	mov	r2, r6
 8007e98:	e9cd 0100 	strd	r0, r1, [sp]
 8007e9c:	463b      	mov	r3, r7
 8007e9e:	492a      	ldr	r1, [pc, #168]	; (8007f48 <PrintData+0x30c>)
 8007ea0:	4816      	ldr	r0, [pc, #88]	; (8007efc <PrintData+0x2c0>)
 8007ea2:	f001 fdc1 	bl	8009a28 <sprintf>
 8007ea6:	e729      	b.n	8007cfc <PrintData+0xc0>
		  sprintf(Buf, " state: %d, data: %d \n ", hdma_usart1_rx.State, rx1_buffer[0]);
 8007ea8:	4b28      	ldr	r3, [pc, #160]	; (8007f4c <PrintData+0x310>)
 8007eaa:	4a29      	ldr	r2, [pc, #164]	; (8007f50 <PrintData+0x314>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007eb2:	4928      	ldr	r1, [pc, #160]	; (8007f54 <PrintData+0x318>)
 8007eb4:	4811      	ldr	r0, [pc, #68]	; (8007efc <PrintData+0x2c0>)
 8007eb6:	f001 fdb7 	bl	8009a28 <sprintf>
 8007eba:	e71f      	b.n	8007cfc <PrintData+0xc0>
		sprintf(Buf, "%f %f %f\r\n",pid.output2[ROLL], pid.output2[PITCH], pid.output2[YAW]);
 8007ebc:	4c21      	ldr	r4, [pc, #132]	; (8007f44 <PrintData+0x308>)
 8007ebe:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
 8007ec2:	f7f8 fab1 	bl	8000428 <__aeabi_f2d>
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8007ecc:	460f      	mov	r7, r1
 8007ece:	f7f8 faab 	bl	8000428 <__aeabi_f2d>
 8007ed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed6:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8007eda:	f7f8 faa5 	bl	8000428 <__aeabi_f2d>
 8007ede:	4632      	mov	r2, r6
 8007ee0:	463b      	mov	r3, r7
 8007ee2:	e9cd 0100 	strd	r0, r1, [sp]
 8007ee6:	491c      	ldr	r1, [pc, #112]	; (8007f58 <PrintData+0x31c>)
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRS.Roll, AHRS.Pitch, AHRS.Yaw);
 8007ee8:	4804      	ldr	r0, [pc, #16]	; (8007efc <PrintData+0x2c0>)
 8007eea:	f001 fd9d 	bl	8009a28 <sprintf>
 8007eee:	e705      	b.n	8007cfc <PrintData+0xc0>
 8007ef0:	2000087d 	.word	0x2000087d
 8007ef4:	40010c00 	.word	0x40010c00
 8007ef8:	0801118a 	.word	0x0801118a
 8007efc:	20001284 	.word	0x20001284
 8007f00:	20001524 	.word	0x20001524
 8007f04:	2000105c 	.word	0x2000105c
 8007f08:	080111e1 	.word	0x080111e1
 8007f0c:	200011b8 	.word	0x200011b8
 8007f10:	080111f8 	.word	0x080111f8
 8007f14:	200015ac 	.word	0x200015ac
 8007f18:	20000c48 	.word	0x20000c48
 8007f1c:	08011236 	.word	0x08011236
 8007f20:	20000d22 	.word	0x20000d22
 8007f24:	0801126f 	.word	0x0801126f
 8007f28:	20000bb4 	.word	0x20000bb4
 8007f2c:	20001264 	.word	0x20001264
 8007f30:	20000bc0 	.word	0x20000bc0
 8007f34:	20001564 	.word	0x20001564
 8007f38:	20000bb8 	.word	0x20000bb8
 8007f3c:	20000024 	.word	0x20000024
 8007f40:	0801127e 	.word	0x0801127e
 8007f44:	20000d2c 	.word	0x20000d2c
 8007f48:	080112ef 	.word	0x080112ef
 8007f4c:	20001304 	.word	0x20001304
 8007f50:	2000149c 	.word	0x2000149c
 8007f54:	08011381 	.word	0x08011381
 8007f58:	08011458 	.word	0x08011458
		sprintf(Buf, "Roll:(%.2f), Pitch:(%.2f), Yaw:(%.2f), rx_buffer:(%d)\r\n",AHRS.Roll, AHRS.Pitch, AHRS.Yaw, rx1_buffer[0]);
 8007f5c:	4c4c      	ldr	r4, [pc, #304]	; (8008090 <PrintData+0x454>)
 8007f5e:	6820      	ldr	r0, [r4, #0]
 8007f60:	f7f8 fa62 	bl	8000428 <__aeabi_f2d>
 8007f64:	4b4b      	ldr	r3, [pc, #300]	; (8008094 <PrintData+0x458>)
 8007f66:	4606      	mov	r6, r0
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	460f      	mov	r7, r1
 8007f6c:	9304      	str	r3, [sp, #16]
 8007f6e:	68a0      	ldr	r0, [r4, #8]
 8007f70:	f7f8 fa5a 	bl	8000428 <__aeabi_f2d>
 8007f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f78:	6860      	ldr	r0, [r4, #4]
 8007f7a:	f7f8 fa55 	bl	8000428 <__aeabi_f2d>
 8007f7e:	4632      	mov	r2, r6
 8007f80:	e9cd 0100 	strd	r0, r1, [sp]
 8007f84:	463b      	mov	r3, r7
 8007f86:	4944      	ldr	r1, [pc, #272]	; (8008098 <PrintData+0x45c>)
 8007f88:	4844      	ldr	r0, [pc, #272]	; (800809c <PrintData+0x460>)
 8007f8a:	f001 fd4d 	bl	8009a28 <sprintf>
 8007f8e:	e6b5      	b.n	8007cfc <PrintData+0xc0>
		sprintf(Buf, "Data : %d, %d, %d, %d, %d, %d, %d, %d \r\n ", loopTime, ms5611.realTemperature, (uint32_t)ms5611.realPressure, baroPressureSum, ms5611.BaroAlt, (int16_t)alt.EstAlt, f.ARMED, (int16_t)imu.actual_compass_heading);
 8007f90:	4843      	ldr	r0, [pc, #268]	; (80080a0 <PrintData+0x464>)
 8007f92:	4944      	ldr	r1, [pc, #272]	; (80080a4 <PrintData+0x468>)
 8007f94:	f9b0 00a8 	ldrsh.w	r0, [r0, #168]	; 0xa8
 8007f98:	4b43      	ldr	r3, [pc, #268]	; (80080a8 <PrintData+0x46c>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	f9b1 3054 	ldrsh.w	r3, [r1, #84]	; 0x54
 8007fa0:	9005      	str	r0, [sp, #20]
 8007fa2:	4842      	ldr	r0, [pc, #264]	; (80080ac <PrintData+0x470>)
 8007fa4:	7840      	ldrb	r0, [r0, #1]
 8007fa6:	9004      	str	r0, [sp, #16]
 8007fa8:	4841      	ldr	r0, [pc, #260]	; (80080b0 <PrintData+0x474>)
 8007faa:	f9b0 0000 	ldrsh.w	r0, [r0]
 8007fae:	9003      	str	r0, [sp, #12]
 8007fb0:	6f08      	ldr	r0, [r1, #112]	; 0x70
 8007fb2:	9002      	str	r0, [sp, #8]
 8007fb4:	483f      	ldr	r0, [pc, #252]	; (80080b4 <PrintData+0x478>)
 8007fb6:	6800      	ldr	r0, [r0, #0]
 8007fb8:	9001      	str	r0, [sp, #4]
 8007fba:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8007fbc:	4837      	ldr	r0, [pc, #220]	; (800809c <PrintData+0x460>)
 8007fbe:	9100      	str	r1, [sp, #0]
 8007fc0:	493d      	ldr	r1, [pc, #244]	; (80080b8 <PrintData+0x47c>)
 8007fc2:	f001 fd31 	bl	8009a28 <sprintf>
 8007fc6:	e6c8      	b.n	8007d5a <PrintData+0x11e>
			sprintf(Buf, "\r\n [KP]: %.2f, %.2f, %.2f \r\n ", pid.kp[0], pid.kp[1], pid.kp[2]);
 8007fc8:	4c3c      	ldr	r4, [pc, #240]	; (80080bc <PrintData+0x480>)
 8007fca:	6860      	ldr	r0, [r4, #4]
 8007fcc:	f7f8 fa2c 	bl	8000428 <__aeabi_f2d>
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	68e0      	ldr	r0, [r4, #12]
 8007fd4:	460f      	mov	r7, r1
 8007fd6:	f7f8 fa27 	bl	8000428 <__aeabi_f2d>
 8007fda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fde:	68a0      	ldr	r0, [r4, #8]
 8007fe0:	f7f8 fa22 	bl	8000428 <__aeabi_f2d>
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	e9cd 0100 	strd	r0, r1, [sp]
 8007fea:	463b      	mov	r3, r7
 8007fec:	4934      	ldr	r1, [pc, #208]	; (80080c0 <PrintData+0x484>)
 8007fee:	e77b      	b.n	8007ee8 <PrintData+0x2ac>
			sprintf(Buf, "\r\n [KI]: %.2f, %.2f, %.2f\r\n", pid.ki[0], pid.ki[1], pid.ki[2]);
 8007ff0:	4c32      	ldr	r4, [pc, #200]	; (80080bc <PrintData+0x480>)
 8007ff2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007ff4:	f7f8 fa18 	bl	8000428 <__aeabi_f2d>
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007ffc:	460f      	mov	r7, r1
 8007ffe:	f7f8 fa13 	bl	8000428 <__aeabi_f2d>
 8008002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008006:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008008:	f7f8 fa0e 	bl	8000428 <__aeabi_f2d>
 800800c:	4632      	mov	r2, r6
 800800e:	e9cd 0100 	strd	r0, r1, [sp]
 8008012:	463b      	mov	r3, r7
 8008014:	492b      	ldr	r1, [pc, #172]	; (80080c4 <PrintData+0x488>)
 8008016:	e767      	b.n	8007ee8 <PrintData+0x2ac>
			sprintf(Buf, "\r\n [KD]: %.2f, %.2f, %.2f\r\n", pid.kd[0], pid.kd[1], pid.kd[2]);
 8008018:	4c28      	ldr	r4, [pc, #160]	; (80080bc <PrintData+0x480>)
 800801a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800801c:	f7f8 fa04 	bl	8000428 <__aeabi_f2d>
 8008020:	4606      	mov	r6, r0
 8008022:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008024:	460f      	mov	r7, r1
 8008026:	f7f8 f9ff 	bl	8000428 <__aeabi_f2d>
 800802a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800802e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008030:	f7f8 f9fa 	bl	8000428 <__aeabi_f2d>
 8008034:	4632      	mov	r2, r6
 8008036:	e9cd 0100 	strd	r0, r1, [sp]
 800803a:	463b      	mov	r3, r7
 800803c:	4922      	ldr	r1, [pc, #136]	; (80080c8 <PrintData+0x48c>)
 800803e:	e753      	b.n	8007ee8 <PrintData+0x2ac>
		sprintf(Buf,"R/P/Y: %f %f %f\r\n",AHRS.Roll, AHRS.Pitch, AHRS.Yaw);
 8008040:	4c13      	ldr	r4, [pc, #76]	; (8008090 <PrintData+0x454>)
 8008042:	6820      	ldr	r0, [r4, #0]
 8008044:	f7f8 f9f0 	bl	8000428 <__aeabi_f2d>
 8008048:	4606      	mov	r6, r0
 800804a:	68a0      	ldr	r0, [r4, #8]
 800804c:	460f      	mov	r7, r1
 800804e:	f7f8 f9eb 	bl	8000428 <__aeabi_f2d>
 8008052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008056:	6860      	ldr	r0, [r4, #4]
 8008058:	f7f8 f9e6 	bl	8000428 <__aeabi_f2d>
 800805c:	4632      	mov	r2, r6
 800805e:	e9cd 0100 	strd	r0, r1, [sp]
 8008062:	463b      	mov	r3, r7
 8008064:	4919      	ldr	r1, [pc, #100]	; (80080cc <PrintData+0x490>)
 8008066:	e73f      	b.n	8007ee8 <PrintData+0x2ac>
    headSeri(0, 2, MSP_PID);
 8008068:	2270      	movs	r2, #112	; 0x70
 800806a:	2102      	movs	r1, #2
 800806c:	2000      	movs	r0, #0
 800806e:	f7ff fdb3 	bl	8007bd8 <headSeri>
    serialize(5);
 8008072:	2005      	movs	r0, #5
 8008074:	f7ff fd9e 	bl	8007bb4 <serialize>
    serialize(10);
 8008078:	200a      	movs	r0, #10
 800807a:	f7ff fd9b 	bl	8007bb4 <serialize>
    serialize(50);
 800807e:	2032      	movs	r0, #50	; 0x32
 8008080:	f7ff fd98 	bl	8007bb4 <serialize>
}
 8008084:	b013      	add	sp, #76	; 0x4c
 8008086:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tailSerial();
 800808a:	f7ff bd9f 	b.w	8007bcc <tailSerial>
 800808e:	bf00      	nop
 8008090:	20000ce8 	.word	0x20000ce8
 8008094:	20001304 	.word	0x20001304
 8008098:	08011399 	.word	0x08011399
 800809c:	20001284 	.word	0x20001284
 80080a0:	200011b8 	.word	0x200011b8
 80080a4:	20001138 	.word	0x20001138
 80080a8:	20000bbc 	.word	0x20000bbc
 80080ac:	2000105c 	.word	0x2000105c
 80080b0:	20001264 	.word	0x20001264
 80080b4:	20000834 	.word	0x20000834
 80080b8:	080113d1 	.word	0x080113d1
 80080bc:	20000d2c 	.word	0x20000d2c
 80080c0:	080113fb 	.word	0x080113fb
 80080c4:	08011419 	.word	0x08011419
 80080c8:	08011435 	.word	0x08011435
 80080cc:	08011451 	.word	0x08011451

080080d0 <SerialSerialize>:
		   break;
	 }

 }

void SerialSerialize(uint8_t port,uint8_t a) {
 80080d0:	b510      	push	{r4, lr}
  uint8_t t = serialHeadTX[port];
 80080d2:	4c07      	ldr	r4, [pc, #28]	; (80080f0 <SerialSerialize+0x20>)
  if (++t >= TX_BUFFER_SIZE) t = 0;
  serialBufferTX[t][port] = a;
 80080d4:	4a07      	ldr	r2, [pc, #28]	; (80080f4 <SerialSerialize+0x24>)
  uint8_t t = serialHeadTX[port];
 80080d6:	5c23      	ldrb	r3, [r4, r0]
  if (++t >= TX_BUFFER_SIZE) t = 0;
 80080d8:	3301      	adds	r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080e0:	bf18      	it	ne
 80080e2:	2300      	movne	r3, #0
  serialBufferTX[t][port] = a;
 80080e4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80080e8:	5411      	strb	r1, [r2, r0]
  serialHeadTX[port] = t;
 80080ea:	5423      	strb	r3, [r4, r0]
 80080ec:	bd10      	pop	{r4, pc}
 80080ee:	bf00      	nop
 80080f0:	20000b9c 	.word	0x20000b9c
 80080f4:	20000a9c 	.word	0x20000a9c

080080f8 <serialize8>:
{
 80080f8:	b510      	push	{r4, lr}
 80080fa:	4604      	mov	r4, r0
  SerialSerialize(CURRENTPORT,a);
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <serialize8+0x1c>)
 80080fe:	4601      	mov	r1, r0
 8008100:	7818      	ldrb	r0, [r3, #0]
 8008102:	f7ff ffe5 	bl	80080d0 <SerialSerialize>
  currentPortState->checksum ^= (a & 0xFF);
 8008106:	4b04      	ldr	r3, [pc, #16]	; (8008118 <serialize8+0x20>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	781a      	ldrb	r2, [r3, #0]
 800810c:	4054      	eors	r4, r2
 800810e:	701c      	strb	r4, [r3, #0]
 8008110:	bd10      	pop	{r4, pc}
 8008112:	bf00      	nop
 8008114:	2000087c 	.word	0x2000087c
 8008118:	20000020 	.word	0x20000020

0800811c <headSerialResponse>:
{
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4604      	mov	r4, r0
    serialize8('$');
 8008120:	2024      	movs	r0, #36	; 0x24
{
 8008122:	460d      	mov	r5, r1
    serialize8('$');
 8008124:	f7ff ffe8 	bl	80080f8 <serialize8>
    serialize8('M');
 8008128:	204d      	movs	r0, #77	; 0x4d
 800812a:	f7ff ffe5 	bl	80080f8 <serialize8>
    serialize8(err ? '!' : '>');
 800812e:	2c00      	cmp	r4, #0
 8008130:	bf14      	ite	ne
 8008132:	2021      	movne	r0, #33	; 0x21
 8008134:	203e      	moveq	r0, #62	; 0x3e
 8008136:	f7ff ffdf 	bl	80080f8 <serialize8>
    currentPortState->checksum = 0;               // start calculating a new checksum
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <headSerialResponse+0x38>)
    serialize8(s);
 800813c:	4628      	mov	r0, r5
    currentPortState->checksum = 0;               // start calculating a new checksum
 800813e:	681c      	ldr	r4, [r3, #0]
 8008140:	2300      	movs	r3, #0
 8008142:	7023      	strb	r3, [r4, #0]
    serialize8(s);
 8008144:	f7ff ffd8 	bl	80080f8 <serialize8>
    serialize8(currentPortState->cmdMSP);
 8008148:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
}
 800814c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    serialize8(currentPortState->cmdMSP);
 8008150:	f7ff bfd2 	b.w	80080f8 <serialize8>
 8008154:	20000020 	.word	0x20000020

08008158 <headSerialReply>:
    headSerialResponse(0, s);
 8008158:	4601      	mov	r1, r0
 800815a:	2000      	movs	r0, #0
 800815c:	f7ff bfde 	b.w	800811c <headSerialResponse>

08008160 <s_struct_partial>:
void s_struct_partial(uint8_t *cb,uint8_t siz) {
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4604      	mov	r4, r0
 8008164:	1845      	adds	r5, r0, r1
  while(siz--) serialize8(*cb++);
 8008166:	42ac      	cmp	r4, r5
 8008168:	d100      	bne.n	800816c <s_struct_partial+0xc>
}
 800816a:	bd38      	pop	{r3, r4, r5, pc}
  while(siz--) serialize8(*cb++);
 800816c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008170:	f7ff ffc2 	bl	80080f8 <serialize8>
 8008174:	e7f7      	b.n	8008166 <s_struct_partial+0x6>
	...

08008178 <UartSendData>:
}

void UartSendData(uint8_t port) {
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t t = serialTailTX[port];
 800817a:	4a2a      	ldr	r2, [pc, #168]	; (8008224 <UartSendData+0xac>)
 800817c:	4d2a      	ldr	r5, [pc, #168]	; (8008228 <UartSendData+0xb0>)
 800817e:	5c13      	ldrb	r3, [r2, r0]
 8008180:	b2db      	uxtb	r3, r3
  switch(port){
 8008182:	b180      	cbz	r0, 80081a6 <UartSendData+0x2e>
 8008184:	2801      	cmp	r0, #1
 8008186:	d119      	bne.n	80081bc <UartSendData+0x44>
 8008188:	4c28      	ldr	r4, [pc, #160]	; (800822c <UartSendData+0xb4>)
      break;

    case 1:
      while (serialHeadTX[port] != t) {
        if (++t >= TX_BUFFER_SIZE) t = 0;
        serialBufTx_1[serialHead_1++] = serialBufferTX[t][port];
 800818a:	4e29      	ldr	r6, [pc, #164]	; (8008230 <UartSendData+0xb8>)
 800818c:	4f29      	ldr	r7, [pc, #164]	; (8008234 <UartSendData+0xbc>)
      while (serialHeadTX[port] != t) {
 800818e:	7869      	ldrb	r1, [r5, #1]
 8008190:	428b      	cmp	r3, r1
 8008192:	d137      	bne.n	8008204 <UartSendData+0x8c>
      }
      serialTailTX[port] = t;
 8008194:	7053      	strb	r3, [r2, #1]
      HAL_UART_Transmit_IT(&huart2, serialBufTx_1, serialHead_1);
 8008196:	7822      	ldrb	r2, [r4, #0]
 8008198:	4925      	ldr	r1, [pc, #148]	; (8008230 <UartSendData+0xb8>)
 800819a:	4827      	ldr	r0, [pc, #156]	; (8008238 <UartSendData+0xc0>)
      while (serialHeadTX[0] != t) {
        if (++t >= TX_BUFFER_SIZE) t = 0;
        serialBufTx_0[serialHead_0++] = serialBufferTX[t][0];
      }
      serialTailTX[0] = t;
      HAL_UART_Transmit_IT(&huart1, serialBufTx_0, serialHead_0);
 800819c:	f7fb fe48 	bl	8003e30 <HAL_UART_Transmit_IT>
      serialHead_0 = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	7023      	strb	r3, [r4, #0]
 80081a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a6:	4c25      	ldr	r4, [pc, #148]	; (800823c <UartSendData+0xc4>)
        serialBufTx_0[serialHead_0++] = serialBufferTX[t][port];
 80081a8:	4e25      	ldr	r6, [pc, #148]	; (8008240 <UartSendData+0xc8>)
 80081aa:	4f22      	ldr	r7, [pc, #136]	; (8008234 <UartSendData+0xbc>)
      while (serialHeadTX[port] != t) {
 80081ac:	7829      	ldrb	r1, [r5, #0]
 80081ae:	428b      	cmp	r3, r1
 80081b0:	d119      	bne.n	80081e6 <UartSendData+0x6e>
      serialTailTX[0] = t;
 80081b2:	7013      	strb	r3, [r2, #0]
      HAL_UART_Transmit_IT(&huart1, serialBufTx_0, serialHead_0);
 80081b4:	7822      	ldrb	r2, [r4, #0]
 80081b6:	4922      	ldr	r1, [pc, #136]	; (8008240 <UartSendData+0xc8>)
 80081b8:	4822      	ldr	r0, [pc, #136]	; (8008244 <UartSendData+0xcc>)
 80081ba:	e7ef      	b.n	800819c <UartSendData+0x24>
 80081bc:	4c1f      	ldr	r4, [pc, #124]	; (800823c <UartSendData+0xc4>)
        serialBufTx_0[serialHead_0++] = serialBufferTX[t][0];
 80081be:	4e20      	ldr	r6, [pc, #128]	; (8008240 <UartSendData+0xc8>)
 80081c0:	4f1c      	ldr	r7, [pc, #112]	; (8008234 <UartSendData+0xbc>)
      while (serialHeadTX[0] != t) {
 80081c2:	7829      	ldrb	r1, [r5, #0]
 80081c4:	428b      	cmp	r3, r1
 80081c6:	d0f4      	beq.n	80081b2 <UartSendData+0x3a>
        if (++t >= TX_BUFFER_SIZE) t = 0;
 80081c8:	3301      	adds	r3, #1
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081d0:	bf18      	it	ne
 80081d2:	2300      	movne	r3, #0
        serialBufTx_0[serialHead_0++] = serialBufferTX[t][0];
 80081d4:	7821      	ldrb	r1, [r4, #0]
 80081d6:	b2c9      	uxtb	r1, r1
 80081d8:	1c48      	adds	r0, r1, #1
 80081da:	b2c0      	uxtb	r0, r0
 80081dc:	7020      	strb	r0, [r4, #0]
 80081de:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
 80081e2:	5470      	strb	r0, [r6, r1]
 80081e4:	e7ed      	b.n	80081c2 <UartSendData+0x4a>
        if (++t >= TX_BUFFER_SIZE) t = 0;
 80081e6:	3301      	adds	r3, #1
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081ee:	bf18      	it	ne
 80081f0:	2300      	movne	r3, #0
        serialBufTx_0[serialHead_0++] = serialBufferTX[t][port];
 80081f2:	7821      	ldrb	r1, [r4, #0]
 80081f4:	b2c9      	uxtb	r1, r1
 80081f6:	1c48      	adds	r0, r1, #1
 80081f8:	b2c0      	uxtb	r0, r0
 80081fa:	7020      	strb	r0, [r4, #0]
 80081fc:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
 8008200:	5470      	strb	r0, [r6, r1]
 8008202:	e7d3      	b.n	80081ac <UartSendData+0x34>
        if (++t >= TX_BUFFER_SIZE) t = 0;
 8008204:	3301      	adds	r3, #1
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f013 0f80 	tst.w	r3, #128	; 0x80
 800820c:	bf18      	it	ne
 800820e:	2300      	movne	r3, #0
        serialBufTx_1[serialHead_1++] = serialBufferTX[t][port];
 8008210:	7821      	ldrb	r1, [r4, #0]
 8008212:	b2c9      	uxtb	r1, r1
 8008214:	1c48      	adds	r0, r1, #1
 8008216:	b2c0      	uxtb	r0, r0
 8008218:	7020      	strb	r0, [r4, #0]
 800821a:	eb07 0043 	add.w	r0, r7, r3, lsl #1
 800821e:	7840      	ldrb	r0, [r0, #1]
 8008220:	5470      	strb	r0, [r6, r1]
 8008222:	e7b4      	b.n	800818e <UartSendData+0x16>
 8008224:	20000ba0 	.word	0x20000ba0
 8008228:	20000b9c 	.word	0x20000b9c
 800822c:	20000b9f 	.word	0x20000b9f
 8008230:	20000a1c 	.word	0x20000a1c
 8008234:	20000a9c 	.word	0x20000a9c
 8008238:	200015ac 	.word	0x200015ac
 800823c:	20000b9e 	.word	0x20000b9e
 8008240:	2000099c 	.word	0x2000099c
 8008244:	20001524 	.word	0x20001524

08008248 <tailSerialReply>:
{
 8008248:	b510      	push	{r4, lr}
  SerialSerialize(CURRENTPORT,currentPortState->checksum);
 800824a:	4b06      	ldr	r3, [pc, #24]	; (8008264 <tailSerialReply+0x1c>)
 800824c:	781c      	ldrb	r4, [r3, #0]
 800824e:	4b06      	ldr	r3, [pc, #24]	; (8008268 <tailSerialReply+0x20>)
 8008250:	4620      	mov	r0, r4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	7819      	ldrb	r1, [r3, #0]
 8008256:	f7ff ff3b 	bl	80080d0 <SerialSerialize>
  UartSendData(CURRENTPORT);
 800825a:	4620      	mov	r0, r4
}
 800825c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UartSendData(CURRENTPORT);
 8008260:	f7ff bf8a 	b.w	8008178 <UartSendData>
 8008264:	2000087c 	.word	0x2000087c
 8008268:	20000020 	.word	0x20000020

0800826c <s_struct>:
void s_struct(uint8_t *cb,uint8_t siz) {
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4605      	mov	r5, r0
 8008270:	460c      	mov	r4, r1
  headSerialReply(siz);  //530
 8008272:	4608      	mov	r0, r1
 8008274:	f7ff ff70 	bl	8008158 <headSerialReply>
  s_struct_partial(cb,siz); //870
 8008278:	4621      	mov	r1, r4
 800827a:	4628      	mov	r0, r5
 800827c:	f7ff ff70 	bl	8008160 <s_struct_partial>
}
 8008280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  tailSerialReply(); //170
 8008284:	f7ff bfe0 	b.w	8008248 <tailSerialReply>

08008288 <evaluateCommand>:
 void evaluateCommand(void) {
 8008288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 switch(currentPortState->cmdMSP){
 800828c:	4bc2      	ldr	r3, [pc, #776]	; (8008598 <evaluateCommand+0x310>)
 void evaluateCommand(void) {
 800828e:	b096      	sub	sp, #88	; 0x58
	 switch(currentPortState->cmdMSP){
 8008290:	6819      	ldr	r1, [r3, #0]
 8008292:	f891 3082 	ldrb.w	r3, [r1, #130]	; 0x82
 8008296:	2b72      	cmp	r3, #114	; 0x72
 8008298:	f000 8217 	beq.w	80086ca <evaluateCommand+0x442>
 800829c:	f200 8134 	bhi.w	8008508 <evaluateCommand+0x280>
 80082a0:	2b69      	cmp	r3, #105	; 0x69
 80082a2:	f000 81d6 	beq.w	8008652 <evaluateCommand+0x3ca>
 80082a6:	d811      	bhi.n	80082cc <evaluateCommand+0x44>
 80082a8:	2b65      	cmp	r3, #101	; 0x65
 80082aa:	f000 81f0 	beq.w	800868e <evaluateCommand+0x406>
 80082ae:	d805      	bhi.n	80082bc <evaluateCommand+0x34>
 80082b0:	2b38      	cmp	r3, #56	; 0x38
 80082b2:	f000 83ae 	beq.w	8008a12 <evaluateCommand+0x78a>
 }
 80082b6:	b016      	add	sp, #88	; 0x58
 80082b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	 switch(currentPortState->cmdMSP){
 80082bc:	2b66      	cmp	r3, #102	; 0x66
 80082be:	f000 82a7 	beq.w	8008810 <evaluateCommand+0x588>
 80082c2:	2b68      	cmp	r3, #104	; 0x68
 80082c4:	d1f7      	bne.n	80082b6 <evaluateCommand+0x2e>
	      s_struct((uint8_t*)&motor,8);
 80082c6:	2108      	movs	r1, #8
 80082c8:	48b4      	ldr	r0, [pc, #720]	; (800859c <evaluateCommand+0x314>)
 80082ca:	e1dd      	b.n	8008688 <evaluateCommand+0x400>
	 switch(currentPortState->cmdMSP){
 80082cc:	2b6d      	cmp	r3, #109	; 0x6d
 80082ce:	f000 81f5 	beq.w	80086bc <evaluateCommand+0x434>
 80082d2:	d807      	bhi.n	80082e4 <evaluateCommand+0x5c>
 80082d4:	2b6a      	cmp	r3, #106	; 0x6a
 80082d6:	f000 82bd 	beq.w	8008854 <evaluateCommand+0x5cc>
 80082da:	2b6c      	cmp	r3, #108	; 0x6c
 80082dc:	d1eb      	bne.n	80082b6 <evaluateCommand+0x2e>
	      s_struct((uint8_t*)&att,8);
 80082de:	2108      	movs	r1, #8
 80082e0:	48af      	ldr	r0, [pc, #700]	; (80085a0 <evaluateCommand+0x318>)
 80082e2:	e1d1      	b.n	8008688 <evaluateCommand+0x400>
	 switch(currentPortState->cmdMSP){
 80082e4:	2b6e      	cmp	r3, #110	; 0x6e
 80082e6:	f000 82c5 	beq.w	8008874 <evaluateCommand+0x5ec>
 80082ea:	2b70      	cmp	r3, #112	; 0x70
 80082ec:	d1e3      	bne.n	80082b6 <evaluateCommand+0x2e>
          pid_t.ROLL[0]  = (int16_t) (pid.kp[ROLL]  * 10);
 80082ee:	4cad      	ldr	r4, [pc, #692]	; (80085a4 <evaluateCommand+0x31c>)
 80082f0:	49ad      	ldr	r1, [pc, #692]	; (80085a8 <evaluateCommand+0x320>)
 80082f2:	6860      	ldr	r0, [r4, #4]
 80082f4:	f7f8 fd42 	bl	8000d7c <__aeabi_fmul>
 80082f8:	f7f8 ff1c 	bl	8001134 <__aeabi_f2iz>
          pid_t.ROLL[1]  = (int16_t) (pid.ki[ROLL]  * 10);
 80082fc:	49aa      	ldr	r1, [pc, #680]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.ROLL[0]  = (int16_t) (pid.kp[ROLL]  * 10);
 80082fe:	f8ad 0010 	strh.w	r0, [sp, #16]
          pid_t.ROLL[1]  = (int16_t) (pid.ki[ROLL]  * 10);
 8008302:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008304:	f7f8 fd3a 	bl	8000d7c <__aeabi_fmul>
 8008308:	f7f8 ff14 	bl	8001134 <__aeabi_f2iz>
          pid_t.ROLL[2]  = (int16_t) (pid.kd[ROLL]  * 10);
 800830c:	49a6      	ldr	r1, [pc, #664]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.ROLL[1]  = (int16_t) (pid.ki[ROLL]  * 10);
 800830e:	f8ad 0012 	strh.w	r0, [sp, #18]
          pid_t.ROLL[2]  = (int16_t) (pid.kd[ROLL]  * 10);
 8008312:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8008314:	f7f8 fd32 	bl	8000d7c <__aeabi_fmul>
 8008318:	f7f8 ff0c 	bl	8001134 <__aeabi_f2iz>
          pid_t.PITCH[0] = (int16_t) (pid.kp[PITCH] * 10);
 800831c:	49a2      	ldr	r1, [pc, #648]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.ROLL[2]  = (int16_t) (pid.kd[ROLL]  * 10);
 800831e:	f8ad 0014 	strh.w	r0, [sp, #20]
          pid_t.PITCH[0] = (int16_t) (pid.kp[PITCH] * 10);
 8008322:	68a0      	ldr	r0, [r4, #8]
 8008324:	f7f8 fd2a 	bl	8000d7c <__aeabi_fmul>
 8008328:	f7f8 ff04 	bl	8001134 <__aeabi_f2iz>
          pid_t.PITCH[1] = (int16_t) (pid.ki[PITCH] * 10);
 800832c:	499e      	ldr	r1, [pc, #632]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.PITCH[0] = (int16_t) (pid.kp[PITCH] * 10);
 800832e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
          pid_t.PITCH[1] = (int16_t) (pid.ki[PITCH] * 10);
 8008332:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008334:	f7f8 fd22 	bl	8000d7c <__aeabi_fmul>
 8008338:	f7f8 fefc 	bl	8001134 <__aeabi_f2iz>
          pid_t.PITCH[2] = (int16_t) (pid.kd[PITCH] * 10);
 800833c:	499a      	ldr	r1, [pc, #616]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.PITCH[1] = (int16_t) (pid.ki[PITCH] * 10);
 800833e:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
          pid_t.PITCH[2] = (int16_t) (pid.kd[PITCH] * 10);
 8008342:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008344:	f7f8 fd1a 	bl	8000d7c <__aeabi_fmul>
 8008348:	f7f8 fef4 	bl	8001134 <__aeabi_f2iz>
          pid_t.YAW[0]   = (int16_t) (pid.kp[YAW]   * 10);
 800834c:	4996      	ldr	r1, [pc, #600]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.PITCH[2] = (int16_t) (pid.kd[PITCH] * 10);
 800834e:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
          pid_t.YAW[0]   = (int16_t) (pid.kp[YAW]   * 10);
 8008352:	68e0      	ldr	r0, [r4, #12]
 8008354:	f7f8 fd12 	bl	8000d7c <__aeabi_fmul>
 8008358:	f7f8 feec 	bl	8001134 <__aeabi_f2iz>
          pid_t.YAW[1]   = (int16_t) (pid.ki[YAW]   * 10);
 800835c:	4992      	ldr	r1, [pc, #584]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.YAW[0]   = (int16_t) (pid.kp[YAW]   * 10);
 800835e:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
          pid_t.YAW[1]   = (int16_t) (pid.ki[YAW]   * 10);
 8008362:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008364:	f7f8 fd0a 	bl	8000d7c <__aeabi_fmul>
 8008368:	f7f8 fee4 	bl	8001134 <__aeabi_f2iz>
          pid_t.YAW[2]   = (int16_t) (pid.kd[YAW]   * 10);
 800836c:	498e      	ldr	r1, [pc, #568]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.YAW[1]   = (int16_t) (pid.ki[YAW]   * 10);
 800836e:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
          pid_t.YAW[2]   = (int16_t) (pid.kd[YAW]   * 10);
 8008372:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008374:	f7f8 fd02 	bl	8000d7c <__aeabi_fmul>
 8008378:	f7f8 fedc 	bl	8001134 <__aeabi_f2iz>
          pid_t.outer_ROLL[0] = (int16_t) (pid.kp1[ROLL] * 10);
 800837c:	498a      	ldr	r1, [pc, #552]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.YAW[2]   = (int16_t) (pid.kd[YAW]   * 10);
 800837e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
          pid_t.outer_ROLL[0] = (int16_t) (pid.kp1[ROLL] * 10);
 8008382:	6920      	ldr	r0, [r4, #16]
 8008384:	f7f8 fcfa 	bl	8000d7c <__aeabi_fmul>
 8008388:	f7f8 fed4 	bl	8001134 <__aeabi_f2iz>
          pid_t.outer_ROLL[1] = (int16_t) (pid.ki1[ROLL] * 10);
 800838c:	4986      	ldr	r1, [pc, #536]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.outer_ROLL[0] = (int16_t) (pid.kp1[ROLL] * 10);
 800838e:	f8ad 0016 	strh.w	r0, [sp, #22]
          pid_t.outer_ROLL[1] = (int16_t) (pid.ki1[ROLL] * 10);
 8008392:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008394:	f7f8 fcf2 	bl	8000d7c <__aeabi_fmul>
 8008398:	f7f8 fecc 	bl	8001134 <__aeabi_f2iz>
          pid_t.outer_PITCH[0] = (int16_t) (pid.kp1[PITCH] * 10);
 800839c:	4982      	ldr	r1, [pc, #520]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.outer_ROLL[1] = (int16_t) (pid.ki1[ROLL] * 10);
 800839e:	f8ad 0018 	strh.w	r0, [sp, #24]
          pid_t.outer_PITCH[0] = (int16_t) (pid.kp1[PITCH] * 10);
 80083a2:	6960      	ldr	r0, [r4, #20]
 80083a4:	f7f8 fcea 	bl	8000d7c <__aeabi_fmul>
 80083a8:	f7f8 fec4 	bl	8001134 <__aeabi_f2iz>
          pid_t.outer_PITCH[1] = (int16_t) (pid.ki1[PITCH] * 10);
 80083ac:	497e      	ldr	r1, [pc, #504]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.outer_PITCH[0] = (int16_t) (pid.kp1[PITCH] * 10);
 80083ae:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
          pid_t.outer_PITCH[1] = (int16_t) (pid.ki1[PITCH] * 10);
 80083b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80083b4:	f7f8 fce2 	bl	8000d7c <__aeabi_fmul>
 80083b8:	f7f8 febc 	bl	8001134 <__aeabi_f2iz>
          pid_t.outer_YAW[0] = (int16_t) (pid.kp1[YAW] * 10);
 80083bc:	497a      	ldr	r1, [pc, #488]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.outer_PITCH[1] = (int16_t) (pid.ki1[PITCH] * 10);
 80083be:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
          pid_t.outer_YAW[0] = (int16_t) (pid.kp1[YAW] * 10);
 80083c2:	69a0      	ldr	r0, [r4, #24]
 80083c4:	f7f8 fcda 	bl	8000d7c <__aeabi_fmul>
 80083c8:	f7f8 feb4 	bl	8001134 <__aeabi_f2iz>
          pid_t.outer_YAW[1] = (int16_t) (pid.ki1[YAW] * 10);
 80083cc:	4976      	ldr	r1, [pc, #472]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.outer_YAW[0] = (int16_t) (pid.kp1[YAW] * 10);
 80083ce:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
          pid_t.outer_YAW[1] = (int16_t) (pid.ki1[YAW] * 10);
 80083d2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80083d4:	f7f8 fcd2 	bl	8000d7c <__aeabi_fmul>
 80083d8:	f7f8 feac 	bl	8001134 <__aeabi_f2iz>
          pid_t.inner_ROLL[0] = (int16_t) (pid.kp2[ROLL] * 10);
 80083dc:	4972      	ldr	r1, [pc, #456]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.outer_YAW[1] = (int16_t) (pid.ki1[YAW] * 10);
 80083de:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
          pid_t.inner_ROLL[0] = (int16_t) (pid.kp2[ROLL] * 10);
 80083e2:	69e0      	ldr	r0, [r4, #28]
 80083e4:	f7f8 fcca 	bl	8000d7c <__aeabi_fmul>
 80083e8:	f7f8 fea4 	bl	8001134 <__aeabi_f2iz>
          pid_t.inner_ROLL[1] = (int16_t) (pid.ki2[ROLL] * 10);
 80083ec:	496e      	ldr	r1, [pc, #440]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.inner_ROLL[0] = (int16_t) (pid.kp2[ROLL] * 10);
 80083ee:	f8ad 001a 	strh.w	r0, [sp, #26]
          pid_t.inner_ROLL[1] = (int16_t) (pid.ki2[ROLL] * 10);
 80083f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80083f4:	f7f8 fcc2 	bl	8000d7c <__aeabi_fmul>
 80083f8:	f7f8 fe9c 	bl	8001134 <__aeabi_f2iz>
          pid_t.inner_ROLL[2] = (int16_t) (pid.kd2[ROLL] * 10);
 80083fc:	496a      	ldr	r1, [pc, #424]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.inner_ROLL[1] = (int16_t) (pid.ki2[ROLL] * 10);
 80083fe:	f8ad 001c 	strh.w	r0, [sp, #28]
          pid_t.inner_ROLL[2] = (int16_t) (pid.kd2[ROLL] * 10);
 8008402:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008404:	f7f8 fcba 	bl	8000d7c <__aeabi_fmul>
 8008408:	f7f8 fe94 	bl	8001134 <__aeabi_f2iz>
          pid_t.inner_PITCH[0] = (int16_t) (pid.kp2[PITCH] * 10);
 800840c:	4966      	ldr	r1, [pc, #408]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.inner_ROLL[2] = (int16_t) (pid.kd2[ROLL] * 10);
 800840e:	f8ad 001e 	strh.w	r0, [sp, #30]
          pid_t.inner_PITCH[0] = (int16_t) (pid.kp2[PITCH] * 10);
 8008412:	6a20      	ldr	r0, [r4, #32]
 8008414:	f7f8 fcb2 	bl	8000d7c <__aeabi_fmul>
 8008418:	f7f8 fe8c 	bl	8001134 <__aeabi_f2iz>
          pid_t.inner_PITCH[1] = (int16_t) (pid.ki2[PITCH] * 10);
 800841c:	4962      	ldr	r1, [pc, #392]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.inner_PITCH[0] = (int16_t) (pid.kp2[PITCH] * 10);
 800841e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
          pid_t.inner_PITCH[1] = (int16_t) (pid.ki2[PITCH] * 10);
 8008422:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008424:	f7f8 fcaa 	bl	8000d7c <__aeabi_fmul>
 8008428:	f7f8 fe84 	bl	8001134 <__aeabi_f2iz>
          pid_t.inner_PITCH[2] = (int16_t) (pid.kd2[PITCH] * 10);
 800842c:	495e      	ldr	r1, [pc, #376]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.inner_PITCH[1] = (int16_t) (pid.ki2[PITCH] * 10);
 800842e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
          pid_t.inner_PITCH[2] = (int16_t) (pid.kd2[PITCH] * 10);
 8008432:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008434:	f7f8 fca2 	bl	8000d7c <__aeabi_fmul>
 8008438:	f7f8 fe7c 	bl	8001134 <__aeabi_f2iz>
          pid_t.inner_YAW[0] = (int16_t) (pid.kp2[YAW] * 10);
 800843c:	495a      	ldr	r1, [pc, #360]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.inner_PITCH[2] = (int16_t) (pid.kd2[PITCH] * 10);
 800843e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
          pid_t.inner_YAW[0] = (int16_t) (pid.kp2[YAW] * 10);
 8008442:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008444:	f7f8 fc9a 	bl	8000d7c <__aeabi_fmul>
 8008448:	f7f8 fe74 	bl	8001134 <__aeabi_f2iz>
          pid_t.inner_YAW[1] = (int16_t) (pid.ki2[YAW] * 10);
 800844c:	4956      	ldr	r1, [pc, #344]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.inner_YAW[0] = (int16_t) (pid.kp2[YAW] * 10);
 800844e:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
          pid_t.inner_YAW[1] = (int16_t) (pid.ki2[YAW] * 10);
 8008452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008454:	f7f8 fc92 	bl	8000d7c <__aeabi_fmul>
 8008458:	f7f8 fe6c 	bl	8001134 <__aeabi_f2iz>
          pid_t.inner_YAW[2] = (int16_t) (pid.kd2[YAW] * 10);
 800845c:	4952      	ldr	r1, [pc, #328]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.inner_YAW[1] = (int16_t) (pid.ki2[YAW] * 10);
 800845e:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
          pid_t.inner_YAW[2] = (int16_t) (pid.kd2[YAW] * 10);
 8008462:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008464:	f7f8 fc8a 	bl	8000d7c <__aeabi_fmul>
 8008468:	f7f8 fe64 	bl	8001134 <__aeabi_f2iz>
          pid_t.ROLL_rate[0]  = (int16_t) (pid.kp_rate[ROLL]  * 10);
 800846c:	494e      	ldr	r1, [pc, #312]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.inner_YAW[2] = (int16_t) (pid.kd2[YAW] * 10);
 800846e:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
          pid_t.ROLL_rate[0]  = (int16_t) (pid.kp_rate[ROLL]  * 10);
 8008472:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008474:	f7f8 fc82 	bl	8000d7c <__aeabi_fmul>
 8008478:	f7f8 fe5c 	bl	8001134 <__aeabi_f2iz>
          pid_t.ROLL_rate[1]  = (int16_t) (pid.ki_rate[ROLL]  * 10);
 800847c:	494a      	ldr	r1, [pc, #296]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.ROLL_rate[0]  = (int16_t) (pid.kp_rate[ROLL]  * 10);
 800847e:	f8ad 0020 	strh.w	r0, [sp, #32]
          pid_t.ROLL_rate[1]  = (int16_t) (pid.ki_rate[ROLL]  * 10);
 8008482:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008484:	f7f8 fc7a 	bl	8000d7c <__aeabi_fmul>
 8008488:	f7f8 fe54 	bl	8001134 <__aeabi_f2iz>
          pid_t.ROLL_rate[2]  = (int16_t) (pid.kd_rate[ROLL]  * 10);
 800848c:	4946      	ldr	r1, [pc, #280]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.ROLL_rate[1]  = (int16_t) (pid.ki_rate[ROLL]  * 10);
 800848e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
          pid_t.ROLL_rate[2]  = (int16_t) (pid.kd_rate[ROLL]  * 10);
 8008492:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008494:	f7f8 fc72 	bl	8000d7c <__aeabi_fmul>
 8008498:	f7f8 fe4c 	bl	8001134 <__aeabi_f2iz>
          pid_t.PITCH_rate[0] = (int16_t) (pid.kp_rate[PITCH] * 10);
 800849c:	4942      	ldr	r1, [pc, #264]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.ROLL_rate[2]  = (int16_t) (pid.kd_rate[ROLL]  * 10);
 800849e:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
          pid_t.PITCH_rate[0] = (int16_t) (pid.kp_rate[PITCH] * 10);
 80084a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80084a4:	f7f8 fc6a 	bl	8000d7c <__aeabi_fmul>
 80084a8:	f7f8 fe44 	bl	8001134 <__aeabi_f2iz>
          pid_t.PITCH_rate[1] = (int16_t) (pid.ki_rate[PITCH] * 10);
 80084ac:	493e      	ldr	r1, [pc, #248]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.PITCH_rate[0] = (int16_t) (pid.kp_rate[PITCH] * 10);
 80084ae:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
          pid_t.PITCH_rate[1] = (int16_t) (pid.ki_rate[PITCH] * 10);
 80084b2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80084b4:	f7f8 fc62 	bl	8000d7c <__aeabi_fmul>
 80084b8:	f7f8 fe3c 	bl	8001134 <__aeabi_f2iz>
          pid_t.PITCH_rate[2] = (int16_t) (pid.kd_rate[PITCH] * 10);
 80084bc:	493a      	ldr	r1, [pc, #232]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.PITCH_rate[1] = (int16_t) (pid.ki_rate[PITCH] * 10);
 80084be:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
          pid_t.PITCH_rate[2] = (int16_t) (pid.kd_rate[PITCH] * 10);
 80084c2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80084c6:	f7f8 fc59 	bl	8000d7c <__aeabi_fmul>
 80084ca:	f7f8 fe33 	bl	8001134 <__aeabi_f2iz>
          pid_t.YAW_rate[0]   = (int16_t) (pid.kp_rate[YAW]   * 10);
 80084ce:	4936      	ldr	r1, [pc, #216]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.PITCH_rate[2] = (int16_t) (pid.kd_rate[PITCH] * 10);
 80084d0:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
          pid_t.YAW_rate[0]   = (int16_t) (pid.kp_rate[YAW]   * 10);
 80084d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80084d6:	f7f8 fc51 	bl	8000d7c <__aeabi_fmul>
 80084da:	f7f8 fe2b 	bl	8001134 <__aeabi_f2iz>
          pid_t.YAW_rate[1]   = (int16_t) (pid.ki_rate[YAW]   * 10);
 80084de:	4932      	ldr	r1, [pc, #200]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.YAW_rate[0]   = (int16_t) (pid.kp_rate[YAW]   * 10);
 80084e0:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
          pid_t.YAW_rate[1]   = (int16_t) (pid.ki_rate[YAW]   * 10);
 80084e4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80084e6:	f7f8 fc49 	bl	8000d7c <__aeabi_fmul>
 80084ea:	f7f8 fe23 	bl	8001134 <__aeabi_f2iz>
          pid_t.YAW_rate[2]   = (int16_t) (pid.kd_rate[YAW]   * 10);
 80084ee:	492e      	ldr	r1, [pc, #184]	; (80085a8 <evaluateCommand+0x320>)
          pid_t.YAW_rate[1]   = (int16_t) (pid.ki_rate[YAW]   * 10);
 80084f0:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
          pid_t.YAW_rate[2]   = (int16_t) (pid.kd_rate[YAW]   * 10);
 80084f4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80084f8:	f7f8 fc40 	bl	8000d7c <__aeabi_fmul>
 80084fc:	f7f8 fe1a 	bl	8001134 <__aeabi_f2iz>
        s_struct((uint8_t*)&pid_t,66);
 8008500:	2142      	movs	r1, #66	; 0x42
          pid_t.YAW_rate[2]   = (int16_t) (pid.kd_rate[YAW]   * 10);
 8008502:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
 8008506:	e0be      	b.n	8008686 <evaluateCommand+0x3fe>
	 switch(currentPortState->cmdMSP){
 8008508:	2b9a      	cmp	r3, #154	; 0x9a
 800850a:	f000 8266 	beq.w	80089da <evaluateCommand+0x752>
 800850e:	d871      	bhi.n	80085f4 <evaluateCommand+0x36c>
 8008510:	2b97      	cmp	r3, #151	; 0x97
 8008512:	f000 8098 	beq.w	8008646 <evaluateCommand+0x3be>
 8008516:	d84f      	bhi.n	80085b8 <evaluateCommand+0x330>
 8008518:	2b79      	cmp	r3, #121	; 0x79
 800851a:	f000 823f 	beq.w	800899c <evaluateCommand+0x714>
 800851e:	2b96      	cmp	r3, #150	; 0x96
 8008520:	f47f aec9 	bne.w	80082b6 <evaluateCommand+0x2e>
 8008524:	2500      	movs	r5, #0
					RC_Raw.rcCommand[i]  = read8();
 8008526:	4c21      	ldr	r4, [pc, #132]	; (80085ac <evaluateCommand+0x324>)
 8008528:	f7ff fb74 	bl	8007c14 <read8>
 800852c:	192b      	adds	r3, r5, r4
 800852e:	3502      	adds	r5, #2
				for(i=0; i < 5; i++){
 8008530:	2d0a      	cmp	r5, #10
					RC_Raw.rcCommand[i]  = read8();
 8008532:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
				for(i=0; i < 5; i++){
 8008536:	d1f7      	bne.n	8008528 <evaluateCommand+0x2a0>
    		RC.rcCommand[ROLL]     = map(RC_Raw.rcCommand[ROLL], 0, 250, -20, 20)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
 8008538:	2328      	movs	r3, #40	; 0x28
 800853a:	20fa      	movs	r0, #250	; 0xfa
 800853c:	f9b4 2050 	ldrsh.w	r2, [r4, #80]	; 0x50
 8008540:	4e1b      	ldr	r6, [pc, #108]	; (80085b0 <evaluateCommand+0x328>)
 8008542:	435a      	muls	r2, r3
 8008544:	fb92 f2f0 	sdiv	r2, r2, r0
 8008548:	6835      	ldr	r5, [r6, #0]
 800854a:	491a      	ldr	r1, [pc, #104]	; (80085b4 <evaluateCommand+0x32c>)
 800854c:	3d14      	subs	r5, #20
 800854e:	442a      	add	r2, r5
 8008550:	f8a1 2050 	strh.w	r2, [r1, #80]	; 0x50
		    RC.rcCommand[PITCH]    = map(RC_Raw.rcCommand[PITCH], 0, 250, -20, 20)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 8008554:	f9b4 2052 	ldrsh.w	r2, [r4, #82]	; 0x52
 8008558:	4353      	muls	r3, r2
 800855a:	fb93 f3f0 	sdiv	r3, r3, r0
 800855e:	6872      	ldr	r2, [r6, #4]
 8008560:	3a14      	subs	r2, #20
 8008562:	4413      	add	r3, r2
 8008564:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
		    RC.rcCommand[YAW]      = map(RC_Raw.rcCommand[YAW], 0, 250, -100, 100); //0~250 left:0, right:250
 8008568:	23c8      	movs	r3, #200	; 0xc8
 800856a:	f9b4 2054 	ldrsh.w	r2, [r4, #84]	; 0x54
 800856e:	4353      	muls	r3, r2
 8008570:	fb93 f3f0 	sdiv	r3, r3, r0
 8008574:	3b64      	subs	r3, #100	; 0x64
 8008576:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
	      RC.rcCommand[THROTTLE] = map(RC_Raw.rcCommand[THROTTLE], 0, 250, 0, 1800);//0~250
 800857a:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800857e:	f9b4 2056 	ldrsh.w	r2, [r4, #86]	; 0x56
 8008582:	4353      	muls	r3, r2
 8008584:	fb93 f3f0 	sdiv	r3, r3, r0
 8008588:	f8a1 3056 	strh.w	r3, [r1, #86]	; 0x56
	      RC.rcCommand[AUX1] 	   =  RC_Raw.rcCommand[GEAR];
 800858c:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8008590:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
			 break;
 8008594:	e68f      	b.n	80082b6 <evaluateCommand+0x2e>
 8008596:	bf00      	nop
 8008598:	20000020 	.word	0x20000020
 800859c:	20000d22 	.word	0x20000d22
 80085a0:	20000ce0 	.word	0x20000ce0
 80085a4:	20000d2c 	.word	0x20000d2c
 80085a8:	41200000 	.word	0x41200000
 80085ac:	20001078 	.word	0x20001078
 80085b0:	20000884 	.word	0x20000884
 80085b4:	200010d8 	.word	0x200010d8
	 switch(currentPortState->cmdMSP){
 80085b8:	2b98      	cmp	r3, #152	; 0x98
 80085ba:	d047      	beq.n	800864c <evaluateCommand+0x3c4>
 80085bc:	2b99      	cmp	r3, #153	; 0x99
 80085be:	f47f ae7a 	bne.w	80082b6 <evaluateCommand+0x2e>
				MSP_TRIM[PITCH] += 1;
 80085c2:	4ab5      	ldr	r2, [pc, #724]	; (8008898 <evaluateCommand+0x610>)
 80085c4:	6853      	ldr	r3, [r2, #4]
 80085c6:	3301      	adds	r3, #1
 80085c8:	6053      	str	r3, [r2, #4]
				sprintf(Buf, "MSP_TRIM_UP : %d, %d, %d, %d, %d\r\n ", currentPortState->inBuf[0], currentPortState->inBuf[1], currentPortState->inBuf[2], currentPortState->inBuf[3], currentPortState->inBuf[4]);
 80085ca:	7988      	ldrb	r0, [r1, #6]
 80085cc:	78cb      	ldrb	r3, [r1, #3]
 80085ce:	788a      	ldrb	r2, [r1, #2]
 80085d0:	9002      	str	r0, [sp, #8]
 80085d2:	7948      	ldrb	r0, [r1, #5]
 80085d4:	9001      	str	r0, [sp, #4]
 80085d6:	7909      	ldrb	r1, [r1, #4]
 80085d8:	9100      	str	r1, [sp, #0]
 80085da:	49b0      	ldr	r1, [pc, #704]	; (800889c <evaluateCommand+0x614>)
				sprintf(Buf, "MSP_TRIM_RIGHT : %d, %d, %d, %d, %d\r\n ", currentPortState->inBuf[0], currentPortState->inBuf[1], currentPortState->inBuf[2], currentPortState->inBuf[3], currentPortState->inBuf[4]);
 80085dc:	48b0      	ldr	r0, [pc, #704]	; (80088a0 <evaluateCommand+0x618>)
 80085de:	f001 fa23 	bl	8009a28 <sprintf>
    		HAL_UART_Transmit_IT(&huart1, (uint8_t*)Buf, strlen(Buf));
 80085e2:	48af      	ldr	r0, [pc, #700]	; (80088a0 <evaluateCommand+0x618>)
 80085e4:	f7f7 fdb4 	bl	8000150 <strlen>
 80085e8:	49ad      	ldr	r1, [pc, #692]	; (80088a0 <evaluateCommand+0x618>)
 80085ea:	b282      	uxth	r2, r0
 80085ec:	48ad      	ldr	r0, [pc, #692]	; (80088a4 <evaluateCommand+0x61c>)
 80085ee:	f7fb fc1f 	bl	8003e30 <HAL_UART_Transmit_IT>
			 break;
 80085f2:	e660      	b.n	80082b6 <evaluateCommand+0x2e>
	 switch(currentPortState->cmdMSP){
 80085f4:	2bca      	cmp	r3, #202	; 0xca
 80085f6:	f000 8171 	beq.w	80088dc <evaluateCommand+0x654>
 80085fa:	d813      	bhi.n	8008624 <evaluateCommand+0x39c>
 80085fc:	2b9b      	cmp	r3, #155	; 0x9b
 80085fe:	f000 81fa 	beq.w	80089f6 <evaluateCommand+0x76e>
 8008602:	2b9c      	cmp	r3, #156	; 0x9c
 8008604:	f47f ae57 	bne.w	80082b6 <evaluateCommand+0x2e>
				MSP_TRIM[ROLL] += 1;
 8008608:	4aa3      	ldr	r2, [pc, #652]	; (8008898 <evaluateCommand+0x610>)
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	3301      	adds	r3, #1
 800860e:	6013      	str	r3, [r2, #0]
				sprintf(Buf, "MSP_TRIM_RIGHT : %d, %d, %d, %d, %d\r\n ", currentPortState->inBuf[0], currentPortState->inBuf[1], currentPortState->inBuf[2], currentPortState->inBuf[3], currentPortState->inBuf[4]);
 8008610:	7988      	ldrb	r0, [r1, #6]
 8008612:	78cb      	ldrb	r3, [r1, #3]
 8008614:	788a      	ldrb	r2, [r1, #2]
 8008616:	9002      	str	r0, [sp, #8]
 8008618:	7948      	ldrb	r0, [r1, #5]
 800861a:	9001      	str	r0, [sp, #4]
 800861c:	7909      	ldrb	r1, [r1, #4]
 800861e:	9100      	str	r1, [sp, #0]
 8008620:	49a1      	ldr	r1, [pc, #644]	; (80088a8 <evaluateCommand+0x620>)
 8008622:	e7db      	b.n	80085dc <evaluateCommand+0x354>
	 switch(currentPortState->cmdMSP){
 8008624:	2bcd      	cmp	r3, #205	; 0xcd
 8008626:	f000 81cc 	beq.w	80089c2 <evaluateCommand+0x73a>
 800862a:	2bce      	cmp	r3, #206	; 0xce
 800862c:	f47f ae43 	bne.w	80082b6 <evaluateCommand+0x2e>
      if(!f.ARMED){
 8008630:	4a9e      	ldr	r2, [pc, #632]	; (80088ac <evaluateCommand+0x624>)
 8008632:	7853      	ldrb	r3, [r2, #1]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f47f ae3e 	bne.w	80082b6 <evaluateCommand+0x2e>
        f.CALIBRATE_MAG=!f.CALIBRATE_MAG;
 800863a:	7c93      	ldrb	r3, [r2, #18]
 800863c:	fab3 f383 	clz	r3, r3
 8008640:	095b      	lsrs	r3, r3, #5
 8008642:	7493      	strb	r3, [r2, #18]
 8008644:	e637      	b.n	80082b6 <evaluateCommand+0x2e>
			 mwArm();
 8008646:	f7fd fc77 	bl	8005f38 <mwArm>
			 break;
 800864a:	e634      	b.n	80082b6 <evaluateCommand+0x2e>
			 mwDisarm();
 800864c:	f7fd fc84 	bl	8005f58 <mwDisarm>
			 break;
 8008650:	e631      	b.n	80082b6 <evaluateCommand+0x2e>
		   s_struct((uint8_t*)&rc, 12);
 8008652:	210c      	movs	r1, #12
		    rc.roll     = RC.rcCommand[ROLL];
 8008654:	4b96      	ldr	r3, [pc, #600]	; (80088b0 <evaluateCommand+0x628>)
 8008656:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800865a:	f8ad 2010 	strh.w	r2, [sp, #16]
		    rc.pitch    = RC.rcCommand[PITCH];
 800865e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8008662:	f8ad 2012 	strh.w	r2, [sp, #18]
		    rc.yaw      = RC.rcCommand[YAW];
 8008666:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800866a:	f8ad 2014 	strh.w	r2, [sp, #20]
		    rc.throttle = RC.rcCommand[THROTTLE];
 800866e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8008672:	f8ad 2016 	strh.w	r2, [sp, #22]
        rc.aux1     = RC.rcCommand[AUX1];
 8008676:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
        rc.gear     = RC.rcCommand[GEAR];
 800867a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
        rc.aux1     = RC.rcCommand[AUX1];
 800867e:	f8ad 201a 	strh.w	r2, [sp, #26]
        rc.gear     = RC.rcCommand[GEAR];
 8008682:	f8ad 3018 	strh.w	r3, [sp, #24]
	              s_struct((uint8_t*)&st,10);
 8008686:	a804      	add	r0, sp, #16
 8008688:	f7ff fdf0 	bl	800826c <s_struct>
 800868c:	e613      	b.n	80082b6 <evaluateCommand+0x2e>
	              st.ArmedTime    = armedTime;
 800868e:	4b89      	ldr	r3, [pc, #548]	; (80088b4 <evaluateCommand+0x62c>)
	              if(f.ARMED) tmp |= 1<<BOXARM;
 8008690:	4a86      	ldr	r2, [pc, #536]	; (80088ac <evaluateCommand+0x624>)
	              st.ArmedTime    = armedTime;
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	9304      	str	r3, [sp, #16]
	              st.cycleTime    = loopTime;
 8008696:	4b88      	ldr	r3, [pc, #544]	; (80088b8 <evaluateCommand+0x630>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	9305      	str	r3, [sp, #20]
	              st.error        = Error.error;
 800869c:	4b87      	ldr	r3, [pc, #540]	; (80088bc <evaluateCommand+0x634>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	f88d 3018 	strb.w	r3, [sp, #24]
	              if(f.ARMED) tmp |= 1<<BOXARM;
 80086a4:	7853      	ldrb	r3, [r2, #1]
	              if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 80086a6:	7b52      	ldrb	r2, [r2, #13]
	              if(f.ARMED) tmp |= 1<<BOXARM;
 80086a8:	3300      	adds	r3, #0
 80086aa:	bf18      	it	ne
 80086ac:	2301      	movne	r3, #1
	              if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 80086ae:	b10a      	cbz	r2, 80086b4 <evaluateCommand+0x42c>
 80086b0:	f043 0302 	orr.w	r3, r3, #2
	              st.flag         = tmp;
 80086b4:	f88d 3019 	strb.w	r3, [sp, #25]
	              s_struct((uint8_t*)&st,10);
 80086b8:	210a      	movs	r1, #10
 80086ba:	e7e4      	b.n	8008686 <evaluateCommand+0x3fe>
	      tmp.alt = (int16_t) alt.EstAlt;
 80086bc:	4b80      	ldr	r3, [pc, #512]	; (80088c0 <evaluateCommand+0x638>)
 80086be:	a816      	add	r0, sp, #88	; 0x58
 80086c0:	681b      	ldr	r3, [r3, #0]
	      s_struct((uint8_t*)&tmp,2);
 80086c2:	2102      	movs	r1, #2
	      tmp.alt = (int16_t) alt.EstAlt;
 80086c4:	f820 3d48 	strh.w	r3, [r0, #-72]!
 80086c8:	e7de      	b.n	8008688 <evaluateCommand+0x400>
      tele.roll     = RC.rcCommand[ROLL];
 80086ca:	4b79      	ldr	r3, [pc, #484]	; (80088b0 <evaluateCommand+0x628>)
 80086cc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80086d0:	f8ad 2010 	strh.w	r2, [sp, #16]
      tele.pitch    = RC.rcCommand[PITCH];
 80086d4:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80086d8:	f8ad 2012 	strh.w	r2, [sp, #18]
      tele.yaw      = RC.rcCommand[YAW];
 80086dc:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80086e0:	f8ad 2014 	strh.w	r2, [sp, #20]
      tele.throttle = RC.rcCommand[THROTTLE];
 80086e4:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80086e8:	f8ad 2016 	strh.w	r2, [sp, #22]
      tele.aux1     = RC.rcCommand[AUX1];
 80086ec:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
      tele.gear     = RC.rcCommand[GEAR];
 80086f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
      tele.aux1     = RC.rcCommand[AUX1];
 80086f4:	f8ad 201a 	strh.w	r2, [sp, #26]
      tele.gear     = RC.rcCommand[GEAR];
 80086f8:	f8ad 3018 	strh.w	r3, [sp, #24]
      tele.ArmedTime    = armedTime;
 80086fc:	4b6d      	ldr	r3, [pc, #436]	; (80088b4 <evaluateCommand+0x62c>)
      if(f.ARMED) tmp |= 1<<BOXARM;
 80086fe:	4a6b      	ldr	r2, [pc, #428]	; (80088ac <evaluateCommand+0x624>)
      tele.ArmedTime    = armedTime;
 8008700:	681b      	ldr	r3, [r3, #0]
      if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8008702:	7b51      	ldrb	r1, [r2, #13]
      tele.ArmedTime    = armedTime;
 8008704:	9307      	str	r3, [sp, #28]
      tele.cycleTime    = loopTime;
 8008706:	4b6c      	ldr	r3, [pc, #432]	; (80088b8 <evaluateCommand+0x630>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	9308      	str	r3, [sp, #32]
      tele.error        = Error.error;
 800870c:	4b6b      	ldr	r3, [pc, #428]	; (80088bc <evaluateCommand+0x634>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      if(f.ARMED) tmp |= 1<<BOXARM;
 8008714:	7853      	ldrb	r3, [r2, #1]
 8008716:	3300      	adds	r3, #0
 8008718:	bf18      	it	ne
 800871a:	2301      	movne	r3, #1
      if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 800871c:	b109      	cbz	r1, 8008722 <evaluateCommand+0x49a>
 800871e:	f043 0302 	orr.w	r3, r3, #2
      if(f.ANGLE_MODE) tmp |= 1<<BOXANGLE_MODE;
 8008722:	7951      	ldrb	r1, [r2, #5]
 8008724:	b109      	cbz	r1, 800872a <evaluateCommand+0x4a2>
 8008726:	f043 0304 	orr.w	r3, r3, #4
      if(f.HORIZON_MODE) tmp |= 1<<BOXHORIZON_MODE;
 800872a:	7991      	ldrb	r1, [r2, #6]
 800872c:	b109      	cbz	r1, 8008732 <evaluateCommand+0x4aa>
 800872e:	f043 0308 	orr.w	r3, r3, #8
      if(f.ACRO_MODE) tmp |= 1<<BOXACRO_MODE;
 8008732:	79d1      	ldrb	r1, [r2, #7]
 8008734:	b109      	cbz	r1, 800873a <evaluateCommand+0x4b2>
 8008736:	f043 0310 	orr.w	r3, r3, #16
      if(f.CALIBRATE_ACC) tmp |= 1<<BOXCALIBRATE_ACC;
 800873a:	7911      	ldrb	r1, [r2, #4]
 800873c:	b109      	cbz	r1, 8008742 <evaluateCommand+0x4ba>
 800873e:	f043 0320 	orr.w	r3, r3, #32
      if(f.CALIBRATE_MAG) tmp |= 1<<BOXCALIBRATE_MAG;
 8008742:	7c92      	ldrb	r2, [r2, #18]
 8008744:	b10a      	cbz	r2, 800874a <evaluateCommand+0x4c2>
 8008746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      tele.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 800874a:	4c5e      	ldr	r4, [pc, #376]	; (80088c4 <evaluateCommand+0x63c>)
      tele.flag         = tmp;
 800874c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      tele.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 8008750:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008754:	f7f8 fcee 	bl	8001134 <__aeabi_f2iz>
 8008758:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800875c:	0040      	lsls	r0, r0, #1
 800875e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
      tele.angle[PITCH] = (int16_t) imu.AHRS[PITCH] * 10;
 8008762:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008766:	f7f8 fce5 	bl	8001134 <__aeabi_f2iz>
 800876a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800876e:	0040      	lsls	r0, r0, #1
 8008770:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
      tele.heading = (int16_t) imu.AHRS[YAW];
 8008774:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8008778:	f7f8 fcdc 	bl	8001134 <__aeabi_f2iz>
      tele.mag_heading = (int16_t) imu.actual_compass_heading;
 800877c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
      tele.heading = (int16_t) imu.AHRS[YAW];
 8008780:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
      tele.mag_heading = (int16_t) imu.actual_compass_heading;
 8008784:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
      tele.alt = (int16_t) alt.EstAlt;
 8008788:	4b4d      	ldr	r3, [pc, #308]	; (80088c0 <evaluateCommand+0x638>)
      tele.Temp = (int16_t) imu.Temp*10;
 800878a:	ad16      	add	r5, sp, #88	; 0x58
      tele.alt = (int16_t) alt.EstAlt;
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f104 0628 	add.w	r6, r4, #40	; 0x28
 8008792:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
      tele.VBAT = (int16_t) BAT.VBAT;
 8008796:	4b4c      	ldr	r3, [pc, #304]	; (80088c8 <evaluateCommand+0x640>)
 8008798:	3434      	adds	r4, #52	; 0x34
 800879a:	6858      	ldr	r0, [r3, #4]
 800879c:	f7f8 fcca 	bl	8001134 <__aeabi_f2iz>
 80087a0:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
      tele.Temp = (int16_t) imu.Temp*10;
 80087a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80087a6:	f7f8 fcc5 	bl	8001134 <__aeabi_f2iz>
 80087aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80087ae:	0040      	lsls	r0, r0, #1
 80087b0:	f825 0d26 	strh.w	r0, [r5, #-38]!
        tele.acc[axis]  = (int16_t) imu.accSmooth[axis];//map(imu.accADC[axis], -32768, 32768, -1000, 1000);
 80087b4:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80087b8:	f7f8 fcbc 	bl	8001134 <__aeabi_f2iz>
 80087bc:	f825 0f02 	strh.w	r0, [r5, #2]!
        tele.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 80087c0:	68f0      	ldr	r0, [r6, #12]
 80087c2:	f7f8 fcb7 	bl	8001134 <__aeabi_f2iz>
 80087c6:	80e8      	strh	r0, [r5, #6]
        tele.mag[axis]  = (int16_t) imu.magRaw[axis];
 80087c8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80087ca:	f7f8 fcb3 	bl	8001134 <__aeabi_f2iz>
      for(uint8_t axis=0; axis<3;axis++){
 80087ce:	42a6      	cmp	r6, r4
        tele.mag[axis]  = (int16_t) imu.magRaw[axis];
 80087d0:	81a8      	strh	r0, [r5, #12]
      for(uint8_t axis=0; axis<3;axis++){
 80087d2:	d1ef      	bne.n	80087b4 <evaluateCommand+0x52c>
      tele.a     = GPS.fixquality;
 80087d4:	4b3d      	ldr	r3, [pc, #244]	; (80088cc <evaluateCommand+0x644>)
      s_struct((uint8_t*)&tele,74);
 80087d6:	214a      	movs	r1, #74	; 0x4a
      tele.a     = GPS.fixquality;
 80087d8:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 80087dc:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
      tele.b     = GPS.satellites;
 80087e0:	f893 2091 	ldrb.w	r2, [r3, #145]	; 0x91
 80087e4:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
      tele.c     = GPS.latitudeDegrees;
 80087e8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
      tele.d     = GPS.longitudeDegrees;
 80087ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
      tele.c     = GPS.latitudeDegrees;
 80087f0:	9212      	str	r2, [sp, #72]	; 0x48
      tele.d     = GPS.longitudeDegrees;
 80087f2:	9313      	str	r3, [sp, #76]	; 0x4c
      tele.motor[0] = motor[0];
 80087f4:	4b36      	ldr	r3, [pc, #216]	; (80088d0 <evaluateCommand+0x648>)
 80087f6:	881a      	ldrh	r2, [r3, #0]
 80087f8:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
      tele.motor[1] = motor[1];
 80087fc:	885a      	ldrh	r2, [r3, #2]
 80087fe:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
      tele.motor[2] = motor[2];
 8008802:	889a      	ldrh	r2, [r3, #4]
      tele.motor[3] = motor[3];
 8008804:	88db      	ldrh	r3, [r3, #6]
      tele.motor[2] = motor[2];
 8008806:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
      tele.motor[3] = motor[3];
 800880a:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 800880e:	e73a      	b.n	8008686 <evaluateCommand+0x3fe>
	 switch(currentPortState->cmdMSP){
 8008810:	2400      	movs	r4, #0
          mpu.acc[axis]  = (int16_t) map(imu.accADC[axis], -32768, 32768, -1000, 1000);
 8008812:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
 8008816:	4e2f      	ldr	r6, [pc, #188]	; (80088d4 <evaluateCommand+0x64c>)
 8008818:	f10d 050e 	add.w	r5, sp, #14
 800881c:	f1a6 0834 	sub.w	r8, r6, #52	; 0x34
 8008820:	eb04 0308 	add.w	r3, r4, r8
 8008824:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
          mpu.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 8008828:	f856 0f04 	ldr.w	r0, [r6, #4]!
          mpu.acc[axis]  = (int16_t) map(imu.accADC[axis], -32768, 32768, -1000, 1000);
 800882c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008830:	437b      	muls	r3, r7
 8008832:	141b      	asrs	r3, r3, #16
 8008834:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8008838:	f825 3f02 	strh.w	r3, [r5, #2]!
          mpu.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 800883c:	f7f8 fc7a 	bl	8001134 <__aeabi_f2iz>
 8008840:	80e8      	strh	r0, [r5, #6]
          mpu.mag[axis]  = (int16_t) imu.magRaw[axis];
 8008842:	69b0      	ldr	r0, [r6, #24]
 8008844:	f7f8 fc76 	bl	8001134 <__aeabi_f2iz>
 8008848:	3402      	adds	r4, #2
        for(uint8_t axis=0; axis<3;axis++){
 800884a:	2c06      	cmp	r4, #6
          mpu.mag[axis]  = (int16_t) imu.magRaw[axis];
 800884c:	81a8      	strh	r0, [r5, #12]
        for(uint8_t axis=0; axis<3;axis++){
 800884e:	d1e7      	bne.n	8008820 <evaluateCommand+0x598>
	      s_struct((uint8_t*)&mpu,18);
 8008850:	2112      	movs	r1, #18
 8008852:	e718      	b.n	8008686 <evaluateCommand+0x3fe>
	      msp_raw_gps.a     = GPS.fixquality;
 8008854:	4b1d      	ldr	r3, [pc, #116]	; (80088cc <evaluateCommand+0x644>)
 8008856:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800885a:	f88d 2010 	strb.w	r2, [sp, #16]
	      msp_raw_gps.b     = GPS.satellites;
 800885e:	f893 2091 	ldrb.w	r2, [r3, #145]	; 0x91
 8008862:	f88d 2011 	strb.w	r2, [sp, #17]
	      msp_raw_gps.c     = GPS.latitudeDegrees;
 8008866:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	      msp_raw_gps.d     = GPS.longitudeDegrees;
 800886a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	      msp_raw_gps.c     = GPS.latitudeDegrees;
 800886e:	9205      	str	r2, [sp, #20]
	      msp_raw_gps.d     = GPS.longitudeDegrees;
 8008870:	9306      	str	r3, [sp, #24]
 8008872:	e721      	b.n	80086b8 <evaluateCommand+0x430>
	      analog.VBAT = BAT.VBAT;
 8008874:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <evaluateCommand+0x640>)
 8008876:	6858      	ldr	r0, [r3, #4]
 8008878:	f7f8 fc82 	bl	8001180 <__aeabi_f2uiz>
	      analog.Temp = (imu.Temp*10);
 800887c:	4b11      	ldr	r3, [pc, #68]	; (80088c4 <evaluateCommand+0x63c>)
 800887e:	4916      	ldr	r1, [pc, #88]	; (80088d8 <evaluateCommand+0x650>)
	      analog.VBAT = BAT.VBAT;
 8008880:	f8ad 0010 	strh.w	r0, [sp, #16]
	      analog.Temp = (imu.Temp*10);
 8008884:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008886:	f7f8 fa79 	bl	8000d7c <__aeabi_fmul>
 800888a:	f7f8 fc79 	bl	8001180 <__aeabi_f2uiz>
	      s_struct((uint8_t*)&analog,4);
 800888e:	2104      	movs	r1, #4
	      analog.Temp = (imu.Temp*10);
 8008890:	f8ad 0012 	strh.w	r0, [sp, #18]
 8008894:	e6f7      	b.n	8008686 <evaluateCommand+0x3fe>
 8008896:	bf00      	nop
 8008898:	20000884 	.word	0x20000884
 800889c:	08011463 	.word	0x08011463
 80088a0:	20001284 	.word	0x20001284
 80088a4:	20001524 	.word	0x20001524
 80088a8:	080114d3 	.word	0x080114d3
 80088ac:	2000105c 	.word	0x2000105c
 80088b0:	200010d8 	.word	0x200010d8
 80088b4:	20000bac 	.word	0x20000bac
 80088b8:	20000bbc 	.word	0x20000bbc
 80088bc:	20001564 	.word	0x20001564
 80088c0:	20001264 	.word	0x20001264
 80088c4:	200011b8 	.word	0x200011b8
 80088c8:	20001308 	.word	0x20001308
 80088cc:	20000c48 	.word	0x20000c48
 80088d0:	20000d22 	.word	0x20000d22
 80088d4:	200011ec 	.word	0x200011ec
 80088d8:	41200000 	.word	0x41200000
 80088dc:	4c7b      	ldr	r4, [pc, #492]	; (8008acc <evaluateCommand+0x844>)
				 pid.kp[i] /= 10;
 80088de:	4d7c      	ldr	r5, [pc, #496]	; (8008ad0 <evaluateCommand+0x848>)
 80088e0:	f104 060c 	add.w	r6, r4, #12
				 pid.kp[i] = (float) read16();
 80088e4:	f7ff f9a0 	bl	8007c28 <read16>
 80088e8:	f7f8 f9f0 	bl	8000ccc <__aeabi_ui2f>
				 pid.kp[i] /= 10;
 80088ec:	4629      	mov	r1, r5
 80088ee:	f7f8 faf9 	bl	8000ee4 <__aeabi_fdiv>
 80088f2:	f844 0f04 	str.w	r0, [r4, #4]!
				 pid.ki[i] = (float) read16();
 80088f6:	f7ff f997 	bl	8007c28 <read16>
 80088fa:	f7f8 f9e7 	bl	8000ccc <__aeabi_ui2f>
				 pid.ki[i] /= 10;
 80088fe:	4629      	mov	r1, r5
 8008900:	f7f8 faf0 	bl	8000ee4 <__aeabi_fdiv>
 8008904:	6320      	str	r0, [r4, #48]	; 0x30
				 pid.kd[i] = (float) read16();
 8008906:	f7ff f98f 	bl	8007c28 <read16>
 800890a:	f7f8 f9df 	bl	8000ccc <__aeabi_ui2f>
				 pid.kd[i] /= 10;
 800890e:	4629      	mov	r1, r5
 8008910:	f7f8 fae8 	bl	8000ee4 <__aeabi_fdiv>
 8008914:	6620      	str	r0, [r4, #96]	; 0x60
				 pid.kp1[i] = (float) read16();
 8008916:	f7ff f987 	bl	8007c28 <read16>
 800891a:	f7f8 f9d7 	bl	8000ccc <__aeabi_ui2f>
	       pid.kp1[i] /= 10;
 800891e:	4629      	mov	r1, r5
 8008920:	f7f8 fae0 	bl	8000ee4 <__aeabi_fdiv>
 8008924:	60e0      	str	r0, [r4, #12]
         pid.ki1[i] = (float) read16();
 8008926:	f7ff f97f 	bl	8007c28 <read16>
 800892a:	f7f8 f9cf 	bl	8000ccc <__aeabi_ui2f>
         pid.ki1[i] /= 10;
 800892e:	4629      	mov	r1, r5
 8008930:	f7f8 fad8 	bl	8000ee4 <__aeabi_fdiv>
 8008934:	63e0      	str	r0, [r4, #60]	; 0x3c
         pid.kp2[i] = (float) read16();
 8008936:	f7ff f977 	bl	8007c28 <read16>
 800893a:	f7f8 f9c7 	bl	8000ccc <__aeabi_ui2f>
         pid.kp2[i] /= 10;
 800893e:	4629      	mov	r1, r5
 8008940:	f7f8 fad0 	bl	8000ee4 <__aeabi_fdiv>
 8008944:	61a0      	str	r0, [r4, #24]
         pid.ki2[i] = (float) read16();
 8008946:	f7ff f96f 	bl	8007c28 <read16>
 800894a:	f7f8 f9bf 	bl	8000ccc <__aeabi_ui2f>
         pid.ki2[i] /= 10;
 800894e:	4629      	mov	r1, r5
 8008950:	f7f8 fac8 	bl	8000ee4 <__aeabi_fdiv>
 8008954:	64a0      	str	r0, [r4, #72]	; 0x48
         pid.kd2[i] = (float) read16();
 8008956:	f7ff f967 	bl	8007c28 <read16>
 800895a:	f7f8 f9b7 	bl	8000ccc <__aeabi_ui2f>
         pid.kd2[i] /= 10;
 800895e:	4629      	mov	r1, r5
 8008960:	f7f8 fac0 	bl	8000ee4 <__aeabi_fdiv>
 8008964:	66e0      	str	r0, [r4, #108]	; 0x6c
         pid.kp_rate[i] = (float) read16();
 8008966:	f7ff f95f 	bl	8007c28 <read16>
 800896a:	f7f8 f9af 	bl	8000ccc <__aeabi_ui2f>
         pid.kp_rate[i] /= 10;
 800896e:	4629      	mov	r1, r5
 8008970:	f7f8 fab8 	bl	8000ee4 <__aeabi_fdiv>
 8008974:	6260      	str	r0, [r4, #36]	; 0x24
         pid.ki_rate[i] = (float) read16();
 8008976:	f7ff f957 	bl	8007c28 <read16>
 800897a:	f7f8 f9a7 	bl	8000ccc <__aeabi_ui2f>
         pid.ki_rate[i] /= 10;
 800897e:	4629      	mov	r1, r5
 8008980:	f7f8 fab0 	bl	8000ee4 <__aeabi_fdiv>
 8008984:	6560      	str	r0, [r4, #84]	; 0x54
         pid.kd_rate[i] = (float) read16();
 8008986:	f7ff f94f 	bl	8007c28 <read16>
 800898a:	f7f8 f99f 	bl	8000ccc <__aeabi_ui2f>
         pid.kd_rate[i] /= 10;
 800898e:	4629      	mov	r1, r5
 8008990:	f7f8 faa8 	bl	8000ee4 <__aeabi_fdiv>
			 	for(i=0; i < 3; i++){
 8008994:	42b4      	cmp	r4, r6
         pid.kd_rate[i] /= 10;
 8008996:	67a0      	str	r0, [r4, #120]	; 0x78
			 	for(i=0; i < 3; i++){
 8008998:	d1a4      	bne.n	80088e4 <evaluateCommand+0x65c>
 800899a:	e48c      	b.n	80082b6 <evaluateCommand+0x2e>
       Error.error = 0;
 800899c:	2400      	movs	r4, #0
 800899e:	4b4d      	ldr	r3, [pc, #308]	; (8008ad4 <evaluateCommand+0x84c>)
       RGB_R_OFF;
 80089a0:	2201      	movs	r2, #1
 80089a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80089a6:	484c      	ldr	r0, [pc, #304]	; (8008ad8 <evaluateCommand+0x850>)
       Error.error = 0;
 80089a8:	701c      	strb	r4, [r3, #0]
       RGB_R_OFF;
 80089aa:	f7f9 faf3 	bl	8001f94 <HAL_GPIO_WritePin>
       cycleTimeMin = 65535;
 80089ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
       cycleTimeMax = 0;
 80089b2:	4b4a      	ldr	r3, [pc, #296]	; (8008adc <evaluateCommand+0x854>)
 80089b4:	801c      	strh	r4, [r3, #0]
       cycleTimeMin = 65535;
 80089b6:	4b4a      	ldr	r3, [pc, #296]	; (8008ae0 <evaluateCommand+0x858>)
 80089b8:	801a      	strh	r2, [r3, #0]
       f.mag_reset = 1;
 80089ba:	2201      	movs	r2, #1
 80089bc:	4b49      	ldr	r3, [pc, #292]	; (8008ae4 <evaluateCommand+0x85c>)
 80089be:	765a      	strb	r2, [r3, #25]
        break;
 80089c0:	e479      	b.n	80082b6 <evaluateCommand+0x2e>
			 if(!f.ARMED){
 80089c2:	4b48      	ldr	r3, [pc, #288]	; (8008ae4 <evaluateCommand+0x85c>)
 80089c4:	785a      	ldrb	r2, [r3, #1]
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	f47f ac75 	bne.w	80082b6 <evaluateCommand+0x2e>
			   calibratingA=512;
 80089cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089d0:	4a45      	ldr	r2, [pc, #276]	; (8008ae8 <evaluateCommand+0x860>)
 80089d2:	8011      	strh	r1, [r2, #0]
			   f.CALIBRATE_ACC = 1;
 80089d4:	2201      	movs	r2, #1
 80089d6:	711a      	strb	r2, [r3, #4]
 80089d8:	e46d      	b.n	80082b6 <evaluateCommand+0x2e>
				MSP_TRIM[PITCH] -= 1;
 80089da:	4a44      	ldr	r2, [pc, #272]	; (8008aec <evaluateCommand+0x864>)
 80089dc:	6853      	ldr	r3, [r2, #4]
 80089de:	3b01      	subs	r3, #1
 80089e0:	6053      	str	r3, [r2, #4]
				sprintf(Buf, "MSP_TRIM_DOWN : %d, %d, %d, %d, %d\r\n ", currentPortState->inBuf[0], currentPortState->inBuf[1], currentPortState->inBuf[2], currentPortState->inBuf[3], currentPortState->inBuf[4]);
 80089e2:	7988      	ldrb	r0, [r1, #6]
 80089e4:	78cb      	ldrb	r3, [r1, #3]
 80089e6:	788a      	ldrb	r2, [r1, #2]
 80089e8:	9002      	str	r0, [sp, #8]
 80089ea:	7948      	ldrb	r0, [r1, #5]
 80089ec:	9001      	str	r0, [sp, #4]
 80089ee:	7909      	ldrb	r1, [r1, #4]
 80089f0:	9100      	str	r1, [sp, #0]
 80089f2:	493f      	ldr	r1, [pc, #252]	; (8008af0 <evaluateCommand+0x868>)
 80089f4:	e5f2      	b.n	80085dc <evaluateCommand+0x354>
				MSP_TRIM[ROLL] -= 1;
 80089f6:	4a3d      	ldr	r2, [pc, #244]	; (8008aec <evaluateCommand+0x864>)
 80089f8:	6813      	ldr	r3, [r2, #0]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	6013      	str	r3, [r2, #0]
				sprintf(Buf, "MSP_TRIM_LEFT : %d, %d, %d, %d, %d\r\n ", currentPortState->inBuf[0], currentPortState->inBuf[1], currentPortState->inBuf[2], currentPortState->inBuf[3], currentPortState->inBuf[4]);
 80089fe:	7988      	ldrb	r0, [r1, #6]
 8008a00:	78cb      	ldrb	r3, [r1, #3]
 8008a02:	788a      	ldrb	r2, [r1, #2]
 8008a04:	9002      	str	r0, [sp, #8]
 8008a06:	7948      	ldrb	r0, [r1, #5]
 8008a08:	9001      	str	r0, [sp, #4]
 8008a0a:	7909      	ldrb	r1, [r1, #4]
 8008a0c:	9100      	str	r1, [sp, #0]
 8008a0e:	4939      	ldr	r1, [pc, #228]	; (8008af4 <evaluateCommand+0x86c>)
 8008a10:	e5e4      	b.n	80085dc <evaluateCommand+0x354>
	      RGB_B_TOGGLE;
 8008a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a16:	4830      	ldr	r0, [pc, #192]	; (8008ad8 <evaluateCommand+0x850>)
 8008a18:	f7f9 fac1 	bl	8001f9e <HAL_GPIO_TogglePin>
 8008a1c:	240c      	movs	r4, #12
 8008a1e:	4d2b      	ldr	r5, [pc, #172]	; (8008acc <evaluateCommand+0x844>)
	        writeFloat(  0+(4*i), pid.kp[i]);
 8008a20:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8008a24:	f1a4 000c 	sub.w	r0, r4, #12
 8008a28:	f7fb fc27 	bl	800427a <writeFloat>
	        writeFloat( 12+(4*i), pid.ki[i]);
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8008a30:	f7fb fc23 	bl	800427a <writeFloat>
	        writeFloat( 24+(4*i), pid.kd[i]);
 8008a34:	f104 000c 	add.w	r0, r4, #12
 8008a38:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008a3a:	f7fb fc1e 	bl	800427a <writeFloat>
          writeFloat( 36+(4*i), pid.kp1[i]);
 8008a3e:	f104 0018 	add.w	r0, r4, #24
 8008a42:	68e9      	ldr	r1, [r5, #12]
 8008a44:	f7fb fc19 	bl	800427a <writeFloat>
          writeFloat( 48+(4*i), pid.ki1[i]);
 8008a48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a4c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8008a4e:	f7fb fc14 	bl	800427a <writeFloat>
          writeFloat( 60+(4*i), pid.kp2[i]);
 8008a52:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008a56:	69a9      	ldr	r1, [r5, #24]
 8008a58:	f7fb fc0f 	bl	800427a <writeFloat>
          writeFloat( 72+(4*i), pid.ki2[i]);
 8008a5c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8008a60:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8008a62:	f7fb fc0a 	bl	800427a <writeFloat>
          writeFloat( 84+(4*i), pid.kd2[i]);
 8008a66:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8008a6a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8008a6c:	f7fb fc05 	bl	800427a <writeFloat>
          writeFloat( 96+(4*i), pid.kp_rate[i]);
 8008a70:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8008a74:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008a76:	f7fb fc00 	bl	800427a <writeFloat>
          writeFloat(108+(4*i), pid.ki_rate[i]);
 8008a7a:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008a7e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8008a80:	f7fb fbfb 	bl	800427a <writeFloat>
          writeFloat(120+(4*i), pid.kd_rate[i]);
 8008a84:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8008a88:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8008a8a:	3404      	adds	r4, #4
 8008a8c:	f7fb fbf5 	bl	800427a <writeFloat>
	      for(int i = 0; i < 3; i++){
 8008a90:	2c18      	cmp	r4, #24
 8008a92:	d1c5      	bne.n	8008a20 <evaluateCommand+0x798>
	      writeFloat(132, magBias[0]);
 8008a94:	4c18      	ldr	r4, [pc, #96]	; (8008af8 <evaluateCommand+0x870>)
 8008a96:	2084      	movs	r0, #132	; 0x84
 8008a98:	6821      	ldr	r1, [r4, #0]
 8008a9a:	f7fb fbee 	bl	800427a <writeFloat>
	      writeFloat(136, magBias[1]);
 8008a9e:	6861      	ldr	r1, [r4, #4]
 8008aa0:	2088      	movs	r0, #136	; 0x88
 8008aa2:	f7fb fbea 	bl	800427a <writeFloat>
	      writeFloat(140, magBias[2]);
 8008aa6:	68a1      	ldr	r1, [r4, #8]
	      writeFloat(144, magScale[0]);
 8008aa8:	4c14      	ldr	r4, [pc, #80]	; (8008afc <evaluateCommand+0x874>)
	      writeFloat(140, magBias[2]);
 8008aaa:	208c      	movs	r0, #140	; 0x8c
 8008aac:	f7fb fbe5 	bl	800427a <writeFloat>
	      writeFloat(144, magScale[0]);
 8008ab0:	6821      	ldr	r1, [r4, #0]
 8008ab2:	2090      	movs	r0, #144	; 0x90
 8008ab4:	f7fb fbe1 	bl	800427a <writeFloat>
	      writeFloat(148, magScale[1]);
 8008ab8:	6861      	ldr	r1, [r4, #4]
 8008aba:	2094      	movs	r0, #148	; 0x94
 8008abc:	f7fb fbdd 	bl	800427a <writeFloat>
	      writeFloat(152, magScale[2]);
 8008ac0:	68a1      	ldr	r1, [r4, #8]
 8008ac2:	2098      	movs	r0, #152	; 0x98
 8008ac4:	f7fb fbd9 	bl	800427a <writeFloat>
 }
 8008ac8:	f7ff bbf5 	b.w	80082b6 <evaluateCommand+0x2e>
 8008acc:	20000d2c 	.word	0x20000d2c
 8008ad0:	41200000 	.word	0x41200000
 8008ad4:	20001564 	.word	0x20001564
 8008ad8:	40010c00 	.word	0x40010c00
 8008adc:	20000bb8 	.word	0x20000bb8
 8008ae0:	20000024 	.word	0x20000024
 8008ae4:	2000105c 	.word	0x2000105c
 8008ae8:	2000000e 	.word	0x2000000e
 8008aec:	20000884 	.word	0x20000884
 8008af0:	08011487 	.word	0x08011487
 8008af4:	080114ad 	.word	0x080114ad
 8008af8:	2000084c 	.word	0x2000084c
 8008afc:	2000126c 	.word	0x2000126c

08008b00 <SerialCom>:
void SerialCom(void) {
 8008b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  timeMax = micros();
 8008b04:	f000 f8b2 	bl	8008c6c <micros>
	for(int i = 0; i < 2; i++){
 8008b08:	2400      	movs	r4, #0
  timeMax = micros();
 8008b0a:	4680      	mov	r8, r0
        GPS.satellites = 0;
 8008b0c:	4d4a      	ldr	r5, [pc, #296]	; (8008c38 <SerialCom+0x138>)
    currentPortState = &ports[i];
 8008b0e:	2386      	movs	r3, #134	; 0x86
 8008b10:	f44f 7784 	mov.w	r7, #264	; 0x108
 8008b14:	4a49      	ldr	r2, [pc, #292]	; (8008c3c <SerialCom+0x13c>)
 8008b16:	4e4a      	ldr	r6, [pc, #296]	; (8008c40 <SerialCom+0x140>)
 8008b18:	fb03 2304 	mla	r3, r3, r4, r2
 8008b1c:	6033      	str	r3, [r6, #0]
    CURRENTPORT = i;
 8008b1e:	4b49      	ldr	r3, [pc, #292]	; (8008c44 <SerialCom+0x144>)
 8008b20:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8008c58 <SerialCom+0x158>
 8008b24:	701c      	strb	r4, [r3, #0]
 8008b26:	4b48      	ldr	r3, [pc, #288]	; (8008c48 <SerialCom+0x148>)
 8008b28:	fb07 3704 	mla	r7, r7, r4, r3
    while(QueueAvailable(&Q_buffer[i]) > 0){
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	f7fd f93e 	bl	8005dae <QueueAvailable>
 8008b32:	b918      	cbnz	r0, 8008b3c <SerialCom+0x3c>
	for(int i = 0; i < 2; i++){
 8008b34:	3401      	adds	r4, #1
 8008b36:	2c02      	cmp	r4, #2
 8008b38:	d074      	beq.n	8008c24 <SerialCom+0x124>
 8008b3a:	e7e8      	b.n	8008b0e <SerialCom+0xe>
	  c = read_Q(&Q_buffer[i]);
 8008b3c:	4638      	mov	r0, r7
 8008b3e:	f7fd f914 	bl	8005d6a <read_Q>
    if (currentPortState->c_state == IDLE) {
 8008b42:	6833      	ldr	r3, [r6, #0]
	  c = read_Q(&Q_buffer[i]);
 8008b44:	4682      	mov	sl, r0
    if (currentPortState->c_state == IDLE) {
 8008b46:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
 8008b4a:	b932      	cbnz	r2, 8008b5a <SerialCom+0x5a>
      currentPortState->c_state = (c=='$') ? HEADER_START : IDLE;
 8008b4c:	f1a0 0124 	sub.w	r1, r0, #36	; 0x24
 8008b50:	424a      	negs	r2, r1
 8008b52:	414a      	adcs	r2, r1
      currentPortState->c_state = IDLE;
 8008b54:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8008b58:	e037      	b.n	8008bca <SerialCom+0xca>
    } else if (currentPortState->c_state == HEADER_START) {
 8008b5a:	2a01      	cmp	r2, #1
 8008b5c:	d104      	bne.n	8008b68 <SerialCom+0x68>
      currentPortState->c_state = (c=='M') ? HEADER_M : IDLE;
 8008b5e:	284d      	cmp	r0, #77	; 0x4d
 8008b60:	bf14      	ite	ne
 8008b62:	2200      	movne	r2, #0
 8008b64:	2202      	moveq	r2, #2
 8008b66:	e7f5      	b.n	8008b54 <SerialCom+0x54>
    } else if (currentPortState->c_state == HEADER_M) {
 8008b68:	2a02      	cmp	r2, #2
 8008b6a:	d104      	bne.n	8008b76 <SerialCom+0x76>
      currentPortState->c_state = (c=='<') ? HEADER_ARROW : IDLE;
 8008b6c:	283c      	cmp	r0, #60	; 0x3c
 8008b6e:	bf14      	ite	ne
 8008b70:	2200      	movne	r2, #0
 8008b72:	2203      	moveq	r2, #3
 8008b74:	e7ee      	b.n	8008b54 <SerialCom+0x54>
    } else if (currentPortState->c_state == HEADER_ARROW) {
 8008b76:	2a03      	cmp	r2, #3
 8008b78:	d10e      	bne.n	8008b98 <SerialCom+0x98>
      if (c > INBUF_SIZE) {  // now we are expecting the payload size
 8008b7a:	2880      	cmp	r0, #128	; 0x80
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	d902      	bls.n	8008b88 <SerialCom+0x88>
        currentPortState->c_state = IDLE;
 8008b82:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        continue;
 8008b86:	e7d1      	b.n	8008b2c <SerialCom+0x2c>
        currentPortState->offset = 0;
 8008b88:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        currentPortState->indRX = 0;
 8008b8c:	705a      	strb	r2, [r3, #1]
        currentPortState->dataSize = c;
 8008b8e:	f883 0084 	strb.w	r0, [r3, #132]	; 0x84
        currentPortState->checksum ^= c;
 8008b92:	7018      	strb	r0, [r3, #0]
        currentPortState->c_state = HEADER_SIZE;
 8008b94:	2204      	movs	r2, #4
 8008b96:	e7dd      	b.n	8008b54 <SerialCom+0x54>
    } else if (currentPortState->c_state == HEADER_SIZE) {
 8008b98:	2a04      	cmp	r2, #4
 8008b9a:	d106      	bne.n	8008baa <SerialCom+0xaa>
      currentPortState->checksum ^= c;
 8008b9c:	781a      	ldrb	r2, [r3, #0]
      currentPortState->cmdMSP = c;
 8008b9e:	f883 0082 	strb.w	r0, [r3, #130]	; 0x82
      currentPortState->checksum ^= c;
 8008ba2:	4042      	eors	r2, r0
 8008ba4:	701a      	strb	r2, [r3, #0]
      currentPortState->c_state = HEADER_CMD;
 8008ba6:	2205      	movs	r2, #5
 8008ba8:	e7d4      	b.n	8008b54 <SerialCom+0x54>
    } else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset < currentPortState->dataSize) {
 8008baa:	2a05      	cmp	r2, #5
 8008bac:	d10d      	bne.n	8008bca <SerialCom+0xca>
 8008bae:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 8008bb2:	f893 1083 	ldrb.w	r1, [r3, #131]	; 0x83
 8008bb6:	428a      	cmp	r2, r1
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	d935      	bls.n	8008c28 <SerialCom+0x128>
      currentPortState->checksum ^= c;
 8008bbc:	4042      	eors	r2, r0
 8008bbe:	701a      	strb	r2, [r3, #0]
      currentPortState->inBuf[currentPortState->offset++] = c;
 8008bc0:	1c4a      	adds	r2, r1, #1
 8008bc2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8008bc6:	440b      	add	r3, r1
 8008bc8:	7098      	strb	r0, [r3, #2]
    if(i == UART2){
 8008bca:	2c01      	cmp	r4, #1
 8008bcc:	d124      	bne.n	8008c18 <SerialCom+0x118>
      if (GPS_newFrame(c)){
 8008bce:	4650      	mov	r0, sl
 8008bd0:	f7fb fc8a 	bl	80044e8 <GPS_newFrame>
 8008bd4:	b1a0      	cbz	r0, 8008c00 <SerialCom+0x100>
        RGB_R_TOGGLE;
 8008bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008bda:	481c      	ldr	r0, [pc, #112]	; (8008c4c <SerialCom+0x14c>)
 8008bdc:	f7f9 f9df 	bl	8001f9e <HAL_GPIO_TogglePin>
        if (GPS.GPS_update == 1) GPS.GPS_update = 0; else GPS.GPS_update = 1; //Blink GPS update
 8008be0:	f895 308c 	ldrb.w	r3, [r5, #140]	; 0x8c
        GPS_last_frame_seen = timeMax;
 8008be4:	f8c9 8000 	str.w	r8, [r9]
        if (GPS.GPS_update == 1) GPS.GPS_update = 0; else GPS.GPS_update = 1; //Blink GPS update
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	bf04      	itt	eq
 8008bec:	2300      	moveq	r3, #0
 8008bee:	f885 308c 	strbeq.w	r3, [r5, #140]	; 0x8c
        GPS.GPS_Frame = 1;
 8008bf2:	f04f 0301 	mov.w	r3, #1
        if (GPS.GPS_update == 1) GPS.GPS_update = 0; else GPS.GPS_update = 1; //Blink GPS update
 8008bf6:	bf18      	it	ne
 8008bf8:	f885 408c 	strbne.w	r4, [r5, #140]	; 0x8c
        GPS.GPS_Frame = 1;
 8008bfc:	f885 308d 	strb.w	r3, [r5, #141]	; 0x8d
      if ((timeMax - GPS_last_frame_seen) > 1200000) {
 8008c00:	f8d9 3000 	ldr.w	r3, [r9]
 8008c04:	4a12      	ldr	r2, [pc, #72]	; (8008c50 <SerialCom+0x150>)
 8008c06:	eba8 0303 	sub.w	r3, r8, r3
 8008c0a:	4293      	cmp	r3, r2
        f.GPS_FIX = 0;
 8008c0c:	bf81      	itttt	hi
 8008c0e:	2300      	movhi	r3, #0
 8008c10:	4a10      	ldrhi	r2, [pc, #64]	; (8008c54 <SerialCom+0x154>)
        GPS.satellites = 0;
 8008c12:	f885 3091 	strbhi.w	r3, [r5, #145]	; 0x91
        f.GPS_FIX = 0;
 8008c16:	73d3      	strbhi	r3, [r2, #15]
    if (micros()-timeMax>250) return;  // Limit the maximum execution time of serial decoding to avoid time spike
 8008c18:	f000 f828 	bl	8008c6c <micros>
 8008c1c:	eba0 0008 	sub.w	r0, r0, r8
 8008c20:	28fa      	cmp	r0, #250	; 0xfa
 8008c22:	d983      	bls.n	8008b2c <SerialCom+0x2c>
 8008c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (currentPortState->checksum == c) {
 8008c28:	4282      	cmp	r2, r0
 8008c2a:	d101      	bne.n	8008c30 <SerialCom+0x130>
				evaluateCommand();
 8008c2c:	f7ff fb2c 	bl	8008288 <evaluateCommand>
      currentPortState->c_state = IDLE;
 8008c30:	6833      	ldr	r3, [r6, #0]
 8008c32:	2200      	movs	r2, #0
 8008c34:	e78e      	b.n	8008b54 <SerialCom+0x54>
 8008c36:	bf00      	nop
 8008c38:	20000c48 	.word	0x20000c48
 8008c3c:	20000890 	.word	0x20000890
 8008c40:	20000020 	.word	0x20000020
 8008c44:	2000087c 	.word	0x2000087c
 8008c48:	20000e4c 	.word	0x20000e4c
 8008c4c:	40010c00 	.word	0x40010c00
 8008c50:	00124f80 	.word	0x00124f80
 8008c54:	2000105c 	.word	0x2000105c
 8008c58:	20000880 	.word	0x20000880

08008c5c <HAL_SYSTICK_Callback>:
static volatile uint32_t msTicks = 0;


void HAL_SYSTICK_Callback(void)
{
	msTicks++;
 8008c5c:	4a02      	ldr	r2, [pc, #8]	; (8008c68 <HAL_SYSTICK_Callback+0xc>)
 8008c5e:	6813      	ldr	r3, [r2, #0]
 8008c60:	3301      	adds	r3, #1
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20000ba4 	.word	0x20000ba4

08008c6c <micros>:
}

uint32_t micros(void)
{
 8008c6c:	b510      	push	{r4, lr}
	 register uint32_t ms, cycle_cnt;
	    do {
	        ms = msTicks;
 8008c6e:	4909      	ldr	r1, [pc, #36]	; (8008c94 <micros+0x28>)
	        cycle_cnt = SysTick->VAL;
 8008c70:	4c09      	ldr	r4, [pc, #36]	; (8008c98 <micros+0x2c>)
	        ms = msTicks;
 8008c72:	680a      	ldr	r2, [r1, #0]
	        cycle_cnt = SysTick->VAL;
 8008c74:	68a3      	ldr	r3, [r4, #8]
	    } while (ms != msTicks);
 8008c76:	6808      	ldr	r0, [r1, #0]
 8008c78:	4282      	cmp	r2, r0
 8008c7a:	d1fa      	bne.n	8008c72 <micros+0x6>
	    return (ms * 1000) + (72 * 1000 - cycle_cnt) / 72; //168
 8008c7c:	2048      	movs	r0, #72	; 0x48
 8008c7e:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
 8008c82:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008c86:	fbb3 f3f0 	udiv	r3, r3, r0
}
 8008c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c8e:	fb00 3002 	mla	r0, r0, r2, r3
 8008c92:	bd10      	pop	{r4, pc}
 8008c94:	20000ba4 	.word	0x20000ba4
 8008c98:	e000e010 	.word	0xe000e010

08008c9c <millis>:

uint32_t millis(void)
{
  return HAL_GetTick();
 8008c9c:	f7f8 bc5a 	b.w	8001554 <HAL_GetTick>

08008ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ca0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    RGB_R_TOGGLE;
 8008ca2:	4c03      	ldr	r4, [pc, #12]	; (8008cb0 <Error_Handler+0x10>)
 8008ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f7f9 f978 	bl	8001f9e <HAL_GPIO_TogglePin>
 8008cae:	e7f9      	b.n	8008ca4 <Error_Handler+0x4>
 8008cb0:	40010c00 	.word	0x40010c00

08008cb4 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cb4:	2228      	movs	r2, #40	; 0x28
{
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cba:	2100      	movs	r1, #0
 8008cbc:	eb0d 0002 	add.w	r0, sp, r2
 8008cc0:	f000 fea9 	bl	8009a16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008cc4:	2214      	movs	r2, #20
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	eb0d 0002 	add.w	r0, sp, r2
 8008ccc:	f000 fea3 	bl	8009a16 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008cd0:	2210      	movs	r2, #16
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	a801      	add	r0, sp, #4
 8008cd6:	f000 fe9e 	bl	8009a16 <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008cde:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008ce0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008ce2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008ce4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008ce6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008cea:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008cec:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008cee:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008cf0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008cf2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008cf4:	f7f9 ffb2 	bl	8002c5c <HAL_RCC_OscConfig>
 8008cf8:	b108      	cbz	r0, 8008cfe <SystemClock_Config+0x4a>
    Error_Handler();
 8008cfa:	f7ff ffd1 	bl	8008ca0 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008cfe:	230f      	movs	r3, #15
 8008d00:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d06:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008d08:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d0e:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008d10:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008d12:	f7fa f96b 	bl	8002fec <HAL_RCC_ClockConfig>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d1ef      	bne.n	8008cfa <SystemClock_Config+0x46>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8008d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d1e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8008d20:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8008d22:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d24:	f7fa fa2c 	bl	8003180 <HAL_RCCEx_PeriphCLKConfig>
 8008d28:	4604      	mov	r4, r0
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d1e5      	bne.n	8008cfa <SystemClock_Config+0x46>
HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008d2e:	f7fa fa01 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8008d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d36:	fbb0 f0f3 	udiv	r0, r0, r3
 8008d3a:	f7f8 fed7 	bl	8001aec <HAL_SYSTICK_Config>
HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008d3e:	2004      	movs	r0, #4
 8008d40:	f7f8 feea 	bl	8001b18 <HAL_SYSTICK_CLKSourceConfig>
HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008d44:	4622      	mov	r2, r4
 8008d46:	4621      	mov	r1, r4
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4c:	f7f8 fe8e 	bl	8001a6c <HAL_NVIC_SetPriority>
}
 8008d50:	b014      	add	sp, #80	; 0x50
 8008d52:	bd10      	pop	{r4, pc}
 8008d54:	0000      	movs	r0, r0
	...

08008d58 <main>:
int main(void){
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d5c:	4d3d      	ldr	r5, [pc, #244]	; (8008e54 <main+0xfc>)
int main(void){
 8008d5e:	b0ab      	sub	sp, #172	; 0xac
  HAL_Init();
 8008d60:	f7f8 fbda 	bl	8001518 <HAL_Init>
  SystemClock_Config();
 8008d64:	f7ff ffa6 	bl	8008cb4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d68:	2210      	movs	r2, #16
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	a823      	add	r0, sp, #140	; 0x8c
 8008d6e:	f000 fe52 	bl	8009a16 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d72:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8008d74:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d76:	f043 0320 	orr.w	r3, r3, #32
 8008d7a:	61ab      	str	r3, [r5, #24]
 8008d7c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8008d7e:	2118      	movs	r1, #24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d80:	f003 0320 	and.w	r3, r3, #32
 8008d84:	9303      	str	r3, [sp, #12]
 8008d86:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d88:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8008d8a:	4833      	ldr	r0, [pc, #204]	; (8008e58 <main+0x100>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d8c:	f043 0304 	orr.w	r3, r3, #4
 8008d90:	61ab      	str	r3, [r5, #24]
 8008d92:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d94:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d96:	f003 0304 	and.w	r3, r3, #4
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d9e:	69ab      	ldr	r3, [r5, #24]
 8008da0:	f043 0308 	orr.w	r3, r3, #8
 8008da4:	61ab      	str	r3, [r5, #24]
 8008da6:	69ab      	ldr	r3, [r5, #24]
 8008da8:	f003 0308 	and.w	r3, r3, #8
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8008db0:	f7f9 f8f0 	bl	8001f94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8008db4:	2201      	movs	r2, #1
 8008db6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8008dba:	4827      	ldr	r0, [pc, #156]	; (8008e58 <main+0x100>)
 8008dbc:	f7f9 f8ea 	bl	8001f94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8008dc0:	f24e 0318 	movw	r3, #57368	; 0xe018
 8008dc4:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	9324      	str	r3, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008dca:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dcc:	a923      	add	r1, sp, #140	; 0x8c
 8008dce:	4822      	ldr	r0, [pc, #136]	; (8008e58 <main+0x100>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008dd0:	9326      	str	r3, [sp, #152]	; 0x98
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dd2:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dd4:	f7f8 fffe 	bl	8001dd4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008dd8:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8008dda:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008ddc:	f043 0301 	orr.w	r3, r3, #1
 8008de0:	616b      	str	r3, [r5, #20]
 8008de2:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8008de4:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8008dec:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008dee:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8008df0:	f7f8 fe3c 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8008df4:	200e      	movs	r0, #14
 8008df6:	f7f8 fe6d 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8008dfa:	4622      	mov	r2, r4
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	200f      	movs	r0, #15
 8008e00:	f7f8 fe34 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8008e04:	200f      	movs	r0, #15
 8008e06:	f7f8 fe65 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	2010      	movs	r0, #16
 8008e10:	f7f8 fe2c 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8008e14:	2010      	movs	r0, #16
 8008e16:	f7f8 fe5d 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	2011      	movs	r0, #17
 8008e20:	f7f8 fe24 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8008e24:	2011      	movs	r0, #17
 8008e26:	f7f8 fe55 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
  hi2c2.Init.ClockSpeed = 400000;
 8008e2a:	4d0c      	ldr	r5, [pc, #48]	; (8008e5c <main+0x104>)
  hi2c2.Instance = I2C2;
 8008e2c:	480c      	ldr	r0, [pc, #48]	; (8008e60 <main+0x108>)
  hi2c2.Init.ClockSpeed = 400000;
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <main+0x10c>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008e30:	6084      	str	r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 400000;
 8008e32:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008e36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 8008e3a:	60c4      	str	r4, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008e3c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008e3e:	6144      	str	r4, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8008e40:	6184      	str	r4, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008e42:	61c4      	str	r4, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008e44:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008e46:	f7f9 fa77 	bl	8002338 <HAL_I2C_Init>
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	b160      	cbz	r0, 8008e68 <main+0x110>
    Error_Handler();
 8008e4e:	f7ff ff27 	bl	8008ca0 <Error_Handler>
 8008e52:	bf00      	nop
 8008e54:	40021000 	.word	0x40021000
 8008e58:	40010c00 	.word	0x40010c00
 8008e5c:	00061a80 	.word	0x00061a80
 8008e60:	20001394 	.word	0x20001394
 8008e64:	40005800 	.word	0x40005800
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008e68:	4601      	mov	r1, r0
 8008e6a:	2210      	movs	r2, #16
 8008e6c:	a81f      	add	r0, sp, #124	; 0x7c
 8008e6e:	f000 fdd2 	bl	8009a16 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e72:	221c      	movs	r2, #28
 8008e74:	4629      	mov	r1, r5
 8008e76:	a823      	add	r0, sp, #140	; 0x8c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e78:	950a      	str	r5, [sp, #40]	; 0x28
 8008e7a:	950b      	str	r5, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e7c:	f000 fdcb 	bl	8009a16 <memset>
  htim4.Init.Prescaler = 72-1;
 8008e80:	2347      	movs	r3, #71	; 0x47
  htim4.Instance = TIM4;
 8008e82:	4cb6      	ldr	r4, [pc, #728]	; (800915c <main+0x404>)
  htim4.Init.Prescaler = 72-1;
 8008e84:	48b6      	ldr	r0, [pc, #728]	; (8009160 <main+0x408>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e86:	60a5      	str	r5, [r4, #8]
  htim4.Init.Prescaler = 72-1;
 8008e88:	e884 0009 	stmia.w	r4, {r0, r3}
    htim4.Init.Period = 2041-1;//490hz
 8008e8c:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008e90:	4620      	mov	r0, r4
    htim4.Init.Period = 2041-1;//490hz
 8008e92:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e94:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e96:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008e98:	f7fa fc6c 	bl	8003774 <HAL_TIM_Base_Init>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d1d6      	bne.n	8008e4e <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008ea4:	a91f      	add	r1, sp, #124	; 0x7c
 8008ea6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ea8:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008eaa:	f7fa facd 	bl	8003448 <HAL_TIM_ConfigClockSource>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d1cd      	bne.n	8008e4e <main+0xf6>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f7fa fc78 	bl	80037a8 <HAL_TIM_PWM_Init>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d1c8      	bne.n	8008e4e <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ebc:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ebe:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008ec0:	a90a      	add	r1, sp, #40	; 0x28
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f7fa fe32 	bl	8003b2c <HAL_TIMEx_MasterConfigSynchronization>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d1bf      	bne.n	8008e4e <main+0xf6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ece:	2360      	movs	r3, #96	; 0x60
 8008ed0:	9323      	str	r3, [sp, #140]	; 0x8c
    sConfigOC.Pulse = 1000;
 8008ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ed6:	9025      	str	r0, [sp, #148]	; 0x94
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ed8:	9027      	str	r0, [sp, #156]	; 0x9c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008eda:	a923      	add	r1, sp, #140	; 0x8c
 8008edc:	4620      	mov	r0, r4
    sConfigOC.Pulse = 1000;
 8008ede:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ee0:	f7fa fcc2 	bl	8003868 <HAL_TIM_PWM_ConfigChannel>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d1b2      	bne.n	8008e4e <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008ee8:	2204      	movs	r2, #4
 8008eea:	a923      	add	r1, sp, #140	; 0x8c
 8008eec:	4620      	mov	r0, r4
 8008eee:	f7fa fcbb 	bl	8003868 <HAL_TIM_PWM_ConfigChannel>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d1ab      	bne.n	8008e4e <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008ef6:	2208      	movs	r2, #8
 8008ef8:	a923      	add	r1, sp, #140	; 0x8c
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7fa fcb4 	bl	8003868 <HAL_TIM_PWM_ConfigChannel>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d1a4      	bne.n	8008e4e <main+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008f04:	220c      	movs	r2, #12
 8008f06:	a923      	add	r1, sp, #140	; 0x8c
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f7fa fcad 	bl	8003868 <HAL_TIM_PWM_ConfigChannel>
 8008f0e:	4605      	mov	r5, r0
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d19c      	bne.n	8008e4e <main+0xf6>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8008f14:	4601      	mov	r1, r0
 8008f16:	4620      	mov	r0, r4
 8008f18:	f7fa fdc6 	bl	8003aa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8008f1c:	2104      	movs	r1, #4
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f7fa fdc2 	bl	8003aa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8008f24:	2108      	movs	r1, #8
 8008f26:	4620      	mov	r0, r4
 8008f28:	f7fa fdbe 	bl	8003aa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8008f2c:	210c      	movs	r1, #12
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f7fa fdba 	bl	8003aa8 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim4);
 8008f34:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 57600;
 8008f36:	f44f 4461 	mov.w	r4, #57600	; 0xe100
  HAL_TIM_MspPostInit(&htim4);
 8008f3a:	f000 fb8f 	bl	800965c <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8008f3e:	4889      	ldr	r0, [pc, #548]	; (8009164 <main+0x40c>)
  huart1.Init.BaudRate = 57600;
 8008f40:	4b89      	ldr	r3, [pc, #548]	; (8009168 <main+0x410>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008f42:	6085      	str	r5, [r0, #8]
  huart1.Init.BaudRate = 57600;
 8008f44:	e880 0018 	stmia.w	r0, {r3, r4}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008f48:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008f4a:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008f4c:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008f4e:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f50:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f52:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008f54:	f7fa fee2 	bl	8003d1c <HAL_UART_Init>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	f47f af78 	bne.w	8008e4e <main+0xf6>
  huart2.Instance = USART2;
 8008f5e:	4883      	ldr	r0, [pc, #524]	; (800916c <main+0x414>)
 8008f60:	4b83      	ldr	r3, [pc, #524]	; (8009170 <main+0x418>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008f62:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 57600; //57600
 8008f64:	e880 0018 	stmia.w	r0, {r3, r4}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008f68:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008f6a:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008f6c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008f6e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008f70:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f72:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f74:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008f76:	f7fa fed1 	bl	8003d1c <HAL_UART_Init>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f47f af67 	bne.w	8008e4e <main+0xf6>
  hadc1.Instance = ADC1;
 8008f80:	4c7c      	ldr	r4, [pc, #496]	; (8009174 <main+0x41c>)
 8008f82:	4b7d      	ldr	r3, [pc, #500]	; (8009178 <main+0x420>)
  hadc1.Init.NbrOfConversion = 1;
 8008f84:	2601      	movs	r6, #1
  hadc1.Instance = ADC1;
 8008f86:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008f88:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8008f8c:	900c      	str	r0, [sp, #48]	; 0x30
 8008f8e:	900d      	str	r0, [sp, #52]	; 0x34
 8008f90:	900e      	str	r0, [sp, #56]	; 0x38
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008f92:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008f94:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008f96:	6160      	str	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008f98:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008f9a:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008f9c:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 8008f9e:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008fa0:	f7f8 fcd2 	bl	8001948 <HAL_ADC_Init>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	f47f af52 	bne.w	8008e4e <main+0xf6>
  sConfig.Channel = ADC_CHANNEL_4;
 8008faa:	2704      	movs	r7, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8008fac:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008fae:	a90c      	add	r1, sp, #48	; 0x30
 8008fb0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8008fb2:	970c      	str	r7, [sp, #48]	; 0x30
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008fb4:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008fb6:	f7f8 fb87 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8008fba:	4605      	mov	r5, r0
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f47f af46 	bne.w	8008e4e <main+0xf6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008fc2:	4601      	mov	r1, r0
 8008fc4:	2210      	movs	r2, #16
 8008fc6:	a817      	add	r0, sp, #92	; 0x5c
 8008fc8:	f000 fd25 	bl	8009a16 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008fcc:	4629      	mov	r1, r5
 8008fce:	2210      	movs	r2, #16
 8008fd0:	a81b      	add	r0, sp, #108	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fd2:	9508      	str	r5, [sp, #32]
 8008fd4:	9509      	str	r5, [sp, #36]	; 0x24
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008fd6:	f000 fd1e 	bl	8009a16 <memset>
  htim3.Init.Prescaler = 72-1;
 8008fda:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 8008fdc:	4c67      	ldr	r4, [pc, #412]	; (800917c <main+0x424>)
  htim3.Init.Prescaler = 72-1;
 8008fde:	4968      	ldr	r1, [pc, #416]	; (8009180 <main+0x428>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008fe0:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 72-1;
 8008fe2:	e884 000a 	stmia.w	r4, {r1, r3}
  htim3.Init.Period = 0xFFFF;
 8008fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fea:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0xFFFF;
 8008fec:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008fee:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ff0:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008ff2:	f7fa fbbf 	bl	8003774 <HAL_TIM_Base_Init>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f47f af29 	bne.w	8008e4e <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009000:	a917      	add	r1, sp, #92	; 0x5c
 8009002:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009004:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009006:	f7fa fa1f 	bl	8003448 <HAL_TIM_ConfigClockSource>
 800900a:	2800      	cmp	r0, #0
 800900c:	f47f af1f 	bne.w	8008e4e <main+0xf6>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8009010:	4620      	mov	r0, r4
 8009012:	f7fa fbe3 	bl	80037dc <HAL_TIM_IC_Init>
 8009016:	2800      	cmp	r0, #0
 8009018:	f47f af19 	bne.w	8008e4e <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800901c:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800901e:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009020:	a908      	add	r1, sp, #32
 8009022:	4620      	mov	r0, r4
 8009024:	f7fa fd82 	bl	8003b2c <HAL_TIMEx_MasterConfigSynchronization>
 8009028:	4602      	mov	r2, r0
 800902a:	2800      	cmp	r0, #0
 800902c:	f47f af0f 	bne.w	8008e4e <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009030:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8009032:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigIC.ICFilter = 0;
 8009034:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8009036:	a91b      	add	r1, sp, #108	; 0x6c
 8009038:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800903a:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800903c:	f7fa fca0 	bl	8003980 <HAL_TIM_IC_ConfigChannel>
 8009040:	2800      	cmp	r0, #0
 8009042:	f47f af04 	bne.w	8008e4e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8009046:	463a      	mov	r2, r7
 8009048:	a91b      	add	r1, sp, #108	; 0x6c
 800904a:	4620      	mov	r0, r4
 800904c:	f7fa fc98 	bl	8003980 <HAL_TIM_IC_ConfigChannel>
 8009050:	2800      	cmp	r0, #0
 8009052:	f47f aefc 	bne.w	8008e4e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8009056:	2208      	movs	r2, #8
 8009058:	a91b      	add	r1, sp, #108	; 0x6c
 800905a:	4620      	mov	r0, r4
 800905c:	f7fa fc90 	bl	8003980 <HAL_TIM_IC_ConfigChannel>
 8009060:	2800      	cmp	r0, #0
 8009062:	f47f aef4 	bne.w	8008e4e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8009066:	220c      	movs	r2, #12
 8009068:	a91b      	add	r1, sp, #108	; 0x6c
 800906a:	4620      	mov	r0, r4
 800906c:	f7fa fc88 	bl	8003980 <HAL_TIM_IC_ConfigChannel>
 8009070:	4605      	mov	r5, r0
 8009072:	2800      	cmp	r0, #0
 8009074:	f47f aeeb 	bne.w	8008e4e <main+0xf6>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8009078:	4601      	mov	r1, r0
 800907a:	4620      	mov	r0, r4
 800907c:	f7fa fd2a 	bl	8003ad4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8009080:	4639      	mov	r1, r7
 8009082:	4620      	mov	r0, r4
 8009084:	f7fa fd26 	bl	8003ad4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8009088:	2108      	movs	r1, #8
 800908a:	4620      	mov	r0, r4
 800908c:	f7fa fd22 	bl	8003ad4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8009090:	210c      	movs	r1, #12
 8009092:	4620      	mov	r0, r4
 8009094:	f7fa fd1e 	bl	8003ad4 <HAL_TIM_IC_Start_IT>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009098:	2210      	movs	r2, #16
 800909a:	4629      	mov	r1, r5
 800909c:	a80f      	add	r0, sp, #60	; 0x3c
 800909e:	f000 fcba 	bl	8009a16 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80090a2:	2210      	movs	r2, #16
 80090a4:	4629      	mov	r1, r5
 80090a6:	a813      	add	r0, sp, #76	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80090a8:	9506      	str	r5, [sp, #24]
 80090aa:	9507      	str	r5, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80090ac:	f000 fcb3 	bl	8009a16 <memset>
  htim2.Init.Prescaler = 72-1;
 80090b0:	2347      	movs	r3, #71	; 0x47
 80090b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80090b6:	4c33      	ldr	r4, [pc, #204]	; (8009184 <main+0x42c>)
  htim2.Init.Prescaler = 72-1;
 80090b8:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.Period = 0xFFFF;
 80090bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80090c0:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090c2:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 0xFFFF;
 80090c4:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090c6:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090c8:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80090ca:	f7fa fb53 	bl	8003774 <HAL_TIM_Base_Init>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f47f aebd 	bne.w	8008e4e <main+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80090d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80090d8:	a90f      	add	r1, sp, #60	; 0x3c
 80090da:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80090dc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80090de:	f7fa f9b3 	bl	8003448 <HAL_TIM_ConfigClockSource>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	f47f aeb3 	bne.w	8008e4e <main+0xf6>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80090e8:	4620      	mov	r0, r4
 80090ea:	f7fa fb77 	bl	80037dc <HAL_TIM_IC_Init>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	f47f aead 	bne.w	8008e4e <main+0xf6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090f4:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090f6:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80090f8:	a906      	add	r1, sp, #24
 80090fa:	4620      	mov	r0, r4
 80090fc:	f7fa fd16 	bl	8003b2c <HAL_TIMEx_MasterConfigSynchronization>
 8009100:	4602      	mov	r2, r0
 8009102:	2800      	cmp	r0, #0
 8009104:	f47f aea3 	bne.w	8008e4e <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009108:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800910a:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 800910c:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800910e:	a913      	add	r1, sp, #76	; 0x4c
 8009110:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009112:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8009114:	f7fa fc34 	bl	8003980 <HAL_TIM_IC_ConfigChannel>
 8009118:	2800      	cmp	r0, #0
 800911a:	f47f ae98 	bne.w	8008e4e <main+0xf6>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800911e:	463a      	mov	r2, r7
 8009120:	a913      	add	r1, sp, #76	; 0x4c
 8009122:	4620      	mov	r0, r4
 8009124:	f7fa fc2c 	bl	8003980 <HAL_TIM_IC_ConfigChannel>
 8009128:	4605      	mov	r5, r0
 800912a:	2800      	cmp	r0, #0
 800912c:	f47f ae8f 	bne.w	8008e4e <main+0xf6>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8009130:	4601      	mov	r1, r0
 8009132:	4620      	mov	r0, r4
 8009134:	f7fa fcce 	bl	8003ad4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8009138:	4639      	mov	r1, r7
 800913a:	4620      	mov	r0, r4
 800913c:	f7fa fcca 	bl	8003ad4 <HAL_TIM_IC_Start_IT>
  LED1_ON;
 8009140:	4632      	mov	r2, r6
 8009142:	2110      	movs	r1, #16
 8009144:	4810      	ldr	r0, [pc, #64]	; (8009188 <main+0x430>)
 8009146:	f7f8 ff25 	bl	8001f94 <HAL_GPIO_WritePin>
  LED0_OFF;
 800914a:	462a      	mov	r2, r5
 800914c:	2108      	movs	r1, #8
 800914e:	480e      	ldr	r0, [pc, #56]	; (8009188 <main+0x430>)
 8009150:	f7f8 ff20 	bl	8001f94 <HAL_GPIO_WritePin>
 8009154:	240a      	movs	r4, #10
    LED1_TOGGLE;
 8009156:	4d0c      	ldr	r5, [pc, #48]	; (8009188 <main+0x430>)
 8009158:	e018      	b.n	800918c <main+0x434>
 800915a:	bf00      	nop
 800915c:	20001354 	.word	0x20001354
 8009160:	40000800 	.word	0x40000800
 8009164:	20001524 	.word	0x20001524
 8009168:	40013800 	.word	0x40013800
 800916c:	200015ac 	.word	0x200015ac
 8009170:	40004400 	.word	0x40004400
 8009174:	2000146c 	.word	0x2000146c
 8009178:	40012400 	.word	0x40012400
 800917c:	200013e8 	.word	0x200013e8
 8009180:	40000400 	.word	0x40000400
 8009184:	2000156c 	.word	0x2000156c
 8009188:	40010c00 	.word	0x40010c00
 800918c:	2110      	movs	r1, #16
 800918e:	4628      	mov	r0, r5
 8009190:	f7f8 ff05 	bl	8001f9e <HAL_GPIO_TogglePin>
    LED0_TOGGLE;
 8009194:	2108      	movs	r1, #8
 8009196:	4628      	mov	r0, r5
 8009198:	f7f8 ff01 	bl	8001f9e <HAL_GPIO_TogglePin>
    HAL_Delay(25);
 800919c:	2019      	movs	r0, #25
 800919e:	f7f8 f9df 	bl	8001560 <HAL_Delay>
    HAL_Delay(25);
 80091a2:	2019      	movs	r0, #25
 80091a4:	f7f8 f9dc 	bl	8001560 <HAL_Delay>
  for (int i = 0; i < 10; i++){
 80091a8:	3c01      	subs	r4, #1
 80091aa:	d1ef      	bne.n	800918c <main+0x434>
   LED0_OFF;
 80091ac:	4622      	mov	r2, r4
 80091ae:	2108      	movs	r1, #8
 80091b0:	4887      	ldr	r0, [pc, #540]	; (80093d0 <main+0x678>)
 80091b2:	f7f8 feef 	bl	8001f94 <HAL_GPIO_WritePin>
   LED1_OFF;
 80091b6:	4622      	mov	r2, r4
 80091b8:	2110      	movs	r1, #16
 80091ba:	4885      	ldr	r0, [pc, #532]	; (80093d0 <main+0x678>)
 80091bc:	f7f8 feea 	bl	8001f94 <HAL_GPIO_WritePin>
   MPU9250_Init();
 80091c0:	f7fd ff78 	bl	80070b4 <MPU9250_Init>
   MS5611_Init(MS5611_ULTRA_HIGH_RES);
 80091c4:	2008      	movs	r0, #8
 80091c6:	f7fe fc23 	bl	8007a10 <MS5611_Init>
   gps_Init();
 80091ca:	f7fb f909 	bl	80043e0 <gps_Init>
  TM_AHRSIMU_Init(&AHRS, 250, 1.2f, 0.0f);
 80091ce:	2300      	movs	r3, #0
 80091d0:	4a80      	ldr	r2, [pc, #512]	; (80093d4 <main+0x67c>)
 80091d2:	4981      	ldr	r1, [pc, #516]	; (80093d8 <main+0x680>)
 80091d4:	4881      	ldr	r0, [pc, #516]	; (80093dc <main+0x684>)
 80091d6:	f7fb fd69 	bl	8004cac <TM_AHRSIMU_Init>
  Calibrate_gyro();
 80091da:	f7fd fab1 	bl	8006740 <Calibrate_gyro>
  RC_Init();
 80091de:	f7fc fec3 	bl	8005f68 <RC_Init>
  mixerInit();
 80091e2:	f7fc f8e5 	bl	80053b0 <mixerInit>
   QueueCreate(UART1);
 80091e6:	4620      	mov	r0, r4
 80091e8:	f7fc fd8e 	bl	8005d08 <QueueCreate>
   QueueCreate(UART2);
 80091ec:	2001      	movs	r0, #1
 80091ee:	f7fc fd8b 	bl	8005d08 <QueueCreate>
   PIDControlInit(&pid);
 80091f2:	487b      	ldr	r0, [pc, #492]	; (80093e0 <main+0x688>)
 80091f4:	f7fc f968 	bl	80054c8 <PIDControlInit>
   EEPROM_Init();
 80091f8:	f7fb f894 	bl	8004324 <EEPROM_Init>
   HAL_UART_Receive_DMA(&huart1, (uint8_t*)rx1_buffer, 1);
 80091fc:	2201      	movs	r2, #1
 80091fe:	4979      	ldr	r1, [pc, #484]	; (80093e4 <main+0x68c>)
 8009200:	4879      	ldr	r0, [pc, #484]	; (80093e8 <main+0x690>)
 8009202:	f7fa fe6f 	bl	8003ee4 <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx2_buffer, 1);
 8009206:	2201      	movs	r2, #1
 8009208:	4978      	ldr	r1, [pc, #480]	; (80093ec <main+0x694>)
 800920a:	4879      	ldr	r0, [pc, #484]	; (80093f0 <main+0x698>)
 800920c:	f7fa fe6a 	bl	8003ee4 <HAL_UART_Receive_DMA>
   previousTime = micros();
 8009210:	f7ff fd2c 	bl	8008c6c <micros>
          BAT.VBAT = ((((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW)*10;
 8009214:	f04f 0800 	mov.w	r8, #0
   previousTime = micros();
 8009218:	4d76      	ldr	r5, [pc, #472]	; (80093f4 <main+0x69c>)
          BAT.VBAT = ((((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW)*10;
 800921a:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8009444 <main+0x6ec>
   previousTime = micros();
 800921e:	6028      	str	r0, [r5, #0]
    switch (taskOrder){ //4~206us
 8009220:	4c75      	ldr	r4, [pc, #468]	; (80093f8 <main+0x6a0>)
    LED0_TOGGLE; //RED
 8009222:	2108      	movs	r1, #8
 8009224:	486a      	ldr	r0, [pc, #424]	; (80093d0 <main+0x678>)
 8009226:	f7f8 feba 	bl	8001f9e <HAL_GPIO_TogglePin>
      computeRC();
 800922a:	f7fc fed7 	bl	8005fdc <computeRC>
    computeIMU(); //1050~1500us
 800922e:	f7fb fff1 	bl	8005214 <computeIMU>
    switch (taskOrder){ //4~206us
 8009232:	7823      	ldrb	r3, [r4, #0]
 8009234:	2b03      	cmp	r3, #3
 8009236:	d811      	bhi.n	800925c <main+0x504>
 8009238:	e8df f003 	tbb	[pc, r3]
 800923c:	6a0d0702 	.word	0x6a0d0702
        taskOrder++;
 8009240:	2301      	movs	r3, #1
 8009242:	7023      	strb	r3, [r4, #0]
        if(Baro_update() !=0) break;
 8009244:	f7fe fc4c 	bl	8007ae0 <Baro_update>
 8009248:	b940      	cbnz	r0, 800925c <main+0x504>
        taskOrder++;
 800924a:	7823      	ldrb	r3, [r4, #0]
 800924c:	3301      	adds	r3, #1
 800924e:	7023      	strb	r3, [r4, #0]
        if(getEstimatedAltitude() !=0) break;
 8009250:	f7fe fa72 	bl	8007738 <getEstimatedAltitude>
 8009254:	b910      	cbnz	r0, 800925c <main+0x504>
        taskOrder++;
 8009256:	7823      	ldrb	r3, [r4, #0]
 8009258:	3301      	adds	r3, #1
 800925a:	7023      	strb	r3, [r4, #0]
   Control();
 800925c:	f7fc f9bc 	bl	80055d8 <Control>
   mixTable();
 8009260:	f7fc f8b8 	bl	80053d4 <mixTable>
   PwmWriteMotor();
 8009264:	f7fc fd2c 	bl	8005cc0 <PwmWriteMotor>
   PrintData(33);
 8009268:	2021      	movs	r0, #33	; 0x21
 800926a:	f7fe fce7 	bl	8007c3c <PrintData>
   flight_mode_signal();
 800926e:	f7fc f82d 	bl	80052cc <flight_mode_signal>
     timeInterleave = micros();
 8009272:	f7ff fcfb 	bl	8008c6c <micros>
 8009276:	4c61      	ldr	r4, [pc, #388]	; (80093fc <main+0x6a4>)
     uint8_t t=0;
 8009278:	2600      	movs	r6, #0
     timeInterleave = micros();
 800927a:	8020      	strh	r0, [r4, #0]
     while((int16_t)(micros()-timeInterleave)<650) t=1; //650
 800927c:	f240 2789 	movw	r7, #649	; 0x289
     SerialCom(); //4us
 8009280:	f7ff fc3e 	bl	8008b00 <SerialCom>
     while((int16_t)(micros()-timeInterleave)<650) t=1; //650
 8009284:	f7ff fcf2 	bl	8008c6c <micros>
 8009288:	8823      	ldrh	r3, [r4, #0]
 800928a:	1ac0      	subs	r0, r0, r3
 800928c:	b200      	sxth	r0, r0
 800928e:	42b8      	cmp	r0, r7
 8009290:	f340 8094 	ble.w	80093bc <main+0x664>
     if(!t) overrun_count++;
 8009294:	b91e      	cbnz	r6, 800929e <main+0x546>
 8009296:	4a5a      	ldr	r2, [pc, #360]	; (8009400 <main+0x6a8>)
 8009298:	8813      	ldrh	r3, [r2, #0]
 800929a:	3301      	adds	r3, #1
 800929c:	8013      	strh	r3, [r2, #0]
   loopTime = micros() - previousTime;
 800929e:	f7ff fce5 	bl	8008c6c <micros>
 80092a2:	682b      	ldr	r3, [r5, #0]
 80092a4:	4c57      	ldr	r4, [pc, #348]	; (8009404 <main+0x6ac>)
 80092a6:	1ac0      	subs	r0, r0, r3
     currentTime = micros();
 80092a8:	4f57      	ldr	r7, [pc, #348]	; (8009408 <main+0x6b0>)
     cycleTime = currentTime - previousTime;
 80092aa:	4e58      	ldr	r6, [pc, #352]	; (800940c <main+0x6b4>)
   loopTime = micros() - previousTime;
 80092ac:	6020      	str	r0, [r4, #0]
     currentTime = micros();
 80092ae:	f7ff fcdd 	bl	8008c6c <micros>
 80092b2:	6038      	str	r0, [r7, #0]
     cycleTime = currentTime - previousTime;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	682a      	ldr	r2, [r5, #0]
 80092b8:	1a9b      	subs	r3, r3, r2
 80092ba:	6033      	str	r3, [r6, #0]
       if (cycleTime >= LOOP_TIME){
 80092bc:	6833      	ldr	r3, [r6, #0]
 80092be:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80092c2:	d3f4      	bcc.n	80092ae <main+0x556>
         if(cycleTime > (LOOP_TIME+50)){
 80092c4:	f640 73d2 	movw	r3, #4050	; 0xfd2
 80092c8:	6832      	ldr	r2, [r6, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d907      	bls.n	80092de <main+0x586>
           RGB_R_TOGGLE;
 80092ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80092d2:	483f      	ldr	r0, [pc, #252]	; (80093d0 <main+0x678>)
 80092d4:	f7f8 fe63 	bl	8001f9e <HAL_GPIO_TogglePin>
           Error.error = 4;
 80092d8:	2204      	movs	r2, #4
 80092da:	4b4d      	ldr	r3, [pc, #308]	; (8009410 <main+0x6b8>)
 80092dc:	701a      	strb	r2, [r3, #0]
   previousTime = currentTime;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	602b      	str	r3, [r5, #0]
   if(f.ARMED){
 80092e2:	4b4c      	ldr	r3, [pc, #304]	; (8009414 <main+0x6bc>)
 80092e4:	785b      	ldrb	r3, [r3, #1]
 80092e6:	b123      	cbz	r3, 80092f2 <main+0x59a>
     armedTime += (uint32_t)cycleTime;
 80092e8:	4a4b      	ldr	r2, [pc, #300]	; (8009418 <main+0x6c0>)
 80092ea:	6831      	ldr	r1, [r6, #0]
 80092ec:	6813      	ldr	r3, [r2, #0]
 80092ee:	440b      	add	r3, r1
 80092f0:	6013      	str	r3, [r2, #0]
   if(loopTime > cycleTimeMax) cycleTimeMax = loopTime;
 80092f2:	4b4a      	ldr	r3, [pc, #296]	; (800941c <main+0x6c4>)
 80092f4:	6822      	ldr	r2, [r4, #0]
 80092f6:	8819      	ldrh	r1, [r3, #0]
 80092f8:	4291      	cmp	r1, r2
 80092fa:	bf3c      	itt	cc
 80092fc:	6822      	ldrcc	r2, [r4, #0]
 80092fe:	801a      	strhcc	r2, [r3, #0]
   if(loopTime < cycleTimeMin) cycleTimeMin = loopTime;
 8009300:	4b47      	ldr	r3, [pc, #284]	; (8009420 <main+0x6c8>)
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	8819      	ldrh	r1, [r3, #0]
 8009306:	4291      	cmp	r1, r2
 8009308:	d98a      	bls.n	8009220 <main+0x4c8>
 800930a:	6822      	ldr	r2, [r4, #0]
 800930c:	801a      	strh	r2, [r3, #0]
 800930e:	e787      	b.n	8009220 <main+0x4c8>
        time = micros();
 8009310:	f7ff fcac 	bl	8008c6c <micros>
 8009314:	4b43      	ldr	r3, [pc, #268]	; (8009424 <main+0x6cc>)
 8009316:	4f44      	ldr	r7, [pc, #272]	; (8009428 <main+0x6d0>)
 8009318:	8018      	strh	r0, [r3, #0]
        taskOrder = 0;
 800931a:	2300      	movs	r3, #0
        HAL_ADC_Start(&hadc1);
 800931c:	4843      	ldr	r0, [pc, #268]	; (800942c <main+0x6d4>)
        taskOrder = 0;
 800931e:	7023      	strb	r3, [r4, #0]
        HAL_ADC_Start(&hadc1);
 8009320:	f7f8 fa8e 	bl	8001840 <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc1,1000000) == HAL_OK)
 8009324:	4942      	ldr	r1, [pc, #264]	; (8009430 <main+0x6d8>)
 8009326:	4841      	ldr	r0, [pc, #260]	; (800942c <main+0x6d4>)
 8009328:	f7f8 f92c 	bl	8001584 <HAL_ADC_PollForConversion>
 800932c:	b9f0      	cbnz	r0, 800936c <main+0x614>
          BAT.VBAT_Sense = HAL_ADC_GetValue(&hadc1);
 800932e:	483f      	ldr	r0, [pc, #252]	; (800942c <main+0x6d4>)
 8009330:	f7f8 f9c6 	bl	80016c0 <HAL_ADC_GetValue>
 8009334:	6038      	str	r0, [r7, #0]
          BAT.VBAT = ((((BAT.VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW)*10;
 8009336:	f7f7 f855 	bl	80003e4 <__aeabi_ui2d>
 800933a:	a321      	add	r3, pc, #132	; (adr r3, 80093c0 <main+0x668>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f7 f8c6 	bl	80004d0 <__aeabi_dmul>
 8009344:	a320      	add	r3, pc, #128	; (adr r3, 80093c8 <main+0x670>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f7 f9eb 	bl	8000724 <__aeabi_ddiv>
 800934e:	4642      	mov	r2, r8
 8009350:	464b      	mov	r3, r9
 8009352:	f7f7 f8bd 	bl	80004d0 <__aeabi_dmul>
 8009356:	2200      	movs	r2, #0
 8009358:	4b36      	ldr	r3, [pc, #216]	; (8009434 <main+0x6dc>)
 800935a:	f7f7 f9e3 	bl	8000724 <__aeabi_ddiv>
 800935e:	2200      	movs	r2, #0
 8009360:	4b35      	ldr	r3, [pc, #212]	; (8009438 <main+0x6e0>)
 8009362:	f7f7 f8b5 	bl	80004d0 <__aeabi_dmul>
 8009366:	f7f7 fbab 	bl	8000ac0 <__aeabi_d2f>
 800936a:	6078      	str	r0, [r7, #4]
        vsum += BAT.VBAT;
 800936c:	4a33      	ldr	r2, [pc, #204]	; (800943c <main+0x6e4>)
 800936e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8009372:	8810      	ldrh	r0, [r2, #0]
 8009374:	9201      	str	r2, [sp, #4]
 8009376:	f7f7 fcad 	bl	8000cd4 <__aeabi_i2f>
 800937a:	4659      	mov	r1, fp
 800937c:	f7f7 fbf6 	bl	8000b6c <__addsf3>
 8009380:	f7f7 fefe 	bl	8001180 <__aeabi_f2uiz>
        vsum -= vvec[ind];
 8009384:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8009448 <main+0x6f0>
 8009388:	4b2d      	ldr	r3, [pc, #180]	; (8009440 <main+0x6e8>)
 800938a:	f89a 4000 	ldrb.w	r4, [sl]
 800938e:	9a01      	ldr	r2, [sp, #4]
 8009390:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	1b86      	subs	r6, r0, r6
 8009398:	b2b6      	uxth	r6, r6
 800939a:	8016      	strh	r6, [r2, #0]
        vvec[ind++] = BAT.VBAT;
 800939c:	4658      	mov	r0, fp
 800939e:	f7f7 feef 	bl	8001180 <__aeabi_f2uiz>
 80093a2:	9b00      	ldr	r3, [sp, #0]
 80093a4:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 80093a8:	3401      	adds	r4, #1
        ind %= VBAT_SMOOTH;
 80093aa:	f004 0407 	and.w	r4, r4, #7
 80093ae:	f88a 4000 	strb.w	r4, [sl]
        BAT.VBAT = vsum/VBAT_SMOOTH;
 80093b2:	08f0      	lsrs	r0, r6, #3
 80093b4:	f7f7 fc8e 	bl	8000cd4 <__aeabi_i2f>
 80093b8:	6078      	str	r0, [r7, #4]
         break;
 80093ba:	e74f      	b.n	800925c <main+0x504>
     while((int16_t)(micros()-timeInterleave)<650) t=1; //650
 80093bc:	2601      	movs	r6, #1
 80093be:	e761      	b.n	8009284 <main+0x52c>
 80093c0:	66666666 	.word	0x66666666
 80093c4:	400a6666 	.word	0x400a6666
 80093c8:	00000000 	.word	0x00000000
 80093cc:	40affe00 	.word	0x40affe00
 80093d0:	40010c00 	.word	0x40010c00
 80093d4:	3f99999a 	.word	0x3f99999a
 80093d8:	437a0000 	.word	0x437a0000
 80093dc:	20000ce8 	.word	0x20000ce8
 80093e0:	20000d2c 	.word	0x20000d2c
 80093e4:	20001304 	.word	0x20001304
 80093e8:	20001524 	.word	0x20001524
 80093ec:	20001305 	.word	0x20001305
 80093f0:	200015ac 	.word	0x200015ac
 80093f4:	20000bc4 	.word	0x20000bc4
 80093f8:	20000bc8 	.word	0x20000bc8
 80093fc:	20000bca 	.word	0x20000bca
 8009400:	20000bc0 	.word	0x20000bc0
 8009404:	20000bbc 	.word	0x20000bbc
 8009408:	20000bb0 	.word	0x20000bb0
 800940c:	20000bb4 	.word	0x20000bb4
 8009410:	20001564 	.word	0x20001564
 8009414:	2000105c 	.word	0x2000105c
 8009418:	20000bac 	.word	0x20000bac
 800941c:	20000bb8 	.word	0x20000bb8
 8009420:	20000024 	.word	0x20000024
 8009424:	20000ba2 	.word	0x20000ba2
 8009428:	20001308 	.word	0x20001308
 800942c:	2000146c 	.word	0x2000146c
 8009430:	000f4240 	.word	0x000f4240
 8009434:	40340000 	.word	0x40340000
 8009438:	40240000 	.word	0x40240000
 800943c:	20000bcc 	.word	0x20000bcc
 8009440:	20000bce 	.word	0x20000bce
 8009444:	403e0000 	.word	0x403e0000
 8009448:	20000bba 	.word	0x20000bba

0800944c <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800944c:	4770      	bx	lr
	...

08009450 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009450:	4b0e      	ldr	r3, [pc, #56]	; (800948c <HAL_MspInit+0x3c>)
{
 8009452:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8009454:	699a      	ldr	r2, [r3, #24]
 8009456:	f042 0201 	orr.w	r2, r2, #1
 800945a:	619a      	str	r2, [r3, #24]
 800945c:	699a      	ldr	r2, [r3, #24]
 800945e:	f002 0201 	and.w	r2, r2, #1
 8009462:	9200      	str	r2, [sp, #0]
 8009464:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009466:	69da      	ldr	r2, [r3, #28]
 8009468:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800946c:	61da      	str	r2, [r3, #28]
 800946e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009470:	4a07      	ldr	r2, [pc, #28]	; (8009490 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8009472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009476:	9301      	str	r3, [sp, #4]
 8009478:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800947a:	6853      	ldr	r3, [r2, #4]
 800947c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009480:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009486:	b002      	add	sp, #8
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	40021000 	.word	0x40021000
 8009490:	40010000 	.word	0x40010000

08009494 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009494:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009496:	2410      	movs	r4, #16
{
 8009498:	4605      	mov	r5, r0
 800949a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800949c:	4622      	mov	r2, r4
 800949e:	2100      	movs	r1, #0
 80094a0:	a802      	add	r0, sp, #8
 80094a2:	f000 fab8 	bl	8009a16 <memset>
  if(hadc->Instance==ADC1)
 80094a6:	682a      	ldr	r2, [r5, #0]
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <HAL_ADC_MspInit+0x54>)
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d11a      	bne.n	80094e4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80094ae:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80094b2:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094b4:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80094b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094ba:	619a      	str	r2, [r3, #24]
 80094bc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094be:	480b      	ldr	r0, [pc, #44]	; (80094ec <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80094c0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80094c4:	9200      	str	r2, [sp, #0]
 80094c6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094c8:	699a      	ldr	r2, [r3, #24]
 80094ca:	f042 0204 	orr.w	r2, r2, #4
 80094ce:	619a      	str	r2, [r3, #24]
 80094d0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80094d2:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	9301      	str	r3, [sp, #4]
 80094da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80094dc:	2303      	movs	r3, #3
 80094de:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094e0:	f7f8 fc78 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80094e4:	b007      	add	sp, #28
 80094e6:	bd30      	pop	{r4, r5, pc}
 80094e8:	40012400 	.word	0x40012400
 80094ec:	40010800 	.word	0x40010800

080094f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80094f0:	b510      	push	{r4, lr}
 80094f2:	4604      	mov	r4, r0
 80094f4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094f6:	2210      	movs	r2, #16
 80094f8:	2100      	movs	r1, #0
 80094fa:	a802      	add	r0, sp, #8
 80094fc:	f000 fa8b 	bl	8009a16 <memset>
  if(hi2c->Instance==I2C2)
 8009500:	6822      	ldr	r2, [r4, #0]
 8009502:	4b11      	ldr	r3, [pc, #68]	; (8009548 <HAL_I2C_MspInit+0x58>)
 8009504:	429a      	cmp	r2, r3
 8009506:	d11d      	bne.n	8009544 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009508:	4c10      	ldr	r4, [pc, #64]	; (800954c <HAL_I2C_MspInit+0x5c>)
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800950a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800950c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800950e:	4810      	ldr	r0, [pc, #64]	; (8009550 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009510:	f043 0308 	orr.w	r3, r3, #8
 8009514:	61a3      	str	r3, [r4, #24]
 8009516:	69a3      	ldr	r3, [r4, #24]
 8009518:	f003 0308 	and.w	r3, r3, #8
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009520:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009524:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009526:	2312      	movs	r3, #18
 8009528:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800952a:	2303      	movs	r3, #3
 800952c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800952e:	f7f8 fc51 	bl	8001dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009532:	69e3      	ldr	r3, [r4, #28]
 8009534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009538:	61e3      	str	r3, [r4, #28]
 800953a:	69e3      	ldr	r3, [r4, #28]
 800953c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8009544:	b006      	add	sp, #24
 8009546:	bd10      	pop	{r4, pc}
 8009548:	40005800 	.word	0x40005800
 800954c:	40021000 	.word	0x40021000
 8009550:	40010c00 	.word	0x40010c00

08009554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009554:	b510      	push	{r4, lr}
 8009556:	4604      	mov	r4, r0
 8009558:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800955a:	2210      	movs	r2, #16
 800955c:	2100      	movs	r1, #0
 800955e:	a806      	add	r0, sp, #24
 8009560:	f000 fa59 	bl	8009a16 <memset>
  if(htim_base->Instance==TIM2)
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800956a:	d123      	bne.n	80095b4 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800956c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8009570:	69da      	ldr	r2, [r3, #28]
    PA3     ------> TIM2_CH4  //UART2 reserved
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009572:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009574:	f042 0201 	orr.w	r2, r2, #1
 8009578:	61da      	str	r2, [r3, #28]
 800957a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800957c:	4832      	ldr	r0, [pc, #200]	; (8009648 <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800957e:	f002 0201 	and.w	r2, r2, #1
 8009582:	9200      	str	r2, [sp, #0]
 8009584:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009586:	699a      	ldr	r2, [r3, #24]
 8009588:	f042 0204 	orr.w	r2, r2, #4
 800958c:	619a      	str	r2, [r3, #24]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	f003 0304 	and.w	r3, r3, #4
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009598:	2303      	movs	r3, #3
 800959a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800959c:	f7f8 fc1a 	bl	8001dd4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80095a0:	2200      	movs	r2, #0
 80095a2:	201c      	movs	r0, #28
 80095a4:	4611      	mov	r1, r2
 80095a6:	f7f8 fa61 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80095aa:	201c      	movs	r0, #28
  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80095ac:	f7f8 fa92 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80095b0:	b00a      	add	sp, #40	; 0x28
 80095b2:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM3)
 80095b4:	4a25      	ldr	r2, [pc, #148]	; (800964c <HAL_TIM_Base_MspInit+0xf8>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d131      	bne.n	800961e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80095ba:	4b25      	ldr	r3, [pc, #148]	; (8009650 <HAL_TIM_Base_MspInit+0xfc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095bc:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM3_CLK_ENABLE();
 80095be:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095c0:	4821      	ldr	r0, [pc, #132]	; (8009648 <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80095c2:	f042 0202 	orr.w	r2, r2, #2
 80095c6:	61da      	str	r2, [r3, #28]
 80095c8:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095ca:	2400      	movs	r4, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80095cc:	f002 0202 	and.w	r2, r2, #2
 80095d0:	9202      	str	r2, [sp, #8]
 80095d2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095d4:	699a      	ldr	r2, [r3, #24]
 80095d6:	f042 0204 	orr.w	r2, r2, #4
 80095da:	619a      	str	r2, [r3, #24]
 80095dc:	699a      	ldr	r2, [r3, #24]
 80095de:	f002 0204 	and.w	r2, r2, #4
 80095e2:	9203      	str	r2, [sp, #12]
 80095e4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80095e6:	699a      	ldr	r2, [r3, #24]
 80095e8:	f042 0208 	orr.w	r2, r2, #8
 80095ec:	619a      	str	r2, [r3, #24]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	f003 0308 	and.w	r3, r3, #8
 80095f4:	9304      	str	r3, [sp, #16]
 80095f6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80095f8:	23c0      	movs	r3, #192	; 0xc0
 80095fa:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095fc:	f7f8 fbea 	bl	8001dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009600:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009602:	a906      	add	r1, sp, #24
 8009604:	4813      	ldr	r0, [pc, #76]	; (8009654 <HAL_TIM_Base_MspInit+0x100>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009606:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009608:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800960a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800960c:	f7f8 fbe2 	bl	8001dd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009610:	201d      	movs	r0, #29
 8009612:	4622      	mov	r2, r4
 8009614:	4621      	mov	r1, r4
 8009616:	f7f8 fa29 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800961a:	201d      	movs	r0, #29
 800961c:	e7c6      	b.n	80095ac <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM4)
 800961e:	4a0e      	ldr	r2, [pc, #56]	; (8009658 <HAL_TIM_Base_MspInit+0x104>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d1c5      	bne.n	80095b0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009624:	4b0a      	ldr	r3, [pc, #40]	; (8009650 <HAL_TIM_Base_MspInit+0xfc>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009626:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009628:	69da      	ldr	r2, [r3, #28]
 800962a:	f042 0204 	orr.w	r2, r2, #4
 800962e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009630:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009632:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009634:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009636:	f003 0304 	and.w	r3, r3, #4
 800963a:	9305      	str	r3, [sp, #20]
 800963c:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800963e:	f7f8 fa15 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009642:	201e      	movs	r0, #30
 8009644:	e7b2      	b.n	80095ac <HAL_TIM_Base_MspInit+0x58>
 8009646:	bf00      	nop
 8009648:	40010800 	.word	0x40010800
 800964c:	40000400 	.word	0x40000400
 8009650:	40021000 	.word	0x40021000
 8009654:	40010c00 	.word	0x40010c00
 8009658:	40000800 	.word	0x40000800

0800965c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800965c:	b510      	push	{r4, lr}
 800965e:	4604      	mov	r4, r0
 8009660:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009662:	2210      	movs	r2, #16
 8009664:	2100      	movs	r1, #0
 8009666:	a802      	add	r0, sp, #8
 8009668:	f000 f9d5 	bl	8009a16 <memset>
  if(htim->Instance==TIM4)
 800966c:	6822      	ldr	r2, [r4, #0]
 800966e:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <HAL_TIM_MspPostInit+0x48>)
 8009670:	429a      	cmp	r2, r3
 8009672:	d115      	bne.n	80096a0 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009674:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8009678:	699a      	ldr	r2, [r3, #24]
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800967a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800967c:	f042 0208 	orr.w	r2, r2, #8
 8009680:	619a      	str	r2, [r3, #24]
 8009682:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009684:	4808      	ldr	r0, [pc, #32]	; (80096a8 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009686:	f003 0308 	and.w	r3, r3, #8
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800968e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009692:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009694:	2302      	movs	r3, #2
 8009696:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009698:	2303      	movs	r3, #3
 800969a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800969c:	f7f8 fb9a 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80096a0:	b006      	add	sp, #24
 80096a2:	bd10      	pop	{r4, pc}
 80096a4:	40000800 	.word	0x40000800
 80096a8:	40010c00 	.word	0x40010c00

080096ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80096ac:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096ae:	2710      	movs	r7, #16
{
 80096b0:	4605      	mov	r5, r0
 80096b2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096b4:	463a      	mov	r2, r7
 80096b6:	2100      	movs	r1, #0
 80096b8:	eb0d 0007 	add.w	r0, sp, r7
 80096bc:	f000 f9ab 	bl	8009a16 <memset>
  if(huart->Instance==USART1)
 80096c0:	682b      	ldr	r3, [r5, #0]
 80096c2:	4a57      	ldr	r2, [pc, #348]	; (8009820 <HAL_UART_MspInit+0x174>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d15b      	bne.n	8009780 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80096c8:	4b56      	ldr	r3, [pc, #344]	; (8009824 <HAL_UART_MspInit+0x178>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096ca:	eb0d 0107 	add.w	r1, sp, r7
    __HAL_RCC_USART1_CLK_ENABLE();
 80096ce:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096d0:	4855      	ldr	r0, [pc, #340]	; (8009828 <HAL_UART_MspInit+0x17c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80096d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096d6:	619a      	str	r2, [r3, #24]
 80096d8:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096da:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80096dc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80096e0:	9201      	str	r2, [sp, #4]
 80096e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096e4:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80096e6:	4c51      	ldr	r4, [pc, #324]	; (800982c <HAL_UART_MspInit+0x180>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096e8:	f042 0204 	orr.w	r2, r2, #4
 80096ec:	619a      	str	r2, [r3, #24]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	9302      	str	r3, [sp, #8]
 80096f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80096f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096fe:	2302      	movs	r3, #2
 8009700:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009702:	2303      	movs	r3, #3
 8009704:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009706:	f7f8 fb65 	bl	8001dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800970a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800970e:	4846      	ldr	r0, [pc, #280]	; (8009828 <HAL_UART_MspInit+0x17c>)
 8009710:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009714:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009716:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009718:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800971a:	f7f8 fb5b 	bl	8001dd4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800971e:	4b44      	ldr	r3, [pc, #272]	; (8009830 <HAL_UART_MspInit+0x184>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009720:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009722:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009726:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009728:	60a6      	str	r6, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800972a:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800972c:	6126      	str	r6, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800972e:	6166      	str	r6, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009730:	61a6      	str	r6, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009732:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009734:	f7f8 fa00 	bl	8001b38 <HAL_DMA_Init>
 8009738:	b108      	cbz	r0, 800973e <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 800973a:	f7ff fab1 	bl	8008ca0 <Error_Handler>

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800973e:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8009740:	4b3c      	ldr	r3, [pc, #240]	; (8009834 <HAL_UART_MspInit+0x188>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8009742:	632c      	str	r4, [r5, #48]	; 0x30
 8009744:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8009746:	4c3c      	ldr	r4, [pc, #240]	; (8009838 <HAL_UART_MspInit+0x18c>)
 8009748:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800974a:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800974c:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800974e:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009750:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009752:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009754:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009756:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009758:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800975a:	61a2      	str	r2, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800975c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800975e:	f7f8 f9eb 	bl	8001b38 <HAL_DMA_Init>
 8009762:	b108      	cbz	r0, 8009768 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8009764:	f7ff fa9c 	bl	8008ca0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009768:	2200      	movs	r2, #0
 800976a:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800976c:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800976e:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8009770:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009772:	f7f8 f97b 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009776:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009778:	f7f8 f9ac 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800977c:	b009      	add	sp, #36	; 0x24
 800977e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART2)
 8009780:	4a2e      	ldr	r2, [pc, #184]	; (800983c <HAL_UART_MspInit+0x190>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d1fa      	bne.n	800977c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009786:	4b27      	ldr	r3, [pc, #156]	; (8009824 <HAL_UART_MspInit+0x178>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009788:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 800978a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800978c:	4826      	ldr	r0, [pc, #152]	; (8009828 <HAL_UART_MspInit+0x17c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800978e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009792:	61da      	str	r2, [r3, #28]
 8009794:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009796:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8009798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800979c:	9303      	str	r3, [sp, #12]
 800979e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80097a0:	2304      	movs	r3, #4
 80097a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097a4:	2302      	movs	r3, #2
 80097a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80097a8:	2303      	movs	r3, #3
 80097aa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ac:	f7f8 fb12 	bl	8001dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80097b0:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097b2:	481d      	ldr	r0, [pc, #116]	; (8009828 <HAL_UART_MspInit+0x17c>)
 80097b4:	a904      	add	r1, sp, #16
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80097b6:	4c22      	ldr	r4, [pc, #136]	; (8009840 <HAL_UART_MspInit+0x194>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80097b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097ba:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097bc:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097be:	f7f8 fb09 	bl	8001dd4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80097c2:	4b20      	ldr	r3, [pc, #128]	; (8009844 <HAL_UART_MspInit+0x198>)
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80097c4:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80097c6:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80097ca:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80097cc:	60a6      	str	r6, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80097ce:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80097d0:	6126      	str	r6, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80097d2:	6166      	str	r6, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80097d4:	61a6      	str	r6, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80097d6:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80097d8:	f7f8 f9ae 	bl	8001b38 <HAL_DMA_Init>
 80097dc:	b108      	cbz	r0, 80097e2 <HAL_UART_MspInit+0x136>
      Error_Handler();
 80097de:	f7ff fa5f 	bl	8008ca0 <Error_Handler>
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80097e2:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80097e4:	4b18      	ldr	r3, [pc, #96]	; (8009848 <HAL_UART_MspInit+0x19c>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80097e6:	632c      	str	r4, [r5, #48]	; 0x30
 80097e8:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80097ea:	4c18      	ldr	r4, [pc, #96]	; (800984c <HAL_UART_MspInit+0x1a0>)
 80097ec:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80097ee:	60e2      	str	r2, [r4, #12]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80097f0:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80097f2:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80097f4:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80097f6:	6063      	str	r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80097f8:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80097fa:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80097fc:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80097fe:	61a2      	str	r2, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009800:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009802:	f7f8 f999 	bl	8001b38 <HAL_DMA_Init>
 8009806:	b108      	cbz	r0, 800980c <HAL_UART_MspInit+0x160>
      Error_Handler();
 8009808:	f7ff fa4a 	bl	8008ca0 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800980c:	2200      	movs	r2, #0
 800980e:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8009810:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009812:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8009814:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009816:	f7f8 f929 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800981a:	2026      	movs	r0, #38	; 0x26
 800981c:	e7ac      	b.n	8009778 <HAL_UART_MspInit+0xcc>
 800981e:	bf00      	nop
 8009820:	40013800 	.word	0x40013800
 8009824:	40021000 	.word	0x40021000
 8009828:	40010800 	.word	0x40010800
 800982c:	20001428 	.word	0x20001428
 8009830:	40020044 	.word	0x40020044
 8009834:	40020058 	.word	0x40020058
 8009838:	2000149c 	.word	0x2000149c
 800983c:	40004400 	.word	0x40004400
 8009840:	200014e0 	.word	0x200014e0
 8009844:	40020080 	.word	0x40020080
 8009848:	4002006c 	.word	0x4002006c
 800984c:	20001310 	.word	0x20001310

08009850 <NMI_Handler>:
 8009850:	4770      	bx	lr

08009852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009852:	e7fe      	b.n	8009852 <HardFault_Handler>

08009854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009854:	e7fe      	b.n	8009854 <MemManage_Handler>

08009856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009856:	e7fe      	b.n	8009856 <BusFault_Handler>

08009858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009858:	e7fe      	b.n	8009858 <UsageFault_Handler>

0800985a <SVC_Handler>:
 800985a:	4770      	bx	lr

0800985c <DebugMon_Handler>:
 800985c:	4770      	bx	lr

0800985e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800985e:	4770      	bx	lr

08009860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009862:	f7f7 fe6b 	bl	800153c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800986a:	f7f8 b961 	b.w	8001b30 <HAL_SYSTICK_IRQHandler>
	...

08009870 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009870:	4801      	ldr	r0, [pc, #4]	; (8009878 <DMA1_Channel4_IRQHandler+0x8>)
 8009872:	f7f8 ba1b 	b.w	8001cac <HAL_DMA_IRQHandler>
 8009876:	bf00      	nop
 8009878:	20001428 	.word	0x20001428

0800987c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800987c:	4801      	ldr	r0, [pc, #4]	; (8009884 <DMA1_Channel5_IRQHandler+0x8>)
 800987e:	f7f8 ba15 	b.w	8001cac <HAL_DMA_IRQHandler>
 8009882:	bf00      	nop
 8009884:	2000149c 	.word	0x2000149c

08009888 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009888:	4801      	ldr	r0, [pc, #4]	; (8009890 <DMA1_Channel6_IRQHandler+0x8>)
 800988a:	f7f8 ba0f 	b.w	8001cac <HAL_DMA_IRQHandler>
 800988e:	bf00      	nop
 8009890:	20001310 	.word	0x20001310

08009894 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009894:	4801      	ldr	r0, [pc, #4]	; (800989c <DMA1_Channel7_IRQHandler+0x8>)
 8009896:	f7f8 ba09 	b.w	8001cac <HAL_DMA_IRQHandler>
 800989a:	bf00      	nop
 800989c:	200014e0 	.word	0x200014e0

080098a0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80098a0:	4801      	ldr	r0, [pc, #4]	; (80098a8 <TIM2_IRQHandler+0x8>)
 80098a2:	f7f9 be8d 	b.w	80035c0 <HAL_TIM_IRQHandler>
 80098a6:	bf00      	nop
 80098a8:	2000156c 	.word	0x2000156c

080098ac <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80098ac:	4801      	ldr	r0, [pc, #4]	; (80098b4 <TIM3_IRQHandler+0x8>)
 80098ae:	f7f9 be87 	b.w	80035c0 <HAL_TIM_IRQHandler>
 80098b2:	bf00      	nop
 80098b4:	200013e8 	.word	0x200013e8

080098b8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80098b8:	4801      	ldr	r0, [pc, #4]	; (80098c0 <TIM4_IRQHandler+0x8>)
 80098ba:	f7f9 be81 	b.w	80035c0 <HAL_TIM_IRQHandler>
 80098be:	bf00      	nop
 80098c0:	20001354 	.word	0x20001354

080098c4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80098c4:	4801      	ldr	r0, [pc, #4]	; (80098cc <USART1_IRQHandler+0x8>)
 80098c6:	f7fa bbfb 	b.w	80040c0 <HAL_UART_IRQHandler>
 80098ca:	bf00      	nop
 80098cc:	20001524 	.word	0x20001524

080098d0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80098d0:	4801      	ldr	r0, [pc, #4]	; (80098d8 <USART2_IRQHandler+0x8>)
 80098d2:	f7fa bbf5 	b.w	80040c0 <HAL_UART_IRQHandler>
 80098d6:	bf00      	nop
 80098d8:	200015ac 	.word	0x200015ac

080098dc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80098dc:	4b0f      	ldr	r3, [pc, #60]	; (800991c <SystemInit+0x40>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	f042 0201 	orr.w	r2, r2, #1
 80098e4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80098e6:	6859      	ldr	r1, [r3, #4]
 80098e8:	4a0d      	ldr	r2, [pc, #52]	; (8009920 <SystemInit+0x44>)
 80098ea:	400a      	ands	r2, r1
 80098ec:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80098f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80098f8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009900:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8009908:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800990a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800990e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8009910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009914:	4b03      	ldr	r3, [pc, #12]	; (8009924 <SystemInit+0x48>)
 8009916:	609a      	str	r2, [r3, #8]
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	40021000 	.word	0x40021000
 8009920:	f8ff0000 	.word	0xf8ff0000
 8009924:	e000ed00 	.word	0xe000ed00

08009928 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009928:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800992a:	e003      	b.n	8009934 <LoopCopyDataInit>

0800992c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800992c:	4b0b      	ldr	r3, [pc, #44]	; (800995c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800992e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8009930:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8009932:	3104      	adds	r1, #4

08009934 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8009934:	480a      	ldr	r0, [pc, #40]	; (8009960 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8009936:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8009938:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800993a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800993c:	d3f6      	bcc.n	800992c <CopyDataInit>
  ldr r2, =_sbss
 800993e:	4a0a      	ldr	r2, [pc, #40]	; (8009968 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8009940:	e002      	b.n	8009948 <LoopFillZerobss>

08009942 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8009942:	2300      	movs	r3, #0
  str r3, [r2], #4
 8009944:	f842 3b04 	str.w	r3, [r2], #4

08009948 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8009948:	4b08      	ldr	r3, [pc, #32]	; (800996c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800994a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800994c:	d3f9      	bcc.n	8009942 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800994e:	f7ff ffc5 	bl	80098dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009952:	f000 f811 	bl	8009978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009956:	f7ff f9ff 	bl	8008d58 <main>
  bx lr
 800995a:	4770      	bx	lr
  ldr r3, =_sidata
 800995c:	08011cb0 	.word	0x08011cb0
  ldr r0, =_sdata
 8009960:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8009964:	200006a0 	.word	0x200006a0
  ldr r2, =_sbss
 8009968:	200006a0 	.word	0x200006a0
  ldr r3, = _ebss
 800996c:	200015fc 	.word	0x200015fc

08009970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009970:	e7fe      	b.n	8009970 <ADC1_2_IRQHandler>

08009972 <atof>:
 8009972:	2100      	movs	r1, #0
 8009974:	f000 bea0 	b.w	800a6b8 <strtod>

08009978 <__libc_init_array>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	2500      	movs	r5, #0
 800997c:	4e0c      	ldr	r6, [pc, #48]	; (80099b0 <__libc_init_array+0x38>)
 800997e:	4c0d      	ldr	r4, [pc, #52]	; (80099b4 <__libc_init_array+0x3c>)
 8009980:	1ba4      	subs	r4, r4, r6
 8009982:	10a4      	asrs	r4, r4, #2
 8009984:	42a5      	cmp	r5, r4
 8009986:	d109      	bne.n	800999c <__libc_init_array+0x24>
 8009988:	f007 f9a2 	bl	8010cd0 <_init>
 800998c:	2500      	movs	r5, #0
 800998e:	4e0a      	ldr	r6, [pc, #40]	; (80099b8 <__libc_init_array+0x40>)
 8009990:	4c0a      	ldr	r4, [pc, #40]	; (80099bc <__libc_init_array+0x44>)
 8009992:	1ba4      	subs	r4, r4, r6
 8009994:	10a4      	asrs	r4, r4, #2
 8009996:	42a5      	cmp	r5, r4
 8009998:	d105      	bne.n	80099a6 <__libc_init_array+0x2e>
 800999a:	bd70      	pop	{r4, r5, r6, pc}
 800999c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099a0:	4798      	blx	r3
 80099a2:	3501      	adds	r5, #1
 80099a4:	e7ee      	b.n	8009984 <__libc_init_array+0xc>
 80099a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099aa:	4798      	blx	r3
 80099ac:	3501      	adds	r5, #1
 80099ae:	e7f2      	b.n	8009996 <__libc_init_array+0x1e>
 80099b0:	08011ca8 	.word	0x08011ca8
 80099b4:	08011ca8 	.word	0x08011ca8
 80099b8:	08011ca8 	.word	0x08011ca8
 80099bc:	08011cac 	.word	0x08011cac

080099c0 <__locale_ctype_ptr>:
 80099c0:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <__locale_ctype_ptr+0x14>)
 80099c2:	4a05      	ldr	r2, [pc, #20]	; (80099d8 <__locale_ctype_ptr+0x18>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bf08      	it	eq
 80099cc:	4613      	moveq	r3, r2
 80099ce:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80099d2:	4770      	bx	lr
 80099d4:	20000198 	.word	0x20000198
 80099d8:	2000002c 	.word	0x2000002c

080099dc <__ascii_mbtowc>:
 80099dc:	b082      	sub	sp, #8
 80099de:	b901      	cbnz	r1, 80099e2 <__ascii_mbtowc+0x6>
 80099e0:	a901      	add	r1, sp, #4
 80099e2:	b142      	cbz	r2, 80099f6 <__ascii_mbtowc+0x1a>
 80099e4:	b14b      	cbz	r3, 80099fa <__ascii_mbtowc+0x1e>
 80099e6:	7813      	ldrb	r3, [r2, #0]
 80099e8:	600b      	str	r3, [r1, #0]
 80099ea:	7812      	ldrb	r2, [r2, #0]
 80099ec:	1c10      	adds	r0, r2, #0
 80099ee:	bf18      	it	ne
 80099f0:	2001      	movne	r0, #1
 80099f2:	b002      	add	sp, #8
 80099f4:	4770      	bx	lr
 80099f6:	4610      	mov	r0, r2
 80099f8:	e7fb      	b.n	80099f2 <__ascii_mbtowc+0x16>
 80099fa:	f06f 0001 	mvn.w	r0, #1
 80099fe:	e7f8      	b.n	80099f2 <__ascii_mbtowc+0x16>

08009a00 <memcpy>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	1e43      	subs	r3, r0, #1
 8009a04:	440a      	add	r2, r1
 8009a06:	4291      	cmp	r1, r2
 8009a08:	d100      	bne.n	8009a0c <memcpy+0xc>
 8009a0a:	bd10      	pop	{r4, pc}
 8009a0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a14:	e7f7      	b.n	8009a06 <memcpy+0x6>

08009a16 <memset>:
 8009a16:	4603      	mov	r3, r0
 8009a18:	4402      	add	r2, r0
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d100      	bne.n	8009a20 <memset+0xa>
 8009a1e:	4770      	bx	lr
 8009a20:	f803 1b01 	strb.w	r1, [r3], #1
 8009a24:	e7f9      	b.n	8009a1a <memset+0x4>
	...

08009a28 <sprintf>:
 8009a28:	b40e      	push	{r1, r2, r3}
 8009a2a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8009a2e:	b500      	push	{lr}
 8009a30:	b09c      	sub	sp, #112	; 0x70
 8009a32:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009a36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a3a:	9104      	str	r1, [sp, #16]
 8009a3c:	9107      	str	r1, [sp, #28]
 8009a3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009a42:	ab1d      	add	r3, sp, #116	; 0x74
 8009a44:	9002      	str	r0, [sp, #8]
 8009a46:	9006      	str	r0, [sp, #24]
 8009a48:	4808      	ldr	r0, [pc, #32]	; (8009a6c <sprintf+0x44>)
 8009a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a4e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8009a52:	6800      	ldr	r0, [r0, #0]
 8009a54:	a902      	add	r1, sp, #8
 8009a56:	9301      	str	r3, [sp, #4]
 8009a58:	f000 fe40 	bl	800a6dc <_svfprintf_r>
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	9b02      	ldr	r3, [sp, #8]
 8009a60:	701a      	strb	r2, [r3, #0]
 8009a62:	b01c      	add	sp, #112	; 0x70
 8009a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a68:	b003      	add	sp, #12
 8009a6a:	4770      	bx	lr
 8009a6c:	20000198 	.word	0x20000198

08009a70 <strcpy>:
 8009a70:	4603      	mov	r3, r0
 8009a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a76:	f803 2b01 	strb.w	r2, [r3], #1
 8009a7a:	2a00      	cmp	r2, #0
 8009a7c:	d1f9      	bne.n	8009a72 <strcpy+0x2>
 8009a7e:	4770      	bx	lr

08009a80 <sulp>:
 8009a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a84:	460f      	mov	r7, r1
 8009a86:	4690      	mov	r8, r2
 8009a88:	f003 fc9e 	bl	800d3c8 <__ulp>
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	460d      	mov	r5, r1
 8009a90:	f1b8 0f00 	cmp.w	r8, #0
 8009a94:	d011      	beq.n	8009aba <sulp+0x3a>
 8009a96:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009a9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	dd0b      	ble.n	8009aba <sulp+0x3a>
 8009aa2:	2400      	movs	r4, #0
 8009aa4:	051b      	lsls	r3, r3, #20
 8009aa6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009aaa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009aae:	4622      	mov	r2, r4
 8009ab0:	462b      	mov	r3, r5
 8009ab2:	f7f6 fd0d 	bl	80004d0 <__aeabi_dmul>
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	460d      	mov	r5, r1
 8009aba:	4620      	mov	r0, r4
 8009abc:	4629      	mov	r1, r5
 8009abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac2:	0000      	movs	r0, r0
 8009ac4:	0000      	movs	r0, r0
	...

08009ac8 <_strtod_l>:
 8009ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009acc:	4699      	mov	r9, r3
 8009ace:	2300      	movs	r3, #0
 8009ad0:	b09f      	sub	sp, #124	; 0x7c
 8009ad2:	4680      	mov	r8, r0
 8009ad4:	4648      	mov	r0, r9
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	9215      	str	r2, [sp, #84]	; 0x54
 8009ada:	931a      	str	r3, [sp, #104]	; 0x68
 8009adc:	f002 ff5a 	bl	800c994 <__localeconv_l>
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	6800      	ldr	r0, [r0, #0]
 8009ae4:	f7f6 fb34 	bl	8000150 <strlen>
 8009ae8:	f04f 0a00 	mov.w	sl, #0
 8009aec:	4605      	mov	r5, r0
 8009aee:	f04f 0b00 	mov.w	fp, #0
 8009af2:	9419      	str	r4, [sp, #100]	; 0x64
 8009af4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009af6:	781a      	ldrb	r2, [r3, #0]
 8009af8:	2a0d      	cmp	r2, #13
 8009afa:	d833      	bhi.n	8009b64 <_strtod_l+0x9c>
 8009afc:	2a09      	cmp	r2, #9
 8009afe:	d237      	bcs.n	8009b70 <_strtod_l+0xa8>
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	d03f      	beq.n	8009b84 <_strtod_l+0xbc>
 8009b04:	2300      	movs	r3, #0
 8009b06:	9309      	str	r3, [sp, #36]	; 0x24
 8009b08:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009b0a:	7833      	ldrb	r3, [r6, #0]
 8009b0c:	2b30      	cmp	r3, #48	; 0x30
 8009b0e:	f040 8101 	bne.w	8009d14 <_strtod_l+0x24c>
 8009b12:	7873      	ldrb	r3, [r6, #1]
 8009b14:	2b58      	cmp	r3, #88	; 0x58
 8009b16:	d001      	beq.n	8009b1c <_strtod_l+0x54>
 8009b18:	2b78      	cmp	r3, #120	; 0x78
 8009b1a:	d16b      	bne.n	8009bf4 <_strtod_l+0x12c>
 8009b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b22:	9301      	str	r3, [sp, #4]
 8009b24:	ab1a      	add	r3, sp, #104	; 0x68
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	4aaa      	ldr	r2, [pc, #680]	; (8009dd4 <_strtod_l+0x30c>)
 8009b2a:	ab1b      	add	r3, sp, #108	; 0x6c
 8009b2c:	a919      	add	r1, sp, #100	; 0x64
 8009b2e:	4640      	mov	r0, r8
 8009b30:	f002 fc5c 	bl	800c3ec <__gethex>
 8009b34:	f010 0407 	ands.w	r4, r0, #7
 8009b38:	4605      	mov	r5, r0
 8009b3a:	d005      	beq.n	8009b48 <_strtod_l+0x80>
 8009b3c:	2c06      	cmp	r4, #6
 8009b3e:	d12b      	bne.n	8009b98 <_strtod_l+0xd0>
 8009b40:	2300      	movs	r3, #0
 8009b42:	3601      	adds	r6, #1
 8009b44:	9619      	str	r6, [sp, #100]	; 0x64
 8009b46:	9309      	str	r3, [sp, #36]	; 0x24
 8009b48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f040 859d 	bne.w	800a68a <_strtod_l+0xbc2>
 8009b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b52:	b1e3      	cbz	r3, 8009b8e <_strtod_l+0xc6>
 8009b54:	4652      	mov	r2, sl
 8009b56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	b01f      	add	sp, #124	; 0x7c
 8009b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b64:	2a2b      	cmp	r2, #43	; 0x2b
 8009b66:	d006      	beq.n	8009b76 <_strtod_l+0xae>
 8009b68:	2a2d      	cmp	r2, #45	; 0x2d
 8009b6a:	d013      	beq.n	8009b94 <_strtod_l+0xcc>
 8009b6c:	2a20      	cmp	r2, #32
 8009b6e:	d1c9      	bne.n	8009b04 <_strtod_l+0x3c>
 8009b70:	3301      	adds	r3, #1
 8009b72:	9319      	str	r3, [sp, #100]	; 0x64
 8009b74:	e7be      	b.n	8009af4 <_strtod_l+0x2c>
 8009b76:	2200      	movs	r2, #0
 8009b78:	9209      	str	r2, [sp, #36]	; 0x24
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	9219      	str	r2, [sp, #100]	; 0x64
 8009b7e:	785b      	ldrb	r3, [r3, #1]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1c1      	bne.n	8009b08 <_strtod_l+0x40>
 8009b84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b86:	9419      	str	r4, [sp, #100]	; 0x64
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f040 857c 	bne.w	800a686 <_strtod_l+0xbbe>
 8009b8e:	4652      	mov	r2, sl
 8009b90:	465b      	mov	r3, fp
 8009b92:	e7e2      	b.n	8009b5a <_strtod_l+0x92>
 8009b94:	2201      	movs	r2, #1
 8009b96:	e7ef      	b.n	8009b78 <_strtod_l+0xb0>
 8009b98:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b9a:	b13a      	cbz	r2, 8009bac <_strtod_l+0xe4>
 8009b9c:	2135      	movs	r1, #53	; 0x35
 8009b9e:	a81c      	add	r0, sp, #112	; 0x70
 8009ba0:	f003 fcff 	bl	800d5a2 <__copybits>
 8009ba4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	f003 f982 	bl	800ceb0 <_Bfree>
 8009bac:	3c01      	subs	r4, #1
 8009bae:	2c04      	cmp	r4, #4
 8009bb0:	d808      	bhi.n	8009bc4 <_strtod_l+0xfc>
 8009bb2:	e8df f004 	tbb	[pc, r4]
 8009bb6:	030c      	.short	0x030c
 8009bb8:	1a17      	.short	0x1a17
 8009bba:	0c          	.byte	0x0c
 8009bbb:	00          	.byte	0x00
 8009bbc:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8009bc0:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8009bc4:	0729      	lsls	r1, r5, #28
 8009bc6:	d5bf      	bpl.n	8009b48 <_strtod_l+0x80>
 8009bc8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009bcc:	e7bc      	b.n	8009b48 <_strtod_l+0x80>
 8009bce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009bd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009bd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009bda:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8009bde:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009be2:	e7ef      	b.n	8009bc4 <_strtod_l+0xfc>
 8009be4:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8009de0 <_strtod_l+0x318>
 8009be8:	e7ec      	b.n	8009bc4 <_strtod_l+0xfc>
 8009bea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009bee:	f04f 3aff 	mov.w	sl, #4294967295
 8009bf2:	e7e7      	b.n	8009bc4 <_strtod_l+0xfc>
 8009bf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	9219      	str	r2, [sp, #100]	; 0x64
 8009bfa:	785b      	ldrb	r3, [r3, #1]
 8009bfc:	2b30      	cmp	r3, #48	; 0x30
 8009bfe:	d0f9      	beq.n	8009bf4 <_strtod_l+0x12c>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0a1      	beq.n	8009b48 <_strtod_l+0x80>
 8009c04:	2301      	movs	r3, #1
 8009c06:	9308      	str	r3, [sp, #32]
 8009c08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c0a:	220a      	movs	r2, #10
 8009c0c:	930a      	str	r3, [sp, #40]	; 0x28
 8009c0e:	2300      	movs	r3, #0
 8009c10:	9305      	str	r3, [sp, #20]
 8009c12:	9306      	str	r3, [sp, #24]
 8009c14:	9304      	str	r3, [sp, #16]
 8009c16:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009c18:	7806      	ldrb	r6, [r0, #0]
 8009c1a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009c1e:	b2d9      	uxtb	r1, r3
 8009c20:	2909      	cmp	r1, #9
 8009c22:	d979      	bls.n	8009d18 <_strtod_l+0x250>
 8009c24:	462a      	mov	r2, r5
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	f003 fe8c 	bl	800d944 <strncmp>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	f000 8085 	beq.w	8009d3c <_strtod_l+0x274>
 8009c32:	2000      	movs	r0, #0
 8009c34:	4633      	mov	r3, r6
 8009c36:	4602      	mov	r2, r0
 8009c38:	4601      	mov	r1, r0
 8009c3a:	9d04      	ldr	r5, [sp, #16]
 8009c3c:	2b65      	cmp	r3, #101	; 0x65
 8009c3e:	d002      	beq.n	8009c46 <_strtod_l+0x17e>
 8009c40:	2b45      	cmp	r3, #69	; 0x45
 8009c42:	f040 80ef 	bne.w	8009e24 <_strtod_l+0x35c>
 8009c46:	b925      	cbnz	r5, 8009c52 <_strtod_l+0x18a>
 8009c48:	b910      	cbnz	r0, 8009c50 <_strtod_l+0x188>
 8009c4a:	9b08      	ldr	r3, [sp, #32]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d099      	beq.n	8009b84 <_strtod_l+0xbc>
 8009c50:	2500      	movs	r5, #0
 8009c52:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8009c54:	1c63      	adds	r3, r4, #1
 8009c56:	9319      	str	r3, [sp, #100]	; 0x64
 8009c58:	7863      	ldrb	r3, [r4, #1]
 8009c5a:	2b2b      	cmp	r3, #43	; 0x2b
 8009c5c:	f000 80cf 	beq.w	8009dfe <_strtod_l+0x336>
 8009c60:	2b2d      	cmp	r3, #45	; 0x2d
 8009c62:	f000 80d2 	beq.w	8009e0a <_strtod_l+0x342>
 8009c66:	2600      	movs	r6, #0
 8009c68:	9607      	str	r6, [sp, #28]
 8009c6a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009c6e:	2e09      	cmp	r6, #9
 8009c70:	f200 80d7 	bhi.w	8009e22 <_strtod_l+0x35a>
 8009c74:	2b30      	cmp	r3, #48	; 0x30
 8009c76:	f000 80ca 	beq.w	8009e0e <_strtod_l+0x346>
 8009c7a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8009c7e:	2e08      	cmp	r6, #8
 8009c80:	f200 80d0 	bhi.w	8009e24 <_strtod_l+0x35c>
 8009c84:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009c88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c8a:	f04f 0c0a 	mov.w	ip, #10
 8009c8e:	461f      	mov	r7, r3
 8009c90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c92:	1c5e      	adds	r6, r3, #1
 8009c94:	9619      	str	r6, [sp, #100]	; 0x64
 8009c96:	785b      	ldrb	r3, [r3, #1]
 8009c98:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 8009c9c:	f1b9 0f09 	cmp.w	r9, #9
 8009ca0:	f240 80ba 	bls.w	8009e18 <_strtod_l+0x350>
 8009ca4:	1bf6      	subs	r6, r6, r7
 8009ca6:	2e08      	cmp	r6, #8
 8009ca8:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8009cac:	dc02      	bgt.n	8009cb4 <_strtod_l+0x1ec>
 8009cae:	45f1      	cmp	r9, lr
 8009cb0:	bfa8      	it	ge
 8009cb2:	46f1      	movge	r9, lr
 8009cb4:	9e07      	ldr	r6, [sp, #28]
 8009cb6:	b10e      	cbz	r6, 8009cbc <_strtod_l+0x1f4>
 8009cb8:	f1c9 0900 	rsb	r9, r9, #0
 8009cbc:	2d00      	cmp	r5, #0
 8009cbe:	f040 80d7 	bne.w	8009e70 <_strtod_l+0x3a8>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	f47f af40 	bne.w	8009b48 <_strtod_l+0x80>
 8009cc8:	9a08      	ldr	r2, [sp, #32]
 8009cca:	2a00      	cmp	r2, #0
 8009ccc:	f47f af3c 	bne.w	8009b48 <_strtod_l+0x80>
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	f47f af57 	bne.w	8009b84 <_strtod_l+0xbc>
 8009cd6:	2b4e      	cmp	r3, #78	; 0x4e
 8009cd8:	f000 80ad 	beq.w	8009e36 <_strtod_l+0x36e>
 8009cdc:	f300 80a5 	bgt.w	8009e2a <_strtod_l+0x362>
 8009ce0:	2b49      	cmp	r3, #73	; 0x49
 8009ce2:	f47f af4f 	bne.w	8009b84 <_strtod_l+0xbc>
 8009ce6:	493c      	ldr	r1, [pc, #240]	; (8009dd8 <_strtod_l+0x310>)
 8009ce8:	a819      	add	r0, sp, #100	; 0x64
 8009cea:	f002 fdb0 	bl	800c84e <__match>
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	f43f af48 	beq.w	8009b84 <_strtod_l+0xbc>
 8009cf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cf6:	4939      	ldr	r1, [pc, #228]	; (8009ddc <_strtod_l+0x314>)
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	a819      	add	r0, sp, #100	; 0x64
 8009cfc:	9319      	str	r3, [sp, #100]	; 0x64
 8009cfe:	f002 fda6 	bl	800c84e <__match>
 8009d02:	b910      	cbnz	r0, 8009d0a <_strtod_l+0x242>
 8009d04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d06:	3301      	adds	r3, #1
 8009d08:	9319      	str	r3, [sp, #100]	; 0x64
 8009d0a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8009de0 <_strtod_l+0x318>
 8009d0e:	f04f 0a00 	mov.w	sl, #0
 8009d12:	e719      	b.n	8009b48 <_strtod_l+0x80>
 8009d14:	2300      	movs	r3, #0
 8009d16:	e776      	b.n	8009c06 <_strtod_l+0x13e>
 8009d18:	9904      	ldr	r1, [sp, #16]
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	2908      	cmp	r1, #8
 8009d1e:	bfd5      	itete	le
 8009d20:	9906      	ldrle	r1, [sp, #24]
 8009d22:	9905      	ldrgt	r1, [sp, #20]
 8009d24:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d28:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009d2c:	bfd4      	ite	le
 8009d2e:	9306      	strle	r3, [sp, #24]
 8009d30:	9305      	strgt	r3, [sp, #20]
 8009d32:	9b04      	ldr	r3, [sp, #16]
 8009d34:	9019      	str	r0, [sp, #100]	; 0x64
 8009d36:	3301      	adds	r3, #1
 8009d38:	9304      	str	r3, [sp, #16]
 8009d3a:	e76c      	b.n	8009c16 <_strtod_l+0x14e>
 8009d3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d3e:	195a      	adds	r2, r3, r5
 8009d40:	9219      	str	r2, [sp, #100]	; 0x64
 8009d42:	9a04      	ldr	r2, [sp, #16]
 8009d44:	5d5b      	ldrb	r3, [r3, r5]
 8009d46:	2a00      	cmp	r2, #0
 8009d48:	d154      	bne.n	8009df4 <_strtod_l+0x32c>
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	2b30      	cmp	r3, #48	; 0x30
 8009d4e:	d02a      	beq.n	8009da6 <_strtod_l+0x2de>
 8009d50:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009d54:	2a08      	cmp	r2, #8
 8009d56:	f200 849d 	bhi.w	800a694 <_strtod_l+0xbcc>
 8009d5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d5c:	920a      	str	r2, [sp, #40]	; 0x28
 8009d5e:	4602      	mov	r2, r0
 8009d60:	2000      	movs	r0, #0
 8009d62:	4605      	mov	r5, r0
 8009d64:	3b30      	subs	r3, #48	; 0x30
 8009d66:	f100 0101 	add.w	r1, r0, #1
 8009d6a:	d011      	beq.n	8009d90 <_strtod_l+0x2c8>
 8009d6c:	440a      	add	r2, r1
 8009d6e:	260a      	movs	r6, #10
 8009d70:	4629      	mov	r1, r5
 8009d72:	eb00 0c05 	add.w	ip, r0, r5
 8009d76:	4561      	cmp	r1, ip
 8009d78:	d11b      	bne.n	8009db2 <_strtod_l+0x2ea>
 8009d7a:	4428      	add	r0, r5
 8009d7c:	2808      	cmp	r0, #8
 8009d7e:	f100 0501 	add.w	r5, r0, #1
 8009d82:	dc2f      	bgt.n	8009de4 <_strtod_l+0x31c>
 8009d84:	210a      	movs	r1, #10
 8009d86:	9806      	ldr	r0, [sp, #24]
 8009d88:	fb01 3300 	mla	r3, r1, r0, r3
 8009d8c:	9306      	str	r3, [sp, #24]
 8009d8e:	2100      	movs	r1, #0
 8009d90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d92:	1c58      	adds	r0, r3, #1
 8009d94:	9019      	str	r0, [sp, #100]	; 0x64
 8009d96:	4608      	mov	r0, r1
 8009d98:	785b      	ldrb	r3, [r3, #1]
 8009d9a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009d9e:	2909      	cmp	r1, #9
 8009da0:	d9e0      	bls.n	8009d64 <_strtod_l+0x29c>
 8009da2:	2101      	movs	r1, #1
 8009da4:	e74a      	b.n	8009c3c <_strtod_l+0x174>
 8009da6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009da8:	3001      	adds	r0, #1
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	9219      	str	r2, [sp, #100]	; 0x64
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	e7cc      	b.n	8009d4c <_strtod_l+0x284>
 8009db2:	3101      	adds	r1, #1
 8009db4:	f101 3eff 	add.w	lr, r1, #4294967295
 8009db8:	f1be 0f08 	cmp.w	lr, #8
 8009dbc:	dc03      	bgt.n	8009dc6 <_strtod_l+0x2fe>
 8009dbe:	9f06      	ldr	r7, [sp, #24]
 8009dc0:	4377      	muls	r7, r6
 8009dc2:	9706      	str	r7, [sp, #24]
 8009dc4:	e7d7      	b.n	8009d76 <_strtod_l+0x2ae>
 8009dc6:	2910      	cmp	r1, #16
 8009dc8:	bfde      	ittt	le
 8009dca:	9f05      	ldrle	r7, [sp, #20]
 8009dcc:	4377      	mulle	r7, r6
 8009dce:	9705      	strle	r7, [sp, #20]
 8009dd0:	e7d1      	b.n	8009d76 <_strtod_l+0x2ae>
 8009dd2:	bf00      	nop
 8009dd4:	0801151c 	.word	0x0801151c
 8009dd8:	08011840 	.word	0x08011840
 8009ddc:	080116c4 	.word	0x080116c4
 8009de0:	7ff00000 	.word	0x7ff00000
 8009de4:	2d10      	cmp	r5, #16
 8009de6:	bfdf      	itttt	le
 8009de8:	210a      	movle	r1, #10
 8009dea:	9805      	ldrle	r0, [sp, #20]
 8009dec:	fb01 3300 	mlale	r3, r1, r0, r3
 8009df0:	9305      	strle	r3, [sp, #20]
 8009df2:	e7cc      	b.n	8009d8e <_strtod_l+0x2c6>
 8009df4:	4602      	mov	r2, r0
 8009df6:	9d04      	ldr	r5, [sp, #16]
 8009df8:	e7cf      	b.n	8009d9a <_strtod_l+0x2d2>
 8009dfa:	2101      	movs	r1, #1
 8009dfc:	e724      	b.n	8009c48 <_strtod_l+0x180>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9307      	str	r3, [sp, #28]
 8009e02:	1ca3      	adds	r3, r4, #2
 8009e04:	9319      	str	r3, [sp, #100]	; 0x64
 8009e06:	78a3      	ldrb	r3, [r4, #2]
 8009e08:	e72f      	b.n	8009c6a <_strtod_l+0x1a2>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e7f8      	b.n	8009e00 <_strtod_l+0x338>
 8009e0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e10:	1c5e      	adds	r6, r3, #1
 8009e12:	9619      	str	r6, [sp, #100]	; 0x64
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	e72d      	b.n	8009c74 <_strtod_l+0x1ac>
 8009e18:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8009e1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009e20:	e736      	b.n	8009c90 <_strtod_l+0x1c8>
 8009e22:	9419      	str	r4, [sp, #100]	; 0x64
 8009e24:	f04f 0900 	mov.w	r9, #0
 8009e28:	e748      	b.n	8009cbc <_strtod_l+0x1f4>
 8009e2a:	2b69      	cmp	r3, #105	; 0x69
 8009e2c:	f43f af5b 	beq.w	8009ce6 <_strtod_l+0x21e>
 8009e30:	2b6e      	cmp	r3, #110	; 0x6e
 8009e32:	f47f aea7 	bne.w	8009b84 <_strtod_l+0xbc>
 8009e36:	498c      	ldr	r1, [pc, #560]	; (800a068 <_strtod_l+0x5a0>)
 8009e38:	a819      	add	r0, sp, #100	; 0x64
 8009e3a:	f002 fd08 	bl	800c84e <__match>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f43f aea0 	beq.w	8009b84 <_strtod_l+0xbc>
 8009e44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b28      	cmp	r3, #40	; 0x28
 8009e4a:	d10e      	bne.n	8009e6a <_strtod_l+0x3a2>
 8009e4c:	aa1c      	add	r2, sp, #112	; 0x70
 8009e4e:	4987      	ldr	r1, [pc, #540]	; (800a06c <_strtod_l+0x5a4>)
 8009e50:	a819      	add	r0, sp, #100	; 0x64
 8009e52:	f002 fd0f 	bl	800c874 <__hexnan>
 8009e56:	2805      	cmp	r0, #5
 8009e58:	d107      	bne.n	8009e6a <_strtod_l+0x3a2>
 8009e5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e5c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8009e60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009e64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009e68:	e66e      	b.n	8009b48 <_strtod_l+0x80>
 8009e6a:	f8df b210 	ldr.w	fp, [pc, #528]	; 800a07c <_strtod_l+0x5b4>
 8009e6e:	e74e      	b.n	8009d0e <_strtod_l+0x246>
 8009e70:	9b04      	ldr	r3, [sp, #16]
 8009e72:	462c      	mov	r4, r5
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bf08      	it	eq
 8009e78:	462b      	moveq	r3, r5
 8009e7a:	2d10      	cmp	r5, #16
 8009e7c:	bfa8      	it	ge
 8009e7e:	2410      	movge	r4, #16
 8009e80:	9806      	ldr	r0, [sp, #24]
 8009e82:	eba9 0902 	sub.w	r9, r9, r2
 8009e86:	9304      	str	r3, [sp, #16]
 8009e88:	f7f6 faac 	bl	80003e4 <__aeabi_ui2d>
 8009e8c:	2c09      	cmp	r4, #9
 8009e8e:	4682      	mov	sl, r0
 8009e90:	468b      	mov	fp, r1
 8009e92:	dd13      	ble.n	8009ebc <_strtod_l+0x3f4>
 8009e94:	4b76      	ldr	r3, [pc, #472]	; (800a070 <_strtod_l+0x5a8>)
 8009e96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009e9e:	f7f6 fb17 	bl	80004d0 <__aeabi_dmul>
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	9805      	ldr	r0, [sp, #20]
 8009ea6:	460f      	mov	r7, r1
 8009ea8:	f7f6 fa9c 	bl	80003e4 <__aeabi_ui2d>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	4639      	mov	r1, r7
 8009eb4:	f7f6 f95a 	bl	800016c <__adddf3>
 8009eb8:	4682      	mov	sl, r0
 8009eba:	468b      	mov	fp, r1
 8009ebc:	2d0f      	cmp	r5, #15
 8009ebe:	dc36      	bgt.n	8009f2e <_strtod_l+0x466>
 8009ec0:	f1b9 0f00 	cmp.w	r9, #0
 8009ec4:	f43f ae40 	beq.w	8009b48 <_strtod_l+0x80>
 8009ec8:	dd24      	ble.n	8009f14 <_strtod_l+0x44c>
 8009eca:	f1b9 0f16 	cmp.w	r9, #22
 8009ece:	dc0b      	bgt.n	8009ee8 <_strtod_l+0x420>
 8009ed0:	4652      	mov	r2, sl
 8009ed2:	465b      	mov	r3, fp
 8009ed4:	4d66      	ldr	r5, [pc, #408]	; (800a070 <_strtod_l+0x5a8>)
 8009ed6:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8009eda:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009ede:	f7f6 faf7 	bl	80004d0 <__aeabi_dmul>
 8009ee2:	4682      	mov	sl, r0
 8009ee4:	468b      	mov	fp, r1
 8009ee6:	e62f      	b.n	8009b48 <_strtod_l+0x80>
 8009ee8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009eec:	4599      	cmp	r9, r3
 8009eee:	dc1e      	bgt.n	8009f2e <_strtod_l+0x466>
 8009ef0:	4c5f      	ldr	r4, [pc, #380]	; (800a070 <_strtod_l+0x5a8>)
 8009ef2:	f1c5 050f 	rsb	r5, r5, #15
 8009ef6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009efa:	eba9 0505 	sub.w	r5, r9, r5
 8009efe:	4652      	mov	r2, sl
 8009f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f04:	465b      	mov	r3, fp
 8009f06:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009f0a:	f7f6 fae1 	bl	80004d0 <__aeabi_dmul>
 8009f0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f12:	e7e4      	b.n	8009ede <_strtod_l+0x416>
 8009f14:	f119 0f16 	cmn.w	r9, #22
 8009f18:	db09      	blt.n	8009f2e <_strtod_l+0x466>
 8009f1a:	4d55      	ldr	r5, [pc, #340]	; (800a070 <_strtod_l+0x5a8>)
 8009f1c:	4650      	mov	r0, sl
 8009f1e:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8009f22:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009f26:	4659      	mov	r1, fp
 8009f28:	f7f6 fbfc 	bl	8000724 <__aeabi_ddiv>
 8009f2c:	e7d9      	b.n	8009ee2 <_strtod_l+0x41a>
 8009f2e:	1b2c      	subs	r4, r5, r4
 8009f30:	444c      	add	r4, r9
 8009f32:	2c00      	cmp	r4, #0
 8009f34:	dd73      	ble.n	800a01e <_strtod_l+0x556>
 8009f36:	f014 030f 	ands.w	r3, r4, #15
 8009f3a:	d00a      	beq.n	8009f52 <_strtod_l+0x48a>
 8009f3c:	494c      	ldr	r1, [pc, #304]	; (800a070 <_strtod_l+0x5a8>)
 8009f3e:	4652      	mov	r2, sl
 8009f40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f48:	465b      	mov	r3, fp
 8009f4a:	f7f6 fac1 	bl	80004d0 <__aeabi_dmul>
 8009f4e:	4682      	mov	sl, r0
 8009f50:	468b      	mov	fp, r1
 8009f52:	f034 040f 	bics.w	r4, r4, #15
 8009f56:	d054      	beq.n	800a002 <_strtod_l+0x53a>
 8009f58:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8009f5c:	dd27      	ble.n	8009fae <_strtod_l+0x4e6>
 8009f5e:	f04f 0900 	mov.w	r9, #0
 8009f62:	f8cd 9010 	str.w	r9, [sp, #16]
 8009f66:	f8cd 901c 	str.w	r9, [sp, #28]
 8009f6a:	f8cd 9018 	str.w	r9, [sp, #24]
 8009f6e:	2322      	movs	r3, #34	; 0x22
 8009f70:	f04f 0a00 	mov.w	sl, #0
 8009f74:	f8df b108 	ldr.w	fp, [pc, #264]	; 800a080 <_strtod_l+0x5b8>
 8009f78:	f8c8 3000 	str.w	r3, [r8]
 8009f7c:	9b07      	ldr	r3, [sp, #28]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f43f ade2 	beq.w	8009b48 <_strtod_l+0x80>
 8009f84:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f86:	4640      	mov	r0, r8
 8009f88:	f002 ff92 	bl	800ceb0 <_Bfree>
 8009f8c:	9906      	ldr	r1, [sp, #24]
 8009f8e:	4640      	mov	r0, r8
 8009f90:	f002 ff8e 	bl	800ceb0 <_Bfree>
 8009f94:	9904      	ldr	r1, [sp, #16]
 8009f96:	4640      	mov	r0, r8
 8009f98:	f002 ff8a 	bl	800ceb0 <_Bfree>
 8009f9c:	9907      	ldr	r1, [sp, #28]
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	f002 ff86 	bl	800ceb0 <_Bfree>
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	f002 ff82 	bl	800ceb0 <_Bfree>
 8009fac:	e5cc      	b.n	8009b48 <_strtod_l+0x80>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	4650      	mov	r0, sl
 8009fb2:	4659      	mov	r1, fp
 8009fb4:	461f      	mov	r7, r3
 8009fb6:	4e2f      	ldr	r6, [pc, #188]	; (800a074 <_strtod_l+0x5ac>)
 8009fb8:	1124      	asrs	r4, r4, #4
 8009fba:	2c01      	cmp	r4, #1
 8009fbc:	dc24      	bgt.n	800a008 <_strtod_l+0x540>
 8009fbe:	b10b      	cbz	r3, 8009fc4 <_strtod_l+0x4fc>
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	468b      	mov	fp, r1
 8009fc4:	4b2b      	ldr	r3, [pc, #172]	; (800a074 <_strtod_l+0x5ac>)
 8009fc6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009fca:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009fce:	4652      	mov	r2, sl
 8009fd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fd4:	465b      	mov	r3, fp
 8009fd6:	f7f6 fa7b 	bl	80004d0 <__aeabi_dmul>
 8009fda:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fde:	468b      	mov	fp, r1
 8009fe0:	460a      	mov	r2, r1
 8009fe2:	0d1b      	lsrs	r3, r3, #20
 8009fe4:	4924      	ldr	r1, [pc, #144]	; (800a078 <_strtod_l+0x5b0>)
 8009fe6:	051b      	lsls	r3, r3, #20
 8009fe8:	428b      	cmp	r3, r1
 8009fea:	4682      	mov	sl, r0
 8009fec:	d8b7      	bhi.n	8009f5e <_strtod_l+0x496>
 8009fee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009ff2:	428b      	cmp	r3, r1
 8009ff4:	bf86      	itte	hi
 8009ff6:	f04f 3aff 	movhi.w	sl, #4294967295
 8009ffa:	f8df b088 	ldrhi.w	fp, [pc, #136]	; 800a084 <_strtod_l+0x5bc>
 8009ffe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a002:	2300      	movs	r3, #0
 800a004:	9305      	str	r3, [sp, #20]
 800a006:	e070      	b.n	800a0ea <_strtod_l+0x622>
 800a008:	07e2      	lsls	r2, r4, #31
 800a00a:	d504      	bpl.n	800a016 <_strtod_l+0x54e>
 800a00c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a010:	f7f6 fa5e 	bl	80004d0 <__aeabi_dmul>
 800a014:	2301      	movs	r3, #1
 800a016:	3701      	adds	r7, #1
 800a018:	1064      	asrs	r4, r4, #1
 800a01a:	3608      	adds	r6, #8
 800a01c:	e7cd      	b.n	8009fba <_strtod_l+0x4f2>
 800a01e:	d0f0      	beq.n	800a002 <_strtod_l+0x53a>
 800a020:	4264      	negs	r4, r4
 800a022:	f014 020f 	ands.w	r2, r4, #15
 800a026:	d00a      	beq.n	800a03e <_strtod_l+0x576>
 800a028:	4b11      	ldr	r3, [pc, #68]	; (800a070 <_strtod_l+0x5a8>)
 800a02a:	4650      	mov	r0, sl
 800a02c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a030:	4659      	mov	r1, fp
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f7f6 fb75 	bl	8000724 <__aeabi_ddiv>
 800a03a:	4682      	mov	sl, r0
 800a03c:	468b      	mov	fp, r1
 800a03e:	1124      	asrs	r4, r4, #4
 800a040:	d0df      	beq.n	800a002 <_strtod_l+0x53a>
 800a042:	2c1f      	cmp	r4, #31
 800a044:	dd20      	ble.n	800a088 <_strtod_l+0x5c0>
 800a046:	f04f 0900 	mov.w	r9, #0
 800a04a:	f8cd 9010 	str.w	r9, [sp, #16]
 800a04e:	f8cd 901c 	str.w	r9, [sp, #28]
 800a052:	f8cd 9018 	str.w	r9, [sp, #24]
 800a056:	2322      	movs	r3, #34	; 0x22
 800a058:	f04f 0a00 	mov.w	sl, #0
 800a05c:	f04f 0b00 	mov.w	fp, #0
 800a060:	f8c8 3000 	str.w	r3, [r8]
 800a064:	e78a      	b.n	8009f7c <_strtod_l+0x4b4>
 800a066:	bf00      	nop
 800a068:	08011579 	.word	0x08011579
 800a06c:	08011530 	.word	0x08011530
 800a070:	08011758 	.word	0x08011758
 800a074:	08011730 	.word	0x08011730
 800a078:	7ca00000 	.word	0x7ca00000
 800a07c:	fff80000 	.word	0xfff80000
 800a080:	7ff00000 	.word	0x7ff00000
 800a084:	7fefffff 	.word	0x7fefffff
 800a088:	f014 0310 	ands.w	r3, r4, #16
 800a08c:	bf18      	it	ne
 800a08e:	236a      	movne	r3, #106	; 0x6a
 800a090:	4650      	mov	r0, sl
 800a092:	9305      	str	r3, [sp, #20]
 800a094:	4659      	mov	r1, fp
 800a096:	2300      	movs	r3, #0
 800a098:	4e9f      	ldr	r6, [pc, #636]	; (800a318 <_strtod_l+0x850>)
 800a09a:	2c00      	cmp	r4, #0
 800a09c:	f300 8109 	bgt.w	800a2b2 <_strtod_l+0x7ea>
 800a0a0:	b10b      	cbz	r3, 800a0a6 <_strtod_l+0x5de>
 800a0a2:	4682      	mov	sl, r0
 800a0a4:	468b      	mov	fp, r1
 800a0a6:	9b05      	ldr	r3, [sp, #20]
 800a0a8:	b1bb      	cbz	r3, 800a0da <_strtod_l+0x612>
 800a0aa:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a0ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	4659      	mov	r1, fp
 800a0b6:	dd10      	ble.n	800a0da <_strtod_l+0x612>
 800a0b8:	2b1f      	cmp	r3, #31
 800a0ba:	f340 8104 	ble.w	800a2c6 <_strtod_l+0x7fe>
 800a0be:	2b34      	cmp	r3, #52	; 0x34
 800a0c0:	bfd8      	it	le
 800a0c2:	f04f 32ff 	movle.w	r2, #4294967295
 800a0c6:	f04f 0a00 	mov.w	sl, #0
 800a0ca:	bfcf      	iteee	gt
 800a0cc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a0d0:	3b20      	suble	r3, #32
 800a0d2:	fa02 f303 	lslle.w	r3, r2, r3
 800a0d6:	ea03 0b01 	andle.w	fp, r3, r1
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4650      	mov	r0, sl
 800a0e0:	4659      	mov	r1, fp
 800a0e2:	f7f6 fc5d 	bl	80009a0 <__aeabi_dcmpeq>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d1ad      	bne.n	800a046 <_strtod_l+0x57e>
 800a0ea:	9b06      	ldr	r3, [sp, #24]
 800a0ec:	9a04      	ldr	r2, [sp, #16]
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a0f2:	462b      	mov	r3, r5
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	f002 ff2d 	bl	800cf54 <__s2b>
 800a0fa:	9007      	str	r0, [sp, #28]
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	f43f af2e 	beq.w	8009f5e <_strtod_l+0x496>
 800a102:	f1b9 0f00 	cmp.w	r9, #0
 800a106:	f1c9 0300 	rsb	r3, r9, #0
 800a10a:	bfa8      	it	ge
 800a10c:	2300      	movge	r3, #0
 800a10e:	930e      	str	r3, [sp, #56]	; 0x38
 800a110:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 800a114:	f04f 0900 	mov.w	r9, #0
 800a118:	930f      	str	r3, [sp, #60]	; 0x3c
 800a11a:	f8cd 9010 	str.w	r9, [sp, #16]
 800a11e:	9b07      	ldr	r3, [sp, #28]
 800a120:	4640      	mov	r0, r8
 800a122:	6859      	ldr	r1, [r3, #4]
 800a124:	f002 fe90 	bl	800ce48 <_Balloc>
 800a128:	9006      	str	r0, [sp, #24]
 800a12a:	2800      	cmp	r0, #0
 800a12c:	f43f af1f 	beq.w	8009f6e <_strtod_l+0x4a6>
 800a130:	9b07      	ldr	r3, [sp, #28]
 800a132:	300c      	adds	r0, #12
 800a134:	691a      	ldr	r2, [r3, #16]
 800a136:	f103 010c 	add.w	r1, r3, #12
 800a13a:	3202      	adds	r2, #2
 800a13c:	0092      	lsls	r2, r2, #2
 800a13e:	f7ff fc5f 	bl	8009a00 <memcpy>
 800a142:	ab1c      	add	r3, sp, #112	; 0x70
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	ab1b      	add	r3, sp, #108	; 0x6c
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	4652      	mov	r2, sl
 800a14c:	465b      	mov	r3, fp
 800a14e:	4640      	mov	r0, r8
 800a150:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a154:	f003 f9ae 	bl	800d4b4 <__d2b>
 800a158:	901a      	str	r0, [sp, #104]	; 0x68
 800a15a:	2800      	cmp	r0, #0
 800a15c:	f43f af07 	beq.w	8009f6e <_strtod_l+0x4a6>
 800a160:	2101      	movs	r1, #1
 800a162:	4640      	mov	r0, r8
 800a164:	f002 ff82 	bl	800d06c <__i2b>
 800a168:	9004      	str	r0, [sp, #16]
 800a16a:	4603      	mov	r3, r0
 800a16c:	2800      	cmp	r0, #0
 800a16e:	f43f aefe 	beq.w	8009f6e <_strtod_l+0x4a6>
 800a172:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a174:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a176:	2d00      	cmp	r5, #0
 800a178:	bfab      	itete	ge
 800a17a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a17c:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 800a17e:	195e      	addge	r6, r3, r5
 800a180:	1b5c      	sublt	r4, r3, r5
 800a182:	9b05      	ldr	r3, [sp, #20]
 800a184:	bfa8      	it	ge
 800a186:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 800a188:	eba5 0503 	sub.w	r5, r5, r3
 800a18c:	4415      	add	r5, r2
 800a18e:	4b63      	ldr	r3, [pc, #396]	; (800a31c <_strtod_l+0x854>)
 800a190:	f105 35ff 	add.w	r5, r5, #4294967295
 800a194:	bfb8      	it	lt
 800a196:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a198:	429d      	cmp	r5, r3
 800a19a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a19e:	f280 80a4 	bge.w	800a2ea <_strtod_l+0x822>
 800a1a2:	1b5b      	subs	r3, r3, r5
 800a1a4:	2b1f      	cmp	r3, #31
 800a1a6:	eba2 0203 	sub.w	r2, r2, r3
 800a1aa:	f04f 0701 	mov.w	r7, #1
 800a1ae:	f300 8091 	bgt.w	800a2d4 <_strtod_l+0x80c>
 800a1b2:	2500      	movs	r5, #0
 800a1b4:	fa07 f303 	lsl.w	r3, r7, r3
 800a1b8:	9314      	str	r3, [sp, #80]	; 0x50
 800a1ba:	18b7      	adds	r7, r6, r2
 800a1bc:	9b05      	ldr	r3, [sp, #20]
 800a1be:	42be      	cmp	r6, r7
 800a1c0:	4414      	add	r4, r2
 800a1c2:	441c      	add	r4, r3
 800a1c4:	4633      	mov	r3, r6
 800a1c6:	bfa8      	it	ge
 800a1c8:	463b      	movge	r3, r7
 800a1ca:	42a3      	cmp	r3, r4
 800a1cc:	bfa8      	it	ge
 800a1ce:	4623      	movge	r3, r4
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	bfc2      	ittt	gt
 800a1d4:	1aff      	subgt	r7, r7, r3
 800a1d6:	1ae4      	subgt	r4, r4, r3
 800a1d8:	1af6      	subgt	r6, r6, r3
 800a1da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1dc:	b1bb      	cbz	r3, 800a20e <_strtod_l+0x746>
 800a1de:	461a      	mov	r2, r3
 800a1e0:	9904      	ldr	r1, [sp, #16]
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	f002 ffd8 	bl	800d198 <__pow5mult>
 800a1e8:	9004      	str	r0, [sp, #16]
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	f43f aebf 	beq.w	8009f6e <_strtod_l+0x4a6>
 800a1f0:	4601      	mov	r1, r0
 800a1f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a1f4:	4640      	mov	r0, r8
 800a1f6:	f002 ff42 	bl	800d07e <__multiply>
 800a1fa:	9008      	str	r0, [sp, #32]
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f43f aeb6 	beq.w	8009f6e <_strtod_l+0x4a6>
 800a202:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a204:	4640      	mov	r0, r8
 800a206:	f002 fe53 	bl	800ceb0 <_Bfree>
 800a20a:	9b08      	ldr	r3, [sp, #32]
 800a20c:	931a      	str	r3, [sp, #104]	; 0x68
 800a20e:	2f00      	cmp	r7, #0
 800a210:	dc6f      	bgt.n	800a2f2 <_strtod_l+0x82a>
 800a212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a214:	2b00      	cmp	r3, #0
 800a216:	d175      	bne.n	800a304 <_strtod_l+0x83c>
 800a218:	2c00      	cmp	r4, #0
 800a21a:	dd08      	ble.n	800a22e <_strtod_l+0x766>
 800a21c:	4622      	mov	r2, r4
 800a21e:	9906      	ldr	r1, [sp, #24]
 800a220:	4640      	mov	r0, r8
 800a222:	f003 f807 	bl	800d234 <__lshift>
 800a226:	9006      	str	r0, [sp, #24]
 800a228:	2800      	cmp	r0, #0
 800a22a:	f43f aea0 	beq.w	8009f6e <_strtod_l+0x4a6>
 800a22e:	2e00      	cmp	r6, #0
 800a230:	dd08      	ble.n	800a244 <_strtod_l+0x77c>
 800a232:	4632      	mov	r2, r6
 800a234:	9904      	ldr	r1, [sp, #16]
 800a236:	4640      	mov	r0, r8
 800a238:	f002 fffc 	bl	800d234 <__lshift>
 800a23c:	9004      	str	r0, [sp, #16]
 800a23e:	2800      	cmp	r0, #0
 800a240:	f43f ae95 	beq.w	8009f6e <_strtod_l+0x4a6>
 800a244:	9a06      	ldr	r2, [sp, #24]
 800a246:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a248:	4640      	mov	r0, r8
 800a24a:	f003 f85e 	bl	800d30a <__mdiff>
 800a24e:	4681      	mov	r9, r0
 800a250:	2800      	cmp	r0, #0
 800a252:	f43f ae8c 	beq.w	8009f6e <_strtod_l+0x4a6>
 800a256:	2400      	movs	r4, #0
 800a258:	68c3      	ldr	r3, [r0, #12]
 800a25a:	9904      	ldr	r1, [sp, #16]
 800a25c:	60c4      	str	r4, [r0, #12]
 800a25e:	9308      	str	r3, [sp, #32]
 800a260:	f003 f839 	bl	800d2d6 <__mcmp>
 800a264:	42a0      	cmp	r0, r4
 800a266:	da5b      	bge.n	800a320 <_strtod_l+0x858>
 800a268:	9b08      	ldr	r3, [sp, #32]
 800a26a:	b9f3      	cbnz	r3, 800a2aa <_strtod_l+0x7e2>
 800a26c:	f1ba 0f00 	cmp.w	sl, #0
 800a270:	d11b      	bne.n	800a2aa <_strtod_l+0x7e2>
 800a272:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a276:	b9c3      	cbnz	r3, 800a2aa <_strtod_l+0x7e2>
 800a278:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a27c:	0d1b      	lsrs	r3, r3, #20
 800a27e:	051b      	lsls	r3, r3, #20
 800a280:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a284:	d911      	bls.n	800a2aa <_strtod_l+0x7e2>
 800a286:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a28a:	b91b      	cbnz	r3, 800a294 <_strtod_l+0x7cc>
 800a28c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a290:	2b01      	cmp	r3, #1
 800a292:	dd0a      	ble.n	800a2aa <_strtod_l+0x7e2>
 800a294:	4649      	mov	r1, r9
 800a296:	2201      	movs	r2, #1
 800a298:	4640      	mov	r0, r8
 800a29a:	f002 ffcb 	bl	800d234 <__lshift>
 800a29e:	9904      	ldr	r1, [sp, #16]
 800a2a0:	4681      	mov	r9, r0
 800a2a2:	f003 f818 	bl	800d2d6 <__mcmp>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	dc6b      	bgt.n	800a382 <_strtod_l+0x8ba>
 800a2aa:	9b05      	ldr	r3, [sp, #20]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d175      	bne.n	800a39c <_strtod_l+0x8d4>
 800a2b0:	e668      	b.n	8009f84 <_strtod_l+0x4bc>
 800a2b2:	07e2      	lsls	r2, r4, #31
 800a2b4:	d504      	bpl.n	800a2c0 <_strtod_l+0x7f8>
 800a2b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2ba:	f7f6 f909 	bl	80004d0 <__aeabi_dmul>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	1064      	asrs	r4, r4, #1
 800a2c2:	3608      	adds	r6, #8
 800a2c4:	e6e9      	b.n	800a09a <_strtod_l+0x5d2>
 800a2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ce:	ea03 0a0a 	and.w	sl, r3, sl
 800a2d2:	e702      	b.n	800a0da <_strtod_l+0x612>
 800a2d4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a2d8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a2dc:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a2e0:	35e2      	adds	r5, #226	; 0xe2
 800a2e2:	fa07 f505 	lsl.w	r5, r7, r5
 800a2e6:	9714      	str	r7, [sp, #80]	; 0x50
 800a2e8:	e767      	b.n	800a1ba <_strtod_l+0x6f2>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	2500      	movs	r5, #0
 800a2ee:	9314      	str	r3, [sp, #80]	; 0x50
 800a2f0:	e763      	b.n	800a1ba <_strtod_l+0x6f2>
 800a2f2:	463a      	mov	r2, r7
 800a2f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a2f6:	4640      	mov	r0, r8
 800a2f8:	f002 ff9c 	bl	800d234 <__lshift>
 800a2fc:	901a      	str	r0, [sp, #104]	; 0x68
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d187      	bne.n	800a212 <_strtod_l+0x74a>
 800a302:	e634      	b.n	8009f6e <_strtod_l+0x4a6>
 800a304:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a306:	9906      	ldr	r1, [sp, #24]
 800a308:	4640      	mov	r0, r8
 800a30a:	f002 ff45 	bl	800d198 <__pow5mult>
 800a30e:	9006      	str	r0, [sp, #24]
 800a310:	2800      	cmp	r0, #0
 800a312:	d181      	bne.n	800a218 <_strtod_l+0x750>
 800a314:	e62b      	b.n	8009f6e <_strtod_l+0x4a6>
 800a316:	bf00      	nop
 800a318:	08011548 	.word	0x08011548
 800a31c:	fffffc02 	.word	0xfffffc02
 800a320:	f040 8086 	bne.w	800a430 <_strtod_l+0x968>
 800a324:	9a08      	ldr	r2, [sp, #32]
 800a326:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a32a:	b332      	cbz	r2, 800a37a <_strtod_l+0x8b2>
 800a32c:	4aac      	ldr	r2, [pc, #688]	; (800a5e0 <_strtod_l+0xb18>)
 800a32e:	4659      	mov	r1, fp
 800a330:	4293      	cmp	r3, r2
 800a332:	d152      	bne.n	800a3da <_strtod_l+0x912>
 800a334:	9b05      	ldr	r3, [sp, #20]
 800a336:	4650      	mov	r0, sl
 800a338:	b1d3      	cbz	r3, 800a370 <_strtod_l+0x8a8>
 800a33a:	4aaa      	ldr	r2, [pc, #680]	; (800a5e4 <_strtod_l+0xb1c>)
 800a33c:	f04f 34ff 	mov.w	r4, #4294967295
 800a340:	400a      	ands	r2, r1
 800a342:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a346:	d816      	bhi.n	800a376 <_strtod_l+0x8ae>
 800a348:	0d12      	lsrs	r2, r2, #20
 800a34a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a34e:	fa04 f303 	lsl.w	r3, r4, r3
 800a352:	4283      	cmp	r3, r0
 800a354:	d141      	bne.n	800a3da <_strtod_l+0x912>
 800a356:	4aa4      	ldr	r2, [pc, #656]	; (800a5e8 <_strtod_l+0xb20>)
 800a358:	4291      	cmp	r1, r2
 800a35a:	d102      	bne.n	800a362 <_strtod_l+0x89a>
 800a35c:	3301      	adds	r3, #1
 800a35e:	f43f ae06 	beq.w	8009f6e <_strtod_l+0x4a6>
 800a362:	4ba0      	ldr	r3, [pc, #640]	; (800a5e4 <_strtod_l+0xb1c>)
 800a364:	f04f 0a00 	mov.w	sl, #0
 800a368:	400b      	ands	r3, r1
 800a36a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a36e:	e79c      	b.n	800a2aa <_strtod_l+0x7e2>
 800a370:	f04f 33ff 	mov.w	r3, #4294967295
 800a374:	e7ed      	b.n	800a352 <_strtod_l+0x88a>
 800a376:	4623      	mov	r3, r4
 800a378:	e7eb      	b.n	800a352 <_strtod_l+0x88a>
 800a37a:	bb73      	cbnz	r3, 800a3da <_strtod_l+0x912>
 800a37c:	f1ba 0f00 	cmp.w	sl, #0
 800a380:	d12b      	bne.n	800a3da <_strtod_l+0x912>
 800a382:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a386:	9a05      	ldr	r2, [sp, #20]
 800a388:	0d1b      	lsrs	r3, r3, #20
 800a38a:	051b      	lsls	r3, r3, #20
 800a38c:	b1e2      	cbz	r2, 800a3c8 <_strtod_l+0x900>
 800a38e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a392:	dc19      	bgt.n	800a3c8 <_strtod_l+0x900>
 800a394:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800a398:	f77f ae5d 	ble.w	800a056 <_strtod_l+0x58e>
 800a39c:	4b93      	ldr	r3, [pc, #588]	; (800a5ec <_strtod_l+0xb24>)
 800a39e:	4650      	mov	r0, sl
 800a3a0:	930d      	str	r3, [sp, #52]	; 0x34
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	930c      	str	r3, [sp, #48]	; 0x30
 800a3a6:	4659      	mov	r1, fp
 800a3a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a3ac:	f7f6 f890 	bl	80004d0 <__aeabi_dmul>
 800a3b0:	4682      	mov	sl, r0
 800a3b2:	468b      	mov	fp, r1
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	f47f ade5 	bne.w	8009f84 <_strtod_l+0x4bc>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	f47f ade2 	bne.w	8009f84 <_strtod_l+0x4bc>
 800a3c0:	2322      	movs	r3, #34	; 0x22
 800a3c2:	f8c8 3000 	str.w	r3, [r8]
 800a3c6:	e5dd      	b.n	8009f84 <_strtod_l+0x4bc>
 800a3c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a3cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a3d0:	f04f 3aff 	mov.w	sl, #4294967295
 800a3d4:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a3d8:	e767      	b.n	800a2aa <_strtod_l+0x7e2>
 800a3da:	b19d      	cbz	r5, 800a404 <_strtod_l+0x93c>
 800a3dc:	ea15 0f0b 	tst.w	r5, fp
 800a3e0:	f43f af63 	beq.w	800a2aa <_strtod_l+0x7e2>
 800a3e4:	9b08      	ldr	r3, [sp, #32]
 800a3e6:	9a05      	ldr	r2, [sp, #20]
 800a3e8:	4650      	mov	r0, sl
 800a3ea:	4659      	mov	r1, fp
 800a3ec:	b173      	cbz	r3, 800a40c <_strtod_l+0x944>
 800a3ee:	f7ff fb47 	bl	8009a80 <sulp>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3fa:	f7f5 feb7 	bl	800016c <__adddf3>
 800a3fe:	4682      	mov	sl, r0
 800a400:	468b      	mov	fp, r1
 800a402:	e752      	b.n	800a2aa <_strtod_l+0x7e2>
 800a404:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a406:	ea13 0f0a 	tst.w	r3, sl
 800a40a:	e7e9      	b.n	800a3e0 <_strtod_l+0x918>
 800a40c:	f7ff fb38 	bl	8009a80 <sulp>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a418:	f7f5 fea6 	bl	8000168 <__aeabi_dsub>
 800a41c:	2200      	movs	r2, #0
 800a41e:	2300      	movs	r3, #0
 800a420:	4682      	mov	sl, r0
 800a422:	468b      	mov	fp, r1
 800a424:	f7f6 fabc 	bl	80009a0 <__aeabi_dcmpeq>
 800a428:	2800      	cmp	r0, #0
 800a42a:	f47f ae14 	bne.w	800a056 <_strtod_l+0x58e>
 800a42e:	e73c      	b.n	800a2aa <_strtod_l+0x7e2>
 800a430:	9904      	ldr	r1, [sp, #16]
 800a432:	4648      	mov	r0, r9
 800a434:	f003 f88d 	bl	800d552 <__ratio>
 800a438:	2200      	movs	r2, #0
 800a43a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a43e:	4606      	mov	r6, r0
 800a440:	460f      	mov	r7, r1
 800a442:	f7f6 fac1 	bl	80009c8 <__aeabi_dcmple>
 800a446:	2800      	cmp	r0, #0
 800a448:	d070      	beq.n	800a52c <_strtod_l+0xa64>
 800a44a:	9b08      	ldr	r3, [sp, #32]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d043      	beq.n	800a4d8 <_strtod_l+0xa10>
 800a450:	2600      	movs	r6, #0
 800a452:	4f67      	ldr	r7, [pc, #412]	; (800a5f0 <_strtod_l+0xb28>)
 800a454:	4d66      	ldr	r5, [pc, #408]	; (800a5f0 <_strtod_l+0xb28>)
 800a456:	4b63      	ldr	r3, [pc, #396]	; (800a5e4 <_strtod_l+0xb1c>)
 800a458:	ea0b 0303 	and.w	r3, fp, r3
 800a45c:	9314      	str	r3, [sp, #80]	; 0x50
 800a45e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a460:	4b64      	ldr	r3, [pc, #400]	; (800a5f4 <_strtod_l+0xb2c>)
 800a462:	429a      	cmp	r2, r3
 800a464:	f040 80ce 	bne.w	800a604 <_strtod_l+0xb3c>
 800a468:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a46c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a470:	4650      	mov	r0, sl
 800a472:	4659      	mov	r1, fp
 800a474:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a478:	f002 ffa6 	bl	800d3c8 <__ulp>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4630      	mov	r0, r6
 800a482:	4639      	mov	r1, r7
 800a484:	f7f6 f824 	bl	80004d0 <__aeabi_dmul>
 800a488:	4652      	mov	r2, sl
 800a48a:	465b      	mov	r3, fp
 800a48c:	f7f5 fe6e 	bl	800016c <__adddf3>
 800a490:	4a54      	ldr	r2, [pc, #336]	; (800a5e4 <_strtod_l+0xb1c>)
 800a492:	4b59      	ldr	r3, [pc, #356]	; (800a5f8 <_strtod_l+0xb30>)
 800a494:	400a      	ands	r2, r1
 800a496:	429a      	cmp	r2, r3
 800a498:	4682      	mov	sl, r0
 800a49a:	d95d      	bls.n	800a558 <_strtod_l+0xa90>
 800a49c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a49e:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d103      	bne.n	800a4ae <_strtod_l+0x9e6>
 800a4a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	f43f ad60 	beq.w	8009f6e <_strtod_l+0x4a6>
 800a4ae:	f04f 3aff 	mov.w	sl, #4294967295
 800a4b2:	f8df b134 	ldr.w	fp, [pc, #308]	; 800a5e8 <_strtod_l+0xb20>
 800a4b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	f002 fcf9 	bl	800ceb0 <_Bfree>
 800a4be:	9906      	ldr	r1, [sp, #24]
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	f002 fcf5 	bl	800ceb0 <_Bfree>
 800a4c6:	9904      	ldr	r1, [sp, #16]
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	f002 fcf1 	bl	800ceb0 <_Bfree>
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	f002 fced 	bl	800ceb0 <_Bfree>
 800a4d6:	e622      	b.n	800a11e <_strtod_l+0x656>
 800a4d8:	f1ba 0f00 	cmp.w	sl, #0
 800a4dc:	d118      	bne.n	800a510 <_strtod_l+0xa48>
 800a4de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4e2:	b9e3      	cbnz	r3, 800a51e <_strtod_l+0xa56>
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	4b42      	ldr	r3, [pc, #264]	; (800a5f0 <_strtod_l+0xb28>)
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	f7f6 fa62 	bl	80009b4 <__aeabi_dcmplt>
 800a4f0:	b9c8      	cbnz	r0, 800a526 <_strtod_l+0xa5e>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	4b41      	ldr	r3, [pc, #260]	; (800a5fc <_strtod_l+0xb34>)
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	f7f5 ffe9 	bl	80004d0 <__aeabi_dmul>
 800a4fe:	4604      	mov	r4, r0
 800a500:	460d      	mov	r5, r1
 800a502:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a506:	9416      	str	r4, [sp, #88]	; 0x58
 800a508:	9317      	str	r3, [sp, #92]	; 0x5c
 800a50a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a50e:	e7a2      	b.n	800a456 <_strtod_l+0x98e>
 800a510:	f1ba 0f01 	cmp.w	sl, #1
 800a514:	d103      	bne.n	800a51e <_strtod_l+0xa56>
 800a516:	f1bb 0f00 	cmp.w	fp, #0
 800a51a:	f43f ad9c 	beq.w	800a056 <_strtod_l+0x58e>
 800a51e:	2600      	movs	r6, #0
 800a520:	4f37      	ldr	r7, [pc, #220]	; (800a600 <_strtod_l+0xb38>)
 800a522:	2400      	movs	r4, #0
 800a524:	e796      	b.n	800a454 <_strtod_l+0x98c>
 800a526:	9c08      	ldr	r4, [sp, #32]
 800a528:	4d34      	ldr	r5, [pc, #208]	; (800a5fc <_strtod_l+0xb34>)
 800a52a:	e7ea      	b.n	800a502 <_strtod_l+0xa3a>
 800a52c:	4b33      	ldr	r3, [pc, #204]	; (800a5fc <_strtod_l+0xb34>)
 800a52e:	2200      	movs	r2, #0
 800a530:	4630      	mov	r0, r6
 800a532:	4639      	mov	r1, r7
 800a534:	f7f5 ffcc 	bl	80004d0 <__aeabi_dmul>
 800a538:	9b08      	ldr	r3, [sp, #32]
 800a53a:	4604      	mov	r4, r0
 800a53c:	460d      	mov	r5, r1
 800a53e:	b933      	cbnz	r3, 800a54e <_strtod_l+0xa86>
 800a540:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a544:	9010      	str	r0, [sp, #64]	; 0x40
 800a546:	9311      	str	r3, [sp, #68]	; 0x44
 800a548:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a54c:	e783      	b.n	800a456 <_strtod_l+0x98e>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a556:	e7f7      	b.n	800a548 <_strtod_l+0xa80>
 800a558:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800a55c:	9b05      	ldr	r3, [sp, #20]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1a9      	bne.n	800a4b6 <_strtod_l+0x9ee>
 800a562:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a566:	0d1b      	lsrs	r3, r3, #20
 800a568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a56a:	051b      	lsls	r3, r3, #20
 800a56c:	429a      	cmp	r2, r3
 800a56e:	465e      	mov	r6, fp
 800a570:	d1a1      	bne.n	800a4b6 <_strtod_l+0x9ee>
 800a572:	4629      	mov	r1, r5
 800a574:	4620      	mov	r0, r4
 800a576:	f7f6 fa5b 	bl	8000a30 <__aeabi_d2iz>
 800a57a:	f7f5 ff43 	bl	8000404 <__aeabi_i2d>
 800a57e:	460b      	mov	r3, r1
 800a580:	4602      	mov	r2, r0
 800a582:	4629      	mov	r1, r5
 800a584:	4620      	mov	r0, r4
 800a586:	f7f5 fdef 	bl	8000168 <__aeabi_dsub>
 800a58a:	9b08      	ldr	r3, [sp, #32]
 800a58c:	4604      	mov	r4, r0
 800a58e:	460d      	mov	r5, r1
 800a590:	b933      	cbnz	r3, 800a5a0 <_strtod_l+0xad8>
 800a592:	f1ba 0f00 	cmp.w	sl, #0
 800a596:	d103      	bne.n	800a5a0 <_strtod_l+0xad8>
 800a598:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a59c:	2e00      	cmp	r6, #0
 800a59e:	d06c      	beq.n	800a67a <_strtod_l+0xbb2>
 800a5a0:	a30b      	add	r3, pc, #44	; (adr r3, 800a5d0 <_strtod_l+0xb08>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	f7f6 fa03 	bl	80009b4 <__aeabi_dcmplt>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f47f ace8 	bne.w	8009f84 <_strtod_l+0x4bc>
 800a5b4:	a308      	add	r3, pc, #32	; (adr r3, 800a5d8 <_strtod_l+0xb10>)
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	4629      	mov	r1, r5
 800a5be:	f7f6 fa17 	bl	80009f0 <__aeabi_dcmpgt>
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	f43f af77 	beq.w	800a4b6 <_strtod_l+0x9ee>
 800a5c8:	e4dc      	b.n	8009f84 <_strtod_l+0x4bc>
 800a5ca:	bf00      	nop
 800a5cc:	f3af 8000 	nop.w
 800a5d0:	94a03595 	.word	0x94a03595
 800a5d4:	3fdfffff 	.word	0x3fdfffff
 800a5d8:	35afe535 	.word	0x35afe535
 800a5dc:	3fe00000 	.word	0x3fe00000
 800a5e0:	000fffff 	.word	0x000fffff
 800a5e4:	7ff00000 	.word	0x7ff00000
 800a5e8:	7fefffff 	.word	0x7fefffff
 800a5ec:	39500000 	.word	0x39500000
 800a5f0:	3ff00000 	.word	0x3ff00000
 800a5f4:	7fe00000 	.word	0x7fe00000
 800a5f8:	7c9fffff 	.word	0x7c9fffff
 800a5fc:	3fe00000 	.word	0x3fe00000
 800a600:	bff00000 	.word	0xbff00000
 800a604:	9b05      	ldr	r3, [sp, #20]
 800a606:	b313      	cbz	r3, 800a64e <_strtod_l+0xb86>
 800a608:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a60a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a60e:	d81e      	bhi.n	800a64e <_strtod_l+0xb86>
 800a610:	a325      	add	r3, pc, #148	; (adr r3, 800a6a8 <_strtod_l+0xbe0>)
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	4620      	mov	r0, r4
 800a618:	4629      	mov	r1, r5
 800a61a:	f7f6 f9d5 	bl	80009c8 <__aeabi_dcmple>
 800a61e:	b190      	cbz	r0, 800a646 <_strtod_l+0xb7e>
 800a620:	4629      	mov	r1, r5
 800a622:	4620      	mov	r0, r4
 800a624:	f7f6 fa2c 	bl	8000a80 <__aeabi_d2uiz>
 800a628:	2800      	cmp	r0, #0
 800a62a:	bf08      	it	eq
 800a62c:	2001      	moveq	r0, #1
 800a62e:	f7f5 fed9 	bl	80003e4 <__aeabi_ui2d>
 800a632:	9b08      	ldr	r3, [sp, #32]
 800a634:	4604      	mov	r4, r0
 800a636:	460d      	mov	r5, r1
 800a638:	b9d3      	cbnz	r3, 800a670 <_strtod_l+0xba8>
 800a63a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a63e:	9012      	str	r0, [sp, #72]	; 0x48
 800a640:	9313      	str	r3, [sp, #76]	; 0x4c
 800a642:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a646:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a648:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a64c:	1a9f      	subs	r7, r3, r2
 800a64e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a652:	f002 feb9 	bl	800d3c8 <__ulp>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4630      	mov	r0, r6
 800a65c:	4639      	mov	r1, r7
 800a65e:	f7f5 ff37 	bl	80004d0 <__aeabi_dmul>
 800a662:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a666:	f7f5 fd81 	bl	800016c <__adddf3>
 800a66a:	4682      	mov	sl, r0
 800a66c:	468b      	mov	fp, r1
 800a66e:	e775      	b.n	800a55c <_strtod_l+0xa94>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a678:	e7e3      	b.n	800a642 <_strtod_l+0xb7a>
 800a67a:	a30d      	add	r3, pc, #52	; (adr r3, 800a6b0 <_strtod_l+0xbe8>)
 800a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a680:	f7f6 f998 	bl	80009b4 <__aeabi_dcmplt>
 800a684:	e79d      	b.n	800a5c2 <_strtod_l+0xafa>
 800a686:	2300      	movs	r3, #0
 800a688:	9309      	str	r3, [sp, #36]	; 0x24
 800a68a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a68c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a68e:	6013      	str	r3, [r2, #0]
 800a690:	f7ff ba5e 	b.w	8009b50 <_strtod_l+0x88>
 800a694:	2b65      	cmp	r3, #101	; 0x65
 800a696:	f04f 0200 	mov.w	r2, #0
 800a69a:	f43f abae 	beq.w	8009dfa <_strtod_l+0x332>
 800a69e:	4615      	mov	r5, r2
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	f7ff bacd 	b.w	8009c40 <_strtod_l+0x178>
 800a6a6:	bf00      	nop
 800a6a8:	ffc00000 	.word	0xffc00000
 800a6ac:	41dfffff 	.word	0x41dfffff
 800a6b0:	94a03595 	.word	0x94a03595
 800a6b4:	3fcfffff 	.word	0x3fcfffff

0800a6b8 <strtod>:
 800a6b8:	4b06      	ldr	r3, [pc, #24]	; (800a6d4 <strtod+0x1c>)
 800a6ba:	b410      	push	{r4}
 800a6bc:	681c      	ldr	r4, [r3, #0]
 800a6be:	4a06      	ldr	r2, [pc, #24]	; (800a6d8 <strtod+0x20>)
 800a6c0:	6a23      	ldr	r3, [r4, #32]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	bf08      	it	eq
 800a6c6:	4613      	moveq	r3, r2
 800a6c8:	460a      	mov	r2, r1
 800a6ca:	4601      	mov	r1, r0
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	bc10      	pop	{r4}
 800a6d0:	f7ff b9fa 	b.w	8009ac8 <_strtod_l>
 800a6d4:	20000198 	.word	0x20000198
 800a6d8:	2000002c 	.word	0x2000002c

0800a6dc <_svfprintf_r>:
 800a6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e0:	b0bf      	sub	sp, #252	; 0xfc
 800a6e2:	4689      	mov	r9, r1
 800a6e4:	4615      	mov	r5, r2
 800a6e6:	461f      	mov	r7, r3
 800a6e8:	4682      	mov	sl, r0
 800a6ea:	f002 f955 	bl	800c998 <_localeconv_r>
 800a6ee:	6803      	ldr	r3, [r0, #0]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	9311      	str	r3, [sp, #68]	; 0x44
 800a6f4:	f7f5 fd2c 	bl	8000150 <strlen>
 800a6f8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a6fc:	900a      	str	r0, [sp, #40]	; 0x28
 800a6fe:	061b      	lsls	r3, r3, #24
 800a700:	d518      	bpl.n	800a734 <_svfprintf_r+0x58>
 800a702:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a706:	b9ab      	cbnz	r3, 800a734 <_svfprintf_r+0x58>
 800a708:	2140      	movs	r1, #64	; 0x40
 800a70a:	4650      	mov	r0, sl
 800a70c:	f002 f95c 	bl	800c9c8 <_malloc_r>
 800a710:	f8c9 0000 	str.w	r0, [r9]
 800a714:	f8c9 0010 	str.w	r0, [r9, #16]
 800a718:	b948      	cbnz	r0, 800a72e <_svfprintf_r+0x52>
 800a71a:	230c      	movs	r3, #12
 800a71c:	f8ca 3000 	str.w	r3, [sl]
 800a720:	f04f 33ff 	mov.w	r3, #4294967295
 800a724:	930b      	str	r3, [sp, #44]	; 0x2c
 800a726:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a728:	b03f      	add	sp, #252	; 0xfc
 800a72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72e:	2340      	movs	r3, #64	; 0x40
 800a730:	f8c9 3014 	str.w	r3, [r9, #20]
 800a734:	2300      	movs	r3, #0
 800a736:	ac2e      	add	r4, sp, #184	; 0xb8
 800a738:	9421      	str	r4, [sp, #132]	; 0x84
 800a73a:	9323      	str	r3, [sp, #140]	; 0x8c
 800a73c:	9322      	str	r3, [sp, #136]	; 0x88
 800a73e:	9509      	str	r5, [sp, #36]	; 0x24
 800a740:	9307      	str	r3, [sp, #28]
 800a742:	930d      	str	r3, [sp, #52]	; 0x34
 800a744:	930e      	str	r3, [sp, #56]	; 0x38
 800a746:	9315      	str	r3, [sp, #84]	; 0x54
 800a748:	9314      	str	r3, [sp, #80]	; 0x50
 800a74a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a74c:	9312      	str	r3, [sp, #72]	; 0x48
 800a74e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a750:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a752:	462b      	mov	r3, r5
 800a754:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a758:	b112      	cbz	r2, 800a760 <_svfprintf_r+0x84>
 800a75a:	2a25      	cmp	r2, #37	; 0x25
 800a75c:	f040 8083 	bne.w	800a866 <_svfprintf_r+0x18a>
 800a760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a762:	1aee      	subs	r6, r5, r3
 800a764:	d00d      	beq.n	800a782 <_svfprintf_r+0xa6>
 800a766:	e884 0048 	stmia.w	r4, {r3, r6}
 800a76a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a76c:	4433      	add	r3, r6
 800a76e:	9323      	str	r3, [sp, #140]	; 0x8c
 800a770:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a772:	3301      	adds	r3, #1
 800a774:	2b07      	cmp	r3, #7
 800a776:	9322      	str	r3, [sp, #136]	; 0x88
 800a778:	dc77      	bgt.n	800a86a <_svfprintf_r+0x18e>
 800a77a:	3408      	adds	r4, #8
 800a77c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a77e:	4433      	add	r3, r6
 800a780:	930b      	str	r3, [sp, #44]	; 0x2c
 800a782:	782b      	ldrb	r3, [r5, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 8725 	beq.w	800b5d4 <_svfprintf_r+0xef8>
 800a78a:	2300      	movs	r3, #0
 800a78c:	1c69      	adds	r1, r5, #1
 800a78e:	461a      	mov	r2, r3
 800a790:	f04f 3bff 	mov.w	fp, #4294967295
 800a794:	461d      	mov	r5, r3
 800a796:	200a      	movs	r0, #10
 800a798:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800a79c:	930c      	str	r3, [sp, #48]	; 0x30
 800a79e:	1c4e      	adds	r6, r1, #1
 800a7a0:	7809      	ldrb	r1, [r1, #0]
 800a7a2:	9609      	str	r6, [sp, #36]	; 0x24
 800a7a4:	9106      	str	r1, [sp, #24]
 800a7a6:	9906      	ldr	r1, [sp, #24]
 800a7a8:	3920      	subs	r1, #32
 800a7aa:	2958      	cmp	r1, #88	; 0x58
 800a7ac:	f200 8414 	bhi.w	800afd8 <_svfprintf_r+0x8fc>
 800a7b0:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a7b4:	041200a5 	.word	0x041200a5
 800a7b8:	00aa0412 	.word	0x00aa0412
 800a7bc:	04120412 	.word	0x04120412
 800a7c0:	04120412 	.word	0x04120412
 800a7c4:	04120412 	.word	0x04120412
 800a7c8:	006500ad 	.word	0x006500ad
 800a7cc:	00b50412 	.word	0x00b50412
 800a7d0:	041200b8 	.word	0x041200b8
 800a7d4:	00d800d5 	.word	0x00d800d5
 800a7d8:	00d800d8 	.word	0x00d800d8
 800a7dc:	00d800d8 	.word	0x00d800d8
 800a7e0:	00d800d8 	.word	0x00d800d8
 800a7e4:	00d800d8 	.word	0x00d800d8
 800a7e8:	04120412 	.word	0x04120412
 800a7ec:	04120412 	.word	0x04120412
 800a7f0:	04120412 	.word	0x04120412
 800a7f4:	04120412 	.word	0x04120412
 800a7f8:	04120412 	.word	0x04120412
 800a7fc:	0122010c 	.word	0x0122010c
 800a800:	01220412 	.word	0x01220412
 800a804:	04120412 	.word	0x04120412
 800a808:	04120412 	.word	0x04120412
 800a80c:	041200eb 	.word	0x041200eb
 800a810:	033c0412 	.word	0x033c0412
 800a814:	04120412 	.word	0x04120412
 800a818:	04120412 	.word	0x04120412
 800a81c:	03a40412 	.word	0x03a40412
 800a820:	04120412 	.word	0x04120412
 800a824:	04120085 	.word	0x04120085
 800a828:	04120412 	.word	0x04120412
 800a82c:	04120412 	.word	0x04120412
 800a830:	04120412 	.word	0x04120412
 800a834:	04120412 	.word	0x04120412
 800a838:	00fe0412 	.word	0x00fe0412
 800a83c:	0122006b 	.word	0x0122006b
 800a840:	01220122 	.word	0x01220122
 800a844:	006b00ee 	.word	0x006b00ee
 800a848:	04120412 	.word	0x04120412
 800a84c:	041200f1 	.word	0x041200f1
 800a850:	033e031e 	.word	0x033e031e
 800a854:	00f80372 	.word	0x00f80372
 800a858:	03830412 	.word	0x03830412
 800a85c:	03a60412 	.word	0x03a60412
 800a860:	04120412 	.word	0x04120412
 800a864:	03be      	.short	0x03be
 800a866:	461d      	mov	r5, r3
 800a868:	e773      	b.n	800a752 <_svfprintf_r+0x76>
 800a86a:	aa21      	add	r2, sp, #132	; 0x84
 800a86c:	4649      	mov	r1, r9
 800a86e:	4650      	mov	r0, sl
 800a870:	f003 f87a 	bl	800d968 <__ssprint_r>
 800a874:	2800      	cmp	r0, #0
 800a876:	f040 868e 	bne.w	800b596 <_svfprintf_r+0xeba>
 800a87a:	ac2e      	add	r4, sp, #184	; 0xb8
 800a87c:	e77e      	b.n	800a77c <_svfprintf_r+0xa0>
 800a87e:	2301      	movs	r3, #1
 800a880:	222b      	movs	r2, #43	; 0x2b
 800a882:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a884:	e78b      	b.n	800a79e <_svfprintf_r+0xc2>
 800a886:	460f      	mov	r7, r1
 800a888:	e7fb      	b.n	800a882 <_svfprintf_r+0x1a6>
 800a88a:	b10b      	cbz	r3, 800a890 <_svfprintf_r+0x1b4>
 800a88c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800a890:	06ae      	lsls	r6, r5, #26
 800a892:	f140 80a1 	bpl.w	800a9d8 <_svfprintf_r+0x2fc>
 800a896:	3707      	adds	r7, #7
 800a898:	f027 0707 	bic.w	r7, r7, #7
 800a89c:	f107 0308 	add.w	r3, r7, #8
 800a8a0:	9308      	str	r3, [sp, #32]
 800a8a2:	e9d7 6700 	ldrd	r6, r7, [r7]
 800a8a6:	2e00      	cmp	r6, #0
 800a8a8:	f177 0300 	sbcs.w	r3, r7, #0
 800a8ac:	da05      	bge.n	800a8ba <_svfprintf_r+0x1de>
 800a8ae:	232d      	movs	r3, #45	; 0x2d
 800a8b0:	4276      	negs	r6, r6
 800a8b2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800a8b6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e2c7      	b.n	800ae4e <_svfprintf_r+0x772>
 800a8be:	b10b      	cbz	r3, 800a8c4 <_svfprintf_r+0x1e8>
 800a8c0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800a8c4:	4ba0      	ldr	r3, [pc, #640]	; (800ab48 <_svfprintf_r+0x46c>)
 800a8c6:	9315      	str	r3, [sp, #84]	; 0x54
 800a8c8:	06ab      	lsls	r3, r5, #26
 800a8ca:	f140 8336 	bpl.w	800af3a <_svfprintf_r+0x85e>
 800a8ce:	3707      	adds	r7, #7
 800a8d0:	f027 0707 	bic.w	r7, r7, #7
 800a8d4:	f107 0308 	add.w	r3, r7, #8
 800a8d8:	9308      	str	r3, [sp, #32]
 800a8da:	e9d7 6700 	ldrd	r6, r7, [r7]
 800a8de:	07e8      	lsls	r0, r5, #31
 800a8e0:	d50b      	bpl.n	800a8fa <_svfprintf_r+0x21e>
 800a8e2:	ea56 0307 	orrs.w	r3, r6, r7
 800a8e6:	d008      	beq.n	800a8fa <_svfprintf_r+0x21e>
 800a8e8:	2330      	movs	r3, #48	; 0x30
 800a8ea:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800a8ee:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800a8f2:	f045 0502 	orr.w	r5, r5, #2
 800a8f6:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	e2a4      	b.n	800ae48 <_svfprintf_r+0x76c>
 800a8fe:	2a00      	cmp	r2, #0
 800a900:	d1bf      	bne.n	800a882 <_svfprintf_r+0x1a6>
 800a902:	2301      	movs	r3, #1
 800a904:	2220      	movs	r2, #32
 800a906:	e7bc      	b.n	800a882 <_svfprintf_r+0x1a6>
 800a908:	f045 0501 	orr.w	r5, r5, #1
 800a90c:	e7b9      	b.n	800a882 <_svfprintf_r+0x1a6>
 800a90e:	683e      	ldr	r6, [r7, #0]
 800a910:	1d39      	adds	r1, r7, #4
 800a912:	2e00      	cmp	r6, #0
 800a914:	960c      	str	r6, [sp, #48]	; 0x30
 800a916:	dab6      	bge.n	800a886 <_svfprintf_r+0x1aa>
 800a918:	460f      	mov	r7, r1
 800a91a:	4276      	negs	r6, r6
 800a91c:	960c      	str	r6, [sp, #48]	; 0x30
 800a91e:	f045 0504 	orr.w	r5, r5, #4
 800a922:	e7ae      	b.n	800a882 <_svfprintf_r+0x1a6>
 800a924:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a926:	1c4e      	adds	r6, r1, #1
 800a928:	7809      	ldrb	r1, [r1, #0]
 800a92a:	292a      	cmp	r1, #42	; 0x2a
 800a92c:	9106      	str	r1, [sp, #24]
 800a92e:	d010      	beq.n	800a952 <_svfprintf_r+0x276>
 800a930:	f04f 0b00 	mov.w	fp, #0
 800a934:	9609      	str	r6, [sp, #36]	; 0x24
 800a936:	9906      	ldr	r1, [sp, #24]
 800a938:	3930      	subs	r1, #48	; 0x30
 800a93a:	2909      	cmp	r1, #9
 800a93c:	f63f af33 	bhi.w	800a7a6 <_svfprintf_r+0xca>
 800a940:	fb00 1b0b 	mla	fp, r0, fp, r1
 800a944:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a946:	460e      	mov	r6, r1
 800a948:	f816 1b01 	ldrb.w	r1, [r6], #1
 800a94c:	9106      	str	r1, [sp, #24]
 800a94e:	9609      	str	r6, [sp, #36]	; 0x24
 800a950:	e7f1      	b.n	800a936 <_svfprintf_r+0x25a>
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	9609      	str	r6, [sp, #36]	; 0x24
 800a956:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 800a95a:	3704      	adds	r7, #4
 800a95c:	e791      	b.n	800a882 <_svfprintf_r+0x1a6>
 800a95e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800a962:	e78e      	b.n	800a882 <_svfprintf_r+0x1a6>
 800a964:	2100      	movs	r1, #0
 800a966:	910c      	str	r1, [sp, #48]	; 0x30
 800a968:	9906      	ldr	r1, [sp, #24]
 800a96a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a96c:	3930      	subs	r1, #48	; 0x30
 800a96e:	fb00 1106 	mla	r1, r0, r6, r1
 800a972:	910c      	str	r1, [sp, #48]	; 0x30
 800a974:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a976:	460e      	mov	r6, r1
 800a978:	f816 1b01 	ldrb.w	r1, [r6], #1
 800a97c:	9106      	str	r1, [sp, #24]
 800a97e:	9906      	ldr	r1, [sp, #24]
 800a980:	9609      	str	r6, [sp, #36]	; 0x24
 800a982:	3930      	subs	r1, #48	; 0x30
 800a984:	2909      	cmp	r1, #9
 800a986:	d9ef      	bls.n	800a968 <_svfprintf_r+0x28c>
 800a988:	e70d      	b.n	800a7a6 <_svfprintf_r+0xca>
 800a98a:	f045 0508 	orr.w	r5, r5, #8
 800a98e:	e778      	b.n	800a882 <_svfprintf_r+0x1a6>
 800a990:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800a994:	e775      	b.n	800a882 <_svfprintf_r+0x1a6>
 800a996:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a998:	7809      	ldrb	r1, [r1, #0]
 800a99a:	296c      	cmp	r1, #108	; 0x6c
 800a99c:	d105      	bne.n	800a9aa <_svfprintf_r+0x2ce>
 800a99e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9a0:	3101      	adds	r1, #1
 800a9a2:	9109      	str	r1, [sp, #36]	; 0x24
 800a9a4:	f045 0520 	orr.w	r5, r5, #32
 800a9a8:	e76b      	b.n	800a882 <_svfprintf_r+0x1a6>
 800a9aa:	f045 0510 	orr.w	r5, r5, #16
 800a9ae:	e768      	b.n	800a882 <_svfprintf_r+0x1a6>
 800a9b0:	2600      	movs	r6, #0
 800a9b2:	1d3b      	adds	r3, r7, #4
 800a9b4:	9308      	str	r3, [sp, #32]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800a9bc:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800a9c0:	f04f 0b01 	mov.w	fp, #1
 800a9c4:	4637      	mov	r7, r6
 800a9c6:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 800a9ca:	e11c      	b.n	800ac06 <_svfprintf_r+0x52a>
 800a9cc:	b10b      	cbz	r3, 800a9d2 <_svfprintf_r+0x2f6>
 800a9ce:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800a9d2:	f045 0510 	orr.w	r5, r5, #16
 800a9d6:	e75b      	b.n	800a890 <_svfprintf_r+0x1b4>
 800a9d8:	f015 0f10 	tst.w	r5, #16
 800a9dc:	f107 0304 	add.w	r3, r7, #4
 800a9e0:	d003      	beq.n	800a9ea <_svfprintf_r+0x30e>
 800a9e2:	683e      	ldr	r6, [r7, #0]
 800a9e4:	9308      	str	r3, [sp, #32]
 800a9e6:	17f7      	asrs	r7, r6, #31
 800a9e8:	e75d      	b.n	800a8a6 <_svfprintf_r+0x1ca>
 800a9ea:	683e      	ldr	r6, [r7, #0]
 800a9ec:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a9f0:	9308      	str	r3, [sp, #32]
 800a9f2:	bf18      	it	ne
 800a9f4:	b236      	sxthne	r6, r6
 800a9f6:	e7f6      	b.n	800a9e6 <_svfprintf_r+0x30a>
 800a9f8:	b10b      	cbz	r3, 800a9fe <_svfprintf_r+0x322>
 800a9fa:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800a9fe:	3707      	adds	r7, #7
 800aa00:	f027 0707 	bic.w	r7, r7, #7
 800aa04:	f107 0308 	add.w	r3, r7, #8
 800aa08:	9308      	str	r3, [sp, #32]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa10:	930d      	str	r3, [sp, #52]	; 0x34
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800aa16:	930e      	str	r3, [sp, #56]	; 0x38
 800aa18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800aa20:	4631      	mov	r1, r6
 800aa22:	4b4a      	ldr	r3, [pc, #296]	; (800ab4c <_svfprintf_r+0x470>)
 800aa24:	f7f5 ffee 	bl	8000a04 <__aeabi_dcmpun>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	f040 85dc 	bne.w	800b5e6 <_svfprintf_r+0xf0a>
 800aa2e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa32:	4b46      	ldr	r3, [pc, #280]	; (800ab4c <_svfprintf_r+0x470>)
 800aa34:	4638      	mov	r0, r7
 800aa36:	4631      	mov	r1, r6
 800aa38:	f7f5 ffc6 	bl	80009c8 <__aeabi_dcmple>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f040 85d2 	bne.w	800b5e6 <_svfprintf_r+0xf0a>
 800aa42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa46:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aa48:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa4a:	f7f5 ffb3 	bl	80009b4 <__aeabi_dcmplt>
 800aa4e:	b110      	cbz	r0, 800aa56 <_svfprintf_r+0x37a>
 800aa50:	232d      	movs	r3, #45	; 0x2d
 800aa52:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800aa56:	4b3e      	ldr	r3, [pc, #248]	; (800ab50 <_svfprintf_r+0x474>)
 800aa58:	4a3e      	ldr	r2, [pc, #248]	; (800ab54 <_svfprintf_r+0x478>)
 800aa5a:	9906      	ldr	r1, [sp, #24]
 800aa5c:	f04f 0b03 	mov.w	fp, #3
 800aa60:	2947      	cmp	r1, #71	; 0x47
 800aa62:	bfcc      	ite	gt
 800aa64:	4690      	movgt	r8, r2
 800aa66:	4698      	movle	r8, r3
 800aa68:	2600      	movs	r6, #0
 800aa6a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800aa6e:	4637      	mov	r7, r6
 800aa70:	e0c9      	b.n	800ac06 <_svfprintf_r+0x52a>
 800aa72:	f1bb 3fff 	cmp.w	fp, #4294967295
 800aa76:	d026      	beq.n	800aac6 <_svfprintf_r+0x3ea>
 800aa78:	9b06      	ldr	r3, [sp, #24]
 800aa7a:	f023 0320 	bic.w	r3, r3, #32
 800aa7e:	2b47      	cmp	r3, #71	; 0x47
 800aa80:	d104      	bne.n	800aa8c <_svfprintf_r+0x3b0>
 800aa82:	f1bb 0f00 	cmp.w	fp, #0
 800aa86:	bf08      	it	eq
 800aa88:	f04f 0b01 	moveq.w	fp, #1
 800aa8c:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800aa90:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa94:	1e1f      	subs	r7, r3, #0
 800aa96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa98:	bfa8      	it	ge
 800aa9a:	9710      	strge	r7, [sp, #64]	; 0x40
 800aa9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa9e:	bfbd      	ittte	lt
 800aaa0:	463b      	movlt	r3, r7
 800aaa2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800aaa6:	9310      	strlt	r3, [sp, #64]	; 0x40
 800aaa8:	2300      	movge	r3, #0
 800aaaa:	bfb8      	it	lt
 800aaac:	232d      	movlt	r3, #45	; 0x2d
 800aaae:	9316      	str	r3, [sp, #88]	; 0x58
 800aab0:	9b06      	ldr	r3, [sp, #24]
 800aab2:	f023 0720 	bic.w	r7, r3, #32
 800aab6:	2f46      	cmp	r7, #70	; 0x46
 800aab8:	d008      	beq.n	800aacc <_svfprintf_r+0x3f0>
 800aaba:	2f45      	cmp	r7, #69	; 0x45
 800aabc:	d142      	bne.n	800ab44 <_svfprintf_r+0x468>
 800aabe:	f10b 0601 	add.w	r6, fp, #1
 800aac2:	2302      	movs	r3, #2
 800aac4:	e004      	b.n	800aad0 <_svfprintf_r+0x3f4>
 800aac6:	f04f 0b06 	mov.w	fp, #6
 800aaca:	e7df      	b.n	800aa8c <_svfprintf_r+0x3b0>
 800aacc:	465e      	mov	r6, fp
 800aace:	2303      	movs	r3, #3
 800aad0:	aa1f      	add	r2, sp, #124	; 0x7c
 800aad2:	9204      	str	r2, [sp, #16]
 800aad4:	aa1c      	add	r2, sp, #112	; 0x70
 800aad6:	9203      	str	r2, [sp, #12]
 800aad8:	aa1b      	add	r2, sp, #108	; 0x6c
 800aada:	9202      	str	r2, [sp, #8]
 800aadc:	e88d 0048 	stmia.w	sp, {r3, r6}
 800aae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aae2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aae4:	4650      	mov	r0, sl
 800aae6:	f000 fe63 	bl	800b7b0 <_dtoa_r>
 800aaea:	2f47      	cmp	r7, #71	; 0x47
 800aaec:	4680      	mov	r8, r0
 800aaee:	d102      	bne.n	800aaf6 <_svfprintf_r+0x41a>
 800aaf0:	07e8      	lsls	r0, r5, #31
 800aaf2:	f140 8585 	bpl.w	800b600 <_svfprintf_r+0xf24>
 800aaf6:	eb08 0306 	add.w	r3, r8, r6
 800aafa:	2f46      	cmp	r7, #70	; 0x46
 800aafc:	9307      	str	r3, [sp, #28]
 800aafe:	d111      	bne.n	800ab24 <_svfprintf_r+0x448>
 800ab00:	f898 3000 	ldrb.w	r3, [r8]
 800ab04:	2b30      	cmp	r3, #48	; 0x30
 800ab06:	d109      	bne.n	800ab1c <_svfprintf_r+0x440>
 800ab08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab0c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ab0e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ab10:	f7f5 ff46 	bl	80009a0 <__aeabi_dcmpeq>
 800ab14:	b910      	cbnz	r0, 800ab1c <_svfprintf_r+0x440>
 800ab16:	f1c6 0601 	rsb	r6, r6, #1
 800ab1a:	961b      	str	r6, [sp, #108]	; 0x6c
 800ab1c:	9a07      	ldr	r2, [sp, #28]
 800ab1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab20:	441a      	add	r2, r3
 800ab22:	9207      	str	r2, [sp, #28]
 800ab24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ab2a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ab2c:	f7f5 ff38 	bl	80009a0 <__aeabi_dcmpeq>
 800ab30:	b990      	cbnz	r0, 800ab58 <_svfprintf_r+0x47c>
 800ab32:	2230      	movs	r2, #48	; 0x30
 800ab34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab36:	9907      	ldr	r1, [sp, #28]
 800ab38:	4299      	cmp	r1, r3
 800ab3a:	d90f      	bls.n	800ab5c <_svfprintf_r+0x480>
 800ab3c:	1c59      	adds	r1, r3, #1
 800ab3e:	911f      	str	r1, [sp, #124]	; 0x7c
 800ab40:	701a      	strb	r2, [r3, #0]
 800ab42:	e7f7      	b.n	800ab34 <_svfprintf_r+0x458>
 800ab44:	465e      	mov	r6, fp
 800ab46:	e7bc      	b.n	800aac2 <_svfprintf_r+0x3e6>
 800ab48:	0801157c 	.word	0x0801157c
 800ab4c:	7fefffff 	.word	0x7fefffff
 800ab50:	08011570 	.word	0x08011570
 800ab54:	0801183f 	.word	0x0801183f
 800ab58:	9b07      	ldr	r3, [sp, #28]
 800ab5a:	931f      	str	r3, [sp, #124]	; 0x7c
 800ab5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab5e:	2f47      	cmp	r7, #71	; 0x47
 800ab60:	eba3 0308 	sub.w	r3, r3, r8
 800ab64:	9307      	str	r3, [sp, #28]
 800ab66:	f040 8100 	bne.w	800ad6a <_svfprintf_r+0x68e>
 800ab6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab6c:	1cd9      	adds	r1, r3, #3
 800ab6e:	db02      	blt.n	800ab76 <_svfprintf_r+0x49a>
 800ab70:	459b      	cmp	fp, r3
 800ab72:	f280 8126 	bge.w	800adc2 <_svfprintf_r+0x6e6>
 800ab76:	9b06      	ldr	r3, [sp, #24]
 800ab78:	3b02      	subs	r3, #2
 800ab7a:	9306      	str	r3, [sp, #24]
 800ab7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ab7e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ab82:	1e53      	subs	r3, r2, #1
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	bfa8      	it	ge
 800ab88:	222b      	movge	r2, #43	; 0x2b
 800ab8a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab8c:	bfbc      	itt	lt
 800ab8e:	f1c2 0301 	rsblt	r3, r2, #1
 800ab92:	222d      	movlt	r2, #45	; 0x2d
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 800ab9a:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 800ab9e:	f340 8100 	ble.w	800ada2 <_svfprintf_r+0x6c6>
 800aba2:	260a      	movs	r6, #10
 800aba4:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 800aba8:	fb93 f0f6 	sdiv	r0, r3, r6
 800abac:	fb06 3310 	mls	r3, r6, r0, r3
 800abb0:	2809      	cmp	r0, #9
 800abb2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800abb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800abba:	f102 31ff 	add.w	r1, r2, #4294967295
 800abbe:	4603      	mov	r3, r0
 800abc0:	f300 80e8 	bgt.w	800ad94 <_svfprintf_r+0x6b8>
 800abc4:	3330      	adds	r3, #48	; 0x30
 800abc6:	f801 3c01 	strb.w	r3, [r1, #-1]
 800abca:	3a02      	subs	r2, #2
 800abcc:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 800abd0:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 800abd4:	4282      	cmp	r2, r0
 800abd6:	4619      	mov	r1, r3
 800abd8:	f0c0 80de 	bcc.w	800ad98 <_svfprintf_r+0x6bc>
 800abdc:	9a07      	ldr	r2, [sp, #28]
 800abde:	ab1d      	add	r3, sp, #116	; 0x74
 800abe0:	1acb      	subs	r3, r1, r3
 800abe2:	2a01      	cmp	r2, #1
 800abe4:	9314      	str	r3, [sp, #80]	; 0x50
 800abe6:	eb03 0b02 	add.w	fp, r3, r2
 800abea:	dc02      	bgt.n	800abf2 <_svfprintf_r+0x516>
 800abec:	f015 0701 	ands.w	r7, r5, #1
 800abf0:	d002      	beq.n	800abf8 <_svfprintf_r+0x51c>
 800abf2:	2700      	movs	r7, #0
 800abf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf6:	449b      	add	fp, r3
 800abf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800abfa:	b113      	cbz	r3, 800ac02 <_svfprintf_r+0x526>
 800abfc:	232d      	movs	r3, #45	; 0x2d
 800abfe:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800ac02:	2600      	movs	r6, #0
 800ac04:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800ac06:	455e      	cmp	r6, fp
 800ac08:	4633      	mov	r3, r6
 800ac0a:	bfb8      	it	lt
 800ac0c:	465b      	movlt	r3, fp
 800ac0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac10:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800ac14:	b113      	cbz	r3, 800ac1c <_svfprintf_r+0x540>
 800ac16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac18:	3301      	adds	r3, #1
 800ac1a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac1c:	f015 0302 	ands.w	r3, r5, #2
 800ac20:	9316      	str	r3, [sp, #88]	; 0x58
 800ac22:	bf1e      	ittt	ne
 800ac24:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 800ac26:	3302      	addne	r3, #2
 800ac28:	930f      	strne	r3, [sp, #60]	; 0x3c
 800ac2a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800ac2e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac30:	d118      	bne.n	800ac64 <_svfprintf_r+0x588>
 800ac32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac36:	1a9b      	subs	r3, r3, r2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	9310      	str	r3, [sp, #64]	; 0x40
 800ac3c:	dd12      	ble.n	800ac64 <_svfprintf_r+0x588>
 800ac3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac40:	2b10      	cmp	r3, #16
 800ac42:	4bab      	ldr	r3, [pc, #684]	; (800aef0 <_svfprintf_r+0x814>)
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	f300 81d9 	bgt.w	800affc <_svfprintf_r+0x920>
 800ac4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac4e:	6063      	str	r3, [r4, #4]
 800ac50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac52:	4413      	add	r3, r2
 800ac54:	9323      	str	r3, [sp, #140]	; 0x8c
 800ac56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac58:	3301      	adds	r3, #1
 800ac5a:	2b07      	cmp	r3, #7
 800ac5c:	9322      	str	r3, [sp, #136]	; 0x88
 800ac5e:	f300 81e6 	bgt.w	800b02e <_svfprintf_r+0x952>
 800ac62:	3408      	adds	r4, #8
 800ac64:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800ac68:	b173      	cbz	r3, 800ac88 <_svfprintf_r+0x5ac>
 800ac6a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800ac6e:	6023      	str	r3, [r4, #0]
 800ac70:	2301      	movs	r3, #1
 800ac72:	6063      	str	r3, [r4, #4]
 800ac74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac76:	3301      	adds	r3, #1
 800ac78:	9323      	str	r3, [sp, #140]	; 0x8c
 800ac7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	2b07      	cmp	r3, #7
 800ac80:	9322      	str	r3, [sp, #136]	; 0x88
 800ac82:	f300 81de 	bgt.w	800b042 <_svfprintf_r+0x966>
 800ac86:	3408      	adds	r4, #8
 800ac88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac8a:	b16b      	cbz	r3, 800aca8 <_svfprintf_r+0x5cc>
 800ac8c:	ab1a      	add	r3, sp, #104	; 0x68
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	2302      	movs	r3, #2
 800ac92:	6063      	str	r3, [r4, #4]
 800ac94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac96:	3302      	adds	r3, #2
 800ac98:	9323      	str	r3, [sp, #140]	; 0x8c
 800ac9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	2b07      	cmp	r3, #7
 800aca0:	9322      	str	r3, [sp, #136]	; 0x88
 800aca2:	f300 81d8 	bgt.w	800b056 <_svfprintf_r+0x97a>
 800aca6:	3408      	adds	r4, #8
 800aca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acaa:	2b80      	cmp	r3, #128	; 0x80
 800acac:	d118      	bne.n	800ace0 <_svfprintf_r+0x604>
 800acae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acb2:	1a9b      	subs	r3, r3, r2
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	9310      	str	r3, [sp, #64]	; 0x40
 800acb8:	dd12      	ble.n	800ace0 <_svfprintf_r+0x604>
 800acba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acbc:	2b10      	cmp	r3, #16
 800acbe:	4b8d      	ldr	r3, [pc, #564]	; (800aef4 <_svfprintf_r+0x818>)
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	f300 81d2 	bgt.w	800b06a <_svfprintf_r+0x98e>
 800acc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800acca:	6063      	str	r3, [r4, #4]
 800accc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800acce:	4413      	add	r3, r2
 800acd0:	9323      	str	r3, [sp, #140]	; 0x8c
 800acd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acd4:	3301      	adds	r3, #1
 800acd6:	2b07      	cmp	r3, #7
 800acd8:	9322      	str	r3, [sp, #136]	; 0x88
 800acda:	f300 81df 	bgt.w	800b09c <_svfprintf_r+0x9c0>
 800acde:	3408      	adds	r4, #8
 800ace0:	eba6 060b 	sub.w	r6, r6, fp
 800ace4:	2e00      	cmp	r6, #0
 800ace6:	dd0f      	ble.n	800ad08 <_svfprintf_r+0x62c>
 800ace8:	4b82      	ldr	r3, [pc, #520]	; (800aef4 <_svfprintf_r+0x818>)
 800acea:	2e10      	cmp	r6, #16
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	f300 81df 	bgt.w	800b0b0 <_svfprintf_r+0x9d4>
 800acf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acf4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800acf6:	3301      	adds	r3, #1
 800acf8:	6066      	str	r6, [r4, #4]
 800acfa:	2b07      	cmp	r3, #7
 800acfc:	4406      	add	r6, r0
 800acfe:	9623      	str	r6, [sp, #140]	; 0x8c
 800ad00:	9322      	str	r3, [sp, #136]	; 0x88
 800ad02:	f300 81ec 	bgt.w	800b0de <_svfprintf_r+0xa02>
 800ad06:	3408      	adds	r4, #8
 800ad08:	05eb      	lsls	r3, r5, #23
 800ad0a:	f100 81f2 	bmi.w	800b0f2 <_svfprintf_r+0xa16>
 800ad0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad10:	e884 0900 	stmia.w	r4, {r8, fp}
 800ad14:	445b      	add	r3, fp
 800ad16:	9323      	str	r3, [sp, #140]	; 0x8c
 800ad18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	2b07      	cmp	r3, #7
 800ad1e:	9322      	str	r3, [sp, #136]	; 0x88
 800ad20:	f340 8419 	ble.w	800b556 <_svfprintf_r+0xe7a>
 800ad24:	aa21      	add	r2, sp, #132	; 0x84
 800ad26:	4649      	mov	r1, r9
 800ad28:	4650      	mov	r0, sl
 800ad2a:	f002 fe1d 	bl	800d968 <__ssprint_r>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	f040 8431 	bne.w	800b596 <_svfprintf_r+0xeba>
 800ad34:	ac2e      	add	r4, sp, #184	; 0xb8
 800ad36:	076b      	lsls	r3, r5, #29
 800ad38:	f100 8410 	bmi.w	800b55c <_svfprintf_r+0xe80>
 800ad3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ad42:	428a      	cmp	r2, r1
 800ad44:	bfac      	ite	ge
 800ad46:	189b      	addge	r3, r3, r2
 800ad48:	185b      	addlt	r3, r3, r1
 800ad4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad4e:	b13b      	cbz	r3, 800ad60 <_svfprintf_r+0x684>
 800ad50:	aa21      	add	r2, sp, #132	; 0x84
 800ad52:	4649      	mov	r1, r9
 800ad54:	4650      	mov	r0, sl
 800ad56:	f002 fe07 	bl	800d968 <__ssprint_r>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	f040 841b 	bne.w	800b596 <_svfprintf_r+0xeba>
 800ad60:	2300      	movs	r3, #0
 800ad62:	9f08      	ldr	r7, [sp, #32]
 800ad64:	9322      	str	r3, [sp, #136]	; 0x88
 800ad66:	ac2e      	add	r4, sp, #184	; 0xb8
 800ad68:	e4f2      	b.n	800a750 <_svfprintf_r+0x74>
 800ad6a:	9b06      	ldr	r3, [sp, #24]
 800ad6c:	2b65      	cmp	r3, #101	; 0x65
 800ad6e:	f77f af05 	ble.w	800ab7c <_svfprintf_r+0x4a0>
 800ad72:	9b06      	ldr	r3, [sp, #24]
 800ad74:	2b66      	cmp	r3, #102	; 0x66
 800ad76:	d124      	bne.n	800adc2 <_svfprintf_r+0x6e6>
 800ad78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	dd19      	ble.n	800adb2 <_svfprintf_r+0x6d6>
 800ad7e:	f1bb 0f00 	cmp.w	fp, #0
 800ad82:	d101      	bne.n	800ad88 <_svfprintf_r+0x6ac>
 800ad84:	07ea      	lsls	r2, r5, #31
 800ad86:	d502      	bpl.n	800ad8e <_svfprintf_r+0x6b2>
 800ad88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad8a:	4413      	add	r3, r2
 800ad8c:	445b      	add	r3, fp
 800ad8e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ad90:	469b      	mov	fp, r3
 800ad92:	e731      	b.n	800abf8 <_svfprintf_r+0x51c>
 800ad94:	460a      	mov	r2, r1
 800ad96:	e707      	b.n	800aba8 <_svfprintf_r+0x4cc>
 800ad98:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ad9c:	f803 1b01 	strb.w	r1, [r3], #1
 800ada0:	e718      	b.n	800abd4 <_svfprintf_r+0x4f8>
 800ada2:	2230      	movs	r2, #48	; 0x30
 800ada4:	4413      	add	r3, r2
 800ada6:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800adaa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800adae:	a91e      	add	r1, sp, #120	; 0x78
 800adb0:	e714      	b.n	800abdc <_svfprintf_r+0x500>
 800adb2:	f1bb 0f00 	cmp.w	fp, #0
 800adb6:	d101      	bne.n	800adbc <_svfprintf_r+0x6e0>
 800adb8:	07eb      	lsls	r3, r5, #31
 800adba:	d515      	bpl.n	800ade8 <_svfprintf_r+0x70c>
 800adbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adbe:	3301      	adds	r3, #1
 800adc0:	e7e4      	b.n	800ad8c <_svfprintf_r+0x6b0>
 800adc2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800adc4:	9b07      	ldr	r3, [sp, #28]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	db06      	blt.n	800add8 <_svfprintf_r+0x6fc>
 800adca:	07ef      	lsls	r7, r5, #31
 800adcc:	d50e      	bpl.n	800adec <_svfprintf_r+0x710>
 800adce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800add0:	4413      	add	r3, r2
 800add2:	2267      	movs	r2, #103	; 0x67
 800add4:	9206      	str	r2, [sp, #24]
 800add6:	e7da      	b.n	800ad8e <_svfprintf_r+0x6b2>
 800add8:	9b07      	ldr	r3, [sp, #28]
 800adda:	990a      	ldr	r1, [sp, #40]	; 0x28
 800addc:	2a00      	cmp	r2, #0
 800adde:	440b      	add	r3, r1
 800ade0:	dcf7      	bgt.n	800add2 <_svfprintf_r+0x6f6>
 800ade2:	f1c2 0201 	rsb	r2, r2, #1
 800ade6:	e7f3      	b.n	800add0 <_svfprintf_r+0x6f4>
 800ade8:	2301      	movs	r3, #1
 800adea:	e7d0      	b.n	800ad8e <_svfprintf_r+0x6b2>
 800adec:	4613      	mov	r3, r2
 800adee:	e7f0      	b.n	800add2 <_svfprintf_r+0x6f6>
 800adf0:	b10b      	cbz	r3, 800adf6 <_svfprintf_r+0x71a>
 800adf2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800adf6:	f015 0f20 	tst.w	r5, #32
 800adfa:	f107 0304 	add.w	r3, r7, #4
 800adfe:	d008      	beq.n	800ae12 <_svfprintf_r+0x736>
 800ae00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	17ce      	asrs	r6, r1, #31
 800ae06:	4608      	mov	r0, r1
 800ae08:	4631      	mov	r1, r6
 800ae0a:	e9c2 0100 	strd	r0, r1, [r2]
 800ae0e:	461f      	mov	r7, r3
 800ae10:	e49e      	b.n	800a750 <_svfprintf_r+0x74>
 800ae12:	06ee      	lsls	r6, r5, #27
 800ae14:	d503      	bpl.n	800ae1e <_svfprintf_r+0x742>
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae1a:	6011      	str	r1, [r2, #0]
 800ae1c:	e7f7      	b.n	800ae0e <_svfprintf_r+0x732>
 800ae1e:	0668      	lsls	r0, r5, #25
 800ae20:	d5f9      	bpl.n	800ae16 <_svfprintf_r+0x73a>
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800ae28:	8011      	strh	r1, [r2, #0]
 800ae2a:	e7f0      	b.n	800ae0e <_svfprintf_r+0x732>
 800ae2c:	f045 0510 	orr.w	r5, r5, #16
 800ae30:	f015 0320 	ands.w	r3, r5, #32
 800ae34:	d022      	beq.n	800ae7c <_svfprintf_r+0x7a0>
 800ae36:	3707      	adds	r7, #7
 800ae38:	f027 0707 	bic.w	r7, r7, #7
 800ae3c:	f107 0308 	add.w	r3, r7, #8
 800ae40:	9308      	str	r3, [sp, #32]
 800ae42:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ae46:	2300      	movs	r3, #0
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800ae4e:	f1bb 3fff 	cmp.w	fp, #4294967295
 800ae52:	f000 83db 	beq.w	800b60c <_svfprintf_r+0xf30>
 800ae56:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800ae5a:	920f      	str	r2, [sp, #60]	; 0x3c
 800ae5c:	ea56 0207 	orrs.w	r2, r6, r7
 800ae60:	f040 83d9 	bne.w	800b616 <_svfprintf_r+0xf3a>
 800ae64:	f1bb 0f00 	cmp.w	fp, #0
 800ae68:	f000 80aa 	beq.w	800afc0 <_svfprintf_r+0x8e4>
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d076      	beq.n	800af5e <_svfprintf_r+0x882>
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	f000 8091 	beq.w	800af98 <_svfprintf_r+0x8bc>
 800ae76:	2600      	movs	r6, #0
 800ae78:	2700      	movs	r7, #0
 800ae7a:	e3d2      	b.n	800b622 <_svfprintf_r+0xf46>
 800ae7c:	1d3a      	adds	r2, r7, #4
 800ae7e:	f015 0110 	ands.w	r1, r5, #16
 800ae82:	9208      	str	r2, [sp, #32]
 800ae84:	d002      	beq.n	800ae8c <_svfprintf_r+0x7b0>
 800ae86:	683e      	ldr	r6, [r7, #0]
 800ae88:	2700      	movs	r7, #0
 800ae8a:	e7dd      	b.n	800ae48 <_svfprintf_r+0x76c>
 800ae8c:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800ae90:	d0f9      	beq.n	800ae86 <_svfprintf_r+0x7aa>
 800ae92:	883e      	ldrh	r6, [r7, #0]
 800ae94:	2700      	movs	r7, #0
 800ae96:	e7d6      	b.n	800ae46 <_svfprintf_r+0x76a>
 800ae98:	1d3b      	adds	r3, r7, #4
 800ae9a:	9308      	str	r3, [sp, #32]
 800ae9c:	2330      	movs	r3, #48	; 0x30
 800ae9e:	2278      	movs	r2, #120	; 0x78
 800aea0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800aea4:	4b14      	ldr	r3, [pc, #80]	; (800aef8 <_svfprintf_r+0x81c>)
 800aea6:	683e      	ldr	r6, [r7, #0]
 800aea8:	9315      	str	r3, [sp, #84]	; 0x54
 800aeaa:	2700      	movs	r7, #0
 800aeac:	f045 0502 	orr.w	r5, r5, #2
 800aeb0:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	9206      	str	r2, [sp, #24]
 800aeb8:	e7c6      	b.n	800ae48 <_svfprintf_r+0x76c>
 800aeba:	2600      	movs	r6, #0
 800aebc:	1d3b      	adds	r3, r7, #4
 800aebe:	f1bb 3fff 	cmp.w	fp, #4294967295
 800aec2:	9308      	str	r3, [sp, #32]
 800aec4:	f8d7 8000 	ldr.w	r8, [r7]
 800aec8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800aecc:	d00a      	beq.n	800aee4 <_svfprintf_r+0x808>
 800aece:	465a      	mov	r2, fp
 800aed0:	4631      	mov	r1, r6
 800aed2:	4640      	mov	r0, r8
 800aed4:	f001 ff84 	bl	800cde0 <memchr>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	f000 808d 	beq.w	800aff8 <_svfprintf_r+0x91c>
 800aede:	eba0 0b08 	sub.w	fp, r0, r8
 800aee2:	e5c4      	b.n	800aa6e <_svfprintf_r+0x392>
 800aee4:	4640      	mov	r0, r8
 800aee6:	f7f5 f933 	bl	8000150 <strlen>
 800aeea:	4683      	mov	fp, r0
 800aeec:	e5bf      	b.n	800aa6e <_svfprintf_r+0x392>
 800aeee:	bf00      	nop
 800aef0:	080115a0 	.word	0x080115a0
 800aef4:	080115b0 	.word	0x080115b0
 800aef8:	0801158d 	.word	0x0801158d
 800aefc:	f045 0510 	orr.w	r5, r5, #16
 800af00:	06a9      	lsls	r1, r5, #26
 800af02:	d509      	bpl.n	800af18 <_svfprintf_r+0x83c>
 800af04:	3707      	adds	r7, #7
 800af06:	f027 0707 	bic.w	r7, r7, #7
 800af0a:	f107 0308 	add.w	r3, r7, #8
 800af0e:	9308      	str	r3, [sp, #32]
 800af10:	e9d7 6700 	ldrd	r6, r7, [r7]
 800af14:	2301      	movs	r3, #1
 800af16:	e797      	b.n	800ae48 <_svfprintf_r+0x76c>
 800af18:	1d3b      	adds	r3, r7, #4
 800af1a:	f015 0f10 	tst.w	r5, #16
 800af1e:	9308      	str	r3, [sp, #32]
 800af20:	d001      	beq.n	800af26 <_svfprintf_r+0x84a>
 800af22:	683e      	ldr	r6, [r7, #0]
 800af24:	e002      	b.n	800af2c <_svfprintf_r+0x850>
 800af26:	066a      	lsls	r2, r5, #25
 800af28:	d5fb      	bpl.n	800af22 <_svfprintf_r+0x846>
 800af2a:	883e      	ldrh	r6, [r7, #0]
 800af2c:	2700      	movs	r7, #0
 800af2e:	e7f1      	b.n	800af14 <_svfprintf_r+0x838>
 800af30:	b10b      	cbz	r3, 800af36 <_svfprintf_r+0x85a>
 800af32:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800af36:	4ba3      	ldr	r3, [pc, #652]	; (800b1c4 <_svfprintf_r+0xae8>)
 800af38:	e4c5      	b.n	800a8c6 <_svfprintf_r+0x1ea>
 800af3a:	1d3b      	adds	r3, r7, #4
 800af3c:	f015 0f10 	tst.w	r5, #16
 800af40:	9308      	str	r3, [sp, #32]
 800af42:	d001      	beq.n	800af48 <_svfprintf_r+0x86c>
 800af44:	683e      	ldr	r6, [r7, #0]
 800af46:	e002      	b.n	800af4e <_svfprintf_r+0x872>
 800af48:	066e      	lsls	r6, r5, #25
 800af4a:	d5fb      	bpl.n	800af44 <_svfprintf_r+0x868>
 800af4c:	883e      	ldrh	r6, [r7, #0]
 800af4e:	2700      	movs	r7, #0
 800af50:	e4c5      	b.n	800a8de <_svfprintf_r+0x202>
 800af52:	4643      	mov	r3, r8
 800af54:	e366      	b.n	800b624 <_svfprintf_r+0xf48>
 800af56:	2f00      	cmp	r7, #0
 800af58:	bf08      	it	eq
 800af5a:	2e0a      	cmpeq	r6, #10
 800af5c:	d205      	bcs.n	800af6a <_svfprintf_r+0x88e>
 800af5e:	3630      	adds	r6, #48	; 0x30
 800af60:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 800af64:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800af68:	e377      	b.n	800b65a <_svfprintf_r+0xf7e>
 800af6a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800af6e:	4630      	mov	r0, r6
 800af70:	4639      	mov	r1, r7
 800af72:	220a      	movs	r2, #10
 800af74:	2300      	movs	r3, #0
 800af76:	f7f6 f923 	bl	80011c0 <__aeabi_uldivmod>
 800af7a:	3230      	adds	r2, #48	; 0x30
 800af7c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800af80:	2300      	movs	r3, #0
 800af82:	4630      	mov	r0, r6
 800af84:	4639      	mov	r1, r7
 800af86:	220a      	movs	r2, #10
 800af88:	f7f6 f91a 	bl	80011c0 <__aeabi_uldivmod>
 800af8c:	4606      	mov	r6, r0
 800af8e:	460f      	mov	r7, r1
 800af90:	ea56 0307 	orrs.w	r3, r6, r7
 800af94:	d1eb      	bne.n	800af6e <_svfprintf_r+0x892>
 800af96:	e360      	b.n	800b65a <_svfprintf_r+0xf7e>
 800af98:	2600      	movs	r6, #0
 800af9a:	2700      	movs	r7, #0
 800af9c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800afa0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800afa2:	f006 030f 	and.w	r3, r6, #15
 800afa6:	5cd3      	ldrb	r3, [r2, r3]
 800afa8:	093a      	lsrs	r2, r7, #4
 800afaa:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800afae:	0933      	lsrs	r3, r6, #4
 800afb0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800afb4:	461e      	mov	r6, r3
 800afb6:	4617      	mov	r7, r2
 800afb8:	ea56 0307 	orrs.w	r3, r6, r7
 800afbc:	d1f0      	bne.n	800afa0 <_svfprintf_r+0x8c4>
 800afbe:	e34c      	b.n	800b65a <_svfprintf_r+0xf7e>
 800afc0:	b93b      	cbnz	r3, 800afd2 <_svfprintf_r+0x8f6>
 800afc2:	07ea      	lsls	r2, r5, #31
 800afc4:	d505      	bpl.n	800afd2 <_svfprintf_r+0x8f6>
 800afc6:	2330      	movs	r3, #48	; 0x30
 800afc8:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 800afcc:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800afd0:	e343      	b.n	800b65a <_svfprintf_r+0xf7e>
 800afd2:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800afd6:	e340      	b.n	800b65a <_svfprintf_r+0xf7e>
 800afd8:	b10b      	cbz	r3, 800afde <_svfprintf_r+0x902>
 800afda:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800afde:	9b06      	ldr	r3, [sp, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 82f7 	beq.w	800b5d4 <_svfprintf_r+0xef8>
 800afe6:	2600      	movs	r6, #0
 800afe8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800afec:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800aff0:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800aff4:	9708      	str	r7, [sp, #32]
 800aff6:	e4e3      	b.n	800a9c0 <_svfprintf_r+0x2e4>
 800aff8:	4606      	mov	r6, r0
 800affa:	e538      	b.n	800aa6e <_svfprintf_r+0x392>
 800affc:	2310      	movs	r3, #16
 800affe:	6063      	str	r3, [r4, #4]
 800b000:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b002:	3310      	adds	r3, #16
 800b004:	9323      	str	r3, [sp, #140]	; 0x8c
 800b006:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b008:	3301      	adds	r3, #1
 800b00a:	2b07      	cmp	r3, #7
 800b00c:	9322      	str	r3, [sp, #136]	; 0x88
 800b00e:	dc04      	bgt.n	800b01a <_svfprintf_r+0x93e>
 800b010:	3408      	adds	r4, #8
 800b012:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b014:	3b10      	subs	r3, #16
 800b016:	9310      	str	r3, [sp, #64]	; 0x40
 800b018:	e611      	b.n	800ac3e <_svfprintf_r+0x562>
 800b01a:	aa21      	add	r2, sp, #132	; 0x84
 800b01c:	4649      	mov	r1, r9
 800b01e:	4650      	mov	r0, sl
 800b020:	f002 fca2 	bl	800d968 <__ssprint_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	f040 82b6 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b02a:	ac2e      	add	r4, sp, #184	; 0xb8
 800b02c:	e7f1      	b.n	800b012 <_svfprintf_r+0x936>
 800b02e:	aa21      	add	r2, sp, #132	; 0x84
 800b030:	4649      	mov	r1, r9
 800b032:	4650      	mov	r0, sl
 800b034:	f002 fc98 	bl	800d968 <__ssprint_r>
 800b038:	2800      	cmp	r0, #0
 800b03a:	f040 82ac 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b03e:	ac2e      	add	r4, sp, #184	; 0xb8
 800b040:	e610      	b.n	800ac64 <_svfprintf_r+0x588>
 800b042:	aa21      	add	r2, sp, #132	; 0x84
 800b044:	4649      	mov	r1, r9
 800b046:	4650      	mov	r0, sl
 800b048:	f002 fc8e 	bl	800d968 <__ssprint_r>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	f040 82a2 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b052:	ac2e      	add	r4, sp, #184	; 0xb8
 800b054:	e618      	b.n	800ac88 <_svfprintf_r+0x5ac>
 800b056:	aa21      	add	r2, sp, #132	; 0x84
 800b058:	4649      	mov	r1, r9
 800b05a:	4650      	mov	r0, sl
 800b05c:	f002 fc84 	bl	800d968 <__ssprint_r>
 800b060:	2800      	cmp	r0, #0
 800b062:	f040 8298 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b066:	ac2e      	add	r4, sp, #184	; 0xb8
 800b068:	e61e      	b.n	800aca8 <_svfprintf_r+0x5cc>
 800b06a:	2310      	movs	r3, #16
 800b06c:	6063      	str	r3, [r4, #4]
 800b06e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b070:	3310      	adds	r3, #16
 800b072:	9323      	str	r3, [sp, #140]	; 0x8c
 800b074:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b076:	3301      	adds	r3, #1
 800b078:	2b07      	cmp	r3, #7
 800b07a:	9322      	str	r3, [sp, #136]	; 0x88
 800b07c:	dc04      	bgt.n	800b088 <_svfprintf_r+0x9ac>
 800b07e:	3408      	adds	r4, #8
 800b080:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b082:	3b10      	subs	r3, #16
 800b084:	9310      	str	r3, [sp, #64]	; 0x40
 800b086:	e618      	b.n	800acba <_svfprintf_r+0x5de>
 800b088:	aa21      	add	r2, sp, #132	; 0x84
 800b08a:	4649      	mov	r1, r9
 800b08c:	4650      	mov	r0, sl
 800b08e:	f002 fc6b 	bl	800d968 <__ssprint_r>
 800b092:	2800      	cmp	r0, #0
 800b094:	f040 827f 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b098:	ac2e      	add	r4, sp, #184	; 0xb8
 800b09a:	e7f1      	b.n	800b080 <_svfprintf_r+0x9a4>
 800b09c:	aa21      	add	r2, sp, #132	; 0x84
 800b09e:	4649      	mov	r1, r9
 800b0a0:	4650      	mov	r0, sl
 800b0a2:	f002 fc61 	bl	800d968 <__ssprint_r>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f040 8275 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b0ac:	ac2e      	add	r4, sp, #184	; 0xb8
 800b0ae:	e617      	b.n	800ace0 <_svfprintf_r+0x604>
 800b0b0:	2310      	movs	r3, #16
 800b0b2:	6063      	str	r3, [r4, #4]
 800b0b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0b6:	3310      	adds	r3, #16
 800b0b8:	9323      	str	r3, [sp, #140]	; 0x8c
 800b0ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0bc:	3301      	adds	r3, #1
 800b0be:	2b07      	cmp	r3, #7
 800b0c0:	9322      	str	r3, [sp, #136]	; 0x88
 800b0c2:	dc02      	bgt.n	800b0ca <_svfprintf_r+0x9ee>
 800b0c4:	3408      	adds	r4, #8
 800b0c6:	3e10      	subs	r6, #16
 800b0c8:	e60e      	b.n	800ace8 <_svfprintf_r+0x60c>
 800b0ca:	aa21      	add	r2, sp, #132	; 0x84
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	4650      	mov	r0, sl
 800b0d0:	f002 fc4a 	bl	800d968 <__ssprint_r>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	f040 825e 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b0da:	ac2e      	add	r4, sp, #184	; 0xb8
 800b0dc:	e7f3      	b.n	800b0c6 <_svfprintf_r+0x9ea>
 800b0de:	aa21      	add	r2, sp, #132	; 0x84
 800b0e0:	4649      	mov	r1, r9
 800b0e2:	4650      	mov	r0, sl
 800b0e4:	f002 fc40 	bl	800d968 <__ssprint_r>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	f040 8254 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b0ee:	ac2e      	add	r4, sp, #184	; 0xb8
 800b0f0:	e60a      	b.n	800ad08 <_svfprintf_r+0x62c>
 800b0f2:	9b06      	ldr	r3, [sp, #24]
 800b0f4:	2b65      	cmp	r3, #101	; 0x65
 800b0f6:	f340 81a9 	ble.w	800b44c <_svfprintf_r+0xd70>
 800b0fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b0fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b100:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b102:	f7f5 fc4d 	bl	80009a0 <__aeabi_dcmpeq>
 800b106:	2800      	cmp	r0, #0
 800b108:	d062      	beq.n	800b1d0 <_svfprintf_r+0xaf4>
 800b10a:	4b2f      	ldr	r3, [pc, #188]	; (800b1c8 <_svfprintf_r+0xaec>)
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	2301      	movs	r3, #1
 800b110:	6063      	str	r3, [r4, #4]
 800b112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b114:	3301      	adds	r3, #1
 800b116:	9323      	str	r3, [sp, #140]	; 0x8c
 800b118:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b11a:	3301      	adds	r3, #1
 800b11c:	2b07      	cmp	r3, #7
 800b11e:	9322      	str	r3, [sp, #136]	; 0x88
 800b120:	dc25      	bgt.n	800b16e <_svfprintf_r+0xa92>
 800b122:	3408      	adds	r4, #8
 800b124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b126:	9a07      	ldr	r2, [sp, #28]
 800b128:	4293      	cmp	r3, r2
 800b12a:	db02      	blt.n	800b132 <_svfprintf_r+0xa56>
 800b12c:	07ee      	lsls	r6, r5, #31
 800b12e:	f57f ae02 	bpl.w	800ad36 <_svfprintf_r+0x65a>
 800b132:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b136:	6023      	str	r3, [r4, #0]
 800b138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b13a:	6063      	str	r3, [r4, #4]
 800b13c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b13e:	4413      	add	r3, r2
 800b140:	9323      	str	r3, [sp, #140]	; 0x8c
 800b142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b144:	3301      	adds	r3, #1
 800b146:	2b07      	cmp	r3, #7
 800b148:	9322      	str	r3, [sp, #136]	; 0x88
 800b14a:	dc1a      	bgt.n	800b182 <_svfprintf_r+0xaa6>
 800b14c:	3408      	adds	r4, #8
 800b14e:	9b07      	ldr	r3, [sp, #28]
 800b150:	1e5e      	subs	r6, r3, #1
 800b152:	2e00      	cmp	r6, #0
 800b154:	f77f adef 	ble.w	800ad36 <_svfprintf_r+0x65a>
 800b158:	f04f 0810 	mov.w	r8, #16
 800b15c:	4f1b      	ldr	r7, [pc, #108]	; (800b1cc <_svfprintf_r+0xaf0>)
 800b15e:	2e10      	cmp	r6, #16
 800b160:	6027      	str	r7, [r4, #0]
 800b162:	dc18      	bgt.n	800b196 <_svfprintf_r+0xaba>
 800b164:	6066      	str	r6, [r4, #4]
 800b166:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b168:	441e      	add	r6, r3
 800b16a:	9623      	str	r6, [sp, #140]	; 0x8c
 800b16c:	e5d4      	b.n	800ad18 <_svfprintf_r+0x63c>
 800b16e:	aa21      	add	r2, sp, #132	; 0x84
 800b170:	4649      	mov	r1, r9
 800b172:	4650      	mov	r0, sl
 800b174:	f002 fbf8 	bl	800d968 <__ssprint_r>
 800b178:	2800      	cmp	r0, #0
 800b17a:	f040 820c 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b17e:	ac2e      	add	r4, sp, #184	; 0xb8
 800b180:	e7d0      	b.n	800b124 <_svfprintf_r+0xa48>
 800b182:	aa21      	add	r2, sp, #132	; 0x84
 800b184:	4649      	mov	r1, r9
 800b186:	4650      	mov	r0, sl
 800b188:	f002 fbee 	bl	800d968 <__ssprint_r>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	f040 8202 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b192:	ac2e      	add	r4, sp, #184	; 0xb8
 800b194:	e7db      	b.n	800b14e <_svfprintf_r+0xa72>
 800b196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b198:	f8c4 8004 	str.w	r8, [r4, #4]
 800b19c:	3310      	adds	r3, #16
 800b19e:	9323      	str	r3, [sp, #140]	; 0x8c
 800b1a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	2b07      	cmp	r3, #7
 800b1a6:	9322      	str	r3, [sp, #136]	; 0x88
 800b1a8:	dc02      	bgt.n	800b1b0 <_svfprintf_r+0xad4>
 800b1aa:	3408      	adds	r4, #8
 800b1ac:	3e10      	subs	r6, #16
 800b1ae:	e7d6      	b.n	800b15e <_svfprintf_r+0xa82>
 800b1b0:	aa21      	add	r2, sp, #132	; 0x84
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	4650      	mov	r0, sl
 800b1b6:	f002 fbd7 	bl	800d968 <__ssprint_r>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	f040 81eb 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b1c0:	ac2e      	add	r4, sp, #184	; 0xb8
 800b1c2:	e7f3      	b.n	800b1ac <_svfprintf_r+0xad0>
 800b1c4:	0801158d 	.word	0x0801158d
 800b1c8:	0801159e 	.word	0x0801159e
 800b1cc:	080115b0 	.word	0x080115b0
 800b1d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	dc7a      	bgt.n	800b2cc <_svfprintf_r+0xbf0>
 800b1d6:	4b9b      	ldr	r3, [pc, #620]	; (800b444 <_svfprintf_r+0xd68>)
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	2301      	movs	r3, #1
 800b1dc:	6063      	str	r3, [r4, #4]
 800b1de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	9323      	str	r3, [sp, #140]	; 0x8c
 800b1e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	2b07      	cmp	r3, #7
 800b1ea:	9322      	str	r3, [sp, #136]	; 0x88
 800b1ec:	dc44      	bgt.n	800b278 <_svfprintf_r+0xb9c>
 800b1ee:	3408      	adds	r4, #8
 800b1f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1f2:	b923      	cbnz	r3, 800b1fe <_svfprintf_r+0xb22>
 800b1f4:	9b07      	ldr	r3, [sp, #28]
 800b1f6:	b913      	cbnz	r3, 800b1fe <_svfprintf_r+0xb22>
 800b1f8:	07e8      	lsls	r0, r5, #31
 800b1fa:	f57f ad9c 	bpl.w	800ad36 <_svfprintf_r+0x65a>
 800b1fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b202:	6023      	str	r3, [r4, #0]
 800b204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b206:	6063      	str	r3, [r4, #4]
 800b208:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b20a:	4413      	add	r3, r2
 800b20c:	9323      	str	r3, [sp, #140]	; 0x8c
 800b20e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b210:	3301      	adds	r3, #1
 800b212:	2b07      	cmp	r3, #7
 800b214:	9322      	str	r3, [sp, #136]	; 0x88
 800b216:	dc39      	bgt.n	800b28c <_svfprintf_r+0xbb0>
 800b218:	f104 0308 	add.w	r3, r4, #8
 800b21c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b21e:	2e00      	cmp	r6, #0
 800b220:	da19      	bge.n	800b256 <_svfprintf_r+0xb7a>
 800b222:	2410      	movs	r4, #16
 800b224:	4f88      	ldr	r7, [pc, #544]	; (800b448 <_svfprintf_r+0xd6c>)
 800b226:	4276      	negs	r6, r6
 800b228:	2e10      	cmp	r6, #16
 800b22a:	601f      	str	r7, [r3, #0]
 800b22c:	dc38      	bgt.n	800b2a0 <_svfprintf_r+0xbc4>
 800b22e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b230:	605e      	str	r6, [r3, #4]
 800b232:	4416      	add	r6, r2
 800b234:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b236:	9623      	str	r6, [sp, #140]	; 0x8c
 800b238:	3201      	adds	r2, #1
 800b23a:	2a07      	cmp	r2, #7
 800b23c:	f103 0308 	add.w	r3, r3, #8
 800b240:	9222      	str	r2, [sp, #136]	; 0x88
 800b242:	dd08      	ble.n	800b256 <_svfprintf_r+0xb7a>
 800b244:	aa21      	add	r2, sp, #132	; 0x84
 800b246:	4649      	mov	r1, r9
 800b248:	4650      	mov	r0, sl
 800b24a:	f002 fb8d 	bl	800d968 <__ssprint_r>
 800b24e:	2800      	cmp	r0, #0
 800b250:	f040 81a1 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b254:	ab2e      	add	r3, sp, #184	; 0xb8
 800b256:	9a07      	ldr	r2, [sp, #28]
 800b258:	9907      	ldr	r1, [sp, #28]
 800b25a:	605a      	str	r2, [r3, #4]
 800b25c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b25e:	f8c3 8000 	str.w	r8, [r3]
 800b262:	440a      	add	r2, r1
 800b264:	9223      	str	r2, [sp, #140]	; 0x8c
 800b266:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b268:	3201      	adds	r2, #1
 800b26a:	2a07      	cmp	r2, #7
 800b26c:	9222      	str	r2, [sp, #136]	; 0x88
 800b26e:	f73f ad59 	bgt.w	800ad24 <_svfprintf_r+0x648>
 800b272:	f103 0408 	add.w	r4, r3, #8
 800b276:	e55e      	b.n	800ad36 <_svfprintf_r+0x65a>
 800b278:	aa21      	add	r2, sp, #132	; 0x84
 800b27a:	4649      	mov	r1, r9
 800b27c:	4650      	mov	r0, sl
 800b27e:	f002 fb73 	bl	800d968 <__ssprint_r>
 800b282:	2800      	cmp	r0, #0
 800b284:	f040 8187 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b288:	ac2e      	add	r4, sp, #184	; 0xb8
 800b28a:	e7b1      	b.n	800b1f0 <_svfprintf_r+0xb14>
 800b28c:	aa21      	add	r2, sp, #132	; 0x84
 800b28e:	4649      	mov	r1, r9
 800b290:	4650      	mov	r0, sl
 800b292:	f002 fb69 	bl	800d968 <__ssprint_r>
 800b296:	2800      	cmp	r0, #0
 800b298:	f040 817d 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b29c:	ab2e      	add	r3, sp, #184	; 0xb8
 800b29e:	e7bd      	b.n	800b21c <_svfprintf_r+0xb40>
 800b2a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b2a2:	605c      	str	r4, [r3, #4]
 800b2a4:	3210      	adds	r2, #16
 800b2a6:	9223      	str	r2, [sp, #140]	; 0x8c
 800b2a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b2aa:	3201      	adds	r2, #1
 800b2ac:	2a07      	cmp	r2, #7
 800b2ae:	9222      	str	r2, [sp, #136]	; 0x88
 800b2b0:	dc02      	bgt.n	800b2b8 <_svfprintf_r+0xbdc>
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	3e10      	subs	r6, #16
 800b2b6:	e7b7      	b.n	800b228 <_svfprintf_r+0xb4c>
 800b2b8:	aa21      	add	r2, sp, #132	; 0x84
 800b2ba:	4649      	mov	r1, r9
 800b2bc:	4650      	mov	r0, sl
 800b2be:	f002 fb53 	bl	800d968 <__ssprint_r>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	f040 8167 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b2c8:	ab2e      	add	r3, sp, #184	; 0xb8
 800b2ca:	e7f3      	b.n	800b2b4 <_svfprintf_r+0xbd8>
 800b2cc:	9b07      	ldr	r3, [sp, #28]
 800b2ce:	42bb      	cmp	r3, r7
 800b2d0:	bfa8      	it	ge
 800b2d2:	463b      	movge	r3, r7
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	461e      	mov	r6, r3
 800b2d8:	dd0b      	ble.n	800b2f2 <_svfprintf_r+0xc16>
 800b2da:	6063      	str	r3, [r4, #4]
 800b2dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b2de:	f8c4 8000 	str.w	r8, [r4]
 800b2e2:	4433      	add	r3, r6
 800b2e4:	9323      	str	r3, [sp, #140]	; 0x8c
 800b2e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	2b07      	cmp	r3, #7
 800b2ec:	9322      	str	r3, [sp, #136]	; 0x88
 800b2ee:	dc5f      	bgt.n	800b3b0 <_svfprintf_r+0xcd4>
 800b2f0:	3408      	adds	r4, #8
 800b2f2:	2e00      	cmp	r6, #0
 800b2f4:	bfb4      	ite	lt
 800b2f6:	463e      	movlt	r6, r7
 800b2f8:	1bbe      	subge	r6, r7, r6
 800b2fa:	2e00      	cmp	r6, #0
 800b2fc:	dd0f      	ble.n	800b31e <_svfprintf_r+0xc42>
 800b2fe:	f8df b148 	ldr.w	fp, [pc, #328]	; 800b448 <_svfprintf_r+0xd6c>
 800b302:	2e10      	cmp	r6, #16
 800b304:	f8c4 b000 	str.w	fp, [r4]
 800b308:	dc5c      	bgt.n	800b3c4 <_svfprintf_r+0xce8>
 800b30a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b30c:	6066      	str	r6, [r4, #4]
 800b30e:	441e      	add	r6, r3
 800b310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b312:	9623      	str	r6, [sp, #140]	; 0x8c
 800b314:	3301      	adds	r3, #1
 800b316:	2b07      	cmp	r3, #7
 800b318:	9322      	str	r3, [sp, #136]	; 0x88
 800b31a:	dc6a      	bgt.n	800b3f2 <_svfprintf_r+0xd16>
 800b31c:	3408      	adds	r4, #8
 800b31e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b320:	9a07      	ldr	r2, [sp, #28]
 800b322:	4293      	cmp	r3, r2
 800b324:	db01      	blt.n	800b32a <_svfprintf_r+0xc4e>
 800b326:	07e9      	lsls	r1, r5, #31
 800b328:	d50d      	bpl.n	800b346 <_svfprintf_r+0xc6a>
 800b32a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b32c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b332:	6063      	str	r3, [r4, #4]
 800b334:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b336:	4413      	add	r3, r2
 800b338:	9323      	str	r3, [sp, #140]	; 0x8c
 800b33a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b33c:	3301      	adds	r3, #1
 800b33e:	2b07      	cmp	r3, #7
 800b340:	9322      	str	r3, [sp, #136]	; 0x88
 800b342:	dc60      	bgt.n	800b406 <_svfprintf_r+0xd2a>
 800b344:	3408      	adds	r4, #8
 800b346:	9b07      	ldr	r3, [sp, #28]
 800b348:	9a07      	ldr	r2, [sp, #28]
 800b34a:	1bde      	subs	r6, r3, r7
 800b34c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	429e      	cmp	r6, r3
 800b352:	bfa8      	it	ge
 800b354:	461e      	movge	r6, r3
 800b356:	2e00      	cmp	r6, #0
 800b358:	dd0b      	ble.n	800b372 <_svfprintf_r+0xc96>
 800b35a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b35c:	4447      	add	r7, r8
 800b35e:	4433      	add	r3, r6
 800b360:	9323      	str	r3, [sp, #140]	; 0x8c
 800b362:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b364:	6027      	str	r7, [r4, #0]
 800b366:	3301      	adds	r3, #1
 800b368:	2b07      	cmp	r3, #7
 800b36a:	6066      	str	r6, [r4, #4]
 800b36c:	9322      	str	r3, [sp, #136]	; 0x88
 800b36e:	dc54      	bgt.n	800b41a <_svfprintf_r+0xd3e>
 800b370:	3408      	adds	r4, #8
 800b372:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b374:	9a07      	ldr	r2, [sp, #28]
 800b376:	2e00      	cmp	r6, #0
 800b378:	eba2 0303 	sub.w	r3, r2, r3
 800b37c:	bfb4      	ite	lt
 800b37e:	461e      	movlt	r6, r3
 800b380:	1b9e      	subge	r6, r3, r6
 800b382:	2e00      	cmp	r6, #0
 800b384:	f77f acd7 	ble.w	800ad36 <_svfprintf_r+0x65a>
 800b388:	f04f 0810 	mov.w	r8, #16
 800b38c:	4f2e      	ldr	r7, [pc, #184]	; (800b448 <_svfprintf_r+0xd6c>)
 800b38e:	2e10      	cmp	r6, #16
 800b390:	6027      	str	r7, [r4, #0]
 800b392:	f77f aee7 	ble.w	800b164 <_svfprintf_r+0xa88>
 800b396:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b398:	f8c4 8004 	str.w	r8, [r4, #4]
 800b39c:	3310      	adds	r3, #16
 800b39e:	9323      	str	r3, [sp, #140]	; 0x8c
 800b3a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	2b07      	cmp	r3, #7
 800b3a6:	9322      	str	r3, [sp, #136]	; 0x88
 800b3a8:	dc41      	bgt.n	800b42e <_svfprintf_r+0xd52>
 800b3aa:	3408      	adds	r4, #8
 800b3ac:	3e10      	subs	r6, #16
 800b3ae:	e7ee      	b.n	800b38e <_svfprintf_r+0xcb2>
 800b3b0:	aa21      	add	r2, sp, #132	; 0x84
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	4650      	mov	r0, sl
 800b3b6:	f002 fad7 	bl	800d968 <__ssprint_r>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	f040 80eb 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b3c0:	ac2e      	add	r4, sp, #184	; 0xb8
 800b3c2:	e796      	b.n	800b2f2 <_svfprintf_r+0xc16>
 800b3c4:	2310      	movs	r3, #16
 800b3c6:	6063      	str	r3, [r4, #4]
 800b3c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3ca:	3310      	adds	r3, #16
 800b3cc:	9323      	str	r3, [sp, #140]	; 0x8c
 800b3ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	2b07      	cmp	r3, #7
 800b3d4:	9322      	str	r3, [sp, #136]	; 0x88
 800b3d6:	dc02      	bgt.n	800b3de <_svfprintf_r+0xd02>
 800b3d8:	3408      	adds	r4, #8
 800b3da:	3e10      	subs	r6, #16
 800b3dc:	e791      	b.n	800b302 <_svfprintf_r+0xc26>
 800b3de:	aa21      	add	r2, sp, #132	; 0x84
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	4650      	mov	r0, sl
 800b3e4:	f002 fac0 	bl	800d968 <__ssprint_r>
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	f040 80d4 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b3ee:	ac2e      	add	r4, sp, #184	; 0xb8
 800b3f0:	e7f3      	b.n	800b3da <_svfprintf_r+0xcfe>
 800b3f2:	aa21      	add	r2, sp, #132	; 0x84
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	4650      	mov	r0, sl
 800b3f8:	f002 fab6 	bl	800d968 <__ssprint_r>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f040 80ca 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b402:	ac2e      	add	r4, sp, #184	; 0xb8
 800b404:	e78b      	b.n	800b31e <_svfprintf_r+0xc42>
 800b406:	aa21      	add	r2, sp, #132	; 0x84
 800b408:	4649      	mov	r1, r9
 800b40a:	4650      	mov	r0, sl
 800b40c:	f002 faac 	bl	800d968 <__ssprint_r>
 800b410:	2800      	cmp	r0, #0
 800b412:	f040 80c0 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b416:	ac2e      	add	r4, sp, #184	; 0xb8
 800b418:	e795      	b.n	800b346 <_svfprintf_r+0xc6a>
 800b41a:	aa21      	add	r2, sp, #132	; 0x84
 800b41c:	4649      	mov	r1, r9
 800b41e:	4650      	mov	r0, sl
 800b420:	f002 faa2 	bl	800d968 <__ssprint_r>
 800b424:	2800      	cmp	r0, #0
 800b426:	f040 80b6 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b42a:	ac2e      	add	r4, sp, #184	; 0xb8
 800b42c:	e7a1      	b.n	800b372 <_svfprintf_r+0xc96>
 800b42e:	aa21      	add	r2, sp, #132	; 0x84
 800b430:	4649      	mov	r1, r9
 800b432:	4650      	mov	r0, sl
 800b434:	f002 fa98 	bl	800d968 <__ssprint_r>
 800b438:	2800      	cmp	r0, #0
 800b43a:	f040 80ac 	bne.w	800b596 <_svfprintf_r+0xeba>
 800b43e:	ac2e      	add	r4, sp, #184	; 0xb8
 800b440:	e7b4      	b.n	800b3ac <_svfprintf_r+0xcd0>
 800b442:	bf00      	nop
 800b444:	0801159e 	.word	0x0801159e
 800b448:	080115b0 	.word	0x080115b0
 800b44c:	9b07      	ldr	r3, [sp, #28]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	dc01      	bgt.n	800b456 <_svfprintf_r+0xd7a>
 800b452:	07ea      	lsls	r2, r5, #31
 800b454:	d576      	bpl.n	800b544 <_svfprintf_r+0xe68>
 800b456:	2301      	movs	r3, #1
 800b458:	6063      	str	r3, [r4, #4]
 800b45a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b45c:	f8c4 8000 	str.w	r8, [r4]
 800b460:	3301      	adds	r3, #1
 800b462:	9323      	str	r3, [sp, #140]	; 0x8c
 800b464:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b466:	3301      	adds	r3, #1
 800b468:	2b07      	cmp	r3, #7
 800b46a:	9322      	str	r3, [sp, #136]	; 0x88
 800b46c:	dc36      	bgt.n	800b4dc <_svfprintf_r+0xe00>
 800b46e:	3408      	adds	r4, #8
 800b470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b478:	6063      	str	r3, [r4, #4]
 800b47a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b47c:	4413      	add	r3, r2
 800b47e:	9323      	str	r3, [sp, #140]	; 0x8c
 800b480:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b482:	3301      	adds	r3, #1
 800b484:	2b07      	cmp	r3, #7
 800b486:	9322      	str	r3, [sp, #136]	; 0x88
 800b488:	dc31      	bgt.n	800b4ee <_svfprintf_r+0xe12>
 800b48a:	3408      	adds	r4, #8
 800b48c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b48e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b490:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b492:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b494:	f7f5 fa84 	bl	80009a0 <__aeabi_dcmpeq>
 800b498:	9b07      	ldr	r3, [sp, #28]
 800b49a:	1e5e      	subs	r6, r3, #1
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d12f      	bne.n	800b500 <_svfprintf_r+0xe24>
 800b4a0:	f108 0301 	add.w	r3, r8, #1
 800b4a4:	e884 0048 	stmia.w	r4, {r3, r6}
 800b4a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b4aa:	9a07      	ldr	r2, [sp, #28]
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	4413      	add	r3, r2
 800b4b0:	9323      	str	r3, [sp, #140]	; 0x8c
 800b4b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	2b07      	cmp	r3, #7
 800b4b8:	9322      	str	r3, [sp, #136]	; 0x88
 800b4ba:	dd4a      	ble.n	800b552 <_svfprintf_r+0xe76>
 800b4bc:	aa21      	add	r2, sp, #132	; 0x84
 800b4be:	4649      	mov	r1, r9
 800b4c0:	4650      	mov	r0, sl
 800b4c2:	f002 fa51 	bl	800d968 <__ssprint_r>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d165      	bne.n	800b596 <_svfprintf_r+0xeba>
 800b4ca:	ac2e      	add	r4, sp, #184	; 0xb8
 800b4cc:	ab1d      	add	r3, sp, #116	; 0x74
 800b4ce:	6023      	str	r3, [r4, #0]
 800b4d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4d4:	6063      	str	r3, [r4, #4]
 800b4d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b4d8:	4413      	add	r3, r2
 800b4da:	e41c      	b.n	800ad16 <_svfprintf_r+0x63a>
 800b4dc:	aa21      	add	r2, sp, #132	; 0x84
 800b4de:	4649      	mov	r1, r9
 800b4e0:	4650      	mov	r0, sl
 800b4e2:	f002 fa41 	bl	800d968 <__ssprint_r>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d155      	bne.n	800b596 <_svfprintf_r+0xeba>
 800b4ea:	ac2e      	add	r4, sp, #184	; 0xb8
 800b4ec:	e7c0      	b.n	800b470 <_svfprintf_r+0xd94>
 800b4ee:	aa21      	add	r2, sp, #132	; 0x84
 800b4f0:	4649      	mov	r1, r9
 800b4f2:	4650      	mov	r0, sl
 800b4f4:	f002 fa38 	bl	800d968 <__ssprint_r>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d14c      	bne.n	800b596 <_svfprintf_r+0xeba>
 800b4fc:	ac2e      	add	r4, sp, #184	; 0xb8
 800b4fe:	e7c5      	b.n	800b48c <_svfprintf_r+0xdb0>
 800b500:	2e00      	cmp	r6, #0
 800b502:	dde3      	ble.n	800b4cc <_svfprintf_r+0xdf0>
 800b504:	f04f 0810 	mov.w	r8, #16
 800b508:	4f58      	ldr	r7, [pc, #352]	; (800b66c <_svfprintf_r+0xf90>)
 800b50a:	2e10      	cmp	r6, #16
 800b50c:	6027      	str	r7, [r4, #0]
 800b50e:	dc04      	bgt.n	800b51a <_svfprintf_r+0xe3e>
 800b510:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b512:	6066      	str	r6, [r4, #4]
 800b514:	441e      	add	r6, r3
 800b516:	9623      	str	r6, [sp, #140]	; 0x8c
 800b518:	e7cb      	b.n	800b4b2 <_svfprintf_r+0xdd6>
 800b51a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b51c:	f8c4 8004 	str.w	r8, [r4, #4]
 800b520:	3310      	adds	r3, #16
 800b522:	9323      	str	r3, [sp, #140]	; 0x8c
 800b524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b526:	3301      	adds	r3, #1
 800b528:	2b07      	cmp	r3, #7
 800b52a:	9322      	str	r3, [sp, #136]	; 0x88
 800b52c:	dc02      	bgt.n	800b534 <_svfprintf_r+0xe58>
 800b52e:	3408      	adds	r4, #8
 800b530:	3e10      	subs	r6, #16
 800b532:	e7ea      	b.n	800b50a <_svfprintf_r+0xe2e>
 800b534:	aa21      	add	r2, sp, #132	; 0x84
 800b536:	4649      	mov	r1, r9
 800b538:	4650      	mov	r0, sl
 800b53a:	f002 fa15 	bl	800d968 <__ssprint_r>
 800b53e:	bb50      	cbnz	r0, 800b596 <_svfprintf_r+0xeba>
 800b540:	ac2e      	add	r4, sp, #184	; 0xb8
 800b542:	e7f5      	b.n	800b530 <_svfprintf_r+0xe54>
 800b544:	2301      	movs	r3, #1
 800b546:	6063      	str	r3, [r4, #4]
 800b548:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b54a:	f8c4 8000 	str.w	r8, [r4]
 800b54e:	3301      	adds	r3, #1
 800b550:	e7ae      	b.n	800b4b0 <_svfprintf_r+0xdd4>
 800b552:	3408      	adds	r4, #8
 800b554:	e7ba      	b.n	800b4cc <_svfprintf_r+0xdf0>
 800b556:	3408      	adds	r4, #8
 800b558:	f7ff bbed 	b.w	800ad36 <_svfprintf_r+0x65a>
 800b55c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b55e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b560:	1a9d      	subs	r5, r3, r2
 800b562:	2d00      	cmp	r5, #0
 800b564:	f77f abea 	ble.w	800ad3c <_svfprintf_r+0x660>
 800b568:	2610      	movs	r6, #16
 800b56a:	4b41      	ldr	r3, [pc, #260]	; (800b670 <_svfprintf_r+0xf94>)
 800b56c:	2d10      	cmp	r5, #16
 800b56e:	6023      	str	r3, [r4, #0]
 800b570:	dc1b      	bgt.n	800b5aa <_svfprintf_r+0xece>
 800b572:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b574:	6065      	str	r5, [r4, #4]
 800b576:	441d      	add	r5, r3
 800b578:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b57a:	9523      	str	r5, [sp, #140]	; 0x8c
 800b57c:	3301      	adds	r3, #1
 800b57e:	2b07      	cmp	r3, #7
 800b580:	9322      	str	r3, [sp, #136]	; 0x88
 800b582:	f77f abdb 	ble.w	800ad3c <_svfprintf_r+0x660>
 800b586:	aa21      	add	r2, sp, #132	; 0x84
 800b588:	4649      	mov	r1, r9
 800b58a:	4650      	mov	r0, sl
 800b58c:	f002 f9ec 	bl	800d968 <__ssprint_r>
 800b590:	2800      	cmp	r0, #0
 800b592:	f43f abd3 	beq.w	800ad3c <_svfprintf_r+0x660>
 800b596:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b59a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b59e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5a0:	bf18      	it	ne
 800b5a2:	f04f 33ff 	movne.w	r3, #4294967295
 800b5a6:	f7ff b8bd 	b.w	800a724 <_svfprintf_r+0x48>
 800b5aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b5ac:	6066      	str	r6, [r4, #4]
 800b5ae:	3310      	adds	r3, #16
 800b5b0:	9323      	str	r3, [sp, #140]	; 0x8c
 800b5b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	2b07      	cmp	r3, #7
 800b5b8:	9322      	str	r3, [sp, #136]	; 0x88
 800b5ba:	dc02      	bgt.n	800b5c2 <_svfprintf_r+0xee6>
 800b5bc:	3408      	adds	r4, #8
 800b5be:	3d10      	subs	r5, #16
 800b5c0:	e7d3      	b.n	800b56a <_svfprintf_r+0xe8e>
 800b5c2:	aa21      	add	r2, sp, #132	; 0x84
 800b5c4:	4649      	mov	r1, r9
 800b5c6:	4650      	mov	r0, sl
 800b5c8:	f002 f9ce 	bl	800d968 <__ssprint_r>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d1e2      	bne.n	800b596 <_svfprintf_r+0xeba>
 800b5d0:	ac2e      	add	r4, sp, #184	; 0xb8
 800b5d2:	e7f4      	b.n	800b5be <_svfprintf_r+0xee2>
 800b5d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d0dd      	beq.n	800b596 <_svfprintf_r+0xeba>
 800b5da:	aa21      	add	r2, sp, #132	; 0x84
 800b5dc:	4649      	mov	r1, r9
 800b5de:	4650      	mov	r0, sl
 800b5e0:	f002 f9c2 	bl	800d968 <__ssprint_r>
 800b5e4:	e7d7      	b.n	800b596 <_svfprintf_r+0xeba>
 800b5e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b5ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b5ee:	f7f5 fa09 	bl	8000a04 <__aeabi_dcmpun>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f43f aa3d 	beq.w	800aa72 <_svfprintf_r+0x396>
 800b5f8:	4b1e      	ldr	r3, [pc, #120]	; (800b674 <_svfprintf_r+0xf98>)
 800b5fa:	4a1f      	ldr	r2, [pc, #124]	; (800b678 <_svfprintf_r+0xf9c>)
 800b5fc:	f7ff ba2d 	b.w	800aa5a <_svfprintf_r+0x37e>
 800b600:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b602:	eba3 0308 	sub.w	r3, r3, r8
 800b606:	9307      	str	r3, [sp, #28]
 800b608:	f7ff baaf 	b.w	800ab6a <_svfprintf_r+0x48e>
 800b60c:	ea56 0207 	orrs.w	r2, r6, r7
 800b610:	950f      	str	r5, [sp, #60]	; 0x3c
 800b612:	f43f ac2b 	beq.w	800ae6c <_svfprintf_r+0x790>
 800b616:	2b01      	cmp	r3, #1
 800b618:	f43f ac9d 	beq.w	800af56 <_svfprintf_r+0x87a>
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	f43f acbd 	beq.w	800af9c <_svfprintf_r+0x8c0>
 800b622:	ab2e      	add	r3, sp, #184	; 0xb8
 800b624:	08f1      	lsrs	r1, r6, #3
 800b626:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800b62a:	08f8      	lsrs	r0, r7, #3
 800b62c:	f006 0207 	and.w	r2, r6, #7
 800b630:	4607      	mov	r7, r0
 800b632:	460e      	mov	r6, r1
 800b634:	3230      	adds	r2, #48	; 0x30
 800b636:	ea56 0107 	orrs.w	r1, r6, r7
 800b63a:	f103 38ff 	add.w	r8, r3, #4294967295
 800b63e:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b642:	f47f ac86 	bne.w	800af52 <_svfprintf_r+0x876>
 800b646:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b648:	07c9      	lsls	r1, r1, #31
 800b64a:	d506      	bpl.n	800b65a <_svfprintf_r+0xf7e>
 800b64c:	2a30      	cmp	r2, #48	; 0x30
 800b64e:	d004      	beq.n	800b65a <_svfprintf_r+0xf7e>
 800b650:	2230      	movs	r2, #48	; 0x30
 800b652:	f808 2c01 	strb.w	r2, [r8, #-1]
 800b656:	f1a3 0802 	sub.w	r8, r3, #2
 800b65a:	ab2e      	add	r3, sp, #184	; 0xb8
 800b65c:	465e      	mov	r6, fp
 800b65e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b660:	eba3 0b08 	sub.w	fp, r3, r8
 800b664:	2700      	movs	r7, #0
 800b666:	f7ff bace 	b.w	800ac06 <_svfprintf_r+0x52a>
 800b66a:	bf00      	nop
 800b66c:	080115b0 	.word	0x080115b0
 800b670:	080115a0 	.word	0x080115a0
 800b674:	08011574 	.word	0x08011574
 800b678:	08011578 	.word	0x08011578

0800b67c <__ascii_wctomb>:
 800b67c:	b149      	cbz	r1, 800b692 <__ascii_wctomb+0x16>
 800b67e:	2aff      	cmp	r2, #255	; 0xff
 800b680:	bf8b      	itete	hi
 800b682:	238a      	movhi	r3, #138	; 0x8a
 800b684:	700a      	strbls	r2, [r1, #0]
 800b686:	6003      	strhi	r3, [r0, #0]
 800b688:	2001      	movls	r0, #1
 800b68a:	bf88      	it	hi
 800b68c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b690:	4770      	bx	lr
 800b692:	4608      	mov	r0, r1
 800b694:	4770      	bx	lr

0800b696 <quorem>:
 800b696:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69a:	6903      	ldr	r3, [r0, #16]
 800b69c:	690c      	ldr	r4, [r1, #16]
 800b69e:	4680      	mov	r8, r0
 800b6a0:	429c      	cmp	r4, r3
 800b6a2:	f300 8082 	bgt.w	800b7aa <quorem+0x114>
 800b6a6:	3c01      	subs	r4, #1
 800b6a8:	f101 0714 	add.w	r7, r1, #20
 800b6ac:	f100 0614 	add.w	r6, r0, #20
 800b6b0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b6b4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b6b8:	3501      	adds	r5, #1
 800b6ba:	fbb0 f5f5 	udiv	r5, r0, r5
 800b6be:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800b6c2:	eb06 030e 	add.w	r3, r6, lr
 800b6c6:	eb07 090e 	add.w	r9, r7, lr
 800b6ca:	9301      	str	r3, [sp, #4]
 800b6cc:	b38d      	cbz	r5, 800b732 <quorem+0x9c>
 800b6ce:	f04f 0a00 	mov.w	sl, #0
 800b6d2:	4638      	mov	r0, r7
 800b6d4:	46b4      	mov	ip, r6
 800b6d6:	46d3      	mov	fp, sl
 800b6d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b6dc:	b293      	uxth	r3, r2
 800b6de:	fb05 a303 	mla	r3, r5, r3, sl
 800b6e2:	0c12      	lsrs	r2, r2, #16
 800b6e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6e8:	fb05 a202 	mla	r2, r5, r2, sl
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	ebab 0303 	sub.w	r3, fp, r3
 800b6f2:	f8bc b000 	ldrh.w	fp, [ip]
 800b6f6:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b6fa:	445b      	add	r3, fp
 800b6fc:	fa1f fb82 	uxth.w	fp, r2
 800b700:	f8dc 2000 	ldr.w	r2, [ip]
 800b704:	4581      	cmp	r9, r0
 800b706:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b70a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b70e:	b29b      	uxth	r3, r3
 800b710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b714:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b718:	f84c 3b04 	str.w	r3, [ip], #4
 800b71c:	d2dc      	bcs.n	800b6d8 <quorem+0x42>
 800b71e:	f856 300e 	ldr.w	r3, [r6, lr]
 800b722:	b933      	cbnz	r3, 800b732 <quorem+0x9c>
 800b724:	9b01      	ldr	r3, [sp, #4]
 800b726:	3b04      	subs	r3, #4
 800b728:	429e      	cmp	r6, r3
 800b72a:	461a      	mov	r2, r3
 800b72c:	d331      	bcc.n	800b792 <quorem+0xfc>
 800b72e:	f8c8 4010 	str.w	r4, [r8, #16]
 800b732:	4640      	mov	r0, r8
 800b734:	f001 fdcf 	bl	800d2d6 <__mcmp>
 800b738:	2800      	cmp	r0, #0
 800b73a:	db26      	blt.n	800b78a <quorem+0xf4>
 800b73c:	4630      	mov	r0, r6
 800b73e:	f04f 0e00 	mov.w	lr, #0
 800b742:	3501      	adds	r5, #1
 800b744:	f857 1b04 	ldr.w	r1, [r7], #4
 800b748:	f8d0 c000 	ldr.w	ip, [r0]
 800b74c:	b28b      	uxth	r3, r1
 800b74e:	ebae 0303 	sub.w	r3, lr, r3
 800b752:	fa1f f28c 	uxth.w	r2, ip
 800b756:	4413      	add	r3, r2
 800b758:	0c0a      	lsrs	r2, r1, #16
 800b75a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b75e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b762:	b29b      	uxth	r3, r3
 800b764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b768:	45b9      	cmp	r9, r7
 800b76a:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b76e:	f840 3b04 	str.w	r3, [r0], #4
 800b772:	d2e7      	bcs.n	800b744 <quorem+0xae>
 800b774:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b778:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b77c:	b92a      	cbnz	r2, 800b78a <quorem+0xf4>
 800b77e:	3b04      	subs	r3, #4
 800b780:	429e      	cmp	r6, r3
 800b782:	461a      	mov	r2, r3
 800b784:	d30b      	bcc.n	800b79e <quorem+0x108>
 800b786:	f8c8 4010 	str.w	r4, [r8, #16]
 800b78a:	4628      	mov	r0, r5
 800b78c:	b003      	add	sp, #12
 800b78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b792:	6812      	ldr	r2, [r2, #0]
 800b794:	3b04      	subs	r3, #4
 800b796:	2a00      	cmp	r2, #0
 800b798:	d1c9      	bne.n	800b72e <quorem+0x98>
 800b79a:	3c01      	subs	r4, #1
 800b79c:	e7c4      	b.n	800b728 <quorem+0x92>
 800b79e:	6812      	ldr	r2, [r2, #0]
 800b7a0:	3b04      	subs	r3, #4
 800b7a2:	2a00      	cmp	r2, #0
 800b7a4:	d1ef      	bne.n	800b786 <quorem+0xf0>
 800b7a6:	3c01      	subs	r4, #1
 800b7a8:	e7ea      	b.n	800b780 <quorem+0xea>
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	e7ee      	b.n	800b78c <quorem+0xf6>
	...

0800b7b0 <_dtoa_r>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7b6:	b095      	sub	sp, #84	; 0x54
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800b7bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7c0:	b93e      	cbnz	r6, 800b7d2 <_dtoa_r+0x22>
 800b7c2:	2010      	movs	r0, #16
 800b7c4:	f001 f8f8 	bl	800c9b8 <malloc>
 800b7c8:	6260      	str	r0, [r4, #36]	; 0x24
 800b7ca:	6046      	str	r6, [r0, #4]
 800b7cc:	6086      	str	r6, [r0, #8]
 800b7ce:	6006      	str	r6, [r0, #0]
 800b7d0:	60c6      	str	r6, [r0, #12]
 800b7d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7d4:	6819      	ldr	r1, [r3, #0]
 800b7d6:	b151      	cbz	r1, 800b7ee <_dtoa_r+0x3e>
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	2301      	movs	r3, #1
 800b7dc:	4093      	lsls	r3, r2
 800b7de:	604a      	str	r2, [r1, #4]
 800b7e0:	608b      	str	r3, [r1, #8]
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f001 fb64 	bl	800ceb0 <_Bfree>
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	9b03      	ldr	r3, [sp, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	bfb7      	itett	lt
 800b7f4:	2301      	movlt	r3, #1
 800b7f6:	2300      	movge	r3, #0
 800b7f8:	602b      	strlt	r3, [r5, #0]
 800b7fa:	9b03      	ldrlt	r3, [sp, #12]
 800b7fc:	bfae      	itee	ge
 800b7fe:	602b      	strge	r3, [r5, #0]
 800b800:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b804:	9303      	strlt	r3, [sp, #12]
 800b806:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b80a:	4bab      	ldr	r3, [pc, #684]	; (800bab8 <_dtoa_r+0x308>)
 800b80c:	ea33 0309 	bics.w	r3, r3, r9
 800b810:	d11b      	bne.n	800b84a <_dtoa_r+0x9a>
 800b812:	f242 730f 	movw	r3, #9999	; 0x270f
 800b816:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b818:	6013      	str	r3, [r2, #0]
 800b81a:	9b02      	ldr	r3, [sp, #8]
 800b81c:	b923      	cbnz	r3, 800b828 <_dtoa_r+0x78>
 800b81e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800b822:	2800      	cmp	r0, #0
 800b824:	f000 8583 	beq.w	800c32e <_dtoa_r+0xb7e>
 800b828:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b82a:	b953      	cbnz	r3, 800b842 <_dtoa_r+0x92>
 800b82c:	4ba3      	ldr	r3, [pc, #652]	; (800babc <_dtoa_r+0x30c>)
 800b82e:	e021      	b.n	800b874 <_dtoa_r+0xc4>
 800b830:	4ba3      	ldr	r3, [pc, #652]	; (800bac0 <_dtoa_r+0x310>)
 800b832:	9306      	str	r3, [sp, #24]
 800b834:	3308      	adds	r3, #8
 800b836:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	9806      	ldr	r0, [sp, #24]
 800b83c:	b015      	add	sp, #84	; 0x54
 800b83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b842:	4b9e      	ldr	r3, [pc, #632]	; (800babc <_dtoa_r+0x30c>)
 800b844:	9306      	str	r3, [sp, #24]
 800b846:	3303      	adds	r3, #3
 800b848:	e7f5      	b.n	800b836 <_dtoa_r+0x86>
 800b84a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b84e:	2200      	movs	r2, #0
 800b850:	2300      	movs	r3, #0
 800b852:	4630      	mov	r0, r6
 800b854:	4639      	mov	r1, r7
 800b856:	f7f5 f8a3 	bl	80009a0 <__aeabi_dcmpeq>
 800b85a:	4680      	mov	r8, r0
 800b85c:	b160      	cbz	r0, 800b878 <_dtoa_r+0xc8>
 800b85e:	2301      	movs	r3, #1
 800b860:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b862:	6013      	str	r3, [r2, #0]
 800b864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b866:	2b00      	cmp	r3, #0
 800b868:	f000 855e 	beq.w	800c328 <_dtoa_r+0xb78>
 800b86c:	4b95      	ldr	r3, [pc, #596]	; (800bac4 <_dtoa_r+0x314>)
 800b86e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b870:	6013      	str	r3, [r2, #0]
 800b872:	3b01      	subs	r3, #1
 800b874:	9306      	str	r3, [sp, #24]
 800b876:	e7e0      	b.n	800b83a <_dtoa_r+0x8a>
 800b878:	ab12      	add	r3, sp, #72	; 0x48
 800b87a:	9301      	str	r3, [sp, #4]
 800b87c:	ab13      	add	r3, sp, #76	; 0x4c
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	4632      	mov	r2, r6
 800b882:	463b      	mov	r3, r7
 800b884:	4620      	mov	r0, r4
 800b886:	f001 fe15 	bl	800d4b4 <__d2b>
 800b88a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b88e:	4682      	mov	sl, r0
 800b890:	2d00      	cmp	r5, #0
 800b892:	d07d      	beq.n	800b990 <_dtoa_r+0x1e0>
 800b894:	4630      	mov	r0, r6
 800b896:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b89a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b89e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b8a2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b8a6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	4b86      	ldr	r3, [pc, #536]	; (800bac8 <_dtoa_r+0x318>)
 800b8ae:	f7f4 fc5b 	bl	8000168 <__aeabi_dsub>
 800b8b2:	a37b      	add	r3, pc, #492	; (adr r3, 800baa0 <_dtoa_r+0x2f0>)
 800b8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b8:	f7f4 fe0a 	bl	80004d0 <__aeabi_dmul>
 800b8bc:	a37a      	add	r3, pc, #488	; (adr r3, 800baa8 <_dtoa_r+0x2f8>)
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	f7f4 fc53 	bl	800016c <__adddf3>
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	460f      	mov	r7, r1
 800b8cc:	f7f4 fd9a 	bl	8000404 <__aeabi_i2d>
 800b8d0:	a377      	add	r3, pc, #476	; (adr r3, 800bab0 <_dtoa_r+0x300>)
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f7f4 fdfb 	bl	80004d0 <__aeabi_dmul>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4630      	mov	r0, r6
 800b8e0:	4639      	mov	r1, r7
 800b8e2:	f7f4 fc43 	bl	800016c <__adddf3>
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	460f      	mov	r7, r1
 800b8ea:	f7f5 f8a1 	bl	8000a30 <__aeabi_d2iz>
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	4683      	mov	fp, r0
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	4639      	mov	r1, r7
 800b8f8:	f7f5 f85c 	bl	80009b4 <__aeabi_dcmplt>
 800b8fc:	b158      	cbz	r0, 800b916 <_dtoa_r+0x166>
 800b8fe:	4658      	mov	r0, fp
 800b900:	f7f4 fd80 	bl	8000404 <__aeabi_i2d>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4630      	mov	r0, r6
 800b90a:	4639      	mov	r1, r7
 800b90c:	f7f5 f848 	bl	80009a0 <__aeabi_dcmpeq>
 800b910:	b908      	cbnz	r0, 800b916 <_dtoa_r+0x166>
 800b912:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b916:	f1bb 0f16 	cmp.w	fp, #22
 800b91a:	d858      	bhi.n	800b9ce <_dtoa_r+0x21e>
 800b91c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b920:	496a      	ldr	r1, [pc, #424]	; (800bacc <_dtoa_r+0x31c>)
 800b922:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800b926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b92a:	f7f5 f861 	bl	80009f0 <__aeabi_dcmpgt>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d04f      	beq.n	800b9d2 <_dtoa_r+0x222>
 800b932:	2300      	movs	r3, #0
 800b934:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b938:	930d      	str	r3, [sp, #52]	; 0x34
 800b93a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b93c:	1b5d      	subs	r5, r3, r5
 800b93e:	1e6b      	subs	r3, r5, #1
 800b940:	9307      	str	r3, [sp, #28]
 800b942:	bf43      	ittte	mi
 800b944:	2300      	movmi	r3, #0
 800b946:	f1c5 0801 	rsbmi	r8, r5, #1
 800b94a:	9307      	strmi	r3, [sp, #28]
 800b94c:	f04f 0800 	movpl.w	r8, #0
 800b950:	f1bb 0f00 	cmp.w	fp, #0
 800b954:	db3f      	blt.n	800b9d6 <_dtoa_r+0x226>
 800b956:	9b07      	ldr	r3, [sp, #28]
 800b958:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800b95c:	445b      	add	r3, fp
 800b95e:	9307      	str	r3, [sp, #28]
 800b960:	2300      	movs	r3, #0
 800b962:	9308      	str	r3, [sp, #32]
 800b964:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b966:	2b09      	cmp	r3, #9
 800b968:	f200 80b4 	bhi.w	800bad4 <_dtoa_r+0x324>
 800b96c:	2b05      	cmp	r3, #5
 800b96e:	bfc4      	itt	gt
 800b970:	3b04      	subgt	r3, #4
 800b972:	931e      	strgt	r3, [sp, #120]	; 0x78
 800b974:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b976:	bfc8      	it	gt
 800b978:	2600      	movgt	r6, #0
 800b97a:	f1a3 0302 	sub.w	r3, r3, #2
 800b97e:	bfd8      	it	le
 800b980:	2601      	movle	r6, #1
 800b982:	2b03      	cmp	r3, #3
 800b984:	f200 80b2 	bhi.w	800baec <_dtoa_r+0x33c>
 800b988:	e8df f003 	tbb	[pc, r3]
 800b98c:	782d8684 	.word	0x782d8684
 800b990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b992:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b994:	441d      	add	r5, r3
 800b996:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b99a:	2b20      	cmp	r3, #32
 800b99c:	dd11      	ble.n	800b9c2 <_dtoa_r+0x212>
 800b99e:	9a02      	ldr	r2, [sp, #8]
 800b9a0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b9a4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b9a8:	fa22 f000 	lsr.w	r0, r2, r0
 800b9ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b9b0:	4318      	orrs	r0, r3
 800b9b2:	f7f4 fd17 	bl	80003e4 <__aeabi_ui2d>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b9bc:	3d01      	subs	r5, #1
 800b9be:	9310      	str	r3, [sp, #64]	; 0x40
 800b9c0:	e773      	b.n	800b8aa <_dtoa_r+0xfa>
 800b9c2:	f1c3 0020 	rsb	r0, r3, #32
 800b9c6:	9b02      	ldr	r3, [sp, #8]
 800b9c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b9cc:	e7f1      	b.n	800b9b2 <_dtoa_r+0x202>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e7b2      	b.n	800b938 <_dtoa_r+0x188>
 800b9d2:	900d      	str	r0, [sp, #52]	; 0x34
 800b9d4:	e7b1      	b.n	800b93a <_dtoa_r+0x18a>
 800b9d6:	f1cb 0300 	rsb	r3, fp, #0
 800b9da:	9308      	str	r3, [sp, #32]
 800b9dc:	2300      	movs	r3, #0
 800b9de:	eba8 080b 	sub.w	r8, r8, fp
 800b9e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b9e4:	e7be      	b.n	800b964 <_dtoa_r+0x1b4>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f340 8080 	ble.w	800baf2 <_dtoa_r+0x342>
 800b9f2:	4699      	mov	r9, r3
 800b9f4:	9304      	str	r3, [sp, #16]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	2104      	movs	r1, #4
 800b9fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b9fc:	606a      	str	r2, [r5, #4]
 800b9fe:	f101 0214 	add.w	r2, r1, #20
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d97a      	bls.n	800bafc <_dtoa_r+0x34c>
 800ba06:	6869      	ldr	r1, [r5, #4]
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f001 fa1d 	bl	800ce48 <_Balloc>
 800ba0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba10:	6028      	str	r0, [r5, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f1b9 0f0e 	cmp.w	r9, #14
 800ba18:	9306      	str	r3, [sp, #24]
 800ba1a:	f200 80f0 	bhi.w	800bbfe <_dtoa_r+0x44e>
 800ba1e:	2e00      	cmp	r6, #0
 800ba20:	f000 80ed 	beq.w	800bbfe <_dtoa_r+0x44e>
 800ba24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba28:	f1bb 0f00 	cmp.w	fp, #0
 800ba2c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ba30:	dd79      	ble.n	800bb26 <_dtoa_r+0x376>
 800ba32:	4a26      	ldr	r2, [pc, #152]	; (800bacc <_dtoa_r+0x31c>)
 800ba34:	f00b 030f 	and.w	r3, fp, #15
 800ba38:	ea4f 162b 	mov.w	r6, fp, asr #4
 800ba3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba40:	06f0      	lsls	r0, r6, #27
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ba4a:	d55c      	bpl.n	800bb06 <_dtoa_r+0x356>
 800ba4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ba50:	4b1f      	ldr	r3, [pc, #124]	; (800bad0 <_dtoa_r+0x320>)
 800ba52:	2503      	movs	r5, #3
 800ba54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba58:	f7f4 fe64 	bl	8000724 <__aeabi_ddiv>
 800ba5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba60:	f006 060f 	and.w	r6, r6, #15
 800ba64:	4f1a      	ldr	r7, [pc, #104]	; (800bad0 <_dtoa_r+0x320>)
 800ba66:	2e00      	cmp	r6, #0
 800ba68:	d14f      	bne.n	800bb0a <_dtoa_r+0x35a>
 800ba6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba72:	f7f4 fe57 	bl	8000724 <__aeabi_ddiv>
 800ba76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba7a:	e06e      	b.n	800bb5a <_dtoa_r+0x3aa>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ba82:	445b      	add	r3, fp
 800ba84:	f103 0901 	add.w	r9, r3, #1
 800ba88:	9304      	str	r3, [sp, #16]
 800ba8a:	464b      	mov	r3, r9
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	bfb8      	it	lt
 800ba90:	2301      	movlt	r3, #1
 800ba92:	e7b0      	b.n	800b9f6 <_dtoa_r+0x246>
 800ba94:	2300      	movs	r3, #0
 800ba96:	e7a7      	b.n	800b9e8 <_dtoa_r+0x238>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e7f0      	b.n	800ba7e <_dtoa_r+0x2ce>
 800ba9c:	f3af 8000 	nop.w
 800baa0:	636f4361 	.word	0x636f4361
 800baa4:	3fd287a7 	.word	0x3fd287a7
 800baa8:	8b60c8b3 	.word	0x8b60c8b3
 800baac:	3fc68a28 	.word	0x3fc68a28
 800bab0:	509f79fb 	.word	0x509f79fb
 800bab4:	3fd34413 	.word	0x3fd34413
 800bab8:	7ff00000 	.word	0x7ff00000
 800babc:	080116ca 	.word	0x080116ca
 800bac0:	080116c1 	.word	0x080116c1
 800bac4:	0801159f 	.word	0x0801159f
 800bac8:	3ff80000 	.word	0x3ff80000
 800bacc:	08011758 	.word	0x08011758
 800bad0:	08011730 	.word	0x08011730
 800bad4:	2601      	movs	r6, #1
 800bad6:	2300      	movs	r3, #0
 800bad8:	9609      	str	r6, [sp, #36]	; 0x24
 800bada:	931e      	str	r3, [sp, #120]	; 0x78
 800badc:	f04f 33ff 	mov.w	r3, #4294967295
 800bae0:	2200      	movs	r2, #0
 800bae2:	9304      	str	r3, [sp, #16]
 800bae4:	4699      	mov	r9, r3
 800bae6:	2312      	movs	r3, #18
 800bae8:	921f      	str	r2, [sp, #124]	; 0x7c
 800baea:	e784      	b.n	800b9f6 <_dtoa_r+0x246>
 800baec:	2301      	movs	r3, #1
 800baee:	9309      	str	r3, [sp, #36]	; 0x24
 800baf0:	e7f4      	b.n	800badc <_dtoa_r+0x32c>
 800baf2:	2301      	movs	r3, #1
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	4699      	mov	r9, r3
 800baf8:	461a      	mov	r2, r3
 800bafa:	e7f5      	b.n	800bae8 <_dtoa_r+0x338>
 800bafc:	686a      	ldr	r2, [r5, #4]
 800bafe:	0049      	lsls	r1, r1, #1
 800bb00:	3201      	adds	r2, #1
 800bb02:	606a      	str	r2, [r5, #4]
 800bb04:	e77b      	b.n	800b9fe <_dtoa_r+0x24e>
 800bb06:	2502      	movs	r5, #2
 800bb08:	e7ac      	b.n	800ba64 <_dtoa_r+0x2b4>
 800bb0a:	07f1      	lsls	r1, r6, #31
 800bb0c:	d508      	bpl.n	800bb20 <_dtoa_r+0x370>
 800bb0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb16:	f7f4 fcdb 	bl	80004d0 <__aeabi_dmul>
 800bb1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bb1e:	3501      	adds	r5, #1
 800bb20:	1076      	asrs	r6, r6, #1
 800bb22:	3708      	adds	r7, #8
 800bb24:	e79f      	b.n	800ba66 <_dtoa_r+0x2b6>
 800bb26:	f000 80a5 	beq.w	800bc74 <_dtoa_r+0x4c4>
 800bb2a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bb2e:	f1cb 0600 	rsb	r6, fp, #0
 800bb32:	4ba2      	ldr	r3, [pc, #648]	; (800bdbc <_dtoa_r+0x60c>)
 800bb34:	f006 020f 	and.w	r2, r6, #15
 800bb38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	f7f4 fcc6 	bl	80004d0 <__aeabi_dmul>
 800bb44:	2502      	movs	r5, #2
 800bb46:	2300      	movs	r3, #0
 800bb48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb4c:	4f9c      	ldr	r7, [pc, #624]	; (800bdc0 <_dtoa_r+0x610>)
 800bb4e:	1136      	asrs	r6, r6, #4
 800bb50:	2e00      	cmp	r6, #0
 800bb52:	f040 8084 	bne.w	800bc5e <_dtoa_r+0x4ae>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d18d      	bne.n	800ba76 <_dtoa_r+0x2c6>
 800bb5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f000 808b 	beq.w	800bc78 <_dtoa_r+0x4c8>
 800bb62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bb6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb6e:	2200      	movs	r2, #0
 800bb70:	4b94      	ldr	r3, [pc, #592]	; (800bdc4 <_dtoa_r+0x614>)
 800bb72:	f7f4 ff1f 	bl	80009b4 <__aeabi_dcmplt>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d07e      	beq.n	800bc78 <_dtoa_r+0x4c8>
 800bb7a:	f1b9 0f00 	cmp.w	r9, #0
 800bb7e:	d07b      	beq.n	800bc78 <_dtoa_r+0x4c8>
 800bb80:	9b04      	ldr	r3, [sp, #16]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	dd37      	ble.n	800bbf6 <_dtoa_r+0x446>
 800bb86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	4b8e      	ldr	r3, [pc, #568]	; (800bdc8 <_dtoa_r+0x618>)
 800bb8e:	f7f4 fc9f 	bl	80004d0 <__aeabi_dmul>
 800bb92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb96:	9e04      	ldr	r6, [sp, #16]
 800bb98:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bb9c:	3501      	adds	r5, #1
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f7f4 fc30 	bl	8000404 <__aeabi_i2d>
 800bba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bba8:	f7f4 fc92 	bl	80004d0 <__aeabi_dmul>
 800bbac:	4b87      	ldr	r3, [pc, #540]	; (800bdcc <_dtoa_r+0x61c>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f7f4 fadc 	bl	800016c <__adddf3>
 800bbb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bbb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbba:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 800bbbe:	950b      	str	r5, [sp, #44]	; 0x2c
 800bbc0:	2e00      	cmp	r6, #0
 800bbc2:	d15c      	bne.n	800bc7e <_dtoa_r+0x4ce>
 800bbc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	4b81      	ldr	r3, [pc, #516]	; (800bdd0 <_dtoa_r+0x620>)
 800bbcc:	f7f4 facc 	bl	8000168 <__aeabi_dsub>
 800bbd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbd2:	462b      	mov	r3, r5
 800bbd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbd8:	f7f4 ff0a 	bl	80009f0 <__aeabi_dcmpgt>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	f040 82f7 	bne.w	800c1d0 <_dtoa_r+0xa20>
 800bbe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbe8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bbec:	f7f4 fee2 	bl	80009b4 <__aeabi_dcmplt>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	f040 82eb 	bne.w	800c1cc <_dtoa_r+0xa1c>
 800bbf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bbfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bbfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f2c0 8150 	blt.w	800bea6 <_dtoa_r+0x6f6>
 800bc06:	f1bb 0f0e 	cmp.w	fp, #14
 800bc0a:	f300 814c 	bgt.w	800bea6 <_dtoa_r+0x6f6>
 800bc0e:	4b6b      	ldr	r3, [pc, #428]	; (800bdbc <_dtoa_r+0x60c>)
 800bc10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f280 80da 	bge.w	800bdd8 <_dtoa_r+0x628>
 800bc24:	f1b9 0f00 	cmp.w	r9, #0
 800bc28:	f300 80d6 	bgt.w	800bdd8 <_dtoa_r+0x628>
 800bc2c:	f040 82cd 	bne.w	800c1ca <_dtoa_r+0xa1a>
 800bc30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc34:	2200      	movs	r2, #0
 800bc36:	4b66      	ldr	r3, [pc, #408]	; (800bdd0 <_dtoa_r+0x620>)
 800bc38:	f7f4 fc4a 	bl	80004d0 <__aeabi_dmul>
 800bc3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc40:	f7f4 fecc 	bl	80009dc <__aeabi_dcmpge>
 800bc44:	464e      	mov	r6, r9
 800bc46:	464f      	mov	r7, r9
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	f040 82a4 	bne.w	800c196 <_dtoa_r+0x9e6>
 800bc4e:	9b06      	ldr	r3, [sp, #24]
 800bc50:	9a06      	ldr	r2, [sp, #24]
 800bc52:	1c5d      	adds	r5, r3, #1
 800bc54:	2331      	movs	r3, #49	; 0x31
 800bc56:	f10b 0b01 	add.w	fp, fp, #1
 800bc5a:	7013      	strb	r3, [r2, #0]
 800bc5c:	e29f      	b.n	800c19e <_dtoa_r+0x9ee>
 800bc5e:	07f2      	lsls	r2, r6, #31
 800bc60:	d505      	bpl.n	800bc6e <_dtoa_r+0x4be>
 800bc62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc66:	f7f4 fc33 	bl	80004d0 <__aeabi_dmul>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	3501      	adds	r5, #1
 800bc6e:	1076      	asrs	r6, r6, #1
 800bc70:	3708      	adds	r7, #8
 800bc72:	e76d      	b.n	800bb50 <_dtoa_r+0x3a0>
 800bc74:	2502      	movs	r5, #2
 800bc76:	e770      	b.n	800bb5a <_dtoa_r+0x3aa>
 800bc78:	465f      	mov	r7, fp
 800bc7a:	464e      	mov	r6, r9
 800bc7c:	e78f      	b.n	800bb9e <_dtoa_r+0x3ee>
 800bc7e:	9a06      	ldr	r2, [sp, #24]
 800bc80:	4b4e      	ldr	r3, [pc, #312]	; (800bdbc <_dtoa_r+0x60c>)
 800bc82:	4432      	add	r2, r6
 800bc84:	9211      	str	r2, [sp, #68]	; 0x44
 800bc86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc88:	1e71      	subs	r1, r6, #1
 800bc8a:	2a00      	cmp	r2, #0
 800bc8c:	d048      	beq.n	800bd20 <_dtoa_r+0x570>
 800bc8e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	2000      	movs	r0, #0
 800bc98:	494e      	ldr	r1, [pc, #312]	; (800bdd4 <_dtoa_r+0x624>)
 800bc9a:	f7f4 fd43 	bl	8000724 <__aeabi_ddiv>
 800bc9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bca2:	f7f4 fa61 	bl	8000168 <__aeabi_dsub>
 800bca6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bcaa:	9d06      	ldr	r5, [sp, #24]
 800bcac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcb0:	f7f4 febe 	bl	8000a30 <__aeabi_d2iz>
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	f7f4 fba5 	bl	8000404 <__aeabi_i2d>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc2:	f7f4 fa51 	bl	8000168 <__aeabi_dsub>
 800bcc6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bcca:	3630      	adds	r6, #48	; 0x30
 800bccc:	f805 6b01 	strb.w	r6, [r5], #1
 800bcd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcd4:	f7f4 fe6e 	bl	80009b4 <__aeabi_dcmplt>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d164      	bne.n	800bda6 <_dtoa_r+0x5f6>
 800bcdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bce0:	2000      	movs	r0, #0
 800bce2:	4938      	ldr	r1, [pc, #224]	; (800bdc4 <_dtoa_r+0x614>)
 800bce4:	f7f4 fa40 	bl	8000168 <__aeabi_dsub>
 800bce8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bcec:	f7f4 fe62 	bl	80009b4 <__aeabi_dcmplt>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	f040 80b9 	bne.w	800be68 <_dtoa_r+0x6b8>
 800bcf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcf8:	429d      	cmp	r5, r3
 800bcfa:	f43f af7c 	beq.w	800bbf6 <_dtoa_r+0x446>
 800bcfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bd02:	2200      	movs	r2, #0
 800bd04:	4b30      	ldr	r3, [pc, #192]	; (800bdc8 <_dtoa_r+0x618>)
 800bd06:	f7f4 fbe3 	bl	80004d0 <__aeabi_dmul>
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bd10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd14:	4b2c      	ldr	r3, [pc, #176]	; (800bdc8 <_dtoa_r+0x618>)
 800bd16:	f7f4 fbdb 	bl	80004d0 <__aeabi_dmul>
 800bd1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd1e:	e7c5      	b.n	800bcac <_dtoa_r+0x4fc>
 800bd20:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bd24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bd2c:	f7f4 fbd0 	bl	80004d0 <__aeabi_dmul>
 800bd30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bd34:	9d06      	ldr	r5, [sp, #24]
 800bd36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd3a:	f7f4 fe79 	bl	8000a30 <__aeabi_d2iz>
 800bd3e:	4606      	mov	r6, r0
 800bd40:	f7f4 fb60 	bl	8000404 <__aeabi_i2d>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd4c:	f7f4 fa0c 	bl	8000168 <__aeabi_dsub>
 800bd50:	3630      	adds	r6, #48	; 0x30
 800bd52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd54:	f805 6b01 	strb.w	r6, [r5], #1
 800bd58:	42ab      	cmp	r3, r5
 800bd5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd5e:	f04f 0200 	mov.w	r2, #0
 800bd62:	d124      	bne.n	800bdae <_dtoa_r+0x5fe>
 800bd64:	4b1b      	ldr	r3, [pc, #108]	; (800bdd4 <_dtoa_r+0x624>)
 800bd66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bd6a:	f7f4 f9ff 	bl	800016c <__adddf3>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd76:	f7f4 fe3b 	bl	80009f0 <__aeabi_dcmpgt>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d174      	bne.n	800be68 <_dtoa_r+0x6b8>
 800bd7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bd82:	2000      	movs	r0, #0
 800bd84:	4913      	ldr	r1, [pc, #76]	; (800bdd4 <_dtoa_r+0x624>)
 800bd86:	f7f4 f9ef 	bl	8000168 <__aeabi_dsub>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd92:	f7f4 fe0f 	bl	80009b4 <__aeabi_dcmplt>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	f43f af2d 	beq.w	800bbf6 <_dtoa_r+0x446>
 800bd9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bda0:	1e6a      	subs	r2, r5, #1
 800bda2:	2b30      	cmp	r3, #48	; 0x30
 800bda4:	d001      	beq.n	800bdaa <_dtoa_r+0x5fa>
 800bda6:	46bb      	mov	fp, r7
 800bda8:	e04d      	b.n	800be46 <_dtoa_r+0x696>
 800bdaa:	4615      	mov	r5, r2
 800bdac:	e7f6      	b.n	800bd9c <_dtoa_r+0x5ec>
 800bdae:	4b06      	ldr	r3, [pc, #24]	; (800bdc8 <_dtoa_r+0x618>)
 800bdb0:	f7f4 fb8e 	bl	80004d0 <__aeabi_dmul>
 800bdb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdb8:	e7bd      	b.n	800bd36 <_dtoa_r+0x586>
 800bdba:	bf00      	nop
 800bdbc:	08011758 	.word	0x08011758
 800bdc0:	08011730 	.word	0x08011730
 800bdc4:	3ff00000 	.word	0x3ff00000
 800bdc8:	40240000 	.word	0x40240000
 800bdcc:	401c0000 	.word	0x401c0000
 800bdd0:	40140000 	.word	0x40140000
 800bdd4:	3fe00000 	.word	0x3fe00000
 800bdd8:	9d06      	ldr	r5, [sp, #24]
 800bdda:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bdde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bde2:	4630      	mov	r0, r6
 800bde4:	4639      	mov	r1, r7
 800bde6:	f7f4 fc9d 	bl	8000724 <__aeabi_ddiv>
 800bdea:	f7f4 fe21 	bl	8000a30 <__aeabi_d2iz>
 800bdee:	4680      	mov	r8, r0
 800bdf0:	f7f4 fb08 	bl	8000404 <__aeabi_i2d>
 800bdf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdf8:	f7f4 fb6a 	bl	80004d0 <__aeabi_dmul>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4630      	mov	r0, r6
 800be02:	4639      	mov	r1, r7
 800be04:	f7f4 f9b0 	bl	8000168 <__aeabi_dsub>
 800be08:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800be0c:	f805 6b01 	strb.w	r6, [r5], #1
 800be10:	9e06      	ldr	r6, [sp, #24]
 800be12:	4602      	mov	r2, r0
 800be14:	1bae      	subs	r6, r5, r6
 800be16:	45b1      	cmp	r9, r6
 800be18:	460b      	mov	r3, r1
 800be1a:	d137      	bne.n	800be8c <_dtoa_r+0x6dc>
 800be1c:	f7f4 f9a6 	bl	800016c <__adddf3>
 800be20:	4606      	mov	r6, r0
 800be22:	460f      	mov	r7, r1
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be2c:	f7f4 fdc2 	bl	80009b4 <__aeabi_dcmplt>
 800be30:	b9c8      	cbnz	r0, 800be66 <_dtoa_r+0x6b6>
 800be32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be36:	4632      	mov	r2, r6
 800be38:	463b      	mov	r3, r7
 800be3a:	f7f4 fdb1 	bl	80009a0 <__aeabi_dcmpeq>
 800be3e:	b110      	cbz	r0, 800be46 <_dtoa_r+0x696>
 800be40:	f018 0f01 	tst.w	r8, #1
 800be44:	d10f      	bne.n	800be66 <_dtoa_r+0x6b6>
 800be46:	4651      	mov	r1, sl
 800be48:	4620      	mov	r0, r4
 800be4a:	f001 f831 	bl	800ceb0 <_Bfree>
 800be4e:	2300      	movs	r3, #0
 800be50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be52:	702b      	strb	r3, [r5, #0]
 800be54:	f10b 0301 	add.w	r3, fp, #1
 800be58:	6013      	str	r3, [r2, #0]
 800be5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f43f acec 	beq.w	800b83a <_dtoa_r+0x8a>
 800be62:	601d      	str	r5, [r3, #0]
 800be64:	e4e9      	b.n	800b83a <_dtoa_r+0x8a>
 800be66:	465f      	mov	r7, fp
 800be68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be6c:	1e6b      	subs	r3, r5, #1
 800be6e:	2a39      	cmp	r2, #57	; 0x39
 800be70:	d106      	bne.n	800be80 <_dtoa_r+0x6d0>
 800be72:	9a06      	ldr	r2, [sp, #24]
 800be74:	429a      	cmp	r2, r3
 800be76:	d107      	bne.n	800be88 <_dtoa_r+0x6d8>
 800be78:	2330      	movs	r3, #48	; 0x30
 800be7a:	7013      	strb	r3, [r2, #0]
 800be7c:	4613      	mov	r3, r2
 800be7e:	3701      	adds	r7, #1
 800be80:	781a      	ldrb	r2, [r3, #0]
 800be82:	3201      	adds	r2, #1
 800be84:	701a      	strb	r2, [r3, #0]
 800be86:	e78e      	b.n	800bda6 <_dtoa_r+0x5f6>
 800be88:	461d      	mov	r5, r3
 800be8a:	e7ed      	b.n	800be68 <_dtoa_r+0x6b8>
 800be8c:	2200      	movs	r2, #0
 800be8e:	4bb5      	ldr	r3, [pc, #724]	; (800c164 <_dtoa_r+0x9b4>)
 800be90:	f7f4 fb1e 	bl	80004d0 <__aeabi_dmul>
 800be94:	2200      	movs	r2, #0
 800be96:	2300      	movs	r3, #0
 800be98:	4606      	mov	r6, r0
 800be9a:	460f      	mov	r7, r1
 800be9c:	f7f4 fd80 	bl	80009a0 <__aeabi_dcmpeq>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d09c      	beq.n	800bdde <_dtoa_r+0x62e>
 800bea4:	e7cf      	b.n	800be46 <_dtoa_r+0x696>
 800bea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bea8:	2a00      	cmp	r2, #0
 800beaa:	f000 8129 	beq.w	800c100 <_dtoa_r+0x950>
 800beae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800beb0:	2a01      	cmp	r2, #1
 800beb2:	f300 810e 	bgt.w	800c0d2 <_dtoa_r+0x922>
 800beb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800beb8:	2a00      	cmp	r2, #0
 800beba:	f000 8106 	beq.w	800c0ca <_dtoa_r+0x91a>
 800bebe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bec2:	4645      	mov	r5, r8
 800bec4:	9e08      	ldr	r6, [sp, #32]
 800bec6:	9a07      	ldr	r2, [sp, #28]
 800bec8:	2101      	movs	r1, #1
 800beca:	441a      	add	r2, r3
 800becc:	4620      	mov	r0, r4
 800bece:	4498      	add	r8, r3
 800bed0:	9207      	str	r2, [sp, #28]
 800bed2:	f001 f8cb 	bl	800d06c <__i2b>
 800bed6:	4607      	mov	r7, r0
 800bed8:	2d00      	cmp	r5, #0
 800beda:	dd0b      	ble.n	800bef4 <_dtoa_r+0x744>
 800bedc:	9b07      	ldr	r3, [sp, #28]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	dd08      	ble.n	800bef4 <_dtoa_r+0x744>
 800bee2:	42ab      	cmp	r3, r5
 800bee4:	bfa8      	it	ge
 800bee6:	462b      	movge	r3, r5
 800bee8:	9a07      	ldr	r2, [sp, #28]
 800beea:	eba8 0803 	sub.w	r8, r8, r3
 800beee:	1aed      	subs	r5, r5, r3
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	9307      	str	r3, [sp, #28]
 800bef4:	9b08      	ldr	r3, [sp, #32]
 800bef6:	b1fb      	cbz	r3, 800bf38 <_dtoa_r+0x788>
 800bef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 8104 	beq.w	800c108 <_dtoa_r+0x958>
 800bf00:	2e00      	cmp	r6, #0
 800bf02:	dd11      	ble.n	800bf28 <_dtoa_r+0x778>
 800bf04:	4639      	mov	r1, r7
 800bf06:	4632      	mov	r2, r6
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f001 f945 	bl	800d198 <__pow5mult>
 800bf0e:	4652      	mov	r2, sl
 800bf10:	4601      	mov	r1, r0
 800bf12:	4607      	mov	r7, r0
 800bf14:	4620      	mov	r0, r4
 800bf16:	f001 f8b2 	bl	800d07e <__multiply>
 800bf1a:	4651      	mov	r1, sl
 800bf1c:	900a      	str	r0, [sp, #40]	; 0x28
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f000 ffc6 	bl	800ceb0 <_Bfree>
 800bf24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf26:	469a      	mov	sl, r3
 800bf28:	9b08      	ldr	r3, [sp, #32]
 800bf2a:	1b9a      	subs	r2, r3, r6
 800bf2c:	d004      	beq.n	800bf38 <_dtoa_r+0x788>
 800bf2e:	4651      	mov	r1, sl
 800bf30:	4620      	mov	r0, r4
 800bf32:	f001 f931 	bl	800d198 <__pow5mult>
 800bf36:	4682      	mov	sl, r0
 800bf38:	2101      	movs	r1, #1
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f001 f896 	bl	800d06c <__i2b>
 800bf40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf42:	4606      	mov	r6, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f340 80e1 	ble.w	800c10c <_dtoa_r+0x95c>
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	4601      	mov	r1, r0
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f001 f922 	bl	800d198 <__pow5mult>
 800bf54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bf56:	4606      	mov	r6, r0
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	f340 80da 	ble.w	800c112 <_dtoa_r+0x962>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	9308      	str	r3, [sp, #32]
 800bf62:	6933      	ldr	r3, [r6, #16]
 800bf64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf68:	6918      	ldr	r0, [r3, #16]
 800bf6a:	f001 f831 	bl	800cfd0 <__hi0bits>
 800bf6e:	f1c0 0020 	rsb	r0, r0, #32
 800bf72:	9b07      	ldr	r3, [sp, #28]
 800bf74:	4418      	add	r0, r3
 800bf76:	f010 001f 	ands.w	r0, r0, #31
 800bf7a:	f000 80f0 	beq.w	800c15e <_dtoa_r+0x9ae>
 800bf7e:	f1c0 0320 	rsb	r3, r0, #32
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	f340 80e2 	ble.w	800c14c <_dtoa_r+0x99c>
 800bf88:	9b07      	ldr	r3, [sp, #28]
 800bf8a:	f1c0 001c 	rsb	r0, r0, #28
 800bf8e:	4480      	add	r8, r0
 800bf90:	4405      	add	r5, r0
 800bf92:	4403      	add	r3, r0
 800bf94:	9307      	str	r3, [sp, #28]
 800bf96:	f1b8 0f00 	cmp.w	r8, #0
 800bf9a:	dd05      	ble.n	800bfa8 <_dtoa_r+0x7f8>
 800bf9c:	4651      	mov	r1, sl
 800bf9e:	4642      	mov	r2, r8
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	f001 f947 	bl	800d234 <__lshift>
 800bfa6:	4682      	mov	sl, r0
 800bfa8:	9b07      	ldr	r3, [sp, #28]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	dd05      	ble.n	800bfba <_dtoa_r+0x80a>
 800bfae:	4631      	mov	r1, r6
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f001 f93e 	bl	800d234 <__lshift>
 800bfb8:	4606      	mov	r6, r0
 800bfba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f000 80d3 	beq.w	800c168 <_dtoa_r+0x9b8>
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	4650      	mov	r0, sl
 800bfc6:	f001 f986 	bl	800d2d6 <__mcmp>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	f280 80cc 	bge.w	800c168 <_dtoa_r+0x9b8>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	4651      	mov	r1, sl
 800bfd4:	220a      	movs	r2, #10
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f000 ff81 	bl	800cede <__multadd>
 800bfdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfde:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bfe2:	4682      	mov	sl, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f000 81a9 	beq.w	800c33c <_dtoa_r+0xb8c>
 800bfea:	2300      	movs	r3, #0
 800bfec:	4639      	mov	r1, r7
 800bfee:	220a      	movs	r2, #10
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 ff74 	bl	800cede <__multadd>
 800bff6:	9b04      	ldr	r3, [sp, #16]
 800bff8:	4607      	mov	r7, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	dc03      	bgt.n	800c006 <_dtoa_r+0x856>
 800bffe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c000:	2b02      	cmp	r3, #2
 800c002:	f300 80b9 	bgt.w	800c178 <_dtoa_r+0x9c8>
 800c006:	2d00      	cmp	r5, #0
 800c008:	dd05      	ble.n	800c016 <_dtoa_r+0x866>
 800c00a:	4639      	mov	r1, r7
 800c00c:	462a      	mov	r2, r5
 800c00e:	4620      	mov	r0, r4
 800c010:	f001 f910 	bl	800d234 <__lshift>
 800c014:	4607      	mov	r7, r0
 800c016:	9b08      	ldr	r3, [sp, #32]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f000 8110 	beq.w	800c23e <_dtoa_r+0xa8e>
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	4620      	mov	r0, r4
 800c022:	f000 ff11 	bl	800ce48 <_Balloc>
 800c026:	4605      	mov	r5, r0
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	f107 010c 	add.w	r1, r7, #12
 800c02e:	3202      	adds	r2, #2
 800c030:	0092      	lsls	r2, r2, #2
 800c032:	300c      	adds	r0, #12
 800c034:	f7fd fce4 	bl	8009a00 <memcpy>
 800c038:	2201      	movs	r2, #1
 800c03a:	4629      	mov	r1, r5
 800c03c:	4620      	mov	r0, r4
 800c03e:	f001 f8f9 	bl	800d234 <__lshift>
 800c042:	9707      	str	r7, [sp, #28]
 800c044:	4607      	mov	r7, r0
 800c046:	9b02      	ldr	r3, [sp, #8]
 800c048:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	9308      	str	r3, [sp, #32]
 800c052:	4631      	mov	r1, r6
 800c054:	4650      	mov	r0, sl
 800c056:	f7ff fb1e 	bl	800b696 <quorem>
 800c05a:	9907      	ldr	r1, [sp, #28]
 800c05c:	4605      	mov	r5, r0
 800c05e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c062:	4650      	mov	r0, sl
 800c064:	f001 f937 	bl	800d2d6 <__mcmp>
 800c068:	463a      	mov	r2, r7
 800c06a:	9002      	str	r0, [sp, #8]
 800c06c:	4631      	mov	r1, r6
 800c06e:	4620      	mov	r0, r4
 800c070:	f001 f94b 	bl	800d30a <__mdiff>
 800c074:	68c3      	ldr	r3, [r0, #12]
 800c076:	4602      	mov	r2, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f040 80e2 	bne.w	800c242 <_dtoa_r+0xa92>
 800c07e:	4601      	mov	r1, r0
 800c080:	9009      	str	r0, [sp, #36]	; 0x24
 800c082:	4650      	mov	r0, sl
 800c084:	f001 f927 	bl	800d2d6 <__mcmp>
 800c088:	4603      	mov	r3, r0
 800c08a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c08c:	4611      	mov	r1, r2
 800c08e:	4620      	mov	r0, r4
 800c090:	9309      	str	r3, [sp, #36]	; 0x24
 800c092:	f000 ff0d 	bl	800ceb0 <_Bfree>
 800c096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f040 80d4 	bne.w	800c246 <_dtoa_r+0xa96>
 800c09e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c0a0:	2a00      	cmp	r2, #0
 800c0a2:	f040 80d0 	bne.w	800c246 <_dtoa_r+0xa96>
 800c0a6:	9a08      	ldr	r2, [sp, #32]
 800c0a8:	2a00      	cmp	r2, #0
 800c0aa:	f040 80cc 	bne.w	800c246 <_dtoa_r+0xa96>
 800c0ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c0b2:	f000 80e8 	beq.w	800c286 <_dtoa_r+0xad6>
 800c0b6:	9b02      	ldr	r3, [sp, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	dd01      	ble.n	800c0c0 <_dtoa_r+0x910>
 800c0bc:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800c0c0:	f108 0501 	add.w	r5, r8, #1
 800c0c4:	f888 9000 	strb.w	r9, [r8]
 800c0c8:	e06b      	b.n	800c1a2 <_dtoa_r+0x9f2>
 800c0ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0cc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0d0:	e6f7      	b.n	800bec2 <_dtoa_r+0x712>
 800c0d2:	9b08      	ldr	r3, [sp, #32]
 800c0d4:	f109 36ff 	add.w	r6, r9, #4294967295
 800c0d8:	42b3      	cmp	r3, r6
 800c0da:	bfb7      	itett	lt
 800c0dc:	9b08      	ldrlt	r3, [sp, #32]
 800c0de:	1b9e      	subge	r6, r3, r6
 800c0e0:	1af2      	sublt	r2, r6, r3
 800c0e2:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800c0e4:	bfbf      	itttt	lt
 800c0e6:	9608      	strlt	r6, [sp, #32]
 800c0e8:	189b      	addlt	r3, r3, r2
 800c0ea:	930c      	strlt	r3, [sp, #48]	; 0x30
 800c0ec:	2600      	movlt	r6, #0
 800c0ee:	f1b9 0f00 	cmp.w	r9, #0
 800c0f2:	bfb9      	ittee	lt
 800c0f4:	eba8 0509 	sublt.w	r5, r8, r9
 800c0f8:	2300      	movlt	r3, #0
 800c0fa:	4645      	movge	r5, r8
 800c0fc:	464b      	movge	r3, r9
 800c0fe:	e6e2      	b.n	800bec6 <_dtoa_r+0x716>
 800c100:	9e08      	ldr	r6, [sp, #32]
 800c102:	4645      	mov	r5, r8
 800c104:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c106:	e6e7      	b.n	800bed8 <_dtoa_r+0x728>
 800c108:	9a08      	ldr	r2, [sp, #32]
 800c10a:	e710      	b.n	800bf2e <_dtoa_r+0x77e>
 800c10c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c10e:	2b01      	cmp	r3, #1
 800c110:	dc18      	bgt.n	800c144 <_dtoa_r+0x994>
 800c112:	9b02      	ldr	r3, [sp, #8]
 800c114:	b9b3      	cbnz	r3, 800c144 <_dtoa_r+0x994>
 800c116:	9b03      	ldr	r3, [sp, #12]
 800c118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c11c:	b9a3      	cbnz	r3, 800c148 <_dtoa_r+0x998>
 800c11e:	9b03      	ldr	r3, [sp, #12]
 800c120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c124:	0d1b      	lsrs	r3, r3, #20
 800c126:	051b      	lsls	r3, r3, #20
 800c128:	b12b      	cbz	r3, 800c136 <_dtoa_r+0x986>
 800c12a:	9b07      	ldr	r3, [sp, #28]
 800c12c:	f108 0801 	add.w	r8, r8, #1
 800c130:	3301      	adds	r3, #1
 800c132:	9307      	str	r3, [sp, #28]
 800c134:	2301      	movs	r3, #1
 800c136:	9308      	str	r3, [sp, #32]
 800c138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f47f af11 	bne.w	800bf62 <_dtoa_r+0x7b2>
 800c140:	2001      	movs	r0, #1
 800c142:	e716      	b.n	800bf72 <_dtoa_r+0x7c2>
 800c144:	2300      	movs	r3, #0
 800c146:	e7f6      	b.n	800c136 <_dtoa_r+0x986>
 800c148:	9b02      	ldr	r3, [sp, #8]
 800c14a:	e7f4      	b.n	800c136 <_dtoa_r+0x986>
 800c14c:	f43f af23 	beq.w	800bf96 <_dtoa_r+0x7e6>
 800c150:	9a07      	ldr	r2, [sp, #28]
 800c152:	331c      	adds	r3, #28
 800c154:	441a      	add	r2, r3
 800c156:	4498      	add	r8, r3
 800c158:	441d      	add	r5, r3
 800c15a:	4613      	mov	r3, r2
 800c15c:	e71a      	b.n	800bf94 <_dtoa_r+0x7e4>
 800c15e:	4603      	mov	r3, r0
 800c160:	e7f6      	b.n	800c150 <_dtoa_r+0x9a0>
 800c162:	bf00      	nop
 800c164:	40240000 	.word	0x40240000
 800c168:	f1b9 0f00 	cmp.w	r9, #0
 800c16c:	dc33      	bgt.n	800c1d6 <_dtoa_r+0xa26>
 800c16e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c170:	2b02      	cmp	r3, #2
 800c172:	dd30      	ble.n	800c1d6 <_dtoa_r+0xa26>
 800c174:	f8cd 9010 	str.w	r9, [sp, #16]
 800c178:	9b04      	ldr	r3, [sp, #16]
 800c17a:	b963      	cbnz	r3, 800c196 <_dtoa_r+0x9e6>
 800c17c:	4631      	mov	r1, r6
 800c17e:	2205      	movs	r2, #5
 800c180:	4620      	mov	r0, r4
 800c182:	f000 feac 	bl	800cede <__multadd>
 800c186:	4601      	mov	r1, r0
 800c188:	4606      	mov	r6, r0
 800c18a:	4650      	mov	r0, sl
 800c18c:	f001 f8a3 	bl	800d2d6 <__mcmp>
 800c190:	2800      	cmp	r0, #0
 800c192:	f73f ad5c 	bgt.w	800bc4e <_dtoa_r+0x49e>
 800c196:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c198:	9d06      	ldr	r5, [sp, #24]
 800c19a:	ea6f 0b03 	mvn.w	fp, r3
 800c19e:	2300      	movs	r3, #0
 800c1a0:	9307      	str	r3, [sp, #28]
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f000 fe83 	bl	800ceb0 <_Bfree>
 800c1aa:	2f00      	cmp	r7, #0
 800c1ac:	f43f ae4b 	beq.w	800be46 <_dtoa_r+0x696>
 800c1b0:	9b07      	ldr	r3, [sp, #28]
 800c1b2:	b12b      	cbz	r3, 800c1c0 <_dtoa_r+0xa10>
 800c1b4:	42bb      	cmp	r3, r7
 800c1b6:	d003      	beq.n	800c1c0 <_dtoa_r+0xa10>
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f000 fe78 	bl	800ceb0 <_Bfree>
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f000 fe74 	bl	800ceb0 <_Bfree>
 800c1c8:	e63d      	b.n	800be46 <_dtoa_r+0x696>
 800c1ca:	2600      	movs	r6, #0
 800c1cc:	4637      	mov	r7, r6
 800c1ce:	e7e2      	b.n	800c196 <_dtoa_r+0x9e6>
 800c1d0:	46bb      	mov	fp, r7
 800c1d2:	4637      	mov	r7, r6
 800c1d4:	e53b      	b.n	800bc4e <_dtoa_r+0x49e>
 800c1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1d8:	f8cd 9010 	str.w	r9, [sp, #16]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f47f af12 	bne.w	800c006 <_dtoa_r+0x856>
 800c1e2:	9d06      	ldr	r5, [sp, #24]
 800c1e4:	4631      	mov	r1, r6
 800c1e6:	4650      	mov	r0, sl
 800c1e8:	f7ff fa55 	bl	800b696 <quorem>
 800c1ec:	9b06      	ldr	r3, [sp, #24]
 800c1ee:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c1f2:	f805 9b01 	strb.w	r9, [r5], #1
 800c1f6:	9a04      	ldr	r2, [sp, #16]
 800c1f8:	1aeb      	subs	r3, r5, r3
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	f300 8081 	bgt.w	800c302 <_dtoa_r+0xb52>
 800c200:	9b06      	ldr	r3, [sp, #24]
 800c202:	2a01      	cmp	r2, #1
 800c204:	bfac      	ite	ge
 800c206:	189b      	addge	r3, r3, r2
 800c208:	3301      	addlt	r3, #1
 800c20a:	4698      	mov	r8, r3
 800c20c:	2300      	movs	r3, #0
 800c20e:	9307      	str	r3, [sp, #28]
 800c210:	4651      	mov	r1, sl
 800c212:	2201      	movs	r2, #1
 800c214:	4620      	mov	r0, r4
 800c216:	f001 f80d 	bl	800d234 <__lshift>
 800c21a:	4631      	mov	r1, r6
 800c21c:	4682      	mov	sl, r0
 800c21e:	f001 f85a 	bl	800d2d6 <__mcmp>
 800c222:	2800      	cmp	r0, #0
 800c224:	dc34      	bgt.n	800c290 <_dtoa_r+0xae0>
 800c226:	d102      	bne.n	800c22e <_dtoa_r+0xa7e>
 800c228:	f019 0f01 	tst.w	r9, #1
 800c22c:	d130      	bne.n	800c290 <_dtoa_r+0xae0>
 800c22e:	4645      	mov	r5, r8
 800c230:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c234:	1e6a      	subs	r2, r5, #1
 800c236:	2b30      	cmp	r3, #48	; 0x30
 800c238:	d1b3      	bne.n	800c1a2 <_dtoa_r+0x9f2>
 800c23a:	4615      	mov	r5, r2
 800c23c:	e7f8      	b.n	800c230 <_dtoa_r+0xa80>
 800c23e:	4638      	mov	r0, r7
 800c240:	e6ff      	b.n	800c042 <_dtoa_r+0x892>
 800c242:	2301      	movs	r3, #1
 800c244:	e722      	b.n	800c08c <_dtoa_r+0x8dc>
 800c246:	9a02      	ldr	r2, [sp, #8]
 800c248:	2a00      	cmp	r2, #0
 800c24a:	db04      	blt.n	800c256 <_dtoa_r+0xaa6>
 800c24c:	d128      	bne.n	800c2a0 <_dtoa_r+0xaf0>
 800c24e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c250:	bb32      	cbnz	r2, 800c2a0 <_dtoa_r+0xaf0>
 800c252:	9a08      	ldr	r2, [sp, #32]
 800c254:	bb22      	cbnz	r2, 800c2a0 <_dtoa_r+0xaf0>
 800c256:	2b00      	cmp	r3, #0
 800c258:	f77f af32 	ble.w	800c0c0 <_dtoa_r+0x910>
 800c25c:	4651      	mov	r1, sl
 800c25e:	2201      	movs	r2, #1
 800c260:	4620      	mov	r0, r4
 800c262:	f000 ffe7 	bl	800d234 <__lshift>
 800c266:	4631      	mov	r1, r6
 800c268:	4682      	mov	sl, r0
 800c26a:	f001 f834 	bl	800d2d6 <__mcmp>
 800c26e:	2800      	cmp	r0, #0
 800c270:	dc05      	bgt.n	800c27e <_dtoa_r+0xace>
 800c272:	f47f af25 	bne.w	800c0c0 <_dtoa_r+0x910>
 800c276:	f019 0f01 	tst.w	r9, #1
 800c27a:	f43f af21 	beq.w	800c0c0 <_dtoa_r+0x910>
 800c27e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c282:	f47f af1b 	bne.w	800c0bc <_dtoa_r+0x90c>
 800c286:	2339      	movs	r3, #57	; 0x39
 800c288:	f108 0801 	add.w	r8, r8, #1
 800c28c:	f808 3c01 	strb.w	r3, [r8, #-1]
 800c290:	4645      	mov	r5, r8
 800c292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c296:	1e6a      	subs	r2, r5, #1
 800c298:	2b39      	cmp	r3, #57	; 0x39
 800c29a:	d03a      	beq.n	800c312 <_dtoa_r+0xb62>
 800c29c:	3301      	adds	r3, #1
 800c29e:	e03f      	b.n	800c320 <_dtoa_r+0xb70>
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f108 0501 	add.w	r5, r8, #1
 800c2a6:	dd05      	ble.n	800c2b4 <_dtoa_r+0xb04>
 800c2a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c2ac:	d0eb      	beq.n	800c286 <_dtoa_r+0xad6>
 800c2ae:	f109 0901 	add.w	r9, r9, #1
 800c2b2:	e707      	b.n	800c0c4 <_dtoa_r+0x914>
 800c2b4:	9b06      	ldr	r3, [sp, #24]
 800c2b6:	9a04      	ldr	r2, [sp, #16]
 800c2b8:	1aeb      	subs	r3, r5, r3
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	46a8      	mov	r8, r5
 800c2be:	f805 9c01 	strb.w	r9, [r5, #-1]
 800c2c2:	d0a5      	beq.n	800c210 <_dtoa_r+0xa60>
 800c2c4:	4651      	mov	r1, sl
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	220a      	movs	r2, #10
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 fe07 	bl	800cede <__multadd>
 800c2d0:	9b07      	ldr	r3, [sp, #28]
 800c2d2:	4682      	mov	sl, r0
 800c2d4:	42bb      	cmp	r3, r7
 800c2d6:	f04f 020a 	mov.w	r2, #10
 800c2da:	f04f 0300 	mov.w	r3, #0
 800c2de:	9907      	ldr	r1, [sp, #28]
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	d104      	bne.n	800c2ee <_dtoa_r+0xb3e>
 800c2e4:	f000 fdfb 	bl	800cede <__multadd>
 800c2e8:	9007      	str	r0, [sp, #28]
 800c2ea:	4607      	mov	r7, r0
 800c2ec:	e6b1      	b.n	800c052 <_dtoa_r+0x8a2>
 800c2ee:	f000 fdf6 	bl	800cede <__multadd>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	9007      	str	r0, [sp, #28]
 800c2f6:	220a      	movs	r2, #10
 800c2f8:	4639      	mov	r1, r7
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f000 fdef 	bl	800cede <__multadd>
 800c300:	e7f3      	b.n	800c2ea <_dtoa_r+0xb3a>
 800c302:	4651      	mov	r1, sl
 800c304:	2300      	movs	r3, #0
 800c306:	220a      	movs	r2, #10
 800c308:	4620      	mov	r0, r4
 800c30a:	f000 fde8 	bl	800cede <__multadd>
 800c30e:	4682      	mov	sl, r0
 800c310:	e768      	b.n	800c1e4 <_dtoa_r+0xa34>
 800c312:	9b06      	ldr	r3, [sp, #24]
 800c314:	4293      	cmp	r3, r2
 800c316:	d105      	bne.n	800c324 <_dtoa_r+0xb74>
 800c318:	2331      	movs	r3, #49	; 0x31
 800c31a:	9a06      	ldr	r2, [sp, #24]
 800c31c:	f10b 0b01 	add.w	fp, fp, #1
 800c320:	7013      	strb	r3, [r2, #0]
 800c322:	e73e      	b.n	800c1a2 <_dtoa_r+0x9f2>
 800c324:	4615      	mov	r5, r2
 800c326:	e7b4      	b.n	800c292 <_dtoa_r+0xae2>
 800c328:	4b09      	ldr	r3, [pc, #36]	; (800c350 <_dtoa_r+0xba0>)
 800c32a:	f7ff baa3 	b.w	800b874 <_dtoa_r+0xc4>
 800c32e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c330:	2b00      	cmp	r3, #0
 800c332:	f47f aa7d 	bne.w	800b830 <_dtoa_r+0x80>
 800c336:	4b07      	ldr	r3, [pc, #28]	; (800c354 <_dtoa_r+0xba4>)
 800c338:	f7ff ba9c 	b.w	800b874 <_dtoa_r+0xc4>
 800c33c:	9b04      	ldr	r3, [sp, #16]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f73f af4f 	bgt.w	800c1e2 <_dtoa_r+0xa32>
 800c344:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c346:	2b02      	cmp	r3, #2
 800c348:	f77f af4b 	ble.w	800c1e2 <_dtoa_r+0xa32>
 800c34c:	e714      	b.n	800c178 <_dtoa_r+0x9c8>
 800c34e:	bf00      	nop
 800c350:	0801159e 	.word	0x0801159e
 800c354:	080116c1 	.word	0x080116c1

0800c358 <rshift>:
 800c358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c35a:	6906      	ldr	r6, [r0, #16]
 800c35c:	114b      	asrs	r3, r1, #5
 800c35e:	42b3      	cmp	r3, r6
 800c360:	f100 0514 	add.w	r5, r0, #20
 800c364:	da2b      	bge.n	800c3be <rshift+0x66>
 800c366:	f011 011f 	ands.w	r1, r1, #31
 800c36a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800c36e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800c372:	d108      	bne.n	800c386 <rshift+0x2e>
 800c374:	4629      	mov	r1, r5
 800c376:	42b2      	cmp	r2, r6
 800c378:	460b      	mov	r3, r1
 800c37a:	d210      	bcs.n	800c39e <rshift+0x46>
 800c37c:	f852 3b04 	ldr.w	r3, [r2], #4
 800c380:	f841 3b04 	str.w	r3, [r1], #4
 800c384:	e7f7      	b.n	800c376 <rshift+0x1e>
 800c386:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800c38a:	462b      	mov	r3, r5
 800c38c:	f1c1 0e20 	rsb	lr, r1, #32
 800c390:	3204      	adds	r2, #4
 800c392:	40cc      	lsrs	r4, r1
 800c394:	42b2      	cmp	r2, r6
 800c396:	d308      	bcc.n	800c3aa <rshift+0x52>
 800c398:	601c      	str	r4, [r3, #0]
 800c39a:	b104      	cbz	r4, 800c39e <rshift+0x46>
 800c39c:	3304      	adds	r3, #4
 800c39e:	1b5b      	subs	r3, r3, r5
 800c3a0:	109b      	asrs	r3, r3, #2
 800c3a2:	6103      	str	r3, [r0, #16]
 800c3a4:	b903      	cbnz	r3, 800c3a8 <rshift+0x50>
 800c3a6:	6143      	str	r3, [r0, #20]
 800c3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3aa:	6817      	ldr	r7, [r2, #0]
 800c3ac:	fa07 f70e 	lsl.w	r7, r7, lr
 800c3b0:	433c      	orrs	r4, r7
 800c3b2:	f843 4b04 	str.w	r4, [r3], #4
 800c3b6:	f852 4b04 	ldr.w	r4, [r2], #4
 800c3ba:	40cc      	lsrs	r4, r1
 800c3bc:	e7ea      	b.n	800c394 <rshift+0x3c>
 800c3be:	462b      	mov	r3, r5
 800c3c0:	e7ed      	b.n	800c39e <rshift+0x46>

0800c3c2 <__hexdig_fun>:
 800c3c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c3c6:	2b09      	cmp	r3, #9
 800c3c8:	d802      	bhi.n	800c3d0 <__hexdig_fun+0xe>
 800c3ca:	3820      	subs	r0, #32
 800c3cc:	b2c0      	uxtb	r0, r0
 800c3ce:	4770      	bx	lr
 800c3d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c3d4:	2b05      	cmp	r3, #5
 800c3d6:	d801      	bhi.n	800c3dc <__hexdig_fun+0x1a>
 800c3d8:	3847      	subs	r0, #71	; 0x47
 800c3da:	e7f7      	b.n	800c3cc <__hexdig_fun+0xa>
 800c3dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c3e0:	2b05      	cmp	r3, #5
 800c3e2:	d801      	bhi.n	800c3e8 <__hexdig_fun+0x26>
 800c3e4:	3827      	subs	r0, #39	; 0x27
 800c3e6:	e7f1      	b.n	800c3cc <__hexdig_fun+0xa>
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	4770      	bx	lr

0800c3ec <__gethex>:
 800c3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f0:	b08b      	sub	sp, #44	; 0x2c
 800c3f2:	9002      	str	r0, [sp, #8]
 800c3f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c3f6:	468a      	mov	sl, r1
 800c3f8:	4690      	mov	r8, r2
 800c3fa:	9306      	str	r3, [sp, #24]
 800c3fc:	f000 faca 	bl	800c994 <__localeconv_l>
 800c400:	6803      	ldr	r3, [r0, #0]
 800c402:	f04f 0b00 	mov.w	fp, #0
 800c406:	4618      	mov	r0, r3
 800c408:	9303      	str	r3, [sp, #12]
 800c40a:	f7f3 fea1 	bl	8000150 <strlen>
 800c40e:	9b03      	ldr	r3, [sp, #12]
 800c410:	9001      	str	r0, [sp, #4]
 800c412:	4403      	add	r3, r0
 800c414:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c418:	9307      	str	r3, [sp, #28]
 800c41a:	f8da 3000 	ldr.w	r3, [sl]
 800c41e:	3302      	adds	r3, #2
 800c420:	461f      	mov	r7, r3
 800c422:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c426:	2830      	cmp	r0, #48	; 0x30
 800c428:	d06c      	beq.n	800c504 <__gethex+0x118>
 800c42a:	f7ff ffca 	bl	800c3c2 <__hexdig_fun>
 800c42e:	4604      	mov	r4, r0
 800c430:	2800      	cmp	r0, #0
 800c432:	d16a      	bne.n	800c50a <__gethex+0x11e>
 800c434:	9a01      	ldr	r2, [sp, #4]
 800c436:	9903      	ldr	r1, [sp, #12]
 800c438:	4638      	mov	r0, r7
 800c43a:	f001 fa83 	bl	800d944 <strncmp>
 800c43e:	2800      	cmp	r0, #0
 800c440:	d166      	bne.n	800c510 <__gethex+0x124>
 800c442:	9b01      	ldr	r3, [sp, #4]
 800c444:	5cf8      	ldrb	r0, [r7, r3]
 800c446:	18fe      	adds	r6, r7, r3
 800c448:	f7ff ffbb 	bl	800c3c2 <__hexdig_fun>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d062      	beq.n	800c516 <__gethex+0x12a>
 800c450:	4633      	mov	r3, r6
 800c452:	7818      	ldrb	r0, [r3, #0]
 800c454:	461f      	mov	r7, r3
 800c456:	2830      	cmp	r0, #48	; 0x30
 800c458:	f103 0301 	add.w	r3, r3, #1
 800c45c:	d0f9      	beq.n	800c452 <__gethex+0x66>
 800c45e:	f7ff ffb0 	bl	800c3c2 <__hexdig_fun>
 800c462:	fab0 f580 	clz	r5, r0
 800c466:	4634      	mov	r4, r6
 800c468:	f04f 0b01 	mov.w	fp, #1
 800c46c:	096d      	lsrs	r5, r5, #5
 800c46e:	463a      	mov	r2, r7
 800c470:	4616      	mov	r6, r2
 800c472:	7830      	ldrb	r0, [r6, #0]
 800c474:	3201      	adds	r2, #1
 800c476:	f7ff ffa4 	bl	800c3c2 <__hexdig_fun>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	d1f8      	bne.n	800c470 <__gethex+0x84>
 800c47e:	9a01      	ldr	r2, [sp, #4]
 800c480:	9903      	ldr	r1, [sp, #12]
 800c482:	4630      	mov	r0, r6
 800c484:	f001 fa5e 	bl	800d944 <strncmp>
 800c488:	b950      	cbnz	r0, 800c4a0 <__gethex+0xb4>
 800c48a:	b954      	cbnz	r4, 800c4a2 <__gethex+0xb6>
 800c48c:	9b01      	ldr	r3, [sp, #4]
 800c48e:	18f4      	adds	r4, r6, r3
 800c490:	4622      	mov	r2, r4
 800c492:	4616      	mov	r6, r2
 800c494:	7830      	ldrb	r0, [r6, #0]
 800c496:	3201      	adds	r2, #1
 800c498:	f7ff ff93 	bl	800c3c2 <__hexdig_fun>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	d1f8      	bne.n	800c492 <__gethex+0xa6>
 800c4a0:	b10c      	cbz	r4, 800c4a6 <__gethex+0xba>
 800c4a2:	1ba4      	subs	r4, r4, r6
 800c4a4:	00a4      	lsls	r4, r4, #2
 800c4a6:	7833      	ldrb	r3, [r6, #0]
 800c4a8:	2b50      	cmp	r3, #80	; 0x50
 800c4aa:	d001      	beq.n	800c4b0 <__gethex+0xc4>
 800c4ac:	2b70      	cmp	r3, #112	; 0x70
 800c4ae:	d140      	bne.n	800c532 <__gethex+0x146>
 800c4b0:	7873      	ldrb	r3, [r6, #1]
 800c4b2:	2b2b      	cmp	r3, #43	; 0x2b
 800c4b4:	d035      	beq.n	800c522 <__gethex+0x136>
 800c4b6:	2b2d      	cmp	r3, #45	; 0x2d
 800c4b8:	d02f      	beq.n	800c51a <__gethex+0x12e>
 800c4ba:	f04f 0900 	mov.w	r9, #0
 800c4be:	1c71      	adds	r1, r6, #1
 800c4c0:	7808      	ldrb	r0, [r1, #0]
 800c4c2:	f7ff ff7e 	bl	800c3c2 <__hexdig_fun>
 800c4c6:	1e43      	subs	r3, r0, #1
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	2b18      	cmp	r3, #24
 800c4cc:	d831      	bhi.n	800c532 <__gethex+0x146>
 800c4ce:	f1a0 0210 	sub.w	r2, r0, #16
 800c4d2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c4d6:	f7ff ff74 	bl	800c3c2 <__hexdig_fun>
 800c4da:	1e43      	subs	r3, r0, #1
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b18      	cmp	r3, #24
 800c4e0:	d922      	bls.n	800c528 <__gethex+0x13c>
 800c4e2:	f1b9 0f00 	cmp.w	r9, #0
 800c4e6:	d000      	beq.n	800c4ea <__gethex+0xfe>
 800c4e8:	4252      	negs	r2, r2
 800c4ea:	4414      	add	r4, r2
 800c4ec:	f8ca 1000 	str.w	r1, [sl]
 800c4f0:	b30d      	cbz	r5, 800c536 <__gethex+0x14a>
 800c4f2:	f1bb 0f00 	cmp.w	fp, #0
 800c4f6:	bf14      	ite	ne
 800c4f8:	2700      	movne	r7, #0
 800c4fa:	2706      	moveq	r7, #6
 800c4fc:	4638      	mov	r0, r7
 800c4fe:	b00b      	add	sp, #44	; 0x2c
 800c500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c504:	f10b 0b01 	add.w	fp, fp, #1
 800c508:	e78a      	b.n	800c420 <__gethex+0x34>
 800c50a:	2500      	movs	r5, #0
 800c50c:	462c      	mov	r4, r5
 800c50e:	e7ae      	b.n	800c46e <__gethex+0x82>
 800c510:	463e      	mov	r6, r7
 800c512:	2501      	movs	r5, #1
 800c514:	e7c7      	b.n	800c4a6 <__gethex+0xba>
 800c516:	4604      	mov	r4, r0
 800c518:	e7fb      	b.n	800c512 <__gethex+0x126>
 800c51a:	f04f 0901 	mov.w	r9, #1
 800c51e:	1cb1      	adds	r1, r6, #2
 800c520:	e7ce      	b.n	800c4c0 <__gethex+0xd4>
 800c522:	f04f 0900 	mov.w	r9, #0
 800c526:	e7fa      	b.n	800c51e <__gethex+0x132>
 800c528:	230a      	movs	r3, #10
 800c52a:	fb03 0202 	mla	r2, r3, r2, r0
 800c52e:	3a10      	subs	r2, #16
 800c530:	e7cf      	b.n	800c4d2 <__gethex+0xe6>
 800c532:	4631      	mov	r1, r6
 800c534:	e7da      	b.n	800c4ec <__gethex+0x100>
 800c536:	4629      	mov	r1, r5
 800c538:	1bf3      	subs	r3, r6, r7
 800c53a:	3b01      	subs	r3, #1
 800c53c:	2b07      	cmp	r3, #7
 800c53e:	dc49      	bgt.n	800c5d4 <__gethex+0x1e8>
 800c540:	9802      	ldr	r0, [sp, #8]
 800c542:	f000 fc81 	bl	800ce48 <_Balloc>
 800c546:	f04f 0b00 	mov.w	fp, #0
 800c54a:	4605      	mov	r5, r0
 800c54c:	46da      	mov	sl, fp
 800c54e:	9b01      	ldr	r3, [sp, #4]
 800c550:	f100 0914 	add.w	r9, r0, #20
 800c554:	f1c3 0301 	rsb	r3, r3, #1
 800c558:	f8cd 9010 	str.w	r9, [sp, #16]
 800c55c:	9308      	str	r3, [sp, #32]
 800c55e:	42b7      	cmp	r7, r6
 800c560:	d33b      	bcc.n	800c5da <__gethex+0x1ee>
 800c562:	9804      	ldr	r0, [sp, #16]
 800c564:	f840 ab04 	str.w	sl, [r0], #4
 800c568:	eba0 0009 	sub.w	r0, r0, r9
 800c56c:	1080      	asrs	r0, r0, #2
 800c56e:	6128      	str	r0, [r5, #16]
 800c570:	0147      	lsls	r7, r0, #5
 800c572:	4650      	mov	r0, sl
 800c574:	f000 fd2c 	bl	800cfd0 <__hi0bits>
 800c578:	f8d8 6000 	ldr.w	r6, [r8]
 800c57c:	1a3f      	subs	r7, r7, r0
 800c57e:	42b7      	cmp	r7, r6
 800c580:	dd64      	ble.n	800c64c <__gethex+0x260>
 800c582:	1bbf      	subs	r7, r7, r6
 800c584:	4639      	mov	r1, r7
 800c586:	4628      	mov	r0, r5
 800c588:	f001 f825 	bl	800d5d6 <__any_on>
 800c58c:	4682      	mov	sl, r0
 800c58e:	b178      	cbz	r0, 800c5b0 <__gethex+0x1c4>
 800c590:	f04f 0a01 	mov.w	sl, #1
 800c594:	1e7b      	subs	r3, r7, #1
 800c596:	1159      	asrs	r1, r3, #5
 800c598:	f003 021f 	and.w	r2, r3, #31
 800c59c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c5a0:	fa0a f202 	lsl.w	r2, sl, r2
 800c5a4:	420a      	tst	r2, r1
 800c5a6:	d003      	beq.n	800c5b0 <__gethex+0x1c4>
 800c5a8:	4553      	cmp	r3, sl
 800c5aa:	dc46      	bgt.n	800c63a <__gethex+0x24e>
 800c5ac:	f04f 0a02 	mov.w	sl, #2
 800c5b0:	4639      	mov	r1, r7
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f7ff fed0 	bl	800c358 <rshift>
 800c5b8:	443c      	add	r4, r7
 800c5ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5be:	429c      	cmp	r4, r3
 800c5c0:	dd52      	ble.n	800c668 <__gethex+0x27c>
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	9802      	ldr	r0, [sp, #8]
 800c5c6:	f000 fc73 	bl	800ceb0 <_Bfree>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5ce:	27a3      	movs	r7, #163	; 0xa3
 800c5d0:	6013      	str	r3, [r2, #0]
 800c5d2:	e793      	b.n	800c4fc <__gethex+0x110>
 800c5d4:	3101      	adds	r1, #1
 800c5d6:	105b      	asrs	r3, r3, #1
 800c5d8:	e7b0      	b.n	800c53c <__gethex+0x150>
 800c5da:	1e73      	subs	r3, r6, #1
 800c5dc:	9305      	str	r3, [sp, #20]
 800c5de:	9a07      	ldr	r2, [sp, #28]
 800c5e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d018      	beq.n	800c61a <__gethex+0x22e>
 800c5e8:	f1bb 0f20 	cmp.w	fp, #32
 800c5ec:	d107      	bne.n	800c5fe <__gethex+0x212>
 800c5ee:	9b04      	ldr	r3, [sp, #16]
 800c5f0:	f8c3 a000 	str.w	sl, [r3]
 800c5f4:	f04f 0a00 	mov.w	sl, #0
 800c5f8:	46d3      	mov	fp, sl
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	9304      	str	r3, [sp, #16]
 800c5fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c602:	f7ff fede 	bl	800c3c2 <__hexdig_fun>
 800c606:	f000 000f 	and.w	r0, r0, #15
 800c60a:	fa00 f00b 	lsl.w	r0, r0, fp
 800c60e:	ea4a 0a00 	orr.w	sl, sl, r0
 800c612:	f10b 0b04 	add.w	fp, fp, #4
 800c616:	9b05      	ldr	r3, [sp, #20]
 800c618:	e00d      	b.n	800c636 <__gethex+0x24a>
 800c61a:	9b05      	ldr	r3, [sp, #20]
 800c61c:	9a08      	ldr	r2, [sp, #32]
 800c61e:	4413      	add	r3, r2
 800c620:	429f      	cmp	r7, r3
 800c622:	d8e1      	bhi.n	800c5e8 <__gethex+0x1fc>
 800c624:	4618      	mov	r0, r3
 800c626:	9a01      	ldr	r2, [sp, #4]
 800c628:	9903      	ldr	r1, [sp, #12]
 800c62a:	9309      	str	r3, [sp, #36]	; 0x24
 800c62c:	f001 f98a 	bl	800d944 <strncmp>
 800c630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c632:	2800      	cmp	r0, #0
 800c634:	d1d8      	bne.n	800c5e8 <__gethex+0x1fc>
 800c636:	461e      	mov	r6, r3
 800c638:	e791      	b.n	800c55e <__gethex+0x172>
 800c63a:	1eb9      	subs	r1, r7, #2
 800c63c:	4628      	mov	r0, r5
 800c63e:	f000 ffca 	bl	800d5d6 <__any_on>
 800c642:	2800      	cmp	r0, #0
 800c644:	d0b2      	beq.n	800c5ac <__gethex+0x1c0>
 800c646:	f04f 0a03 	mov.w	sl, #3
 800c64a:	e7b1      	b.n	800c5b0 <__gethex+0x1c4>
 800c64c:	da09      	bge.n	800c662 <__gethex+0x276>
 800c64e:	1bf7      	subs	r7, r6, r7
 800c650:	4629      	mov	r1, r5
 800c652:	463a      	mov	r2, r7
 800c654:	9802      	ldr	r0, [sp, #8]
 800c656:	f000 fded 	bl	800d234 <__lshift>
 800c65a:	4605      	mov	r5, r0
 800c65c:	1be4      	subs	r4, r4, r7
 800c65e:	f100 0914 	add.w	r9, r0, #20
 800c662:	f04f 0a00 	mov.w	sl, #0
 800c666:	e7a8      	b.n	800c5ba <__gethex+0x1ce>
 800c668:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c66c:	4284      	cmp	r4, r0
 800c66e:	da6b      	bge.n	800c748 <__gethex+0x35c>
 800c670:	1b04      	subs	r4, r0, r4
 800c672:	42a6      	cmp	r6, r4
 800c674:	dc2e      	bgt.n	800c6d4 <__gethex+0x2e8>
 800c676:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d022      	beq.n	800c6c4 <__gethex+0x2d8>
 800c67e:	2b03      	cmp	r3, #3
 800c680:	d024      	beq.n	800c6cc <__gethex+0x2e0>
 800c682:	2b01      	cmp	r3, #1
 800c684:	d115      	bne.n	800c6b2 <__gethex+0x2c6>
 800c686:	42a6      	cmp	r6, r4
 800c688:	d113      	bne.n	800c6b2 <__gethex+0x2c6>
 800c68a:	2e01      	cmp	r6, #1
 800c68c:	dc0b      	bgt.n	800c6a6 <__gethex+0x2ba>
 800c68e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c692:	9a06      	ldr	r2, [sp, #24]
 800c694:	2762      	movs	r7, #98	; 0x62
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	2301      	movs	r3, #1
 800c69a:	612b      	str	r3, [r5, #16]
 800c69c:	f8c9 3000 	str.w	r3, [r9]
 800c6a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6a2:	601d      	str	r5, [r3, #0]
 800c6a4:	e72a      	b.n	800c4fc <__gethex+0x110>
 800c6a6:	1e71      	subs	r1, r6, #1
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f000 ff94 	bl	800d5d6 <__any_on>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d1ed      	bne.n	800c68e <__gethex+0x2a2>
 800c6b2:	4629      	mov	r1, r5
 800c6b4:	9802      	ldr	r0, [sp, #8]
 800c6b6:	f000 fbfb 	bl	800ceb0 <_Bfree>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6be:	2750      	movs	r7, #80	; 0x50
 800c6c0:	6013      	str	r3, [r2, #0]
 800c6c2:	e71b      	b.n	800c4fc <__gethex+0x110>
 800c6c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d0e1      	beq.n	800c68e <__gethex+0x2a2>
 800c6ca:	e7f2      	b.n	800c6b2 <__gethex+0x2c6>
 800c6cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1dd      	bne.n	800c68e <__gethex+0x2a2>
 800c6d2:	e7ee      	b.n	800c6b2 <__gethex+0x2c6>
 800c6d4:	1e67      	subs	r7, r4, #1
 800c6d6:	f1ba 0f00 	cmp.w	sl, #0
 800c6da:	d132      	bne.n	800c742 <__gethex+0x356>
 800c6dc:	b127      	cbz	r7, 800c6e8 <__gethex+0x2fc>
 800c6de:	4639      	mov	r1, r7
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f000 ff78 	bl	800d5d6 <__any_on>
 800c6e6:	4682      	mov	sl, r0
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	117a      	asrs	r2, r7, #5
 800c6ec:	f007 071f 	and.w	r7, r7, #31
 800c6f0:	fa03 f707 	lsl.w	r7, r3, r7
 800c6f4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	421f      	tst	r7, r3
 800c6fc:	f04f 0702 	mov.w	r7, #2
 800c700:	4628      	mov	r0, r5
 800c702:	bf18      	it	ne
 800c704:	f04a 0a02 	orrne.w	sl, sl, #2
 800c708:	1b36      	subs	r6, r6, r4
 800c70a:	f7ff fe25 	bl	800c358 <rshift>
 800c70e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c712:	f1ba 0f00 	cmp.w	sl, #0
 800c716:	d045      	beq.n	800c7a4 <__gethex+0x3b8>
 800c718:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	d015      	beq.n	800c74c <__gethex+0x360>
 800c720:	2b03      	cmp	r3, #3
 800c722:	d017      	beq.n	800c754 <__gethex+0x368>
 800c724:	2b01      	cmp	r3, #1
 800c726:	d109      	bne.n	800c73c <__gethex+0x350>
 800c728:	f01a 0f02 	tst.w	sl, #2
 800c72c:	d006      	beq.n	800c73c <__gethex+0x350>
 800c72e:	f8d9 3000 	ldr.w	r3, [r9]
 800c732:	ea4a 0a03 	orr.w	sl, sl, r3
 800c736:	f01a 0f01 	tst.w	sl, #1
 800c73a:	d10e      	bne.n	800c75a <__gethex+0x36e>
 800c73c:	f047 0710 	orr.w	r7, r7, #16
 800c740:	e030      	b.n	800c7a4 <__gethex+0x3b8>
 800c742:	f04f 0a01 	mov.w	sl, #1
 800c746:	e7cf      	b.n	800c6e8 <__gethex+0x2fc>
 800c748:	2701      	movs	r7, #1
 800c74a:	e7e2      	b.n	800c712 <__gethex+0x326>
 800c74c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c74e:	f1c3 0301 	rsb	r3, r3, #1
 800c752:	9315      	str	r3, [sp, #84]	; 0x54
 800c754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c756:	2b00      	cmp	r3, #0
 800c758:	d0f0      	beq.n	800c73c <__gethex+0x350>
 800c75a:	2000      	movs	r0, #0
 800c75c:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c760:	f105 0314 	add.w	r3, r5, #20
 800c764:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c768:	eb03 010a 	add.w	r1, r3, sl
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c772:	d01c      	beq.n	800c7ae <__gethex+0x3c2>
 800c774:	3201      	adds	r2, #1
 800c776:	601a      	str	r2, [r3, #0]
 800c778:	2f02      	cmp	r7, #2
 800c77a:	f105 0314 	add.w	r3, r5, #20
 800c77e:	d138      	bne.n	800c7f2 <__gethex+0x406>
 800c780:	f8d8 2000 	ldr.w	r2, [r8]
 800c784:	3a01      	subs	r2, #1
 800c786:	4296      	cmp	r6, r2
 800c788:	d10a      	bne.n	800c7a0 <__gethex+0x3b4>
 800c78a:	2201      	movs	r2, #1
 800c78c:	1171      	asrs	r1, r6, #5
 800c78e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c792:	f006 061f 	and.w	r6, r6, #31
 800c796:	fa02 f606 	lsl.w	r6, r2, r6
 800c79a:	421e      	tst	r6, r3
 800c79c:	bf18      	it	ne
 800c79e:	4617      	movne	r7, r2
 800c7a0:	f047 0720 	orr.w	r7, r7, #32
 800c7a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7a6:	601d      	str	r5, [r3, #0]
 800c7a8:	9b06      	ldr	r3, [sp, #24]
 800c7aa:	601c      	str	r4, [r3, #0]
 800c7ac:	e6a6      	b.n	800c4fc <__gethex+0x110>
 800c7ae:	f843 0b04 	str.w	r0, [r3], #4
 800c7b2:	4299      	cmp	r1, r3
 800c7b4:	d8da      	bhi.n	800c76c <__gethex+0x380>
 800c7b6:	68ab      	ldr	r3, [r5, #8]
 800c7b8:	4599      	cmp	r9, r3
 800c7ba:	db12      	blt.n	800c7e2 <__gethex+0x3f6>
 800c7bc:	6869      	ldr	r1, [r5, #4]
 800c7be:	9802      	ldr	r0, [sp, #8]
 800c7c0:	3101      	adds	r1, #1
 800c7c2:	f000 fb41 	bl	800ce48 <_Balloc>
 800c7c6:	4683      	mov	fp, r0
 800c7c8:	692a      	ldr	r2, [r5, #16]
 800c7ca:	f105 010c 	add.w	r1, r5, #12
 800c7ce:	3202      	adds	r2, #2
 800c7d0:	0092      	lsls	r2, r2, #2
 800c7d2:	300c      	adds	r0, #12
 800c7d4:	f7fd f914 	bl	8009a00 <memcpy>
 800c7d8:	4629      	mov	r1, r5
 800c7da:	9802      	ldr	r0, [sp, #8]
 800c7dc:	f000 fb68 	bl	800ceb0 <_Bfree>
 800c7e0:	465d      	mov	r5, fp
 800c7e2:	692b      	ldr	r3, [r5, #16]
 800c7e4:	1c5a      	adds	r2, r3, #1
 800c7e6:	612a      	str	r2, [r5, #16]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c7ee:	615a      	str	r2, [r3, #20]
 800c7f0:	e7c2      	b.n	800c778 <__gethex+0x38c>
 800c7f2:	692a      	ldr	r2, [r5, #16]
 800c7f4:	4591      	cmp	r9, r2
 800c7f6:	da0b      	bge.n	800c810 <__gethex+0x424>
 800c7f8:	2101      	movs	r1, #1
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	f7ff fdac 	bl	800c358 <rshift>
 800c800:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c804:	3401      	adds	r4, #1
 800c806:	429c      	cmp	r4, r3
 800c808:	f73f aedb 	bgt.w	800c5c2 <__gethex+0x1d6>
 800c80c:	2701      	movs	r7, #1
 800c80e:	e7c7      	b.n	800c7a0 <__gethex+0x3b4>
 800c810:	f016 061f 	ands.w	r6, r6, #31
 800c814:	d0fa      	beq.n	800c80c <__gethex+0x420>
 800c816:	449a      	add	sl, r3
 800c818:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c81c:	f000 fbd8 	bl	800cfd0 <__hi0bits>
 800c820:	f1c6 0620 	rsb	r6, r6, #32
 800c824:	42b0      	cmp	r0, r6
 800c826:	dbe7      	blt.n	800c7f8 <__gethex+0x40c>
 800c828:	e7f0      	b.n	800c80c <__gethex+0x420>

0800c82a <L_shift>:
 800c82a:	f1c2 0208 	rsb	r2, r2, #8
 800c82e:	0092      	lsls	r2, r2, #2
 800c830:	b570      	push	{r4, r5, r6, lr}
 800c832:	f1c2 0620 	rsb	r6, r2, #32
 800c836:	6843      	ldr	r3, [r0, #4]
 800c838:	6804      	ldr	r4, [r0, #0]
 800c83a:	fa03 f506 	lsl.w	r5, r3, r6
 800c83e:	432c      	orrs	r4, r5
 800c840:	40d3      	lsrs	r3, r2
 800c842:	6004      	str	r4, [r0, #0]
 800c844:	f840 3f04 	str.w	r3, [r0, #4]!
 800c848:	4288      	cmp	r0, r1
 800c84a:	d3f4      	bcc.n	800c836 <L_shift+0xc>
 800c84c:	bd70      	pop	{r4, r5, r6, pc}

0800c84e <__match>:
 800c84e:	b530      	push	{r4, r5, lr}
 800c850:	6803      	ldr	r3, [r0, #0]
 800c852:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c856:	3301      	adds	r3, #1
 800c858:	b914      	cbnz	r4, 800c860 <__match+0x12>
 800c85a:	6003      	str	r3, [r0, #0]
 800c85c:	2001      	movs	r0, #1
 800c85e:	bd30      	pop	{r4, r5, pc}
 800c860:	781a      	ldrb	r2, [r3, #0]
 800c862:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c866:	2d19      	cmp	r5, #25
 800c868:	bf98      	it	ls
 800c86a:	3220      	addls	r2, #32
 800c86c:	42a2      	cmp	r2, r4
 800c86e:	d0f0      	beq.n	800c852 <__match+0x4>
 800c870:	2000      	movs	r0, #0
 800c872:	bd30      	pop	{r4, r5, pc}

0800c874 <__hexnan>:
 800c874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c878:	2500      	movs	r5, #0
 800c87a:	680b      	ldr	r3, [r1, #0]
 800c87c:	4682      	mov	sl, r0
 800c87e:	115f      	asrs	r7, r3, #5
 800c880:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c884:	f013 031f 	ands.w	r3, r3, #31
 800c888:	bf18      	it	ne
 800c88a:	3704      	addne	r7, #4
 800c88c:	1f3e      	subs	r6, r7, #4
 800c88e:	4690      	mov	r8, r2
 800c890:	46b1      	mov	r9, r6
 800c892:	4634      	mov	r4, r6
 800c894:	46ab      	mov	fp, r5
 800c896:	b087      	sub	sp, #28
 800c898:	6801      	ldr	r1, [r0, #0]
 800c89a:	9302      	str	r3, [sp, #8]
 800c89c:	f847 5c04 	str.w	r5, [r7, #-4]
 800c8a0:	9501      	str	r5, [sp, #4]
 800c8a2:	784a      	ldrb	r2, [r1, #1]
 800c8a4:	1c4b      	adds	r3, r1, #1
 800c8a6:	9303      	str	r3, [sp, #12]
 800c8a8:	b342      	cbz	r2, 800c8fc <__hexnan+0x88>
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	9105      	str	r1, [sp, #20]
 800c8ae:	9204      	str	r2, [sp, #16]
 800c8b0:	f7ff fd87 	bl	800c3c2 <__hexdig_fun>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d143      	bne.n	800c940 <__hexnan+0xcc>
 800c8b8:	9a04      	ldr	r2, [sp, #16]
 800c8ba:	9905      	ldr	r1, [sp, #20]
 800c8bc:	2a20      	cmp	r2, #32
 800c8be:	d818      	bhi.n	800c8f2 <__hexnan+0x7e>
 800c8c0:	9b01      	ldr	r3, [sp, #4]
 800c8c2:	459b      	cmp	fp, r3
 800c8c4:	dd13      	ble.n	800c8ee <__hexnan+0x7a>
 800c8c6:	454c      	cmp	r4, r9
 800c8c8:	d206      	bcs.n	800c8d8 <__hexnan+0x64>
 800c8ca:	2d07      	cmp	r5, #7
 800c8cc:	dc04      	bgt.n	800c8d8 <__hexnan+0x64>
 800c8ce:	462a      	mov	r2, r5
 800c8d0:	4649      	mov	r1, r9
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f7ff ffa9 	bl	800c82a <L_shift>
 800c8d8:	4544      	cmp	r4, r8
 800c8da:	d944      	bls.n	800c966 <__hexnan+0xf2>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f1a4 0904 	sub.w	r9, r4, #4
 800c8e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8e6:	461d      	mov	r5, r3
 800c8e8:	464c      	mov	r4, r9
 800c8ea:	f8cd b004 	str.w	fp, [sp, #4]
 800c8ee:	9903      	ldr	r1, [sp, #12]
 800c8f0:	e7d7      	b.n	800c8a2 <__hexnan+0x2e>
 800c8f2:	2a29      	cmp	r2, #41	; 0x29
 800c8f4:	d14a      	bne.n	800c98c <__hexnan+0x118>
 800c8f6:	3102      	adds	r1, #2
 800c8f8:	f8ca 1000 	str.w	r1, [sl]
 800c8fc:	f1bb 0f00 	cmp.w	fp, #0
 800c900:	d044      	beq.n	800c98c <__hexnan+0x118>
 800c902:	454c      	cmp	r4, r9
 800c904:	d206      	bcs.n	800c914 <__hexnan+0xa0>
 800c906:	2d07      	cmp	r5, #7
 800c908:	dc04      	bgt.n	800c914 <__hexnan+0xa0>
 800c90a:	462a      	mov	r2, r5
 800c90c:	4649      	mov	r1, r9
 800c90e:	4620      	mov	r0, r4
 800c910:	f7ff ff8b 	bl	800c82a <L_shift>
 800c914:	4544      	cmp	r4, r8
 800c916:	d928      	bls.n	800c96a <__hexnan+0xf6>
 800c918:	4643      	mov	r3, r8
 800c91a:	f854 2b04 	ldr.w	r2, [r4], #4
 800c91e:	42a6      	cmp	r6, r4
 800c920:	f843 2b04 	str.w	r2, [r3], #4
 800c924:	d2f9      	bcs.n	800c91a <__hexnan+0xa6>
 800c926:	2200      	movs	r2, #0
 800c928:	f843 2b04 	str.w	r2, [r3], #4
 800c92c:	429e      	cmp	r6, r3
 800c92e:	d2fb      	bcs.n	800c928 <__hexnan+0xb4>
 800c930:	6833      	ldr	r3, [r6, #0]
 800c932:	b91b      	cbnz	r3, 800c93c <__hexnan+0xc8>
 800c934:	4546      	cmp	r6, r8
 800c936:	d127      	bne.n	800c988 <__hexnan+0x114>
 800c938:	2301      	movs	r3, #1
 800c93a:	6033      	str	r3, [r6, #0]
 800c93c:	2005      	movs	r0, #5
 800c93e:	e026      	b.n	800c98e <__hexnan+0x11a>
 800c940:	3501      	adds	r5, #1
 800c942:	2d08      	cmp	r5, #8
 800c944:	f10b 0b01 	add.w	fp, fp, #1
 800c948:	dd06      	ble.n	800c958 <__hexnan+0xe4>
 800c94a:	4544      	cmp	r4, r8
 800c94c:	d9cf      	bls.n	800c8ee <__hexnan+0x7a>
 800c94e:	2300      	movs	r3, #0
 800c950:	2501      	movs	r5, #1
 800c952:	f844 3c04 	str.w	r3, [r4, #-4]
 800c956:	3c04      	subs	r4, #4
 800c958:	6822      	ldr	r2, [r4, #0]
 800c95a:	f000 000f 	and.w	r0, r0, #15
 800c95e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c962:	6020      	str	r0, [r4, #0]
 800c964:	e7c3      	b.n	800c8ee <__hexnan+0x7a>
 800c966:	2508      	movs	r5, #8
 800c968:	e7c1      	b.n	800c8ee <__hexnan+0x7a>
 800c96a:	9b02      	ldr	r3, [sp, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d0df      	beq.n	800c930 <__hexnan+0xbc>
 800c970:	f04f 32ff 	mov.w	r2, #4294967295
 800c974:	f1c3 0320 	rsb	r3, r3, #32
 800c978:	fa22 f303 	lsr.w	r3, r2, r3
 800c97c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c980:	401a      	ands	r2, r3
 800c982:	f847 2c04 	str.w	r2, [r7, #-4]
 800c986:	e7d3      	b.n	800c930 <__hexnan+0xbc>
 800c988:	3e04      	subs	r6, #4
 800c98a:	e7d1      	b.n	800c930 <__hexnan+0xbc>
 800c98c:	2004      	movs	r0, #4
 800c98e:	b007      	add	sp, #28
 800c990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c994 <__localeconv_l>:
 800c994:	30f0      	adds	r0, #240	; 0xf0
 800c996:	4770      	bx	lr

0800c998 <_localeconv_r>:
 800c998:	4b04      	ldr	r3, [pc, #16]	; (800c9ac <_localeconv_r+0x14>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	6a18      	ldr	r0, [r3, #32]
 800c99e:	4b04      	ldr	r3, [pc, #16]	; (800c9b0 <_localeconv_r+0x18>)
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	bf08      	it	eq
 800c9a4:	4618      	moveq	r0, r3
 800c9a6:	30f0      	adds	r0, #240	; 0xf0
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	20000198 	.word	0x20000198
 800c9b0:	2000002c 	.word	0x2000002c

0800c9b4 <__retarget_lock_acquire_recursive>:
 800c9b4:	4770      	bx	lr

0800c9b6 <__retarget_lock_release_recursive>:
 800c9b6:	4770      	bx	lr

0800c9b8 <malloc>:
 800c9b8:	4b02      	ldr	r3, [pc, #8]	; (800c9c4 <malloc+0xc>)
 800c9ba:	4601      	mov	r1, r0
 800c9bc:	6818      	ldr	r0, [r3, #0]
 800c9be:	f000 b803 	b.w	800c9c8 <_malloc_r>
 800c9c2:	bf00      	nop
 800c9c4:	20000198 	.word	0x20000198

0800c9c8 <_malloc_r>:
 800c9c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	f101 040b 	add.w	r4, r1, #11
 800c9d0:	2c16      	cmp	r4, #22
 800c9d2:	4681      	mov	r9, r0
 800c9d4:	d907      	bls.n	800c9e6 <_malloc_r+0x1e>
 800c9d6:	f034 0407 	bics.w	r4, r4, #7
 800c9da:	d505      	bpl.n	800c9e8 <_malloc_r+0x20>
 800c9dc:	230c      	movs	r3, #12
 800c9de:	f8c9 3000 	str.w	r3, [r9]
 800c9e2:	2600      	movs	r6, #0
 800c9e4:	e131      	b.n	800cc4a <_malloc_r+0x282>
 800c9e6:	2410      	movs	r4, #16
 800c9e8:	428c      	cmp	r4, r1
 800c9ea:	d3f7      	bcc.n	800c9dc <_malloc_r+0x14>
 800c9ec:	4648      	mov	r0, r9
 800c9ee:	f000 fa1f 	bl	800ce30 <__malloc_lock>
 800c9f2:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800c9f6:	4d9b      	ldr	r5, [pc, #620]	; (800cc64 <_malloc_r+0x29c>)
 800c9f8:	d236      	bcs.n	800ca68 <_malloc_r+0xa0>
 800c9fa:	f104 0208 	add.w	r2, r4, #8
 800c9fe:	442a      	add	r2, r5
 800ca00:	6856      	ldr	r6, [r2, #4]
 800ca02:	f1a2 0108 	sub.w	r1, r2, #8
 800ca06:	428e      	cmp	r6, r1
 800ca08:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800ca0c:	d102      	bne.n	800ca14 <_malloc_r+0x4c>
 800ca0e:	68d6      	ldr	r6, [r2, #12]
 800ca10:	42b2      	cmp	r2, r6
 800ca12:	d010      	beq.n	800ca36 <_malloc_r+0x6e>
 800ca14:	6873      	ldr	r3, [r6, #4]
 800ca16:	68f2      	ldr	r2, [r6, #12]
 800ca18:	68b1      	ldr	r1, [r6, #8]
 800ca1a:	f023 0303 	bic.w	r3, r3, #3
 800ca1e:	60ca      	str	r2, [r1, #12]
 800ca20:	4433      	add	r3, r6
 800ca22:	6091      	str	r1, [r2, #8]
 800ca24:	685a      	ldr	r2, [r3, #4]
 800ca26:	f042 0201 	orr.w	r2, r2, #1
 800ca2a:	605a      	str	r2, [r3, #4]
 800ca2c:	4648      	mov	r0, r9
 800ca2e:	f000 fa05 	bl	800ce3c <__malloc_unlock>
 800ca32:	3608      	adds	r6, #8
 800ca34:	e109      	b.n	800cc4a <_malloc_r+0x282>
 800ca36:	3302      	adds	r3, #2
 800ca38:	4a8b      	ldr	r2, [pc, #556]	; (800cc68 <_malloc_r+0x2a0>)
 800ca3a:	692e      	ldr	r6, [r5, #16]
 800ca3c:	4611      	mov	r1, r2
 800ca3e:	4296      	cmp	r6, r2
 800ca40:	d06d      	beq.n	800cb1e <_malloc_r+0x156>
 800ca42:	6870      	ldr	r0, [r6, #4]
 800ca44:	f020 0003 	bic.w	r0, r0, #3
 800ca48:	1b07      	subs	r7, r0, r4
 800ca4a:	2f0f      	cmp	r7, #15
 800ca4c:	dd47      	ble.n	800cade <_malloc_r+0x116>
 800ca4e:	1933      	adds	r3, r6, r4
 800ca50:	f044 0401 	orr.w	r4, r4, #1
 800ca54:	6074      	str	r4, [r6, #4]
 800ca56:	616b      	str	r3, [r5, #20]
 800ca58:	612b      	str	r3, [r5, #16]
 800ca5a:	60da      	str	r2, [r3, #12]
 800ca5c:	609a      	str	r2, [r3, #8]
 800ca5e:	f047 0201 	orr.w	r2, r7, #1
 800ca62:	605a      	str	r2, [r3, #4]
 800ca64:	5037      	str	r7, [r6, r0]
 800ca66:	e7e1      	b.n	800ca2c <_malloc_r+0x64>
 800ca68:	0a63      	lsrs	r3, r4, #9
 800ca6a:	d02a      	beq.n	800cac2 <_malloc_r+0xfa>
 800ca6c:	2b04      	cmp	r3, #4
 800ca6e:	d812      	bhi.n	800ca96 <_malloc_r+0xce>
 800ca70:	09a3      	lsrs	r3, r4, #6
 800ca72:	3338      	adds	r3, #56	; 0x38
 800ca74:	1c5a      	adds	r2, r3, #1
 800ca76:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800ca7a:	6856      	ldr	r6, [r2, #4]
 800ca7c:	f1a2 0008 	sub.w	r0, r2, #8
 800ca80:	4286      	cmp	r6, r0
 800ca82:	d006      	beq.n	800ca92 <_malloc_r+0xca>
 800ca84:	6872      	ldr	r2, [r6, #4]
 800ca86:	f022 0203 	bic.w	r2, r2, #3
 800ca8a:	1b11      	subs	r1, r2, r4
 800ca8c:	290f      	cmp	r1, #15
 800ca8e:	dd1c      	ble.n	800caca <_malloc_r+0x102>
 800ca90:	3b01      	subs	r3, #1
 800ca92:	3301      	adds	r3, #1
 800ca94:	e7d0      	b.n	800ca38 <_malloc_r+0x70>
 800ca96:	2b14      	cmp	r3, #20
 800ca98:	d801      	bhi.n	800ca9e <_malloc_r+0xd6>
 800ca9a:	335b      	adds	r3, #91	; 0x5b
 800ca9c:	e7ea      	b.n	800ca74 <_malloc_r+0xac>
 800ca9e:	2b54      	cmp	r3, #84	; 0x54
 800caa0:	d802      	bhi.n	800caa8 <_malloc_r+0xe0>
 800caa2:	0b23      	lsrs	r3, r4, #12
 800caa4:	336e      	adds	r3, #110	; 0x6e
 800caa6:	e7e5      	b.n	800ca74 <_malloc_r+0xac>
 800caa8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800caac:	d802      	bhi.n	800cab4 <_malloc_r+0xec>
 800caae:	0be3      	lsrs	r3, r4, #15
 800cab0:	3377      	adds	r3, #119	; 0x77
 800cab2:	e7df      	b.n	800ca74 <_malloc_r+0xac>
 800cab4:	f240 5254 	movw	r2, #1364	; 0x554
 800cab8:	4293      	cmp	r3, r2
 800caba:	d804      	bhi.n	800cac6 <_malloc_r+0xfe>
 800cabc:	0ca3      	lsrs	r3, r4, #18
 800cabe:	337c      	adds	r3, #124	; 0x7c
 800cac0:	e7d8      	b.n	800ca74 <_malloc_r+0xac>
 800cac2:	233f      	movs	r3, #63	; 0x3f
 800cac4:	e7d6      	b.n	800ca74 <_malloc_r+0xac>
 800cac6:	237e      	movs	r3, #126	; 0x7e
 800cac8:	e7d4      	b.n	800ca74 <_malloc_r+0xac>
 800caca:	2900      	cmp	r1, #0
 800cacc:	68f1      	ldr	r1, [r6, #12]
 800cace:	db04      	blt.n	800cada <_malloc_r+0x112>
 800cad0:	68b3      	ldr	r3, [r6, #8]
 800cad2:	60d9      	str	r1, [r3, #12]
 800cad4:	608b      	str	r3, [r1, #8]
 800cad6:	18b3      	adds	r3, r6, r2
 800cad8:	e7a4      	b.n	800ca24 <_malloc_r+0x5c>
 800cada:	460e      	mov	r6, r1
 800cadc:	e7d0      	b.n	800ca80 <_malloc_r+0xb8>
 800cade:	2f00      	cmp	r7, #0
 800cae0:	616a      	str	r2, [r5, #20]
 800cae2:	612a      	str	r2, [r5, #16]
 800cae4:	db05      	blt.n	800caf2 <_malloc_r+0x12a>
 800cae6:	4430      	add	r0, r6
 800cae8:	6843      	ldr	r3, [r0, #4]
 800caea:	f043 0301 	orr.w	r3, r3, #1
 800caee:	6043      	str	r3, [r0, #4]
 800caf0:	e79c      	b.n	800ca2c <_malloc_r+0x64>
 800caf2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800caf6:	d244      	bcs.n	800cb82 <_malloc_r+0x1ba>
 800caf8:	2201      	movs	r2, #1
 800cafa:	08c0      	lsrs	r0, r0, #3
 800cafc:	1087      	asrs	r7, r0, #2
 800cafe:	fa02 f707 	lsl.w	r7, r2, r7
 800cb02:	686a      	ldr	r2, [r5, #4]
 800cb04:	3001      	adds	r0, #1
 800cb06:	433a      	orrs	r2, r7
 800cb08:	606a      	str	r2, [r5, #4]
 800cb0a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800cb0e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800cb12:	3a08      	subs	r2, #8
 800cb14:	60f2      	str	r2, [r6, #12]
 800cb16:	60b7      	str	r7, [r6, #8]
 800cb18:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800cb1c:	60fe      	str	r6, [r7, #12]
 800cb1e:	2001      	movs	r0, #1
 800cb20:	109a      	asrs	r2, r3, #2
 800cb22:	fa00 f202 	lsl.w	r2, r0, r2
 800cb26:	6868      	ldr	r0, [r5, #4]
 800cb28:	4282      	cmp	r2, r0
 800cb2a:	f200 809f 	bhi.w	800cc6c <_malloc_r+0x2a4>
 800cb2e:	4202      	tst	r2, r0
 800cb30:	d106      	bne.n	800cb40 <_malloc_r+0x178>
 800cb32:	f023 0303 	bic.w	r3, r3, #3
 800cb36:	0052      	lsls	r2, r2, #1
 800cb38:	4202      	tst	r2, r0
 800cb3a:	f103 0304 	add.w	r3, r3, #4
 800cb3e:	d0fa      	beq.n	800cb36 <_malloc_r+0x16e>
 800cb40:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800cb44:	46e0      	mov	r8, ip
 800cb46:	469e      	mov	lr, r3
 800cb48:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800cb4c:	4546      	cmp	r6, r8
 800cb4e:	d153      	bne.n	800cbf8 <_malloc_r+0x230>
 800cb50:	f10e 0e01 	add.w	lr, lr, #1
 800cb54:	f01e 0f03 	tst.w	lr, #3
 800cb58:	f108 0808 	add.w	r8, r8, #8
 800cb5c:	d1f4      	bne.n	800cb48 <_malloc_r+0x180>
 800cb5e:	0798      	lsls	r0, r3, #30
 800cb60:	d179      	bne.n	800cc56 <_malloc_r+0x28e>
 800cb62:	686b      	ldr	r3, [r5, #4]
 800cb64:	ea23 0302 	bic.w	r3, r3, r2
 800cb68:	606b      	str	r3, [r5, #4]
 800cb6a:	6868      	ldr	r0, [r5, #4]
 800cb6c:	0052      	lsls	r2, r2, #1
 800cb6e:	4282      	cmp	r2, r0
 800cb70:	d87c      	bhi.n	800cc6c <_malloc_r+0x2a4>
 800cb72:	2a00      	cmp	r2, #0
 800cb74:	d07a      	beq.n	800cc6c <_malloc_r+0x2a4>
 800cb76:	4673      	mov	r3, lr
 800cb78:	4202      	tst	r2, r0
 800cb7a:	d1e1      	bne.n	800cb40 <_malloc_r+0x178>
 800cb7c:	3304      	adds	r3, #4
 800cb7e:	0052      	lsls	r2, r2, #1
 800cb80:	e7fa      	b.n	800cb78 <_malloc_r+0x1b0>
 800cb82:	0a42      	lsrs	r2, r0, #9
 800cb84:	2a04      	cmp	r2, #4
 800cb86:	d815      	bhi.n	800cbb4 <_malloc_r+0x1ec>
 800cb88:	0982      	lsrs	r2, r0, #6
 800cb8a:	3238      	adds	r2, #56	; 0x38
 800cb8c:	1c57      	adds	r7, r2, #1
 800cb8e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800cb92:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800cb96:	45be      	cmp	lr, r7
 800cb98:	d126      	bne.n	800cbe8 <_malloc_r+0x220>
 800cb9a:	2001      	movs	r0, #1
 800cb9c:	1092      	asrs	r2, r2, #2
 800cb9e:	fa00 f202 	lsl.w	r2, r0, r2
 800cba2:	6868      	ldr	r0, [r5, #4]
 800cba4:	4310      	orrs	r0, r2
 800cba6:	6068      	str	r0, [r5, #4]
 800cba8:	f8c6 e00c 	str.w	lr, [r6, #12]
 800cbac:	60b7      	str	r7, [r6, #8]
 800cbae:	f8ce 6008 	str.w	r6, [lr, #8]
 800cbb2:	e7b3      	b.n	800cb1c <_malloc_r+0x154>
 800cbb4:	2a14      	cmp	r2, #20
 800cbb6:	d801      	bhi.n	800cbbc <_malloc_r+0x1f4>
 800cbb8:	325b      	adds	r2, #91	; 0x5b
 800cbba:	e7e7      	b.n	800cb8c <_malloc_r+0x1c4>
 800cbbc:	2a54      	cmp	r2, #84	; 0x54
 800cbbe:	d802      	bhi.n	800cbc6 <_malloc_r+0x1fe>
 800cbc0:	0b02      	lsrs	r2, r0, #12
 800cbc2:	326e      	adds	r2, #110	; 0x6e
 800cbc4:	e7e2      	b.n	800cb8c <_malloc_r+0x1c4>
 800cbc6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800cbca:	d802      	bhi.n	800cbd2 <_malloc_r+0x20a>
 800cbcc:	0bc2      	lsrs	r2, r0, #15
 800cbce:	3277      	adds	r2, #119	; 0x77
 800cbd0:	e7dc      	b.n	800cb8c <_malloc_r+0x1c4>
 800cbd2:	f240 5754 	movw	r7, #1364	; 0x554
 800cbd6:	42ba      	cmp	r2, r7
 800cbd8:	bf9a      	itte	ls
 800cbda:	0c82      	lsrls	r2, r0, #18
 800cbdc:	327c      	addls	r2, #124	; 0x7c
 800cbde:	227e      	movhi	r2, #126	; 0x7e
 800cbe0:	e7d4      	b.n	800cb8c <_malloc_r+0x1c4>
 800cbe2:	68bf      	ldr	r7, [r7, #8]
 800cbe4:	45be      	cmp	lr, r7
 800cbe6:	d004      	beq.n	800cbf2 <_malloc_r+0x22a>
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	f022 0203 	bic.w	r2, r2, #3
 800cbee:	4290      	cmp	r0, r2
 800cbf0:	d3f7      	bcc.n	800cbe2 <_malloc_r+0x21a>
 800cbf2:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800cbf6:	e7d7      	b.n	800cba8 <_malloc_r+0x1e0>
 800cbf8:	6870      	ldr	r0, [r6, #4]
 800cbfa:	68f7      	ldr	r7, [r6, #12]
 800cbfc:	f020 0003 	bic.w	r0, r0, #3
 800cc00:	eba0 0a04 	sub.w	sl, r0, r4
 800cc04:	f1ba 0f0f 	cmp.w	sl, #15
 800cc08:	dd10      	ble.n	800cc2c <_malloc_r+0x264>
 800cc0a:	68b2      	ldr	r2, [r6, #8]
 800cc0c:	1933      	adds	r3, r6, r4
 800cc0e:	f044 0401 	orr.w	r4, r4, #1
 800cc12:	6074      	str	r4, [r6, #4]
 800cc14:	60d7      	str	r7, [r2, #12]
 800cc16:	60ba      	str	r2, [r7, #8]
 800cc18:	f04a 0201 	orr.w	r2, sl, #1
 800cc1c:	616b      	str	r3, [r5, #20]
 800cc1e:	612b      	str	r3, [r5, #16]
 800cc20:	60d9      	str	r1, [r3, #12]
 800cc22:	6099      	str	r1, [r3, #8]
 800cc24:	605a      	str	r2, [r3, #4]
 800cc26:	f846 a000 	str.w	sl, [r6, r0]
 800cc2a:	e6ff      	b.n	800ca2c <_malloc_r+0x64>
 800cc2c:	f1ba 0f00 	cmp.w	sl, #0
 800cc30:	db0f      	blt.n	800cc52 <_malloc_r+0x28a>
 800cc32:	4430      	add	r0, r6
 800cc34:	6843      	ldr	r3, [r0, #4]
 800cc36:	f043 0301 	orr.w	r3, r3, #1
 800cc3a:	6043      	str	r3, [r0, #4]
 800cc3c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800cc40:	4648      	mov	r0, r9
 800cc42:	60df      	str	r7, [r3, #12]
 800cc44:	60bb      	str	r3, [r7, #8]
 800cc46:	f000 f8f9 	bl	800ce3c <__malloc_unlock>
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	b003      	add	sp, #12
 800cc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc52:	463e      	mov	r6, r7
 800cc54:	e77a      	b.n	800cb4c <_malloc_r+0x184>
 800cc56:	f85c 0908 	ldr.w	r0, [ip], #-8
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	4584      	cmp	ip, r0
 800cc5e:	f43f af7e 	beq.w	800cb5e <_malloc_r+0x196>
 800cc62:	e782      	b.n	800cb6a <_malloc_r+0x1a2>
 800cc64:	2000028c 	.word	0x2000028c
 800cc68:	20000294 	.word	0x20000294
 800cc6c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800cc70:	f8db 6004 	ldr.w	r6, [fp, #4]
 800cc74:	f026 0603 	bic.w	r6, r6, #3
 800cc78:	42b4      	cmp	r4, r6
 800cc7a:	d803      	bhi.n	800cc84 <_malloc_r+0x2bc>
 800cc7c:	1b33      	subs	r3, r6, r4
 800cc7e:	2b0f      	cmp	r3, #15
 800cc80:	f300 8095 	bgt.w	800cdae <_malloc_r+0x3e6>
 800cc84:	4a4f      	ldr	r2, [pc, #316]	; (800cdc4 <_malloc_r+0x3fc>)
 800cc86:	eb0b 0306 	add.w	r3, fp, r6
 800cc8a:	6817      	ldr	r7, [r2, #0]
 800cc8c:	4a4e      	ldr	r2, [pc, #312]	; (800cdc8 <_malloc_r+0x400>)
 800cc8e:	3710      	adds	r7, #16
 800cc90:	6811      	ldr	r1, [r2, #0]
 800cc92:	4427      	add	r7, r4
 800cc94:	3101      	adds	r1, #1
 800cc96:	d005      	beq.n	800cca4 <_malloc_r+0x2dc>
 800cc98:	494c      	ldr	r1, [pc, #304]	; (800cdcc <_malloc_r+0x404>)
 800cc9a:	3901      	subs	r1, #1
 800cc9c:	440f      	add	r7, r1
 800cc9e:	3101      	adds	r1, #1
 800cca0:	4249      	negs	r1, r1
 800cca2:	400f      	ands	r7, r1
 800cca4:	4639      	mov	r1, r7
 800cca6:	4648      	mov	r0, r9
 800cca8:	9201      	str	r2, [sp, #4]
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	f000 fe36 	bl	800d91c <_sbrk_r>
 800ccb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ccb4:	4680      	mov	r8, r0
 800ccb6:	d055      	beq.n	800cd64 <_malloc_r+0x39c>
 800ccb8:	9b00      	ldr	r3, [sp, #0]
 800ccba:	9a01      	ldr	r2, [sp, #4]
 800ccbc:	4283      	cmp	r3, r0
 800ccbe:	d901      	bls.n	800ccc4 <_malloc_r+0x2fc>
 800ccc0:	45ab      	cmp	fp, r5
 800ccc2:	d14f      	bne.n	800cd64 <_malloc_r+0x39c>
 800ccc4:	4842      	ldr	r0, [pc, #264]	; (800cdd0 <_malloc_r+0x408>)
 800ccc6:	4543      	cmp	r3, r8
 800ccc8:	6801      	ldr	r1, [r0, #0]
 800ccca:	4682      	mov	sl, r0
 800cccc:	eb07 0e01 	add.w	lr, r7, r1
 800ccd0:	f8c0 e000 	str.w	lr, [r0]
 800ccd4:	493f      	ldr	r1, [pc, #252]	; (800cdd4 <_malloc_r+0x40c>)
 800ccd6:	d113      	bne.n	800cd00 <_malloc_r+0x338>
 800ccd8:	420b      	tst	r3, r1
 800ccda:	d111      	bne.n	800cd00 <_malloc_r+0x338>
 800ccdc:	68ab      	ldr	r3, [r5, #8]
 800ccde:	443e      	add	r6, r7
 800cce0:	f046 0601 	orr.w	r6, r6, #1
 800cce4:	605e      	str	r6, [r3, #4]
 800cce6:	4a3c      	ldr	r2, [pc, #240]	; (800cdd8 <_malloc_r+0x410>)
 800cce8:	f8da 3000 	ldr.w	r3, [sl]
 800ccec:	6811      	ldr	r1, [r2, #0]
 800ccee:	428b      	cmp	r3, r1
 800ccf0:	bf88      	it	hi
 800ccf2:	6013      	strhi	r3, [r2, #0]
 800ccf4:	4a39      	ldr	r2, [pc, #228]	; (800cddc <_malloc_r+0x414>)
 800ccf6:	6811      	ldr	r1, [r2, #0]
 800ccf8:	428b      	cmp	r3, r1
 800ccfa:	bf88      	it	hi
 800ccfc:	6013      	strhi	r3, [r2, #0]
 800ccfe:	e031      	b.n	800cd64 <_malloc_r+0x39c>
 800cd00:	6810      	ldr	r0, [r2, #0]
 800cd02:	3001      	adds	r0, #1
 800cd04:	bf1b      	ittet	ne
 800cd06:	eba8 0303 	subne.w	r3, r8, r3
 800cd0a:	4473      	addne	r3, lr
 800cd0c:	f8c2 8000 	streq.w	r8, [r2]
 800cd10:	f8ca 3000 	strne.w	r3, [sl]
 800cd14:	f018 0007 	ands.w	r0, r8, #7
 800cd18:	bf1c      	itt	ne
 800cd1a:	f1c0 0008 	rsbne	r0, r0, #8
 800cd1e:	4480      	addne	r8, r0
 800cd20:	4b2a      	ldr	r3, [pc, #168]	; (800cdcc <_malloc_r+0x404>)
 800cd22:	4447      	add	r7, r8
 800cd24:	4418      	add	r0, r3
 800cd26:	400f      	ands	r7, r1
 800cd28:	1bc7      	subs	r7, r0, r7
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	4648      	mov	r0, r9
 800cd2e:	f000 fdf5 	bl	800d91c <_sbrk_r>
 800cd32:	1c43      	adds	r3, r0, #1
 800cd34:	bf04      	itt	eq
 800cd36:	4640      	moveq	r0, r8
 800cd38:	2700      	moveq	r7, #0
 800cd3a:	f8da 3000 	ldr.w	r3, [sl]
 800cd3e:	eba0 0008 	sub.w	r0, r0, r8
 800cd42:	443b      	add	r3, r7
 800cd44:	4407      	add	r7, r0
 800cd46:	f047 0701 	orr.w	r7, r7, #1
 800cd4a:	45ab      	cmp	fp, r5
 800cd4c:	f8c5 8008 	str.w	r8, [r5, #8]
 800cd50:	f8ca 3000 	str.w	r3, [sl]
 800cd54:	f8c8 7004 	str.w	r7, [r8, #4]
 800cd58:	d0c5      	beq.n	800cce6 <_malloc_r+0x31e>
 800cd5a:	2e0f      	cmp	r6, #15
 800cd5c:	d810      	bhi.n	800cd80 <_malloc_r+0x3b8>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	f8c8 3004 	str.w	r3, [r8, #4]
 800cd64:	68ab      	ldr	r3, [r5, #8]
 800cd66:	685a      	ldr	r2, [r3, #4]
 800cd68:	f022 0203 	bic.w	r2, r2, #3
 800cd6c:	4294      	cmp	r4, r2
 800cd6e:	eba2 0304 	sub.w	r3, r2, r4
 800cd72:	d801      	bhi.n	800cd78 <_malloc_r+0x3b0>
 800cd74:	2b0f      	cmp	r3, #15
 800cd76:	dc1a      	bgt.n	800cdae <_malloc_r+0x3e6>
 800cd78:	4648      	mov	r0, r9
 800cd7a:	f000 f85f 	bl	800ce3c <__malloc_unlock>
 800cd7e:	e630      	b.n	800c9e2 <_malloc_r+0x1a>
 800cd80:	2205      	movs	r2, #5
 800cd82:	f8db 3004 	ldr.w	r3, [fp, #4]
 800cd86:	3e0c      	subs	r6, #12
 800cd88:	f026 0607 	bic.w	r6, r6, #7
 800cd8c:	f003 0301 	and.w	r3, r3, #1
 800cd90:	4333      	orrs	r3, r6
 800cd92:	f8cb 3004 	str.w	r3, [fp, #4]
 800cd96:	2e0f      	cmp	r6, #15
 800cd98:	eb0b 0306 	add.w	r3, fp, r6
 800cd9c:	605a      	str	r2, [r3, #4]
 800cd9e:	609a      	str	r2, [r3, #8]
 800cda0:	d9a1      	bls.n	800cce6 <_malloc_r+0x31e>
 800cda2:	f10b 0108 	add.w	r1, fp, #8
 800cda6:	4648      	mov	r0, r9
 800cda8:	f000 fedc 	bl	800db64 <_free_r>
 800cdac:	e79b      	b.n	800cce6 <_malloc_r+0x31e>
 800cdae:	68ae      	ldr	r6, [r5, #8]
 800cdb0:	f044 0201 	orr.w	r2, r4, #1
 800cdb4:	f043 0301 	orr.w	r3, r3, #1
 800cdb8:	4434      	add	r4, r6
 800cdba:	6072      	str	r2, [r6, #4]
 800cdbc:	60ac      	str	r4, [r5, #8]
 800cdbe:	6063      	str	r3, [r4, #4]
 800cdc0:	e634      	b.n	800ca2c <_malloc_r+0x64>
 800cdc2:	bf00      	nop
 800cdc4:	20000c10 	.word	0x20000c10
 800cdc8:	20000694 	.word	0x20000694
 800cdcc:	00000080 	.word	0x00000080
 800cdd0:	20000be0 	.word	0x20000be0
 800cdd4:	0000007f 	.word	0x0000007f
 800cdd8:	20000c08 	.word	0x20000c08
 800cddc:	20000c0c 	.word	0x20000c0c

0800cde0 <memchr>:
 800cde0:	b510      	push	{r4, lr}
 800cde2:	b2c9      	uxtb	r1, r1
 800cde4:	4402      	add	r2, r0
 800cde6:	4290      	cmp	r0, r2
 800cde8:	4603      	mov	r3, r0
 800cdea:	d101      	bne.n	800cdf0 <memchr+0x10>
 800cdec:	2000      	movs	r0, #0
 800cdee:	bd10      	pop	{r4, pc}
 800cdf0:	781c      	ldrb	r4, [r3, #0]
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	428c      	cmp	r4, r1
 800cdf6:	d1f6      	bne.n	800cde6 <memchr+0x6>
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	bd10      	pop	{r4, pc}

0800cdfc <memmove>:
 800cdfc:	4288      	cmp	r0, r1
 800cdfe:	b510      	push	{r4, lr}
 800ce00:	eb01 0302 	add.w	r3, r1, r2
 800ce04:	d803      	bhi.n	800ce0e <memmove+0x12>
 800ce06:	1e42      	subs	r2, r0, #1
 800ce08:	4299      	cmp	r1, r3
 800ce0a:	d10c      	bne.n	800ce26 <memmove+0x2a>
 800ce0c:	bd10      	pop	{r4, pc}
 800ce0e:	4298      	cmp	r0, r3
 800ce10:	d2f9      	bcs.n	800ce06 <memmove+0xa>
 800ce12:	1881      	adds	r1, r0, r2
 800ce14:	1ad2      	subs	r2, r2, r3
 800ce16:	42d3      	cmn	r3, r2
 800ce18:	d100      	bne.n	800ce1c <memmove+0x20>
 800ce1a:	bd10      	pop	{r4, pc}
 800ce1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ce24:	e7f7      	b.n	800ce16 <memmove+0x1a>
 800ce26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce2a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ce2e:	e7eb      	b.n	800ce08 <memmove+0xc>

0800ce30 <__malloc_lock>:
 800ce30:	4801      	ldr	r0, [pc, #4]	; (800ce38 <__malloc_lock+0x8>)
 800ce32:	f7ff bdbf 	b.w	800c9b4 <__retarget_lock_acquire_recursive>
 800ce36:	bf00      	nop
 800ce38:	200015f0 	.word	0x200015f0

0800ce3c <__malloc_unlock>:
 800ce3c:	4801      	ldr	r0, [pc, #4]	; (800ce44 <__malloc_unlock+0x8>)
 800ce3e:	f7ff bdba 	b.w	800c9b6 <__retarget_lock_release_recursive>
 800ce42:	bf00      	nop
 800ce44:	200015f0 	.word	0x200015f0

0800ce48 <_Balloc>:
 800ce48:	b570      	push	{r4, r5, r6, lr}
 800ce4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	460e      	mov	r6, r1
 800ce50:	b93d      	cbnz	r5, 800ce62 <_Balloc+0x1a>
 800ce52:	2010      	movs	r0, #16
 800ce54:	f7ff fdb0 	bl	800c9b8 <malloc>
 800ce58:	6260      	str	r0, [r4, #36]	; 0x24
 800ce5a:	6045      	str	r5, [r0, #4]
 800ce5c:	6085      	str	r5, [r0, #8]
 800ce5e:	6005      	str	r5, [r0, #0]
 800ce60:	60c5      	str	r5, [r0, #12]
 800ce62:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ce64:	68eb      	ldr	r3, [r5, #12]
 800ce66:	b183      	cbz	r3, 800ce8a <_Balloc+0x42>
 800ce68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ce70:	b9b8      	cbnz	r0, 800cea2 <_Balloc+0x5a>
 800ce72:	2101      	movs	r1, #1
 800ce74:	fa01 f506 	lsl.w	r5, r1, r6
 800ce78:	1d6a      	adds	r2, r5, #5
 800ce7a:	0092      	lsls	r2, r2, #2
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f000 fded 	bl	800da5c <_calloc_r>
 800ce82:	b160      	cbz	r0, 800ce9e <_Balloc+0x56>
 800ce84:	6046      	str	r6, [r0, #4]
 800ce86:	6085      	str	r5, [r0, #8]
 800ce88:	e00e      	b.n	800cea8 <_Balloc+0x60>
 800ce8a:	2221      	movs	r2, #33	; 0x21
 800ce8c:	2104      	movs	r1, #4
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 fde4 	bl	800da5c <_calloc_r>
 800ce94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce96:	60e8      	str	r0, [r5, #12]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1e4      	bne.n	800ce68 <_Balloc+0x20>
 800ce9e:	2000      	movs	r0, #0
 800cea0:	bd70      	pop	{r4, r5, r6, pc}
 800cea2:	6802      	ldr	r2, [r0, #0]
 800cea4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cea8:	2300      	movs	r3, #0
 800ceaa:	6103      	str	r3, [r0, #16]
 800ceac:	60c3      	str	r3, [r0, #12]
 800ceae:	bd70      	pop	{r4, r5, r6, pc}

0800ceb0 <_Bfree>:
 800ceb0:	b570      	push	{r4, r5, r6, lr}
 800ceb2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ceb4:	4606      	mov	r6, r0
 800ceb6:	460d      	mov	r5, r1
 800ceb8:	b93c      	cbnz	r4, 800ceca <_Bfree+0x1a>
 800ceba:	2010      	movs	r0, #16
 800cebc:	f7ff fd7c 	bl	800c9b8 <malloc>
 800cec0:	6270      	str	r0, [r6, #36]	; 0x24
 800cec2:	6044      	str	r4, [r0, #4]
 800cec4:	6084      	str	r4, [r0, #8]
 800cec6:	6004      	str	r4, [r0, #0]
 800cec8:	60c4      	str	r4, [r0, #12]
 800ceca:	b13d      	cbz	r5, 800cedc <_Bfree+0x2c>
 800cecc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cece:	686a      	ldr	r2, [r5, #4]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ced6:	6029      	str	r1, [r5, #0]
 800ced8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cedc:	bd70      	pop	{r4, r5, r6, pc}

0800cede <__multadd>:
 800cede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee2:	461f      	mov	r7, r3
 800cee4:	4606      	mov	r6, r0
 800cee6:	460c      	mov	r4, r1
 800cee8:	2300      	movs	r3, #0
 800ceea:	690d      	ldr	r5, [r1, #16]
 800ceec:	f101 0e14 	add.w	lr, r1, #20
 800cef0:	f8de 0000 	ldr.w	r0, [lr]
 800cef4:	3301      	adds	r3, #1
 800cef6:	b281      	uxth	r1, r0
 800cef8:	fb02 7101 	mla	r1, r2, r1, r7
 800cefc:	0c00      	lsrs	r0, r0, #16
 800cefe:	0c0f      	lsrs	r7, r1, #16
 800cf00:	fb02 7000 	mla	r0, r2, r0, r7
 800cf04:	b289      	uxth	r1, r1
 800cf06:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cf0a:	429d      	cmp	r5, r3
 800cf0c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cf10:	f84e 1b04 	str.w	r1, [lr], #4
 800cf14:	dcec      	bgt.n	800cef0 <__multadd+0x12>
 800cf16:	b1d7      	cbz	r7, 800cf4e <__multadd+0x70>
 800cf18:	68a3      	ldr	r3, [r4, #8]
 800cf1a:	429d      	cmp	r5, r3
 800cf1c:	db12      	blt.n	800cf44 <__multadd+0x66>
 800cf1e:	6861      	ldr	r1, [r4, #4]
 800cf20:	4630      	mov	r0, r6
 800cf22:	3101      	adds	r1, #1
 800cf24:	f7ff ff90 	bl	800ce48 <_Balloc>
 800cf28:	4680      	mov	r8, r0
 800cf2a:	6922      	ldr	r2, [r4, #16]
 800cf2c:	f104 010c 	add.w	r1, r4, #12
 800cf30:	3202      	adds	r2, #2
 800cf32:	0092      	lsls	r2, r2, #2
 800cf34:	300c      	adds	r0, #12
 800cf36:	f7fc fd63 	bl	8009a00 <memcpy>
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	f7ff ffb7 	bl	800ceb0 <_Bfree>
 800cf42:	4644      	mov	r4, r8
 800cf44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf48:	3501      	adds	r5, #1
 800cf4a:	615f      	str	r7, [r3, #20]
 800cf4c:	6125      	str	r5, [r4, #16]
 800cf4e:	4620      	mov	r0, r4
 800cf50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cf54 <__s2b>:
 800cf54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf58:	4615      	mov	r5, r2
 800cf5a:	2209      	movs	r2, #9
 800cf5c:	461f      	mov	r7, r3
 800cf5e:	3308      	adds	r3, #8
 800cf60:	460c      	mov	r4, r1
 800cf62:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf66:	4606      	mov	r6, r0
 800cf68:	2201      	movs	r2, #1
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	db20      	blt.n	800cfb2 <__s2b+0x5e>
 800cf70:	4630      	mov	r0, r6
 800cf72:	f7ff ff69 	bl	800ce48 <_Balloc>
 800cf76:	9b08      	ldr	r3, [sp, #32]
 800cf78:	2d09      	cmp	r5, #9
 800cf7a:	6143      	str	r3, [r0, #20]
 800cf7c:	f04f 0301 	mov.w	r3, #1
 800cf80:	6103      	str	r3, [r0, #16]
 800cf82:	dd19      	ble.n	800cfb8 <__s2b+0x64>
 800cf84:	f104 0909 	add.w	r9, r4, #9
 800cf88:	46c8      	mov	r8, r9
 800cf8a:	442c      	add	r4, r5
 800cf8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf90:	4601      	mov	r1, r0
 800cf92:	3b30      	subs	r3, #48	; 0x30
 800cf94:	220a      	movs	r2, #10
 800cf96:	4630      	mov	r0, r6
 800cf98:	f7ff ffa1 	bl	800cede <__multadd>
 800cf9c:	45a0      	cmp	r8, r4
 800cf9e:	d1f5      	bne.n	800cf8c <__s2b+0x38>
 800cfa0:	f1a5 0408 	sub.w	r4, r5, #8
 800cfa4:	444c      	add	r4, r9
 800cfa6:	1b2d      	subs	r5, r5, r4
 800cfa8:	1963      	adds	r3, r4, r5
 800cfaa:	42bb      	cmp	r3, r7
 800cfac:	db07      	blt.n	800cfbe <__s2b+0x6a>
 800cfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfb2:	0052      	lsls	r2, r2, #1
 800cfb4:	3101      	adds	r1, #1
 800cfb6:	e7d9      	b.n	800cf6c <__s2b+0x18>
 800cfb8:	340a      	adds	r4, #10
 800cfba:	2509      	movs	r5, #9
 800cfbc:	e7f3      	b.n	800cfa6 <__s2b+0x52>
 800cfbe:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cfc2:	4601      	mov	r1, r0
 800cfc4:	3b30      	subs	r3, #48	; 0x30
 800cfc6:	220a      	movs	r2, #10
 800cfc8:	4630      	mov	r0, r6
 800cfca:	f7ff ff88 	bl	800cede <__multadd>
 800cfce:	e7eb      	b.n	800cfa8 <__s2b+0x54>

0800cfd0 <__hi0bits>:
 800cfd0:	0c02      	lsrs	r2, r0, #16
 800cfd2:	0412      	lsls	r2, r2, #16
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	b9b2      	cbnz	r2, 800d006 <__hi0bits+0x36>
 800cfd8:	0403      	lsls	r3, r0, #16
 800cfda:	2010      	movs	r0, #16
 800cfdc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cfe0:	bf04      	itt	eq
 800cfe2:	021b      	lsleq	r3, r3, #8
 800cfe4:	3008      	addeq	r0, #8
 800cfe6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cfea:	bf04      	itt	eq
 800cfec:	011b      	lsleq	r3, r3, #4
 800cfee:	3004      	addeq	r0, #4
 800cff0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cff4:	bf04      	itt	eq
 800cff6:	009b      	lsleq	r3, r3, #2
 800cff8:	3002      	addeq	r0, #2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	db06      	blt.n	800d00c <__hi0bits+0x3c>
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	d503      	bpl.n	800d00a <__hi0bits+0x3a>
 800d002:	3001      	adds	r0, #1
 800d004:	4770      	bx	lr
 800d006:	2000      	movs	r0, #0
 800d008:	e7e8      	b.n	800cfdc <__hi0bits+0xc>
 800d00a:	2020      	movs	r0, #32
 800d00c:	4770      	bx	lr

0800d00e <__lo0bits>:
 800d00e:	6803      	ldr	r3, [r0, #0]
 800d010:	4601      	mov	r1, r0
 800d012:	f013 0207 	ands.w	r2, r3, #7
 800d016:	d00b      	beq.n	800d030 <__lo0bits+0x22>
 800d018:	07da      	lsls	r2, r3, #31
 800d01a:	d423      	bmi.n	800d064 <__lo0bits+0x56>
 800d01c:	0798      	lsls	r0, r3, #30
 800d01e:	bf49      	itett	mi
 800d020:	085b      	lsrmi	r3, r3, #1
 800d022:	089b      	lsrpl	r3, r3, #2
 800d024:	2001      	movmi	r0, #1
 800d026:	600b      	strmi	r3, [r1, #0]
 800d028:	bf5c      	itt	pl
 800d02a:	600b      	strpl	r3, [r1, #0]
 800d02c:	2002      	movpl	r0, #2
 800d02e:	4770      	bx	lr
 800d030:	b298      	uxth	r0, r3
 800d032:	b9a8      	cbnz	r0, 800d060 <__lo0bits+0x52>
 800d034:	2010      	movs	r0, #16
 800d036:	0c1b      	lsrs	r3, r3, #16
 800d038:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d03c:	bf04      	itt	eq
 800d03e:	0a1b      	lsreq	r3, r3, #8
 800d040:	3008      	addeq	r0, #8
 800d042:	071a      	lsls	r2, r3, #28
 800d044:	bf04      	itt	eq
 800d046:	091b      	lsreq	r3, r3, #4
 800d048:	3004      	addeq	r0, #4
 800d04a:	079a      	lsls	r2, r3, #30
 800d04c:	bf04      	itt	eq
 800d04e:	089b      	lsreq	r3, r3, #2
 800d050:	3002      	addeq	r0, #2
 800d052:	07da      	lsls	r2, r3, #31
 800d054:	d402      	bmi.n	800d05c <__lo0bits+0x4e>
 800d056:	085b      	lsrs	r3, r3, #1
 800d058:	d006      	beq.n	800d068 <__lo0bits+0x5a>
 800d05a:	3001      	adds	r0, #1
 800d05c:	600b      	str	r3, [r1, #0]
 800d05e:	4770      	bx	lr
 800d060:	4610      	mov	r0, r2
 800d062:	e7e9      	b.n	800d038 <__lo0bits+0x2a>
 800d064:	2000      	movs	r0, #0
 800d066:	4770      	bx	lr
 800d068:	2020      	movs	r0, #32
 800d06a:	4770      	bx	lr

0800d06c <__i2b>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	460c      	mov	r4, r1
 800d070:	2101      	movs	r1, #1
 800d072:	f7ff fee9 	bl	800ce48 <_Balloc>
 800d076:	2201      	movs	r2, #1
 800d078:	6144      	str	r4, [r0, #20]
 800d07a:	6102      	str	r2, [r0, #16]
 800d07c:	bd10      	pop	{r4, pc}

0800d07e <__multiply>:
 800d07e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d082:	4614      	mov	r4, r2
 800d084:	690a      	ldr	r2, [r1, #16]
 800d086:	6923      	ldr	r3, [r4, #16]
 800d088:	4689      	mov	r9, r1
 800d08a:	429a      	cmp	r2, r3
 800d08c:	bfbe      	ittt	lt
 800d08e:	460b      	movlt	r3, r1
 800d090:	46a1      	movlt	r9, r4
 800d092:	461c      	movlt	r4, r3
 800d094:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d098:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d09c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d0a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0a4:	eb07 060a 	add.w	r6, r7, sl
 800d0a8:	429e      	cmp	r6, r3
 800d0aa:	bfc8      	it	gt
 800d0ac:	3101      	addgt	r1, #1
 800d0ae:	f7ff fecb 	bl	800ce48 <_Balloc>
 800d0b2:	f100 0514 	add.w	r5, r0, #20
 800d0b6:	462b      	mov	r3, r5
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d0be:	4543      	cmp	r3, r8
 800d0c0:	d316      	bcc.n	800d0f0 <__multiply+0x72>
 800d0c2:	f104 0214 	add.w	r2, r4, #20
 800d0c6:	f109 0114 	add.w	r1, r9, #20
 800d0ca:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800d0ce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d0d2:	9301      	str	r3, [sp, #4]
 800d0d4:	9c01      	ldr	r4, [sp, #4]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	4294      	cmp	r4, r2
 800d0da:	d80c      	bhi.n	800d0f6 <__multiply+0x78>
 800d0dc:	2e00      	cmp	r6, #0
 800d0de:	dd03      	ble.n	800d0e8 <__multiply+0x6a>
 800d0e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d054      	beq.n	800d192 <__multiply+0x114>
 800d0e8:	6106      	str	r6, [r0, #16]
 800d0ea:	b003      	add	sp, #12
 800d0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f0:	f843 2b04 	str.w	r2, [r3], #4
 800d0f4:	e7e3      	b.n	800d0be <__multiply+0x40>
 800d0f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0fa:	3204      	adds	r2, #4
 800d0fc:	f1ba 0f00 	cmp.w	sl, #0
 800d100:	d020      	beq.n	800d144 <__multiply+0xc6>
 800d102:	46ae      	mov	lr, r5
 800d104:	4689      	mov	r9, r1
 800d106:	f04f 0c00 	mov.w	ip, #0
 800d10a:	f859 4b04 	ldr.w	r4, [r9], #4
 800d10e:	f8be b000 	ldrh.w	fp, [lr]
 800d112:	b2a3      	uxth	r3, r4
 800d114:	fb0a b303 	mla	r3, sl, r3, fp
 800d118:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800d11c:	f8de 4000 	ldr.w	r4, [lr]
 800d120:	4463      	add	r3, ip
 800d122:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800d126:	fb0a c40b 	mla	r4, sl, fp, ip
 800d12a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d12e:	b29b      	uxth	r3, r3
 800d130:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d134:	454f      	cmp	r7, r9
 800d136:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800d13a:	f84e 3b04 	str.w	r3, [lr], #4
 800d13e:	d8e4      	bhi.n	800d10a <__multiply+0x8c>
 800d140:	f8ce c000 	str.w	ip, [lr]
 800d144:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800d148:	f1b9 0f00 	cmp.w	r9, #0
 800d14c:	d01f      	beq.n	800d18e <__multiply+0x110>
 800d14e:	46ae      	mov	lr, r5
 800d150:	468c      	mov	ip, r1
 800d152:	f04f 0a00 	mov.w	sl, #0
 800d156:	682b      	ldr	r3, [r5, #0]
 800d158:	f8bc 4000 	ldrh.w	r4, [ip]
 800d15c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d160:	b29b      	uxth	r3, r3
 800d162:	fb09 b404 	mla	r4, r9, r4, fp
 800d166:	44a2      	add	sl, r4
 800d168:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800d16c:	f84e 3b04 	str.w	r3, [lr], #4
 800d170:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d174:	f8be 4000 	ldrh.w	r4, [lr]
 800d178:	0c1b      	lsrs	r3, r3, #16
 800d17a:	fb09 4303 	mla	r3, r9, r3, r4
 800d17e:	4567      	cmp	r7, ip
 800d180:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800d184:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d188:	d8e6      	bhi.n	800d158 <__multiply+0xda>
 800d18a:	f8ce 3000 	str.w	r3, [lr]
 800d18e:	3504      	adds	r5, #4
 800d190:	e7a0      	b.n	800d0d4 <__multiply+0x56>
 800d192:	3e01      	subs	r6, #1
 800d194:	e7a2      	b.n	800d0dc <__multiply+0x5e>
	...

0800d198 <__pow5mult>:
 800d198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d19c:	4615      	mov	r5, r2
 800d19e:	f012 0203 	ands.w	r2, r2, #3
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	460f      	mov	r7, r1
 800d1a6:	d007      	beq.n	800d1b8 <__pow5mult+0x20>
 800d1a8:	4c21      	ldr	r4, [pc, #132]	; (800d230 <__pow5mult+0x98>)
 800d1aa:	3a01      	subs	r2, #1
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1b2:	f7ff fe94 	bl	800cede <__multadd>
 800d1b6:	4607      	mov	r7, r0
 800d1b8:	10ad      	asrs	r5, r5, #2
 800d1ba:	d035      	beq.n	800d228 <__pow5mult+0x90>
 800d1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d1be:	b93c      	cbnz	r4, 800d1d0 <__pow5mult+0x38>
 800d1c0:	2010      	movs	r0, #16
 800d1c2:	f7ff fbf9 	bl	800c9b8 <malloc>
 800d1c6:	6270      	str	r0, [r6, #36]	; 0x24
 800d1c8:	6044      	str	r4, [r0, #4]
 800d1ca:	6084      	str	r4, [r0, #8]
 800d1cc:	6004      	str	r4, [r0, #0]
 800d1ce:	60c4      	str	r4, [r0, #12]
 800d1d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1d8:	b94c      	cbnz	r4, 800d1ee <__pow5mult+0x56>
 800d1da:	f240 2171 	movw	r1, #625	; 0x271
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f7ff ff44 	bl	800d06c <__i2b>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	f04f 0800 	mov.w	r8, #0
 800d1f2:	07eb      	lsls	r3, r5, #31
 800d1f4:	d50a      	bpl.n	800d20c <__pow5mult+0x74>
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f7ff ff3f 	bl	800d07e <__multiply>
 800d200:	4681      	mov	r9, r0
 800d202:	4639      	mov	r1, r7
 800d204:	4630      	mov	r0, r6
 800d206:	f7ff fe53 	bl	800ceb0 <_Bfree>
 800d20a:	464f      	mov	r7, r9
 800d20c:	106d      	asrs	r5, r5, #1
 800d20e:	d00b      	beq.n	800d228 <__pow5mult+0x90>
 800d210:	6820      	ldr	r0, [r4, #0]
 800d212:	b938      	cbnz	r0, 800d224 <__pow5mult+0x8c>
 800d214:	4622      	mov	r2, r4
 800d216:	4621      	mov	r1, r4
 800d218:	4630      	mov	r0, r6
 800d21a:	f7ff ff30 	bl	800d07e <__multiply>
 800d21e:	6020      	str	r0, [r4, #0]
 800d220:	f8c0 8000 	str.w	r8, [r0]
 800d224:	4604      	mov	r4, r0
 800d226:	e7e4      	b.n	800d1f2 <__pow5mult+0x5a>
 800d228:	4638      	mov	r0, r7
 800d22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d22e:	bf00      	nop
 800d230:	08011820 	.word	0x08011820

0800d234 <__lshift>:
 800d234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d238:	460c      	mov	r4, r1
 800d23a:	4607      	mov	r7, r0
 800d23c:	4616      	mov	r6, r2
 800d23e:	6923      	ldr	r3, [r4, #16]
 800d240:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d244:	eb0a 0903 	add.w	r9, sl, r3
 800d248:	6849      	ldr	r1, [r1, #4]
 800d24a:	68a3      	ldr	r3, [r4, #8]
 800d24c:	f109 0501 	add.w	r5, r9, #1
 800d250:	42ab      	cmp	r3, r5
 800d252:	db31      	blt.n	800d2b8 <__lshift+0x84>
 800d254:	4638      	mov	r0, r7
 800d256:	f7ff fdf7 	bl	800ce48 <_Balloc>
 800d25a:	2200      	movs	r2, #0
 800d25c:	4680      	mov	r8, r0
 800d25e:	4611      	mov	r1, r2
 800d260:	f100 0314 	add.w	r3, r0, #20
 800d264:	4552      	cmp	r2, sl
 800d266:	db2a      	blt.n	800d2be <__lshift+0x8a>
 800d268:	6920      	ldr	r0, [r4, #16]
 800d26a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d26e:	f104 0114 	add.w	r1, r4, #20
 800d272:	f016 021f 	ands.w	r2, r6, #31
 800d276:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800d27a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800d27e:	d022      	beq.n	800d2c6 <__lshift+0x92>
 800d280:	2000      	movs	r0, #0
 800d282:	f1c2 0c20 	rsb	ip, r2, #32
 800d286:	680e      	ldr	r6, [r1, #0]
 800d288:	4096      	lsls	r6, r2
 800d28a:	4330      	orrs	r0, r6
 800d28c:	f843 0b04 	str.w	r0, [r3], #4
 800d290:	f851 0b04 	ldr.w	r0, [r1], #4
 800d294:	458e      	cmp	lr, r1
 800d296:	fa20 f00c 	lsr.w	r0, r0, ip
 800d29a:	d8f4      	bhi.n	800d286 <__lshift+0x52>
 800d29c:	6018      	str	r0, [r3, #0]
 800d29e:	b108      	cbz	r0, 800d2a4 <__lshift+0x70>
 800d2a0:	f109 0502 	add.w	r5, r9, #2
 800d2a4:	3d01      	subs	r5, #1
 800d2a6:	4638      	mov	r0, r7
 800d2a8:	f8c8 5010 	str.w	r5, [r8, #16]
 800d2ac:	4621      	mov	r1, r4
 800d2ae:	f7ff fdff 	bl	800ceb0 <_Bfree>
 800d2b2:	4640      	mov	r0, r8
 800d2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b8:	3101      	adds	r1, #1
 800d2ba:	005b      	lsls	r3, r3, #1
 800d2bc:	e7c8      	b.n	800d250 <__lshift+0x1c>
 800d2be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d2c2:	3201      	adds	r2, #1
 800d2c4:	e7ce      	b.n	800d264 <__lshift+0x30>
 800d2c6:	3b04      	subs	r3, #4
 800d2c8:	f851 2b04 	ldr.w	r2, [r1], #4
 800d2cc:	458e      	cmp	lr, r1
 800d2ce:	f843 2f04 	str.w	r2, [r3, #4]!
 800d2d2:	d8f9      	bhi.n	800d2c8 <__lshift+0x94>
 800d2d4:	e7e6      	b.n	800d2a4 <__lshift+0x70>

0800d2d6 <__mcmp>:
 800d2d6:	6903      	ldr	r3, [r0, #16]
 800d2d8:	690a      	ldr	r2, [r1, #16]
 800d2da:	b530      	push	{r4, r5, lr}
 800d2dc:	1a9b      	subs	r3, r3, r2
 800d2de:	d10c      	bne.n	800d2fa <__mcmp+0x24>
 800d2e0:	0092      	lsls	r2, r2, #2
 800d2e2:	3014      	adds	r0, #20
 800d2e4:	3114      	adds	r1, #20
 800d2e6:	1884      	adds	r4, r0, r2
 800d2e8:	4411      	add	r1, r2
 800d2ea:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2ee:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2f2:	4295      	cmp	r5, r2
 800d2f4:	d003      	beq.n	800d2fe <__mcmp+0x28>
 800d2f6:	d305      	bcc.n	800d304 <__mcmp+0x2e>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	bd30      	pop	{r4, r5, pc}
 800d2fe:	42a0      	cmp	r0, r4
 800d300:	d3f3      	bcc.n	800d2ea <__mcmp+0x14>
 800d302:	e7fa      	b.n	800d2fa <__mcmp+0x24>
 800d304:	f04f 33ff 	mov.w	r3, #4294967295
 800d308:	e7f7      	b.n	800d2fa <__mcmp+0x24>

0800d30a <__mdiff>:
 800d30a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d30e:	460d      	mov	r5, r1
 800d310:	4607      	mov	r7, r0
 800d312:	4611      	mov	r1, r2
 800d314:	4628      	mov	r0, r5
 800d316:	4614      	mov	r4, r2
 800d318:	f7ff ffdd 	bl	800d2d6 <__mcmp>
 800d31c:	1e06      	subs	r6, r0, #0
 800d31e:	d108      	bne.n	800d332 <__mdiff+0x28>
 800d320:	4631      	mov	r1, r6
 800d322:	4638      	mov	r0, r7
 800d324:	f7ff fd90 	bl	800ce48 <_Balloc>
 800d328:	2301      	movs	r3, #1
 800d32a:	6146      	str	r6, [r0, #20]
 800d32c:	6103      	str	r3, [r0, #16]
 800d32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d332:	bfa4      	itt	ge
 800d334:	4623      	movge	r3, r4
 800d336:	462c      	movge	r4, r5
 800d338:	4638      	mov	r0, r7
 800d33a:	6861      	ldr	r1, [r4, #4]
 800d33c:	bfa6      	itte	ge
 800d33e:	461d      	movge	r5, r3
 800d340:	2600      	movge	r6, #0
 800d342:	2601      	movlt	r6, #1
 800d344:	f7ff fd80 	bl	800ce48 <_Balloc>
 800d348:	f04f 0c00 	mov.w	ip, #0
 800d34c:	60c6      	str	r6, [r0, #12]
 800d34e:	692b      	ldr	r3, [r5, #16]
 800d350:	6926      	ldr	r6, [r4, #16]
 800d352:	f104 0214 	add.w	r2, r4, #20
 800d356:	f105 0914 	add.w	r9, r5, #20
 800d35a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d35e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d362:	f100 0114 	add.w	r1, r0, #20
 800d366:	f852 ab04 	ldr.w	sl, [r2], #4
 800d36a:	f859 5b04 	ldr.w	r5, [r9], #4
 800d36e:	fa1f f38a 	uxth.w	r3, sl
 800d372:	4463      	add	r3, ip
 800d374:	b2ac      	uxth	r4, r5
 800d376:	1b1b      	subs	r3, r3, r4
 800d378:	0c2c      	lsrs	r4, r5, #16
 800d37a:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800d37e:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800d382:	b29b      	uxth	r3, r3
 800d384:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d388:	45c8      	cmp	r8, r9
 800d38a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d38e:	4696      	mov	lr, r2
 800d390:	f841 4b04 	str.w	r4, [r1], #4
 800d394:	d8e7      	bhi.n	800d366 <__mdiff+0x5c>
 800d396:	45be      	cmp	lr, r7
 800d398:	d305      	bcc.n	800d3a6 <__mdiff+0x9c>
 800d39a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d39e:	b18b      	cbz	r3, 800d3c4 <__mdiff+0xba>
 800d3a0:	6106      	str	r6, [r0, #16]
 800d3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d3aa:	b2a2      	uxth	r2, r4
 800d3ac:	4462      	add	r2, ip
 800d3ae:	1413      	asrs	r3, r2, #16
 800d3b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d3b4:	b292      	uxth	r2, r2
 800d3b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d3ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d3be:	f841 2b04 	str.w	r2, [r1], #4
 800d3c2:	e7e8      	b.n	800d396 <__mdiff+0x8c>
 800d3c4:	3e01      	subs	r6, #1
 800d3c6:	e7e8      	b.n	800d39a <__mdiff+0x90>

0800d3c8 <__ulp>:
 800d3c8:	4b10      	ldr	r3, [pc, #64]	; (800d40c <__ulp+0x44>)
 800d3ca:	400b      	ands	r3, r1
 800d3cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	dd02      	ble.n	800d3da <__ulp+0x12>
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	4770      	bx	lr
 800d3da:	425b      	negs	r3, r3
 800d3dc:	151b      	asrs	r3, r3, #20
 800d3de:	2b13      	cmp	r3, #19
 800d3e0:	f04f 0000 	mov.w	r0, #0
 800d3e4:	f04f 0100 	mov.w	r1, #0
 800d3e8:	dc04      	bgt.n	800d3f4 <__ulp+0x2c>
 800d3ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d3ee:	fa42 f103 	asr.w	r1, r2, r3
 800d3f2:	4770      	bx	lr
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	3b14      	subs	r3, #20
 800d3f8:	2b1e      	cmp	r3, #30
 800d3fa:	bfce      	itee	gt
 800d3fc:	4613      	movgt	r3, r2
 800d3fe:	f1c3 031f 	rsble	r3, r3, #31
 800d402:	fa02 f303 	lslle.w	r3, r2, r3
 800d406:	4618      	mov	r0, r3
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop
 800d40c:	7ff00000 	.word	0x7ff00000

0800d410 <__b2d>:
 800d410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d414:	6907      	ldr	r7, [r0, #16]
 800d416:	f100 0914 	add.w	r9, r0, #20
 800d41a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d41e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d422:	f1a7 0804 	sub.w	r8, r7, #4
 800d426:	4630      	mov	r0, r6
 800d428:	f7ff fdd2 	bl	800cfd0 <__hi0bits>
 800d42c:	f1c0 0320 	rsb	r3, r0, #32
 800d430:	280a      	cmp	r0, #10
 800d432:	600b      	str	r3, [r1, #0]
 800d434:	491e      	ldr	r1, [pc, #120]	; (800d4b0 <__b2d+0xa0>)
 800d436:	dc17      	bgt.n	800d468 <__b2d+0x58>
 800d438:	45c1      	cmp	r9, r8
 800d43a:	bf28      	it	cs
 800d43c:	2200      	movcs	r2, #0
 800d43e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d442:	fa26 f30e 	lsr.w	r3, r6, lr
 800d446:	bf38      	it	cc
 800d448:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d44c:	ea43 0501 	orr.w	r5, r3, r1
 800d450:	f100 0315 	add.w	r3, r0, #21
 800d454:	fa06 f303 	lsl.w	r3, r6, r3
 800d458:	fa22 f20e 	lsr.w	r2, r2, lr
 800d45c:	ea43 0402 	orr.w	r4, r3, r2
 800d460:	4620      	mov	r0, r4
 800d462:	4629      	mov	r1, r5
 800d464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d468:	45c1      	cmp	r9, r8
 800d46a:	bf3a      	itte	cc
 800d46c:	f1a7 0808 	subcc.w	r8, r7, #8
 800d470:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d474:	2200      	movcs	r2, #0
 800d476:	f1b0 030b 	subs.w	r3, r0, #11
 800d47a:	d015      	beq.n	800d4a8 <__b2d+0x98>
 800d47c:	409e      	lsls	r6, r3
 800d47e:	f1c3 0720 	rsb	r7, r3, #32
 800d482:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800d486:	fa22 f107 	lsr.w	r1, r2, r7
 800d48a:	45c8      	cmp	r8, r9
 800d48c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800d490:	ea46 0501 	orr.w	r5, r6, r1
 800d494:	bf94      	ite	ls
 800d496:	2100      	movls	r1, #0
 800d498:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d49c:	fa02 f003 	lsl.w	r0, r2, r3
 800d4a0:	40f9      	lsrs	r1, r7
 800d4a2:	ea40 0401 	orr.w	r4, r0, r1
 800d4a6:	e7db      	b.n	800d460 <__b2d+0x50>
 800d4a8:	ea46 0501 	orr.w	r5, r6, r1
 800d4ac:	4614      	mov	r4, r2
 800d4ae:	e7d7      	b.n	800d460 <__b2d+0x50>
 800d4b0:	3ff00000 	.word	0x3ff00000

0800d4b4 <__d2b>:
 800d4b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d4b8:	461c      	mov	r4, r3
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	4690      	mov	r8, r2
 800d4be:	9e08      	ldr	r6, [sp, #32]
 800d4c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d4c2:	f7ff fcc1 	bl	800ce48 <_Balloc>
 800d4c6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800d4ca:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d4ce:	4607      	mov	r7, r0
 800d4d0:	bb34      	cbnz	r4, 800d520 <__d2b+0x6c>
 800d4d2:	9201      	str	r2, [sp, #4]
 800d4d4:	f1b8 0f00 	cmp.w	r8, #0
 800d4d8:	d027      	beq.n	800d52a <__d2b+0x76>
 800d4da:	a802      	add	r0, sp, #8
 800d4dc:	f840 8d08 	str.w	r8, [r0, #-8]!
 800d4e0:	f7ff fd95 	bl	800d00e <__lo0bits>
 800d4e4:	9900      	ldr	r1, [sp, #0]
 800d4e6:	b1f0      	cbz	r0, 800d526 <__d2b+0x72>
 800d4e8:	9a01      	ldr	r2, [sp, #4]
 800d4ea:	f1c0 0320 	rsb	r3, r0, #32
 800d4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d4f2:	430b      	orrs	r3, r1
 800d4f4:	40c2      	lsrs	r2, r0
 800d4f6:	617b      	str	r3, [r7, #20]
 800d4f8:	9201      	str	r2, [sp, #4]
 800d4fa:	9b01      	ldr	r3, [sp, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	bf14      	ite	ne
 800d500:	2102      	movne	r1, #2
 800d502:	2101      	moveq	r1, #1
 800d504:	61bb      	str	r3, [r7, #24]
 800d506:	6139      	str	r1, [r7, #16]
 800d508:	b1c4      	cbz	r4, 800d53c <__d2b+0x88>
 800d50a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d50e:	4404      	add	r4, r0
 800d510:	6034      	str	r4, [r6, #0]
 800d512:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d516:	6028      	str	r0, [r5, #0]
 800d518:	4638      	mov	r0, r7
 800d51a:	b002      	add	sp, #8
 800d51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d520:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d524:	e7d5      	b.n	800d4d2 <__d2b+0x1e>
 800d526:	6179      	str	r1, [r7, #20]
 800d528:	e7e7      	b.n	800d4fa <__d2b+0x46>
 800d52a:	a801      	add	r0, sp, #4
 800d52c:	f7ff fd6f 	bl	800d00e <__lo0bits>
 800d530:	2101      	movs	r1, #1
 800d532:	9b01      	ldr	r3, [sp, #4]
 800d534:	6139      	str	r1, [r7, #16]
 800d536:	617b      	str	r3, [r7, #20]
 800d538:	3020      	adds	r0, #32
 800d53a:	e7e5      	b.n	800d508 <__d2b+0x54>
 800d53c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d540:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d544:	6030      	str	r0, [r6, #0]
 800d546:	6918      	ldr	r0, [r3, #16]
 800d548:	f7ff fd42 	bl	800cfd0 <__hi0bits>
 800d54c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d550:	e7e1      	b.n	800d516 <__d2b+0x62>

0800d552 <__ratio>:
 800d552:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d556:	4688      	mov	r8, r1
 800d558:	4669      	mov	r1, sp
 800d55a:	4681      	mov	r9, r0
 800d55c:	f7ff ff58 	bl	800d410 <__b2d>
 800d560:	460d      	mov	r5, r1
 800d562:	4604      	mov	r4, r0
 800d564:	a901      	add	r1, sp, #4
 800d566:	4640      	mov	r0, r8
 800d568:	f7ff ff52 	bl	800d410 <__b2d>
 800d56c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d570:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d574:	9e00      	ldr	r6, [sp, #0]
 800d576:	1a9a      	subs	r2, r3, r2
 800d578:	9b01      	ldr	r3, [sp, #4]
 800d57a:	1af3      	subs	r3, r6, r3
 800d57c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d580:	2b00      	cmp	r3, #0
 800d582:	bfd6      	itet	le
 800d584:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d588:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 800d58c:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
 800d594:	4620      	mov	r0, r4
 800d596:	4629      	mov	r1, r5
 800d598:	f7f3 f8c4 	bl	8000724 <__aeabi_ddiv>
 800d59c:	b002      	add	sp, #8
 800d59e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0800d5a2 <__copybits>:
 800d5a2:	3901      	subs	r1, #1
 800d5a4:	b510      	push	{r4, lr}
 800d5a6:	1149      	asrs	r1, r1, #5
 800d5a8:	6914      	ldr	r4, [r2, #16]
 800d5aa:	3101      	adds	r1, #1
 800d5ac:	f102 0314 	add.w	r3, r2, #20
 800d5b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d5b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d5b8:	42a3      	cmp	r3, r4
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	d303      	bcc.n	800d5c6 <__copybits+0x24>
 800d5be:	2300      	movs	r3, #0
 800d5c0:	428a      	cmp	r2, r1
 800d5c2:	d305      	bcc.n	800d5d0 <__copybits+0x2e>
 800d5c4:	bd10      	pop	{r4, pc}
 800d5c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ca:	f840 2b04 	str.w	r2, [r0], #4
 800d5ce:	e7f3      	b.n	800d5b8 <__copybits+0x16>
 800d5d0:	f842 3b04 	str.w	r3, [r2], #4
 800d5d4:	e7f4      	b.n	800d5c0 <__copybits+0x1e>

0800d5d6 <__any_on>:
 800d5d6:	f100 0214 	add.w	r2, r0, #20
 800d5da:	6900      	ldr	r0, [r0, #16]
 800d5dc:	114b      	asrs	r3, r1, #5
 800d5de:	4298      	cmp	r0, r3
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	db11      	blt.n	800d608 <__any_on+0x32>
 800d5e4:	dd0a      	ble.n	800d5fc <__any_on+0x26>
 800d5e6:	f011 011f 	ands.w	r1, r1, #31
 800d5ea:	d007      	beq.n	800d5fc <__any_on+0x26>
 800d5ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5f0:	fa24 f001 	lsr.w	r0, r4, r1
 800d5f4:	fa00 f101 	lsl.w	r1, r0, r1
 800d5f8:	428c      	cmp	r4, r1
 800d5fa:	d10b      	bne.n	800d614 <__any_on+0x3e>
 800d5fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d600:	4293      	cmp	r3, r2
 800d602:	d803      	bhi.n	800d60c <__any_on+0x36>
 800d604:	2000      	movs	r0, #0
 800d606:	bd10      	pop	{r4, pc}
 800d608:	4603      	mov	r3, r0
 800d60a:	e7f7      	b.n	800d5fc <__any_on+0x26>
 800d60c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d610:	2900      	cmp	r1, #0
 800d612:	d0f5      	beq.n	800d600 <__any_on+0x2a>
 800d614:	2001      	movs	r0, #1
 800d616:	bd10      	pop	{r4, pc}

0800d618 <_realloc_r>:
 800d618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61c:	4682      	mov	sl, r0
 800d61e:	460c      	mov	r4, r1
 800d620:	b929      	cbnz	r1, 800d62e <_realloc_r+0x16>
 800d622:	4611      	mov	r1, r2
 800d624:	b003      	add	sp, #12
 800d626:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62a:	f7ff b9cd 	b.w	800c9c8 <_malloc_r>
 800d62e:	9201      	str	r2, [sp, #4]
 800d630:	f7ff fbfe 	bl	800ce30 <__malloc_lock>
 800d634:	9a01      	ldr	r2, [sp, #4]
 800d636:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800d63a:	f102 080b 	add.w	r8, r2, #11
 800d63e:	f1b8 0f16 	cmp.w	r8, #22
 800d642:	f1a4 0908 	sub.w	r9, r4, #8
 800d646:	f025 0603 	bic.w	r6, r5, #3
 800d64a:	d90a      	bls.n	800d662 <_realloc_r+0x4a>
 800d64c:	f038 0807 	bics.w	r8, r8, #7
 800d650:	d509      	bpl.n	800d666 <_realloc_r+0x4e>
 800d652:	230c      	movs	r3, #12
 800d654:	2700      	movs	r7, #0
 800d656:	f8ca 3000 	str.w	r3, [sl]
 800d65a:	4638      	mov	r0, r7
 800d65c:	b003      	add	sp, #12
 800d65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d662:	f04f 0810 	mov.w	r8, #16
 800d666:	4590      	cmp	r8, r2
 800d668:	d3f3      	bcc.n	800d652 <_realloc_r+0x3a>
 800d66a:	45b0      	cmp	r8, r6
 800d66c:	f340 8148 	ble.w	800d900 <_realloc_r+0x2e8>
 800d670:	4ba9      	ldr	r3, [pc, #676]	; (800d918 <_realloc_r+0x300>)
 800d672:	eb09 0106 	add.w	r1, r9, r6
 800d676:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800d67a:	469b      	mov	fp, r3
 800d67c:	4571      	cmp	r1, lr
 800d67e:	684b      	ldr	r3, [r1, #4]
 800d680:	d005      	beq.n	800d68e <_realloc_r+0x76>
 800d682:	f023 0001 	bic.w	r0, r3, #1
 800d686:	4408      	add	r0, r1
 800d688:	6840      	ldr	r0, [r0, #4]
 800d68a:	07c7      	lsls	r7, r0, #31
 800d68c:	d447      	bmi.n	800d71e <_realloc_r+0x106>
 800d68e:	f023 0303 	bic.w	r3, r3, #3
 800d692:	4571      	cmp	r1, lr
 800d694:	eb06 0703 	add.w	r7, r6, r3
 800d698:	d119      	bne.n	800d6ce <_realloc_r+0xb6>
 800d69a:	f108 0010 	add.w	r0, r8, #16
 800d69e:	4287      	cmp	r7, r0
 800d6a0:	db3f      	blt.n	800d722 <_realloc_r+0x10a>
 800d6a2:	eba7 0708 	sub.w	r7, r7, r8
 800d6a6:	eb09 0308 	add.w	r3, r9, r8
 800d6aa:	f047 0701 	orr.w	r7, r7, #1
 800d6ae:	f8cb 3008 	str.w	r3, [fp, #8]
 800d6b2:	605f      	str	r7, [r3, #4]
 800d6b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d6b8:	4650      	mov	r0, sl
 800d6ba:	f003 0301 	and.w	r3, r3, #1
 800d6be:	ea43 0308 	orr.w	r3, r3, r8
 800d6c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6c6:	f7ff fbb9 	bl	800ce3c <__malloc_unlock>
 800d6ca:	4627      	mov	r7, r4
 800d6cc:	e7c5      	b.n	800d65a <_realloc_r+0x42>
 800d6ce:	45b8      	cmp	r8, r7
 800d6d0:	dc27      	bgt.n	800d722 <_realloc_r+0x10a>
 800d6d2:	68cb      	ldr	r3, [r1, #12]
 800d6d4:	688a      	ldr	r2, [r1, #8]
 800d6d6:	60d3      	str	r3, [r2, #12]
 800d6d8:	609a      	str	r2, [r3, #8]
 800d6da:	eba7 0008 	sub.w	r0, r7, r8
 800d6de:	280f      	cmp	r0, #15
 800d6e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d6e4:	eb09 0207 	add.w	r2, r9, r7
 800d6e8:	f240 810c 	bls.w	800d904 <_realloc_r+0x2ec>
 800d6ec:	f003 0301 	and.w	r3, r3, #1
 800d6f0:	eb09 0108 	add.w	r1, r9, r8
 800d6f4:	ea43 0308 	orr.w	r3, r3, r8
 800d6f8:	f040 0001 	orr.w	r0, r0, #1
 800d6fc:	f8c9 3004 	str.w	r3, [r9, #4]
 800d700:	6048      	str	r0, [r1, #4]
 800d702:	6853      	ldr	r3, [r2, #4]
 800d704:	3108      	adds	r1, #8
 800d706:	f043 0301 	orr.w	r3, r3, #1
 800d70a:	6053      	str	r3, [r2, #4]
 800d70c:	4650      	mov	r0, sl
 800d70e:	f000 fa29 	bl	800db64 <_free_r>
 800d712:	4650      	mov	r0, sl
 800d714:	f7ff fb92 	bl	800ce3c <__malloc_unlock>
 800d718:	f109 0708 	add.w	r7, r9, #8
 800d71c:	e79d      	b.n	800d65a <_realloc_r+0x42>
 800d71e:	2300      	movs	r3, #0
 800d720:	4619      	mov	r1, r3
 800d722:	07e8      	lsls	r0, r5, #31
 800d724:	f100 8085 	bmi.w	800d832 <_realloc_r+0x21a>
 800d728:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800d72c:	eba9 0505 	sub.w	r5, r9, r5
 800d730:	6868      	ldr	r0, [r5, #4]
 800d732:	f020 0003 	bic.w	r0, r0, #3
 800d736:	4430      	add	r0, r6
 800d738:	2900      	cmp	r1, #0
 800d73a:	d077      	beq.n	800d82c <_realloc_r+0x214>
 800d73c:	4571      	cmp	r1, lr
 800d73e:	d151      	bne.n	800d7e4 <_realloc_r+0x1cc>
 800d740:	4403      	add	r3, r0
 800d742:	f108 0110 	add.w	r1, r8, #16
 800d746:	428b      	cmp	r3, r1
 800d748:	db70      	blt.n	800d82c <_realloc_r+0x214>
 800d74a:	462f      	mov	r7, r5
 800d74c:	68ea      	ldr	r2, [r5, #12]
 800d74e:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800d752:	60ca      	str	r2, [r1, #12]
 800d754:	6091      	str	r1, [r2, #8]
 800d756:	1f32      	subs	r2, r6, #4
 800d758:	2a24      	cmp	r2, #36	; 0x24
 800d75a:	d83c      	bhi.n	800d7d6 <_realloc_r+0x1be>
 800d75c:	2a13      	cmp	r2, #19
 800d75e:	d937      	bls.n	800d7d0 <_realloc_r+0x1b8>
 800d760:	6821      	ldr	r1, [r4, #0]
 800d762:	2a1b      	cmp	r2, #27
 800d764:	60a9      	str	r1, [r5, #8]
 800d766:	6861      	ldr	r1, [r4, #4]
 800d768:	60e9      	str	r1, [r5, #12]
 800d76a:	d81c      	bhi.n	800d7a6 <_realloc_r+0x18e>
 800d76c:	f105 0210 	add.w	r2, r5, #16
 800d770:	f104 0108 	add.w	r1, r4, #8
 800d774:	6808      	ldr	r0, [r1, #0]
 800d776:	6010      	str	r0, [r2, #0]
 800d778:	6848      	ldr	r0, [r1, #4]
 800d77a:	6050      	str	r0, [r2, #4]
 800d77c:	6889      	ldr	r1, [r1, #8]
 800d77e:	6091      	str	r1, [r2, #8]
 800d780:	eba3 0308 	sub.w	r3, r3, r8
 800d784:	eb05 0208 	add.w	r2, r5, r8
 800d788:	f043 0301 	orr.w	r3, r3, #1
 800d78c:	f8cb 2008 	str.w	r2, [fp, #8]
 800d790:	6053      	str	r3, [r2, #4]
 800d792:	686b      	ldr	r3, [r5, #4]
 800d794:	f003 0301 	and.w	r3, r3, #1
 800d798:	ea43 0308 	orr.w	r3, r3, r8
 800d79c:	606b      	str	r3, [r5, #4]
 800d79e:	4650      	mov	r0, sl
 800d7a0:	f7ff fb4c 	bl	800ce3c <__malloc_unlock>
 800d7a4:	e759      	b.n	800d65a <_realloc_r+0x42>
 800d7a6:	68a1      	ldr	r1, [r4, #8]
 800d7a8:	2a24      	cmp	r2, #36	; 0x24
 800d7aa:	6129      	str	r1, [r5, #16]
 800d7ac:	68e1      	ldr	r1, [r4, #12]
 800d7ae:	bf18      	it	ne
 800d7b0:	f105 0218 	addne.w	r2, r5, #24
 800d7b4:	6169      	str	r1, [r5, #20]
 800d7b6:	bf09      	itett	eq
 800d7b8:	6922      	ldreq	r2, [r4, #16]
 800d7ba:	f104 0110 	addne.w	r1, r4, #16
 800d7be:	61aa      	streq	r2, [r5, #24]
 800d7c0:	6960      	ldreq	r0, [r4, #20]
 800d7c2:	bf02      	ittt	eq
 800d7c4:	f105 0220 	addeq.w	r2, r5, #32
 800d7c8:	f104 0118 	addeq.w	r1, r4, #24
 800d7cc:	61e8      	streq	r0, [r5, #28]
 800d7ce:	e7d1      	b.n	800d774 <_realloc_r+0x15c>
 800d7d0:	463a      	mov	r2, r7
 800d7d2:	4621      	mov	r1, r4
 800d7d4:	e7ce      	b.n	800d774 <_realloc_r+0x15c>
 800d7d6:	4621      	mov	r1, r4
 800d7d8:	4638      	mov	r0, r7
 800d7da:	9301      	str	r3, [sp, #4]
 800d7dc:	f7ff fb0e 	bl	800cdfc <memmove>
 800d7e0:	9b01      	ldr	r3, [sp, #4]
 800d7e2:	e7cd      	b.n	800d780 <_realloc_r+0x168>
 800d7e4:	18c7      	adds	r7, r0, r3
 800d7e6:	45b8      	cmp	r8, r7
 800d7e8:	dc20      	bgt.n	800d82c <_realloc_r+0x214>
 800d7ea:	68cb      	ldr	r3, [r1, #12]
 800d7ec:	688a      	ldr	r2, [r1, #8]
 800d7ee:	60d3      	str	r3, [r2, #12]
 800d7f0:	609a      	str	r2, [r3, #8]
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	68eb      	ldr	r3, [r5, #12]
 800d7f6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800d7fa:	60d3      	str	r3, [r2, #12]
 800d7fc:	609a      	str	r2, [r3, #8]
 800d7fe:	1f32      	subs	r2, r6, #4
 800d800:	2a24      	cmp	r2, #36	; 0x24
 800d802:	d843      	bhi.n	800d88c <_realloc_r+0x274>
 800d804:	2a13      	cmp	r2, #19
 800d806:	d93f      	bls.n	800d888 <_realloc_r+0x270>
 800d808:	6823      	ldr	r3, [r4, #0]
 800d80a:	2a1b      	cmp	r2, #27
 800d80c:	60ab      	str	r3, [r5, #8]
 800d80e:	6863      	ldr	r3, [r4, #4]
 800d810:	60eb      	str	r3, [r5, #12]
 800d812:	d824      	bhi.n	800d85e <_realloc_r+0x246>
 800d814:	f105 0010 	add.w	r0, r5, #16
 800d818:	f104 0308 	add.w	r3, r4, #8
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	6002      	str	r2, [r0, #0]
 800d820:	685a      	ldr	r2, [r3, #4]
 800d822:	6042      	str	r2, [r0, #4]
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	6083      	str	r3, [r0, #8]
 800d828:	46a9      	mov	r9, r5
 800d82a:	e756      	b.n	800d6da <_realloc_r+0xc2>
 800d82c:	4580      	cmp	r8, r0
 800d82e:	4607      	mov	r7, r0
 800d830:	dddf      	ble.n	800d7f2 <_realloc_r+0x1da>
 800d832:	4611      	mov	r1, r2
 800d834:	4650      	mov	r0, sl
 800d836:	f7ff f8c7 	bl	800c9c8 <_malloc_r>
 800d83a:	4607      	mov	r7, r0
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d0ae      	beq.n	800d79e <_realloc_r+0x186>
 800d840:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d844:	f1a0 0208 	sub.w	r2, r0, #8
 800d848:	f023 0301 	bic.w	r3, r3, #1
 800d84c:	444b      	add	r3, r9
 800d84e:	429a      	cmp	r2, r3
 800d850:	d120      	bne.n	800d894 <_realloc_r+0x27c>
 800d852:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800d856:	f027 0703 	bic.w	r7, r7, #3
 800d85a:	4437      	add	r7, r6
 800d85c:	e73d      	b.n	800d6da <_realloc_r+0xc2>
 800d85e:	68a3      	ldr	r3, [r4, #8]
 800d860:	2a24      	cmp	r2, #36	; 0x24
 800d862:	612b      	str	r3, [r5, #16]
 800d864:	68e3      	ldr	r3, [r4, #12]
 800d866:	bf18      	it	ne
 800d868:	f105 0018 	addne.w	r0, r5, #24
 800d86c:	616b      	str	r3, [r5, #20]
 800d86e:	bf09      	itett	eq
 800d870:	6923      	ldreq	r3, [r4, #16]
 800d872:	f104 0310 	addne.w	r3, r4, #16
 800d876:	61ab      	streq	r3, [r5, #24]
 800d878:	6962      	ldreq	r2, [r4, #20]
 800d87a:	bf02      	ittt	eq
 800d87c:	f105 0020 	addeq.w	r0, r5, #32
 800d880:	f104 0318 	addeq.w	r3, r4, #24
 800d884:	61ea      	streq	r2, [r5, #28]
 800d886:	e7c9      	b.n	800d81c <_realloc_r+0x204>
 800d888:	4623      	mov	r3, r4
 800d88a:	e7c7      	b.n	800d81c <_realloc_r+0x204>
 800d88c:	4621      	mov	r1, r4
 800d88e:	f7ff fab5 	bl	800cdfc <memmove>
 800d892:	e7c9      	b.n	800d828 <_realloc_r+0x210>
 800d894:	1f32      	subs	r2, r6, #4
 800d896:	2a24      	cmp	r2, #36	; 0x24
 800d898:	d82e      	bhi.n	800d8f8 <_realloc_r+0x2e0>
 800d89a:	2a13      	cmp	r2, #19
 800d89c:	d929      	bls.n	800d8f2 <_realloc_r+0x2da>
 800d89e:	6823      	ldr	r3, [r4, #0]
 800d8a0:	2a1b      	cmp	r2, #27
 800d8a2:	6003      	str	r3, [r0, #0]
 800d8a4:	6863      	ldr	r3, [r4, #4]
 800d8a6:	6043      	str	r3, [r0, #4]
 800d8a8:	d80e      	bhi.n	800d8c8 <_realloc_r+0x2b0>
 800d8aa:	f100 0308 	add.w	r3, r0, #8
 800d8ae:	f104 0208 	add.w	r2, r4, #8
 800d8b2:	6811      	ldr	r1, [r2, #0]
 800d8b4:	6019      	str	r1, [r3, #0]
 800d8b6:	6851      	ldr	r1, [r2, #4]
 800d8b8:	6059      	str	r1, [r3, #4]
 800d8ba:	6892      	ldr	r2, [r2, #8]
 800d8bc:	609a      	str	r2, [r3, #8]
 800d8be:	4621      	mov	r1, r4
 800d8c0:	4650      	mov	r0, sl
 800d8c2:	f000 f94f 	bl	800db64 <_free_r>
 800d8c6:	e76a      	b.n	800d79e <_realloc_r+0x186>
 800d8c8:	68a3      	ldr	r3, [r4, #8]
 800d8ca:	2a24      	cmp	r2, #36	; 0x24
 800d8cc:	6083      	str	r3, [r0, #8]
 800d8ce:	68e3      	ldr	r3, [r4, #12]
 800d8d0:	bf18      	it	ne
 800d8d2:	f104 0210 	addne.w	r2, r4, #16
 800d8d6:	60c3      	str	r3, [r0, #12]
 800d8d8:	bf09      	itett	eq
 800d8da:	6923      	ldreq	r3, [r4, #16]
 800d8dc:	f100 0310 	addne.w	r3, r0, #16
 800d8e0:	6103      	streq	r3, [r0, #16]
 800d8e2:	6961      	ldreq	r1, [r4, #20]
 800d8e4:	bf02      	ittt	eq
 800d8e6:	f100 0318 	addeq.w	r3, r0, #24
 800d8ea:	f104 0218 	addeq.w	r2, r4, #24
 800d8ee:	6141      	streq	r1, [r0, #20]
 800d8f0:	e7df      	b.n	800d8b2 <_realloc_r+0x29a>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	e7dc      	b.n	800d8b2 <_realloc_r+0x29a>
 800d8f8:	4621      	mov	r1, r4
 800d8fa:	f7ff fa7f 	bl	800cdfc <memmove>
 800d8fe:	e7de      	b.n	800d8be <_realloc_r+0x2a6>
 800d900:	4637      	mov	r7, r6
 800d902:	e6ea      	b.n	800d6da <_realloc_r+0xc2>
 800d904:	f003 0301 	and.w	r3, r3, #1
 800d908:	431f      	orrs	r7, r3
 800d90a:	f8c9 7004 	str.w	r7, [r9, #4]
 800d90e:	6853      	ldr	r3, [r2, #4]
 800d910:	f043 0301 	orr.w	r3, r3, #1
 800d914:	6053      	str	r3, [r2, #4]
 800d916:	e6fc      	b.n	800d712 <_realloc_r+0xfa>
 800d918:	2000028c 	.word	0x2000028c

0800d91c <_sbrk_r>:
 800d91c:	b538      	push	{r3, r4, r5, lr}
 800d91e:	2300      	movs	r3, #0
 800d920:	4c05      	ldr	r4, [pc, #20]	; (800d938 <_sbrk_r+0x1c>)
 800d922:	4605      	mov	r5, r0
 800d924:	4608      	mov	r0, r1
 800d926:	6023      	str	r3, [r4, #0]
 800d928:	f003 f9c4 	bl	8010cb4 <_sbrk>
 800d92c:	1c43      	adds	r3, r0, #1
 800d92e:	d102      	bne.n	800d936 <_sbrk_r+0x1a>
 800d930:	6823      	ldr	r3, [r4, #0]
 800d932:	b103      	cbz	r3, 800d936 <_sbrk_r+0x1a>
 800d934:	602b      	str	r3, [r5, #0]
 800d936:	bd38      	pop	{r3, r4, r5, pc}
 800d938:	200015f8 	.word	0x200015f8

0800d93c <nanf>:
 800d93c:	4800      	ldr	r0, [pc, #0]	; (800d940 <nanf+0x4>)
 800d93e:	4770      	bx	lr
 800d940:	7fc00000 	.word	0x7fc00000

0800d944 <strncmp>:
 800d944:	b510      	push	{r4, lr}
 800d946:	b16a      	cbz	r2, 800d964 <strncmp+0x20>
 800d948:	3901      	subs	r1, #1
 800d94a:	1884      	adds	r4, r0, r2
 800d94c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d950:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d954:	4293      	cmp	r3, r2
 800d956:	d103      	bne.n	800d960 <strncmp+0x1c>
 800d958:	42a0      	cmp	r0, r4
 800d95a:	d001      	beq.n	800d960 <strncmp+0x1c>
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d1f5      	bne.n	800d94c <strncmp+0x8>
 800d960:	1a98      	subs	r0, r3, r2
 800d962:	bd10      	pop	{r4, pc}
 800d964:	4610      	mov	r0, r2
 800d966:	bd10      	pop	{r4, pc}

0800d968 <__ssprint_r>:
 800d968:	6893      	ldr	r3, [r2, #8]
 800d96a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96e:	4681      	mov	r9, r0
 800d970:	460c      	mov	r4, r1
 800d972:	4617      	mov	r7, r2
 800d974:	2b00      	cmp	r3, #0
 800d976:	d060      	beq.n	800da3a <__ssprint_r+0xd2>
 800d978:	f04f 0b00 	mov.w	fp, #0
 800d97c:	465e      	mov	r6, fp
 800d97e:	f8d2 a000 	ldr.w	sl, [r2]
 800d982:	b356      	cbz	r6, 800d9da <__ssprint_r+0x72>
 800d984:	68a3      	ldr	r3, [r4, #8]
 800d986:	429e      	cmp	r6, r3
 800d988:	d344      	bcc.n	800da14 <__ssprint_r+0xac>
 800d98a:	89a2      	ldrh	r2, [r4, #12]
 800d98c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d990:	d03e      	beq.n	800da10 <__ssprint_r+0xa8>
 800d992:	2302      	movs	r3, #2
 800d994:	6825      	ldr	r5, [r4, #0]
 800d996:	6921      	ldr	r1, [r4, #16]
 800d998:	eba5 0801 	sub.w	r8, r5, r1
 800d99c:	6965      	ldr	r5, [r4, #20]
 800d99e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9a2:	fb95 f5f3 	sdiv	r5, r5, r3
 800d9a6:	f108 0301 	add.w	r3, r8, #1
 800d9aa:	4433      	add	r3, r6
 800d9ac:	429d      	cmp	r5, r3
 800d9ae:	bf38      	it	cc
 800d9b0:	461d      	movcc	r5, r3
 800d9b2:	0553      	lsls	r3, r2, #21
 800d9b4:	d546      	bpl.n	800da44 <__ssprint_r+0xdc>
 800d9b6:	4629      	mov	r1, r5
 800d9b8:	4648      	mov	r0, r9
 800d9ba:	f7ff f805 	bl	800c9c8 <_malloc_r>
 800d9be:	b998      	cbnz	r0, 800d9e8 <__ssprint_r+0x80>
 800d9c0:	230c      	movs	r3, #12
 800d9c2:	f8c9 3000 	str.w	r3, [r9]
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9d0:	81a3      	strh	r3, [r4, #12]
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	60bb      	str	r3, [r7, #8]
 800d9d6:	607b      	str	r3, [r7, #4]
 800d9d8:	e031      	b.n	800da3e <__ssprint_r+0xd6>
 800d9da:	f8da b000 	ldr.w	fp, [sl]
 800d9de:	f8da 6004 	ldr.w	r6, [sl, #4]
 800d9e2:	f10a 0a08 	add.w	sl, sl, #8
 800d9e6:	e7cc      	b.n	800d982 <__ssprint_r+0x1a>
 800d9e8:	4642      	mov	r2, r8
 800d9ea:	6921      	ldr	r1, [r4, #16]
 800d9ec:	9001      	str	r0, [sp, #4]
 800d9ee:	f7fc f807 	bl	8009a00 <memcpy>
 800d9f2:	89a2      	ldrh	r2, [r4, #12]
 800d9f4:	9b01      	ldr	r3, [sp, #4]
 800d9f6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800d9fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d9fe:	81a2      	strh	r2, [r4, #12]
 800da00:	6123      	str	r3, [r4, #16]
 800da02:	4443      	add	r3, r8
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	4633      	mov	r3, r6
 800da08:	6165      	str	r5, [r4, #20]
 800da0a:	eba5 0508 	sub.w	r5, r5, r8
 800da0e:	60a5      	str	r5, [r4, #8]
 800da10:	429e      	cmp	r6, r3
 800da12:	d200      	bcs.n	800da16 <__ssprint_r+0xae>
 800da14:	4633      	mov	r3, r6
 800da16:	461a      	mov	r2, r3
 800da18:	4659      	mov	r1, fp
 800da1a:	6820      	ldr	r0, [r4, #0]
 800da1c:	9301      	str	r3, [sp, #4]
 800da1e:	f7ff f9ed 	bl	800cdfc <memmove>
 800da22:	68a2      	ldr	r2, [r4, #8]
 800da24:	9b01      	ldr	r3, [sp, #4]
 800da26:	1ad2      	subs	r2, r2, r3
 800da28:	60a2      	str	r2, [r4, #8]
 800da2a:	6822      	ldr	r2, [r4, #0]
 800da2c:	4413      	add	r3, r2
 800da2e:	6023      	str	r3, [r4, #0]
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	1b9e      	subs	r6, r3, r6
 800da34:	60be      	str	r6, [r7, #8]
 800da36:	2e00      	cmp	r6, #0
 800da38:	d1cf      	bne.n	800d9da <__ssprint_r+0x72>
 800da3a:	2000      	movs	r0, #0
 800da3c:	6078      	str	r0, [r7, #4]
 800da3e:	b003      	add	sp, #12
 800da40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da44:	462a      	mov	r2, r5
 800da46:	4648      	mov	r0, r9
 800da48:	f7ff fde6 	bl	800d618 <_realloc_r>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2800      	cmp	r0, #0
 800da50:	d1d6      	bne.n	800da00 <__ssprint_r+0x98>
 800da52:	6921      	ldr	r1, [r4, #16]
 800da54:	4648      	mov	r0, r9
 800da56:	f000 f885 	bl	800db64 <_free_r>
 800da5a:	e7b1      	b.n	800d9c0 <__ssprint_r+0x58>

0800da5c <_calloc_r>:
 800da5c:	b510      	push	{r4, lr}
 800da5e:	4351      	muls	r1, r2
 800da60:	f7fe ffb2 	bl	800c9c8 <_malloc_r>
 800da64:	4604      	mov	r4, r0
 800da66:	b198      	cbz	r0, 800da90 <_calloc_r+0x34>
 800da68:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800da6c:	f022 0203 	bic.w	r2, r2, #3
 800da70:	3a04      	subs	r2, #4
 800da72:	2a24      	cmp	r2, #36	; 0x24
 800da74:	d81b      	bhi.n	800daae <_calloc_r+0x52>
 800da76:	2a13      	cmp	r2, #19
 800da78:	d917      	bls.n	800daaa <_calloc_r+0x4e>
 800da7a:	2100      	movs	r1, #0
 800da7c:	2a1b      	cmp	r2, #27
 800da7e:	6001      	str	r1, [r0, #0]
 800da80:	6041      	str	r1, [r0, #4]
 800da82:	d807      	bhi.n	800da94 <_calloc_r+0x38>
 800da84:	f100 0308 	add.w	r3, r0, #8
 800da88:	2200      	movs	r2, #0
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	605a      	str	r2, [r3, #4]
 800da8e:	609a      	str	r2, [r3, #8]
 800da90:	4620      	mov	r0, r4
 800da92:	bd10      	pop	{r4, pc}
 800da94:	2a24      	cmp	r2, #36	; 0x24
 800da96:	6081      	str	r1, [r0, #8]
 800da98:	60c1      	str	r1, [r0, #12]
 800da9a:	bf11      	iteee	ne
 800da9c:	f100 0310 	addne.w	r3, r0, #16
 800daa0:	6101      	streq	r1, [r0, #16]
 800daa2:	f100 0318 	addeq.w	r3, r0, #24
 800daa6:	6141      	streq	r1, [r0, #20]
 800daa8:	e7ee      	b.n	800da88 <_calloc_r+0x2c>
 800daaa:	4603      	mov	r3, r0
 800daac:	e7ec      	b.n	800da88 <_calloc_r+0x2c>
 800daae:	2100      	movs	r1, #0
 800dab0:	f7fb ffb1 	bl	8009a16 <memset>
 800dab4:	e7ec      	b.n	800da90 <_calloc_r+0x34>
	...

0800dab8 <_malloc_trim_r>:
 800dab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dabc:	4689      	mov	r9, r1
 800dabe:	4f25      	ldr	r7, [pc, #148]	; (800db54 <_malloc_trim_r+0x9c>)
 800dac0:	4606      	mov	r6, r0
 800dac2:	f7ff f9b5 	bl	800ce30 <__malloc_lock>
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800db60 <_malloc_trim_r+0xa8>
 800dacc:	685d      	ldr	r5, [r3, #4]
 800dace:	f1a8 0411 	sub.w	r4, r8, #17
 800dad2:	f025 0503 	bic.w	r5, r5, #3
 800dad6:	eba4 0409 	sub.w	r4, r4, r9
 800dada:	442c      	add	r4, r5
 800dadc:	fbb4 f4f8 	udiv	r4, r4, r8
 800dae0:	3c01      	subs	r4, #1
 800dae2:	fb08 f404 	mul.w	r4, r8, r4
 800dae6:	4544      	cmp	r4, r8
 800dae8:	da05      	bge.n	800daf6 <_malloc_trim_r+0x3e>
 800daea:	4630      	mov	r0, r6
 800daec:	f7ff f9a6 	bl	800ce3c <__malloc_unlock>
 800daf0:	2000      	movs	r0, #0
 800daf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daf6:	2100      	movs	r1, #0
 800daf8:	4630      	mov	r0, r6
 800dafa:	f7ff ff0f 	bl	800d91c <_sbrk_r>
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	442b      	add	r3, r5
 800db02:	4298      	cmp	r0, r3
 800db04:	d1f1      	bne.n	800daea <_malloc_trim_r+0x32>
 800db06:	4261      	negs	r1, r4
 800db08:	4630      	mov	r0, r6
 800db0a:	f7ff ff07 	bl	800d91c <_sbrk_r>
 800db0e:	3001      	adds	r0, #1
 800db10:	d110      	bne.n	800db34 <_malloc_trim_r+0x7c>
 800db12:	2100      	movs	r1, #0
 800db14:	4630      	mov	r0, r6
 800db16:	f7ff ff01 	bl	800d91c <_sbrk_r>
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	1a83      	subs	r3, r0, r2
 800db1e:	2b0f      	cmp	r3, #15
 800db20:	dde3      	ble.n	800daea <_malloc_trim_r+0x32>
 800db22:	490d      	ldr	r1, [pc, #52]	; (800db58 <_malloc_trim_r+0xa0>)
 800db24:	f043 0301 	orr.w	r3, r3, #1
 800db28:	6809      	ldr	r1, [r1, #0]
 800db2a:	6053      	str	r3, [r2, #4]
 800db2c:	1a40      	subs	r0, r0, r1
 800db2e:	490b      	ldr	r1, [pc, #44]	; (800db5c <_malloc_trim_r+0xa4>)
 800db30:	6008      	str	r0, [r1, #0]
 800db32:	e7da      	b.n	800daea <_malloc_trim_r+0x32>
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	4a09      	ldr	r2, [pc, #36]	; (800db5c <_malloc_trim_r+0xa4>)
 800db38:	1b2d      	subs	r5, r5, r4
 800db3a:	f045 0501 	orr.w	r5, r5, #1
 800db3e:	605d      	str	r5, [r3, #4]
 800db40:	6813      	ldr	r3, [r2, #0]
 800db42:	4630      	mov	r0, r6
 800db44:	1b1c      	subs	r4, r3, r4
 800db46:	6014      	str	r4, [r2, #0]
 800db48:	f7ff f978 	bl	800ce3c <__malloc_unlock>
 800db4c:	2001      	movs	r0, #1
 800db4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db52:	bf00      	nop
 800db54:	2000028c 	.word	0x2000028c
 800db58:	20000694 	.word	0x20000694
 800db5c:	20000be0 	.word	0x20000be0
 800db60:	00000080 	.word	0x00000080

0800db64 <_free_r>:
 800db64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db68:	4604      	mov	r4, r0
 800db6a:	4688      	mov	r8, r1
 800db6c:	2900      	cmp	r1, #0
 800db6e:	f000 80ab 	beq.w	800dcc8 <_free_r+0x164>
 800db72:	f7ff f95d 	bl	800ce30 <__malloc_lock>
 800db76:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800db7a:	4d54      	ldr	r5, [pc, #336]	; (800dccc <_free_r+0x168>)
 800db7c:	f022 0001 	bic.w	r0, r2, #1
 800db80:	f1a8 0308 	sub.w	r3, r8, #8
 800db84:	181f      	adds	r7, r3, r0
 800db86:	68a9      	ldr	r1, [r5, #8]
 800db88:	687e      	ldr	r6, [r7, #4]
 800db8a:	428f      	cmp	r7, r1
 800db8c:	f026 0603 	bic.w	r6, r6, #3
 800db90:	f002 0201 	and.w	r2, r2, #1
 800db94:	d11b      	bne.n	800dbce <_free_r+0x6a>
 800db96:	4430      	add	r0, r6
 800db98:	b93a      	cbnz	r2, 800dbaa <_free_r+0x46>
 800db9a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800db9e:	1a9b      	subs	r3, r3, r2
 800dba0:	6899      	ldr	r1, [r3, #8]
 800dba2:	4410      	add	r0, r2
 800dba4:	68da      	ldr	r2, [r3, #12]
 800dba6:	60ca      	str	r2, [r1, #12]
 800dba8:	6091      	str	r1, [r2, #8]
 800dbaa:	f040 0201 	orr.w	r2, r0, #1
 800dbae:	605a      	str	r2, [r3, #4]
 800dbb0:	60ab      	str	r3, [r5, #8]
 800dbb2:	4b47      	ldr	r3, [pc, #284]	; (800dcd0 <_free_r+0x16c>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4298      	cmp	r0, r3
 800dbb8:	d304      	bcc.n	800dbc4 <_free_r+0x60>
 800dbba:	4b46      	ldr	r3, [pc, #280]	; (800dcd4 <_free_r+0x170>)
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	6819      	ldr	r1, [r3, #0]
 800dbc0:	f7ff ff7a 	bl	800dab8 <_malloc_trim_r>
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbca:	f7ff b937 	b.w	800ce3c <__malloc_unlock>
 800dbce:	607e      	str	r6, [r7, #4]
 800dbd0:	2a00      	cmp	r2, #0
 800dbd2:	d139      	bne.n	800dc48 <_free_r+0xe4>
 800dbd4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800dbd8:	f105 0e08 	add.w	lr, r5, #8
 800dbdc:	1a5b      	subs	r3, r3, r1
 800dbde:	4408      	add	r0, r1
 800dbe0:	6899      	ldr	r1, [r3, #8]
 800dbe2:	4571      	cmp	r1, lr
 800dbe4:	d032      	beq.n	800dc4c <_free_r+0xe8>
 800dbe6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800dbea:	f8c1 e00c 	str.w	lr, [r1, #12]
 800dbee:	f8ce 1008 	str.w	r1, [lr, #8]
 800dbf2:	19b9      	adds	r1, r7, r6
 800dbf4:	6849      	ldr	r1, [r1, #4]
 800dbf6:	07c9      	lsls	r1, r1, #31
 800dbf8:	d40a      	bmi.n	800dc10 <_free_r+0xac>
 800dbfa:	4430      	add	r0, r6
 800dbfc:	68b9      	ldr	r1, [r7, #8]
 800dbfe:	bb3a      	cbnz	r2, 800dc50 <_free_r+0xec>
 800dc00:	4e35      	ldr	r6, [pc, #212]	; (800dcd8 <_free_r+0x174>)
 800dc02:	42b1      	cmp	r1, r6
 800dc04:	d124      	bne.n	800dc50 <_free_r+0xec>
 800dc06:	2201      	movs	r2, #1
 800dc08:	616b      	str	r3, [r5, #20]
 800dc0a:	612b      	str	r3, [r5, #16]
 800dc0c:	60d9      	str	r1, [r3, #12]
 800dc0e:	6099      	str	r1, [r3, #8]
 800dc10:	f040 0101 	orr.w	r1, r0, #1
 800dc14:	6059      	str	r1, [r3, #4]
 800dc16:	5018      	str	r0, [r3, r0]
 800dc18:	2a00      	cmp	r2, #0
 800dc1a:	d1d3      	bne.n	800dbc4 <_free_r+0x60>
 800dc1c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800dc20:	d21a      	bcs.n	800dc58 <_free_r+0xf4>
 800dc22:	2201      	movs	r2, #1
 800dc24:	08c0      	lsrs	r0, r0, #3
 800dc26:	1081      	asrs	r1, r0, #2
 800dc28:	408a      	lsls	r2, r1
 800dc2a:	6869      	ldr	r1, [r5, #4]
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	606a      	str	r2, [r5, #4]
 800dc32:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800dc36:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800dc3a:	3a08      	subs	r2, #8
 800dc3c:	60da      	str	r2, [r3, #12]
 800dc3e:	6099      	str	r1, [r3, #8]
 800dc40:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800dc44:	60cb      	str	r3, [r1, #12]
 800dc46:	e7bd      	b.n	800dbc4 <_free_r+0x60>
 800dc48:	2200      	movs	r2, #0
 800dc4a:	e7d2      	b.n	800dbf2 <_free_r+0x8e>
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	e7d0      	b.n	800dbf2 <_free_r+0x8e>
 800dc50:	68fe      	ldr	r6, [r7, #12]
 800dc52:	60ce      	str	r6, [r1, #12]
 800dc54:	60b1      	str	r1, [r6, #8]
 800dc56:	e7db      	b.n	800dc10 <_free_r+0xac>
 800dc58:	0a42      	lsrs	r2, r0, #9
 800dc5a:	2a04      	cmp	r2, #4
 800dc5c:	d813      	bhi.n	800dc86 <_free_r+0x122>
 800dc5e:	0982      	lsrs	r2, r0, #6
 800dc60:	3238      	adds	r2, #56	; 0x38
 800dc62:	1c51      	adds	r1, r2, #1
 800dc64:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800dc68:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800dc6c:	428e      	cmp	r6, r1
 800dc6e:	d124      	bne.n	800dcba <_free_r+0x156>
 800dc70:	2001      	movs	r0, #1
 800dc72:	1092      	asrs	r2, r2, #2
 800dc74:	fa00 f202 	lsl.w	r2, r0, r2
 800dc78:	6868      	ldr	r0, [r5, #4]
 800dc7a:	4302      	orrs	r2, r0
 800dc7c:	606a      	str	r2, [r5, #4]
 800dc7e:	60de      	str	r6, [r3, #12]
 800dc80:	6099      	str	r1, [r3, #8]
 800dc82:	60b3      	str	r3, [r6, #8]
 800dc84:	e7de      	b.n	800dc44 <_free_r+0xe0>
 800dc86:	2a14      	cmp	r2, #20
 800dc88:	d801      	bhi.n	800dc8e <_free_r+0x12a>
 800dc8a:	325b      	adds	r2, #91	; 0x5b
 800dc8c:	e7e9      	b.n	800dc62 <_free_r+0xfe>
 800dc8e:	2a54      	cmp	r2, #84	; 0x54
 800dc90:	d802      	bhi.n	800dc98 <_free_r+0x134>
 800dc92:	0b02      	lsrs	r2, r0, #12
 800dc94:	326e      	adds	r2, #110	; 0x6e
 800dc96:	e7e4      	b.n	800dc62 <_free_r+0xfe>
 800dc98:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800dc9c:	d802      	bhi.n	800dca4 <_free_r+0x140>
 800dc9e:	0bc2      	lsrs	r2, r0, #15
 800dca0:	3277      	adds	r2, #119	; 0x77
 800dca2:	e7de      	b.n	800dc62 <_free_r+0xfe>
 800dca4:	f240 5154 	movw	r1, #1364	; 0x554
 800dca8:	428a      	cmp	r2, r1
 800dcaa:	bf9a      	itte	ls
 800dcac:	0c82      	lsrls	r2, r0, #18
 800dcae:	327c      	addls	r2, #124	; 0x7c
 800dcb0:	227e      	movhi	r2, #126	; 0x7e
 800dcb2:	e7d6      	b.n	800dc62 <_free_r+0xfe>
 800dcb4:	6889      	ldr	r1, [r1, #8]
 800dcb6:	428e      	cmp	r6, r1
 800dcb8:	d004      	beq.n	800dcc4 <_free_r+0x160>
 800dcba:	684a      	ldr	r2, [r1, #4]
 800dcbc:	f022 0203 	bic.w	r2, r2, #3
 800dcc0:	4290      	cmp	r0, r2
 800dcc2:	d3f7      	bcc.n	800dcb4 <_free_r+0x150>
 800dcc4:	68ce      	ldr	r6, [r1, #12]
 800dcc6:	e7da      	b.n	800dc7e <_free_r+0x11a>
 800dcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dccc:	2000028c 	.word	0x2000028c
 800dcd0:	20000698 	.word	0x20000698
 800dcd4:	20000c10 	.word	0x20000c10
 800dcd8:	20000294 	.word	0x20000294

0800dcdc <cosf>:
 800dcdc:	b507      	push	{r0, r1, r2, lr}
 800dcde:	4a18      	ldr	r2, [pc, #96]	; (800dd40 <cosf+0x64>)
 800dce0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800dce4:	4293      	cmp	r3, r2
 800dce6:	4601      	mov	r1, r0
 800dce8:	dc03      	bgt.n	800dcf2 <cosf+0x16>
 800dcea:	2100      	movs	r1, #0
 800dcec:	f002 f984 	bl	800fff8 <__kernel_cosf>
 800dcf0:	e004      	b.n	800dcfc <cosf+0x20>
 800dcf2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dcf6:	db04      	blt.n	800dd02 <cosf+0x26>
 800dcf8:	f7f2 ff36 	bl	8000b68 <__aeabi_fsub>
 800dcfc:	b003      	add	sp, #12
 800dcfe:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd02:	4669      	mov	r1, sp
 800dd04:	f001 ffce 	bl	800fca4 <__ieee754_rem_pio2f>
 800dd08:	f000 0203 	and.w	r2, r0, #3
 800dd0c:	2a01      	cmp	r2, #1
 800dd0e:	d005      	beq.n	800dd1c <cosf+0x40>
 800dd10:	2a02      	cmp	r2, #2
 800dd12:	d00a      	beq.n	800dd2a <cosf+0x4e>
 800dd14:	b972      	cbnz	r2, 800dd34 <cosf+0x58>
 800dd16:	9901      	ldr	r1, [sp, #4]
 800dd18:	9800      	ldr	r0, [sp, #0]
 800dd1a:	e7e7      	b.n	800dcec <cosf+0x10>
 800dd1c:	9901      	ldr	r1, [sp, #4]
 800dd1e:	9800      	ldr	r0, [sp, #0]
 800dd20:	f002 fc8c 	bl	801063c <__kernel_sinf>
 800dd24:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dd28:	e7e8      	b.n	800dcfc <cosf+0x20>
 800dd2a:	9901      	ldr	r1, [sp, #4]
 800dd2c:	9800      	ldr	r0, [sp, #0]
 800dd2e:	f002 f963 	bl	800fff8 <__kernel_cosf>
 800dd32:	e7f7      	b.n	800dd24 <cosf+0x48>
 800dd34:	2201      	movs	r2, #1
 800dd36:	9901      	ldr	r1, [sp, #4]
 800dd38:	9800      	ldr	r0, [sp, #0]
 800dd3a:	f002 fc7f 	bl	801063c <__kernel_sinf>
 800dd3e:	e7dd      	b.n	800dcfc <cosf+0x20>
 800dd40:	3f490fd8 	.word	0x3f490fd8

0800dd44 <lrintf>:
 800dd44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd46:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800dd4a:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 800dd4e:	291e      	cmp	r1, #30
 800dd50:	dc2b      	bgt.n	800ddaa <lrintf+0x66>
 800dd52:	1c4c      	adds	r4, r1, #1
 800dd54:	da02      	bge.n	800dd5c <lrintf+0x18>
 800dd56:	2000      	movs	r0, #0
 800dd58:	b003      	add	sp, #12
 800dd5a:	bd30      	pop	{r4, r5, pc}
 800dd5c:	2916      	cmp	r1, #22
 800dd5e:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 800dd62:	dd09      	ble.n	800dd78 <lrintf+0x34>
 800dd64:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800dd68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800dd6c:	3a96      	subs	r2, #150	; 0x96
 800dd6e:	4090      	lsls	r0, r2
 800dd70:	2c00      	cmp	r4, #0
 800dd72:	d0f1      	beq.n	800dd58 <lrintf+0x14>
 800dd74:	4240      	negs	r0, r0
 800dd76:	e7ef      	b.n	800dd58 <lrintf+0x14>
 800dd78:	4b0d      	ldr	r3, [pc, #52]	; (800ddb0 <lrintf+0x6c>)
 800dd7a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800dd7e:	4629      	mov	r1, r5
 800dd80:	f7f2 fef4 	bl	8000b6c <__addsf3>
 800dd84:	9001      	str	r0, [sp, #4]
 800dd86:	9801      	ldr	r0, [sp, #4]
 800dd88:	4629      	mov	r1, r5
 800dd8a:	f7f2 feed 	bl	8000b68 <__aeabi_fsub>
 800dd8e:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800dd92:	d0e0      	beq.n	800dd56 <lrintf+0x12>
 800dd94:	f3c0 0316 	ubfx	r3, r0, #0, #23
 800dd98:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 800dd9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dda0:	f1c0 0096 	rsb	r0, r0, #150	; 0x96
 800dda4:	fa23 f000 	lsr.w	r0, r3, r0
 800dda8:	e7e2      	b.n	800dd70 <lrintf+0x2c>
 800ddaa:	f7f3 f9c3 	bl	8001134 <__aeabi_f2iz>
 800ddae:	e7d3      	b.n	800dd58 <lrintf+0x14>
 800ddb0:	0801182c 	.word	0x0801182c

0800ddb4 <sinf>:
 800ddb4:	b507      	push	{r0, r1, r2, lr}
 800ddb6:	4a19      	ldr	r2, [pc, #100]	; (800de1c <sinf+0x68>)
 800ddb8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	4601      	mov	r1, r0
 800ddc0:	dc04      	bgt.n	800ddcc <sinf+0x18>
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	2100      	movs	r1, #0
 800ddc6:	f002 fc39 	bl	801063c <__kernel_sinf>
 800ddca:	e004      	b.n	800ddd6 <sinf+0x22>
 800ddcc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ddd0:	db04      	blt.n	800dddc <sinf+0x28>
 800ddd2:	f7f2 fec9 	bl	8000b68 <__aeabi_fsub>
 800ddd6:	b003      	add	sp, #12
 800ddd8:	f85d fb04 	ldr.w	pc, [sp], #4
 800dddc:	4669      	mov	r1, sp
 800ddde:	f001 ff61 	bl	800fca4 <__ieee754_rem_pio2f>
 800dde2:	f000 0003 	and.w	r0, r0, #3
 800dde6:	2801      	cmp	r0, #1
 800dde8:	d006      	beq.n	800ddf8 <sinf+0x44>
 800ddea:	2802      	cmp	r0, #2
 800ddec:	d009      	beq.n	800de02 <sinf+0x4e>
 800ddee:	b980      	cbnz	r0, 800de12 <sinf+0x5e>
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	9901      	ldr	r1, [sp, #4]
 800ddf4:	9800      	ldr	r0, [sp, #0]
 800ddf6:	e7e6      	b.n	800ddc6 <sinf+0x12>
 800ddf8:	9901      	ldr	r1, [sp, #4]
 800ddfa:	9800      	ldr	r0, [sp, #0]
 800ddfc:	f002 f8fc 	bl	800fff8 <__kernel_cosf>
 800de00:	e7e9      	b.n	800ddd6 <sinf+0x22>
 800de02:	2201      	movs	r2, #1
 800de04:	9901      	ldr	r1, [sp, #4]
 800de06:	9800      	ldr	r0, [sp, #0]
 800de08:	f002 fc18 	bl	801063c <__kernel_sinf>
 800de0c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800de10:	e7e1      	b.n	800ddd6 <sinf+0x22>
 800de12:	9901      	ldr	r1, [sp, #4]
 800de14:	9800      	ldr	r0, [sp, #0]
 800de16:	f002 f8ef 	bl	800fff8 <__kernel_cosf>
 800de1a:	e7f7      	b.n	800de0c <sinf+0x58>
 800de1c:	3f490fd8 	.word	0x3f490fd8

0800de20 <fmod>:
 800de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	b08b      	sub	sp, #44	; 0x2c
 800de26:	461f      	mov	r7, r3
 800de28:	4604      	mov	r4, r0
 800de2a:	460d      	mov	r5, r1
 800de2c:	4616      	mov	r6, r2
 800de2e:	f000 fb73 	bl	800e518 <__ieee754_fmod>
 800de32:	4b27      	ldr	r3, [pc, #156]	; (800ded0 <fmod+0xb0>)
 800de34:	4680      	mov	r8, r0
 800de36:	f993 a000 	ldrsb.w	sl, [r3]
 800de3a:	4689      	mov	r9, r1
 800de3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800de40:	d030      	beq.n	800dea4 <fmod+0x84>
 800de42:	4632      	mov	r2, r6
 800de44:	463b      	mov	r3, r7
 800de46:	4630      	mov	r0, r6
 800de48:	4639      	mov	r1, r7
 800de4a:	f7f2 fddb 	bl	8000a04 <__aeabi_dcmpun>
 800de4e:	bb48      	cbnz	r0, 800dea4 <fmod+0x84>
 800de50:	4622      	mov	r2, r4
 800de52:	462b      	mov	r3, r5
 800de54:	4620      	mov	r0, r4
 800de56:	4629      	mov	r1, r5
 800de58:	f7f2 fdd4 	bl	8000a04 <__aeabi_dcmpun>
 800de5c:	4683      	mov	fp, r0
 800de5e:	bb08      	cbnz	r0, 800dea4 <fmod+0x84>
 800de60:	2200      	movs	r2, #0
 800de62:	2300      	movs	r3, #0
 800de64:	4630      	mov	r0, r6
 800de66:	4639      	mov	r1, r7
 800de68:	f7f2 fd9a 	bl	80009a0 <__aeabi_dcmpeq>
 800de6c:	b1d0      	cbz	r0, 800dea4 <fmod+0x84>
 800de6e:	2301      	movs	r3, #1
 800de70:	9300      	str	r3, [sp, #0]
 800de72:	4b18      	ldr	r3, [pc, #96]	; (800ded4 <fmod+0xb4>)
 800de74:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800de7e:	f8cd b020 	str.w	fp, [sp, #32]
 800de82:	f1ba 0f00 	cmp.w	sl, #0
 800de86:	d112      	bne.n	800deae <fmod+0x8e>
 800de88:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800de8c:	4668      	mov	r0, sp
 800de8e:	f002 fc54 	bl	801073a <matherr>
 800de92:	b1b8      	cbz	r0, 800dec4 <fmod+0xa4>
 800de94:	9b08      	ldr	r3, [sp, #32]
 800de96:	b11b      	cbz	r3, 800dea0 <fmod+0x80>
 800de98:	f002 ff06 	bl	8010ca8 <__errno>
 800de9c:	9b08      	ldr	r3, [sp, #32]
 800de9e:	6003      	str	r3, [r0, #0]
 800dea0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800dea4:	4640      	mov	r0, r8
 800dea6:	4649      	mov	r1, r9
 800dea8:	b00b      	add	sp, #44	; 0x2c
 800deaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deae:	2200      	movs	r2, #0
 800deb0:	2300      	movs	r3, #0
 800deb2:	4610      	mov	r0, r2
 800deb4:	4619      	mov	r1, r3
 800deb6:	f7f2 fc35 	bl	8000724 <__aeabi_ddiv>
 800deba:	f1ba 0f02 	cmp.w	sl, #2
 800debe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dec2:	d1e3      	bne.n	800de8c <fmod+0x6c>
 800dec4:	f002 fef0 	bl	8010ca8 <__errno>
 800dec8:	2321      	movs	r3, #33	; 0x21
 800deca:	6003      	str	r3, [r0, #0]
 800decc:	e7e2      	b.n	800de94 <fmod+0x74>
 800dece:	bf00      	nop
 800ded0:	2000069c 	.word	0x2000069c
 800ded4:	08011834 	.word	0x08011834

0800ded8 <pow>:
 800ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dedc:	b08f      	sub	sp, #60	; 0x3c
 800dede:	461d      	mov	r5, r3
 800dee0:	4680      	mov	r8, r0
 800dee2:	4689      	mov	r9, r1
 800dee4:	4614      	mov	r4, r2
 800dee6:	f000 fc1f 	bl	800e728 <__ieee754_pow>
 800deea:	4fa5      	ldr	r7, [pc, #660]	; (800e180 <pow+0x2a8>)
 800deec:	e9cd 0100 	strd	r0, r1, [sp]
 800def0:	f997 3000 	ldrsb.w	r3, [r7]
 800def4:	463e      	mov	r6, r7
 800def6:	9302      	str	r3, [sp, #8]
 800def8:	3301      	adds	r3, #1
 800defa:	d05f      	beq.n	800dfbc <pow+0xe4>
 800defc:	4622      	mov	r2, r4
 800defe:	462b      	mov	r3, r5
 800df00:	4620      	mov	r0, r4
 800df02:	4629      	mov	r1, r5
 800df04:	f7f2 fd7e 	bl	8000a04 <__aeabi_dcmpun>
 800df08:	4682      	mov	sl, r0
 800df0a:	2800      	cmp	r0, #0
 800df0c:	d156      	bne.n	800dfbc <pow+0xe4>
 800df0e:	4642      	mov	r2, r8
 800df10:	464b      	mov	r3, r9
 800df12:	4640      	mov	r0, r8
 800df14:	4649      	mov	r1, r9
 800df16:	f7f2 fd75 	bl	8000a04 <__aeabi_dcmpun>
 800df1a:	9003      	str	r0, [sp, #12]
 800df1c:	b1e8      	cbz	r0, 800df5a <pow+0x82>
 800df1e:	2200      	movs	r2, #0
 800df20:	2300      	movs	r3, #0
 800df22:	4620      	mov	r0, r4
 800df24:	4629      	mov	r1, r5
 800df26:	f7f2 fd3b 	bl	80009a0 <__aeabi_dcmpeq>
 800df2a:	2800      	cmp	r0, #0
 800df2c:	d046      	beq.n	800dfbc <pow+0xe4>
 800df2e:	2301      	movs	r3, #1
 800df30:	2200      	movs	r2, #0
 800df32:	9304      	str	r3, [sp, #16]
 800df34:	4b93      	ldr	r3, [pc, #588]	; (800e184 <pow+0x2ac>)
 800df36:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800df3a:	9305      	str	r3, [sp, #20]
 800df3c:	4b92      	ldr	r3, [pc, #584]	; (800e188 <pow+0x2b0>)
 800df3e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800df42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800df46:	9b02      	ldr	r3, [sp, #8]
 800df48:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d031      	beq.n	800dfb4 <pow+0xdc>
 800df50:	a804      	add	r0, sp, #16
 800df52:	f002 fbf2 	bl	801073a <matherr>
 800df56:	bb38      	cbnz	r0, 800dfa8 <pow+0xd0>
 800df58:	e058      	b.n	800e00c <pow+0x134>
 800df5a:	f04f 0a00 	mov.w	sl, #0
 800df5e:	f04f 0b00 	mov.w	fp, #0
 800df62:	4652      	mov	r2, sl
 800df64:	465b      	mov	r3, fp
 800df66:	4640      	mov	r0, r8
 800df68:	4649      	mov	r1, r9
 800df6a:	f7f2 fd19 	bl	80009a0 <__aeabi_dcmpeq>
 800df6e:	2800      	cmp	r0, #0
 800df70:	d051      	beq.n	800e016 <pow+0x13e>
 800df72:	4652      	mov	r2, sl
 800df74:	465b      	mov	r3, fp
 800df76:	4620      	mov	r0, r4
 800df78:	4629      	mov	r1, r5
 800df7a:	f7f2 fd11 	bl	80009a0 <__aeabi_dcmpeq>
 800df7e:	4606      	mov	r6, r0
 800df80:	b308      	cbz	r0, 800dfc6 <pow+0xee>
 800df82:	2301      	movs	r3, #1
 800df84:	9304      	str	r3, [sp, #16]
 800df86:	4b7f      	ldr	r3, [pc, #508]	; (800e184 <pow+0x2ac>)
 800df88:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800df8c:	9305      	str	r3, [sp, #20]
 800df8e:	9b03      	ldr	r3, [sp, #12]
 800df90:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800df94:	930c      	str	r3, [sp, #48]	; 0x30
 800df96:	9b02      	ldr	r3, [sp, #8]
 800df98:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d0d7      	beq.n	800df50 <pow+0x78>
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	4b79      	ldr	r3, [pc, #484]	; (800e188 <pow+0x2b0>)
 800dfa4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dfa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfaa:	b11b      	cbz	r3, 800dfb4 <pow+0xdc>
 800dfac:	f002 fe7c 	bl	8010ca8 <__errno>
 800dfb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfb2:	6003      	str	r3, [r0, #0]
 800dfb4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800dfb8:	e88d 0018 	stmia.w	sp, {r3, r4}
 800dfbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfc0:	b00f      	add	sp, #60	; 0x3c
 800dfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	4629      	mov	r1, r5
 800dfca:	f002 fbb0 	bl	801072e <finite>
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d0f4      	beq.n	800dfbc <pow+0xe4>
 800dfd2:	4652      	mov	r2, sl
 800dfd4:	465b      	mov	r3, fp
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	4629      	mov	r1, r5
 800dfda:	f7f2 fceb 	bl	80009b4 <__aeabi_dcmplt>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d0ec      	beq.n	800dfbc <pow+0xe4>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	9304      	str	r3, [sp, #16]
 800dfe6:	4b67      	ldr	r3, [pc, #412]	; (800e184 <pow+0x2ac>)
 800dfe8:	960c      	str	r6, [sp, #48]	; 0x30
 800dfea:	9305      	str	r3, [sp, #20]
 800dfec:	f997 3000 	ldrsb.w	r3, [r7]
 800dff0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800dff4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800dff8:	b913      	cbnz	r3, 800e000 <pow+0x128>
 800dffa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800dffe:	e7a7      	b.n	800df50 <pow+0x78>
 800e000:	2000      	movs	r0, #0
 800e002:	4962      	ldr	r1, [pc, #392]	; (800e18c <pow+0x2b4>)
 800e004:	2b02      	cmp	r3, #2
 800e006:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e00a:	d1a1      	bne.n	800df50 <pow+0x78>
 800e00c:	f002 fe4c 	bl	8010ca8 <__errno>
 800e010:	2321      	movs	r3, #33	; 0x21
 800e012:	6003      	str	r3, [r0, #0]
 800e014:	e7c8      	b.n	800dfa8 <pow+0xd0>
 800e016:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e01a:	f002 fb88 	bl	801072e <finite>
 800e01e:	9002      	str	r0, [sp, #8]
 800e020:	2800      	cmp	r0, #0
 800e022:	d17f      	bne.n	800e124 <pow+0x24c>
 800e024:	4640      	mov	r0, r8
 800e026:	4649      	mov	r1, r9
 800e028:	f002 fb81 	bl	801072e <finite>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d079      	beq.n	800e124 <pow+0x24c>
 800e030:	4620      	mov	r0, r4
 800e032:	4629      	mov	r1, r5
 800e034:	f002 fb7b 	bl	801072e <finite>
 800e038:	2800      	cmp	r0, #0
 800e03a:	d073      	beq.n	800e124 <pow+0x24c>
 800e03c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e040:	4619      	mov	r1, r3
 800e042:	4610      	mov	r0, r2
 800e044:	f7f2 fcde 	bl	8000a04 <__aeabi_dcmpun>
 800e048:	f997 7000 	ldrsb.w	r7, [r7]
 800e04c:	4b4d      	ldr	r3, [pc, #308]	; (800e184 <pow+0x2ac>)
 800e04e:	b1a0      	cbz	r0, 800e07a <pow+0x1a2>
 800e050:	2201      	movs	r2, #1
 800e052:	9305      	str	r3, [sp, #20]
 800e054:	9b02      	ldr	r3, [sp, #8]
 800e056:	9204      	str	r2, [sp, #16]
 800e058:	930c      	str	r3, [sp, #48]	; 0x30
 800e05a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e05e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800e062:	2f00      	cmp	r7, #0
 800e064:	d0c9      	beq.n	800dffa <pow+0x122>
 800e066:	4652      	mov	r2, sl
 800e068:	465b      	mov	r3, fp
 800e06a:	4650      	mov	r0, sl
 800e06c:	4659      	mov	r1, fp
 800e06e:	f7f2 fb59 	bl	8000724 <__aeabi_ddiv>
 800e072:	2f02      	cmp	r7, #2
 800e074:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e078:	e7c7      	b.n	800e00a <pow+0x132>
 800e07a:	2203      	movs	r2, #3
 800e07c:	9305      	str	r3, [sp, #20]
 800e07e:	9204      	str	r2, [sp, #16]
 800e080:	900c      	str	r0, [sp, #48]	; 0x30
 800e082:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e086:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800e08a:	bb57      	cbnz	r7, 800e0e2 <pow+0x20a>
 800e08c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e090:	4b3f      	ldr	r3, [pc, #252]	; (800e190 <pow+0x2b8>)
 800e092:	4640      	mov	r0, r8
 800e094:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e098:	4649      	mov	r1, r9
 800e09a:	4652      	mov	r2, sl
 800e09c:	465b      	mov	r3, fp
 800e09e:	f7f2 fc89 	bl	80009b4 <__aeabi_dcmplt>
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	d064      	beq.n	800e170 <pow+0x298>
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	4b3a      	ldr	r3, [pc, #232]	; (800e194 <pow+0x2bc>)
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	f7f2 fa0f 	bl	80004d0 <__aeabi_dmul>
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	460d      	mov	r5, r1
 800e0b6:	f002 fb49 	bl	801074c <rint>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	460b      	mov	r3, r1
 800e0be:	4620      	mov	r0, r4
 800e0c0:	4629      	mov	r1, r5
 800e0c2:	f7f2 fc6d 	bl	80009a0 <__aeabi_dcmpeq>
 800e0c6:	b920      	cbnz	r0, 800e0d2 <pow+0x1fa>
 800e0c8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e0cc:	4b32      	ldr	r3, [pc, #200]	; (800e198 <pow+0x2c0>)
 800e0ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e0d2:	f996 3000 	ldrsb.w	r3, [r6]
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d14a      	bne.n	800e170 <pow+0x298>
 800e0da:	f002 fde5 	bl	8010ca8 <__errno>
 800e0de:	2322      	movs	r3, #34	; 0x22
 800e0e0:	e797      	b.n	800e012 <pow+0x13a>
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	4b2d      	ldr	r3, [pc, #180]	; (800e19c <pow+0x2c4>)
 800e0e6:	4640      	mov	r0, r8
 800e0e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e0ec:	4649      	mov	r1, r9
 800e0ee:	4652      	mov	r2, sl
 800e0f0:	465b      	mov	r3, fp
 800e0f2:	f7f2 fc5f 	bl	80009b4 <__aeabi_dcmplt>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d0eb      	beq.n	800e0d2 <pow+0x1fa>
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	4b25      	ldr	r3, [pc, #148]	; (800e194 <pow+0x2bc>)
 800e0fe:	4620      	mov	r0, r4
 800e100:	4629      	mov	r1, r5
 800e102:	f7f2 f9e5 	bl	80004d0 <__aeabi_dmul>
 800e106:	4604      	mov	r4, r0
 800e108:	460d      	mov	r5, r1
 800e10a:	f002 fb1f 	bl	801074c <rint>
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	4620      	mov	r0, r4
 800e114:	4629      	mov	r1, r5
 800e116:	f7f2 fc43 	bl	80009a0 <__aeabi_dcmpeq>
 800e11a:	2800      	cmp	r0, #0
 800e11c:	d1d9      	bne.n	800e0d2 <pow+0x1fa>
 800e11e:	2200      	movs	r2, #0
 800e120:	4b1a      	ldr	r3, [pc, #104]	; (800e18c <pow+0x2b4>)
 800e122:	e7d4      	b.n	800e0ce <pow+0x1f6>
 800e124:	2200      	movs	r2, #0
 800e126:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e12a:	2300      	movs	r3, #0
 800e12c:	f7f2 fc38 	bl	80009a0 <__aeabi_dcmpeq>
 800e130:	2800      	cmp	r0, #0
 800e132:	f43f af43 	beq.w	800dfbc <pow+0xe4>
 800e136:	4640      	mov	r0, r8
 800e138:	4649      	mov	r1, r9
 800e13a:	f002 faf8 	bl	801072e <finite>
 800e13e:	2800      	cmp	r0, #0
 800e140:	f43f af3c 	beq.w	800dfbc <pow+0xe4>
 800e144:	4620      	mov	r0, r4
 800e146:	4629      	mov	r1, r5
 800e148:	f002 faf1 	bl	801072e <finite>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	f43f af35 	beq.w	800dfbc <pow+0xe4>
 800e152:	2304      	movs	r3, #4
 800e154:	9304      	str	r3, [sp, #16]
 800e156:	4b0b      	ldr	r3, [pc, #44]	; (800e184 <pow+0x2ac>)
 800e158:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800e15c:	9305      	str	r3, [sp, #20]
 800e15e:	2300      	movs	r3, #0
 800e160:	2400      	movs	r4, #0
 800e162:	930c      	str	r3, [sp, #48]	; 0x30
 800e164:	2300      	movs	r3, #0
 800e166:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e16a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800e16e:	e7b0      	b.n	800e0d2 <pow+0x1fa>
 800e170:	a804      	add	r0, sp, #16
 800e172:	f002 fae2 	bl	801073a <matherr>
 800e176:	2800      	cmp	r0, #0
 800e178:	f47f af16 	bne.w	800dfa8 <pow+0xd0>
 800e17c:	e7ad      	b.n	800e0da <pow+0x202>
 800e17e:	bf00      	nop
 800e180:	2000069c 	.word	0x2000069c
 800e184:	08011839 	.word	0x08011839
 800e188:	3ff00000 	.word	0x3ff00000
 800e18c:	fff00000 	.word	0xfff00000
 800e190:	47efffff 	.word	0x47efffff
 800e194:	3fe00000 	.word	0x3fe00000
 800e198:	c7efffff 	.word	0xc7efffff
 800e19c:	7ff00000 	.word	0x7ff00000

0800e1a0 <asinf>:
 800e1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1a2:	b08b      	sub	sp, #44	; 0x2c
 800e1a4:	4604      	mov	r4, r0
 800e1a6:	f001 f85d 	bl	800f264 <__ieee754_asinf>
 800e1aa:	4e21      	ldr	r6, [pc, #132]	; (800e230 <asinf+0x90>)
 800e1ac:	4605      	mov	r5, r0
 800e1ae:	f996 3000 	ldrsb.w	r3, [r6]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	d038      	beq.n	800e228 <asinf+0x88>
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f7f2 ffa5 	bl	8001108 <__aeabi_fcmpun>
 800e1be:	4607      	mov	r7, r0
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d131      	bne.n	800e228 <asinf+0x88>
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f002 fcc9 	bl	8010b5c <fabsf>
 800e1ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e1ce:	f7f2 ff91 	bl	80010f4 <__aeabi_fcmpgt>
 800e1d2:	b348      	cbz	r0, 800e228 <asinf+0x88>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	4b16      	ldr	r3, [pc, #88]	; (800e234 <asinf+0x94>)
 800e1da:	4620      	mov	r0, r4
 800e1dc:	9301      	str	r3, [sp, #4]
 800e1de:	9708      	str	r7, [sp, #32]
 800e1e0:	f7f2 f922 	bl	8000428 <__aeabi_f2d>
 800e1e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1ec:	4812      	ldr	r0, [pc, #72]	; (800e238 <asinf+0x98>)
 800e1ee:	f002 faa7 	bl	8010740 <nan>
 800e1f2:	f996 3000 	ldrsb.w	r3, [r6]
 800e1f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e1fa:	2b02      	cmp	r3, #2
 800e1fc:	d104      	bne.n	800e208 <asinf+0x68>
 800e1fe:	f002 fd53 	bl	8010ca8 <__errno>
 800e202:	2321      	movs	r3, #33	; 0x21
 800e204:	6003      	str	r3, [r0, #0]
 800e206:	e004      	b.n	800e212 <asinf+0x72>
 800e208:	4668      	mov	r0, sp
 800e20a:	f002 fa96 	bl	801073a <matherr>
 800e20e:	2800      	cmp	r0, #0
 800e210:	d0f5      	beq.n	800e1fe <asinf+0x5e>
 800e212:	9b08      	ldr	r3, [sp, #32]
 800e214:	b11b      	cbz	r3, 800e21e <asinf+0x7e>
 800e216:	f002 fd47 	bl	8010ca8 <__errno>
 800e21a:	9b08      	ldr	r3, [sp, #32]
 800e21c:	6003      	str	r3, [r0, #0]
 800e21e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e222:	f7f2 fc4d 	bl	8000ac0 <__aeabi_d2f>
 800e226:	4605      	mov	r5, r0
 800e228:	4628      	mov	r0, r5
 800e22a:	b00b      	add	sp, #44	; 0x2c
 800e22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e22e:	bf00      	nop
 800e230:	2000069c 	.word	0x2000069c
 800e234:	0801183d 	.word	0x0801183d
 800e238:	080111f7 	.word	0x080111f7

0800e23c <atan2f>:
 800e23c:	f001 b956 	b.w	800f4ec <__ieee754_atan2f>

0800e240 <powf>:
 800e240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e244:	b08b      	sub	sp, #44	; 0x2c
 800e246:	4605      	mov	r5, r0
 800e248:	460c      	mov	r4, r1
 800e24a:	f001 f9df 	bl	800f60c <__ieee754_powf>
 800e24e:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 800e514 <powf+0x2d4>
 800e252:	4606      	mov	r6, r0
 800e254:	f998 9000 	ldrsb.w	r9, [r8]
 800e258:	4647      	mov	r7, r8
 800e25a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800e25e:	d060      	beq.n	800e322 <powf+0xe2>
 800e260:	4621      	mov	r1, r4
 800e262:	4620      	mov	r0, r4
 800e264:	f7f2 ff50 	bl	8001108 <__aeabi_fcmpun>
 800e268:	4683      	mov	fp, r0
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d159      	bne.n	800e322 <powf+0xe2>
 800e26e:	4629      	mov	r1, r5
 800e270:	4628      	mov	r0, r5
 800e272:	f7f2 ff49 	bl	8001108 <__aeabi_fcmpun>
 800e276:	2100      	movs	r1, #0
 800e278:	4682      	mov	sl, r0
 800e27a:	b300      	cbz	r0, 800e2be <powf+0x7e>
 800e27c:	4620      	mov	r0, r4
 800e27e:	f7f2 ff11 	bl	80010a4 <__aeabi_fcmpeq>
 800e282:	2800      	cmp	r0, #0
 800e284:	d04d      	beq.n	800e322 <powf+0xe2>
 800e286:	2301      	movs	r3, #1
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	4b9c      	ldr	r3, [pc, #624]	; (800e4fc <powf+0x2bc>)
 800e28c:	4628      	mov	r0, r5
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	f8cd b020 	str.w	fp, [sp, #32]
 800e294:	f7f2 f8c8 	bl	8000428 <__aeabi_f2d>
 800e298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e29c:	4620      	mov	r0, r4
 800e29e:	f7f2 f8c3 	bl	8000428 <__aeabi_f2d>
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	4b96      	ldr	r3, [pc, #600]	; (800e500 <powf+0x2c0>)
 800e2a6:	f1b9 0f02 	cmp.w	r9, #2
 800e2aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e2b2:	d031      	beq.n	800e318 <powf+0xd8>
 800e2b4:	4668      	mov	r0, sp
 800e2b6:	f002 fa40 	bl	801073a <matherr>
 800e2ba:	bb38      	cbnz	r0, 800e30c <powf+0xcc>
 800e2bc:	e05d      	b.n	800e37a <powf+0x13a>
 800e2be:	4628      	mov	r0, r5
 800e2c0:	f7f2 fef0 	bl	80010a4 <__aeabi_fcmpeq>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	d05d      	beq.n	800e384 <powf+0x144>
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f7f2 feea 	bl	80010a4 <__aeabi_fcmpeq>
 800e2d0:	4607      	mov	r7, r0
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d029      	beq.n	800e32a <powf+0xea>
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	4b88      	ldr	r3, [pc, #544]	; (800e4fc <powf+0x2bc>)
 800e2dc:	4628      	mov	r0, r5
 800e2de:	9301      	str	r3, [sp, #4]
 800e2e0:	f8cd a020 	str.w	sl, [sp, #32]
 800e2e4:	f7f2 f8a0 	bl	8000428 <__aeabi_f2d>
 800e2e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f7f2 f89b 	bl	8000428 <__aeabi_f2d>
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e2fe:	f1b9 0f00 	cmp.w	r9, #0
 800e302:	d0d7      	beq.n	800e2b4 <powf+0x74>
 800e304:	2200      	movs	r2, #0
 800e306:	4b7e      	ldr	r3, [pc, #504]	; (800e500 <powf+0x2c0>)
 800e308:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e30c:	9b08      	ldr	r3, [sp, #32]
 800e30e:	b11b      	cbz	r3, 800e318 <powf+0xd8>
 800e310:	f002 fcca 	bl	8010ca8 <__errno>
 800e314:	9b08      	ldr	r3, [sp, #32]
 800e316:	6003      	str	r3, [r0, #0]
 800e318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e31c:	f7f2 fbd0 	bl	8000ac0 <__aeabi_d2f>
 800e320:	4606      	mov	r6, r0
 800e322:	4630      	mov	r0, r6
 800e324:	b00b      	add	sp, #44	; 0x2c
 800e326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e32a:	4620      	mov	r0, r4
 800e32c:	f002 fc19 	bl	8010b62 <finitef>
 800e330:	2800      	cmp	r0, #0
 800e332:	d0f6      	beq.n	800e322 <powf+0xe2>
 800e334:	2100      	movs	r1, #0
 800e336:	4620      	mov	r0, r4
 800e338:	f7f2 febe 	bl	80010b8 <__aeabi_fcmplt>
 800e33c:	2800      	cmp	r0, #0
 800e33e:	d0f0      	beq.n	800e322 <powf+0xe2>
 800e340:	2301      	movs	r3, #1
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	4b6d      	ldr	r3, [pc, #436]	; (800e4fc <powf+0x2bc>)
 800e346:	4628      	mov	r0, r5
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	9708      	str	r7, [sp, #32]
 800e34c:	f7f2 f86c 	bl	8000428 <__aeabi_f2d>
 800e350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e354:	4620      	mov	r0, r4
 800e356:	f7f2 f867 	bl	8000428 <__aeabi_f2d>
 800e35a:	f998 3000 	ldrsb.w	r3, [r8]
 800e35e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e362:	b923      	cbnz	r3, 800e36e <powf+0x12e>
 800e364:	2200      	movs	r2, #0
 800e366:	2300      	movs	r3, #0
 800e368:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e36c:	e7a2      	b.n	800e2b4 <powf+0x74>
 800e36e:	2000      	movs	r0, #0
 800e370:	4964      	ldr	r1, [pc, #400]	; (800e504 <powf+0x2c4>)
 800e372:	2b02      	cmp	r3, #2
 800e374:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e378:	d19c      	bne.n	800e2b4 <powf+0x74>
 800e37a:	f002 fc95 	bl	8010ca8 <__errno>
 800e37e:	2321      	movs	r3, #33	; 0x21
 800e380:	6003      	str	r3, [r0, #0]
 800e382:	e7c3      	b.n	800e30c <powf+0xcc>
 800e384:	4630      	mov	r0, r6
 800e386:	f002 fbec 	bl	8010b62 <finitef>
 800e38a:	4680      	mov	r8, r0
 800e38c:	2800      	cmp	r0, #0
 800e38e:	f040 8087 	bne.w	800e4a0 <powf+0x260>
 800e392:	4628      	mov	r0, r5
 800e394:	f002 fbe5 	bl	8010b62 <finitef>
 800e398:	2800      	cmp	r0, #0
 800e39a:	f000 8081 	beq.w	800e4a0 <powf+0x260>
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f002 fbdf 	bl	8010b62 <finitef>
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	d07b      	beq.n	800e4a0 <powf+0x260>
 800e3a8:	4631      	mov	r1, r6
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	f7f2 feac 	bl	8001108 <__aeabi_fcmpun>
 800e3b0:	f997 6000 	ldrsb.w	r6, [r7]
 800e3b4:	4b51      	ldr	r3, [pc, #324]	; (800e4fc <powf+0x2bc>)
 800e3b6:	b1d0      	cbz	r0, 800e3ee <powf+0x1ae>
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	e88d 000c 	stmia.w	sp, {r2, r3}
 800e3c0:	f8cd 8020 	str.w	r8, [sp, #32]
 800e3c4:	f7f2 f830 	bl	8000428 <__aeabi_f2d>
 800e3c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f7f2 f82b 	bl	8000428 <__aeabi_f2d>
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3d8:	2300      	movs	r3, #0
 800e3da:	2e00      	cmp	r6, #0
 800e3dc:	d0c4      	beq.n	800e368 <powf+0x128>
 800e3de:	4610      	mov	r0, r2
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	f7f2 f99f 	bl	8000724 <__aeabi_ddiv>
 800e3e6:	2e02      	cmp	r6, #2
 800e3e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e3ec:	e7c4      	b.n	800e378 <powf+0x138>
 800e3ee:	2203      	movs	r2, #3
 800e3f0:	9008      	str	r0, [sp, #32]
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	e88d 000c 	stmia.w	sp, {r2, r3}
 800e3f8:	f7f2 f816 	bl	8000428 <__aeabi_f2d>
 800e3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e400:	4620      	mov	r0, r4
 800e402:	f7f2 f811 	bl	8000428 <__aeabi_f2d>
 800e406:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e40a:	bb4e      	cbnz	r6, 800e460 <powf+0x220>
 800e40c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e410:	4b3d      	ldr	r3, [pc, #244]	; (800e508 <powf+0x2c8>)
 800e412:	2100      	movs	r1, #0
 800e414:	4628      	mov	r0, r5
 800e416:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e41a:	f7f2 fe4d 	bl	80010b8 <__aeabi_fcmplt>
 800e41e:	2800      	cmp	r0, #0
 800e420:	d064      	beq.n	800e4ec <powf+0x2ac>
 800e422:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e426:	4620      	mov	r0, r4
 800e428:	f7f2 fca8 	bl	8000d7c <__aeabi_fmul>
 800e42c:	f7f1 fffc 	bl	8000428 <__aeabi_f2d>
 800e430:	4604      	mov	r4, r0
 800e432:	460d      	mov	r5, r1
 800e434:	f002 f98a 	bl	801074c <rint>
 800e438:	4602      	mov	r2, r0
 800e43a:	460b      	mov	r3, r1
 800e43c:	4620      	mov	r0, r4
 800e43e:	4629      	mov	r1, r5
 800e440:	f7f2 faae 	bl	80009a0 <__aeabi_dcmpeq>
 800e444:	b920      	cbnz	r0, 800e450 <powf+0x210>
 800e446:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e44a:	4b30      	ldr	r3, [pc, #192]	; (800e50c <powf+0x2cc>)
 800e44c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e450:	f997 3000 	ldrsb.w	r3, [r7]
 800e454:	2b02      	cmp	r3, #2
 800e456:	d149      	bne.n	800e4ec <powf+0x2ac>
 800e458:	f002 fc26 	bl	8010ca8 <__errno>
 800e45c:	2322      	movs	r3, #34	; 0x22
 800e45e:	e78f      	b.n	800e380 <powf+0x140>
 800e460:	2200      	movs	r2, #0
 800e462:	4b2b      	ldr	r3, [pc, #172]	; (800e510 <powf+0x2d0>)
 800e464:	2100      	movs	r1, #0
 800e466:	4628      	mov	r0, r5
 800e468:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e46c:	f7f2 fe24 	bl	80010b8 <__aeabi_fcmplt>
 800e470:	2800      	cmp	r0, #0
 800e472:	d0ed      	beq.n	800e450 <powf+0x210>
 800e474:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e478:	4620      	mov	r0, r4
 800e47a:	f7f2 fc7f 	bl	8000d7c <__aeabi_fmul>
 800e47e:	f7f1 ffd3 	bl	8000428 <__aeabi_f2d>
 800e482:	4604      	mov	r4, r0
 800e484:	460d      	mov	r5, r1
 800e486:	f002 f961 	bl	801074c <rint>
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	4620      	mov	r0, r4
 800e490:	4629      	mov	r1, r5
 800e492:	f7f2 fa85 	bl	80009a0 <__aeabi_dcmpeq>
 800e496:	2800      	cmp	r0, #0
 800e498:	d1da      	bne.n	800e450 <powf+0x210>
 800e49a:	2200      	movs	r2, #0
 800e49c:	4b19      	ldr	r3, [pc, #100]	; (800e504 <powf+0x2c4>)
 800e49e:	e7d5      	b.n	800e44c <powf+0x20c>
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	f7f2 fdfe 	bl	80010a4 <__aeabi_fcmpeq>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	f43f af3a 	beq.w	800e322 <powf+0xe2>
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f002 fb57 	bl	8010b62 <finitef>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	f43f af34 	beq.w	800e322 <powf+0xe2>
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	f002 fb51 	bl	8010b62 <finitef>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	f43f af2e 	beq.w	800e322 <powf+0xe2>
 800e4c6:	2304      	movs	r3, #4
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	4b0c      	ldr	r3, [pc, #48]	; (800e4fc <powf+0x2bc>)
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	9301      	str	r3, [sp, #4]
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	9308      	str	r3, [sp, #32]
 800e4d4:	f7f1 ffa8 	bl	8000428 <__aeabi_f2d>
 800e4d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f7f1 ffa3 	bl	8000428 <__aeabi_f2d>
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	e7af      	b.n	800e44c <powf+0x20c>
 800e4ec:	4668      	mov	r0, sp
 800e4ee:	f002 f924 	bl	801073a <matherr>
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	f47f af0a 	bne.w	800e30c <powf+0xcc>
 800e4f8:	e7ae      	b.n	800e458 <powf+0x218>
 800e4fa:	bf00      	nop
 800e4fc:	08011843 	.word	0x08011843
 800e500:	3ff00000 	.word	0x3ff00000
 800e504:	fff00000 	.word	0xfff00000
 800e508:	47efffff 	.word	0x47efffff
 800e50c:	c7efffff 	.word	0xc7efffff
 800e510:	7ff00000 	.word	0x7ff00000
 800e514:	2000069c 	.word	0x2000069c

0800e518 <__ieee754_fmod>:
 800e518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800e520:	ea52 0507 	orrs.w	r5, r2, r7
 800e524:	4681      	mov	r9, r0
 800e526:	468a      	mov	sl, r1
 800e528:	4604      	mov	r4, r0
 800e52a:	4694      	mov	ip, r2
 800e52c:	461e      	mov	r6, r3
 800e52e:	4696      	mov	lr, r2
 800e530:	d00c      	beq.n	800e54c <__ieee754_fmod+0x34>
 800e532:	4d75      	ldr	r5, [pc, #468]	; (800e708 <__ieee754_fmod+0x1f0>)
 800e534:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800e538:	45a8      	cmp	r8, r5
 800e53a:	dc07      	bgt.n	800e54c <__ieee754_fmod+0x34>
 800e53c:	4255      	negs	r5, r2
 800e53e:	4315      	orrs	r5, r2
 800e540:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 800e720 <__ieee754_fmod+0x208>
 800e544:	ea47 75d5 	orr.w	r5, r7, r5, lsr #31
 800e548:	455d      	cmp	r5, fp
 800e54a:	d907      	bls.n	800e55c <__ieee754_fmod+0x44>
 800e54c:	f7f1 ffc0 	bl	80004d0 <__aeabi_dmul>
 800e550:	4602      	mov	r2, r0
 800e552:	460b      	mov	r3, r1
 800e554:	f7f2 f8e6 	bl	8000724 <__aeabi_ddiv>
 800e558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55c:	45b8      	cmp	r8, r7
 800e55e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e562:	dc0a      	bgt.n	800e57a <__ieee754_fmod+0x62>
 800e564:	dbf8      	blt.n	800e558 <__ieee754_fmod+0x40>
 800e566:	4290      	cmp	r0, r2
 800e568:	d3f6      	bcc.n	800e558 <__ieee754_fmod+0x40>
 800e56a:	d106      	bne.n	800e57a <__ieee754_fmod+0x62>
 800e56c:	4a67      	ldr	r2, [pc, #412]	; (800e70c <__ieee754_fmod+0x1f4>)
 800e56e:	0fed      	lsrs	r5, r5, #31
 800e570:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e574:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e578:	e7ee      	b.n	800e558 <__ieee754_fmod+0x40>
 800e57a:	4b65      	ldr	r3, [pc, #404]	; (800e710 <__ieee754_fmod+0x1f8>)
 800e57c:	4598      	cmp	r8, r3
 800e57e:	dc47      	bgt.n	800e610 <__ieee754_fmod+0xf8>
 800e580:	f1b8 0f00 	cmp.w	r8, #0
 800e584:	d13b      	bne.n	800e5fe <__ieee754_fmod+0xe6>
 800e586:	464a      	mov	r2, r9
 800e588:	4962      	ldr	r1, [pc, #392]	; (800e714 <__ieee754_fmod+0x1fc>)
 800e58a:	2a00      	cmp	r2, #0
 800e58c:	dc34      	bgt.n	800e5f8 <__ieee754_fmod+0xe0>
 800e58e:	429f      	cmp	r7, r3
 800e590:	dc4e      	bgt.n	800e630 <__ieee754_fmod+0x118>
 800e592:	2f00      	cmp	r7, #0
 800e594:	d144      	bne.n	800e620 <__ieee754_fmod+0x108>
 800e596:	4663      	mov	r3, ip
 800e598:	4a5e      	ldr	r2, [pc, #376]	; (800e714 <__ieee754_fmod+0x1fc>)
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	dc3d      	bgt.n	800e61a <__ieee754_fmod+0x102>
 800e59e:	485e      	ldr	r0, [pc, #376]	; (800e718 <__ieee754_fmod+0x200>)
 800e5a0:	4281      	cmp	r1, r0
 800e5a2:	db49      	blt.n	800e638 <__ieee754_fmod+0x120>
 800e5a4:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800e5a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5ac:	485a      	ldr	r0, [pc, #360]	; (800e718 <__ieee754_fmod+0x200>)
 800e5ae:	4282      	cmp	r2, r0
 800e5b0:	db56      	blt.n	800e660 <__ieee754_fmod+0x148>
 800e5b2:	f3c6 0013 	ubfx	r0, r6, #0, #20
 800e5b6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800e5ba:	1a89      	subs	r1, r1, r2
 800e5bc:	1a1e      	subs	r6, r3, r0
 800e5be:	2900      	cmp	r1, #0
 800e5c0:	d164      	bne.n	800e68c <__ieee754_fmod+0x174>
 800e5c2:	4574      	cmp	r4, lr
 800e5c4:	bf38      	it	cc
 800e5c6:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800e5ca:	2e00      	cmp	r6, #0
 800e5cc:	bfa4      	itt	ge
 800e5ce:	4633      	movge	r3, r6
 800e5d0:	eba4 040e 	subge.w	r4, r4, lr
 800e5d4:	ea53 0104 	orrs.w	r1, r3, r4
 800e5d8:	d0c8      	beq.n	800e56c <__ieee754_fmod+0x54>
 800e5da:	494d      	ldr	r1, [pc, #308]	; (800e710 <__ieee754_fmod+0x1f8>)
 800e5dc:	428b      	cmp	r3, r1
 800e5de:	dd6b      	ble.n	800e6b8 <__ieee754_fmod+0x1a0>
 800e5e0:	494d      	ldr	r1, [pc, #308]	; (800e718 <__ieee754_fmod+0x200>)
 800e5e2:	428a      	cmp	r2, r1
 800e5e4:	db6e      	blt.n	800e6c4 <__ieee754_fmod+0x1ac>
 800e5e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e5ea:	431d      	orrs	r5, r3
 800e5ec:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800e5f0:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	e7af      	b.n	800e558 <__ieee754_fmod+0x40>
 800e5f8:	3901      	subs	r1, #1
 800e5fa:	0052      	lsls	r2, r2, #1
 800e5fc:	e7c5      	b.n	800e58a <__ieee754_fmod+0x72>
 800e5fe:	4946      	ldr	r1, [pc, #280]	; (800e718 <__ieee754_fmod+0x200>)
 800e600:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800e604:	0052      	lsls	r2, r2, #1
 800e606:	2a00      	cmp	r2, #0
 800e608:	f101 31ff 	add.w	r1, r1, #4294967295
 800e60c:	dcfa      	bgt.n	800e604 <__ieee754_fmod+0xec>
 800e60e:	e7be      	b.n	800e58e <__ieee754_fmod+0x76>
 800e610:	ea4f 5128 	mov.w	r1, r8, asr #20
 800e614:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e618:	e7b9      	b.n	800e58e <__ieee754_fmod+0x76>
 800e61a:	3a01      	subs	r2, #1
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	e7bc      	b.n	800e59a <__ieee754_fmod+0x82>
 800e620:	4a3d      	ldr	r2, [pc, #244]	; (800e718 <__ieee754_fmod+0x200>)
 800e622:	02fb      	lsls	r3, r7, #11
 800e624:	005b      	lsls	r3, r3, #1
 800e626:	2b00      	cmp	r3, #0
 800e628:	f102 32ff 	add.w	r2, r2, #4294967295
 800e62c:	dcfa      	bgt.n	800e624 <__ieee754_fmod+0x10c>
 800e62e:	e7b6      	b.n	800e59e <__ieee754_fmod+0x86>
 800e630:	153a      	asrs	r2, r7, #20
 800e632:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e636:	e7b2      	b.n	800e59e <__ieee754_fmod+0x86>
 800e638:	1a44      	subs	r4, r0, r1
 800e63a:	2c1f      	cmp	r4, #31
 800e63c:	dc0a      	bgt.n	800e654 <__ieee754_fmod+0x13c>
 800e63e:	f1c4 0320 	rsb	r3, r4, #32
 800e642:	fa08 f804 	lsl.w	r8, r8, r4
 800e646:	fa29 f303 	lsr.w	r3, r9, r3
 800e64a:	ea43 0308 	orr.w	r3, r3, r8
 800e64e:	fa09 f404 	lsl.w	r4, r9, r4
 800e652:	e7ab      	b.n	800e5ac <__ieee754_fmod+0x94>
 800e654:	4b31      	ldr	r3, [pc, #196]	; (800e71c <__ieee754_fmod+0x204>)
 800e656:	2400      	movs	r4, #0
 800e658:	1a5b      	subs	r3, r3, r1
 800e65a:	fa09 f303 	lsl.w	r3, r9, r3
 800e65e:	e7a5      	b.n	800e5ac <__ieee754_fmod+0x94>
 800e660:	eba0 0e02 	sub.w	lr, r0, r2
 800e664:	f1be 0f1f 	cmp.w	lr, #31
 800e668:	dc09      	bgt.n	800e67e <__ieee754_fmod+0x166>
 800e66a:	f1ce 0020 	rsb	r0, lr, #32
 800e66e:	fa07 f70e 	lsl.w	r7, r7, lr
 800e672:	fa2c f000 	lsr.w	r0, ip, r0
 800e676:	4338      	orrs	r0, r7
 800e678:	fa0c fe0e 	lsl.w	lr, ip, lr
 800e67c:	e79d      	b.n	800e5ba <__ieee754_fmod+0xa2>
 800e67e:	4827      	ldr	r0, [pc, #156]	; (800e71c <__ieee754_fmod+0x204>)
 800e680:	f04f 0e00 	mov.w	lr, #0
 800e684:	1a80      	subs	r0, r0, r2
 800e686:	fa0c f000 	lsl.w	r0, ip, r0
 800e68a:	e796      	b.n	800e5ba <__ieee754_fmod+0xa2>
 800e68c:	4574      	cmp	r4, lr
 800e68e:	bf38      	it	cc
 800e690:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800e694:	2e00      	cmp	r6, #0
 800e696:	da05      	bge.n	800e6a4 <__ieee754_fmod+0x18c>
 800e698:	0fe6      	lsrs	r6, r4, #31
 800e69a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800e69e:	0064      	lsls	r4, r4, #1
 800e6a0:	3901      	subs	r1, #1
 800e6a2:	e78b      	b.n	800e5bc <__ieee754_fmod+0xa4>
 800e6a4:	eba4 040e 	sub.w	r4, r4, lr
 800e6a8:	ea56 0304 	orrs.w	r3, r6, r4
 800e6ac:	f43f af5e 	beq.w	800e56c <__ieee754_fmod+0x54>
 800e6b0:	0fe3      	lsrs	r3, r4, #31
 800e6b2:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800e6b6:	e7f2      	b.n	800e69e <__ieee754_fmod+0x186>
 800e6b8:	0fe0      	lsrs	r0, r4, #31
 800e6ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e6be:	0064      	lsls	r4, r4, #1
 800e6c0:	3a01      	subs	r2, #1
 800e6c2:	e78b      	b.n	800e5dc <__ieee754_fmod+0xc4>
 800e6c4:	1a89      	subs	r1, r1, r2
 800e6c6:	2914      	cmp	r1, #20
 800e6c8:	dc0a      	bgt.n	800e6e0 <__ieee754_fmod+0x1c8>
 800e6ca:	f1c1 0220 	rsb	r2, r1, #32
 800e6ce:	fa03 f202 	lsl.w	r2, r3, r2
 800e6d2:	40cc      	lsrs	r4, r1
 800e6d4:	4322      	orrs	r2, r4
 800e6d6:	410b      	asrs	r3, r1
 800e6d8:	ea43 0105 	orr.w	r1, r3, r5
 800e6dc:	4610      	mov	r0, r2
 800e6de:	e73b      	b.n	800e558 <__ieee754_fmod+0x40>
 800e6e0:	291f      	cmp	r1, #31
 800e6e2:	dc07      	bgt.n	800e6f4 <__ieee754_fmod+0x1dc>
 800e6e4:	fa24 f201 	lsr.w	r2, r4, r1
 800e6e8:	f1c1 0120 	rsb	r1, r1, #32
 800e6ec:	408b      	lsls	r3, r1
 800e6ee:	431a      	orrs	r2, r3
 800e6f0:	462b      	mov	r3, r5
 800e6f2:	e7f1      	b.n	800e6d8 <__ieee754_fmod+0x1c0>
 800e6f4:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800e6f8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e6fc:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800e700:	32e2      	adds	r2, #226	; 0xe2
 800e702:	fa43 f202 	asr.w	r2, r3, r2
 800e706:	e7f3      	b.n	800e6f0 <__ieee754_fmod+0x1d8>
 800e708:	7fefffff 	.word	0x7fefffff
 800e70c:	08011848 	.word	0x08011848
 800e710:	000fffff 	.word	0x000fffff
 800e714:	fffffbed 	.word	0xfffffbed
 800e718:	fffffc02 	.word	0xfffffc02
 800e71c:	fffffbe2 	.word	0xfffffbe2
 800e720:	7ff00000 	.word	0x7ff00000
 800e724:	00000000 	.word	0x00000000

0800e728 <__ieee754_pow>:
 800e728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e72c:	b093      	sub	sp, #76	; 0x4c
 800e72e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e732:	9e03      	ldr	r6, [sp, #12]
 800e734:	9a02      	ldr	r2, [sp, #8]
 800e736:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e73a:	ea55 0302 	orrs.w	r3, r5, r2
 800e73e:	4607      	mov	r7, r0
 800e740:	4688      	mov	r8, r1
 800e742:	4682      	mov	sl, r0
 800e744:	4689      	mov	r9, r1
 800e746:	f000 849e 	beq.w	800f086 <__ieee754_pow+0x95e>
 800e74a:	4b77      	ldr	r3, [pc, #476]	; (800e928 <__ieee754_pow+0x200>)
 800e74c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800e750:	429c      	cmp	r4, r3
 800e752:	dc09      	bgt.n	800e768 <__ieee754_pow+0x40>
 800e754:	d103      	bne.n	800e75e <__ieee754_pow+0x36>
 800e756:	b938      	cbnz	r0, 800e768 <__ieee754_pow+0x40>
 800e758:	42a5      	cmp	r5, r4
 800e75a:	dc0d      	bgt.n	800e778 <__ieee754_pow+0x50>
 800e75c:	e001      	b.n	800e762 <__ieee754_pow+0x3a>
 800e75e:	429d      	cmp	r5, r3
 800e760:	dc02      	bgt.n	800e768 <__ieee754_pow+0x40>
 800e762:	429d      	cmp	r5, r3
 800e764:	d10e      	bne.n	800e784 <__ieee754_pow+0x5c>
 800e766:	b16a      	cbz	r2, 800e784 <__ieee754_pow+0x5c>
 800e768:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e76c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e770:	ea54 030a 	orrs.w	r3, r4, sl
 800e774:	f000 8487 	beq.w	800f086 <__ieee754_pow+0x95e>
 800e778:	486c      	ldr	r0, [pc, #432]	; (800e92c <__ieee754_pow+0x204>)
 800e77a:	b013      	add	sp, #76	; 0x4c
 800e77c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e780:	f001 bfde 	b.w	8010740 <nan>
 800e784:	f1b9 0f00 	cmp.w	r9, #0
 800e788:	da4f      	bge.n	800e82a <__ieee754_pow+0x102>
 800e78a:	4b69      	ldr	r3, [pc, #420]	; (800e930 <__ieee754_pow+0x208>)
 800e78c:	429d      	cmp	r5, r3
 800e78e:	dc4a      	bgt.n	800e826 <__ieee754_pow+0xfe>
 800e790:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e794:	429d      	cmp	r5, r3
 800e796:	dd48      	ble.n	800e82a <__ieee754_pow+0x102>
 800e798:	152b      	asrs	r3, r5, #20
 800e79a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e79e:	2b14      	cmp	r3, #20
 800e7a0:	dd24      	ble.n	800e7ec <__ieee754_pow+0xc4>
 800e7a2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e7a6:	fa22 f103 	lsr.w	r1, r2, r3
 800e7aa:	fa01 f303 	lsl.w	r3, r1, r3
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d13b      	bne.n	800e82a <__ieee754_pow+0x102>
 800e7b2:	f001 0101 	and.w	r1, r1, #1
 800e7b6:	f1c1 0302 	rsb	r3, r1, #2
 800e7ba:	9300      	str	r3, [sp, #0]
 800e7bc:	2a00      	cmp	r2, #0
 800e7be:	d156      	bne.n	800e86e <__ieee754_pow+0x146>
 800e7c0:	4b59      	ldr	r3, [pc, #356]	; (800e928 <__ieee754_pow+0x200>)
 800e7c2:	429d      	cmp	r5, r3
 800e7c4:	d122      	bne.n	800e80c <__ieee754_pow+0xe4>
 800e7c6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e7ca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e7ce:	ea53 030a 	orrs.w	r3, r3, sl
 800e7d2:	f000 8458 	beq.w	800f086 <__ieee754_pow+0x95e>
 800e7d6:	4b57      	ldr	r3, [pc, #348]	; (800e934 <__ieee754_pow+0x20c>)
 800e7d8:	429c      	cmp	r4, r3
 800e7da:	dd28      	ble.n	800e82e <__ieee754_pow+0x106>
 800e7dc:	2e00      	cmp	r6, #0
 800e7de:	f280 8456 	bge.w	800f08e <__ieee754_pow+0x966>
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	b013      	add	sp, #76	; 0x4c
 800e7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ec:	2a00      	cmp	r2, #0
 800e7ee:	d13c      	bne.n	800e86a <__ieee754_pow+0x142>
 800e7f0:	f1c3 0314 	rsb	r3, r3, #20
 800e7f4:	fa45 f103 	asr.w	r1, r5, r3
 800e7f8:	fa01 f303 	lsl.w	r3, r1, r3
 800e7fc:	429d      	cmp	r5, r3
 800e7fe:	f040 844e 	bne.w	800f09e <__ieee754_pow+0x976>
 800e802:	f001 0101 	and.w	r1, r1, #1
 800e806:	f1c1 0302 	rsb	r3, r1, #2
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	4b4a      	ldr	r3, [pc, #296]	; (800e938 <__ieee754_pow+0x210>)
 800e80e:	429d      	cmp	r5, r3
 800e810:	d114      	bne.n	800e83c <__ieee754_pow+0x114>
 800e812:	2e00      	cmp	r6, #0
 800e814:	f280 843f 	bge.w	800f096 <__ieee754_pow+0x96e>
 800e818:	463a      	mov	r2, r7
 800e81a:	4643      	mov	r3, r8
 800e81c:	2000      	movs	r0, #0
 800e81e:	4946      	ldr	r1, [pc, #280]	; (800e938 <__ieee754_pow+0x210>)
 800e820:	f7f1 ff80 	bl	8000724 <__aeabi_ddiv>
 800e824:	e7df      	b.n	800e7e6 <__ieee754_pow+0xbe>
 800e826:	2302      	movs	r3, #2
 800e828:	e7c7      	b.n	800e7ba <__ieee754_pow+0x92>
 800e82a:	2300      	movs	r3, #0
 800e82c:	e7c5      	b.n	800e7ba <__ieee754_pow+0x92>
 800e82e:	2e00      	cmp	r6, #0
 800e830:	dad7      	bge.n	800e7e2 <__ieee754_pow+0xba>
 800e832:	9b03      	ldr	r3, [sp, #12]
 800e834:	9802      	ldr	r0, [sp, #8]
 800e836:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e83a:	e7d4      	b.n	800e7e6 <__ieee754_pow+0xbe>
 800e83c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800e840:	d106      	bne.n	800e850 <__ieee754_pow+0x128>
 800e842:	463a      	mov	r2, r7
 800e844:	4643      	mov	r3, r8
 800e846:	4638      	mov	r0, r7
 800e848:	4641      	mov	r1, r8
 800e84a:	f7f1 fe41 	bl	80004d0 <__aeabi_dmul>
 800e84e:	e7ca      	b.n	800e7e6 <__ieee754_pow+0xbe>
 800e850:	4b3a      	ldr	r3, [pc, #232]	; (800e93c <__ieee754_pow+0x214>)
 800e852:	429e      	cmp	r6, r3
 800e854:	d10b      	bne.n	800e86e <__ieee754_pow+0x146>
 800e856:	f1b9 0f00 	cmp.w	r9, #0
 800e85a:	db08      	blt.n	800e86e <__ieee754_pow+0x146>
 800e85c:	4638      	mov	r0, r7
 800e85e:	4641      	mov	r1, r8
 800e860:	b013      	add	sp, #76	; 0x4c
 800e862:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e866:	f000 bc51 	b.w	800f10c <__ieee754_sqrt>
 800e86a:	2300      	movs	r3, #0
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	4638      	mov	r0, r7
 800e870:	4641      	mov	r1, r8
 800e872:	f001 ff59 	bl	8010728 <fabs>
 800e876:	f1ba 0f00 	cmp.w	sl, #0
 800e87a:	d125      	bne.n	800e8c8 <__ieee754_pow+0x1a0>
 800e87c:	b124      	cbz	r4, 800e888 <__ieee754_pow+0x160>
 800e87e:	4b2e      	ldr	r3, [pc, #184]	; (800e938 <__ieee754_pow+0x210>)
 800e880:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800e884:	429a      	cmp	r2, r3
 800e886:	d11f      	bne.n	800e8c8 <__ieee754_pow+0x1a0>
 800e888:	2e00      	cmp	r6, #0
 800e88a:	da05      	bge.n	800e898 <__ieee754_pow+0x170>
 800e88c:	4602      	mov	r2, r0
 800e88e:	460b      	mov	r3, r1
 800e890:	2000      	movs	r0, #0
 800e892:	4929      	ldr	r1, [pc, #164]	; (800e938 <__ieee754_pow+0x210>)
 800e894:	f7f1 ff46 	bl	8000724 <__aeabi_ddiv>
 800e898:	f1b9 0f00 	cmp.w	r9, #0
 800e89c:	daa3      	bge.n	800e7e6 <__ieee754_pow+0xbe>
 800e89e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e8a2:	9b00      	ldr	r3, [sp, #0]
 800e8a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e8a8:	4323      	orrs	r3, r4
 800e8aa:	d106      	bne.n	800e8ba <__ieee754_pow+0x192>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	f7f1 fc5a 	bl	8000168 <__aeabi_dsub>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	e7b2      	b.n	800e820 <__ieee754_pow+0xf8>
 800e8ba:	9b00      	ldr	r3, [sp, #0]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d192      	bne.n	800e7e6 <__ieee754_pow+0xbe>
 800e8c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	e78e      	b.n	800e7e6 <__ieee754_pow+0xbe>
 800e8c8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800e8cc:	f109 33ff 	add.w	r3, r9, #4294967295
 800e8d0:	930c      	str	r3, [sp, #48]	; 0x30
 800e8d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e8d4:	9b00      	ldr	r3, [sp, #0]
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	d104      	bne.n	800e8e4 <__ieee754_pow+0x1bc>
 800e8da:	463a      	mov	r2, r7
 800e8dc:	4643      	mov	r3, r8
 800e8de:	4638      	mov	r0, r7
 800e8e0:	4641      	mov	r1, r8
 800e8e2:	e7e5      	b.n	800e8b0 <__ieee754_pow+0x188>
 800e8e4:	4b16      	ldr	r3, [pc, #88]	; (800e940 <__ieee754_pow+0x218>)
 800e8e6:	429d      	cmp	r5, r3
 800e8e8:	f340 80fc 	ble.w	800eae4 <__ieee754_pow+0x3bc>
 800e8ec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e8f0:	429d      	cmp	r5, r3
 800e8f2:	dd0b      	ble.n	800e90c <__ieee754_pow+0x1e4>
 800e8f4:	4b0f      	ldr	r3, [pc, #60]	; (800e934 <__ieee754_pow+0x20c>)
 800e8f6:	429c      	cmp	r4, r3
 800e8f8:	dc0e      	bgt.n	800e918 <__ieee754_pow+0x1f0>
 800e8fa:	2e00      	cmp	r6, #0
 800e8fc:	f6bf af71 	bge.w	800e7e2 <__ieee754_pow+0xba>
 800e900:	a307      	add	r3, pc, #28	; (adr r3, 800e920 <__ieee754_pow+0x1f8>)
 800e902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e906:	4610      	mov	r0, r2
 800e908:	4619      	mov	r1, r3
 800e90a:	e79e      	b.n	800e84a <__ieee754_pow+0x122>
 800e90c:	4b0d      	ldr	r3, [pc, #52]	; (800e944 <__ieee754_pow+0x21c>)
 800e90e:	429c      	cmp	r4, r3
 800e910:	ddf3      	ble.n	800e8fa <__ieee754_pow+0x1d2>
 800e912:	4b09      	ldr	r3, [pc, #36]	; (800e938 <__ieee754_pow+0x210>)
 800e914:	429c      	cmp	r4, r3
 800e916:	dd17      	ble.n	800e948 <__ieee754_pow+0x220>
 800e918:	2e00      	cmp	r6, #0
 800e91a:	dcf1      	bgt.n	800e900 <__ieee754_pow+0x1d8>
 800e91c:	e761      	b.n	800e7e2 <__ieee754_pow+0xba>
 800e91e:	bf00      	nop
 800e920:	8800759c 	.word	0x8800759c
 800e924:	7e37e43c 	.word	0x7e37e43c
 800e928:	7ff00000 	.word	0x7ff00000
 800e92c:	080111f7 	.word	0x080111f7
 800e930:	433fffff 	.word	0x433fffff
 800e934:	3fefffff 	.word	0x3fefffff
 800e938:	3ff00000 	.word	0x3ff00000
 800e93c:	3fe00000 	.word	0x3fe00000
 800e940:	41e00000 	.word	0x41e00000
 800e944:	3feffffe 	.word	0x3feffffe
 800e948:	2200      	movs	r2, #0
 800e94a:	4b61      	ldr	r3, [pc, #388]	; (800ead0 <__ieee754_pow+0x3a8>)
 800e94c:	f7f1 fc0c 	bl	8000168 <__aeabi_dsub>
 800e950:	a355      	add	r3, pc, #340	; (adr r3, 800eaa8 <__ieee754_pow+0x380>)
 800e952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e956:	4604      	mov	r4, r0
 800e958:	460d      	mov	r5, r1
 800e95a:	f7f1 fdb9 	bl	80004d0 <__aeabi_dmul>
 800e95e:	a354      	add	r3, pc, #336	; (adr r3, 800eab0 <__ieee754_pow+0x388>)
 800e960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e964:	4606      	mov	r6, r0
 800e966:	460f      	mov	r7, r1
 800e968:	4620      	mov	r0, r4
 800e96a:	4629      	mov	r1, r5
 800e96c:	f7f1 fdb0 	bl	80004d0 <__aeabi_dmul>
 800e970:	2200      	movs	r2, #0
 800e972:	4682      	mov	sl, r0
 800e974:	468b      	mov	fp, r1
 800e976:	4b57      	ldr	r3, [pc, #348]	; (800ead4 <__ieee754_pow+0x3ac>)
 800e978:	4620      	mov	r0, r4
 800e97a:	4629      	mov	r1, r5
 800e97c:	f7f1 fda8 	bl	80004d0 <__aeabi_dmul>
 800e980:	4602      	mov	r2, r0
 800e982:	460b      	mov	r3, r1
 800e984:	a14c      	add	r1, pc, #304	; (adr r1, 800eab8 <__ieee754_pow+0x390>)
 800e986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e98a:	f7f1 fbed 	bl	8000168 <__aeabi_dsub>
 800e98e:	4622      	mov	r2, r4
 800e990:	462b      	mov	r3, r5
 800e992:	f7f1 fd9d 	bl	80004d0 <__aeabi_dmul>
 800e996:	4602      	mov	r2, r0
 800e998:	460b      	mov	r3, r1
 800e99a:	2000      	movs	r0, #0
 800e99c:	494e      	ldr	r1, [pc, #312]	; (800ead8 <__ieee754_pow+0x3b0>)
 800e99e:	f7f1 fbe3 	bl	8000168 <__aeabi_dsub>
 800e9a2:	4622      	mov	r2, r4
 800e9a4:	462b      	mov	r3, r5
 800e9a6:	4680      	mov	r8, r0
 800e9a8:	4689      	mov	r9, r1
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	4629      	mov	r1, r5
 800e9ae:	f7f1 fd8f 	bl	80004d0 <__aeabi_dmul>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	4640      	mov	r0, r8
 800e9b8:	4649      	mov	r1, r9
 800e9ba:	f7f1 fd89 	bl	80004d0 <__aeabi_dmul>
 800e9be:	a340      	add	r3, pc, #256	; (adr r3, 800eac0 <__ieee754_pow+0x398>)
 800e9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c4:	f7f1 fd84 	bl	80004d0 <__aeabi_dmul>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	4650      	mov	r0, sl
 800e9ce:	4659      	mov	r1, fp
 800e9d0:	f7f1 fbca 	bl	8000168 <__aeabi_dsub>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	4604      	mov	r4, r0
 800e9da:	460d      	mov	r5, r1
 800e9dc:	4630      	mov	r0, r6
 800e9de:	4639      	mov	r1, r7
 800e9e0:	f7f1 fbc4 	bl	800016c <__adddf3>
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	468b      	mov	fp, r1
 800e9e8:	4682      	mov	sl, r0
 800e9ea:	4632      	mov	r2, r6
 800e9ec:	463b      	mov	r3, r7
 800e9ee:	f7f1 fbbb 	bl	8000168 <__aeabi_dsub>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	f7f1 fbb5 	bl	8000168 <__aeabi_dsub>
 800e9fe:	9b00      	ldr	r3, [sp, #0]
 800ea00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea02:	3b01      	subs	r3, #1
 800ea04:	4313      	orrs	r3, r2
 800ea06:	f04f 0300 	mov.w	r3, #0
 800ea0a:	bf0c      	ite	eq
 800ea0c:	4c33      	ldreq	r4, [pc, #204]	; (800eadc <__ieee754_pow+0x3b4>)
 800ea0e:	4c30      	ldrne	r4, [pc, #192]	; (800ead0 <__ieee754_pow+0x3a8>)
 800ea10:	4606      	mov	r6, r0
 800ea12:	e88d 0018 	stmia.w	sp, {r3, r4}
 800ea16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ea1a:	2400      	movs	r4, #0
 800ea1c:	460f      	mov	r7, r1
 800ea1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea22:	4622      	mov	r2, r4
 800ea24:	462b      	mov	r3, r5
 800ea26:	f7f1 fb9f 	bl	8000168 <__aeabi_dsub>
 800ea2a:	4652      	mov	r2, sl
 800ea2c:	465b      	mov	r3, fp
 800ea2e:	f7f1 fd4f 	bl	80004d0 <__aeabi_dmul>
 800ea32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea36:	4680      	mov	r8, r0
 800ea38:	4689      	mov	r9, r1
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	4639      	mov	r1, r7
 800ea3e:	f7f1 fd47 	bl	80004d0 <__aeabi_dmul>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	4640      	mov	r0, r8
 800ea48:	4649      	mov	r1, r9
 800ea4a:	f7f1 fb8f 	bl	800016c <__adddf3>
 800ea4e:	4622      	mov	r2, r4
 800ea50:	462b      	mov	r3, r5
 800ea52:	4680      	mov	r8, r0
 800ea54:	4689      	mov	r9, r1
 800ea56:	4650      	mov	r0, sl
 800ea58:	4659      	mov	r1, fp
 800ea5a:	f7f1 fd39 	bl	80004d0 <__aeabi_dmul>
 800ea5e:	4604      	mov	r4, r0
 800ea60:	460d      	mov	r5, r1
 800ea62:	460b      	mov	r3, r1
 800ea64:	4602      	mov	r2, r0
 800ea66:	4649      	mov	r1, r9
 800ea68:	4640      	mov	r0, r8
 800ea6a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ea6e:	f7f1 fb7d 	bl	800016c <__adddf3>
 800ea72:	4b1b      	ldr	r3, [pc, #108]	; (800eae0 <__ieee754_pow+0x3b8>)
 800ea74:	4682      	mov	sl, r0
 800ea76:	4299      	cmp	r1, r3
 800ea78:	460f      	mov	r7, r1
 800ea7a:	460e      	mov	r6, r1
 800ea7c:	f340 82da 	ble.w	800f034 <__ieee754_pow+0x90c>
 800ea80:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ea84:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ea88:	4303      	orrs	r3, r0
 800ea8a:	f000 81d5 	beq.w	800ee38 <__ieee754_pow+0x710>
 800ea8e:	a30e      	add	r3, pc, #56	; (adr r3, 800eac8 <__ieee754_pow+0x3a0>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea98:	f7f1 fd1a 	bl	80004d0 <__aeabi_dmul>
 800ea9c:	a30a      	add	r3, pc, #40	; (adr r3, 800eac8 <__ieee754_pow+0x3a0>)
 800ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa2:	e6d2      	b.n	800e84a <__ieee754_pow+0x122>
 800eaa4:	f3af 8000 	nop.w
 800eaa8:	60000000 	.word	0x60000000
 800eaac:	3ff71547 	.word	0x3ff71547
 800eab0:	f85ddf44 	.word	0xf85ddf44
 800eab4:	3e54ae0b 	.word	0x3e54ae0b
 800eab8:	55555555 	.word	0x55555555
 800eabc:	3fd55555 	.word	0x3fd55555
 800eac0:	652b82fe 	.word	0x652b82fe
 800eac4:	3ff71547 	.word	0x3ff71547
 800eac8:	8800759c 	.word	0x8800759c
 800eacc:	7e37e43c 	.word	0x7e37e43c
 800ead0:	3ff00000 	.word	0x3ff00000
 800ead4:	3fd00000 	.word	0x3fd00000
 800ead8:	3fe00000 	.word	0x3fe00000
 800eadc:	bff00000 	.word	0xbff00000
 800eae0:	408fffff 	.word	0x408fffff
 800eae4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800eae8:	f04f 0200 	mov.w	r2, #0
 800eaec:	da05      	bge.n	800eafa <__ieee754_pow+0x3d2>
 800eaee:	4bca      	ldr	r3, [pc, #808]	; (800ee18 <__ieee754_pow+0x6f0>)
 800eaf0:	f7f1 fcee 	bl	80004d0 <__aeabi_dmul>
 800eaf4:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800eaf8:	460c      	mov	r4, r1
 800eafa:	1523      	asrs	r3, r4, #20
 800eafc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eb00:	4413      	add	r3, r2
 800eb02:	9307      	str	r3, [sp, #28]
 800eb04:	4bc5      	ldr	r3, [pc, #788]	; (800ee1c <__ieee754_pow+0x6f4>)
 800eb06:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eb0a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800eb0e:	429c      	cmp	r4, r3
 800eb10:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eb14:	dd08      	ble.n	800eb28 <__ieee754_pow+0x400>
 800eb16:	4bc2      	ldr	r3, [pc, #776]	; (800ee20 <__ieee754_pow+0x6f8>)
 800eb18:	429c      	cmp	r4, r3
 800eb1a:	f340 8154 	ble.w	800edc6 <__ieee754_pow+0x69e>
 800eb1e:	9b07      	ldr	r3, [sp, #28]
 800eb20:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800eb24:	3301      	adds	r3, #1
 800eb26:	9307      	str	r3, [sp, #28]
 800eb28:	2600      	movs	r6, #0
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	00f3      	lsls	r3, r6, #3
 800eb2e:	930d      	str	r3, [sp, #52]	; 0x34
 800eb30:	4bbc      	ldr	r3, [pc, #752]	; (800ee24 <__ieee754_pow+0x6fc>)
 800eb32:	00f2      	lsls	r2, r6, #3
 800eb34:	4413      	add	r3, r2
 800eb36:	cb18      	ldmia	r3, {r3, r4}
 800eb38:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	4623      	mov	r3, r4
 800eb40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eb44:	f7f1 fb10 	bl	8000168 <__aeabi_dsub>
 800eb48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eb4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800eb50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb54:	f7f1 fb0a 	bl	800016c <__adddf3>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	49b2      	ldr	r1, [pc, #712]	; (800ee28 <__ieee754_pow+0x700>)
 800eb60:	f7f1 fde0 	bl	8000724 <__aeabi_ddiv>
 800eb64:	4602      	mov	r2, r0
 800eb66:	460b      	mov	r3, r1
 800eb68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eb6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800eb70:	f7f1 fcae 	bl	80004d0 <__aeabi_dmul>
 800eb74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb78:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800eb7c:	f04f 0a00 	mov.w	sl, #0
 800eb80:	2200      	movs	r2, #0
 800eb82:	106d      	asrs	r5, r5, #1
 800eb84:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800eb88:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800eb8c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800eb90:	4659      	mov	r1, fp
 800eb92:	4650      	mov	r0, sl
 800eb94:	4614      	mov	r4, r2
 800eb96:	461d      	mov	r5, r3
 800eb98:	f7f1 fc9a 	bl	80004d0 <__aeabi_dmul>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	460b      	mov	r3, r1
 800eba0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800eba4:	f7f1 fae0 	bl	8000168 <__aeabi_dsub>
 800eba8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ebac:	4606      	mov	r6, r0
 800ebae:	460f      	mov	r7, r1
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	4629      	mov	r1, r5
 800ebb4:	f7f1 fad8 	bl	8000168 <__aeabi_dsub>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	460b      	mov	r3, r1
 800ebbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ebc0:	f7f1 fad2 	bl	8000168 <__aeabi_dsub>
 800ebc4:	465b      	mov	r3, fp
 800ebc6:	4652      	mov	r2, sl
 800ebc8:	f7f1 fc82 	bl	80004d0 <__aeabi_dmul>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	460b      	mov	r3, r1
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	4639      	mov	r1, r7
 800ebd4:	f7f1 fac8 	bl	8000168 <__aeabi_dsub>
 800ebd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ebdc:	f7f1 fc78 	bl	80004d0 <__aeabi_dmul>
 800ebe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebe4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ebe8:	4610      	mov	r0, r2
 800ebea:	4619      	mov	r1, r3
 800ebec:	f7f1 fc70 	bl	80004d0 <__aeabi_dmul>
 800ebf0:	a377      	add	r3, pc, #476	; (adr r3, 800edd0 <__ieee754_pow+0x6a8>)
 800ebf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	460d      	mov	r5, r1
 800ebfa:	f7f1 fc69 	bl	80004d0 <__aeabi_dmul>
 800ebfe:	a376      	add	r3, pc, #472	; (adr r3, 800edd8 <__ieee754_pow+0x6b0>)
 800ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec04:	f7f1 fab2 	bl	800016c <__adddf3>
 800ec08:	4622      	mov	r2, r4
 800ec0a:	462b      	mov	r3, r5
 800ec0c:	f7f1 fc60 	bl	80004d0 <__aeabi_dmul>
 800ec10:	a373      	add	r3, pc, #460	; (adr r3, 800ede0 <__ieee754_pow+0x6b8>)
 800ec12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec16:	f7f1 faa9 	bl	800016c <__adddf3>
 800ec1a:	4622      	mov	r2, r4
 800ec1c:	462b      	mov	r3, r5
 800ec1e:	f7f1 fc57 	bl	80004d0 <__aeabi_dmul>
 800ec22:	a371      	add	r3, pc, #452	; (adr r3, 800ede8 <__ieee754_pow+0x6c0>)
 800ec24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec28:	f7f1 faa0 	bl	800016c <__adddf3>
 800ec2c:	4622      	mov	r2, r4
 800ec2e:	462b      	mov	r3, r5
 800ec30:	f7f1 fc4e 	bl	80004d0 <__aeabi_dmul>
 800ec34:	a36e      	add	r3, pc, #440	; (adr r3, 800edf0 <__ieee754_pow+0x6c8>)
 800ec36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3a:	f7f1 fa97 	bl	800016c <__adddf3>
 800ec3e:	4622      	mov	r2, r4
 800ec40:	462b      	mov	r3, r5
 800ec42:	f7f1 fc45 	bl	80004d0 <__aeabi_dmul>
 800ec46:	a36c      	add	r3, pc, #432	; (adr r3, 800edf8 <__ieee754_pow+0x6d0>)
 800ec48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4c:	f7f1 fa8e 	bl	800016c <__adddf3>
 800ec50:	4622      	mov	r2, r4
 800ec52:	4606      	mov	r6, r0
 800ec54:	460f      	mov	r7, r1
 800ec56:	462b      	mov	r3, r5
 800ec58:	4620      	mov	r0, r4
 800ec5a:	4629      	mov	r1, r5
 800ec5c:	f7f1 fc38 	bl	80004d0 <__aeabi_dmul>
 800ec60:	4602      	mov	r2, r0
 800ec62:	460b      	mov	r3, r1
 800ec64:	4630      	mov	r0, r6
 800ec66:	4639      	mov	r1, r7
 800ec68:	f7f1 fc32 	bl	80004d0 <__aeabi_dmul>
 800ec6c:	4604      	mov	r4, r0
 800ec6e:	460d      	mov	r5, r1
 800ec70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec74:	465b      	mov	r3, fp
 800ec76:	4652      	mov	r2, sl
 800ec78:	f7f1 fa78 	bl	800016c <__adddf3>
 800ec7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ec80:	f7f1 fc26 	bl	80004d0 <__aeabi_dmul>
 800ec84:	4622      	mov	r2, r4
 800ec86:	462b      	mov	r3, r5
 800ec88:	f7f1 fa70 	bl	800016c <__adddf3>
 800ec8c:	465b      	mov	r3, fp
 800ec8e:	4606      	mov	r6, r0
 800ec90:	460f      	mov	r7, r1
 800ec92:	4652      	mov	r2, sl
 800ec94:	4659      	mov	r1, fp
 800ec96:	4650      	mov	r0, sl
 800ec98:	f7f1 fc1a 	bl	80004d0 <__aeabi_dmul>
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	4b63      	ldr	r3, [pc, #396]	; (800ee2c <__ieee754_pow+0x704>)
 800eca0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800eca4:	f7f1 fa62 	bl	800016c <__adddf3>
 800eca8:	4632      	mov	r2, r6
 800ecaa:	463b      	mov	r3, r7
 800ecac:	f7f1 fa5e 	bl	800016c <__adddf3>
 800ecb0:	4650      	mov	r0, sl
 800ecb2:	460d      	mov	r5, r1
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	460b      	mov	r3, r1
 800ecb8:	4650      	mov	r0, sl
 800ecba:	4659      	mov	r1, fp
 800ecbc:	f7f1 fc08 	bl	80004d0 <__aeabi_dmul>
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	4680      	mov	r8, r0
 800ecc4:	4689      	mov	r9, r1
 800ecc6:	4b59      	ldr	r3, [pc, #356]	; (800ee2c <__ieee754_pow+0x704>)
 800ecc8:	4629      	mov	r1, r5
 800ecca:	4650      	mov	r0, sl
 800eccc:	f7f1 fa4c 	bl	8000168 <__aeabi_dsub>
 800ecd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ecd4:	f7f1 fa48 	bl	8000168 <__aeabi_dsub>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	460b      	mov	r3, r1
 800ecdc:	4630      	mov	r0, r6
 800ecde:	4639      	mov	r1, r7
 800ece0:	f7f1 fa42 	bl	8000168 <__aeabi_dsub>
 800ece4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ece8:	f7f1 fbf2 	bl	80004d0 <__aeabi_dmul>
 800ecec:	462b      	mov	r3, r5
 800ecee:	4606      	mov	r6, r0
 800ecf0:	460f      	mov	r7, r1
 800ecf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ecf6:	4652      	mov	r2, sl
 800ecf8:	f7f1 fbea 	bl	80004d0 <__aeabi_dmul>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	460b      	mov	r3, r1
 800ed00:	4630      	mov	r0, r6
 800ed02:	4639      	mov	r1, r7
 800ed04:	f7f1 fa32 	bl	800016c <__adddf3>
 800ed08:	4606      	mov	r6, r0
 800ed0a:	460f      	mov	r7, r1
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	460b      	mov	r3, r1
 800ed10:	4640      	mov	r0, r8
 800ed12:	4649      	mov	r1, r9
 800ed14:	f7f1 fa2a 	bl	800016c <__adddf3>
 800ed18:	a339      	add	r3, pc, #228	; (adr r3, 800ee00 <__ieee754_pow+0x6d8>)
 800ed1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1e:	4650      	mov	r0, sl
 800ed20:	460d      	mov	r5, r1
 800ed22:	f7f1 fbd5 	bl	80004d0 <__aeabi_dmul>
 800ed26:	4642      	mov	r2, r8
 800ed28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed2c:	464b      	mov	r3, r9
 800ed2e:	4629      	mov	r1, r5
 800ed30:	4650      	mov	r0, sl
 800ed32:	f7f1 fa19 	bl	8000168 <__aeabi_dsub>
 800ed36:	4602      	mov	r2, r0
 800ed38:	460b      	mov	r3, r1
 800ed3a:	4630      	mov	r0, r6
 800ed3c:	4639      	mov	r1, r7
 800ed3e:	f7f1 fa13 	bl	8000168 <__aeabi_dsub>
 800ed42:	a331      	add	r3, pc, #196	; (adr r3, 800ee08 <__ieee754_pow+0x6e0>)
 800ed44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed48:	f7f1 fbc2 	bl	80004d0 <__aeabi_dmul>
 800ed4c:	a330      	add	r3, pc, #192	; (adr r3, 800ee10 <__ieee754_pow+0x6e8>)
 800ed4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed52:	4606      	mov	r6, r0
 800ed54:	460f      	mov	r7, r1
 800ed56:	4650      	mov	r0, sl
 800ed58:	4629      	mov	r1, r5
 800ed5a:	f7f1 fbb9 	bl	80004d0 <__aeabi_dmul>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	460b      	mov	r3, r1
 800ed62:	4630      	mov	r0, r6
 800ed64:	4639      	mov	r1, r7
 800ed66:	f7f1 fa01 	bl	800016c <__adddf3>
 800ed6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed6c:	4b30      	ldr	r3, [pc, #192]	; (800ee30 <__ieee754_pow+0x708>)
 800ed6e:	4413      	add	r3, r2
 800ed70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed74:	f7f1 f9fa 	bl	800016c <__adddf3>
 800ed78:	4604      	mov	r4, r0
 800ed7a:	9807      	ldr	r0, [sp, #28]
 800ed7c:	460d      	mov	r5, r1
 800ed7e:	f7f1 fb41 	bl	8000404 <__aeabi_i2d>
 800ed82:	4606      	mov	r6, r0
 800ed84:	460f      	mov	r7, r1
 800ed86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed88:	4b2a      	ldr	r3, [pc, #168]	; (800ee34 <__ieee754_pow+0x70c>)
 800ed8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed8e:	4413      	add	r3, r2
 800ed90:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed94:	4622      	mov	r2, r4
 800ed96:	462b      	mov	r3, r5
 800ed98:	f7f1 f9e8 	bl	800016c <__adddf3>
 800ed9c:	4642      	mov	r2, r8
 800ed9e:	464b      	mov	r3, r9
 800eda0:	f7f1 f9e4 	bl	800016c <__adddf3>
 800eda4:	4632      	mov	r2, r6
 800eda6:	463b      	mov	r3, r7
 800eda8:	f7f1 f9e0 	bl	800016c <__adddf3>
 800edac:	4632      	mov	r2, r6
 800edae:	463b      	mov	r3, r7
 800edb0:	4650      	mov	r0, sl
 800edb2:	468b      	mov	fp, r1
 800edb4:	f7f1 f9d8 	bl	8000168 <__aeabi_dsub>
 800edb8:	4642      	mov	r2, r8
 800edba:	464b      	mov	r3, r9
 800edbc:	f7f1 f9d4 	bl	8000168 <__aeabi_dsub>
 800edc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edc4:	e613      	b.n	800e9ee <__ieee754_pow+0x2c6>
 800edc6:	2601      	movs	r6, #1
 800edc8:	e6af      	b.n	800eb2a <__ieee754_pow+0x402>
 800edca:	bf00      	nop
 800edcc:	f3af 8000 	nop.w
 800edd0:	4a454eef 	.word	0x4a454eef
 800edd4:	3fca7e28 	.word	0x3fca7e28
 800edd8:	93c9db65 	.word	0x93c9db65
 800eddc:	3fcd864a 	.word	0x3fcd864a
 800ede0:	a91d4101 	.word	0xa91d4101
 800ede4:	3fd17460 	.word	0x3fd17460
 800ede8:	518f264d 	.word	0x518f264d
 800edec:	3fd55555 	.word	0x3fd55555
 800edf0:	db6fabff 	.word	0xdb6fabff
 800edf4:	3fdb6db6 	.word	0x3fdb6db6
 800edf8:	33333303 	.word	0x33333303
 800edfc:	3fe33333 	.word	0x3fe33333
 800ee00:	e0000000 	.word	0xe0000000
 800ee04:	3feec709 	.word	0x3feec709
 800ee08:	dc3a03fd 	.word	0xdc3a03fd
 800ee0c:	3feec709 	.word	0x3feec709
 800ee10:	145b01f5 	.word	0x145b01f5
 800ee14:	be3e2fe0 	.word	0xbe3e2fe0
 800ee18:	43400000 	.word	0x43400000
 800ee1c:	0003988e 	.word	0x0003988e
 800ee20:	000bb679 	.word	0x000bb679
 800ee24:	08011858 	.word	0x08011858
 800ee28:	3ff00000 	.word	0x3ff00000
 800ee2c:	40080000 	.word	0x40080000
 800ee30:	08011878 	.word	0x08011878
 800ee34:	08011868 	.word	0x08011868
 800ee38:	a39b      	add	r3, pc, #620	; (adr r3, 800f0a8 <__ieee754_pow+0x980>)
 800ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3e:	4640      	mov	r0, r8
 800ee40:	4649      	mov	r1, r9
 800ee42:	f7f1 f993 	bl	800016c <__adddf3>
 800ee46:	4622      	mov	r2, r4
 800ee48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee4c:	462b      	mov	r3, r5
 800ee4e:	4650      	mov	r0, sl
 800ee50:	4639      	mov	r1, r7
 800ee52:	f7f1 f989 	bl	8000168 <__aeabi_dsub>
 800ee56:	4602      	mov	r2, r0
 800ee58:	460b      	mov	r3, r1
 800ee5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee5e:	f7f1 fdc7 	bl	80009f0 <__aeabi_dcmpgt>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	f47f ae13 	bne.w	800ea8e <__ieee754_pow+0x366>
 800ee68:	4aa3      	ldr	r2, [pc, #652]	; (800f0f8 <__ieee754_pow+0x9d0>)
 800ee6a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	f340 8104 	ble.w	800f07c <__ieee754_pow+0x954>
 800ee74:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ee78:	2000      	movs	r0, #0
 800ee7a:	151b      	asrs	r3, r3, #20
 800ee7c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ee80:	fa4a f303 	asr.w	r3, sl, r3
 800ee84:	4433      	add	r3, r6
 800ee86:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ee8a:	4f9c      	ldr	r7, [pc, #624]	; (800f0fc <__ieee754_pow+0x9d4>)
 800ee8c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ee90:	4117      	asrs	r7, r2
 800ee92:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ee96:	ea23 0107 	bic.w	r1, r3, r7
 800ee9a:	f1c2 0214 	rsb	r2, r2, #20
 800ee9e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800eea2:	fa4a fa02 	asr.w	sl, sl, r2
 800eea6:	2e00      	cmp	r6, #0
 800eea8:	4602      	mov	r2, r0
 800eeaa:	460b      	mov	r3, r1
 800eeac:	4620      	mov	r0, r4
 800eeae:	4629      	mov	r1, r5
 800eeb0:	bfb8      	it	lt
 800eeb2:	f1ca 0a00 	rsblt	sl, sl, #0
 800eeb6:	f7f1 f957 	bl	8000168 <__aeabi_dsub>
 800eeba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eec2:	4642      	mov	r2, r8
 800eec4:	464b      	mov	r3, r9
 800eec6:	f7f1 f951 	bl	800016c <__adddf3>
 800eeca:	a379      	add	r3, pc, #484	; (adr r3, 800f0b0 <__ieee754_pow+0x988>)
 800eecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed0:	2000      	movs	r0, #0
 800eed2:	460d      	mov	r5, r1
 800eed4:	4604      	mov	r4, r0
 800eed6:	f7f1 fafb 	bl	80004d0 <__aeabi_dmul>
 800eeda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eede:	4606      	mov	r6, r0
 800eee0:	460f      	mov	r7, r1
 800eee2:	4620      	mov	r0, r4
 800eee4:	4629      	mov	r1, r5
 800eee6:	f7f1 f93f 	bl	8000168 <__aeabi_dsub>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	4640      	mov	r0, r8
 800eef0:	4649      	mov	r1, r9
 800eef2:	f7f1 f939 	bl	8000168 <__aeabi_dsub>
 800eef6:	a370      	add	r3, pc, #448	; (adr r3, 800f0b8 <__ieee754_pow+0x990>)
 800eef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefc:	f7f1 fae8 	bl	80004d0 <__aeabi_dmul>
 800ef00:	a36f      	add	r3, pc, #444	; (adr r3, 800f0c0 <__ieee754_pow+0x998>)
 800ef02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef06:	4680      	mov	r8, r0
 800ef08:	4689      	mov	r9, r1
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	4629      	mov	r1, r5
 800ef0e:	f7f1 fadf 	bl	80004d0 <__aeabi_dmul>
 800ef12:	4602      	mov	r2, r0
 800ef14:	460b      	mov	r3, r1
 800ef16:	4640      	mov	r0, r8
 800ef18:	4649      	mov	r1, r9
 800ef1a:	f7f1 f927 	bl	800016c <__adddf3>
 800ef1e:	4604      	mov	r4, r0
 800ef20:	460d      	mov	r5, r1
 800ef22:	4602      	mov	r2, r0
 800ef24:	460b      	mov	r3, r1
 800ef26:	4630      	mov	r0, r6
 800ef28:	4639      	mov	r1, r7
 800ef2a:	f7f1 f91f 	bl	800016c <__adddf3>
 800ef2e:	4632      	mov	r2, r6
 800ef30:	463b      	mov	r3, r7
 800ef32:	4680      	mov	r8, r0
 800ef34:	4689      	mov	r9, r1
 800ef36:	f7f1 f917 	bl	8000168 <__aeabi_dsub>
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	4620      	mov	r0, r4
 800ef40:	4629      	mov	r1, r5
 800ef42:	f7f1 f911 	bl	8000168 <__aeabi_dsub>
 800ef46:	4642      	mov	r2, r8
 800ef48:	4606      	mov	r6, r0
 800ef4a:	460f      	mov	r7, r1
 800ef4c:	464b      	mov	r3, r9
 800ef4e:	4640      	mov	r0, r8
 800ef50:	4649      	mov	r1, r9
 800ef52:	f7f1 fabd 	bl	80004d0 <__aeabi_dmul>
 800ef56:	a35c      	add	r3, pc, #368	; (adr r3, 800f0c8 <__ieee754_pow+0x9a0>)
 800ef58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	460d      	mov	r5, r1
 800ef60:	f7f1 fab6 	bl	80004d0 <__aeabi_dmul>
 800ef64:	a35a      	add	r3, pc, #360	; (adr r3, 800f0d0 <__ieee754_pow+0x9a8>)
 800ef66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6a:	f7f1 f8fd 	bl	8000168 <__aeabi_dsub>
 800ef6e:	4622      	mov	r2, r4
 800ef70:	462b      	mov	r3, r5
 800ef72:	f7f1 faad 	bl	80004d0 <__aeabi_dmul>
 800ef76:	a358      	add	r3, pc, #352	; (adr r3, 800f0d8 <__ieee754_pow+0x9b0>)
 800ef78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7c:	f7f1 f8f6 	bl	800016c <__adddf3>
 800ef80:	4622      	mov	r2, r4
 800ef82:	462b      	mov	r3, r5
 800ef84:	f7f1 faa4 	bl	80004d0 <__aeabi_dmul>
 800ef88:	a355      	add	r3, pc, #340	; (adr r3, 800f0e0 <__ieee754_pow+0x9b8>)
 800ef8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8e:	f7f1 f8eb 	bl	8000168 <__aeabi_dsub>
 800ef92:	4622      	mov	r2, r4
 800ef94:	462b      	mov	r3, r5
 800ef96:	f7f1 fa9b 	bl	80004d0 <__aeabi_dmul>
 800ef9a:	a353      	add	r3, pc, #332	; (adr r3, 800f0e8 <__ieee754_pow+0x9c0>)
 800ef9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa0:	f7f1 f8e4 	bl	800016c <__adddf3>
 800efa4:	4622      	mov	r2, r4
 800efa6:	462b      	mov	r3, r5
 800efa8:	f7f1 fa92 	bl	80004d0 <__aeabi_dmul>
 800efac:	4602      	mov	r2, r0
 800efae:	460b      	mov	r3, r1
 800efb0:	4640      	mov	r0, r8
 800efb2:	4649      	mov	r1, r9
 800efb4:	f7f1 f8d8 	bl	8000168 <__aeabi_dsub>
 800efb8:	4604      	mov	r4, r0
 800efba:	460d      	mov	r5, r1
 800efbc:	4602      	mov	r2, r0
 800efbe:	460b      	mov	r3, r1
 800efc0:	4640      	mov	r0, r8
 800efc2:	4649      	mov	r1, r9
 800efc4:	f7f1 fa84 	bl	80004d0 <__aeabi_dmul>
 800efc8:	2200      	movs	r2, #0
 800efca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800efd2:	4620      	mov	r0, r4
 800efd4:	4629      	mov	r1, r5
 800efd6:	f7f1 f8c7 	bl	8000168 <__aeabi_dsub>
 800efda:	4602      	mov	r2, r0
 800efdc:	460b      	mov	r3, r1
 800efde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efe2:	f7f1 fb9f 	bl	8000724 <__aeabi_ddiv>
 800efe6:	4632      	mov	r2, r6
 800efe8:	4604      	mov	r4, r0
 800efea:	460d      	mov	r5, r1
 800efec:	463b      	mov	r3, r7
 800efee:	4640      	mov	r0, r8
 800eff0:	4649      	mov	r1, r9
 800eff2:	f7f1 fa6d 	bl	80004d0 <__aeabi_dmul>
 800eff6:	4632      	mov	r2, r6
 800eff8:	463b      	mov	r3, r7
 800effa:	f7f1 f8b7 	bl	800016c <__adddf3>
 800effe:	4602      	mov	r2, r0
 800f000:	460b      	mov	r3, r1
 800f002:	4620      	mov	r0, r4
 800f004:	4629      	mov	r1, r5
 800f006:	f7f1 f8af 	bl	8000168 <__aeabi_dsub>
 800f00a:	4642      	mov	r2, r8
 800f00c:	464b      	mov	r3, r9
 800f00e:	f7f1 f8ab 	bl	8000168 <__aeabi_dsub>
 800f012:	4602      	mov	r2, r0
 800f014:	460b      	mov	r3, r1
 800f016:	2000      	movs	r0, #0
 800f018:	4939      	ldr	r1, [pc, #228]	; (800f100 <__ieee754_pow+0x9d8>)
 800f01a:	f7f1 f8a5 	bl	8000168 <__aeabi_dsub>
 800f01e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800f022:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f026:	da2c      	bge.n	800f082 <__ieee754_pow+0x95a>
 800f028:	4652      	mov	r2, sl
 800f02a:	f001 fc19 	bl	8010860 <scalbn>
 800f02e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f032:	e40a      	b.n	800e84a <__ieee754_pow+0x122>
 800f034:	4b33      	ldr	r3, [pc, #204]	; (800f104 <__ieee754_pow+0x9dc>)
 800f036:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800f03a:	429f      	cmp	r7, r3
 800f03c:	f77f af14 	ble.w	800ee68 <__ieee754_pow+0x740>
 800f040:	4b31      	ldr	r3, [pc, #196]	; (800f108 <__ieee754_pow+0x9e0>)
 800f042:	440b      	add	r3, r1
 800f044:	4303      	orrs	r3, r0
 800f046:	d00b      	beq.n	800f060 <__ieee754_pow+0x938>
 800f048:	a329      	add	r3, pc, #164	; (adr r3, 800f0f0 <__ieee754_pow+0x9c8>)
 800f04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f052:	f7f1 fa3d 	bl	80004d0 <__aeabi_dmul>
 800f056:	a326      	add	r3, pc, #152	; (adr r3, 800f0f0 <__ieee754_pow+0x9c8>)
 800f058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05c:	f7ff bbf5 	b.w	800e84a <__ieee754_pow+0x122>
 800f060:	4622      	mov	r2, r4
 800f062:	462b      	mov	r3, r5
 800f064:	f7f1 f880 	bl	8000168 <__aeabi_dsub>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4640      	mov	r0, r8
 800f06e:	4649      	mov	r1, r9
 800f070:	f7f1 fcaa 	bl	80009c8 <__aeabi_dcmple>
 800f074:	2800      	cmp	r0, #0
 800f076:	f43f aef7 	beq.w	800ee68 <__ieee754_pow+0x740>
 800f07a:	e7e5      	b.n	800f048 <__ieee754_pow+0x920>
 800f07c:	f04f 0a00 	mov.w	sl, #0
 800f080:	e71d      	b.n	800eebe <__ieee754_pow+0x796>
 800f082:	4621      	mov	r1, r4
 800f084:	e7d3      	b.n	800f02e <__ieee754_pow+0x906>
 800f086:	2000      	movs	r0, #0
 800f088:	491d      	ldr	r1, [pc, #116]	; (800f100 <__ieee754_pow+0x9d8>)
 800f08a:	f7ff bbac 	b.w	800e7e6 <__ieee754_pow+0xbe>
 800f08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f092:	f7ff bba8 	b.w	800e7e6 <__ieee754_pow+0xbe>
 800f096:	4638      	mov	r0, r7
 800f098:	4641      	mov	r1, r8
 800f09a:	f7ff bba4 	b.w	800e7e6 <__ieee754_pow+0xbe>
 800f09e:	9200      	str	r2, [sp, #0]
 800f0a0:	f7ff bbb4 	b.w	800e80c <__ieee754_pow+0xe4>
 800f0a4:	f3af 8000 	nop.w
 800f0a8:	652b82fe 	.word	0x652b82fe
 800f0ac:	3c971547 	.word	0x3c971547
 800f0b0:	00000000 	.word	0x00000000
 800f0b4:	3fe62e43 	.word	0x3fe62e43
 800f0b8:	fefa39ef 	.word	0xfefa39ef
 800f0bc:	3fe62e42 	.word	0x3fe62e42
 800f0c0:	0ca86c39 	.word	0x0ca86c39
 800f0c4:	be205c61 	.word	0xbe205c61
 800f0c8:	72bea4d0 	.word	0x72bea4d0
 800f0cc:	3e663769 	.word	0x3e663769
 800f0d0:	c5d26bf1 	.word	0xc5d26bf1
 800f0d4:	3ebbbd41 	.word	0x3ebbbd41
 800f0d8:	af25de2c 	.word	0xaf25de2c
 800f0dc:	3f11566a 	.word	0x3f11566a
 800f0e0:	16bebd93 	.word	0x16bebd93
 800f0e4:	3f66c16c 	.word	0x3f66c16c
 800f0e8:	5555553e 	.word	0x5555553e
 800f0ec:	3fc55555 	.word	0x3fc55555
 800f0f0:	c2f8f359 	.word	0xc2f8f359
 800f0f4:	01a56e1f 	.word	0x01a56e1f
 800f0f8:	3fe00000 	.word	0x3fe00000
 800f0fc:	000fffff 	.word	0x000fffff
 800f100:	3ff00000 	.word	0x3ff00000
 800f104:	4090cbff 	.word	0x4090cbff
 800f108:	3f6f3400 	.word	0x3f6f3400

0800f10c <__ieee754_sqrt>:
 800f10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f110:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800f260 <__ieee754_sqrt+0x154>
 800f114:	4606      	mov	r6, r0
 800f116:	ea3e 0e01 	bics.w	lr, lr, r1
 800f11a:	460d      	mov	r5, r1
 800f11c:	4607      	mov	r7, r0
 800f11e:	460a      	mov	r2, r1
 800f120:	460c      	mov	r4, r1
 800f122:	4603      	mov	r3, r0
 800f124:	d10f      	bne.n	800f146 <__ieee754_sqrt+0x3a>
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	f7f1 f9d1 	bl	80004d0 <__aeabi_dmul>
 800f12e:	4602      	mov	r2, r0
 800f130:	460b      	mov	r3, r1
 800f132:	4630      	mov	r0, r6
 800f134:	4629      	mov	r1, r5
 800f136:	f7f1 f819 	bl	800016c <__adddf3>
 800f13a:	4606      	mov	r6, r0
 800f13c:	460d      	mov	r5, r1
 800f13e:	4630      	mov	r0, r6
 800f140:	4629      	mov	r1, r5
 800f142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f146:	2900      	cmp	r1, #0
 800f148:	dc0e      	bgt.n	800f168 <__ieee754_sqrt+0x5c>
 800f14a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800f14e:	ea5e 0707 	orrs.w	r7, lr, r7
 800f152:	d0f4      	beq.n	800f13e <__ieee754_sqrt+0x32>
 800f154:	b141      	cbz	r1, 800f168 <__ieee754_sqrt+0x5c>
 800f156:	4602      	mov	r2, r0
 800f158:	460b      	mov	r3, r1
 800f15a:	f7f1 f805 	bl	8000168 <__aeabi_dsub>
 800f15e:	4602      	mov	r2, r0
 800f160:	460b      	mov	r3, r1
 800f162:	f7f1 fadf 	bl	8000724 <__aeabi_ddiv>
 800f166:	e7e8      	b.n	800f13a <__ieee754_sqrt+0x2e>
 800f168:	1512      	asrs	r2, r2, #20
 800f16a:	d10c      	bne.n	800f186 <__ieee754_sqrt+0x7a>
 800f16c:	2c00      	cmp	r4, #0
 800f16e:	d06e      	beq.n	800f24e <__ieee754_sqrt+0x142>
 800f170:	2100      	movs	r1, #0
 800f172:	02e6      	lsls	r6, r4, #11
 800f174:	d56f      	bpl.n	800f256 <__ieee754_sqrt+0x14a>
 800f176:	1e48      	subs	r0, r1, #1
 800f178:	1a12      	subs	r2, r2, r0
 800f17a:	f1c1 0020 	rsb	r0, r1, #32
 800f17e:	fa23 f000 	lsr.w	r0, r3, r0
 800f182:	4304      	orrs	r4, r0
 800f184:	408b      	lsls	r3, r1
 800f186:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f18a:	07d5      	lsls	r5, r2, #31
 800f18c:	f04f 0500 	mov.w	r5, #0
 800f190:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f194:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800f198:	bf42      	ittt	mi
 800f19a:	0064      	lslmi	r4, r4, #1
 800f19c:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 800f1a0:	005b      	lslmi	r3, r3, #1
 800f1a2:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 800f1a6:	1050      	asrs	r0, r2, #1
 800f1a8:	4421      	add	r1, r4
 800f1aa:	2216      	movs	r2, #22
 800f1ac:	462c      	mov	r4, r5
 800f1ae:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800f1b2:	005b      	lsls	r3, r3, #1
 800f1b4:	19a7      	adds	r7, r4, r6
 800f1b6:	428f      	cmp	r7, r1
 800f1b8:	bfde      	ittt	le
 800f1ba:	1bc9      	suble	r1, r1, r7
 800f1bc:	19bc      	addle	r4, r7, r6
 800f1be:	19ad      	addle	r5, r5, r6
 800f1c0:	0049      	lsls	r1, r1, #1
 800f1c2:	3a01      	subs	r2, #1
 800f1c4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f1c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f1cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f1d0:	d1f0      	bne.n	800f1b4 <__ieee754_sqrt+0xa8>
 800f1d2:	f04f 0e20 	mov.w	lr, #32
 800f1d6:	4694      	mov	ip, r2
 800f1d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f1dc:	42a1      	cmp	r1, r4
 800f1de:	eb06 070c 	add.w	r7, r6, ip
 800f1e2:	dc02      	bgt.n	800f1ea <__ieee754_sqrt+0xde>
 800f1e4:	d112      	bne.n	800f20c <__ieee754_sqrt+0x100>
 800f1e6:	429f      	cmp	r7, r3
 800f1e8:	d810      	bhi.n	800f20c <__ieee754_sqrt+0x100>
 800f1ea:	2f00      	cmp	r7, #0
 800f1ec:	eb07 0c06 	add.w	ip, r7, r6
 800f1f0:	da34      	bge.n	800f25c <__ieee754_sqrt+0x150>
 800f1f2:	f1bc 0f00 	cmp.w	ip, #0
 800f1f6:	db31      	blt.n	800f25c <__ieee754_sqrt+0x150>
 800f1f8:	f104 0801 	add.w	r8, r4, #1
 800f1fc:	1b09      	subs	r1, r1, r4
 800f1fe:	4644      	mov	r4, r8
 800f200:	429f      	cmp	r7, r3
 800f202:	bf88      	it	hi
 800f204:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f208:	1bdb      	subs	r3, r3, r7
 800f20a:	4432      	add	r2, r6
 800f20c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 800f210:	f1be 0e01 	subs.w	lr, lr, #1
 800f214:	4439      	add	r1, r7
 800f216:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f21a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f21e:	d1dd      	bne.n	800f1dc <__ieee754_sqrt+0xd0>
 800f220:	430b      	orrs	r3, r1
 800f222:	d006      	beq.n	800f232 <__ieee754_sqrt+0x126>
 800f224:	1c54      	adds	r4, r2, #1
 800f226:	bf0b      	itete	eq
 800f228:	4672      	moveq	r2, lr
 800f22a:	3201      	addne	r2, #1
 800f22c:	3501      	addeq	r5, #1
 800f22e:	f022 0201 	bicne.w	r2, r2, #1
 800f232:	106b      	asrs	r3, r5, #1
 800f234:	0852      	lsrs	r2, r2, #1
 800f236:	07e9      	lsls	r1, r5, #31
 800f238:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f23c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f240:	bf48      	it	mi
 800f242:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f246:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800f24a:	4616      	mov	r6, r2
 800f24c:	e777      	b.n	800f13e <__ieee754_sqrt+0x32>
 800f24e:	0adc      	lsrs	r4, r3, #11
 800f250:	3a15      	subs	r2, #21
 800f252:	055b      	lsls	r3, r3, #21
 800f254:	e78a      	b.n	800f16c <__ieee754_sqrt+0x60>
 800f256:	0064      	lsls	r4, r4, #1
 800f258:	3101      	adds	r1, #1
 800f25a:	e78a      	b.n	800f172 <__ieee754_sqrt+0x66>
 800f25c:	46a0      	mov	r8, r4
 800f25e:	e7cd      	b.n	800f1fc <__ieee754_sqrt+0xf0>
 800f260:	7ff00000 	.word	0x7ff00000

0800f264 <__ieee754_asinf>:
 800f264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f268:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800f26c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800f270:	4604      	mov	r4, r0
 800f272:	4607      	mov	r7, r0
 800f274:	d10c      	bne.n	800f290 <__ieee754_asinf+0x2c>
 800f276:	498d      	ldr	r1, [pc, #564]	; (800f4ac <__ieee754_asinf+0x248>)
 800f278:	f7f1 fd80 	bl	8000d7c <__aeabi_fmul>
 800f27c:	498c      	ldr	r1, [pc, #560]	; (800f4b0 <__ieee754_asinf+0x24c>)
 800f27e:	4605      	mov	r5, r0
 800f280:	4620      	mov	r0, r4
 800f282:	f7f1 fd7b 	bl	8000d7c <__aeabi_fmul>
 800f286:	4601      	mov	r1, r0
 800f288:	4628      	mov	r0, r5
 800f28a:	f7f1 fc6f 	bl	8000b6c <__addsf3>
 800f28e:	e006      	b.n	800f29e <__ieee754_asinf+0x3a>
 800f290:	dd09      	ble.n	800f2a6 <__ieee754_asinf+0x42>
 800f292:	4601      	mov	r1, r0
 800f294:	f7f1 fc68 	bl	8000b68 <__aeabi_fsub>
 800f298:	4601      	mov	r1, r0
 800f29a:	f7f1 fe23 	bl	8000ee4 <__aeabi_fdiv>
 800f29e:	4604      	mov	r4, r0
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2a6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800f2aa:	da0b      	bge.n	800f2c4 <__ieee754_asinf+0x60>
 800f2ac:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800f2b0:	da73      	bge.n	800f39a <__ieee754_asinf+0x136>
 800f2b2:	4980      	ldr	r1, [pc, #512]	; (800f4b4 <__ieee754_asinf+0x250>)
 800f2b4:	f7f1 fc5a 	bl	8000b6c <__addsf3>
 800f2b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f2bc:	f7f1 ff1a 	bl	80010f4 <__aeabi_fcmpgt>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d1ed      	bne.n	800f2a0 <__ieee754_asinf+0x3c>
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f001 fc49 	bl	8010b5c <fabsf>
 800f2ca:	4601      	mov	r1, r0
 800f2cc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f2d0:	f7f1 fc4a 	bl	8000b68 <__aeabi_fsub>
 800f2d4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f2d8:	f7f1 fd50 	bl	8000d7c <__aeabi_fmul>
 800f2dc:	4604      	mov	r4, r0
 800f2de:	4976      	ldr	r1, [pc, #472]	; (800f4b8 <__ieee754_asinf+0x254>)
 800f2e0:	f7f1 fd4c 	bl	8000d7c <__aeabi_fmul>
 800f2e4:	4975      	ldr	r1, [pc, #468]	; (800f4bc <__ieee754_asinf+0x258>)
 800f2e6:	f7f1 fc41 	bl	8000b6c <__addsf3>
 800f2ea:	4621      	mov	r1, r4
 800f2ec:	f7f1 fd46 	bl	8000d7c <__aeabi_fmul>
 800f2f0:	4973      	ldr	r1, [pc, #460]	; (800f4c0 <__ieee754_asinf+0x25c>)
 800f2f2:	f7f1 fc39 	bl	8000b68 <__aeabi_fsub>
 800f2f6:	4621      	mov	r1, r4
 800f2f8:	f7f1 fd40 	bl	8000d7c <__aeabi_fmul>
 800f2fc:	4971      	ldr	r1, [pc, #452]	; (800f4c4 <__ieee754_asinf+0x260>)
 800f2fe:	f7f1 fc35 	bl	8000b6c <__addsf3>
 800f302:	4621      	mov	r1, r4
 800f304:	f7f1 fd3a 	bl	8000d7c <__aeabi_fmul>
 800f308:	496f      	ldr	r1, [pc, #444]	; (800f4c8 <__ieee754_asinf+0x264>)
 800f30a:	f7f1 fc2d 	bl	8000b68 <__aeabi_fsub>
 800f30e:	4621      	mov	r1, r4
 800f310:	f7f1 fd34 	bl	8000d7c <__aeabi_fmul>
 800f314:	496d      	ldr	r1, [pc, #436]	; (800f4cc <__ieee754_asinf+0x268>)
 800f316:	f7f1 fc29 	bl	8000b6c <__addsf3>
 800f31a:	4621      	mov	r1, r4
 800f31c:	f7f1 fd2e 	bl	8000d7c <__aeabi_fmul>
 800f320:	496b      	ldr	r1, [pc, #428]	; (800f4d0 <__ieee754_asinf+0x26c>)
 800f322:	4680      	mov	r8, r0
 800f324:	4620      	mov	r0, r4
 800f326:	f7f1 fd29 	bl	8000d7c <__aeabi_fmul>
 800f32a:	496a      	ldr	r1, [pc, #424]	; (800f4d4 <__ieee754_asinf+0x270>)
 800f32c:	f7f1 fc1c 	bl	8000b68 <__aeabi_fsub>
 800f330:	4621      	mov	r1, r4
 800f332:	f7f1 fd23 	bl	8000d7c <__aeabi_fmul>
 800f336:	4968      	ldr	r1, [pc, #416]	; (800f4d8 <__ieee754_asinf+0x274>)
 800f338:	f7f1 fc18 	bl	8000b6c <__addsf3>
 800f33c:	4621      	mov	r1, r4
 800f33e:	f7f1 fd1d 	bl	8000d7c <__aeabi_fmul>
 800f342:	4966      	ldr	r1, [pc, #408]	; (800f4dc <__ieee754_asinf+0x278>)
 800f344:	f7f1 fc10 	bl	8000b68 <__aeabi_fsub>
 800f348:	4621      	mov	r1, r4
 800f34a:	f7f1 fd17 	bl	8000d7c <__aeabi_fmul>
 800f34e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f352:	f7f1 fc0b 	bl	8000b6c <__addsf3>
 800f356:	4681      	mov	r9, r0
 800f358:	4620      	mov	r0, r4
 800f35a:	f000 fdfb 	bl	800ff54 <__ieee754_sqrtf>
 800f35e:	4b60      	ldr	r3, [pc, #384]	; (800f4e0 <__ieee754_asinf+0x27c>)
 800f360:	4606      	mov	r6, r0
 800f362:	429d      	cmp	r5, r3
 800f364:	dd63      	ble.n	800f42e <__ieee754_asinf+0x1ca>
 800f366:	4649      	mov	r1, r9
 800f368:	4640      	mov	r0, r8
 800f36a:	f7f1 fdbb 	bl	8000ee4 <__aeabi_fdiv>
 800f36e:	4631      	mov	r1, r6
 800f370:	f7f1 fd04 	bl	8000d7c <__aeabi_fmul>
 800f374:	4631      	mov	r1, r6
 800f376:	f7f1 fbf9 	bl	8000b6c <__addsf3>
 800f37a:	4601      	mov	r1, r0
 800f37c:	f7f1 fbf6 	bl	8000b6c <__addsf3>
 800f380:	4958      	ldr	r1, [pc, #352]	; (800f4e4 <__ieee754_asinf+0x280>)
 800f382:	f7f1 fbf3 	bl	8000b6c <__addsf3>
 800f386:	4601      	mov	r1, r0
 800f388:	4848      	ldr	r0, [pc, #288]	; (800f4ac <__ieee754_asinf+0x248>)
 800f38a:	f7f1 fbed 	bl	8000b68 <__aeabi_fsub>
 800f38e:	2f00      	cmp	r7, #0
 800f390:	4604      	mov	r4, r0
 800f392:	bfd8      	it	le
 800f394:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800f398:	e782      	b.n	800f2a0 <__ieee754_asinf+0x3c>
 800f39a:	4601      	mov	r1, r0
 800f39c:	f7f1 fcee 	bl	8000d7c <__aeabi_fmul>
 800f3a0:	4605      	mov	r5, r0
 800f3a2:	4945      	ldr	r1, [pc, #276]	; (800f4b8 <__ieee754_asinf+0x254>)
 800f3a4:	f7f1 fcea 	bl	8000d7c <__aeabi_fmul>
 800f3a8:	4944      	ldr	r1, [pc, #272]	; (800f4bc <__ieee754_asinf+0x258>)
 800f3aa:	f7f1 fbdf 	bl	8000b6c <__addsf3>
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	f7f1 fce4 	bl	8000d7c <__aeabi_fmul>
 800f3b4:	4942      	ldr	r1, [pc, #264]	; (800f4c0 <__ieee754_asinf+0x25c>)
 800f3b6:	f7f1 fbd7 	bl	8000b68 <__aeabi_fsub>
 800f3ba:	4629      	mov	r1, r5
 800f3bc:	f7f1 fcde 	bl	8000d7c <__aeabi_fmul>
 800f3c0:	4940      	ldr	r1, [pc, #256]	; (800f4c4 <__ieee754_asinf+0x260>)
 800f3c2:	f7f1 fbd3 	bl	8000b6c <__addsf3>
 800f3c6:	4629      	mov	r1, r5
 800f3c8:	f7f1 fcd8 	bl	8000d7c <__aeabi_fmul>
 800f3cc:	493e      	ldr	r1, [pc, #248]	; (800f4c8 <__ieee754_asinf+0x264>)
 800f3ce:	f7f1 fbcb 	bl	8000b68 <__aeabi_fsub>
 800f3d2:	4629      	mov	r1, r5
 800f3d4:	f7f1 fcd2 	bl	8000d7c <__aeabi_fmul>
 800f3d8:	493c      	ldr	r1, [pc, #240]	; (800f4cc <__ieee754_asinf+0x268>)
 800f3da:	f7f1 fbc7 	bl	8000b6c <__addsf3>
 800f3de:	4629      	mov	r1, r5
 800f3e0:	f7f1 fccc 	bl	8000d7c <__aeabi_fmul>
 800f3e4:	493a      	ldr	r1, [pc, #232]	; (800f4d0 <__ieee754_asinf+0x26c>)
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	f7f1 fcc7 	bl	8000d7c <__aeabi_fmul>
 800f3ee:	4939      	ldr	r1, [pc, #228]	; (800f4d4 <__ieee754_asinf+0x270>)
 800f3f0:	f7f1 fbba 	bl	8000b68 <__aeabi_fsub>
 800f3f4:	4629      	mov	r1, r5
 800f3f6:	f7f1 fcc1 	bl	8000d7c <__aeabi_fmul>
 800f3fa:	4937      	ldr	r1, [pc, #220]	; (800f4d8 <__ieee754_asinf+0x274>)
 800f3fc:	f7f1 fbb6 	bl	8000b6c <__addsf3>
 800f400:	4629      	mov	r1, r5
 800f402:	f7f1 fcbb 	bl	8000d7c <__aeabi_fmul>
 800f406:	4935      	ldr	r1, [pc, #212]	; (800f4dc <__ieee754_asinf+0x278>)
 800f408:	f7f1 fbae 	bl	8000b68 <__aeabi_fsub>
 800f40c:	4629      	mov	r1, r5
 800f40e:	f7f1 fcb5 	bl	8000d7c <__aeabi_fmul>
 800f412:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f416:	f7f1 fba9 	bl	8000b6c <__addsf3>
 800f41a:	4601      	mov	r1, r0
 800f41c:	4630      	mov	r0, r6
 800f41e:	f7f1 fd61 	bl	8000ee4 <__aeabi_fdiv>
 800f422:	4621      	mov	r1, r4
 800f424:	f7f1 fcaa 	bl	8000d7c <__aeabi_fmul>
 800f428:	4601      	mov	r1, r0
 800f42a:	4620      	mov	r0, r4
 800f42c:	e72d      	b.n	800f28a <__ieee754_asinf+0x26>
 800f42e:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800f432:	4649      	mov	r1, r9
 800f434:	4640      	mov	r0, r8
 800f436:	f7f1 fd55 	bl	8000ee4 <__aeabi_fdiv>
 800f43a:	4631      	mov	r1, r6
 800f43c:	4680      	mov	r8, r0
 800f43e:	4630      	mov	r0, r6
 800f440:	f7f1 fb94 	bl	8000b6c <__addsf3>
 800f444:	4601      	mov	r1, r0
 800f446:	4640      	mov	r0, r8
 800f448:	f7f1 fc98 	bl	8000d7c <__aeabi_fmul>
 800f44c:	f025 050f 	bic.w	r5, r5, #15
 800f450:	4680      	mov	r8, r0
 800f452:	4629      	mov	r1, r5
 800f454:	4628      	mov	r0, r5
 800f456:	f7f1 fc91 	bl	8000d7c <__aeabi_fmul>
 800f45a:	4601      	mov	r1, r0
 800f45c:	4620      	mov	r0, r4
 800f45e:	f7f1 fb83 	bl	8000b68 <__aeabi_fsub>
 800f462:	4631      	mov	r1, r6
 800f464:	4604      	mov	r4, r0
 800f466:	4628      	mov	r0, r5
 800f468:	f7f1 fb80 	bl	8000b6c <__addsf3>
 800f46c:	4601      	mov	r1, r0
 800f46e:	4620      	mov	r0, r4
 800f470:	f7f1 fd38 	bl	8000ee4 <__aeabi_fdiv>
 800f474:	4601      	mov	r1, r0
 800f476:	f7f1 fb79 	bl	8000b6c <__addsf3>
 800f47a:	4601      	mov	r1, r0
 800f47c:	480c      	ldr	r0, [pc, #48]	; (800f4b0 <__ieee754_asinf+0x24c>)
 800f47e:	f7f1 fb73 	bl	8000b68 <__aeabi_fsub>
 800f482:	4601      	mov	r1, r0
 800f484:	4640      	mov	r0, r8
 800f486:	f7f1 fb6f 	bl	8000b68 <__aeabi_fsub>
 800f48a:	4629      	mov	r1, r5
 800f48c:	4604      	mov	r4, r0
 800f48e:	4628      	mov	r0, r5
 800f490:	f7f1 fb6c 	bl	8000b6c <__addsf3>
 800f494:	4601      	mov	r1, r0
 800f496:	4814      	ldr	r0, [pc, #80]	; (800f4e8 <__ieee754_asinf+0x284>)
 800f498:	f7f1 fb66 	bl	8000b68 <__aeabi_fsub>
 800f49c:	4601      	mov	r1, r0
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f7f1 fb62 	bl	8000b68 <__aeabi_fsub>
 800f4a4:	4601      	mov	r1, r0
 800f4a6:	4810      	ldr	r0, [pc, #64]	; (800f4e8 <__ieee754_asinf+0x284>)
 800f4a8:	e76f      	b.n	800f38a <__ieee754_asinf+0x126>
 800f4aa:	bf00      	nop
 800f4ac:	3fc90fdb 	.word	0x3fc90fdb
 800f4b0:	b33bbd2e 	.word	0xb33bbd2e
 800f4b4:	7149f2ca 	.word	0x7149f2ca
 800f4b8:	3811ef08 	.word	0x3811ef08
 800f4bc:	3a4f7f04 	.word	0x3a4f7f04
 800f4c0:	3d241146 	.word	0x3d241146
 800f4c4:	3e4e0aa8 	.word	0x3e4e0aa8
 800f4c8:	3ea6b090 	.word	0x3ea6b090
 800f4cc:	3e2aaaab 	.word	0x3e2aaaab
 800f4d0:	3d9dc62e 	.word	0x3d9dc62e
 800f4d4:	3f303361 	.word	0x3f303361
 800f4d8:	4001572d 	.word	0x4001572d
 800f4dc:	4019d139 	.word	0x4019d139
 800f4e0:	3f799999 	.word	0x3f799999
 800f4e4:	333bbd2e 	.word	0x333bbd2e
 800f4e8:	3f490fdb 	.word	0x3f490fdb

0800f4ec <__ieee754_atan2f>:
 800f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f4f2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	dc05      	bgt.n	800f506 <__ieee754_atan2f+0x1a>
 800f4fa:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800f4fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f502:	4607      	mov	r7, r0
 800f504:	dd04      	ble.n	800f510 <__ieee754_atan2f+0x24>
 800f506:	4618      	mov	r0, r3
 800f508:	f7f1 fb30 	bl	8000b6c <__addsf3>
 800f50c:	4603      	mov	r3, r0
 800f50e:	e010      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f510:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800f514:	d103      	bne.n	800f51e <__ieee754_atan2f+0x32>
 800f516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f51a:	f001 ba0f 	b.w	801093c <atanf>
 800f51e:	178c      	asrs	r4, r1, #30
 800f520:	f004 0402 	and.w	r4, r4, #2
 800f524:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f528:	b92a      	cbnz	r2, 800f536 <__ieee754_atan2f+0x4a>
 800f52a:	2c02      	cmp	r4, #2
 800f52c:	d023      	beq.n	800f576 <__ieee754_atan2f+0x8a>
 800f52e:	2c03      	cmp	r4, #3
 800f530:	d023      	beq.n	800f57a <__ieee754_atan2f+0x8e>
 800f532:	4618      	mov	r0, r3
 800f534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f536:	b91e      	cbnz	r6, 800f540 <__ieee754_atan2f+0x54>
 800f538:	2f00      	cmp	r7, #0
 800f53a:	da53      	bge.n	800f5e4 <__ieee754_atan2f+0xf8>
 800f53c:	4b2a      	ldr	r3, [pc, #168]	; (800f5e8 <__ieee754_atan2f+0xfc>)
 800f53e:	e7f8      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f540:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f544:	d11b      	bne.n	800f57e <__ieee754_atan2f+0x92>
 800f546:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f54a:	d10b      	bne.n	800f564 <__ieee754_atan2f+0x78>
 800f54c:	2c02      	cmp	r4, #2
 800f54e:	d005      	beq.n	800f55c <__ieee754_atan2f+0x70>
 800f550:	2c03      	cmp	r4, #3
 800f552:	d005      	beq.n	800f560 <__ieee754_atan2f+0x74>
 800f554:	2c01      	cmp	r4, #1
 800f556:	d141      	bne.n	800f5dc <__ieee754_atan2f+0xf0>
 800f558:	4b24      	ldr	r3, [pc, #144]	; (800f5ec <__ieee754_atan2f+0x100>)
 800f55a:	e7ea      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f55c:	4b24      	ldr	r3, [pc, #144]	; (800f5f0 <__ieee754_atan2f+0x104>)
 800f55e:	e7e8      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f560:	4b24      	ldr	r3, [pc, #144]	; (800f5f4 <__ieee754_atan2f+0x108>)
 800f562:	e7e6      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f564:	2c02      	cmp	r4, #2
 800f566:	d006      	beq.n	800f576 <__ieee754_atan2f+0x8a>
 800f568:	2c03      	cmp	r4, #3
 800f56a:	d006      	beq.n	800f57a <__ieee754_atan2f+0x8e>
 800f56c:	2c01      	cmp	r4, #1
 800f56e:	d137      	bne.n	800f5e0 <__ieee754_atan2f+0xf4>
 800f570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f574:	e7dd      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f576:	4b20      	ldr	r3, [pc, #128]	; (800f5f8 <__ieee754_atan2f+0x10c>)
 800f578:	e7db      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f57a:	4b20      	ldr	r3, [pc, #128]	; (800f5fc <__ieee754_atan2f+0x110>)
 800f57c:	e7d9      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f57e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f582:	d0d9      	beq.n	800f538 <__ieee754_atan2f+0x4c>
 800f584:	1b92      	subs	r2, r2, r6
 800f586:	15d2      	asrs	r2, r2, #23
 800f588:	2a3c      	cmp	r2, #60	; 0x3c
 800f58a:	dc17      	bgt.n	800f5bc <__ieee754_atan2f+0xd0>
 800f58c:	2900      	cmp	r1, #0
 800f58e:	da01      	bge.n	800f594 <__ieee754_atan2f+0xa8>
 800f590:	323c      	adds	r2, #60	; 0x3c
 800f592:	db15      	blt.n	800f5c0 <__ieee754_atan2f+0xd4>
 800f594:	4618      	mov	r0, r3
 800f596:	f7f1 fca5 	bl	8000ee4 <__aeabi_fdiv>
 800f59a:	f001 fadf 	bl	8010b5c <fabsf>
 800f59e:	f001 f9cd 	bl	801093c <atanf>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2c01      	cmp	r4, #1
 800f5a6:	d00d      	beq.n	800f5c4 <__ieee754_atan2f+0xd8>
 800f5a8:	2c02      	cmp	r4, #2
 800f5aa:	d00e      	beq.n	800f5ca <__ieee754_atan2f+0xde>
 800f5ac:	2c00      	cmp	r4, #0
 800f5ae:	d0c0      	beq.n	800f532 <__ieee754_atan2f+0x46>
 800f5b0:	4913      	ldr	r1, [pc, #76]	; (800f600 <__ieee754_atan2f+0x114>)
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7f1 fada 	bl	8000b6c <__addsf3>
 800f5b8:	490f      	ldr	r1, [pc, #60]	; (800f5f8 <__ieee754_atan2f+0x10c>)
 800f5ba:	e00c      	b.n	800f5d6 <__ieee754_atan2f+0xea>
 800f5bc:	4b11      	ldr	r3, [pc, #68]	; (800f604 <__ieee754_atan2f+0x118>)
 800f5be:	e7f1      	b.n	800f5a4 <__ieee754_atan2f+0xb8>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	e7ef      	b.n	800f5a4 <__ieee754_atan2f+0xb8>
 800f5c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f5c8:	e7b3      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f5ca:	490d      	ldr	r1, [pc, #52]	; (800f600 <__ieee754_atan2f+0x114>)
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7f1 facd 	bl	8000b6c <__addsf3>
 800f5d2:	4601      	mov	r1, r0
 800f5d4:	4808      	ldr	r0, [pc, #32]	; (800f5f8 <__ieee754_atan2f+0x10c>)
 800f5d6:	f7f1 fac7 	bl	8000b68 <__aeabi_fsub>
 800f5da:	e797      	b.n	800f50c <__ieee754_atan2f+0x20>
 800f5dc:	4b0a      	ldr	r3, [pc, #40]	; (800f608 <__ieee754_atan2f+0x11c>)
 800f5de:	e7a8      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	e7a6      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f5e4:	4b07      	ldr	r3, [pc, #28]	; (800f604 <__ieee754_atan2f+0x118>)
 800f5e6:	e7a4      	b.n	800f532 <__ieee754_atan2f+0x46>
 800f5e8:	bfc90fdb 	.word	0xbfc90fdb
 800f5ec:	bf490fdb 	.word	0xbf490fdb
 800f5f0:	4016cbe4 	.word	0x4016cbe4
 800f5f4:	c016cbe4 	.word	0xc016cbe4
 800f5f8:	40490fdb 	.word	0x40490fdb
 800f5fc:	c0490fdb 	.word	0xc0490fdb
 800f600:	33bbbd2e 	.word	0x33bbbd2e
 800f604:	3fc90fdb 	.word	0x3fc90fdb
 800f608:	3f490fdb 	.word	0x3f490fdb

0800f60c <__ieee754_powf>:
 800f60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f610:	b087      	sub	sp, #28
 800f612:	9101      	str	r1, [sp, #4]
 800f614:	9c01      	ldr	r4, [sp, #4]
 800f616:	4681      	mov	r9, r0
 800f618:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 800f61c:	f000 8325 	beq.w	800fc6a <__ieee754_powf+0x65e>
 800f620:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800f624:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f628:	4680      	mov	r8, r0
 800f62a:	dc06      	bgt.n	800f63a <__ieee754_powf+0x2e>
 800f62c:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f630:	dd09      	ble.n	800f646 <__ieee754_powf+0x3a>
 800f632:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800f636:	f000 8318 	beq.w	800fc6a <__ieee754_powf+0x65e>
 800f63a:	4885      	ldr	r0, [pc, #532]	; (800f850 <__ieee754_powf+0x244>)
 800f63c:	b007      	add	sp, #28
 800f63e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f642:	f7fe b97b 	b.w	800d93c <nanf>
 800f646:	2800      	cmp	r0, #0
 800f648:	da1d      	bge.n	800f686 <__ieee754_powf+0x7a>
 800f64a:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800f64e:	da2b      	bge.n	800f6a8 <__ieee754_powf+0x9c>
 800f650:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f654:	db30      	blt.n	800f6b8 <__ieee754_powf+0xac>
 800f656:	15fb      	asrs	r3, r7, #23
 800f658:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f65c:	fa47 f503 	asr.w	r5, r7, r3
 800f660:	fa05 f303 	lsl.w	r3, r5, r3
 800f664:	429f      	cmp	r7, r3
 800f666:	d127      	bne.n	800f6b8 <__ieee754_powf+0xac>
 800f668:	f005 0501 	and.w	r5, r5, #1
 800f66c:	f1c5 0502 	rsb	r5, r5, #2
 800f670:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f674:	d122      	bne.n	800f6bc <__ieee754_powf+0xb0>
 800f676:	2c00      	cmp	r4, #0
 800f678:	4649      	mov	r1, r9
 800f67a:	da11      	bge.n	800f6a0 <__ieee754_powf+0x94>
 800f67c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f680:	f7f1 fc30 	bl	8000ee4 <__aeabi_fdiv>
 800f684:	e021      	b.n	800f6ca <__ieee754_powf+0xbe>
 800f686:	2500      	movs	r5, #0
 800f688:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f68c:	d1f0      	bne.n	800f670 <__ieee754_powf+0x64>
 800f68e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800f692:	f000 82ea 	beq.w	800fc6a <__ieee754_powf+0x65e>
 800f696:	dd09      	ble.n	800f6ac <__ieee754_powf+0xa0>
 800f698:	2c00      	cmp	r4, #0
 800f69a:	f280 82e9 	bge.w	800fc70 <__ieee754_powf+0x664>
 800f69e:	2100      	movs	r1, #0
 800f6a0:	4608      	mov	r0, r1
 800f6a2:	b007      	add	sp, #28
 800f6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6a8:	2502      	movs	r5, #2
 800f6aa:	e7ed      	b.n	800f688 <__ieee754_powf+0x7c>
 800f6ac:	2c00      	cmp	r4, #0
 800f6ae:	daf6      	bge.n	800f69e <__ieee754_powf+0x92>
 800f6b0:	9b01      	ldr	r3, [sp, #4]
 800f6b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f6b6:	e7f3      	b.n	800f6a0 <__ieee754_powf+0x94>
 800f6b8:	2500      	movs	r5, #0
 800f6ba:	e7d9      	b.n	800f670 <__ieee754_powf+0x64>
 800f6bc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f6c0:	d105      	bne.n	800f6ce <__ieee754_powf+0xc2>
 800f6c2:	4649      	mov	r1, r9
 800f6c4:	4608      	mov	r0, r1
 800f6c6:	f7f1 fb59 	bl	8000d7c <__aeabi_fmul>
 800f6ca:	4601      	mov	r1, r0
 800f6cc:	e7e8      	b.n	800f6a0 <__ieee754_powf+0x94>
 800f6ce:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f6d2:	4648      	mov	r0, r9
 800f6d4:	d107      	bne.n	800f6e6 <__ieee754_powf+0xda>
 800f6d6:	f1b8 0f00 	cmp.w	r8, #0
 800f6da:	db04      	blt.n	800f6e6 <__ieee754_powf+0xda>
 800f6dc:	b007      	add	sp, #28
 800f6de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e2:	f000 bc37 	b.w	800ff54 <__ieee754_sqrtf>
 800f6e6:	f001 fa39 	bl	8010b5c <fabsf>
 800f6ea:	4601      	mov	r1, r0
 800f6ec:	b126      	cbz	r6, 800f6f8 <__ieee754_powf+0xec>
 800f6ee:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800f6f2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f6f6:	d118      	bne.n	800f72a <__ieee754_powf+0x11e>
 800f6f8:	2c00      	cmp	r4, #0
 800f6fa:	da04      	bge.n	800f706 <__ieee754_powf+0xfa>
 800f6fc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f700:	f7f1 fbf0 	bl	8000ee4 <__aeabi_fdiv>
 800f704:	4601      	mov	r1, r0
 800f706:	f1b8 0f00 	cmp.w	r8, #0
 800f70a:	dac9      	bge.n	800f6a0 <__ieee754_powf+0x94>
 800f70c:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 800f710:	ea50 0305 	orrs.w	r3, r0, r5
 800f714:	d104      	bne.n	800f720 <__ieee754_powf+0x114>
 800f716:	4608      	mov	r0, r1
 800f718:	f7f1 fa26 	bl	8000b68 <__aeabi_fsub>
 800f71c:	4601      	mov	r1, r0
 800f71e:	e7af      	b.n	800f680 <__ieee754_powf+0x74>
 800f720:	2d01      	cmp	r5, #1
 800f722:	d1bd      	bne.n	800f6a0 <__ieee754_powf+0x94>
 800f724:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800f728:	e7ba      	b.n	800f6a0 <__ieee754_powf+0x94>
 800f72a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800f72e:	f108 33ff 	add.w	r3, r8, #4294967295
 800f732:	9303      	str	r3, [sp, #12]
 800f734:	432b      	orrs	r3, r5
 800f736:	d101      	bne.n	800f73c <__ieee754_powf+0x130>
 800f738:	4649      	mov	r1, r9
 800f73a:	e7ec      	b.n	800f716 <__ieee754_powf+0x10a>
 800f73c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800f740:	f340 8098 	ble.w	800f874 <__ieee754_powf+0x268>
 800f744:	4b43      	ldr	r3, [pc, #268]	; (800f854 <__ieee754_powf+0x248>)
 800f746:	429e      	cmp	r6, r3
 800f748:	dc03      	bgt.n	800f752 <__ieee754_powf+0x146>
 800f74a:	2c00      	cmp	r4, #0
 800f74c:	daa7      	bge.n	800f69e <__ieee754_powf+0x92>
 800f74e:	4942      	ldr	r1, [pc, #264]	; (800f858 <__ieee754_powf+0x24c>)
 800f750:	e7b8      	b.n	800f6c4 <__ieee754_powf+0xb8>
 800f752:	4b42      	ldr	r3, [pc, #264]	; (800f85c <__ieee754_powf+0x250>)
 800f754:	429e      	cmp	r6, r3
 800f756:	dd02      	ble.n	800f75e <__ieee754_powf+0x152>
 800f758:	2c00      	cmp	r4, #0
 800f75a:	dcf8      	bgt.n	800f74e <__ieee754_powf+0x142>
 800f75c:	e79f      	b.n	800f69e <__ieee754_powf+0x92>
 800f75e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f762:	f7f1 fa01 	bl	8000b68 <__aeabi_fsub>
 800f766:	493e      	ldr	r1, [pc, #248]	; (800f860 <__ieee754_powf+0x254>)
 800f768:	4606      	mov	r6, r0
 800f76a:	f7f1 fb07 	bl	8000d7c <__aeabi_fmul>
 800f76e:	493d      	ldr	r1, [pc, #244]	; (800f864 <__ieee754_powf+0x258>)
 800f770:	4607      	mov	r7, r0
 800f772:	4630      	mov	r0, r6
 800f774:	f7f1 fb02 	bl	8000d7c <__aeabi_fmul>
 800f778:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800f77c:	4680      	mov	r8, r0
 800f77e:	4630      	mov	r0, r6
 800f780:	f7f1 fafc 	bl	8000d7c <__aeabi_fmul>
 800f784:	4601      	mov	r1, r0
 800f786:	4838      	ldr	r0, [pc, #224]	; (800f868 <__ieee754_powf+0x25c>)
 800f788:	f7f1 f9ee 	bl	8000b68 <__aeabi_fsub>
 800f78c:	4631      	mov	r1, r6
 800f78e:	f7f1 faf5 	bl	8000d7c <__aeabi_fmul>
 800f792:	4601      	mov	r1, r0
 800f794:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800f798:	f7f1 f9e6 	bl	8000b68 <__aeabi_fsub>
 800f79c:	4631      	mov	r1, r6
 800f79e:	4681      	mov	r9, r0
 800f7a0:	4630      	mov	r0, r6
 800f7a2:	f7f1 faeb 	bl	8000d7c <__aeabi_fmul>
 800f7a6:	4601      	mov	r1, r0
 800f7a8:	4648      	mov	r0, r9
 800f7aa:	f7f1 fae7 	bl	8000d7c <__aeabi_fmul>
 800f7ae:	492f      	ldr	r1, [pc, #188]	; (800f86c <__ieee754_powf+0x260>)
 800f7b0:	f7f1 fae4 	bl	8000d7c <__aeabi_fmul>
 800f7b4:	4601      	mov	r1, r0
 800f7b6:	4640      	mov	r0, r8
 800f7b8:	f7f1 f9d6 	bl	8000b68 <__aeabi_fsub>
 800f7bc:	4601      	mov	r1, r0
 800f7be:	4606      	mov	r6, r0
 800f7c0:	4638      	mov	r0, r7
 800f7c2:	f7f1 f9d3 	bl	8000b6c <__addsf3>
 800f7c6:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800f7ca:	f02a 0a0f 	bic.w	sl, sl, #15
 800f7ce:	4639      	mov	r1, r7
 800f7d0:	4650      	mov	r0, sl
 800f7d2:	f7f1 f9c9 	bl	8000b68 <__aeabi_fsub>
 800f7d6:	4601      	mov	r1, r0
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f7f1 f9c5 	bl	8000b68 <__aeabi_fsub>
 800f7de:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800f7e2:	9b03      	ldr	r3, [sp, #12]
 800f7e4:	3d01      	subs	r5, #1
 800f7e6:	f024 040f 	bic.w	r4, r4, #15
 800f7ea:	432b      	orrs	r3, r5
 800f7ec:	4606      	mov	r6, r0
 800f7ee:	4621      	mov	r1, r4
 800f7f0:	9801      	ldr	r0, [sp, #4]
 800f7f2:	bf0c      	ite	eq
 800f7f4:	4d1e      	ldreq	r5, [pc, #120]	; (800f870 <__ieee754_powf+0x264>)
 800f7f6:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 800f7fa:	f7f1 f9b5 	bl	8000b68 <__aeabi_fsub>
 800f7fe:	4651      	mov	r1, sl
 800f800:	f7f1 fabc 	bl	8000d7c <__aeabi_fmul>
 800f804:	9901      	ldr	r1, [sp, #4]
 800f806:	4607      	mov	r7, r0
 800f808:	4630      	mov	r0, r6
 800f80a:	f7f1 fab7 	bl	8000d7c <__aeabi_fmul>
 800f80e:	4601      	mov	r1, r0
 800f810:	4638      	mov	r0, r7
 800f812:	f7f1 f9ab 	bl	8000b6c <__addsf3>
 800f816:	4621      	mov	r1, r4
 800f818:	4606      	mov	r6, r0
 800f81a:	4650      	mov	r0, sl
 800f81c:	f7f1 faae 	bl	8000d7c <__aeabi_fmul>
 800f820:	4601      	mov	r1, r0
 800f822:	4607      	mov	r7, r0
 800f824:	4681      	mov	r9, r0
 800f826:	4630      	mov	r0, r6
 800f828:	f7f1 f9a0 	bl	8000b6c <__addsf3>
 800f82c:	2800      	cmp	r0, #0
 800f82e:	4682      	mov	sl, r0
 800f830:	4680      	mov	r8, r0
 800f832:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800f836:	f340 81fb 	ble.w	800fc30 <__ieee754_powf+0x624>
 800f83a:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800f83e:	f340 8149 	ble.w	800fad4 <__ieee754_powf+0x4c8>
 800f842:	4905      	ldr	r1, [pc, #20]	; (800f858 <__ieee754_powf+0x24c>)
 800f844:	4628      	mov	r0, r5
 800f846:	f7f1 fa99 	bl	8000d7c <__aeabi_fmul>
 800f84a:	4903      	ldr	r1, [pc, #12]	; (800f858 <__ieee754_powf+0x24c>)
 800f84c:	e73b      	b.n	800f6c6 <__ieee754_powf+0xba>
 800f84e:	bf00      	nop
 800f850:	080111f7 	.word	0x080111f7
 800f854:	3f7ffff7 	.word	0x3f7ffff7
 800f858:	7149f2ca 	.word	0x7149f2ca
 800f85c:	3f800007 	.word	0x3f800007
 800f860:	3fb8aa00 	.word	0x3fb8aa00
 800f864:	36eca570 	.word	0x36eca570
 800f868:	3eaaaaab 	.word	0x3eaaaaab
 800f86c:	3fb8aa3b 	.word	0x3fb8aa3b
 800f870:	bf800000 	.word	0xbf800000
 800f874:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 800f878:	f280 810a 	bge.w	800fa90 <__ieee754_powf+0x484>
 800f87c:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 800f880:	f7f1 fa7c 	bl	8000d7c <__aeabi_fmul>
 800f884:	f06f 0217 	mvn.w	r2, #23
 800f888:	4606      	mov	r6, r0
 800f88a:	15f3      	asrs	r3, r6, #23
 800f88c:	3b7f      	subs	r3, #127	; 0x7f
 800f88e:	441a      	add	r2, r3
 800f890:	4b81      	ldr	r3, [pc, #516]	; (800fa98 <__ieee754_powf+0x48c>)
 800f892:	f3c6 0016 	ubfx	r0, r6, #0, #23
 800f896:	4298      	cmp	r0, r3
 800f898:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 800f89c:	dd06      	ble.n	800f8ac <__ieee754_powf+0x2a0>
 800f89e:	4b7f      	ldr	r3, [pc, #508]	; (800fa9c <__ieee754_powf+0x490>)
 800f8a0:	4298      	cmp	r0, r3
 800f8a2:	f340 80f7 	ble.w	800fa94 <__ieee754_powf+0x488>
 800f8a6:	3201      	adds	r2, #1
 800f8a8:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 800f8ac:	2700      	movs	r7, #0
 800f8ae:	4b7c      	ldr	r3, [pc, #496]	; (800faa0 <__ieee754_powf+0x494>)
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800f8b6:	9205      	str	r2, [sp, #20]
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	9302      	str	r3, [sp, #8]
 800f8bc:	f7f1 f954 	bl	8000b68 <__aeabi_fsub>
 800f8c0:	9902      	ldr	r1, [sp, #8]
 800f8c2:	4683      	mov	fp, r0
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	f7f1 f951 	bl	8000b6c <__addsf3>
 800f8ca:	4601      	mov	r1, r0
 800f8cc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f8d0:	f7f1 fb08 	bl	8000ee4 <__aeabi_fdiv>
 800f8d4:	4601      	mov	r1, r0
 800f8d6:	9004      	str	r0, [sp, #16]
 800f8d8:	4658      	mov	r0, fp
 800f8da:	f7f1 fa4f 	bl	8000d7c <__aeabi_fmul>
 800f8de:	46b2      	mov	sl, r6
 800f8e0:	1076      	asrs	r6, r6, #1
 800f8e2:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800f8e6:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800f8ea:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 800f8ee:	f028 080f 	bic.w	r8, r8, #15
 800f8f2:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 800f8f6:	4681      	mov	r9, r0
 800f8f8:	4631      	mov	r1, r6
 800f8fa:	4640      	mov	r0, r8
 800f8fc:	f7f1 fa3e 	bl	8000d7c <__aeabi_fmul>
 800f900:	4601      	mov	r1, r0
 800f902:	4658      	mov	r0, fp
 800f904:	f7f1 f930 	bl	8000b68 <__aeabi_fsub>
 800f908:	9902      	ldr	r1, [sp, #8]
 800f90a:	4683      	mov	fp, r0
 800f90c:	4630      	mov	r0, r6
 800f90e:	f7f1 f92b 	bl	8000b68 <__aeabi_fsub>
 800f912:	4601      	mov	r1, r0
 800f914:	4650      	mov	r0, sl
 800f916:	f7f1 f927 	bl	8000b68 <__aeabi_fsub>
 800f91a:	4641      	mov	r1, r8
 800f91c:	f7f1 fa2e 	bl	8000d7c <__aeabi_fmul>
 800f920:	4601      	mov	r1, r0
 800f922:	4658      	mov	r0, fp
 800f924:	f7f1 f920 	bl	8000b68 <__aeabi_fsub>
 800f928:	9b04      	ldr	r3, [sp, #16]
 800f92a:	4619      	mov	r1, r3
 800f92c:	f7f1 fa26 	bl	8000d7c <__aeabi_fmul>
 800f930:	4649      	mov	r1, r9
 800f932:	4683      	mov	fp, r0
 800f934:	4648      	mov	r0, r9
 800f936:	f7f1 fa21 	bl	8000d7c <__aeabi_fmul>
 800f93a:	4606      	mov	r6, r0
 800f93c:	4959      	ldr	r1, [pc, #356]	; (800faa4 <__ieee754_powf+0x498>)
 800f93e:	f7f1 fa1d 	bl	8000d7c <__aeabi_fmul>
 800f942:	4959      	ldr	r1, [pc, #356]	; (800faa8 <__ieee754_powf+0x49c>)
 800f944:	f7f1 f912 	bl	8000b6c <__addsf3>
 800f948:	4631      	mov	r1, r6
 800f94a:	f7f1 fa17 	bl	8000d7c <__aeabi_fmul>
 800f94e:	4957      	ldr	r1, [pc, #348]	; (800faac <__ieee754_powf+0x4a0>)
 800f950:	f7f1 f90c 	bl	8000b6c <__addsf3>
 800f954:	4631      	mov	r1, r6
 800f956:	f7f1 fa11 	bl	8000d7c <__aeabi_fmul>
 800f95a:	4955      	ldr	r1, [pc, #340]	; (800fab0 <__ieee754_powf+0x4a4>)
 800f95c:	f7f1 f906 	bl	8000b6c <__addsf3>
 800f960:	4631      	mov	r1, r6
 800f962:	f7f1 fa0b 	bl	8000d7c <__aeabi_fmul>
 800f966:	4953      	ldr	r1, [pc, #332]	; (800fab4 <__ieee754_powf+0x4a8>)
 800f968:	f7f1 f900 	bl	8000b6c <__addsf3>
 800f96c:	4631      	mov	r1, r6
 800f96e:	f7f1 fa05 	bl	8000d7c <__aeabi_fmul>
 800f972:	4951      	ldr	r1, [pc, #324]	; (800fab8 <__ieee754_powf+0x4ac>)
 800f974:	f7f1 f8fa 	bl	8000b6c <__addsf3>
 800f978:	4631      	mov	r1, r6
 800f97a:	4682      	mov	sl, r0
 800f97c:	4630      	mov	r0, r6
 800f97e:	f7f1 f9fd 	bl	8000d7c <__aeabi_fmul>
 800f982:	4601      	mov	r1, r0
 800f984:	4650      	mov	r0, sl
 800f986:	f7f1 f9f9 	bl	8000d7c <__aeabi_fmul>
 800f98a:	4606      	mov	r6, r0
 800f98c:	4649      	mov	r1, r9
 800f98e:	4640      	mov	r0, r8
 800f990:	f7f1 f8ec 	bl	8000b6c <__addsf3>
 800f994:	4659      	mov	r1, fp
 800f996:	f7f1 f9f1 	bl	8000d7c <__aeabi_fmul>
 800f99a:	4631      	mov	r1, r6
 800f99c:	f7f1 f8e6 	bl	8000b6c <__addsf3>
 800f9a0:	4641      	mov	r1, r8
 800f9a2:	4682      	mov	sl, r0
 800f9a4:	4640      	mov	r0, r8
 800f9a6:	f7f1 f9e9 	bl	8000d7c <__aeabi_fmul>
 800f9aa:	4944      	ldr	r1, [pc, #272]	; (800fabc <__ieee754_powf+0x4b0>)
 800f9ac:	9002      	str	r0, [sp, #8]
 800f9ae:	f7f1 f8dd 	bl	8000b6c <__addsf3>
 800f9b2:	4651      	mov	r1, sl
 800f9b4:	f7f1 f8da 	bl	8000b6c <__addsf3>
 800f9b8:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 800f9bc:	f026 060f 	bic.w	r6, r6, #15
 800f9c0:	4631      	mov	r1, r6
 800f9c2:	4640      	mov	r0, r8
 800f9c4:	f7f1 f9da 	bl	8000d7c <__aeabi_fmul>
 800f9c8:	493c      	ldr	r1, [pc, #240]	; (800fabc <__ieee754_powf+0x4b0>)
 800f9ca:	4680      	mov	r8, r0
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	f7f1 f8cb 	bl	8000b68 <__aeabi_fsub>
 800f9d2:	9b02      	ldr	r3, [sp, #8]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	f7f1 f8c7 	bl	8000b68 <__aeabi_fsub>
 800f9da:	4601      	mov	r1, r0
 800f9dc:	4650      	mov	r0, sl
 800f9de:	f7f1 f8c3 	bl	8000b68 <__aeabi_fsub>
 800f9e2:	4649      	mov	r1, r9
 800f9e4:	f7f1 f9ca 	bl	8000d7c <__aeabi_fmul>
 800f9e8:	4659      	mov	r1, fp
 800f9ea:	4681      	mov	r9, r0
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	f7f1 f9c5 	bl	8000d7c <__aeabi_fmul>
 800f9f2:	4601      	mov	r1, r0
 800f9f4:	4648      	mov	r0, r9
 800f9f6:	f7f1 f8b9 	bl	8000b6c <__addsf3>
 800f9fa:	4682      	mov	sl, r0
 800f9fc:	4601      	mov	r1, r0
 800f9fe:	4640      	mov	r0, r8
 800fa00:	f7f1 f8b4 	bl	8000b6c <__addsf3>
 800fa04:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800fa08:	f029 090f 	bic.w	r9, r9, #15
 800fa0c:	492c      	ldr	r1, [pc, #176]	; (800fac0 <__ieee754_powf+0x4b4>)
 800fa0e:	4648      	mov	r0, r9
 800fa10:	f7f1 f9b4 	bl	8000d7c <__aeabi_fmul>
 800fa14:	4641      	mov	r1, r8
 800fa16:	4606      	mov	r6, r0
 800fa18:	4648      	mov	r0, r9
 800fa1a:	f7f1 f8a5 	bl	8000b68 <__aeabi_fsub>
 800fa1e:	4601      	mov	r1, r0
 800fa20:	4650      	mov	r0, sl
 800fa22:	f7f1 f8a1 	bl	8000b68 <__aeabi_fsub>
 800fa26:	4927      	ldr	r1, [pc, #156]	; (800fac4 <__ieee754_powf+0x4b8>)
 800fa28:	f7f1 f9a8 	bl	8000d7c <__aeabi_fmul>
 800fa2c:	4926      	ldr	r1, [pc, #152]	; (800fac8 <__ieee754_powf+0x4bc>)
 800fa2e:	4680      	mov	r8, r0
 800fa30:	4648      	mov	r0, r9
 800fa32:	f7f1 f9a3 	bl	8000d7c <__aeabi_fmul>
 800fa36:	4601      	mov	r1, r0
 800fa38:	4640      	mov	r0, r8
 800fa3a:	f7f1 f897 	bl	8000b6c <__addsf3>
 800fa3e:	4b23      	ldr	r3, [pc, #140]	; (800facc <__ieee754_powf+0x4c0>)
 800fa40:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800fa44:	f7f1 f892 	bl	8000b6c <__addsf3>
 800fa48:	9a05      	ldr	r2, [sp, #20]
 800fa4a:	4680      	mov	r8, r0
 800fa4c:	4610      	mov	r0, r2
 800fa4e:	f7f1 f941 	bl	8000cd4 <__aeabi_i2f>
 800fa52:	4681      	mov	r9, r0
 800fa54:	4b1e      	ldr	r3, [pc, #120]	; (800fad0 <__ieee754_powf+0x4c4>)
 800fa56:	4641      	mov	r1, r8
 800fa58:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	f7f1 f885 	bl	8000b6c <__addsf3>
 800fa62:	4639      	mov	r1, r7
 800fa64:	f7f1 f882 	bl	8000b6c <__addsf3>
 800fa68:	4649      	mov	r1, r9
 800fa6a:	f7f1 f87f 	bl	8000b6c <__addsf3>
 800fa6e:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800fa72:	f02a 0a0f 	bic.w	sl, sl, #15
 800fa76:	4649      	mov	r1, r9
 800fa78:	4650      	mov	r0, sl
 800fa7a:	f7f1 f875 	bl	8000b68 <__aeabi_fsub>
 800fa7e:	4639      	mov	r1, r7
 800fa80:	f7f1 f872 	bl	8000b68 <__aeabi_fsub>
 800fa84:	4631      	mov	r1, r6
 800fa86:	f7f1 f86f 	bl	8000b68 <__aeabi_fsub>
 800fa8a:	4601      	mov	r1, r0
 800fa8c:	4640      	mov	r0, r8
 800fa8e:	e6a4      	b.n	800f7da <__ieee754_powf+0x1ce>
 800fa90:	2200      	movs	r2, #0
 800fa92:	e6fa      	b.n	800f88a <__ieee754_powf+0x27e>
 800fa94:	2701      	movs	r7, #1
 800fa96:	e70a      	b.n	800f8ae <__ieee754_powf+0x2a2>
 800fa98:	001cc471 	.word	0x001cc471
 800fa9c:	005db3d6 	.word	0x005db3d6
 800faa0:	08011888 	.word	0x08011888
 800faa4:	3e53f142 	.word	0x3e53f142
 800faa8:	3e6c3255 	.word	0x3e6c3255
 800faac:	3e8ba305 	.word	0x3e8ba305
 800fab0:	3eaaaaab 	.word	0x3eaaaaab
 800fab4:	3edb6db7 	.word	0x3edb6db7
 800fab8:	3f19999a 	.word	0x3f19999a
 800fabc:	40400000 	.word	0x40400000
 800fac0:	3f763800 	.word	0x3f763800
 800fac4:	3f76384f 	.word	0x3f76384f
 800fac8:	369dc3a0 	.word	0x369dc3a0
 800facc:	08011898 	.word	0x08011898
 800fad0:	08011890 	.word	0x08011890
 800fad4:	f040 80c1 	bne.w	800fc5a <__ieee754_powf+0x64e>
 800fad8:	4966      	ldr	r1, [pc, #408]	; (800fc74 <__ieee754_powf+0x668>)
 800fada:	4630      	mov	r0, r6
 800fadc:	f7f1 f846 	bl	8000b6c <__addsf3>
 800fae0:	4639      	mov	r1, r7
 800fae2:	4681      	mov	r9, r0
 800fae4:	4650      	mov	r0, sl
 800fae6:	f7f1 f83f 	bl	8000b68 <__aeabi_fsub>
 800faea:	4601      	mov	r1, r0
 800faec:	4648      	mov	r0, r9
 800faee:	f7f1 fb01 	bl	80010f4 <__aeabi_fcmpgt>
 800faf2:	2800      	cmp	r0, #0
 800faf4:	f47f aea5 	bne.w	800f842 <__ieee754_powf+0x236>
 800faf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fafc:	15e4      	asrs	r4, r4, #23
 800fafe:	3c7e      	subs	r4, #126	; 0x7e
 800fb00:	4123      	asrs	r3, r4
 800fb02:	4443      	add	r3, r8
 800fb04:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fb08:	495b      	ldr	r1, [pc, #364]	; (800fc78 <__ieee754_powf+0x66c>)
 800fb0a:	3a7f      	subs	r2, #127	; 0x7f
 800fb0c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800fb10:	4111      	asrs	r1, r2
 800fb12:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800fb16:	f1c2 0217 	rsb	r2, r2, #23
 800fb1a:	4114      	asrs	r4, r2
 800fb1c:	f1b8 0f00 	cmp.w	r8, #0
 800fb20:	ea23 0101 	bic.w	r1, r3, r1
 800fb24:	4638      	mov	r0, r7
 800fb26:	bfb8      	it	lt
 800fb28:	4264      	neglt	r4, r4
 800fb2a:	f7f1 f81d 	bl	8000b68 <__aeabi_fsub>
 800fb2e:	4681      	mov	r9, r0
 800fb30:	4631      	mov	r1, r6
 800fb32:	4648      	mov	r0, r9
 800fb34:	f7f1 f81a 	bl	8000b6c <__addsf3>
 800fb38:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800fb3c:	f027 070f 	bic.w	r7, r7, #15
 800fb40:	494e      	ldr	r1, [pc, #312]	; (800fc7c <__ieee754_powf+0x670>)
 800fb42:	4638      	mov	r0, r7
 800fb44:	f7f1 f91a 	bl	8000d7c <__aeabi_fmul>
 800fb48:	4649      	mov	r1, r9
 800fb4a:	4680      	mov	r8, r0
 800fb4c:	4638      	mov	r0, r7
 800fb4e:	f7f1 f80b 	bl	8000b68 <__aeabi_fsub>
 800fb52:	4601      	mov	r1, r0
 800fb54:	4630      	mov	r0, r6
 800fb56:	f7f1 f807 	bl	8000b68 <__aeabi_fsub>
 800fb5a:	4949      	ldr	r1, [pc, #292]	; (800fc80 <__ieee754_powf+0x674>)
 800fb5c:	f7f1 f90e 	bl	8000d7c <__aeabi_fmul>
 800fb60:	4948      	ldr	r1, [pc, #288]	; (800fc84 <__ieee754_powf+0x678>)
 800fb62:	4606      	mov	r6, r0
 800fb64:	4638      	mov	r0, r7
 800fb66:	f7f1 f909 	bl	8000d7c <__aeabi_fmul>
 800fb6a:	4601      	mov	r1, r0
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	f7f0 fffd 	bl	8000b6c <__addsf3>
 800fb72:	4607      	mov	r7, r0
 800fb74:	4601      	mov	r1, r0
 800fb76:	4640      	mov	r0, r8
 800fb78:	f7f0 fff8 	bl	8000b6c <__addsf3>
 800fb7c:	4641      	mov	r1, r8
 800fb7e:	4606      	mov	r6, r0
 800fb80:	f7f0 fff2 	bl	8000b68 <__aeabi_fsub>
 800fb84:	4601      	mov	r1, r0
 800fb86:	4638      	mov	r0, r7
 800fb88:	f7f0 ffee 	bl	8000b68 <__aeabi_fsub>
 800fb8c:	4631      	mov	r1, r6
 800fb8e:	4680      	mov	r8, r0
 800fb90:	4630      	mov	r0, r6
 800fb92:	f7f1 f8f3 	bl	8000d7c <__aeabi_fmul>
 800fb96:	4607      	mov	r7, r0
 800fb98:	493b      	ldr	r1, [pc, #236]	; (800fc88 <__ieee754_powf+0x67c>)
 800fb9a:	f7f1 f8ef 	bl	8000d7c <__aeabi_fmul>
 800fb9e:	493b      	ldr	r1, [pc, #236]	; (800fc8c <__ieee754_powf+0x680>)
 800fba0:	f7f0 ffe2 	bl	8000b68 <__aeabi_fsub>
 800fba4:	4639      	mov	r1, r7
 800fba6:	f7f1 f8e9 	bl	8000d7c <__aeabi_fmul>
 800fbaa:	4939      	ldr	r1, [pc, #228]	; (800fc90 <__ieee754_powf+0x684>)
 800fbac:	f7f0 ffde 	bl	8000b6c <__addsf3>
 800fbb0:	4639      	mov	r1, r7
 800fbb2:	f7f1 f8e3 	bl	8000d7c <__aeabi_fmul>
 800fbb6:	4937      	ldr	r1, [pc, #220]	; (800fc94 <__ieee754_powf+0x688>)
 800fbb8:	f7f0 ffd6 	bl	8000b68 <__aeabi_fsub>
 800fbbc:	4639      	mov	r1, r7
 800fbbe:	f7f1 f8dd 	bl	8000d7c <__aeabi_fmul>
 800fbc2:	4935      	ldr	r1, [pc, #212]	; (800fc98 <__ieee754_powf+0x68c>)
 800fbc4:	f7f0 ffd2 	bl	8000b6c <__addsf3>
 800fbc8:	4639      	mov	r1, r7
 800fbca:	f7f1 f8d7 	bl	8000d7c <__aeabi_fmul>
 800fbce:	4601      	mov	r1, r0
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	f7f0 ffc9 	bl	8000b68 <__aeabi_fsub>
 800fbd6:	4607      	mov	r7, r0
 800fbd8:	4601      	mov	r1, r0
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f7f1 f8ce 	bl	8000d7c <__aeabi_fmul>
 800fbe0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800fbe4:	4681      	mov	r9, r0
 800fbe6:	4638      	mov	r0, r7
 800fbe8:	f7f0 ffbe 	bl	8000b68 <__aeabi_fsub>
 800fbec:	4601      	mov	r1, r0
 800fbee:	4648      	mov	r0, r9
 800fbf0:	f7f1 f978 	bl	8000ee4 <__aeabi_fdiv>
 800fbf4:	4641      	mov	r1, r8
 800fbf6:	4607      	mov	r7, r0
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	f7f1 f8bf 	bl	8000d7c <__aeabi_fmul>
 800fbfe:	4641      	mov	r1, r8
 800fc00:	f7f0 ffb4 	bl	8000b6c <__addsf3>
 800fc04:	4601      	mov	r1, r0
 800fc06:	4638      	mov	r0, r7
 800fc08:	f7f0 ffae 	bl	8000b68 <__aeabi_fsub>
 800fc0c:	4631      	mov	r1, r6
 800fc0e:	f7f0 ffab 	bl	8000b68 <__aeabi_fsub>
 800fc12:	4601      	mov	r1, r0
 800fc14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fc18:	f7f0 ffa6 	bl	8000b68 <__aeabi_fsub>
 800fc1c:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800fc20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc24:	da1f      	bge.n	800fc66 <__ieee754_powf+0x65a>
 800fc26:	4621      	mov	r1, r4
 800fc28:	f000 ffe4 	bl	8010bf4 <scalbnf>
 800fc2c:	4629      	mov	r1, r5
 800fc2e:	e54a      	b.n	800f6c6 <__ieee754_powf+0xba>
 800fc30:	4b1a      	ldr	r3, [pc, #104]	; (800fc9c <__ieee754_powf+0x690>)
 800fc32:	429c      	cmp	r4, r3
 800fc34:	dd05      	ble.n	800fc42 <__ieee754_powf+0x636>
 800fc36:	491a      	ldr	r1, [pc, #104]	; (800fca0 <__ieee754_powf+0x694>)
 800fc38:	4628      	mov	r0, r5
 800fc3a:	f7f1 f89f 	bl	8000d7c <__aeabi_fmul>
 800fc3e:	4918      	ldr	r1, [pc, #96]	; (800fca0 <__ieee754_powf+0x694>)
 800fc40:	e541      	b.n	800f6c6 <__ieee754_powf+0xba>
 800fc42:	d10a      	bne.n	800fc5a <__ieee754_powf+0x64e>
 800fc44:	4639      	mov	r1, r7
 800fc46:	f7f0 ff8f 	bl	8000b68 <__aeabi_fsub>
 800fc4a:	4601      	mov	r1, r0
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	f7f1 fa3d 	bl	80010cc <__aeabi_fcmple>
 800fc52:	2800      	cmp	r0, #0
 800fc54:	f43f af50 	beq.w	800faf8 <__ieee754_powf+0x4ec>
 800fc58:	e7ed      	b.n	800fc36 <__ieee754_powf+0x62a>
 800fc5a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800fc5e:	f73f af4b 	bgt.w	800faf8 <__ieee754_powf+0x4ec>
 800fc62:	2400      	movs	r4, #0
 800fc64:	e764      	b.n	800fb30 <__ieee754_powf+0x524>
 800fc66:	4618      	mov	r0, r3
 800fc68:	e7e0      	b.n	800fc2c <__ieee754_powf+0x620>
 800fc6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fc6e:	e517      	b.n	800f6a0 <__ieee754_powf+0x94>
 800fc70:	9901      	ldr	r1, [sp, #4]
 800fc72:	e515      	b.n	800f6a0 <__ieee754_powf+0x94>
 800fc74:	3338aa3c 	.word	0x3338aa3c
 800fc78:	007fffff 	.word	0x007fffff
 800fc7c:	3f317200 	.word	0x3f317200
 800fc80:	3f317218 	.word	0x3f317218
 800fc84:	35bfbe8c 	.word	0x35bfbe8c
 800fc88:	3331bb4c 	.word	0x3331bb4c
 800fc8c:	35ddea0e 	.word	0x35ddea0e
 800fc90:	388ab355 	.word	0x388ab355
 800fc94:	3b360b61 	.word	0x3b360b61
 800fc98:	3e2aaaab 	.word	0x3e2aaaab
 800fc9c:	43160000 	.word	0x43160000
 800fca0:	0da24260 	.word	0x0da24260

0800fca4 <__ieee754_rem_pio2f>:
 800fca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca8:	4a9d      	ldr	r2, [pc, #628]	; (800ff20 <__ieee754_rem_pio2f+0x27c>)
 800fcaa:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800fcae:	4295      	cmp	r5, r2
 800fcb0:	b087      	sub	sp, #28
 800fcb2:	460c      	mov	r4, r1
 800fcb4:	4607      	mov	r7, r0
 800fcb6:	dc04      	bgt.n	800fcc2 <__ieee754_rem_pio2f+0x1e>
 800fcb8:	2300      	movs	r3, #0
 800fcba:	6020      	str	r0, [r4, #0]
 800fcbc:	604b      	str	r3, [r1, #4]
 800fcbe:	2600      	movs	r6, #0
 800fcc0:	e01a      	b.n	800fcf8 <__ieee754_rem_pio2f+0x54>
 800fcc2:	4a98      	ldr	r2, [pc, #608]	; (800ff24 <__ieee754_rem_pio2f+0x280>)
 800fcc4:	4295      	cmp	r5, r2
 800fcc6:	dc4b      	bgt.n	800fd60 <__ieee754_rem_pio2f+0xbc>
 800fcc8:	2800      	cmp	r0, #0
 800fcca:	4997      	ldr	r1, [pc, #604]	; (800ff28 <__ieee754_rem_pio2f+0x284>)
 800fccc:	f025 050f 	bic.w	r5, r5, #15
 800fcd0:	4e96      	ldr	r6, [pc, #600]	; (800ff2c <__ieee754_rem_pio2f+0x288>)
 800fcd2:	dd23      	ble.n	800fd1c <__ieee754_rem_pio2f+0x78>
 800fcd4:	f7f0 ff48 	bl	8000b68 <__aeabi_fsub>
 800fcd8:	42b5      	cmp	r5, r6
 800fcda:	4607      	mov	r7, r0
 800fcdc:	d010      	beq.n	800fd00 <__ieee754_rem_pio2f+0x5c>
 800fcde:	4994      	ldr	r1, [pc, #592]	; (800ff30 <__ieee754_rem_pio2f+0x28c>)
 800fce0:	f7f0 ff42 	bl	8000b68 <__aeabi_fsub>
 800fce4:	4601      	mov	r1, r0
 800fce6:	6020      	str	r0, [r4, #0]
 800fce8:	4638      	mov	r0, r7
 800fcea:	f7f0 ff3d 	bl	8000b68 <__aeabi_fsub>
 800fcee:	4990      	ldr	r1, [pc, #576]	; (800ff30 <__ieee754_rem_pio2f+0x28c>)
 800fcf0:	f7f0 ff3a 	bl	8000b68 <__aeabi_fsub>
 800fcf4:	2601      	movs	r6, #1
 800fcf6:	6060      	str	r0, [r4, #4]
 800fcf8:	4630      	mov	r0, r6
 800fcfa:	b007      	add	sp, #28
 800fcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd00:	498c      	ldr	r1, [pc, #560]	; (800ff34 <__ieee754_rem_pio2f+0x290>)
 800fd02:	f7f0 ff31 	bl	8000b68 <__aeabi_fsub>
 800fd06:	498c      	ldr	r1, [pc, #560]	; (800ff38 <__ieee754_rem_pio2f+0x294>)
 800fd08:	4605      	mov	r5, r0
 800fd0a:	f7f0 ff2d 	bl	8000b68 <__aeabi_fsub>
 800fd0e:	4601      	mov	r1, r0
 800fd10:	6020      	str	r0, [r4, #0]
 800fd12:	4628      	mov	r0, r5
 800fd14:	f7f0 ff28 	bl	8000b68 <__aeabi_fsub>
 800fd18:	4987      	ldr	r1, [pc, #540]	; (800ff38 <__ieee754_rem_pio2f+0x294>)
 800fd1a:	e7e9      	b.n	800fcf0 <__ieee754_rem_pio2f+0x4c>
 800fd1c:	f7f0 ff26 	bl	8000b6c <__addsf3>
 800fd20:	42b5      	cmp	r5, r6
 800fd22:	4607      	mov	r7, r0
 800fd24:	d00e      	beq.n	800fd44 <__ieee754_rem_pio2f+0xa0>
 800fd26:	4982      	ldr	r1, [pc, #520]	; (800ff30 <__ieee754_rem_pio2f+0x28c>)
 800fd28:	f7f0 ff20 	bl	8000b6c <__addsf3>
 800fd2c:	4601      	mov	r1, r0
 800fd2e:	6020      	str	r0, [r4, #0]
 800fd30:	4638      	mov	r0, r7
 800fd32:	f7f0 ff19 	bl	8000b68 <__aeabi_fsub>
 800fd36:	497e      	ldr	r1, [pc, #504]	; (800ff30 <__ieee754_rem_pio2f+0x28c>)
 800fd38:	f7f0 ff18 	bl	8000b6c <__addsf3>
 800fd3c:	f04f 36ff 	mov.w	r6, #4294967295
 800fd40:	6060      	str	r0, [r4, #4]
 800fd42:	e7d9      	b.n	800fcf8 <__ieee754_rem_pio2f+0x54>
 800fd44:	497b      	ldr	r1, [pc, #492]	; (800ff34 <__ieee754_rem_pio2f+0x290>)
 800fd46:	f7f0 ff11 	bl	8000b6c <__addsf3>
 800fd4a:	497b      	ldr	r1, [pc, #492]	; (800ff38 <__ieee754_rem_pio2f+0x294>)
 800fd4c:	4605      	mov	r5, r0
 800fd4e:	f7f0 ff0d 	bl	8000b6c <__addsf3>
 800fd52:	4601      	mov	r1, r0
 800fd54:	6020      	str	r0, [r4, #0]
 800fd56:	4628      	mov	r0, r5
 800fd58:	f7f0 ff06 	bl	8000b68 <__aeabi_fsub>
 800fd5c:	4976      	ldr	r1, [pc, #472]	; (800ff38 <__ieee754_rem_pio2f+0x294>)
 800fd5e:	e7eb      	b.n	800fd38 <__ieee754_rem_pio2f+0x94>
 800fd60:	4a76      	ldr	r2, [pc, #472]	; (800ff3c <__ieee754_rem_pio2f+0x298>)
 800fd62:	4295      	cmp	r5, r2
 800fd64:	f300 808c 	bgt.w	800fe80 <__ieee754_rem_pio2f+0x1dc>
 800fd68:	f000 fef8 	bl	8010b5c <fabsf>
 800fd6c:	4974      	ldr	r1, [pc, #464]	; (800ff40 <__ieee754_rem_pio2f+0x29c>)
 800fd6e:	4680      	mov	r8, r0
 800fd70:	f7f1 f804 	bl	8000d7c <__aeabi_fmul>
 800fd74:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fd78:	f7f0 fef8 	bl	8000b6c <__addsf3>
 800fd7c:	f7f1 f9da 	bl	8001134 <__aeabi_f2iz>
 800fd80:	4606      	mov	r6, r0
 800fd82:	f7f0 ffa7 	bl	8000cd4 <__aeabi_i2f>
 800fd86:	4968      	ldr	r1, [pc, #416]	; (800ff28 <__ieee754_rem_pio2f+0x284>)
 800fd88:	4682      	mov	sl, r0
 800fd8a:	f7f0 fff7 	bl	8000d7c <__aeabi_fmul>
 800fd8e:	4601      	mov	r1, r0
 800fd90:	4640      	mov	r0, r8
 800fd92:	f7f0 fee9 	bl	8000b68 <__aeabi_fsub>
 800fd96:	4966      	ldr	r1, [pc, #408]	; (800ff30 <__ieee754_rem_pio2f+0x28c>)
 800fd98:	4680      	mov	r8, r0
 800fd9a:	4650      	mov	r0, sl
 800fd9c:	f7f0 ffee 	bl	8000d7c <__aeabi_fmul>
 800fda0:	2e1f      	cmp	r6, #31
 800fda2:	4681      	mov	r9, r0
 800fda4:	dc0c      	bgt.n	800fdc0 <__ieee754_rem_pio2f+0x11c>
 800fda6:	4a67      	ldr	r2, [pc, #412]	; (800ff44 <__ieee754_rem_pio2f+0x2a0>)
 800fda8:	1e71      	subs	r1, r6, #1
 800fdaa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800fdae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d004      	beq.n	800fdc0 <__ieee754_rem_pio2f+0x11c>
 800fdb6:	4649      	mov	r1, r9
 800fdb8:	4640      	mov	r0, r8
 800fdba:	f7f0 fed5 	bl	8000b68 <__aeabi_fsub>
 800fdbe:	e009      	b.n	800fdd4 <__ieee754_rem_pio2f+0x130>
 800fdc0:	4649      	mov	r1, r9
 800fdc2:	4640      	mov	r0, r8
 800fdc4:	f7f0 fed0 	bl	8000b68 <__aeabi_fsub>
 800fdc8:	15ed      	asrs	r5, r5, #23
 800fdca:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fdce:	1aeb      	subs	r3, r5, r3
 800fdd0:	2b08      	cmp	r3, #8
 800fdd2:	dc01      	bgt.n	800fdd8 <__ieee754_rem_pio2f+0x134>
 800fdd4:	6020      	str	r0, [r4, #0]
 800fdd6:	e024      	b.n	800fe22 <__ieee754_rem_pio2f+0x17e>
 800fdd8:	4956      	ldr	r1, [pc, #344]	; (800ff34 <__ieee754_rem_pio2f+0x290>)
 800fdda:	4650      	mov	r0, sl
 800fddc:	f7f0 ffce 	bl	8000d7c <__aeabi_fmul>
 800fde0:	4681      	mov	r9, r0
 800fde2:	4601      	mov	r1, r0
 800fde4:	4640      	mov	r0, r8
 800fde6:	f7f0 febf 	bl	8000b68 <__aeabi_fsub>
 800fdea:	4601      	mov	r1, r0
 800fdec:	4683      	mov	fp, r0
 800fdee:	4640      	mov	r0, r8
 800fdf0:	f7f0 feba 	bl	8000b68 <__aeabi_fsub>
 800fdf4:	4649      	mov	r1, r9
 800fdf6:	f7f0 feb7 	bl	8000b68 <__aeabi_fsub>
 800fdfa:	4680      	mov	r8, r0
 800fdfc:	494e      	ldr	r1, [pc, #312]	; (800ff38 <__ieee754_rem_pio2f+0x294>)
 800fdfe:	4650      	mov	r0, sl
 800fe00:	f7f0 ffbc 	bl	8000d7c <__aeabi_fmul>
 800fe04:	4641      	mov	r1, r8
 800fe06:	f7f0 feaf 	bl	8000b68 <__aeabi_fsub>
 800fe0a:	4601      	mov	r1, r0
 800fe0c:	4681      	mov	r9, r0
 800fe0e:	4658      	mov	r0, fp
 800fe10:	f7f0 feaa 	bl	8000b68 <__aeabi_fsub>
 800fe14:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fe18:	1aed      	subs	r5, r5, r3
 800fe1a:	2d19      	cmp	r5, #25
 800fe1c:	dc15      	bgt.n	800fe4a <__ieee754_rem_pio2f+0x1a6>
 800fe1e:	46d8      	mov	r8, fp
 800fe20:	6020      	str	r0, [r4, #0]
 800fe22:	6825      	ldr	r5, [r4, #0]
 800fe24:	4640      	mov	r0, r8
 800fe26:	4629      	mov	r1, r5
 800fe28:	f7f0 fe9e 	bl	8000b68 <__aeabi_fsub>
 800fe2c:	4649      	mov	r1, r9
 800fe2e:	f7f0 fe9b 	bl	8000b68 <__aeabi_fsub>
 800fe32:	2f00      	cmp	r7, #0
 800fe34:	6060      	str	r0, [r4, #4]
 800fe36:	f6bf af5f 	bge.w	800fcf8 <__ieee754_rem_pio2f+0x54>
 800fe3a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800fe3e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fe42:	6025      	str	r5, [r4, #0]
 800fe44:	6060      	str	r0, [r4, #4]
 800fe46:	4276      	negs	r6, r6
 800fe48:	e756      	b.n	800fcf8 <__ieee754_rem_pio2f+0x54>
 800fe4a:	493f      	ldr	r1, [pc, #252]	; (800ff48 <__ieee754_rem_pio2f+0x2a4>)
 800fe4c:	4650      	mov	r0, sl
 800fe4e:	f7f0 ff95 	bl	8000d7c <__aeabi_fmul>
 800fe52:	4605      	mov	r5, r0
 800fe54:	4601      	mov	r1, r0
 800fe56:	4658      	mov	r0, fp
 800fe58:	f7f0 fe86 	bl	8000b68 <__aeabi_fsub>
 800fe5c:	4601      	mov	r1, r0
 800fe5e:	4680      	mov	r8, r0
 800fe60:	4658      	mov	r0, fp
 800fe62:	f7f0 fe81 	bl	8000b68 <__aeabi_fsub>
 800fe66:	4629      	mov	r1, r5
 800fe68:	f7f0 fe7e 	bl	8000b68 <__aeabi_fsub>
 800fe6c:	4605      	mov	r5, r0
 800fe6e:	4937      	ldr	r1, [pc, #220]	; (800ff4c <__ieee754_rem_pio2f+0x2a8>)
 800fe70:	4650      	mov	r0, sl
 800fe72:	f7f0 ff83 	bl	8000d7c <__aeabi_fmul>
 800fe76:	4629      	mov	r1, r5
 800fe78:	f7f0 fe76 	bl	8000b68 <__aeabi_fsub>
 800fe7c:	4681      	mov	r9, r0
 800fe7e:	e79a      	b.n	800fdb6 <__ieee754_rem_pio2f+0x112>
 800fe80:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800fe84:	db05      	blt.n	800fe92 <__ieee754_rem_pio2f+0x1ee>
 800fe86:	4601      	mov	r1, r0
 800fe88:	f7f0 fe6e 	bl	8000b68 <__aeabi_fsub>
 800fe8c:	6060      	str	r0, [r4, #4]
 800fe8e:	6020      	str	r0, [r4, #0]
 800fe90:	e715      	b.n	800fcbe <__ieee754_rem_pio2f+0x1a>
 800fe92:	15ee      	asrs	r6, r5, #23
 800fe94:	3e86      	subs	r6, #134	; 0x86
 800fe96:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	f7f1 f94a 	bl	8001134 <__aeabi_f2iz>
 800fea0:	f7f0 ff18 	bl	8000cd4 <__aeabi_i2f>
 800fea4:	4601      	mov	r1, r0
 800fea6:	9003      	str	r0, [sp, #12]
 800fea8:	4628      	mov	r0, r5
 800feaa:	f7f0 fe5d 	bl	8000b68 <__aeabi_fsub>
 800feae:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800feb2:	f7f0 ff63 	bl	8000d7c <__aeabi_fmul>
 800feb6:	4680      	mov	r8, r0
 800feb8:	f7f1 f93c 	bl	8001134 <__aeabi_f2iz>
 800febc:	f7f0 ff0a 	bl	8000cd4 <__aeabi_i2f>
 800fec0:	4601      	mov	r1, r0
 800fec2:	9004      	str	r0, [sp, #16]
 800fec4:	4605      	mov	r5, r0
 800fec6:	4640      	mov	r0, r8
 800fec8:	f7f0 fe4e 	bl	8000b68 <__aeabi_fsub>
 800fecc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fed0:	f7f0 ff54 	bl	8000d7c <__aeabi_fmul>
 800fed4:	2100      	movs	r1, #0
 800fed6:	9005      	str	r0, [sp, #20]
 800fed8:	f7f1 f8e4 	bl	80010a4 <__aeabi_fcmpeq>
 800fedc:	b1e8      	cbz	r0, 800ff1a <__ieee754_rem_pio2f+0x276>
 800fede:	2100      	movs	r1, #0
 800fee0:	4628      	mov	r0, r5
 800fee2:	f7f1 f8df 	bl	80010a4 <__aeabi_fcmpeq>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	bf14      	ite	ne
 800feea:	2301      	movne	r3, #1
 800feec:	2302      	moveq	r3, #2
 800feee:	4a18      	ldr	r2, [pc, #96]	; (800ff50 <__ieee754_rem_pio2f+0x2ac>)
 800fef0:	4621      	mov	r1, r4
 800fef2:	9201      	str	r2, [sp, #4]
 800fef4:	2202      	movs	r2, #2
 800fef6:	a803      	add	r0, sp, #12
 800fef8:	9200      	str	r2, [sp, #0]
 800fefa:	4632      	mov	r2, r6
 800fefc:	f000 f910 	bl	8010120 <__kernel_rem_pio2f>
 800ff00:	2f00      	cmp	r7, #0
 800ff02:	4606      	mov	r6, r0
 800ff04:	f6bf aef8 	bge.w	800fcf8 <__ieee754_rem_pio2f+0x54>
 800ff08:	6823      	ldr	r3, [r4, #0]
 800ff0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ff0e:	6023      	str	r3, [r4, #0]
 800ff10:	6863      	ldr	r3, [r4, #4]
 800ff12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ff16:	6063      	str	r3, [r4, #4]
 800ff18:	e795      	b.n	800fe46 <__ieee754_rem_pio2f+0x1a2>
 800ff1a:	2303      	movs	r3, #3
 800ff1c:	e7e7      	b.n	800feee <__ieee754_rem_pio2f+0x24a>
 800ff1e:	bf00      	nop
 800ff20:	3f490fd8 	.word	0x3f490fd8
 800ff24:	4016cbe3 	.word	0x4016cbe3
 800ff28:	3fc90f80 	.word	0x3fc90f80
 800ff2c:	3fc90fd0 	.word	0x3fc90fd0
 800ff30:	37354443 	.word	0x37354443
 800ff34:	37354400 	.word	0x37354400
 800ff38:	2e85a308 	.word	0x2e85a308
 800ff3c:	43490f80 	.word	0x43490f80
 800ff40:	3f22f984 	.word	0x3f22f984
 800ff44:	080118a0 	.word	0x080118a0
 800ff48:	2e85a300 	.word	0x2e85a300
 800ff4c:	248d3132 	.word	0x248d3132
 800ff50:	08011920 	.word	0x08011920

0800ff54 <__ieee754_sqrtf>:
 800ff54:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ff58:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ff5c:	b570      	push	{r4, r5, r6, lr}
 800ff5e:	4603      	mov	r3, r0
 800ff60:	4604      	mov	r4, r0
 800ff62:	d309      	bcc.n	800ff78 <__ieee754_sqrtf+0x24>
 800ff64:	4601      	mov	r1, r0
 800ff66:	f7f0 ff09 	bl	8000d7c <__aeabi_fmul>
 800ff6a:	4601      	mov	r1, r0
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f7f0 fdfd 	bl	8000b6c <__addsf3>
 800ff72:	4604      	mov	r4, r0
 800ff74:	4620      	mov	r0, r4
 800ff76:	bd70      	pop	{r4, r5, r6, pc}
 800ff78:	2a00      	cmp	r2, #0
 800ff7a:	d0fb      	beq.n	800ff74 <__ieee754_sqrtf+0x20>
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	da06      	bge.n	800ff8e <__ieee754_sqrtf+0x3a>
 800ff80:	4601      	mov	r1, r0
 800ff82:	f7f0 fdf1 	bl	8000b68 <__aeabi_fsub>
 800ff86:	4601      	mov	r1, r0
 800ff88:	f7f0 ffac 	bl	8000ee4 <__aeabi_fdiv>
 800ff8c:	e7f1      	b.n	800ff72 <__ieee754_sqrtf+0x1e>
 800ff8e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800ff92:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800ff96:	d204      	bcs.n	800ffa2 <__ieee754_sqrtf+0x4e>
 800ff98:	2200      	movs	r2, #0
 800ff9a:	0219      	lsls	r1, r3, #8
 800ff9c:	d529      	bpl.n	800fff2 <__ieee754_sqrtf+0x9e>
 800ff9e:	3a01      	subs	r2, #1
 800ffa0:	1aa4      	subs	r4, r4, r2
 800ffa2:	3c7f      	subs	r4, #127	; 0x7f
 800ffa4:	07e2      	lsls	r2, r4, #31
 800ffa6:	f04f 0200 	mov.w	r2, #0
 800ffaa:	ea4f 0164 	mov.w	r1, r4, asr #1
 800ffae:	4616      	mov	r6, r2
 800ffb0:	f04f 0419 	mov.w	r4, #25
 800ffb4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800ffb8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ffbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ffc0:	bf48      	it	mi
 800ffc2:	005b      	lslmi	r3, r3, #1
 800ffc4:	005b      	lsls	r3, r3, #1
 800ffc6:	1835      	adds	r5, r6, r0
 800ffc8:	429d      	cmp	r5, r3
 800ffca:	bfde      	ittt	le
 800ffcc:	182e      	addle	r6, r5, r0
 800ffce:	1b5b      	suble	r3, r3, r5
 800ffd0:	1812      	addle	r2, r2, r0
 800ffd2:	3c01      	subs	r4, #1
 800ffd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ffd8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ffdc:	d1f3      	bne.n	800ffc6 <__ieee754_sqrtf+0x72>
 800ffde:	b113      	cbz	r3, 800ffe6 <__ieee754_sqrtf+0x92>
 800ffe0:	3201      	adds	r2, #1
 800ffe2:	f022 0201 	bic.w	r2, r2, #1
 800ffe6:	1054      	asrs	r4, r2, #1
 800ffe8:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800ffec:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800fff0:	e7c0      	b.n	800ff74 <__ieee754_sqrtf+0x20>
 800fff2:	005b      	lsls	r3, r3, #1
 800fff4:	3201      	adds	r2, #1
 800fff6:	e7d0      	b.n	800ff9a <__ieee754_sqrtf+0x46>

0800fff8 <__kernel_cosf>:
 800fff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fffc:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8010000:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8010004:	4606      	mov	r6, r0
 8010006:	460f      	mov	r7, r1
 8010008:	da03      	bge.n	8010012 <__kernel_cosf+0x1a>
 801000a:	f7f1 f893 	bl	8001134 <__aeabi_f2iz>
 801000e:	2800      	cmp	r0, #0
 8010010:	d070      	beq.n	80100f4 <__kernel_cosf+0xfc>
 8010012:	4631      	mov	r1, r6
 8010014:	4630      	mov	r0, r6
 8010016:	f7f0 feb1 	bl	8000d7c <__aeabi_fmul>
 801001a:	4605      	mov	r5, r0
 801001c:	4937      	ldr	r1, [pc, #220]	; (80100fc <__kernel_cosf+0x104>)
 801001e:	f7f0 fead 	bl	8000d7c <__aeabi_fmul>
 8010022:	4937      	ldr	r1, [pc, #220]	; (8010100 <__kernel_cosf+0x108>)
 8010024:	f7f0 fda2 	bl	8000b6c <__addsf3>
 8010028:	4629      	mov	r1, r5
 801002a:	f7f0 fea7 	bl	8000d7c <__aeabi_fmul>
 801002e:	4935      	ldr	r1, [pc, #212]	; (8010104 <__kernel_cosf+0x10c>)
 8010030:	f7f0 fd9a 	bl	8000b68 <__aeabi_fsub>
 8010034:	4629      	mov	r1, r5
 8010036:	f7f0 fea1 	bl	8000d7c <__aeabi_fmul>
 801003a:	4933      	ldr	r1, [pc, #204]	; (8010108 <__kernel_cosf+0x110>)
 801003c:	f7f0 fd96 	bl	8000b6c <__addsf3>
 8010040:	4629      	mov	r1, r5
 8010042:	f7f0 fe9b 	bl	8000d7c <__aeabi_fmul>
 8010046:	4931      	ldr	r1, [pc, #196]	; (801010c <__kernel_cosf+0x114>)
 8010048:	f7f0 fd8e 	bl	8000b68 <__aeabi_fsub>
 801004c:	4629      	mov	r1, r5
 801004e:	f7f0 fe95 	bl	8000d7c <__aeabi_fmul>
 8010052:	492f      	ldr	r1, [pc, #188]	; (8010110 <__kernel_cosf+0x118>)
 8010054:	f7f0 fd8a 	bl	8000b6c <__addsf3>
 8010058:	4629      	mov	r1, r5
 801005a:	f7f0 fe8f 	bl	8000d7c <__aeabi_fmul>
 801005e:	4b2d      	ldr	r3, [pc, #180]	; (8010114 <__kernel_cosf+0x11c>)
 8010060:	4680      	mov	r8, r0
 8010062:	429c      	cmp	r4, r3
 8010064:	dc1d      	bgt.n	80100a2 <__kernel_cosf+0xaa>
 8010066:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801006a:	4628      	mov	r0, r5
 801006c:	f7f0 fe86 	bl	8000d7c <__aeabi_fmul>
 8010070:	4641      	mov	r1, r8
 8010072:	4604      	mov	r4, r0
 8010074:	4628      	mov	r0, r5
 8010076:	f7f0 fe81 	bl	8000d7c <__aeabi_fmul>
 801007a:	4639      	mov	r1, r7
 801007c:	4605      	mov	r5, r0
 801007e:	4630      	mov	r0, r6
 8010080:	f7f0 fe7c 	bl	8000d7c <__aeabi_fmul>
 8010084:	4601      	mov	r1, r0
 8010086:	4628      	mov	r0, r5
 8010088:	f7f0 fd6e 	bl	8000b68 <__aeabi_fsub>
 801008c:	4601      	mov	r1, r0
 801008e:	4620      	mov	r0, r4
 8010090:	f7f0 fd6a 	bl	8000b68 <__aeabi_fsub>
 8010094:	4601      	mov	r1, r0
 8010096:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801009a:	f7f0 fd65 	bl	8000b68 <__aeabi_fsub>
 801009e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100a2:	4b1d      	ldr	r3, [pc, #116]	; (8010118 <__kernel_cosf+0x120>)
 80100a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80100a8:	429c      	cmp	r4, r3
 80100aa:	bfcc      	ite	gt
 80100ac:	4c1b      	ldrgt	r4, [pc, #108]	; (801011c <__kernel_cosf+0x124>)
 80100ae:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80100b2:	4621      	mov	r1, r4
 80100b4:	f7f0 fd58 	bl	8000b68 <__aeabi_fsub>
 80100b8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80100bc:	4681      	mov	r9, r0
 80100be:	4628      	mov	r0, r5
 80100c0:	f7f0 fe5c 	bl	8000d7c <__aeabi_fmul>
 80100c4:	4621      	mov	r1, r4
 80100c6:	f7f0 fd4f 	bl	8000b68 <__aeabi_fsub>
 80100ca:	4641      	mov	r1, r8
 80100cc:	4604      	mov	r4, r0
 80100ce:	4628      	mov	r0, r5
 80100d0:	f7f0 fe54 	bl	8000d7c <__aeabi_fmul>
 80100d4:	4639      	mov	r1, r7
 80100d6:	4605      	mov	r5, r0
 80100d8:	4630      	mov	r0, r6
 80100da:	f7f0 fe4f 	bl	8000d7c <__aeabi_fmul>
 80100de:	4601      	mov	r1, r0
 80100e0:	4628      	mov	r0, r5
 80100e2:	f7f0 fd41 	bl	8000b68 <__aeabi_fsub>
 80100e6:	4601      	mov	r1, r0
 80100e8:	4620      	mov	r0, r4
 80100ea:	f7f0 fd3d 	bl	8000b68 <__aeabi_fsub>
 80100ee:	4601      	mov	r1, r0
 80100f0:	4648      	mov	r0, r9
 80100f2:	e7d2      	b.n	801009a <__kernel_cosf+0xa2>
 80100f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80100f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100fc:	ad47d74e 	.word	0xad47d74e
 8010100:	310f74f6 	.word	0x310f74f6
 8010104:	3493f27c 	.word	0x3493f27c
 8010108:	37d00d01 	.word	0x37d00d01
 801010c:	3ab60b61 	.word	0x3ab60b61
 8010110:	3d2aaaab 	.word	0x3d2aaaab
 8010114:	3e999999 	.word	0x3e999999
 8010118:	3f480000 	.word	0x3f480000
 801011c:	3e900000 	.word	0x3e900000

08010120 <__kernel_rem_pio2f>:
 8010120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010124:	b0d9      	sub	sp, #356	; 0x164
 8010126:	9304      	str	r3, [sp, #16]
 8010128:	9101      	str	r1, [sp, #4]
 801012a:	4bb4      	ldr	r3, [pc, #720]	; (80103fc <__kernel_rem_pio2f+0x2dc>)
 801012c:	9962      	ldr	r1, [sp, #392]	; 0x188
 801012e:	1ed4      	subs	r4, r2, #3
 8010130:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010134:	2500      	movs	r5, #0
 8010136:	9302      	str	r3, [sp, #8]
 8010138:	9b04      	ldr	r3, [sp, #16]
 801013a:	f04f 0b00 	mov.w	fp, #0
 801013e:	3b01      	subs	r3, #1
 8010140:	9303      	str	r3, [sp, #12]
 8010142:	2308      	movs	r3, #8
 8010144:	fb94 f4f3 	sdiv	r4, r4, r3
 8010148:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801014c:	1c66      	adds	r6, r4, #1
 801014e:	9b02      	ldr	r3, [sp, #8]
 8010150:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8010154:	9a03      	ldr	r2, [sp, #12]
 8010156:	9005      	str	r0, [sp, #20]
 8010158:	eb03 0802 	add.w	r8, r3, r2
 801015c:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 801015e:	1aa7      	subs	r7, r4, r2
 8010160:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010164:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 8010168:	4545      	cmp	r5, r8
 801016a:	dd10      	ble.n	801018e <__kernel_rem_pio2f+0x6e>
 801016c:	2500      	movs	r5, #0
 801016e:	f04f 0b00 	mov.w	fp, #0
 8010172:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 8010176:	9b02      	ldr	r3, [sp, #8]
 8010178:	429d      	cmp	r5, r3
 801017a:	dc28      	bgt.n	80101ce <__kernel_rem_pio2f+0xae>
 801017c:	9b04      	ldr	r3, [sp, #16]
 801017e:	46d9      	mov	r9, fp
 8010180:	eb03 0805 	add.w	r8, r3, r5
 8010184:	ab1c      	add	r3, sp, #112	; 0x70
 8010186:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 801018a:	2700      	movs	r7, #0
 801018c:	e018      	b.n	80101c0 <__kernel_rem_pio2f+0xa0>
 801018e:	42ef      	cmn	r7, r5
 8010190:	d407      	bmi.n	80101a2 <__kernel_rem_pio2f+0x82>
 8010192:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010196:	f7f0 fd9d 	bl	8000cd4 <__aeabi_i2f>
 801019a:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 801019e:	3501      	adds	r5, #1
 80101a0:	e7e2      	b.n	8010168 <__kernel_rem_pio2f+0x48>
 80101a2:	4658      	mov	r0, fp
 80101a4:	e7f9      	b.n	801019a <__kernel_rem_pio2f+0x7a>
 80101a6:	9b05      	ldr	r3, [sp, #20]
 80101a8:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 80101ac:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80101b0:	f7f0 fde4 	bl	8000d7c <__aeabi_fmul>
 80101b4:	4601      	mov	r1, r0
 80101b6:	4648      	mov	r0, r9
 80101b8:	f7f0 fcd8 	bl	8000b6c <__addsf3>
 80101bc:	4681      	mov	r9, r0
 80101be:	3701      	adds	r7, #1
 80101c0:	9b03      	ldr	r3, [sp, #12]
 80101c2:	429f      	cmp	r7, r3
 80101c4:	ddef      	ble.n	80101a6 <__kernel_rem_pio2f+0x86>
 80101c6:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 80101ca:	3501      	adds	r5, #1
 80101cc:	e7d3      	b.n	8010176 <__kernel_rem_pio2f+0x56>
 80101ce:	9b02      	ldr	r3, [sp, #8]
 80101d0:	aa08      	add	r2, sp, #32
 80101d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101d6:	9307      	str	r3, [sp, #28]
 80101d8:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80101da:	9f02      	ldr	r7, [sp, #8]
 80101dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80101e0:	9306      	str	r3, [sp, #24]
 80101e2:	46ba      	mov	sl, r7
 80101e4:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 80101e8:	ab58      	add	r3, sp, #352	; 0x160
 80101ea:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80101ee:	f853 4c50 	ldr.w	r4, [r3, #-80]
 80101f2:	ad07      	add	r5, sp, #28
 80101f4:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80101f8:	f1ba 0f00 	cmp.w	sl, #0
 80101fc:	dc57      	bgt.n	80102ae <__kernel_rem_pio2f+0x18e>
 80101fe:	4631      	mov	r1, r6
 8010200:	4620      	mov	r0, r4
 8010202:	f000 fcf7 	bl	8010bf4 <scalbnf>
 8010206:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 801020a:	4604      	mov	r4, r0
 801020c:	f7f0 fdb6 	bl	8000d7c <__aeabi_fmul>
 8010210:	f000 fcb0 	bl	8010b74 <floorf>
 8010214:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8010218:	f7f0 fdb0 	bl	8000d7c <__aeabi_fmul>
 801021c:	4601      	mov	r1, r0
 801021e:	4620      	mov	r0, r4
 8010220:	f7f0 fca2 	bl	8000b68 <__aeabi_fsub>
 8010224:	4604      	mov	r4, r0
 8010226:	f7f0 ff85 	bl	8001134 <__aeabi_f2iz>
 801022a:	4680      	mov	r8, r0
 801022c:	f7f0 fd52 	bl	8000cd4 <__aeabi_i2f>
 8010230:	4601      	mov	r1, r0
 8010232:	4620      	mov	r0, r4
 8010234:	f7f0 fc98 	bl	8000b68 <__aeabi_fsub>
 8010238:	2e00      	cmp	r6, #0
 801023a:	4604      	mov	r4, r0
 801023c:	dd55      	ble.n	80102ea <__kernel_rem_pio2f+0x1ca>
 801023e:	1e7b      	subs	r3, r7, #1
 8010240:	aa08      	add	r2, sp, #32
 8010242:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8010246:	f1c6 0208 	rsb	r2, r6, #8
 801024a:	fa45 f002 	asr.w	r0, r5, r2
 801024e:	4480      	add	r8, r0
 8010250:	4090      	lsls	r0, r2
 8010252:	1a2d      	subs	r5, r5, r0
 8010254:	aa08      	add	r2, sp, #32
 8010256:	f1c6 0007 	rsb	r0, r6, #7
 801025a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 801025e:	4105      	asrs	r5, r0
 8010260:	2d00      	cmp	r5, #0
 8010262:	dd50      	ble.n	8010306 <__kernel_rem_pio2f+0x1e6>
 8010264:	2200      	movs	r2, #0
 8010266:	4691      	mov	r9, r2
 8010268:	f108 0801 	add.w	r8, r8, #1
 801026c:	4297      	cmp	r7, r2
 801026e:	f300 8085 	bgt.w	801037c <__kernel_rem_pio2f+0x25c>
 8010272:	2e00      	cmp	r6, #0
 8010274:	dd05      	ble.n	8010282 <__kernel_rem_pio2f+0x162>
 8010276:	2e01      	cmp	r6, #1
 8010278:	f000 8097 	beq.w	80103aa <__kernel_rem_pio2f+0x28a>
 801027c:	2e02      	cmp	r6, #2
 801027e:	f000 809e 	beq.w	80103be <__kernel_rem_pio2f+0x29e>
 8010282:	2d02      	cmp	r5, #2
 8010284:	d13f      	bne.n	8010306 <__kernel_rem_pio2f+0x1e6>
 8010286:	4621      	mov	r1, r4
 8010288:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801028c:	f7f0 fc6c 	bl	8000b68 <__aeabi_fsub>
 8010290:	4604      	mov	r4, r0
 8010292:	f1b9 0f00 	cmp.w	r9, #0
 8010296:	d036      	beq.n	8010306 <__kernel_rem_pio2f+0x1e6>
 8010298:	4631      	mov	r1, r6
 801029a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801029e:	f000 fca9 	bl	8010bf4 <scalbnf>
 80102a2:	4601      	mov	r1, r0
 80102a4:	4620      	mov	r0, r4
 80102a6:	f7f0 fc5f 	bl	8000b68 <__aeabi_fsub>
 80102aa:	4604      	mov	r4, r0
 80102ac:	e02b      	b.n	8010306 <__kernel_rem_pio2f+0x1e6>
 80102ae:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80102b2:	4620      	mov	r0, r4
 80102b4:	f7f0 fd62 	bl	8000d7c <__aeabi_fmul>
 80102b8:	f7f0 ff3c 	bl	8001134 <__aeabi_f2iz>
 80102bc:	f7f0 fd0a 	bl	8000cd4 <__aeabi_i2f>
 80102c0:	4641      	mov	r1, r8
 80102c2:	4683      	mov	fp, r0
 80102c4:	f7f0 fd5a 	bl	8000d7c <__aeabi_fmul>
 80102c8:	4601      	mov	r1, r0
 80102ca:	4620      	mov	r0, r4
 80102cc:	f7f0 fc4c 	bl	8000b68 <__aeabi_fsub>
 80102d0:	f7f0 ff30 	bl	8001134 <__aeabi_f2iz>
 80102d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102d8:	f845 0f04 	str.w	r0, [r5, #4]!
 80102dc:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 80102e0:	4658      	mov	r0, fp
 80102e2:	f7f0 fc43 	bl	8000b6c <__addsf3>
 80102e6:	4604      	mov	r4, r0
 80102e8:	e786      	b.n	80101f8 <__kernel_rem_pio2f+0xd8>
 80102ea:	d105      	bne.n	80102f8 <__kernel_rem_pio2f+0x1d8>
 80102ec:	1e7b      	subs	r3, r7, #1
 80102ee:	aa08      	add	r2, sp, #32
 80102f0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80102f4:	122d      	asrs	r5, r5, #8
 80102f6:	e7b3      	b.n	8010260 <__kernel_rem_pio2f+0x140>
 80102f8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80102fc:	f7f0 fef0 	bl	80010e0 <__aeabi_fcmpge>
 8010300:	2800      	cmp	r0, #0
 8010302:	d139      	bne.n	8010378 <__kernel_rem_pio2f+0x258>
 8010304:	4605      	mov	r5, r0
 8010306:	2100      	movs	r1, #0
 8010308:	4620      	mov	r0, r4
 801030a:	f7f0 fecb 	bl	80010a4 <__aeabi_fcmpeq>
 801030e:	2800      	cmp	r0, #0
 8010310:	f000 8098 	beq.w	8010444 <__kernel_rem_pio2f+0x324>
 8010314:	1e7c      	subs	r4, r7, #1
 8010316:	4623      	mov	r3, r4
 8010318:	2200      	movs	r2, #0
 801031a:	9902      	ldr	r1, [sp, #8]
 801031c:	428b      	cmp	r3, r1
 801031e:	da55      	bge.n	80103cc <__kernel_rem_pio2f+0x2ac>
 8010320:	2a00      	cmp	r2, #0
 8010322:	d16e      	bne.n	8010402 <__kernel_rem_pio2f+0x2e2>
 8010324:	2301      	movs	r3, #1
 8010326:	f06f 0103 	mvn.w	r1, #3
 801032a:	fb01 f203 	mul.w	r2, r1, r3
 801032e:	9807      	ldr	r0, [sp, #28]
 8010330:	5882      	ldr	r2, [r0, r2]
 8010332:	2a00      	cmp	r2, #0
 8010334:	d050      	beq.n	80103d8 <__kernel_rem_pio2f+0x2b8>
 8010336:	f06f 0803 	mvn.w	r8, #3
 801033a:	9a04      	ldr	r2, [sp, #16]
 801033c:	1c7d      	adds	r5, r7, #1
 801033e:	19d4      	adds	r4, r2, r7
 8010340:	aa58      	add	r2, sp, #352	; 0x160
 8010342:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010346:	3cf4      	subs	r4, #244	; 0xf4
 8010348:	441f      	add	r7, r3
 801034a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801034e:	42bd      	cmp	r5, r7
 8010350:	f73f af47 	bgt.w	80101e2 <__kernel_rem_pio2f+0xc2>
 8010354:	9b06      	ldr	r3, [sp, #24]
 8010356:	f04f 0a00 	mov.w	sl, #0
 801035a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801035e:	f7f0 fcb9 	bl	8000cd4 <__aeabi_i2f>
 8010362:	f04f 0b00 	mov.w	fp, #0
 8010366:	f844 0f04 	str.w	r0, [r4, #4]!
 801036a:	9b03      	ldr	r3, [sp, #12]
 801036c:	459a      	cmp	sl, r3
 801036e:	dd35      	ble.n	80103dc <__kernel_rem_pio2f+0x2bc>
 8010370:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8010374:	3501      	adds	r5, #1
 8010376:	e7ea      	b.n	801034e <__kernel_rem_pio2f+0x22e>
 8010378:	2502      	movs	r5, #2
 801037a:	e773      	b.n	8010264 <__kernel_rem_pio2f+0x144>
 801037c:	ab08      	add	r3, sp, #32
 801037e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010382:	f1b9 0f00 	cmp.w	r9, #0
 8010386:	d109      	bne.n	801039c <__kernel_rem_pio2f+0x27c>
 8010388:	b12b      	cbz	r3, 8010396 <__kernel_rem_pio2f+0x276>
 801038a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801038e:	a908      	add	r1, sp, #32
 8010390:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010394:	2301      	movs	r3, #1
 8010396:	3201      	adds	r2, #1
 8010398:	4699      	mov	r9, r3
 801039a:	e767      	b.n	801026c <__kernel_rem_pio2f+0x14c>
 801039c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80103a0:	a908      	add	r1, sp, #32
 80103a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80103a6:	464b      	mov	r3, r9
 80103a8:	e7f5      	b.n	8010396 <__kernel_rem_pio2f+0x276>
 80103aa:	1e7a      	subs	r2, r7, #1
 80103ac:	ab08      	add	r3, sp, #32
 80103ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103b6:	a908      	add	r1, sp, #32
 80103b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80103bc:	e761      	b.n	8010282 <__kernel_rem_pio2f+0x162>
 80103be:	1e7a      	subs	r2, r7, #1
 80103c0:	ab08      	add	r3, sp, #32
 80103c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103ca:	e7f4      	b.n	80103b6 <__kernel_rem_pio2f+0x296>
 80103cc:	a908      	add	r1, sp, #32
 80103ce:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80103d2:	3b01      	subs	r3, #1
 80103d4:	430a      	orrs	r2, r1
 80103d6:	e7a0      	b.n	801031a <__kernel_rem_pio2f+0x1fa>
 80103d8:	3301      	adds	r3, #1
 80103da:	e7a6      	b.n	801032a <__kernel_rem_pio2f+0x20a>
 80103dc:	fb08 f30a 	mul.w	r3, r8, sl
 80103e0:	9a05      	ldr	r2, [sp, #20]
 80103e2:	58e0      	ldr	r0, [r4, r3]
 80103e4:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 80103e8:	f7f0 fcc8 	bl	8000d7c <__aeabi_fmul>
 80103ec:	4601      	mov	r1, r0
 80103ee:	4658      	mov	r0, fp
 80103f0:	f7f0 fbbc 	bl	8000b6c <__addsf3>
 80103f4:	f10a 0a01 	add.w	sl, sl, #1
 80103f8:	4683      	mov	fp, r0
 80103fa:	e7b6      	b.n	801036a <__kernel_rem_pio2f+0x24a>
 80103fc:	08011c64 	.word	0x08011c64
 8010400:	3c01      	subs	r4, #1
 8010402:	ab08      	add	r3, sp, #32
 8010404:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010408:	3e08      	subs	r6, #8
 801040a:	2b00      	cmp	r3, #0
 801040c:	d0f8      	beq.n	8010400 <__kernel_rem_pio2f+0x2e0>
 801040e:	4631      	mov	r1, r6
 8010410:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010414:	f000 fbee 	bl	8010bf4 <scalbnf>
 8010418:	46a1      	mov	r9, r4
 801041a:	4682      	mov	sl, r0
 801041c:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 8010420:	ae44      	add	r6, sp, #272	; 0x110
 8010422:	f1b9 0f00 	cmp.w	r9, #0
 8010426:	da3f      	bge.n	80104a8 <__kernel_rem_pio2f+0x388>
 8010428:	2700      	movs	r7, #0
 801042a:	f04f 0b00 	mov.w	fp, #0
 801042e:	4b82      	ldr	r3, [pc, #520]	; (8010638 <__kernel_rem_pio2f+0x518>)
 8010430:	aa30      	add	r2, sp, #192	; 0xc0
 8010432:	ebb4 0a07 	subs.w	sl, r4, r7
 8010436:	d462      	bmi.n	80104fe <__kernel_rem_pio2f+0x3de>
 8010438:	a944      	add	r1, sp, #272	; 0x110
 801043a:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 801043e:	46d9      	mov	r9, fp
 8010440:	2600      	movs	r6, #0
 8010442:	e053      	b.n	80104ec <__kernel_rem_pio2f+0x3cc>
 8010444:	4271      	negs	r1, r6
 8010446:	4620      	mov	r0, r4
 8010448:	f000 fbd4 	bl	8010bf4 <scalbnf>
 801044c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8010450:	4604      	mov	r4, r0
 8010452:	f7f0 fe45 	bl	80010e0 <__aeabi_fcmpge>
 8010456:	b1f8      	cbz	r0, 8010498 <__kernel_rem_pio2f+0x378>
 8010458:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 801045c:	4620      	mov	r0, r4
 801045e:	f7f0 fc8d 	bl	8000d7c <__aeabi_fmul>
 8010462:	f7f0 fe67 	bl	8001134 <__aeabi_f2iz>
 8010466:	f7f0 fc35 	bl	8000cd4 <__aeabi_i2f>
 801046a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801046e:	4681      	mov	r9, r0
 8010470:	f7f0 fc84 	bl	8000d7c <__aeabi_fmul>
 8010474:	4601      	mov	r1, r0
 8010476:	4620      	mov	r0, r4
 8010478:	f7f0 fb76 	bl	8000b68 <__aeabi_fsub>
 801047c:	f7f0 fe5a 	bl	8001134 <__aeabi_f2iz>
 8010480:	ab08      	add	r3, sp, #32
 8010482:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8010486:	4648      	mov	r0, r9
 8010488:	f7f0 fe54 	bl	8001134 <__aeabi_f2iz>
 801048c:	1c7c      	adds	r4, r7, #1
 801048e:	ab08      	add	r3, sp, #32
 8010490:	3608      	adds	r6, #8
 8010492:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010496:	e7ba      	b.n	801040e <__kernel_rem_pio2f+0x2ee>
 8010498:	4620      	mov	r0, r4
 801049a:	f7f0 fe4b 	bl	8001134 <__aeabi_f2iz>
 801049e:	ab08      	add	r3, sp, #32
 80104a0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80104a4:	463c      	mov	r4, r7
 80104a6:	e7b2      	b.n	801040e <__kernel_rem_pio2f+0x2ee>
 80104a8:	ab08      	add	r3, sp, #32
 80104aa:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80104ae:	f7f0 fc11 	bl	8000cd4 <__aeabi_i2f>
 80104b2:	4651      	mov	r1, sl
 80104b4:	f7f0 fc62 	bl	8000d7c <__aeabi_fmul>
 80104b8:	4639      	mov	r1, r7
 80104ba:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 80104be:	4650      	mov	r0, sl
 80104c0:	f7f0 fc5c 	bl	8000d7c <__aeabi_fmul>
 80104c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80104c8:	4682      	mov	sl, r0
 80104ca:	e7aa      	b.n	8010422 <__kernel_rem_pio2f+0x302>
 80104cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80104d0:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 80104d4:	9204      	str	r2, [sp, #16]
 80104d6:	9303      	str	r3, [sp, #12]
 80104d8:	f7f0 fc50 	bl	8000d7c <__aeabi_fmul>
 80104dc:	4601      	mov	r1, r0
 80104de:	4648      	mov	r0, r9
 80104e0:	f7f0 fb44 	bl	8000b6c <__addsf3>
 80104e4:	4681      	mov	r9, r0
 80104e6:	9a04      	ldr	r2, [sp, #16]
 80104e8:	9b03      	ldr	r3, [sp, #12]
 80104ea:	3601      	adds	r6, #1
 80104ec:	9902      	ldr	r1, [sp, #8]
 80104ee:	428e      	cmp	r6, r1
 80104f0:	dc01      	bgt.n	80104f6 <__kernel_rem_pio2f+0x3d6>
 80104f2:	42be      	cmp	r6, r7
 80104f4:	ddea      	ble.n	80104cc <__kernel_rem_pio2f+0x3ac>
 80104f6:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 80104fa:	3701      	adds	r7, #1
 80104fc:	e799      	b.n	8010432 <__kernel_rem_pio2f+0x312>
 80104fe:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8010500:	2b03      	cmp	r3, #3
 8010502:	d826      	bhi.n	8010552 <__kernel_rem_pio2f+0x432>
 8010504:	e8df f003 	tbb	[pc, r3]
 8010508:	2a02021c 	.word	0x2a02021c
 801050c:	4626      	mov	r6, r4
 801050e:	2000      	movs	r0, #0
 8010510:	af30      	add	r7, sp, #192	; 0xc0
 8010512:	2e00      	cmp	r6, #0
 8010514:	da40      	bge.n	8010598 <__kernel_rem_pio2f+0x478>
 8010516:	2d00      	cmp	r5, #0
 8010518:	d044      	beq.n	80105a4 <__kernel_rem_pio2f+0x484>
 801051a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 801051e:	9a01      	ldr	r2, [sp, #4]
 8010520:	af58      	add	r7, sp, #352	; 0x160
 8010522:	4601      	mov	r1, r0
 8010524:	6013      	str	r3, [r2, #0]
 8010526:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 801052a:	f7f0 fb1d 	bl	8000b68 <__aeabi_fsub>
 801052e:	2601      	movs	r6, #1
 8010530:	42b4      	cmp	r4, r6
 8010532:	da39      	bge.n	80105a8 <__kernel_rem_pio2f+0x488>
 8010534:	b10d      	cbz	r5, 801053a <__kernel_rem_pio2f+0x41a>
 8010536:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801053a:	9b01      	ldr	r3, [sp, #4]
 801053c:	6058      	str	r0, [r3, #4]
 801053e:	e008      	b.n	8010552 <__kernel_rem_pio2f+0x432>
 8010540:	2000      	movs	r0, #0
 8010542:	ae30      	add	r6, sp, #192	; 0xc0
 8010544:	2c00      	cmp	r4, #0
 8010546:	da21      	bge.n	801058c <__kernel_rem_pio2f+0x46c>
 8010548:	b10d      	cbz	r5, 801054e <__kernel_rem_pio2f+0x42e>
 801054a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801054e:	9b01      	ldr	r3, [sp, #4]
 8010550:	6018      	str	r0, [r3, #0]
 8010552:	f008 0007 	and.w	r0, r8, #7
 8010556:	b059      	add	sp, #356	; 0x164
 8010558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055c:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 8010560:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 8010564:	4637      	mov	r7, r6
 8010566:	46a1      	mov	r9, r4
 8010568:	f1b9 0f00 	cmp.w	r9, #0
 801056c:	dc22      	bgt.n	80105b4 <__kernel_rem_pio2f+0x494>
 801056e:	4627      	mov	r7, r4
 8010570:	2f01      	cmp	r7, #1
 8010572:	dc38      	bgt.n	80105e6 <__kernel_rem_pio2f+0x4c6>
 8010574:	2000      	movs	r0, #0
 8010576:	2c01      	cmp	r4, #1
 8010578:	dc4c      	bgt.n	8010614 <__kernel_rem_pio2f+0x4f4>
 801057a:	2d00      	cmp	r5, #0
 801057c:	d150      	bne.n	8010620 <__kernel_rem_pio2f+0x500>
 801057e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8010580:	9a01      	ldr	r2, [sp, #4]
 8010582:	6013      	str	r3, [r2, #0]
 8010584:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8010586:	6053      	str	r3, [r2, #4]
 8010588:	6090      	str	r0, [r2, #8]
 801058a:	e7e2      	b.n	8010552 <__kernel_rem_pio2f+0x432>
 801058c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8010590:	f7f0 faec 	bl	8000b6c <__addsf3>
 8010594:	3c01      	subs	r4, #1
 8010596:	e7d5      	b.n	8010544 <__kernel_rem_pio2f+0x424>
 8010598:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 801059c:	f7f0 fae6 	bl	8000b6c <__addsf3>
 80105a0:	3e01      	subs	r6, #1
 80105a2:	e7b6      	b.n	8010512 <__kernel_rem_pio2f+0x3f2>
 80105a4:	4603      	mov	r3, r0
 80105a6:	e7ba      	b.n	801051e <__kernel_rem_pio2f+0x3fe>
 80105a8:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80105ac:	f7f0 fade 	bl	8000b6c <__addsf3>
 80105b0:	3601      	adds	r6, #1
 80105b2:	e7bd      	b.n	8010530 <__kernel_rem_pio2f+0x410>
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80105ba:	4619      	mov	r1, r3
 80105bc:	4610      	mov	r0, r2
 80105be:	9303      	str	r3, [sp, #12]
 80105c0:	9202      	str	r2, [sp, #8]
 80105c2:	f7f0 fad3 	bl	8000b6c <__addsf3>
 80105c6:	9a02      	ldr	r2, [sp, #8]
 80105c8:	4601      	mov	r1, r0
 80105ca:	4683      	mov	fp, r0
 80105cc:	4610      	mov	r0, r2
 80105ce:	f7f0 facb 	bl	8000b68 <__aeabi_fsub>
 80105d2:	9b03      	ldr	r3, [sp, #12]
 80105d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80105d8:	4619      	mov	r1, r3
 80105da:	f7f0 fac7 	bl	8000b6c <__addsf3>
 80105de:	6038      	str	r0, [r7, #0]
 80105e0:	f847 bd04 	str.w	fp, [r7, #-4]!
 80105e4:	e7c0      	b.n	8010568 <__kernel_rem_pio2f+0x448>
 80105e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80105ea:	f8d6 b000 	ldr.w	fp, [r6]
 80105ee:	4618      	mov	r0, r3
 80105f0:	4659      	mov	r1, fp
 80105f2:	9302      	str	r3, [sp, #8]
 80105f4:	f7f0 faba 	bl	8000b6c <__addsf3>
 80105f8:	9b02      	ldr	r3, [sp, #8]
 80105fa:	4601      	mov	r1, r0
 80105fc:	4681      	mov	r9, r0
 80105fe:	4618      	mov	r0, r3
 8010600:	f7f0 fab2 	bl	8000b68 <__aeabi_fsub>
 8010604:	4659      	mov	r1, fp
 8010606:	f7f0 fab1 	bl	8000b6c <__addsf3>
 801060a:	3f01      	subs	r7, #1
 801060c:	6030      	str	r0, [r6, #0]
 801060e:	f846 9d04 	str.w	r9, [r6, #-4]!
 8010612:	e7ad      	b.n	8010570 <__kernel_rem_pio2f+0x450>
 8010614:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8010618:	f7f0 faa8 	bl	8000b6c <__addsf3>
 801061c:	3c01      	subs	r4, #1
 801061e:	e7aa      	b.n	8010576 <__kernel_rem_pio2f+0x456>
 8010620:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8010622:	9a01      	ldr	r2, [sp, #4]
 8010624:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010628:	6013      	str	r3, [r2, #0]
 801062a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801062c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010630:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010634:	6053      	str	r3, [r2, #4]
 8010636:	e7a7      	b.n	8010588 <__kernel_rem_pio2f+0x468>
 8010638:	08011c38 	.word	0x08011c38

0801063c <__kernel_sinf>:
 801063c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010640:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010644:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010648:	4604      	mov	r4, r0
 801064a:	460f      	mov	r7, r1
 801064c:	4691      	mov	r9, r2
 801064e:	da03      	bge.n	8010658 <__kernel_sinf+0x1c>
 8010650:	f7f0 fd70 	bl	8001134 <__aeabi_f2iz>
 8010654:	2800      	cmp	r0, #0
 8010656:	d035      	beq.n	80106c4 <__kernel_sinf+0x88>
 8010658:	4621      	mov	r1, r4
 801065a:	4620      	mov	r0, r4
 801065c:	f7f0 fb8e 	bl	8000d7c <__aeabi_fmul>
 8010660:	4605      	mov	r5, r0
 8010662:	4601      	mov	r1, r0
 8010664:	4620      	mov	r0, r4
 8010666:	f7f0 fb89 	bl	8000d7c <__aeabi_fmul>
 801066a:	4929      	ldr	r1, [pc, #164]	; (8010710 <__kernel_sinf+0xd4>)
 801066c:	4606      	mov	r6, r0
 801066e:	4628      	mov	r0, r5
 8010670:	f7f0 fb84 	bl	8000d7c <__aeabi_fmul>
 8010674:	4927      	ldr	r1, [pc, #156]	; (8010714 <__kernel_sinf+0xd8>)
 8010676:	f7f0 fa77 	bl	8000b68 <__aeabi_fsub>
 801067a:	4629      	mov	r1, r5
 801067c:	f7f0 fb7e 	bl	8000d7c <__aeabi_fmul>
 8010680:	4925      	ldr	r1, [pc, #148]	; (8010718 <__kernel_sinf+0xdc>)
 8010682:	f7f0 fa73 	bl	8000b6c <__addsf3>
 8010686:	4629      	mov	r1, r5
 8010688:	f7f0 fb78 	bl	8000d7c <__aeabi_fmul>
 801068c:	4923      	ldr	r1, [pc, #140]	; (801071c <__kernel_sinf+0xe0>)
 801068e:	f7f0 fa6b 	bl	8000b68 <__aeabi_fsub>
 8010692:	4629      	mov	r1, r5
 8010694:	f7f0 fb72 	bl	8000d7c <__aeabi_fmul>
 8010698:	4921      	ldr	r1, [pc, #132]	; (8010720 <__kernel_sinf+0xe4>)
 801069a:	f7f0 fa67 	bl	8000b6c <__addsf3>
 801069e:	4680      	mov	r8, r0
 80106a0:	f1b9 0f00 	cmp.w	r9, #0
 80106a4:	d111      	bne.n	80106ca <__kernel_sinf+0x8e>
 80106a6:	4601      	mov	r1, r0
 80106a8:	4628      	mov	r0, r5
 80106aa:	f7f0 fb67 	bl	8000d7c <__aeabi_fmul>
 80106ae:	491d      	ldr	r1, [pc, #116]	; (8010724 <__kernel_sinf+0xe8>)
 80106b0:	f7f0 fa5a 	bl	8000b68 <__aeabi_fsub>
 80106b4:	4631      	mov	r1, r6
 80106b6:	f7f0 fb61 	bl	8000d7c <__aeabi_fmul>
 80106ba:	4601      	mov	r1, r0
 80106bc:	4620      	mov	r0, r4
 80106be:	f7f0 fa55 	bl	8000b6c <__addsf3>
 80106c2:	4604      	mov	r4, r0
 80106c4:	4620      	mov	r0, r4
 80106c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80106ce:	4638      	mov	r0, r7
 80106d0:	f7f0 fb54 	bl	8000d7c <__aeabi_fmul>
 80106d4:	4641      	mov	r1, r8
 80106d6:	4681      	mov	r9, r0
 80106d8:	4630      	mov	r0, r6
 80106da:	f7f0 fb4f 	bl	8000d7c <__aeabi_fmul>
 80106de:	4601      	mov	r1, r0
 80106e0:	4648      	mov	r0, r9
 80106e2:	f7f0 fa41 	bl	8000b68 <__aeabi_fsub>
 80106e6:	4629      	mov	r1, r5
 80106e8:	f7f0 fb48 	bl	8000d7c <__aeabi_fmul>
 80106ec:	4639      	mov	r1, r7
 80106ee:	f7f0 fa3b 	bl	8000b68 <__aeabi_fsub>
 80106f2:	490c      	ldr	r1, [pc, #48]	; (8010724 <__kernel_sinf+0xe8>)
 80106f4:	4605      	mov	r5, r0
 80106f6:	4630      	mov	r0, r6
 80106f8:	f7f0 fb40 	bl	8000d7c <__aeabi_fmul>
 80106fc:	4601      	mov	r1, r0
 80106fe:	4628      	mov	r0, r5
 8010700:	f7f0 fa34 	bl	8000b6c <__addsf3>
 8010704:	4601      	mov	r1, r0
 8010706:	4620      	mov	r0, r4
 8010708:	f7f0 fa2e 	bl	8000b68 <__aeabi_fsub>
 801070c:	e7d9      	b.n	80106c2 <__kernel_sinf+0x86>
 801070e:	bf00      	nop
 8010710:	2f2ec9d3 	.word	0x2f2ec9d3
 8010714:	32d72f34 	.word	0x32d72f34
 8010718:	3638ef1b 	.word	0x3638ef1b
 801071c:	39500d01 	.word	0x39500d01
 8010720:	3c088889 	.word	0x3c088889
 8010724:	3e2aaaab 	.word	0x3e2aaaab

08010728 <fabs>:
 8010728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801072c:	4770      	bx	lr

0801072e <finite>:
 801072e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8010732:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8010736:	0fc0      	lsrs	r0, r0, #31
 8010738:	4770      	bx	lr

0801073a <matherr>:
 801073a:	2000      	movs	r0, #0
 801073c:	4770      	bx	lr
	...

08010740 <nan>:
 8010740:	2000      	movs	r0, #0
 8010742:	4901      	ldr	r1, [pc, #4]	; (8010748 <nan+0x8>)
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop
 8010748:	7ff80000 	.word	0x7ff80000

0801074c <rint>:
 801074c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801074e:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 8010752:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 8010756:	2f13      	cmp	r7, #19
 8010758:	4602      	mov	r2, r0
 801075a:	460b      	mov	r3, r1
 801075c:	4684      	mov	ip, r0
 801075e:	460c      	mov	r4, r1
 8010760:	4605      	mov	r5, r0
 8010762:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8010766:	dc56      	bgt.n	8010816 <rint+0xca>
 8010768:	2f00      	cmp	r7, #0
 801076a:	da29      	bge.n	80107c0 <rint+0x74>
 801076c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010770:	4301      	orrs	r1, r0
 8010772:	d021      	beq.n	80107b8 <rint+0x6c>
 8010774:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8010778:	4305      	orrs	r5, r0
 801077a:	426b      	negs	r3, r5
 801077c:	432b      	orrs	r3, r5
 801077e:	0b1b      	lsrs	r3, r3, #12
 8010780:	0c64      	lsrs	r4, r4, #17
 8010782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010786:	0464      	lsls	r4, r4, #17
 8010788:	ea43 0104 	orr.w	r1, r3, r4
 801078c:	4b31      	ldr	r3, [pc, #196]	; (8010854 <rint+0x108>)
 801078e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010792:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010796:	4622      	mov	r2, r4
 8010798:	462b      	mov	r3, r5
 801079a:	f7ef fce7 	bl	800016c <__adddf3>
 801079e:	e9cd 0100 	strd	r0, r1, [sp]
 80107a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107a6:	4622      	mov	r2, r4
 80107a8:	462b      	mov	r3, r5
 80107aa:	f7ef fcdd 	bl	8000168 <__aeabi_dsub>
 80107ae:	4602      	mov	r2, r0
 80107b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80107b4:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 80107b8:	4610      	mov	r0, r2
 80107ba:	4619      	mov	r1, r3
 80107bc:	b003      	add	sp, #12
 80107be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c0:	4925      	ldr	r1, [pc, #148]	; (8010858 <rint+0x10c>)
 80107c2:	4139      	asrs	r1, r7
 80107c4:	ea03 0001 	and.w	r0, r3, r1
 80107c8:	4310      	orrs	r0, r2
 80107ca:	d0f5      	beq.n	80107b8 <rint+0x6c>
 80107cc:	084b      	lsrs	r3, r1, #1
 80107ce:	ea04 0203 	and.w	r2, r4, r3
 80107d2:	ea52 050c 	orrs.w	r5, r2, ip
 80107d6:	d00a      	beq.n	80107ee <rint+0xa2>
 80107d8:	ea24 0303 	bic.w	r3, r4, r3
 80107dc:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80107e0:	2f13      	cmp	r7, #19
 80107e2:	bf0c      	ite	eq
 80107e4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80107e8:	2500      	movne	r5, #0
 80107ea:	413c      	asrs	r4, r7
 80107ec:	431c      	orrs	r4, r3
 80107ee:	4b19      	ldr	r3, [pc, #100]	; (8010854 <rint+0x108>)
 80107f0:	4621      	mov	r1, r4
 80107f2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80107f6:	4628      	mov	r0, r5
 80107f8:	e9d6 4500 	ldrd	r4, r5, [r6]
 80107fc:	4622      	mov	r2, r4
 80107fe:	462b      	mov	r3, r5
 8010800:	f7ef fcb4 	bl	800016c <__adddf3>
 8010804:	e9cd 0100 	strd	r0, r1, [sp]
 8010808:	e9dd 0100 	ldrd	r0, r1, [sp]
 801080c:	4622      	mov	r2, r4
 801080e:	462b      	mov	r3, r5
 8010810:	f7ef fcaa 	bl	8000168 <__aeabi_dsub>
 8010814:	e006      	b.n	8010824 <rint+0xd8>
 8010816:	2f33      	cmp	r7, #51	; 0x33
 8010818:	dd07      	ble.n	801082a <rint+0xde>
 801081a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 801081e:	d1cb      	bne.n	80107b8 <rint+0x6c>
 8010820:	f7ef fca4 	bl	800016c <__adddf3>
 8010824:	4602      	mov	r2, r0
 8010826:	460b      	mov	r3, r1
 8010828:	e7c6      	b.n	80107b8 <rint+0x6c>
 801082a:	f04f 31ff 	mov.w	r1, #4294967295
 801082e:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 8010832:	fa21 f10e 	lsr.w	r1, r1, lr
 8010836:	4208      	tst	r0, r1
 8010838:	d0be      	beq.n	80107b8 <rint+0x6c>
 801083a:	084b      	lsrs	r3, r1, #1
 801083c:	4218      	tst	r0, r3
 801083e:	bf1f      	itttt	ne
 8010840:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8010844:	ea20 0303 	bicne.w	r3, r0, r3
 8010848:	fa45 fe0e 	asrne.w	lr, r5, lr
 801084c:	ea4e 0503 	orrne.w	r5, lr, r3
 8010850:	e7cd      	b.n	80107ee <rint+0xa2>
 8010852:	bf00      	nop
 8010854:	08011c70 	.word	0x08011c70
 8010858:	000fffff 	.word	0x000fffff
 801085c:	00000000 	.word	0x00000000

08010860 <scalbn>:
 8010860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010862:	4616      	mov	r6, r2
 8010864:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010868:	4604      	mov	r4, r0
 801086a:	460d      	mov	r5, r1
 801086c:	460b      	mov	r3, r1
 801086e:	b98a      	cbnz	r2, 8010894 <scalbn+0x34>
 8010870:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010874:	4303      	orrs	r3, r0
 8010876:	d035      	beq.n	80108e4 <scalbn+0x84>
 8010878:	2200      	movs	r2, #0
 801087a:	4b2d      	ldr	r3, [pc, #180]	; (8010930 <scalbn+0xd0>)
 801087c:	f7ef fe28 	bl	80004d0 <__aeabi_dmul>
 8010880:	4a2c      	ldr	r2, [pc, #176]	; (8010934 <scalbn+0xd4>)
 8010882:	4604      	mov	r4, r0
 8010884:	4296      	cmp	r6, r2
 8010886:	460d      	mov	r5, r1
 8010888:	460b      	mov	r3, r1
 801088a:	da0e      	bge.n	80108aa <scalbn+0x4a>
 801088c:	a324      	add	r3, pc, #144	; (adr r3, 8010920 <scalbn+0xc0>)
 801088e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010892:	e01c      	b.n	80108ce <scalbn+0x6e>
 8010894:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8010898:	42ba      	cmp	r2, r7
 801089a:	d109      	bne.n	80108b0 <scalbn+0x50>
 801089c:	4602      	mov	r2, r0
 801089e:	460b      	mov	r3, r1
 80108a0:	f7ef fc64 	bl	800016c <__adddf3>
 80108a4:	4604      	mov	r4, r0
 80108a6:	460d      	mov	r5, r1
 80108a8:	e01c      	b.n	80108e4 <scalbn+0x84>
 80108aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80108ae:	3a36      	subs	r2, #54	; 0x36
 80108b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80108b4:	4432      	add	r2, r6
 80108b6:	428a      	cmp	r2, r1
 80108b8:	dd0c      	ble.n	80108d4 <scalbn+0x74>
 80108ba:	4622      	mov	r2, r4
 80108bc:	462b      	mov	r3, r5
 80108be:	a11a      	add	r1, pc, #104	; (adr r1, 8010928 <scalbn+0xc8>)
 80108c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108c4:	f000 f9e2 	bl	8010c8c <copysign>
 80108c8:	a317      	add	r3, pc, #92	; (adr r3, 8010928 <scalbn+0xc8>)
 80108ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ce:	f7ef fdff 	bl	80004d0 <__aeabi_dmul>
 80108d2:	e7e7      	b.n	80108a4 <scalbn+0x44>
 80108d4:	2a00      	cmp	r2, #0
 80108d6:	dd08      	ble.n	80108ea <scalbn+0x8a>
 80108d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80108dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80108e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80108e4:	4620      	mov	r0, r4
 80108e6:	4629      	mov	r1, r5
 80108e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108ea:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80108ee:	da0b      	bge.n	8010908 <scalbn+0xa8>
 80108f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80108f4:	429e      	cmp	r6, r3
 80108f6:	4622      	mov	r2, r4
 80108f8:	462b      	mov	r3, r5
 80108fa:	dce0      	bgt.n	80108be <scalbn+0x5e>
 80108fc:	a108      	add	r1, pc, #32	; (adr r1, 8010920 <scalbn+0xc0>)
 80108fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010902:	f000 f9c3 	bl	8010c8c <copysign>
 8010906:	e7c1      	b.n	801088c <scalbn+0x2c>
 8010908:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801090c:	3236      	adds	r2, #54	; 0x36
 801090e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010912:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010916:	4620      	mov	r0, r4
 8010918:	4629      	mov	r1, r5
 801091a:	2200      	movs	r2, #0
 801091c:	4b06      	ldr	r3, [pc, #24]	; (8010938 <scalbn+0xd8>)
 801091e:	e7d6      	b.n	80108ce <scalbn+0x6e>
 8010920:	c2f8f359 	.word	0xc2f8f359
 8010924:	01a56e1f 	.word	0x01a56e1f
 8010928:	8800759c 	.word	0x8800759c
 801092c:	7e37e43c 	.word	0x7e37e43c
 8010930:	43500000 	.word	0x43500000
 8010934:	ffff3cb0 	.word	0xffff3cb0
 8010938:	3c900000 	.word	0x3c900000

0801093c <atanf>:
 801093c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010940:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8010944:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8010948:	4604      	mov	r4, r0
 801094a:	4607      	mov	r7, r0
 801094c:	db0e      	blt.n	801096c <atanf+0x30>
 801094e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010952:	dd04      	ble.n	801095e <atanf+0x22>
 8010954:	4601      	mov	r1, r0
 8010956:	f7f0 f909 	bl	8000b6c <__addsf3>
 801095a:	4604      	mov	r4, r0
 801095c:	e003      	b.n	8010966 <atanf+0x2a>
 801095e:	2800      	cmp	r0, #0
 8010960:	f300 80d2 	bgt.w	8010b08 <atanf+0x1cc>
 8010964:	4c69      	ldr	r4, [pc, #420]	; (8010b0c <atanf+0x1d0>)
 8010966:	4620      	mov	r0, r4
 8010968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801096c:	4b68      	ldr	r3, [pc, #416]	; (8010b10 <atanf+0x1d4>)
 801096e:	429d      	cmp	r5, r3
 8010970:	dc0e      	bgt.n	8010990 <atanf+0x54>
 8010972:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8010976:	da08      	bge.n	801098a <atanf+0x4e>
 8010978:	4966      	ldr	r1, [pc, #408]	; (8010b14 <atanf+0x1d8>)
 801097a:	f7f0 f8f7 	bl	8000b6c <__addsf3>
 801097e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010982:	f7f0 fbb7 	bl	80010f4 <__aeabi_fcmpgt>
 8010986:	2800      	cmp	r0, #0
 8010988:	d1ed      	bne.n	8010966 <atanf+0x2a>
 801098a:	f04f 36ff 	mov.w	r6, #4294967295
 801098e:	e01c      	b.n	80109ca <atanf+0x8e>
 8010990:	f000 f8e4 	bl	8010b5c <fabsf>
 8010994:	4b60      	ldr	r3, [pc, #384]	; (8010b18 <atanf+0x1dc>)
 8010996:	4604      	mov	r4, r0
 8010998:	429d      	cmp	r5, r3
 801099a:	dc7c      	bgt.n	8010a96 <atanf+0x15a>
 801099c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80109a0:	429d      	cmp	r5, r3
 80109a2:	dc67      	bgt.n	8010a74 <atanf+0x138>
 80109a4:	4601      	mov	r1, r0
 80109a6:	f7f0 f8e1 	bl	8000b6c <__addsf3>
 80109aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80109ae:	f7f0 f8db 	bl	8000b68 <__aeabi_fsub>
 80109b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80109b6:	4605      	mov	r5, r0
 80109b8:	4620      	mov	r0, r4
 80109ba:	f7f0 f8d7 	bl	8000b6c <__addsf3>
 80109be:	4601      	mov	r1, r0
 80109c0:	4628      	mov	r0, r5
 80109c2:	f7f0 fa8f 	bl	8000ee4 <__aeabi_fdiv>
 80109c6:	2600      	movs	r6, #0
 80109c8:	4604      	mov	r4, r0
 80109ca:	4621      	mov	r1, r4
 80109cc:	4620      	mov	r0, r4
 80109ce:	f7f0 f9d5 	bl	8000d7c <__aeabi_fmul>
 80109d2:	4601      	mov	r1, r0
 80109d4:	4680      	mov	r8, r0
 80109d6:	f7f0 f9d1 	bl	8000d7c <__aeabi_fmul>
 80109da:	4605      	mov	r5, r0
 80109dc:	494f      	ldr	r1, [pc, #316]	; (8010b1c <atanf+0x1e0>)
 80109de:	f7f0 f9cd 	bl	8000d7c <__aeabi_fmul>
 80109e2:	494f      	ldr	r1, [pc, #316]	; (8010b20 <atanf+0x1e4>)
 80109e4:	f7f0 f8c2 	bl	8000b6c <__addsf3>
 80109e8:	4629      	mov	r1, r5
 80109ea:	f7f0 f9c7 	bl	8000d7c <__aeabi_fmul>
 80109ee:	494d      	ldr	r1, [pc, #308]	; (8010b24 <atanf+0x1e8>)
 80109f0:	f7f0 f8bc 	bl	8000b6c <__addsf3>
 80109f4:	4629      	mov	r1, r5
 80109f6:	f7f0 f9c1 	bl	8000d7c <__aeabi_fmul>
 80109fa:	494b      	ldr	r1, [pc, #300]	; (8010b28 <atanf+0x1ec>)
 80109fc:	f7f0 f8b6 	bl	8000b6c <__addsf3>
 8010a00:	4629      	mov	r1, r5
 8010a02:	f7f0 f9bb 	bl	8000d7c <__aeabi_fmul>
 8010a06:	4949      	ldr	r1, [pc, #292]	; (8010b2c <atanf+0x1f0>)
 8010a08:	f7f0 f8b0 	bl	8000b6c <__addsf3>
 8010a0c:	4629      	mov	r1, r5
 8010a0e:	f7f0 f9b5 	bl	8000d7c <__aeabi_fmul>
 8010a12:	4947      	ldr	r1, [pc, #284]	; (8010b30 <atanf+0x1f4>)
 8010a14:	f7f0 f8aa 	bl	8000b6c <__addsf3>
 8010a18:	4641      	mov	r1, r8
 8010a1a:	f7f0 f9af 	bl	8000d7c <__aeabi_fmul>
 8010a1e:	4945      	ldr	r1, [pc, #276]	; (8010b34 <atanf+0x1f8>)
 8010a20:	4680      	mov	r8, r0
 8010a22:	4628      	mov	r0, r5
 8010a24:	f7f0 f9aa 	bl	8000d7c <__aeabi_fmul>
 8010a28:	4943      	ldr	r1, [pc, #268]	; (8010b38 <atanf+0x1fc>)
 8010a2a:	f7f0 f89d 	bl	8000b68 <__aeabi_fsub>
 8010a2e:	4629      	mov	r1, r5
 8010a30:	f7f0 f9a4 	bl	8000d7c <__aeabi_fmul>
 8010a34:	4941      	ldr	r1, [pc, #260]	; (8010b3c <atanf+0x200>)
 8010a36:	f7f0 f897 	bl	8000b68 <__aeabi_fsub>
 8010a3a:	4629      	mov	r1, r5
 8010a3c:	f7f0 f99e 	bl	8000d7c <__aeabi_fmul>
 8010a40:	493f      	ldr	r1, [pc, #252]	; (8010b40 <atanf+0x204>)
 8010a42:	f7f0 f891 	bl	8000b68 <__aeabi_fsub>
 8010a46:	4629      	mov	r1, r5
 8010a48:	f7f0 f998 	bl	8000d7c <__aeabi_fmul>
 8010a4c:	493d      	ldr	r1, [pc, #244]	; (8010b44 <atanf+0x208>)
 8010a4e:	f7f0 f88b 	bl	8000b68 <__aeabi_fsub>
 8010a52:	4629      	mov	r1, r5
 8010a54:	f7f0 f992 	bl	8000d7c <__aeabi_fmul>
 8010a58:	1c73      	adds	r3, r6, #1
 8010a5a:	4601      	mov	r1, r0
 8010a5c:	4640      	mov	r0, r8
 8010a5e:	d139      	bne.n	8010ad4 <atanf+0x198>
 8010a60:	f7f0 f884 	bl	8000b6c <__addsf3>
 8010a64:	4621      	mov	r1, r4
 8010a66:	f7f0 f989 	bl	8000d7c <__aeabi_fmul>
 8010a6a:	4601      	mov	r1, r0
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	f7f0 f87b 	bl	8000b68 <__aeabi_fsub>
 8010a72:	e772      	b.n	801095a <atanf+0x1e>
 8010a74:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010a78:	f7f0 f876 	bl	8000b68 <__aeabi_fsub>
 8010a7c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010a80:	4605      	mov	r5, r0
 8010a82:	4620      	mov	r0, r4
 8010a84:	f7f0 f872 	bl	8000b6c <__addsf3>
 8010a88:	4601      	mov	r1, r0
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	f7f0 fa2a 	bl	8000ee4 <__aeabi_fdiv>
 8010a90:	2601      	movs	r6, #1
 8010a92:	4604      	mov	r4, r0
 8010a94:	e799      	b.n	80109ca <atanf+0x8e>
 8010a96:	4b2c      	ldr	r3, [pc, #176]	; (8010b48 <atanf+0x20c>)
 8010a98:	429d      	cmp	r5, r3
 8010a9a:	dc14      	bgt.n	8010ac6 <atanf+0x18a>
 8010a9c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8010aa0:	f7f0 f862 	bl	8000b68 <__aeabi_fsub>
 8010aa4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8010aa8:	4605      	mov	r5, r0
 8010aaa:	4620      	mov	r0, r4
 8010aac:	f7f0 f966 	bl	8000d7c <__aeabi_fmul>
 8010ab0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010ab4:	f7f0 f85a 	bl	8000b6c <__addsf3>
 8010ab8:	4601      	mov	r1, r0
 8010aba:	4628      	mov	r0, r5
 8010abc:	f7f0 fa12 	bl	8000ee4 <__aeabi_fdiv>
 8010ac0:	2602      	movs	r6, #2
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	e781      	b.n	80109ca <atanf+0x8e>
 8010ac6:	4601      	mov	r1, r0
 8010ac8:	4820      	ldr	r0, [pc, #128]	; (8010b4c <atanf+0x210>)
 8010aca:	f7f0 fa0b 	bl	8000ee4 <__aeabi_fdiv>
 8010ace:	2603      	movs	r6, #3
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	e77a      	b.n	80109ca <atanf+0x8e>
 8010ad4:	f7f0 f84a 	bl	8000b6c <__addsf3>
 8010ad8:	4621      	mov	r1, r4
 8010ada:	f7f0 f94f 	bl	8000d7c <__aeabi_fmul>
 8010ade:	4b1c      	ldr	r3, [pc, #112]	; (8010b50 <atanf+0x214>)
 8010ae0:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8010ae4:	f7f0 f840 	bl	8000b68 <__aeabi_fsub>
 8010ae8:	4621      	mov	r1, r4
 8010aea:	f7f0 f83d 	bl	8000b68 <__aeabi_fsub>
 8010aee:	4b19      	ldr	r3, [pc, #100]	; (8010b54 <atanf+0x218>)
 8010af0:	4601      	mov	r1, r0
 8010af2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010af6:	f7f0 f837 	bl	8000b68 <__aeabi_fsub>
 8010afa:	2f00      	cmp	r7, #0
 8010afc:	4604      	mov	r4, r0
 8010afe:	f6bf af32 	bge.w	8010966 <atanf+0x2a>
 8010b02:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8010b06:	e72e      	b.n	8010966 <atanf+0x2a>
 8010b08:	4c13      	ldr	r4, [pc, #76]	; (8010b58 <atanf+0x21c>)
 8010b0a:	e72c      	b.n	8010966 <atanf+0x2a>
 8010b0c:	bfc90fdb 	.word	0xbfc90fdb
 8010b10:	3edfffff 	.word	0x3edfffff
 8010b14:	7149f2ca 	.word	0x7149f2ca
 8010b18:	3f97ffff 	.word	0x3f97ffff
 8010b1c:	3c8569d7 	.word	0x3c8569d7
 8010b20:	3d4bda59 	.word	0x3d4bda59
 8010b24:	3d886b35 	.word	0x3d886b35
 8010b28:	3dba2e6e 	.word	0x3dba2e6e
 8010b2c:	3e124925 	.word	0x3e124925
 8010b30:	3eaaaaab 	.word	0x3eaaaaab
 8010b34:	bd15a221 	.word	0xbd15a221
 8010b38:	3d6ef16b 	.word	0x3d6ef16b
 8010b3c:	3d9d8795 	.word	0x3d9d8795
 8010b40:	3de38e38 	.word	0x3de38e38
 8010b44:	3e4ccccd 	.word	0x3e4ccccd
 8010b48:	401bffff 	.word	0x401bffff
 8010b4c:	bf800000 	.word	0xbf800000
 8010b50:	08011c90 	.word	0x08011c90
 8010b54:	08011c80 	.word	0x08011c80
 8010b58:	3fc90fdb 	.word	0x3fc90fdb

08010b5c <fabsf>:
 8010b5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010b60:	4770      	bx	lr

08010b62 <finitef>:
 8010b62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010b66:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010b6a:	bfac      	ite	ge
 8010b6c:	2000      	movge	r0, #0
 8010b6e:	2001      	movlt	r0, #1
 8010b70:	4770      	bx	lr
	...

08010b74 <floorf>:
 8010b74:	b570      	push	{r4, r5, r6, lr}
 8010b76:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8010b7a:	0df5      	lsrs	r5, r6, #23
 8010b7c:	3d7f      	subs	r5, #127	; 0x7f
 8010b7e:	2d16      	cmp	r5, #22
 8010b80:	4601      	mov	r1, r0
 8010b82:	4604      	mov	r4, r0
 8010b84:	dc26      	bgt.n	8010bd4 <floorf+0x60>
 8010b86:	2d00      	cmp	r5, #0
 8010b88:	da0e      	bge.n	8010ba8 <floorf+0x34>
 8010b8a:	4917      	ldr	r1, [pc, #92]	; (8010be8 <floorf+0x74>)
 8010b8c:	f7ef ffee 	bl	8000b6c <__addsf3>
 8010b90:	2100      	movs	r1, #0
 8010b92:	f7f0 faaf 	bl	80010f4 <__aeabi_fcmpgt>
 8010b96:	b128      	cbz	r0, 8010ba4 <floorf+0x30>
 8010b98:	2c00      	cmp	r4, #0
 8010b9a:	da23      	bge.n	8010be4 <floorf+0x70>
 8010b9c:	4b13      	ldr	r3, [pc, #76]	; (8010bec <floorf+0x78>)
 8010b9e:	2e00      	cmp	r6, #0
 8010ba0:	bf18      	it	ne
 8010ba2:	461c      	movne	r4, r3
 8010ba4:	4621      	mov	r1, r4
 8010ba6:	e01b      	b.n	8010be0 <floorf+0x6c>
 8010ba8:	4e11      	ldr	r6, [pc, #68]	; (8010bf0 <floorf+0x7c>)
 8010baa:	412e      	asrs	r6, r5
 8010bac:	4230      	tst	r0, r6
 8010bae:	d017      	beq.n	8010be0 <floorf+0x6c>
 8010bb0:	490d      	ldr	r1, [pc, #52]	; (8010be8 <floorf+0x74>)
 8010bb2:	f7ef ffdb 	bl	8000b6c <__addsf3>
 8010bb6:	2100      	movs	r1, #0
 8010bb8:	f7f0 fa9c 	bl	80010f4 <__aeabi_fcmpgt>
 8010bbc:	2800      	cmp	r0, #0
 8010bbe:	d0f1      	beq.n	8010ba4 <floorf+0x30>
 8010bc0:	2c00      	cmp	r4, #0
 8010bc2:	bfbe      	ittt	lt
 8010bc4:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8010bc8:	fa43 f505 	asrlt.w	r5, r3, r5
 8010bcc:	1964      	addlt	r4, r4, r5
 8010bce:	ea24 0406 	bic.w	r4, r4, r6
 8010bd2:	e7e7      	b.n	8010ba4 <floorf+0x30>
 8010bd4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8010bd8:	d302      	bcc.n	8010be0 <floorf+0x6c>
 8010bda:	f7ef ffc7 	bl	8000b6c <__addsf3>
 8010bde:	4601      	mov	r1, r0
 8010be0:	4608      	mov	r0, r1
 8010be2:	bd70      	pop	{r4, r5, r6, pc}
 8010be4:	2400      	movs	r4, #0
 8010be6:	e7dd      	b.n	8010ba4 <floorf+0x30>
 8010be8:	7149f2ca 	.word	0x7149f2ca
 8010bec:	bf800000 	.word	0xbf800000
 8010bf0:	007fffff 	.word	0x007fffff

08010bf4 <scalbnf>:
 8010bf4:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	460c      	mov	r4, r1
 8010bfe:	d028      	beq.n	8010c52 <scalbnf+0x5e>
 8010c00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010c04:	d304      	bcc.n	8010c10 <scalbnf+0x1c>
 8010c06:	4601      	mov	r1, r0
 8010c08:	f7ef ffb0 	bl	8000b6c <__addsf3>
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	e020      	b.n	8010c52 <scalbnf+0x5e>
 8010c10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010c14:	d215      	bcs.n	8010c42 <scalbnf+0x4e>
 8010c16:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8010c1a:	f7f0 f8af 	bl	8000d7c <__aeabi_fmul>
 8010c1e:	4b18      	ldr	r3, [pc, #96]	; (8010c80 <scalbnf+0x8c>)
 8010c20:	4602      	mov	r2, r0
 8010c22:	429c      	cmp	r4, r3
 8010c24:	db22      	blt.n	8010c6c <scalbnf+0x78>
 8010c26:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010c2a:	3b19      	subs	r3, #25
 8010c2c:	4423      	add	r3, r4
 8010c2e:	2bfe      	cmp	r3, #254	; 0xfe
 8010c30:	dd09      	ble.n	8010c46 <scalbnf+0x52>
 8010c32:	4611      	mov	r1, r2
 8010c34:	4813      	ldr	r0, [pc, #76]	; (8010c84 <scalbnf+0x90>)
 8010c36:	f000 f830 	bl	8010c9a <copysignf>
 8010c3a:	4912      	ldr	r1, [pc, #72]	; (8010c84 <scalbnf+0x90>)
 8010c3c:	f7f0 f89e 	bl	8000d7c <__aeabi_fmul>
 8010c40:	e7e4      	b.n	8010c0c <scalbnf+0x18>
 8010c42:	0ddb      	lsrs	r3, r3, #23
 8010c44:	e7f2      	b.n	8010c2c <scalbnf+0x38>
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	dd05      	ble.n	8010c56 <scalbnf+0x62>
 8010c4a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8010c4e:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8010c52:	4610      	mov	r0, r2
 8010c54:	bd10      	pop	{r4, pc}
 8010c56:	f113 0f16 	cmn.w	r3, #22
 8010c5a:	da09      	bge.n	8010c70 <scalbnf+0x7c>
 8010c5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010c60:	429c      	cmp	r4, r3
 8010c62:	4611      	mov	r1, r2
 8010c64:	dce6      	bgt.n	8010c34 <scalbnf+0x40>
 8010c66:	4808      	ldr	r0, [pc, #32]	; (8010c88 <scalbnf+0x94>)
 8010c68:	f000 f817 	bl	8010c9a <copysignf>
 8010c6c:	4906      	ldr	r1, [pc, #24]	; (8010c88 <scalbnf+0x94>)
 8010c6e:	e7e5      	b.n	8010c3c <scalbnf+0x48>
 8010c70:	3319      	adds	r3, #25
 8010c72:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8010c76:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8010c7a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8010c7e:	e7dd      	b.n	8010c3c <scalbnf+0x48>
 8010c80:	ffff3cb0 	.word	0xffff3cb0
 8010c84:	7149f2ca 	.word	0x7149f2ca
 8010c88:	0da24260 	.word	0x0da24260

08010c8c <copysign>:
 8010c8c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010c94:	ea42 0103 	orr.w	r1, r2, r3
 8010c98:	4770      	bx	lr

08010c9a <copysignf>:
 8010c9a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010c9e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010ca2:	4308      	orrs	r0, r1
 8010ca4:	4770      	bx	lr
	...

08010ca8 <__errno>:
 8010ca8:	4b01      	ldr	r3, [pc, #4]	; (8010cb0 <__errno+0x8>)
 8010caa:	6818      	ldr	r0, [r3, #0]
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop
 8010cb0:	20000198 	.word	0x20000198

08010cb4 <_sbrk>:
 8010cb4:	4b04      	ldr	r3, [pc, #16]	; (8010cc8 <_sbrk+0x14>)
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	6819      	ldr	r1, [r3, #0]
 8010cba:	b909      	cbnz	r1, 8010cc0 <_sbrk+0xc>
 8010cbc:	4903      	ldr	r1, [pc, #12]	; (8010ccc <_sbrk+0x18>)
 8010cbe:	6019      	str	r1, [r3, #0]
 8010cc0:	6818      	ldr	r0, [r3, #0]
 8010cc2:	4402      	add	r2, r0
 8010cc4:	601a      	str	r2, [r3, #0]
 8010cc6:	4770      	bx	lr
 8010cc8:	20000c14 	.word	0x20000c14
 8010ccc:	200015fc 	.word	0x200015fc

08010cd0 <_init>:
 8010cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cd2:	bf00      	nop
 8010cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cd6:	bc08      	pop	{r3}
 8010cd8:	469e      	mov	lr, r3
 8010cda:	4770      	bx	lr

08010cdc <_fini>:
 8010cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cde:	bf00      	nop
 8010ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ce2:	bc08      	pop	{r3}
 8010ce4:	469e      	mov	lr, r3
 8010ce6:	4770      	bx	lr
